
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 c6 f8 00 00       	call   c000f8e6 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 73 8e 02 00       	call   c0028e98 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 2e 9b 02 c0       	mov    ebx,0xc0029b2e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 3c 9b 02 c0    	cmp    ebx,0xc0029b3c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 e5 02 c0       	mov    eax,0xc002e598
c0000049:	3d 98 e5 02 c0       	cmp    eax,0xc002e598
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 e5 02 c0       	push   0xc002e598
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 e5 02 c0       	mov    eax,0xc002e598
c0000075:	2d 98 e5 02 c0       	sub    eax,0xc002e598
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 e5 02 c0       	push   0xc002e598
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c8 eb 02 c0 00 	cmp    BYTE PTR ds:0xc002ebc8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 44 9b 02 c0       	mov    ebx,0xc0029b44
c00000bb:	81 eb 40 9b 02 c0    	sub    ebx,0xc0029b40
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 40 9b 02 c0       	mov    esi,0xc0029b40
c00000ca:	a1 cc eb 02 c0       	mov    eax,ds:0xc002ebcc
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 cc eb 02 c0       	mov    ds:0xc002ebcc,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 cc eb 02 c0       	mov    eax,ds:0xc002ebcc
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 e5 02 c0       	push   0xc002e598
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c8 eb 02 c0 01 	mov    BYTE PTR ds:0xc002ebc8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d0 eb 02 c0       	push   0xc002ebd0
c000012c:	68 98 e5 02 c0       	push   0xc002e598
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 c1 d5 01 00       	call   c001d964 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 f2 22 01 00       	call   c00126ad <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 9f d5 01 00       	call   c001d964 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 47 da 01 00       	call   c001de2b <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 a5 e0 01 00       	call   c001e492 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 10 f0 02 c0 	lgdtd  ds:0xc002f010
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 03 40 01 00       	call   c00145e5 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 e8 eb 02 c0       	mov    ds:0xc002ebe8,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 e8 eb 02 c0    	mov    DWORD PTR ds:0xc002ebe8,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d e8 eb 02 c0    	mov    ebx,DWORD PTR ds:0xc002ebe8
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 60 9b 02 c0 02 	test   BYTE PTR [edx-0x3ffd64a0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 60 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd64a0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 60 9b 02 c0 08 	test   BYTE PTR [edx-0x3ffd64a0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 60 9b 02 c0 04 	test   BYTE PTR [ebx-0x3ffd64a0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 60 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd64a0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 00 ec 02 c0    	mov    ecx,DWORD PTR ds:0xc002ec00
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 00 ec 02 c0    	mov    DWORD PTR ds:0xc002ec00,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 04 ec 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd13fc]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 04 ec 02 c0 	mov    DWORD PTR [eax*4-0x3ffd13fc],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 00 ec 02 c0    	mov    DWORD PTR ds:0xc002ec00,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 2c ec 02 c0    	cmp    DWORD PTR ds:0xc002ec2c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 3c ec 02 c0    	mov    ecx,DWORD PTR ds:0xc002ec3c
c0000e38:	c7 42 0c 34 ec 02 c0 	mov    DWORD PTR [edx+0xc],0xc002ec34
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 3c ec 02 c0    	mov    DWORD PTR ds:0xc002ec3c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 2c ec 02 c0    	mov    DWORD PTR ds:0xc002ec2c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 00 ec 02 c0 02 	test   BYTE PTR ds:0xc002ec00,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 00 ec 02 c0       	mov    eax,0xc002ec00
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 cf e7 00 00       	call   c000f6e8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 11 e7 00 00       	call   c000f6e8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 fb e6 00 00       	call   c000f6e8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 d7 e6 00 00       	call   c000f6e8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 00 ec 02 c0    	mov    edi,DWORD PTR ds:0xc002ec00
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 00 ec 02 c0       	mov    eax,0xc002ec00
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 04 ec 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd13fc]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 04 ec 02 c0 	mov    DWORD PTR [edx*4-0x3ffd13fc],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 34 ec 02 c0 	lea    edx,[eax*8-0x3ffd13cc]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 00 ec 02 c0       	mov    eax,0xc002ec00
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 40 ec 02 c0    	mov    ebx,DWORD PTR ds:0xc002ec40
c00011ba:	81 fb 34 ec 02 c0    	cmp    ebx,0xc002ec34
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 34 ec 02 c0       	cmp    eax,0xc002ec34
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 30 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec30,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 3c ec 02 c0       	mov    ds:0xc002ec3c,eax
c00011f6:	a3 40 ec 02 c0       	mov    ds:0xc002ec40,eax
c00011fb:	a3 30 ec 02 c0       	mov    ds:0xc002ec30,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 34 ec 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ec34
c0001209:	c7 40 0c 34 ec 02 c0 	mov    DWORD PTR [eax+0xc],0xc002ec34
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 40 ec 02 c0       	mov    ds:0xc002ec40,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 34 ec 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ec34
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 f8 eb 02 c0 	lea    ebp,[edx*4-0x3ffd1408]
c000125a:	8b 14 95 00 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1400]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 00 ec 02 c0 	lea    ecx,[edx*4-0x3ffd1400]
c0001275:	8b 14 95 00 ec 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1400]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 34 ef 02 c0 	or     DWORD PTR [edi*4-0x3ffd10cc],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 34 ec 02 c0 	lea    eax,[eax*8-0x3ffd13cc]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 3c ec 02 c0    	mov    DWORD PTR ds:0xc002ec3c,ecx
c000132f:	89 0d 40 ec 02 c0    	mov    DWORD PTR ds:0xc002ec40,ecx
c0001335:	c7 41 08 34 ec 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002ec34
c000133c:	c7 41 0c 34 ec 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002ec34
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 2c ec 02 c0 	lea    edx,[ecx*8-0x3ffd13d4]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 34 ef 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd10cc]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 34 ef 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd10cc]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 2c ec 02 c0 	lea    edx,[eax*4-0x3ffd13d4]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 34 ef 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd10cc],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 3c ec 02 c0    	mov    DWORD PTR ds:0xc002ec3c,edi
c0001402:	89 3d 40 ec 02 c0    	mov    DWORD PTR ds:0xc002ec40,edi
c0001408:	c7 47 08 34 ec 02 c0 	mov    DWORD PTR [edi+0x8],0xc002ec34
c000140f:	c7 47 0c 34 ec 02 c0 	mov    DWORD PTR [edi+0xc],0xc002ec34
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 30 ec 02 c0    	mov    DWORD PTR ds:0xc002ec30,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 2c ec 02 c0       	mov    eax,ds:0xc002ec2c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 2c ec 02 c0    	mov    DWORD PTR ds:0xc002ec2c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 00 ec 02 c0       	mov    edx,0xc002ec00
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 00 ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ec00,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 00 ec 02 c0       	mov    eax,0xc002ec00
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 54 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002ef54
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 54 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ef54,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 54 ef 02 c0    	mov    DWORD PTR ds:0xc002ef54,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 2c ec 02 c0    	cmp    DWORD PTR ds:0xc002ec2c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 2c ec 02 c0    	mov    DWORD PTR ds:0xc002ec2c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 00 ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ec00,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 00 ec 02 c0       	mov    eax,0xc002ec00
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 5c ef 02 c0    	push   DWORD PTR ds:0xc002ef5c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 00 ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ec00,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 00 ec 02 c0       	mov    eax,0xc002ec00
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 5c ef 02 c0       	mov    eax,ds:0xc002ef5c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 00 ec 02 c0       	mov    eax,0xc002ec00
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 2c ec 02 c0 00 	cmp    DWORD PTR ds:0xc002ec2c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 00 ec 02 c0       	mov    eax,0xc002ec00
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 2c ec 02 c0       	mov    eax,ds:0xc002ec2c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 04 ec 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd13fc]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 34 ec 02 c0       	mov    eax,0xc002ec34
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 2c ef 02 c0       	cmp    eax,0xc002ef2c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 68 ef 02 c0       	mov    eax,ds:0xc002ef68
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 50 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002ef50
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 64 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002ef64
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 74 ef 02 c0    	mov    esi,DWORD PTR ds:0xc002ef74
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 00 ec 02 c0       	mov    eax,0xc002ec00
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 64 9c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd639c]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 00 ec 02 c0       	mov    eax,ds:0xc002ec00
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 00 ec 02 c0       	mov    ds:0xc002ec00,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 44 ef 02 c0    	mov    DWORD PTR ds:0xc002ef44,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 48 ef 02 c0    	mov    DWORD PTR ds:0xc002ef48,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 4c ef 02 c0    	mov    DWORD PTR ds:0xc002ef4c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 54 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ef54,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 c0 26 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd940]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 f0 f3 01 00       	jmp    c0020fe2 <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 c0 26 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd940]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 21 f4 01 00       	jmp    c0021029 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 c0 26 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd940]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 49 f4 01 00       	jmp    c0021070 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 ea 52 02 00       	call   c00271f4 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 80 9d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6280]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 80 9d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6280]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 80 9c 02 c0       	mov    edx,0xc0029c80
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba a0 9d 02 c0       	mov    edx,0xc0029da0
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba ec d0 02 c0       	mov    edx,0xc002d0ec
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba ac 9d 02 c0       	mov    edx,0xc0029dac
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 90 9d 02 c0       	mov    edx,0xc0029d90
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 a0 ef 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1060]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 80 ef 02 c0    	mov    ax,ds:0xc002ef80
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 80 ef 02 c0    	mov    ds:0xc002ef80,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 e7 40 02 00       	call   c00271f4 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 b2 9d 02 c0       	mov    eax,0xc0029db2
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad 00 9d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6300]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 bb 9d 02 c0       	mov    eax,0xc0029dbb
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 80 9d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6280]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 b2 2a 02 00       	call   c00271f4 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 90 9d 02 c0       	mov    edx,0xc0029d90
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 80 9c 02 c0       	mov    edx,0xc0029c80
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 90 9c 02 c0       	mov    edx,0xc0029c90
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 a0 ef 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1060]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 a0 ef 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1060],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 79 14 02 00       	call   c00271f4 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 5f 14 02 00       	call   c00271f4 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 d7 9c 02 c0       	mov    eax,0xc0029cd7
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 d0 9c 02 c0       	mov    eax,0xc0029cd0
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 a0 ef 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1060]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be c0 9c 02 c0       	mov    esi,0xc0029cc0
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 a2 fb 01 00       	call   c00271f4 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba a0 9d 02 c0       	mov    edx,0xc0029da0
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba a0 9c 02 c0       	mov    edx,0xc0029ca0
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba b0 9c 02 c0       	mov    edx,0xc0029cb0
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba c2 9d 02 c0       	mov    edx,0xc0029dc2
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba ce 9d 02 c0       	mov    edx,0xc0029dce
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba e2 9d 02 c0       	mov    edx,0xc0029de2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 23 74 00 00       	call   c000f88c <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 1d 74 00 00       	call   c000f89c <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c 00 a1 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a100
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 00 a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a100
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 00 9f 02 c0       	mov    eax,0xc0029f00
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 40 9e 02 c0       	mov    eax,0xc0029e40
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 00 9e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6200]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 62 71 00 00       	call   c000f89c <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 4c 71 00 00       	call   c000f89c <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 f6 04 02 00       	call   c0028cc7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 b9 04 02 00       	call   c0028ca9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 8d 04 02 00       	call   c0028cc7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 40 fb 01 00       	call   c00283cc <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 c2 05 02 00       	call   c0028e60 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 07 04 02 00       	call   c0028cc7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 49 03 02 00       	call   c0028cc7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 16 03 02 00       	call   c0028ca9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 03 02 02 00       	call   c0028cc7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 cb 01 02 00       	call   c0028ca9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 2b 6d 00 00       	call   c000f8bc <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 c6 6c 00 00       	call   c000f89c <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 00 a2 02 c0       	mov    eax,0xc002a200
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 d7 ff 01 00       	call   c0028cc7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 9c ff 01 00       	call   c0028ca9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 60 a6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd59a0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 ac fc 01 00       	call   c0028a5b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 2a f6 01 00       	call   c00283f8 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 e6 fe 01 00       	call   c0028ccb <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 d4 ff 01 00       	call   c0028def <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 be f5 01 00       	call   c00283f8 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 69 fe 01 00       	call   c0028cc5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 4a fe 01 00       	call   c0028cc9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 e0 ff 01 00       	call   c0028e80 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 8a fb 01 00       	call   c0028a5b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 08 f5 01 00       	call   c00283f8 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 c4 fd 01 00       	call   c0028ccb <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 b2 fe 01 00       	call   c0028def <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 9c f4 01 00       	call   c00283f8 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 47 fd 01 00       	call   c0028cc5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 27 fd 01 00       	call   c0028cc9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 bc fe 01 00       	call   c0028e80 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 62 fc 01 00       	call   c0028cc7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 20 fc 01 00       	call   c0028ca9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 08 fc 01 00       	call   c0028cc7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 7a f9 01 00       	call   c0028a5b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 7c ec 01 00       	call   c0027d7b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 df f2 01 00       	call   c00283f8 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 31 f9 01 00       	call   c0028a5b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 37 ec 01 00       	call   c0027d7b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 06 f9 01 00       	call   c0028a5b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 56 fb 01 00       	call   c0028cc5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 33 f2 01 00       	call   c00283cc <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 b5 fc 01 00       	call   c0028e60 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 dc fa 01 00       	call   c0028ca9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 d7 f1 01 00       	call   c00283cc <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 55 f8 01 00       	call   c0028a5b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 d8 f1 01 00       	call   c00283f8 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 2a f8 01 00       	call   c0028a5b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 91 f4 01 00       	call   c00286dc <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 10 eb 01 00       	call   c0027d7b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 70 e4 01 00       	call   c0027710 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 47 fb 01 00       	call   c0028def <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 30 f1 01 00       	call   c00283f8 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 17 fb 01 00       	call   c0028def <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 89 ea 01 00       	call   c0027d7b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 c2 f9 01 00       	call   c0028ccb <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 aa f3 01 00       	call   c00286dc <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 30 ea 01 00       	call   c0027d7b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 1e fb 01 00       	call   c0028e80 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 f0 f6 01 00       	call   c0028a5b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 47 f0 01 00       	call   c00283cc <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 26 f9 01 00       	call   c0028cc7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 bf e9 01 00       	call   c0027d7b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 eb ef 01 00       	call   c00283cc <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 8d fa 01 00       	call   c0028e80 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 3e f6 01 00       	call   c0028a5b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 bb ef 01 00       	call   c00283f8 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 0e f6 01 00       	call   c0028a5b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 14 e9 01 00       	call   c0027d7b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 e4 f5 01 00       	call   c0028a5b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 36 f8 01 00       	call   c0028cc7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 0d ef 01 00       	call   c00283cc <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 8f f9 01 00       	call   c0028e60 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 b6 f7 01 00       	call   c0028ca9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 b0 ee 01 00       	call   c00283cc <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 2e f5 01 00       	call   c0028a5b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 b1 ee 01 00       	call   c00283f8 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 03 f5 01 00       	call   c0028a5b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 6a f1 01 00       	call   c00286dc <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 e9 e7 01 00       	call   c0027d7b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 39 e1 01 00       	call   c0027710 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 10 f8 01 00       	call   c0028def <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 f9 ed 01 00       	call   c00283f8 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 e0 f7 01 00       	call   c0028def <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 52 e7 01 00       	call   c0027d7b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 8b f6 01 00       	call   c0028ccb <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 72 f0 01 00       	call   c00286dc <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 f1 e6 01 00       	call   c0027d7b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 df f7 01 00       	call   c0028e80 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 b1 f3 01 00       	call   c0028a5b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 08 ed 01 00       	call   c00283cc <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 e7 f5 01 00       	call   c0028cc7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 80 e6 01 00       	call   c0027d7b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 ac ec 01 00       	call   c00283cc <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 21 f3 01 00       	call   c0028a5b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 27 e6 01 00       	call   c0027d7b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 c0 a6 02 c0       	mov    eax,0xc002a6c0
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 d4 a6 02 c0       	mov    eax,0xc002a6d4
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 5f 60 00 00       	call   c000f89c <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 61 60 00 00       	call   c000f8bc <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 9c f1 01 00       	call   c0028a5b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 1a eb 01 00       	call   c00283f8 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 ac dd 01 00       	call   c0027710 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 83 f4 01 00       	call   c0028def <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 6c ea 01 00       	call   c00283f8 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 4f f4 01 00       	call   c0028def <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 c1 e3 01 00       	call   c0027d7b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 21 f4 01 00       	call   c0028def <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 10 ea 01 00       	call   c00283f8 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 79 e3 01 00       	call   c0027d7b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 9a dc 01 00       	call   c0027710 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 71 f3 01 00       	call   c0028def <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 5a e9 01 00       	call   c00283f8 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 3d f3 01 00       	call   c0028def <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 af e2 01 00       	call   c0027d7b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 0f f3 01 00       	call   c0028def <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 fe e8 01 00       	call   c00283f8 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 67 e2 01 00       	call   c0027d7b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 45 e2 01 00       	call   c0027d7b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 21 db 01 00       	call   c0027710 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 f8 f1 01 00       	call   c0028def <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 e1 e7 01 00       	call   c00283f8 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 c4 f1 01 00       	call   c0028def <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 36 e1 01 00       	call   c0027d7b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 96 f1 01 00       	call   c0028def <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 7f e7 01 00       	call   c00283f8 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 e8 e0 01 00       	call   c0027d7b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 48 f1 01 00       	call   c0028def <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 31 e7 01 00       	call   c00283f8 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 9a e0 01 00       	call   c0027d7b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 af d9 01 00       	call   c0027710 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 86 f0 01 00       	call   c0028def <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 6f e6 01 00       	call   c00283f8 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 56 f0 01 00       	call   c0028def <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 c8 df 01 00       	call   c0027d7b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 28 f0 01 00       	call   c0028def <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 11 e6 01 00       	call   c00283f8 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 7a df 01 00       	call   c0027d7b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 da ef 01 00       	call   c0028def <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 c3 e5 01 00       	call   c00283f8 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 2c df 01 00       	call   c0027d7b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 00 df 01 00       	call   c0027d7b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 5d e5 01 00       	call   c00283f8 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 19 ee 01 00       	call   c0028ccb <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 a8 de 01 00       	call   c0027d7b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 05 e5 01 00       	call   c00283f8 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 c1 ed 01 00       	call   c0028ccb <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 3b d7 01 00       	call   c0027710 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 12 ee 01 00       	call   c0028def <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 fb e3 01 00       	call   c00283f8 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 de ed 01 00       	call   c0028def <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 50 dd 01 00       	call   c0027d7b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 b0 ed 01 00       	call   c0028def <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 99 e3 01 00       	call   c00283f8 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 02 dd 01 00       	call   c0027d7b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 62 ed 01 00       	call   c0028def <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 4b e3 01 00       	call   c00283f8 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 b4 dc 01 00       	call   c0027d7b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 14 ed 01 00       	call   c0028def <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 fd e2 01 00       	call   c00283f8 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 66 dc 01 00       	call   c0027d7b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 c6 ec 01 00       	call   c0028def <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 af e2 01 00       	call   c00283f8 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 18 dc 01 00       	call   c0027d7b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 1a d5 01 00       	call   c0027710 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 f1 eb 01 00       	call   c0028def <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 da e1 01 00       	call   c00283f8 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 c1 eb 01 00       	call   c0028def <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 33 db 01 00       	call   c0027d7b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 93 eb 01 00       	call   c0028def <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 7c e1 01 00       	call   c00283f8 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 e5 da 01 00       	call   c0027d7b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 45 eb 01 00       	call   c0028def <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 2e e1 01 00       	call   c00283f8 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 97 da 01 00       	call   c0027d7b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 f7 ea 01 00       	call   c0028def <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 e0 e0 01 00       	call   c00283f8 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 49 da 01 00       	call   c0027d7b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 a9 ea 01 00       	call   c0028def <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 92 e0 01 00       	call   c00283f8 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 fb d9 01 00       	call   c0027d7b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 cf d9 01 00       	call   c0027d7b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 2c e0 01 00       	call   c00283f8 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 e8 e8 01 00       	call   c0028ccb <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 77 d9 01 00       	call   c0027d7b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 d4 df 01 00       	call   c00283f8 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 90 e8 01 00       	call   c0028ccb <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 1e d9 01 00       	call   c0027d7b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 7b df 01 00       	call   c00283f8 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 37 e8 01 00       	call   c0028ccb <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 c5 d8 01 00       	call   c0027d7b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 22 df 01 00       	call   c00283f8 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 de e7 01 00       	call   c0028ccb <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 3c d1 01 00       	call   c0027710 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 13 e8 01 00       	call   c0028def <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 fc dd 01 00       	call   c00283f8 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 df e7 01 00       	call   c0028def <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 51 d7 01 00       	call   c0027d7b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 b1 e7 01 00       	call   c0028def <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 9a dd 01 00       	call   c00283f8 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 03 d7 01 00       	call   c0027d7b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 63 e7 01 00       	call   c0028def <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 4c dd 01 00       	call   c00283f8 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 b5 d6 01 00       	call   c0027d7b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 15 e7 01 00       	call   c0028def <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 fe dc 01 00       	call   c00283f8 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 67 d6 01 00       	call   c0027d7b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 c7 e6 01 00       	call   c0028def <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 b0 dc 01 00       	call   c00283f8 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 19 d6 01 00       	call   c0027d7b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 79 e6 01 00       	call   c0028def <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 62 dc 01 00       	call   c00283f8 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 c8 d5 01 00       	call   c0027d7b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 28 e6 01 00       	call   c0028def <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 11 dc 01 00       	call   c00283f8 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 7a d5 01 00       	call   c0027d7b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 74 ce 01 00       	call   c0027710 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 4b e5 01 00       	call   c0028def <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 34 db 01 00       	call   c00283f8 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 14 e5 01 00       	call   c0028def <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 86 d4 01 00       	call   c0027d7b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 e6 e4 01 00       	call   c0028def <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 cf da 01 00       	call   c00283f8 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 38 d4 01 00       	call   c0027d7b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 98 e4 01 00       	call   c0028def <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 81 da 01 00       	call   c00283f8 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 ea d3 01 00       	call   c0027d7b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 4a e4 01 00       	call   c0028def <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 33 da 01 00       	call   c00283f8 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 9c d3 01 00       	call   c0027d7b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 fc e3 01 00       	call   c0028def <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 e5 d9 01 00       	call   c00283f8 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 4e d3 01 00       	call   c0027d7b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 ae e3 01 00       	call   c0028def <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 97 d9 01 00       	call   c00283f8 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 fd d2 01 00       	call   c0027d7b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 5d e3 01 00       	call   c0028def <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 46 d9 01 00       	call   c00283f8 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 b5 d2 01 00       	call   c0027d7b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 8e d2 01 00       	call   c0027d7b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 ec d8 01 00       	call   c00283f8 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 a8 e1 01 00       	call   c0028ccb <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 37 d2 01 00       	call   c0027d7b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 95 d8 01 00       	call   c00283f8 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 51 e1 01 00       	call   c0028ccb <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 df d1 01 00       	call   c0027d7b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 3d d8 01 00       	call   c00283f8 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 f9 e0 01 00       	call   c0028ccb <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 87 d1 01 00       	call   c0027d7b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 e5 d7 01 00       	call   c00283f8 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 a1 e0 01 00       	call   c0028ccb <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 2f d1 01 00       	call   c0027d7b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 8d d7 01 00       	call   c00283f8 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 49 e0 01 00       	call   c0028ccb <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 dd d0 01 00       	call   c0027d7b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 3b d7 01 00       	call   c00283f8 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 f7 df 01 00       	call   c0028ccb <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 0b c9 01 00       	call   c0027710 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 e2 df 01 00       	call   c0028def <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 cb d5 01 00       	call   c00283f8 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 b2 df 01 00       	call   c0028def <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 24 cf 01 00       	call   c0027d7b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 04 a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd58fc]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 58 df 01 00       	call   c0028def <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 41 d5 01 00       	call   c00283f8 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 ac ce 01 00       	call   c0027d7b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 f9 de 01 00       	call   c0028def <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 e2 d4 01 00       	call   c00283f8 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 4d ce 01 00       	call   c0027d7b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 9a de 01 00       	call   c0028def <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 83 d4 01 00       	call   c00283f8 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 ee cd 01 00       	call   c0027d7b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 3b de 01 00       	call   c0028def <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 24 d4 01 00       	call   c00283f8 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 8f cd 01 00       	call   c0027d7b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 dc dd 01 00       	call   c0028def <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 c5 d3 01 00       	call   c00283f8 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 30 cd 01 00       	call   c0027d7b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 7d dd 01 00       	call   c0028def <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 66 d3 01 00       	call   c00283f8 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 d1 cc 01 00       	call   c0027d7b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 1e dd 01 00       	call   c0028def <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 07 d3 01 00       	call   c00283f8 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 72 cc 01 00       	call   c0027d7b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 bf dc 01 00       	call   c0028def <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 a8 d2 01 00       	call   c00283f8 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 13 cc 01 00       	call   c0027d7b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 1d c5 01 00       	call   c0027710 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 f4 db 01 00       	call   c0028def <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 dd d1 01 00       	call   c00283f8 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 c4 db 01 00       	call   c0028def <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 36 cb 01 00       	call   c0027d7b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 20 a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd58e0]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 69 db 01 00       	call   c0028def <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 52 d1 01 00       	call   c00283f8 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 bd ca 01 00       	call   c0027d7b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 09 db 01 00       	call   c0028def <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 f2 d0 01 00       	call   c00283f8 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 5d ca 01 00       	call   c0027d7b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 a9 da 01 00       	call   c0028def <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 92 d0 01 00       	call   c00283f8 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 fd c9 01 00       	call   c0027d7b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 49 da 01 00       	call   c0028def <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 32 d0 01 00       	call   c00283f8 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 9d c9 01 00       	call   c0027d7b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 e9 d9 01 00       	call   c0028def <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 d2 cf 01 00       	call   c00283f8 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 3d c9 01 00       	call   c0027d7b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 89 d9 01 00       	call   c0028def <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 72 cf 01 00       	call   c00283f8 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 dd c8 01 00       	call   c0027d7b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 29 d9 01 00       	call   c0028def <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 12 cf 01 00       	call   c00283f8 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 7d c8 01 00       	call   c0027d7b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 c9 d8 01 00       	call   c0028def <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 b2 ce 01 00       	call   c00283f8 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 1d c8 01 00       	call   c0027d7b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 3c a7 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd58c4]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 c2 c7 01 00       	call   c0027d7b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 1f ce 01 00       	call   c00283f8 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 db d6 01 00       	call   c0028ccb <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 65 c7 01 00       	call   c0027d7b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 c2 cd 01 00       	call   c00283f8 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 7e d6 01 00       	call   c0028ccb <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 08 c7 01 00       	call   c0027d7b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 65 cd 01 00       	call   c00283f8 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 21 d6 01 00       	call   c0028ccb <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 ab c6 01 00       	call   c0027d7b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 08 cd 01 00       	call   c00283f8 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 c4 d5 01 00       	call   c0028ccb <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 4e c6 01 00       	call   c0027d7b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 ab cc 01 00       	call   c00283f8 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 67 d5 01 00       	call   c0028ccb <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 f1 c5 01 00       	call   c0027d7b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 4e cc 01 00       	call   c00283f8 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 0a d5 01 00       	call   c0028ccb <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 94 c5 01 00       	call   c0027d7b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 f1 cb 01 00       	call   c00283f8 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 ad d4 01 00       	call   c0028ccb <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 37 c5 01 00       	call   c0027d7b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 94 cb 01 00       	call   c00283f8 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 50 d4 01 00       	call   c0028ccb <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 4c cb 01 00       	call   c00283f8 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 c4 d5 01 00       	jmp    c0028e80 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 2e d2 01 00       	call   c0028cc7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 ec d1 01 00       	call   c0028ca9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 83 cf 01 00       	call   c0028a5b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 84 c2 01 00       	call   c0027d7b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 53 cf 01 00       	call   c0028a5b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 ba cb 01 00       	call   c00286dc <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 59 d1 01 00       	call   c0028ca9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 5c d1 01 00       	call   c0028cc7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 2f d1 01 00       	call   c0028cc7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 28 cb 01 00       	call   c00286dc <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 b2 d2 01 00       	call   c0028e80 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 8d d2 01 00       	call   c0028e80 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 5f ce 01 00       	call   c0028a5b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 b6 c7 01 00       	call   c00283cc <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 95 d0 01 00       	call   c0028cc7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 2e c1 01 00       	call   c0027d7b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 52 c7 01 00       	call   c00283cc <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 f4 d1 01 00       	call   c0028e80 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 2c ca 01 00       	call   c00286dc <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 a9 c0 01 00       	call   c0027d7b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 d5 cc 01 00       	call   c0028a5b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 d5 bf 01 00       	call   c0027d7b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 b5 bf 01 00       	call   c0027d7b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 85 cc 01 00       	call   c0028a5b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 d5 ce 01 00       	call   c0028cc5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 b4 c5 01 00       	call   c00283cc <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 36 d0 01 00       	call   c0028e60 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 5d ce 01 00       	call   c0028ca9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 5b c5 01 00       	call   c00283cc <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 d9 cb 01 00       	call   c0028a5b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 5c c5 01 00       	call   c00283f8 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 ae cb 01 00       	call   c0028a5b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 15 c8 01 00       	call   c00286dc <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 94 be 01 00       	call   c0027d7b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 5e cb 01 00       	call   c0028a5b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 aa cd 01 00       	call   c0028cc7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 9f c4 01 00       	call   c00283f8 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 71 c4 01 00       	call   c00283f8 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 aa ca 01 00       	call   c0028a5b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 0e c7 01 00       	call   c00286dc <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 d6 c6 01 00       	call   c00286dc <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 55 bd 01 00       	call   c0027d7b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 42 ce 01 00       	call   c0028e80 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 14 ca 01 00       	call   c0028a5b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 6b c3 01 00       	call   c00283cc <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 4a cc 01 00       	call   c0028cc7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 e2 bc 01 00       	call   c0027d7b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 06 c3 01 00       	call   c00283cc <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 a8 cd 01 00       	call   c0028e80 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 69 cb 01 00       	call   c0028cc7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 27 cb 01 00       	call   c0028ca9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 be c8 01 00       	call   c0028a5b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 bf bb 01 00       	call   c0027d7b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 8e c8 01 00       	call   c0028a5b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 f5 c4 01 00       	call   c00286dc <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 94 ca 01 00       	call   c0028ca9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 97 ca 01 00       	call   c0028cc7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 6a ca 01 00       	call   c0028cc7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 63 c4 01 00       	call   c00286dc <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 ed cb 01 00       	call   c0028e80 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 c8 cb 01 00       	call   c0028e80 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 9a c7 01 00       	call   c0028a5b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 f1 c0 01 00       	call   c00283cc <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 d0 c9 01 00       	call   c0028cc7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 69 ba 01 00       	call   c0027d7b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 8d c0 01 00       	call   c00283cc <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 2f cb 01 00       	call   c0028e80 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 67 c3 01 00       	call   c00286dc <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 e4 b9 01 00       	call   c0027d7b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 0f c6 01 00       	call   c0028a5b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 0f b9 01 00       	call   c0027d7b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 ef b8 01 00       	call   c0027d7b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 bf c5 01 00       	call   c0028a5b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 0f c8 01 00       	call   c0028cc5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 ed be 01 00       	call   c00283cc <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 6f c9 01 00       	call   c0028e60 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 96 c7 01 00       	call   c0028ca9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 93 be 01 00       	call   c00283cc <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 11 c5 01 00       	call   c0028a5b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 94 be 01 00       	call   c00283f8 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 e6 c4 01 00       	call   c0028a5b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 4d c1 01 00       	call   c00286dc <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 cc b7 01 00       	call   c0027d7b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 96 c4 01 00       	call   c0028a5b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 e2 c6 01 00       	call   c0028cc7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 d7 bd 01 00       	call   c00283f8 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 a9 bd 01 00       	call   c00283f8 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 e0 c3 01 00       	call   c0028a5b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 44 c0 01 00       	call   c00286dc <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 11 c0 01 00       	call   c00286dc <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 90 b6 01 00       	call   c0027d7b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 7d c7 01 00       	call   c0028e80 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 4f c3 01 00       	call   c0028a5b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 a6 bc 01 00       	call   c00283cc <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 85 c5 01 00       	call   c0028cc7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 1d b6 01 00       	call   c0027d7b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 41 bc 01 00       	call   c00283cc <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 e3 c6 01 00       	call   c0028e80 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 a4 c4 01 00       	call   c0028cc7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 62 c4 01 00       	call   c0028ca9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 f9 c1 01 00       	call   c0028a5b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 fa b4 01 00       	call   c0027d7b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 c9 c1 01 00       	call   c0028a5b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 30 be 01 00       	call   c00286dc <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 cf c3 01 00       	call   c0028ca9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 d2 c3 01 00       	call   c0028cc7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 a5 c3 01 00       	call   c0028cc7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 9e bd 01 00       	call   c00286dc <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 28 c5 01 00       	call   c0028e80 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 03 c5 01 00       	call   c0028e80 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 d5 c0 01 00       	call   c0028a5b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 2c ba 01 00       	call   c00283cc <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 0b c3 01 00       	call   c0028cc7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 a4 b3 01 00       	call   c0027d7b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 c8 b9 01 00       	call   c00283cc <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 6a c4 01 00       	call   c0028e80 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 a2 bc 01 00       	call   c00286dc <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 1f b3 01 00       	call   c0027d7b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 4a bf 01 00       	call   c0028a5b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 4a b2 01 00       	call   c0027d7b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 2a b2 01 00       	call   c0027d7b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 fa be 01 00       	call   c0028a5b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 4a c1 01 00       	call   c0028cc5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 28 b8 01 00       	call   c00283cc <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 aa c2 01 00       	call   c0028e60 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 d1 c0 01 00       	call   c0028ca9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 ce b7 01 00       	call   c00283cc <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 4c be 01 00       	call   c0028a5b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 cf b7 01 00       	call   c00283f8 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 21 be 01 00       	call   c0028a5b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 88 ba 01 00       	call   c00286dc <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 07 b1 01 00       	call   c0027d7b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 d1 bd 01 00       	call   c0028a5b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 1d c0 01 00       	call   c0028cc7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 12 b7 01 00       	call   c00283f8 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 e4 b6 01 00       	call   c00283f8 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 1b bd 01 00       	call   c0028a5b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 7f b9 01 00       	call   c00286dc <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 4c b9 01 00       	call   c00286dc <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 cb af 01 00       	call   c0027d7b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 b8 c0 01 00       	call   c0028e80 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 8a bc 01 00       	call   c0028a5b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 e1 b5 01 00       	call   c00283cc <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 c0 be 01 00       	call   c0028cc7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 58 af 01 00       	call   c0027d7b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 7c b5 01 00       	call   c00283cc <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 1e c0 01 00       	call   c0028e80 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 df bd 01 00       	call   c0028cc7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 9d bd 01 00       	call   c0028ca9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 34 bb 01 00       	call   c0028a5b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 35 ae 01 00       	call   c0027d7b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 04 bb 01 00       	call   c0028a5b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 6b b7 01 00       	call   c00286dc <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 0a bd 01 00       	call   c0028ca9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 0d bd 01 00       	call   c0028cc7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 e0 bc 01 00       	call   c0028cc7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 d9 b6 01 00       	call   c00286dc <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 63 be 01 00       	call   c0028e80 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 3e be 01 00       	call   c0028e80 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 10 ba 01 00       	call   c0028a5b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 67 b3 01 00       	call   c00283cc <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 46 bc 01 00       	call   c0028cc7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 df ac 01 00       	call   c0027d7b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 03 b3 01 00       	call   c00283cc <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 a5 bd 01 00       	call   c0028e80 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 dd b5 01 00       	call   c00286dc <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 5a ac 01 00       	call   c0027d7b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 85 b8 01 00       	call   c0028a5b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 85 ab 01 00       	call   c0027d7b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 65 ab 01 00       	call   c0027d7b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 35 b8 01 00       	call   c0028a5b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 85 ba 01 00       	call   c0028cc5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 63 b1 01 00       	call   c00283cc <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 e5 bb 01 00       	call   c0028e60 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 0c ba 01 00       	call   c0028ca9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 09 b1 01 00       	call   c00283cc <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 87 b7 01 00       	call   c0028a5b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 0a b1 01 00       	call   c00283f8 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 5c b7 01 00       	call   c0028a5b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 c3 b3 01 00       	call   c00286dc <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 42 aa 01 00       	call   c0027d7b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 0c b7 01 00       	call   c0028a5b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 58 b9 01 00       	call   c0028cc7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 4d b0 01 00       	call   c00283f8 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 1f b0 01 00       	call   c00283f8 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 56 b6 01 00       	call   c0028a5b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 ba b2 01 00       	call   c00286dc <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 87 b2 01 00       	call   c00286dc <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 06 a9 01 00       	call   c0027d7b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 f3 b9 01 00       	call   c0028e80 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 c5 b5 01 00       	call   c0028a5b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 1c af 01 00       	call   c00283cc <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 fb b7 01 00       	call   c0028cc7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 93 a8 01 00       	call   c0027d7b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 b7 ae 01 00       	call   c00283cc <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 59 b9 01 00       	call   c0028e80 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 17 b7 01 00       	call   c0028cc7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 d5 b6 01 00       	call   c0028ca9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 6c b4 01 00       	call   c0028a5b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 6d a7 01 00       	call   c0027d7b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 3c b4 01 00       	call   c0028a5b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 a3 b0 01 00       	call   c00286dc <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 42 b6 01 00       	call   c0028ca9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 45 b6 01 00       	call   c0028cc7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 18 b6 01 00       	call   c0028cc7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 11 b0 01 00       	call   c00286dc <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 9b b7 01 00       	call   c0028e80 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 72 b7 01 00       	call   c0028e80 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 44 b3 01 00       	call   c0028a5b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 9b ac 01 00       	call   c00283cc <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 7a b5 01 00       	call   c0028cc7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 13 a6 01 00       	call   c0027d7b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 3b ac 01 00       	call   c00283cc <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 dd b6 01 00       	call   c0028e80 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 16 af 01 00       	call   c00286dc <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 93 a5 01 00       	call   c0027d7b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 bf b1 01 00       	call   c0028a5b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 bf a4 01 00       	call   c0027d7b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 9f a4 01 00       	call   c0027d7b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 6f b1 01 00       	call   c0028a5b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 a3 b3 01 00       	call   c0028ca9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 9a aa 01 00       	call   c00283cc <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 1c b5 01 00       	call   c0028e60 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 43 b3 01 00       	call   c0028ca9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 3d aa 01 00       	call   c00283cc <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 bb b0 01 00       	call   c0028a5b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 3e aa 01 00       	call   c00283f8 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 90 b0 01 00       	call   c0028a5b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 f7 ac 01 00       	call   c00286dc <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 76 a3 01 00       	call   c0027d7b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 40 b0 01 00       	call   c0028a5b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 8c b2 01 00       	call   c0028cc7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 81 a9 01 00       	call   c00283f8 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 53 a9 01 00       	call   c00283f8 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 97 af 01 00       	call   c0028a5b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 fe ab 01 00       	call   c00286dc <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 e7 a8 01 00       	call   c00283f8 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 a3 b1 01 00       	call   c0028ccb <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 96 ab 01 00       	call   c00286dc <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 15 a2 01 00       	call   c0027d7b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 02 b3 01 00       	call   c0028e80 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 d4 ae 01 00       	call   c0028a5b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 2b a8 01 00       	call   c00283cc <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 0a b1 01 00       	call   c0028cc7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 a2 a1 01 00       	call   c0027d7b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 ca a7 01 00       	call   c00283cc <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 6c b2 01 00       	call   c0028e80 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 64 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd589c]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 58 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd58a8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 25 1c 00 00       	call   c000f89c <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 1f af 01 00       	call   c0028cc7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 dd ae 01 00       	call   c0028ca9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 c9 ae 01 00       	call   c0028cc7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 3b ac 01 00       	call   c0028a5b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 b9 a5 01 00       	call   c00283f8 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 0b ac 01 00       	call   c0028a5b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 11 9f 01 00       	call   c0027d7b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 e0 ab 01 00       	call   c0028a5b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 30 ae 01 00       	call   c0028cc5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 11 a5 01 00       	call   c00283cc <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 93 af 01 00       	call   c0028e60 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 ba ad 01 00       	call   c0028ca9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 b9 a4 01 00       	call   c00283cc <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 37 ab 01 00       	call   c0028a5b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 ba a4 01 00       	call   c00283f8 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 0c ab 01 00       	call   c0028a5b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 73 a7 01 00       	call   c00286dc <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 f2 9d 01 00       	call   c0027d7b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 1a a7 01 00       	call   c00286dc <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 a0 9d 01 00       	call   c0027d7b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 8e ae 01 00       	call   c0028e80 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 60 aa 01 00       	call   c0028a5b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 b7 a3 01 00       	call   c00283cc <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 96 ac 01 00       	call   c0028cc7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 2f 9d 01 00       	call   c0027d7b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 5b a3 01 00       	call   c00283cc <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 fd ad 01 00       	call   c0028e80 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 aa a9 01 00       	call   c0028a5b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 27 a3 01 00       	call   c00283f8 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 78 a9 01 00       	call   c0028a5b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 7e 9c 01 00       	call   c0027d7b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 4e a9 01 00       	call   c0028a5b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 a2 ab 01 00       	call   c0028cc9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 7b a2 01 00       	call   c00283cc <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 fd ac 01 00       	call   c0028e60 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 24 ab 01 00       	call   c0028ca9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 22 a2 01 00       	call   c00283cc <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 a0 a8 01 00       	call   c0028a5b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 23 a2 01 00       	call   c00283f8 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 75 a8 01 00       	call   c0028a5b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 dc a4 01 00       	call   c00286dc <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 5b 9b 01 00       	call   c0027d7b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 77 a4 01 00       	call   c00286dc <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 f6 9a 01 00       	call   c0027d7b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 e4 ab 01 00       	call   c0028e80 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 b6 a7 01 00       	call   c0028a5b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 0d a1 01 00       	call   c00283cc <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 ec a9 01 00       	call   c0028cc7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 85 9a 01 00       	call   c0027d7b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 b1 a0 01 00       	call   c00283cc <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 22 a7 01 00       	call   c0028a5b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 28 9a 01 00       	call   c0027d7b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 7e a8 02 c0       	mov    eax,0xc002a87e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 8f a8 02 c0       	mov    eax,0xc002a88f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 67 14 00 00       	call   c000f89c <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 69 14 00 00       	call   c000f8bc <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 e3 13 00 00       	jmp    c000f88c <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 fe 13 00 00       	jmp    c000f8ac <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c000e4e3:	ff 05 24 25 03 c0    	inc    DWORD PTR ds:0xc0032524
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 24 25 03 c0       	mov    ds:0xc0032524,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 20 25 03 c0 00 	cmp    DWORD PTR ds:0xc0032520,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c000e50d:	e8 a6 fb 00 00       	call   c001e0b8 <schedule()>
c000e512:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c000e517:	48                   	dec    eax
c000e518:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 70 f1 02 c0       	mov    eax,ds:0xc002f170
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 c6 a8 02 c0       	push   0xc002a8c6
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 08 f0 02 c0       	mov    eax,0xc002f008
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 cf a8 02 c0       	push   0xc002a8cf
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 f4 71 02 c0       	mov    eax,0xc00271f4
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 d9 a8 02 c0       	push   0xc002a8d9
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 28 6f 02 c0       	mov    eax,0xc0026f28
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 e2 a8 02 c0       	push   0xc002a8e2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 f4 72 02 c0       	mov    eax,0xc00272f4
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 ec a8 02 c0       	push   0xc002a8ec
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 74 70 02 c0       	mov    eax,0xc0027074
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 f5 a8 02 c0       	push   0xc002a8f5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 0c f0 02 c0       	mov    eax,0xc002f00c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 02 a9 02 c0       	push   0xc002a902
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 0d f0 02 c0       	mov    eax,0xc002f00d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 25 58 00 00       	call   c0013e92 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 3f 07 00 00       	push   0x73f
c000e69e:	e8 e9 11 00 00       	call   c000f88c <malloc>
c000e6a3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6aa:	89 c3                	mov    ebx,eax
c000e6ac:	ff 35 50 25 03 c0    	push   DWORD PTR ds:0xc0032550
c000e6b2:	68 0f a9 02 c0       	push   0xc002a90f
c000e6b7:	6a 01                	push   0x1
c000e6b9:	50                   	push   eax
c000e6ba:	e8 bd f5 00 00       	call   c001dc7c <Process::Process(bool, char const*, Process*, char**)>
c000e6bf:	83 c4 20             	add    esp,0x20
c000e6c2:	68 ff 00 00 00       	push   0xff
c000e6c7:	6a 00                	push   0x0
c000e6c9:	68 1f f2 00 c0       	push   0xc000f21f
c000e6ce:	53                   	push   ebx
c000e6cf:	e8 a0 f7 00 00       	call   c001de74 <Process::createThread(void (*)(void*), void*, int)>
c000e6d4:	6a 7a                	push   0x7a
c000e6d6:	6a 00                	push   0x0
c000e6d8:	68 f2 e8 01 c0       	push   0xc001e8f2
c000e6dd:	ff 35 50 25 03 c0    	push   DWORD PTR ds:0xc0032550
c000e6e3:	e8 8c f7 00 00       	call   c001de74 <Process::createThread(void (*)(void*), void*, int)>
c000e6e8:	83 c4 20             	add    esp,0x20
c000e6eb:	a3 08 25 03 c0       	mov    ds:0xc0032508,eax
c000e6f0:	c6 05 0d f0 02 c0 01 	mov    BYTE PTR ds:0xc002f00d,0x1
c000e6f7:	e8 2d 06 01 00       	call   c001ed29 <Vm::initialise8086()>
c000e6fc:	e8 59 45 00 00       	call   c0012c5a <Fs::initVFS()>
c000e701:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c000e706:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e70c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e70e:	6a 00                	push   0x0
c000e710:	6a 00                	push   0x0
c000e712:	6a 00                	push   0x0
c000e714:	50                   	push   eax
c000e715:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e718:	e8 ec dd 00 00       	call   c001c509 <Sys::loadSyscalls()>
c000e71d:	e8 aa ba 00 00       	call   c001a1cc <Krnl::loadSystemEnv()>
c000e722:	83 c4 0c             	add    esp,0xc
c000e725:	6a 3a                	push   0x3a
c000e727:	68 1c a9 02 c0       	push   0xc002a91c
c000e72c:	68 25 a9 02 c0       	push   0xc002a925
c000e731:	e8 85 c9 00 00       	call   c001b0bb <Reg::readIntWithDefault(char*, char*, int)>
c000e736:	89 04 24             	mov    DWORD PTR [esp],eax
c000e739:	e8 0c 50 00 00       	call   c001374a <User::loadClockSettings(int)>
c000e73e:	58                   	pop    eax
c000e73f:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c000e744:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e74a:	e8 03 57 00 00       	call   c0013e52 <Device::loadDriversForAll()>
c000e74f:	e8 c4 b5 00 00       	call   c0019d18 <Krnl::startCPUs()>
c000e754:	5a                   	pop    edx
c000e755:	8b 1d 08 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f008
c000e75b:	59                   	pop    ecx
c000e75c:	6a 01                	push   0x1
c000e75e:	68 2d a9 02 c0       	push   0xc002a92d
c000e763:	e8 71 ef 00 00       	call   c001d6d9 <Thr::loadDLL(char const*, bool)>
c000e768:	5a                   	pop    edx
c000e769:	59                   	pop    ecx
c000e76a:	53                   	push   ebx
c000e76b:	50                   	push   eax
c000e76c:	e8 93 f1 00 00       	call   c001d904 <Thr::executeDLL(unsigned long, void*)>
c000e771:	83 c4 10             	add    esp,0x10
c000e774:	83 ec 0c             	sub    esp,0xc
c000e777:	6a 02                	push   0x2
c000e779:	e8 39 fb 00 00       	call   c001e2b7 <blockTask(TaskState)>
c000e77e:	83 c4 10             	add    esp,0x10
c000e781:	eb f1                	jmp    c000e774 <Krnl::firstTask()+0xe0>
c000e783:	90                   	nop

c000e784 <Computer::Computer()>:
c000e784:	83 ec 0c             	sub    esp,0xc
c000e787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78b:	83 ec 08             	sub    esp,0x8
c000e78e:	68 49 a9 02 c0       	push   0xc002a949
c000e793:	50                   	push   eax
c000e794:	e8 73 57 00 00       	call   c0013f0c <Device::Device(char const*)>
c000e799:	83 c4 10             	add    esp,0x10
c000e79c:	ba e8 aa 02 c0       	mov    edx,0xc002aae8
c000e7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a5:	89 10                	mov    DWORD PTR [eax],edx
c000e7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ab:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b9:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e7cd:	83 ca 04             	or     edx,0x4
c000e7d0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7e0:	0f b6 d0             	movzx  edx,al
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7f8:	0f b6 d0             	movzx  edx,al
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e808:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e80e:	8d 50 01             	lea    edx,[eax+0x1]
c000e811:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e815:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e81b:	0f b6 d0             	movzx  edx,al
c000e81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e822:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e826:	83 e1 3f             	and    ecx,0x3f
c000e829:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e831:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e837:	0f b6 d0             	movzx  edx,al
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e849:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84f:	0f b6 d0             	movzx  edx,al
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e865:	8d 50 01             	lea    edx,[eax+0x1]
c000e868:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e86c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e872:	0f b6 d0             	movzx  edx,al
c000e875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e879:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e87d:	83 e1 3f             	and    ecx,0x3f
c000e880:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e888:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e88e:	0f b6 d0             	movzx  edx,al
c000e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e895:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a6:	0f b6 d0             	movzx  edx,al
c000e8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ad:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8bc:	8d 50 01             	lea    edx,[eax+0x1]
c000e8bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8c3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c9:	0f b6 d0             	movzx  edx,al
c000e8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8d4:	83 e1 3f             	and    ecx,0x3f
c000e8d7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8db:	90                   	nop
c000e8dc:	83 c4 0c             	add    esp,0xc
c000e8df:	c3                   	ret    

c000e8e0 <Computer::setBootMessage(char const*)>:
c000e8e0:	c3                   	ret    
c000e8e1:	90                   	nop

c000e8e2 <Computer::detectFeatures()>:
c000e8e2:	55                   	push   ebp
c000e8e3:	57                   	push   edi
c000e8e4:	56                   	push   esi
c000e8e5:	53                   	push   ebx
c000e8e6:	83 ec 1c             	sub    esp,0x1c
c000e8e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8ed:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8f7:	e8 e8 19 ff ff       	call   c00002e4 <detectCPUID>
c000e8fc:	85 c0                	test   eax,eax
c000e8fe:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e904:	0f 95 c2             	setne  dl
c000e907:	83 e0 fd             	and    eax,0xfffffffd
c000e90a:	d1 e2                	shl    edx,1
c000e90c:	09 d0                	or     eax,edx
c000e90e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e914:	a8 02                	test   al,0x2
c000e916:	75 46                	jne    c000e95e <Computer::detectFeatures()+0x7c>
c000e918:	f6 05 21 f0 02 c0 04 	test   BYTE PTR ds:0xc002f021,0x4
c000e91f:	74 07                	je     c000e928 <Computer::detectFeatures()+0x46>
c000e921:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e928:	e8 89 85 01 00       	call   c0026eb6 <x87Detect>
c000e92d:	83 e0 01             	and    eax,0x1
c000e930:	c1 e0 04             	shl    eax,0x4
c000e933:	88 c2                	mov    dl,al
c000e935:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e93b:	83 e0 ef             	and    eax,0xffffffef
c000e93e:	09 d0                	or     eax,edx
c000e940:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e946:	a8 10                	test   al,0x10
c000e948:	0f 85 2a 01 00 00    	jne    c000ea78 <Computer::detectFeatures()+0x196>
c000e94e:	84 c0                	test   al,al
c000e950:	0f 88 45 01 00 00    	js     c000ea9b <Computer::detectFeatures()+0x1b9>
c000e956:	83 c4 1c             	add    esp,0x1c
c000e959:	5b                   	pop    ebx
c000e95a:	5e                   	pop    esi
c000e95b:	5f                   	pop    edi
c000e95c:	5d                   	pop    ebp
c000e95d:	c3                   	ret    
c000e95e:	83 ec 0c             	sub    esp,0xc
c000e961:	6a 20                	push   0x20
c000e963:	e8 c0 a0 00 00       	call   c0018a28 <CPU::cpuidCheckEDX(unsigned int)>
c000e968:	83 e0 01             	and    eax,0x1
c000e96b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e972:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e978:	83 e0 f7             	and    eax,0xfffffff7
c000e97b:	09 d0                	or     eax,edx
c000e97d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e983:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e98a:	e8 99 a0 00 00       	call   c0018a28 <CPU::cpuidCheckEDX(unsigned int)>
c000e98f:	83 e0 01             	and    eax,0x1
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e99a:	83 e0 fe             	and    eax,0xfffffffe
c000e99d:	09 d0                	or     eax,edx
c000e99f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9a5:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9ac:	e8 77 a0 00 00       	call   c0018a28 <CPU::cpuidCheckEDX(unsigned int)>
c000e9b1:	c1 e0 07             	shl    eax,0x7
c000e9b4:	88 c2                	mov    dl,al
c000e9b6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9bc:	83 e0 7f             	and    eax,0x7f
c000e9bf:	09 d0                	or     eax,edx
c000e9c1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9c7:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e9ce:	e8 55 a0 00 00       	call   c0018a28 <CPU::cpuidCheckEDX(unsigned int)>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	83 e0 01             	and    eax,0x1
c000e9d9:	c1 e0 05             	shl    eax,0x5
c000e9dc:	88 c2                	mov    dl,al
c000e9de:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9e4:	83 e0 df             	and    eax,0xffffffdf
c000e9e7:	09 d0                	or     eax,edx
c000e9e9:	f7 05 20 f0 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002f020,0x401
c000e9f3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9f9:	0f 84 c2 00 00 00    	je     c000eac1 <Computer::detectFeatures()+0x1df>
c000e9ff:	83 e0 fe             	and    eax,0xfffffffe
c000ea02:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea08:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea0e:	88 c2                	mov    dl,al
c000ea10:	83 e2 09             	and    edx,0x9
c000ea13:	fe ca                	dec    dl
c000ea15:	75 09                	jne    c000ea20 <Computer::detectFeatures()+0x13e>
c000ea17:	83 e0 fe             	and    eax,0xfffffffe
c000ea1a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea20:	83 ec 0c             	sub    esp,0xc
c000ea23:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea27:	50                   	push   eax
c000ea28:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea2c:	55                   	push   ebp
c000ea2d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea31:	57                   	push   edi
c000ea32:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea36:	56                   	push   esi
c000ea37:	68 00 00 00 80       	push   0x80000000
c000ea3c:	e8 63 9f 00 00       	call   c00189a4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea41:	83 c4 20             	add    esp,0x20
c000ea44:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea4f:	0f 86 c3 fe ff ff    	jbe    c000e918 <Computer::detectFeatures()+0x36>
c000ea55:	83 ec 0c             	sub    esp,0xc
c000ea58:	50                   	push   eax
c000ea59:	55                   	push   ebp
c000ea5a:	57                   	push   edi
c000ea5b:	56                   	push   esi
c000ea5c:	68 01 00 00 80       	push   0x80000001
c000ea61:	e8 3e 9f 00 00       	call   c00189a4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea66:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea70:	83 c4 20             	add    esp,0x20
c000ea73:	e9 a0 fe ff ff       	jmp    c000e918 <Computer::detectFeatures()+0x36>
c000ea78:	e8 f3 83 01 00       	call   c0026e70 <absolutelyNoChanceInHell>
c000ea7d:	88 c2                	mov    dl,al
c000ea7f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea85:	c1 e2 07             	shl    edx,0x7
c000ea88:	83 e0 7f             	and    eax,0x7f
c000ea8b:	09 d0                	or     eax,edx
c000ea8d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea93:	84 c0                	test   al,al
c000ea95:	0f 89 bb fe ff ff    	jns    c000e956 <Computer::detectFeatures()+0x74>
c000ea9b:	e8 b0 83 01 00       	call   c0026e50 <avxDetect>
c000eaa0:	83 e0 01             	and    eax,0x1
c000eaa3:	c1 e0 05             	shl    eax,0x5
c000eaa6:	88 c2                	mov    dl,al
c000eaa8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eaae:	83 e0 df             	and    eax,0xffffffdf
c000eab1:	09 d0                	or     eax,edx
c000eab3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eab9:	83 c4 1c             	add    esp,0x1c
c000eabc:	5b                   	pop    ebx
c000eabd:	5e                   	pop    esi
c000eabe:	5f                   	pop    edi
c000eabf:	5d                   	pop    ebp
c000eac0:	c3                   	ret    
c000eac1:	83 ec 0c             	sub    esp,0xc
c000eac4:	68 00 02 00 00       	push   0x200
c000eac9:	e8 5a 9f 00 00       	call   c0018a28 <CPU::cpuidCheckEDX(unsigned int)>
c000eace:	83 c4 10             	add    esp,0x10
c000ead1:	83 e0 01             	and    eax,0x1
c000ead4:	88 c2                	mov    dl,al
c000ead6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eadc:	83 e0 fe             	and    eax,0xfffffffe
c000eadf:	09 d0                	or     eax,edx
c000eae1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae7:	e9 1c ff ff ff       	jmp    c000ea08 <Computer::detectFeatures()+0x126>

c000eaec <Computer::displayFeatures()>:
c000eaec:	53                   	push   ebx
c000eaed:	83 ec 14             	sub    esp,0x14
c000eaf0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaf4:	68 59 a9 02 c0       	push   0xc002a959
c000eaf9:	e8 d1 3d 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000eafe:	83 c4 10             	add    esp,0x10
c000eb01:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb08:	0f 85 73 02 00 00    	jne    c000ed81 <Computer::displayFeatures()+0x295>
c000eb0e:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000eb13:	83 ec 08             	sub    esp,0x8
c000eb16:	50                   	push   eax
c000eb17:	68 6c a9 02 c0       	push   0xc002a96c
c000eb1c:	e8 ae 3d 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000eb21:	83 c4 10             	add    esp,0x10
c000eb24:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb2b:	0f 85 8c 02 00 00    	jne    c000edbd <Computer::displayFeatures()+0x2d1>
c000eb31:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000eb36:	83 ec 08             	sub    esp,0x8
c000eb39:	50                   	push   eax
c000eb3a:	68 7d a9 02 c0       	push   0xc002a97d
c000eb3f:	e8 8b 3d 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000eb44:	83 c4 10             	add    esp,0x10
c000eb47:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb4e:	0f 85 5f 02 00 00    	jne    c000edb3 <Computer::displayFeatures()+0x2c7>
c000eb54:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000eb59:	83 ec 08             	sub    esp,0x8
c000eb5c:	50                   	push   eax
c000eb5d:	68 8e a9 02 c0       	push   0xc002a98e
c000eb62:	e8 68 3d 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb71:	0f 85 32 02 00 00    	jne    c000eda9 <Computer::displayFeatures()+0x2bd>
c000eb77:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000eb7c:	83 ec 08             	sub    esp,0x8
c000eb7f:	50                   	push   eax
c000eb80:	68 9f a9 02 c0       	push   0xc002a99f
c000eb85:	e8 45 3d 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000eb8a:	83 c4 10             	add    esp,0x10
c000eb8d:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb94:	0f 85 05 02 00 00    	jne    c000ed9f <Computer::displayFeatures()+0x2b3>
c000eb9a:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000eb9f:	83 ec 08             	sub    esp,0x8
c000eba2:	50                   	push   eax
c000eba3:	68 b0 a9 02 c0       	push   0xc002a9b0
c000eba8:	e8 22 3d 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000ebad:	83 c4 10             	add    esp,0x10
c000ebb0:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ebb7:	0f 85 d8 01 00 00    	jne    c000ed95 <Computer::displayFeatures()+0x2a9>
c000ebbd:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ebc2:	83 ec 08             	sub    esp,0x8
c000ebc5:	50                   	push   eax
c000ebc6:	68 c1 a9 02 c0       	push   0xc002a9c1
c000ebcb:	e8 ff 3c 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000ebd0:	83 c4 10             	add    esp,0x10
c000ebd3:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ebda:	0f 85 ab 01 00 00    	jne    c000ed8b <Computer::displayFeatures()+0x29f>
c000ebe0:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ebe5:	83 ec 08             	sub    esp,0x8
c000ebe8:	50                   	push   eax
c000ebe9:	68 d2 a9 02 c0       	push   0xc002a9d2
c000ebee:	e8 dc 3c 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000ebf3:	83 c4 10             	add    esp,0x10
c000ebf6:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebfd:	0f 88 1b 02 00 00    	js     c000ee1e <Computer::displayFeatures()+0x332>
c000ec03:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ec08:	83 ec 08             	sub    esp,0x8
c000ec0b:	50                   	push   eax
c000ec0c:	68 e3 a9 02 c0       	push   0xc002a9e3
c000ec11:	e8 b9 3c 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000ec16:	83 c4 10             	add    esp,0x10
c000ec19:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec20:	0f 85 a1 01 00 00    	jne    c000edc7 <Computer::displayFeatures()+0x2db>
c000ec26:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ec2b:	83 ec 08             	sub    esp,0x8
c000ec2e:	50                   	push   eax
c000ec2f:	68 f4 a9 02 c0       	push   0xc002a9f4
c000ec34:	e8 96 3c 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000ec39:	83 c4 10             	add    esp,0x10
c000ec3c:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec43:	0f 85 cb 01 00 00    	jne    c000ee14 <Computer::displayFeatures()+0x328>
c000ec49:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ec4e:	83 ec 08             	sub    esp,0x8
c000ec51:	50                   	push   eax
c000ec52:	68 05 aa 02 c0       	push   0xc002aa05
c000ec57:	e8 73 3c 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000ec5c:	83 c4 10             	add    esp,0x10
c000ec5f:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec66:	0f 85 9e 01 00 00    	jne    c000ee0a <Computer::displayFeatures()+0x31e>
c000ec6c:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ec71:	83 ec 08             	sub    esp,0x8
c000ec74:	50                   	push   eax
c000ec75:	68 16 aa 02 c0       	push   0xc002aa16
c000ec7a:	e8 50 3c 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000ec7f:	83 c4 10             	add    esp,0x10
c000ec82:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec89:	0f 85 71 01 00 00    	jne    c000ee00 <Computer::displayFeatures()+0x314>
c000ec8f:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ec94:	83 ec 08             	sub    esp,0x8
c000ec97:	50                   	push   eax
c000ec98:	68 27 aa 02 c0       	push   0xc002aa27
c000ec9d:	e8 2d 3c 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000eca2:	83 c4 10             	add    esp,0x10
c000eca5:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ecac:	0f 85 44 01 00 00    	jne    c000edf6 <Computer::displayFeatures()+0x30a>
c000ecb2:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ecb7:	83 ec 08             	sub    esp,0x8
c000ecba:	50                   	push   eax
c000ecbb:	68 38 aa 02 c0       	push   0xc002aa38
c000ecc0:	e8 0a 3c 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000ecc5:	83 c4 10             	add    esp,0x10
c000ecc8:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000eccf:	0f 85 17 01 00 00    	jne    c000edec <Computer::displayFeatures()+0x300>
c000ecd5:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ecda:	83 ec 08             	sub    esp,0x8
c000ecdd:	50                   	push   eax
c000ecde:	68 49 aa 02 c0       	push   0xc002aa49
c000ece3:	e8 e7 3b 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000ece8:	83 c4 10             	add    esp,0x10
c000eceb:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ecf2:	0f 85 ea 00 00 00    	jne    c000ede2 <Computer::displayFeatures()+0x2f6>
c000ecf8:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ecfd:	83 ec 08             	sub    esp,0x8
c000ed00:	50                   	push   eax
c000ed01:	68 5a aa 02 c0       	push   0xc002aa5a
c000ed06:	e8 c4 3b 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000ed0b:	83 c4 10             	add    esp,0x10
c000ed0e:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed15:	0f 88 0d 01 00 00    	js     c000ee28 <Computer::displayFeatures()+0x33c>
c000ed1b:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ed20:	83 ec 08             	sub    esp,0x8
c000ed23:	50                   	push   eax
c000ed24:	68 6b aa 02 c0       	push   0xc002aa6b
c000ed29:	e8 a1 3b 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000ed2e:	83 c4 10             	add    esp,0x10
c000ed31:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed38:	0f 85 9a 00 00 00    	jne    c000edd8 <Computer::displayFeatures()+0x2ec>
c000ed3e:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ed43:	83 ec 08             	sub    esp,0x8
c000ed46:	50                   	push   eax
c000ed47:	68 7c aa 02 c0       	push   0xc002aa7c
c000ed4c:	e8 7e 3b 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000ed51:	83 c4 10             	add    esp,0x10
c000ed54:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed5b:	75 74                	jne    c000edd1 <Computer::displayFeatures()+0x2e5>
c000ed5d:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c000ed62:	83 ec 08             	sub    esp,0x8
c000ed65:	50                   	push   eax
c000ed66:	68 8d aa 02 c0       	push   0xc002aa8d
c000ed6b:	e8 5f 3b 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000ed70:	c7 44 24 20 70 c4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c470
c000ed78:	83 c4 18             	add    esp,0x18
c000ed7b:	5b                   	pop    ebx
c000ed7c:	e9 4e 3b 00 00       	jmp    c00128cf <Dbg::kprintf(char const*, ...)>
c000ed81:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ed86:	e9 88 fd ff ff       	jmp    c000eb13 <Computer::displayFeatures()+0x27>
c000ed8b:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ed90:	e9 50 fe ff ff       	jmp    c000ebe5 <Computer::displayFeatures()+0xf9>
c000ed95:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ed9a:	e9 23 fe ff ff       	jmp    c000ebc2 <Computer::displayFeatures()+0xd6>
c000ed9f:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000eda4:	e9 f6 fd ff ff       	jmp    c000eb9f <Computer::displayFeatures()+0xb3>
c000eda9:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000edae:	e9 c9 fd ff ff       	jmp    c000eb7c <Computer::displayFeatures()+0x90>
c000edb3:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000edb8:	e9 9c fd ff ff       	jmp    c000eb59 <Computer::displayFeatures()+0x6d>
c000edbd:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000edc2:	e9 6f fd ff ff       	jmp    c000eb36 <Computer::displayFeatures()+0x4a>
c000edc7:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000edcc:	e9 5a fe ff ff       	jmp    c000ec2b <Computer::displayFeatures()+0x13f>
c000edd1:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000edd6:	eb 8a                	jmp    c000ed62 <Computer::displayFeatures()+0x276>
c000edd8:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000eddd:	e9 61 ff ff ff       	jmp    c000ed43 <Computer::displayFeatures()+0x257>
c000ede2:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ede7:	e9 11 ff ff ff       	jmp    c000ecfd <Computer::displayFeatures()+0x211>
c000edec:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000edf1:	e9 e4 fe ff ff       	jmp    c000ecda <Computer::displayFeatures()+0x1ee>
c000edf6:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000edfb:	e9 b7 fe ff ff       	jmp    c000ecb7 <Computer::displayFeatures()+0x1cb>
c000ee00:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ee05:	e9 8a fe ff ff       	jmp    c000ec94 <Computer::displayFeatures()+0x1a8>
c000ee0a:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ee0f:	e9 5d fe ff ff       	jmp    c000ec71 <Computer::displayFeatures()+0x185>
c000ee14:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ee19:	e9 30 fe ff ff       	jmp    c000ec4e <Computer::displayFeatures()+0x162>
c000ee1e:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ee23:	e9 e0 fd ff ff       	jmp    c000ec08 <Computer::displayFeatures()+0x11c>
c000ee28:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c000ee2d:	e9 ee fe ff ff       	jmp    c000ed20 <Computer::displayFeatures()+0x234>

c000ee32 <Computer::rdmsr(unsigned int)>:
c000ee32:	83 ec 0c             	sub    esp,0xc
c000ee35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee39:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee40:	74 0a                	je     c000ee4c <Computer::rdmsr(unsigned int)+0x1a>
c000ee42:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee46:	0f 32                	rdmsr  
c000ee48:	83 c4 0c             	add    esp,0xc
c000ee4b:	c3                   	ret    
c000ee4c:	83 ec 0c             	sub    esp,0xc
c000ee4f:	68 9e aa 02 c0       	push   0xc002aa9e
c000ee54:	e8 ac b4 00 00       	call   c001a305 <Krnl::panic(char const*)>
c000ee59:	83 c4 10             	add    esp,0x10
c000ee5c:	eb e4                	jmp    c000ee42 <Computer::rdmsr(unsigned int)+0x10>

c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee5e:	57                   	push   edi
c000ee5f:	56                   	push   esi
c000ee60:	52                   	push   edx
c000ee61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee65:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee6d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee74:	74 0e                	je     c000ee84 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee76:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee7a:	89 f0                	mov    eax,esi
c000ee7c:	89 fa                	mov    edx,edi
c000ee7e:	0f 30                	wrmsr  
c000ee80:	58                   	pop    eax
c000ee81:	5e                   	pop    esi
c000ee82:	5f                   	pop    edi
c000ee83:	c3                   	ret    
c000ee84:	83 ec 0c             	sub    esp,0xc
c000ee87:	68 a4 aa 02 c0       	push   0xc002aaa4
c000ee8c:	e8 74 b4 00 00       	call   c001a305 <Krnl::panic(char const*)>
c000ee91:	83 c4 10             	add    esp,0x10
c000ee94:	eb e0                	jmp    c000ee76 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee96 <Computer::nmiEnabled()>:
c000ee96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee9a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eea0:	c3                   	ret    
c000eea1:	90                   	nop

c000eea2 <Computer::readCMOS(unsigned char)>:
c000eea2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eea6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eead:	19 c0                	sbb    eax,eax
c000eeaf:	83 e0 80             	and    eax,0xffffff80
c000eeb2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eeb6:	e6 70                	out    0x70,al
c000eeb8:	e4 71                	in     al,0x71
c000eeba:	c3                   	ret    
c000eebb:	90                   	nop

c000eebc <Computer::enableNMI(bool)>:
c000eebc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eec4:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eeca:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eed2:	eb ce                	jmp    c000eea2 <Computer::readCMOS(unsigned char)>

c000eed4 <Computer::open(int, int, void*)>:
c000eed4:	56                   	push   esi
c000eed5:	53                   	push   ebx
c000eed6:	83 ec 10             	sub    esp,0x10
c000eed9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eedd:	f6 05 20 f0 02 c0 04 	test   BYTE PTR ds:0xc002f020,0x4
c000eee4:	68 64 12 00 00       	push   0x1264
c000eee9:	0f 94 05 40 df 02 c0 	sete   BYTE PTR ds:0xc002df40
c000eef0:	e8 97 09 00 00       	call   c000f88c <malloc>
c000eef5:	89 04 24             	mov    DWORD PTR [esp],eax
c000eef8:	89 c6                	mov    esi,eax
c000eefa:	e8 65 8e 00 00       	call   c0017d64 <ACPI::ACPI()>
c000eeff:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef05:	58                   	pop    eax
c000ef06:	5a                   	pop    edx
c000ef07:	56                   	push   esi
c000ef08:	53                   	push   ebx
c000ef09:	e8 fa 4d 00 00       	call   c0013d08 <Device::addChild(Device*)>
c000ef0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef11:	e8 cc f9 ff ff       	call   c000e8e2 <Computer::detectFeatures()>
c000ef16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef19:	e8 ce fb ff ff       	call   c000eaec <Computer::displayFeatures()>
c000ef1e:	59                   	pop    ecx
c000ef1f:	5e                   	pop    esi
c000ef20:	6a 01                	push   0x1
c000ef22:	53                   	push   ebx
c000ef23:	e8 94 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000ef28:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef2f:	e8 58 09 00 00       	call   c000f88c <malloc>
c000ef34:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef37:	89 c6                	mov    esi,eax
c000ef39:	e8 a2 9b 00 00       	call   c0018ae0 <CPU::CPU()>
c000ef3e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef44:	58                   	pop    eax
c000ef45:	5a                   	pop    edx
c000ef46:	56                   	push   esi
c000ef47:	53                   	push   ebx
c000ef48:	e8 bb 4d 00 00       	call   c0013d08 <Device::addChild(Device*)>
c000ef4d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef53:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef59:	6a 00                	push   0x0
c000ef5b:	6a 00                	push   0x0
c000ef5d:	50                   	push   eax
c000ef5e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef61:	83 c4 20             	add    esp,0x20
c000ef64:	e8 47 53 00 00       	call   c00142b0 <setupFPU()>
c000ef69:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef6f:	85 c0                	test   eax,eax
c000ef71:	74 1f                	je     c000ef92 <Computer::open(int, int, void*)+0xbe>
c000ef73:	83 ec 08             	sub    esp,0x8
c000ef76:	50                   	push   eax
c000ef77:	53                   	push   ebx
c000ef78:	e8 8b 4d 00 00       	call   c0013d08 <Device::addChild(Device*)>
c000ef7d:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef83:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef85:	6a 00                	push   0x0
c000ef87:	6a 00                	push   0x0
c000ef89:	6a 00                	push   0x0
c000ef8b:	50                   	push   eax
c000ef8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef8f:	83 c4 20             	add    esp,0x20
c000ef92:	83 ec 0c             	sub    esp,0xc
c000ef95:	68 94 e6 00 c0       	push   0xc000e694
c000ef9a:	e8 f7 ef 00 00       	call   c001df96 <setupMultitasking(void (*)())>
c000ef9f:	83 c4 14             	add    esp,0x14
c000efa2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efa7:	5b                   	pop    ebx
c000efa8:	5e                   	pop    esi
c000efa9:	c3                   	ret    

c000efaa <Computer::disableNMI()>:
c000efaa:	6a 00                	push   0x0
c000efac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efb0:	e8 07 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000efb5:	58                   	pop    eax
c000efb6:	5a                   	pop    edx
c000efb7:	c3                   	ret    

c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efbc:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efc3:	19 c0                	sbb    eax,eax
c000efc5:	83 e0 80             	and    eax,0xffffff80
c000efc8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efcc:	e6 70                	out    0x70,al
c000efce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efd2:	e6 71                	out    0x71,al
c000efd4:	c3                   	ret    
c000efd5:	90                   	nop

c000efd6 <Computer::handleNMI()>:
c000efd6:	56                   	push   esi
c000efd7:	53                   	push   ebx
c000efd8:	83 ec 10             	sub    esp,0x10
c000efdb:	e4 92                	in     al,0x92
c000efdd:	89 c6                	mov    esi,eax
c000efdf:	e4 61                	in     al,0x61
c000efe1:	68 aa aa 02 c0       	push   0xc002aaaa
c000efe6:	88 c3                	mov    bl,al
c000efe8:	e8 e2 38 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000efed:	83 c4 10             	add    esp,0x10
c000eff0:	83 e6 10             	and    esi,0x10
c000eff3:	75 0d                	jne    c000f002 <Computer::handleNMI()+0x2c>
c000eff5:	f6 c3 40             	test   bl,0x40
c000eff8:	75 1d                	jne    c000f017 <Computer::handleNMI()+0x41>
c000effa:	84 db                	test   bl,bl
c000effc:	78 2d                	js     c000f02b <Computer::handleNMI()+0x55>
c000effe:	58                   	pop    eax
c000efff:	5b                   	pop    ebx
c000f000:	5e                   	pop    esi
c000f001:	c3                   	ret    
c000f002:	83 ec 0c             	sub    esp,0xc
c000f005:	68 bb aa 02 c0       	push   0xc002aabb
c000f00a:	e8 f6 b2 00 00       	call   c001a305 <Krnl::panic(char const*)>
c000f00f:	83 c4 10             	add    esp,0x10
c000f012:	f6 c3 40             	test   bl,0x40
c000f015:	74 e3                	je     c000effa <Computer::handleNMI()+0x24>
c000f017:	83 ec 0c             	sub    esp,0xc
c000f01a:	68 c8 aa 02 c0       	push   0xc002aac8
c000f01f:	e8 e1 b2 00 00       	call   c001a305 <Krnl::panic(char const*)>
c000f024:	83 c4 10             	add    esp,0x10
c000f027:	84 db                	test   bl,bl
c000f029:	79 d3                	jns    c000effe <Computer::handleNMI()+0x28>
c000f02b:	c7 44 24 10 d2 aa 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aad2
c000f033:	5a                   	pop    edx
c000f034:	5b                   	pop    ebx
c000f035:	5e                   	pop    esi
c000f036:	e9 ca b2 00 00       	jmp    c001a305 <Krnl::panic(char const*)>
c000f03b:	90                   	nop

c000f03c <Computer::setDiskActivityLight(int, bool)>:
c000f03c:	56                   	push   esi
c000f03d:	53                   	push   ebx
c000f03e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f042:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f047:	77 1b                	ja     c000f064 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f049:	e4 92                	in     al,0x92
c000f04b:	bb 40 00 00 00       	mov    ebx,0x40
c000f050:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f054:	89 da                	mov    edx,ebx
c000f056:	d3 e2                	shl    edx,cl
c000f058:	89 f1                	mov    ecx,esi
c000f05a:	f7 d2                	not    edx
c000f05c:	d3 e3                	shl    ebx,cl
c000f05e:	21 d0                	and    eax,edx
c000f060:	09 d8                	or     eax,ebx
c000f062:	e6 92                	out    0x92,al
c000f064:	5b                   	pop    ebx
c000f065:	5e                   	pop    esi
c000f066:	c3                   	ret    
c000f067:	90                   	nop

c000f068 <GDTEntry::setBase(unsigned int)>:
c000f068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f06c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f070:	89 c1                	mov    ecx,eax
c000f072:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f076:	c1 e9 10             	shr    ecx,0x10
c000f079:	c1 e8 18             	shr    eax,0x18
c000f07c:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f07f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f082:	c3                   	ret    
c000f083:	90                   	nop

c000f084 <GDTEntry::setLimit(unsigned int)>:
c000f084:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f088:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f08c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f08f:	66 89 01             	mov    WORD PTR [ecx],ax
c000f092:	83 e2 f0             	and    edx,0xfffffff0
c000f095:	c1 e8 10             	shr    eax,0x10
c000f098:	83 e0 0f             	and    eax,0xf
c000f09b:	09 d0                	or     eax,edx
c000f09d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0a0:	c3                   	ret    
c000f0a1:	90                   	nop

c000f0a2 <GDT::GDT()>:
c000f0a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0b6:	90                   	nop
c000f0b7:	c3                   	ret    

c000f0b8 <GDT::addEntry(GDTEntry)>:
c000f0b8:	53                   	push   ebx
c000f0b9:	83 ec 0c             	sub    esp,0xc
c000f0bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f0c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0c2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f0c9:	52                   	push   edx
c000f0ca:	50                   	push   eax
c000f0cb:	68 0c ab 02 c0       	push   0xc002ab0c
c000f0d0:	e8 fa 37 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000f0d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f0db:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f0df:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0e3:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0e7:	8d 50 01             	lea    edx,[eax+0x1]
c000f0ea:	c1 e0 03             	shl    eax,0x3
c000f0ed:	89 13                	mov    DWORD PTR [ebx],edx
c000f0ef:	83 c4 18             	add    esp,0x18
c000f0f2:	5b                   	pop    ebx
c000f0f3:	c3                   	ret    

c000f0f4 <GDT::getNumberOfEntries()>:
c000f0f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0fa:	c3                   	ret    
c000f0fb:	90                   	nop

c000f0fc <GDT::flush()>:
c000f0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f100:	8b 10                	mov    edx,DWORD PTR [eax]
c000f102:	83 c0 04             	add    eax,0x4
c000f105:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f10c:	a3 12 f0 02 c0       	mov    ds:0xc002f012,eax
c000f111:	66 89 15 10 f0 02 c0 	mov    WORD PTR ds:0xc002f010,dx
c000f118:	e9 33 13 ff ff       	jmp    c0000450 <loadGDT>
c000f11d:	90                   	nop

c000f11e <GDT::setup()>:
c000f11e:	55                   	push   ebp
c000f11f:	57                   	push   edi
c000f120:	56                   	push   esi
c000f121:	53                   	push   ebx
c000f122:	83 ec 3c             	sub    esp,0x3c
c000f125:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f129:	6a 00                	push   0x0
c000f12b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f12f:	53                   	push   ebx
c000f130:	e8 33 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f135:	6a 00                	push   0x0
c000f137:	53                   	push   ebx
c000f138:	e8 47 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f13d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f145:	6a 00                	push   0x0
c000f147:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f14b:	53                   	push   ebx
c000f14c:	e8 17 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f151:	68 ff ff ff 00       	push   0xffffff
c000f156:	53                   	push   ebx
c000f157:	e8 28 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f15c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f160:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f165:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f16a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f16e:	83 c4 20             	add    esp,0x20
c000f171:	6a 00                	push   0x0
c000f173:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f177:	53                   	push   ebx
c000f178:	e8 eb fe ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f17d:	68 ff ff ff 00       	push   0xffffff
c000f182:	53                   	push   ebx
c000f183:	e8 fc fe ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f188:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f18c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f190:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f194:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f198:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f19c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1a1:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1a6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1aa:	89 d8                	mov    eax,ebx
c000f1ac:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1b0:	80 cc 60             	or     ah,0x60
c000f1b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1b7:	83 c4 0c             	add    esp,0xc
c000f1ba:	89 f8                	mov    eax,edi
c000f1bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c0:	80 cc 60             	or     ah,0x60
c000f1c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c7:	89 c7                	mov    edi,eax
c000f1c9:	55                   	push   ebp
c000f1ca:	e8 e9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1cf:	83 c4 0c             	add    esp,0xc
c000f1d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1da:	55                   	push   ebp
c000f1db:	e8 d8 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1e0:	83 c4 0c             	add    esp,0xc
c000f1e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1eb:	55                   	push   ebp
c000f1ec:	e8 c7 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1f1:	83 c4 0c             	add    esp,0xc
c000f1f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1fc:	53                   	push   ebx
c000f1fd:	51                   	push   ecx
c000f1fe:	55                   	push   ebp
c000f1ff:	e8 b4 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f204:	83 c4 0c             	add    esp,0xc
c000f207:	57                   	push   edi
c000f208:	56                   	push   esi
c000f209:	55                   	push   ebp
c000f20a:	e8 a9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f20f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f212:	e8 e5 fe ff ff       	call   c000f0fc <GDT::flush()>
c000f217:	83 c4 4c             	add    esp,0x4c
c000f21a:	5b                   	pop    ebx
c000f21b:	5e                   	pop    esi
c000f21c:	5f                   	pop    edi
c000f21d:	5d                   	pop    ebp
c000f21e:	c3                   	ret    

c000f21f <idleFunction(void*)>:
c000f21f:	53                   	push   ebx
c000f220:	83 ec 08             	sub    esp,0x8
c000f223:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c000f228:	48                   	dec    eax
c000f229:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c000f22e:	75 01                	jne    c000f231 <idleFunction(void*)+0x12>
c000f230:	fb                   	sti    
c000f231:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c000f236:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f23c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f243:	74 3c                	je     c000f281 <idleFunction(void*)+0x62>
c000f245:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f24c:	74 33                	je     c000f281 <idleFunction(void*)+0x62>
c000f24e:	31 db                	xor    ebx,ebx
c000f250:	52                   	push   edx
c000f251:	52                   	push   edx
c000f252:	68 e1 00 00 00       	push   0xe1
c000f257:	50                   	push   eax
c000f258:	e8 d5 fb ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c000f25d:	53                   	push   ebx
c000f25e:	83 e0 02             	and    eax,0x2
c000f261:	50                   	push   eax
c000f262:	68 e1 00 00 00       	push   0xe1
c000f267:	ff 35 08 f0 02 c0    	push   DWORD PTR ds:0xc002f008
c000f26d:	e8 ec fb ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f272:	83 c4 20             	add    esp,0x20
c000f275:	e8 05 10 ff ff       	call   c000027f <doTPAUSE>
c000f27a:	e8 81 9c 01 00       	call   c0028f00 <idleCommon()>
c000f27f:	eb f4                	jmp    c000f275 <idleFunction(void*)+0x56>
c000f281:	fb                   	sti    
c000f282:	f4                   	hlt    
c000f283:	e8 78 9c 01 00       	call   c0028f00 <idleCommon()>
c000f288:	eb f7                	jmp    c000f281 <idleFunction(void*)+0x62>

c000f28a <IDTEntry::IDTEntry(bool)>:
c000f28a:	83 ec 04             	sub    esp,0x4
c000f28d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f291:	88 04 24             	mov    BYTE PTR [esp],al
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f29e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2aa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ad:	83 e2 f0             	and    edx,0xfffffff0
c000f2b0:	83 ca 0e             	or     edx,0xe
c000f2b3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2bd:	83 e2 ef             	and    edx,0xffffffef
c000f2c0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2c3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2c7:	74 04                	je     c000f2cd <IDTEntry::IDTEntry(bool)+0x43>
c000f2c9:	b2 03                	mov    dl,0x3
c000f2cb:	eb 02                	jmp    c000f2cf <IDTEntry::IDTEntry(bool)+0x45>
c000f2cd:	b2 00                	mov    dl,0x0
c000f2cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d3:	83 e2 03             	and    edx,0x3
c000f2d6:	88 d1                	mov    cl,dl
c000f2d8:	c1 e1 05             	shl    ecx,0x5
c000f2db:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2de:	83 e2 9f             	and    edx,0xffffff9f
c000f2e1:	09 ca                	or     edx,ecx
c000f2e3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ea:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ed:	83 ca 80             	or     edx,0xffffff80
c000f2f0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2f3:	90                   	nop
c000f2f4:	83 c4 04             	add    esp,0x4
c000f2f7:	c3                   	ret    

c000f2f8 <IDTEntry::setOffset(unsigned int)>:
c000f2f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f300:	66 89 02             	mov    WORD PTR [edx],ax
c000f303:	c1 e8 10             	shr    eax,0x10
c000f306:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f30a:	c3                   	ret    
c000f30b:	90                   	nop

c000f30c <IDT::IDT()>:
c000f30c:	90                   	nop
c000f30d:	c3                   	ret    

c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f30e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f312:	83 c0 30             	add    eax,0x30
c000f315:	c3                   	ret    

c000f316 <IDT::addEntry(IDTEntry, int)>:
c000f316:	53                   	push   ebx
c000f317:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f31b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f31f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f323:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f327:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f32a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f32e:	5b                   	pop    ebx
c000f32f:	c3                   	ret    

c000f330 <IDT::addEntry(int, void (*)(), bool)>:
c000f330:	53                   	push   ebx
c000f331:	83 ec 10             	sub    esp,0x10
c000f334:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f339:	50                   	push   eax
c000f33a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f33e:	53                   	push   ebx
c000f33f:	e8 46 ff ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f344:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f348:	53                   	push   ebx
c000f349:	e8 aa ff ff ff       	call   c000f2f8 <IDTEntry::setOffset(unsigned int)>
c000f34e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f352:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f356:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f35a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f35e:	e8 b3 ff ff ff       	call   c000f316 <IDT::addEntry(IDTEntry, int)>
c000f363:	83 c4 30             	add    esp,0x30
c000f366:	5b                   	pop    ebx
c000f367:	c3                   	ret    

c000f368 <IDT::flush()>:
c000f368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f36c:	66 c7 05 18 f0 02 c0 ff 07 	mov    WORD PTR ds:0xc002f018,0x7ff
c000f375:	a3 1a f0 02 c0       	mov    ds:0xc002f01a,eax
c000f37a:	0f 01 1d 18 f0 02 c0 	lidtd  ds:0xc002f018
c000f381:	c3                   	ret    

c000f382 <IDT::setup()>:
c000f382:	57                   	push   edi
c000f383:	56                   	push   esi
c000f384:	53                   	push   ebx
c000f385:	83 ec 10             	sub    esp,0x10
c000f388:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f38c:	6a 00                	push   0x0
c000f38e:	68 70 04 00 c0       	push   0xc0000470
c000f393:	6a 00                	push   0x0
c000f395:	53                   	push   ebx
c000f396:	e8 95 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f39b:	6a 00                	push   0x0
c000f39d:	68 80 04 00 c0       	push   0xc0000480
c000f3a2:	6a 01                	push   0x1
c000f3a4:	53                   	push   ebx
c000f3a5:	e8 86 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3aa:	83 c4 20             	add    esp,0x20
c000f3ad:	6a 00                	push   0x0
c000f3af:	68 8a 04 00 c0       	push   0xc000048a
c000f3b4:	6a 02                	push   0x2
c000f3b6:	53                   	push   ebx
c000f3b7:	e8 74 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3bc:	6a 00                	push   0x0
c000f3be:	68 94 04 00 c0       	push   0xc0000494
c000f3c3:	6a 03                	push   0x3
c000f3c5:	53                   	push   ebx
c000f3c6:	e8 65 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3cb:	83 c4 20             	add    esp,0x20
c000f3ce:	6a 00                	push   0x0
c000f3d0:	68 9e 04 00 c0       	push   0xc000049e
c000f3d5:	6a 04                	push   0x4
c000f3d7:	53                   	push   ebx
c000f3d8:	e8 53 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3dd:	6a 00                	push   0x0
c000f3df:	68 a8 04 00 c0       	push   0xc00004a8
c000f3e4:	6a 05                	push   0x5
c000f3e6:	53                   	push   ebx
c000f3e7:	e8 44 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3ec:	83 c4 20             	add    esp,0x20
c000f3ef:	6a 00                	push   0x0
c000f3f1:	68 b2 04 00 c0       	push   0xc00004b2
c000f3f6:	6a 06                	push   0x6
c000f3f8:	53                   	push   ebx
c000f3f9:	e8 32 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3fe:	6a 00                	push   0x0
c000f400:	68 bc 04 00 c0       	push   0xc00004bc
c000f405:	6a 07                	push   0x7
c000f407:	53                   	push   ebx
c000f408:	e8 23 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f40d:	83 c4 20             	add    esp,0x20
c000f410:	6a 00                	push   0x0
c000f412:	68 c6 04 00 c0       	push   0xc00004c6
c000f417:	6a 08                	push   0x8
c000f419:	53                   	push   ebx
c000f41a:	e8 11 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f41f:	6a 00                	push   0x0
c000f421:	68 ce 04 00 c0       	push   0xc00004ce
c000f426:	6a 09                	push   0x9
c000f428:	53                   	push   ebx
c000f429:	e8 02 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f42e:	83 c4 20             	add    esp,0x20
c000f431:	6a 00                	push   0x0
c000f433:	68 d8 04 00 c0       	push   0xc00004d8
c000f438:	6a 0a                	push   0xa
c000f43a:	53                   	push   ebx
c000f43b:	e8 f0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f440:	6a 00                	push   0x0
c000f442:	68 e0 04 00 c0       	push   0xc00004e0
c000f447:	6a 0b                	push   0xb
c000f449:	53                   	push   ebx
c000f44a:	e8 e1 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f44f:	83 c4 20             	add    esp,0x20
c000f452:	6a 00                	push   0x0
c000f454:	68 e8 04 00 c0       	push   0xc00004e8
c000f459:	6a 0c                	push   0xc
c000f45b:	53                   	push   ebx
c000f45c:	e8 cf fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f461:	6a 00                	push   0x0
c000f463:	68 f0 04 00 c0       	push   0xc00004f0
c000f468:	6a 0d                	push   0xd
c000f46a:	53                   	push   ebx
c000f46b:	e8 c0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f470:	83 c4 20             	add    esp,0x20
c000f473:	6a 00                	push   0x0
c000f475:	68 f8 04 00 c0       	push   0xc00004f8
c000f47a:	6a 0e                	push   0xe
c000f47c:	53                   	push   ebx
c000f47d:	e8 ae fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f482:	6a 00                	push   0x0
c000f484:	68 00 05 00 c0       	push   0xc0000500
c000f489:	6a 0f                	push   0xf
c000f48b:	53                   	push   ebx
c000f48c:	e8 9f fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f491:	83 c4 20             	add    esp,0x20
c000f494:	6a 00                	push   0x0
c000f496:	68 0a 05 00 c0       	push   0xc000050a
c000f49b:	6a 10                	push   0x10
c000f49d:	53                   	push   ebx
c000f49e:	e8 8d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4a3:	6a 00                	push   0x0
c000f4a5:	68 14 05 00 c0       	push   0xc0000514
c000f4aa:	6a 11                	push   0x11
c000f4ac:	53                   	push   ebx
c000f4ad:	e8 7e fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4b2:	83 c4 20             	add    esp,0x20
c000f4b5:	6a 00                	push   0x0
c000f4b7:	68 1e 05 00 c0       	push   0xc000051e
c000f4bc:	6a 12                	push   0x12
c000f4be:	53                   	push   ebx
c000f4bf:	e8 6c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4c4:	6a 01                	push   0x1
c000f4c6:	68 b8 05 00 c0       	push   0xc00005b8
c000f4cb:	6a 60                	push   0x60
c000f4cd:	53                   	push   ebx
c000f4ce:	e8 5d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4d3:	83 c4 20             	add    esp,0x20
c000f4d6:	6a 00                	push   0x0
c000f4d8:	68 bf 05 00 c0       	push   0xc00005bf
c000f4dd:	6a 20                	push   0x20
c000f4df:	53                   	push   ebx
c000f4e0:	e8 4b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4e5:	6a 00                	push   0x0
c000f4e7:	68 aa 05 00 c0       	push   0xc00005aa
c000f4ec:	6a 21                	push   0x21
c000f4ee:	53                   	push   ebx
c000f4ef:	e8 3c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4f4:	83 c4 20             	add    esp,0x20
c000f4f7:	6a 00                	push   0x0
c000f4f9:	68 b1 05 00 c0       	push   0xc00005b1
c000f4fe:	6a 22                	push   0x22
c000f500:	53                   	push   ebx
c000f501:	e8 2a fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f506:	6a 00                	push   0x0
c000f508:	68 28 05 00 c0       	push   0xc0000528
c000f50d:	6a 23                	push   0x23
c000f50f:	53                   	push   ebx
c000f510:	e8 1b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f515:	83 c4 20             	add    esp,0x20
c000f518:	6a 00                	push   0x0
c000f51a:	68 32 05 00 c0       	push   0xc0000532
c000f51f:	6a 24                	push   0x24
c000f521:	53                   	push   ebx
c000f522:	e8 09 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f527:	6a 00                	push   0x0
c000f529:	68 3c 05 00 c0       	push   0xc000053c
c000f52e:	6a 25                	push   0x25
c000f530:	53                   	push   ebx
c000f531:	e8 fa fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f536:	83 c4 20             	add    esp,0x20
c000f539:	6a 00                	push   0x0
c000f53b:	68 46 05 00 c0       	push   0xc0000546
c000f540:	6a 26                	push   0x26
c000f542:	53                   	push   ebx
c000f543:	e8 e8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f548:	6a 00                	push   0x0
c000f54a:	68 50 05 00 c0       	push   0xc0000550
c000f54f:	6a 27                	push   0x27
c000f551:	53                   	push   ebx
c000f552:	e8 d9 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f557:	83 c4 20             	add    esp,0x20
c000f55a:	6a 00                	push   0x0
c000f55c:	68 5a 05 00 c0       	push   0xc000055a
c000f561:	6a 28                	push   0x28
c000f563:	53                   	push   ebx
c000f564:	e8 c7 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f569:	6a 00                	push   0x0
c000f56b:	68 64 05 00 c0       	push   0xc0000564
c000f570:	6a 29                	push   0x29
c000f572:	53                   	push   ebx
c000f573:	e8 b8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f578:	83 c4 20             	add    esp,0x20
c000f57b:	6a 00                	push   0x0
c000f57d:	68 6e 05 00 c0       	push   0xc000056e
c000f582:	6a 2a                	push   0x2a
c000f584:	53                   	push   ebx
c000f585:	e8 a6 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f58a:	6a 00                	push   0x0
c000f58c:	68 78 05 00 c0       	push   0xc0000578
c000f591:	6a 2b                	push   0x2b
c000f593:	53                   	push   ebx
c000f594:	e8 97 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f599:	83 c4 20             	add    esp,0x20
c000f59c:	6a 00                	push   0x0
c000f59e:	68 82 05 00 c0       	push   0xc0000582
c000f5a3:	6a 2c                	push   0x2c
c000f5a5:	53                   	push   ebx
c000f5a6:	e8 85 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ab:	6a 00                	push   0x0
c000f5ad:	68 8c 05 00 c0       	push   0xc000058c
c000f5b2:	6a 2d                	push   0x2d
c000f5b4:	53                   	push   ebx
c000f5b5:	e8 76 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ba:	83 c4 20             	add    esp,0x20
c000f5bd:	6a 00                	push   0x0
c000f5bf:	68 96 05 00 c0       	push   0xc0000596
c000f5c4:	6a 2e                	push   0x2e
c000f5c6:	53                   	push   ebx
c000f5c7:	e8 64 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5cc:	6a 00                	push   0x0
c000f5ce:	68 a0 05 00 c0       	push   0xc00005a0
c000f5d3:	6a 2f                	push   0x2f
c000f5d5:	53                   	push   ebx
c000f5d6:	e8 55 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5db:	83 c4 20             	add    esp,0x20
c000f5de:	6a 00                	push   0x0
c000f5e0:	68 f6 05 00 c0       	push   0xc00005f6
c000f5e5:	6a 30                	push   0x30
c000f5e7:	53                   	push   ebx
c000f5e8:	e8 43 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ed:	6a 00                	push   0x0
c000f5ef:	68 00 06 00 c0       	push   0xc0000600
c000f5f4:	6a 31                	push   0x31
c000f5f6:	53                   	push   ebx
c000f5f7:	e8 34 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5fc:	83 c4 20             	add    esp,0x20
c000f5ff:	6a 00                	push   0x0
c000f601:	68 0a 06 00 c0       	push   0xc000060a
c000f606:	6a 32                	push   0x32
c000f608:	53                   	push   ebx
c000f609:	e8 22 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f60e:	6a 00                	push   0x0
c000f610:	68 14 06 00 c0       	push   0xc0000614
c000f615:	6a 33                	push   0x33
c000f617:	53                   	push   ebx
c000f618:	e8 13 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f61d:	83 c4 20             	add    esp,0x20
c000f620:	6a 00                	push   0x0
c000f622:	68 1e 06 00 c0       	push   0xc000061e
c000f627:	6a 34                	push   0x34
c000f629:	53                   	push   ebx
c000f62a:	e8 01 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f62f:	6a 00                	push   0x0
c000f631:	68 28 06 00 c0       	push   0xc0000628
c000f636:	6a 35                	push   0x35
c000f638:	53                   	push   ebx
c000f639:	e8 f2 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f63e:	83 c4 20             	add    esp,0x20
c000f641:	6a 00                	push   0x0
c000f643:	68 32 06 00 c0       	push   0xc0000632
c000f648:	6a 36                	push   0x36
c000f64a:	53                   	push   ebx
c000f64b:	e8 e0 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f650:	6a 00                	push   0x0
c000f652:	68 3c 06 00 c0       	push   0xc000063c
c000f657:	6a 37                	push   0x37
c000f659:	53                   	push   ebx
c000f65a:	e8 d1 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f65f:	83 c4 1c             	add    esp,0x1c
c000f662:	6a 03                	push   0x3
c000f664:	6a 02                	push   0x2
c000f666:	ff 35 70 f1 02 c0    	push   DWORD PTR ds:0xc002f170
c000f66c:	e8 91 27 00 00       	call   c0011e02 <VAS::allocatePages(int, int)>
c000f671:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f678:	89 c6                	mov    esi,eax
c000f67a:	e8 0d 02 00 00       	call   c000f88c <malloc>
c000f67f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f685:	89 04 24             	mov    DWORD PTR [esp],eax
c000f688:	89 c7                	mov    edi,eax
c000f68a:	e8 6b 17 00 00       	call   c0010dfa <TSS::TSS()>
c000f68f:	83 c4 0c             	add    esp,0xc
c000f692:	68 c6 04 00 c0       	push   0xc00004c6
c000f697:	56                   	push   esi
c000f698:	57                   	push   edi
c000f699:	e8 9c 17 00 00       	call   c0010e3a <TSS::setup(unsigned long, unsigned long)>
c000f69e:	89 c6                	mov    esi,eax
c000f6a0:	58                   	pop    eax
c000f6a1:	5a                   	pop    edx
c000f6a2:	6a 00                	push   0x0
c000f6a4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6a8:	50                   	push   eax
c000f6a9:	e8 dc fb ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f6ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6b2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f6b7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f6be:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6c8:	80 ce 05             	or     dh,0x5
c000f6cb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6d6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6dc:	e8 87 fc ff ff       	call   c000f368 <IDT::flush()>
c000f6e1:	83 c4 20             	add    esp,0x20
c000f6e4:	5b                   	pop    ebx
c000f6e5:	5e                   	pop    esi
c000f6e6:	5f                   	pop    edi
c000f6e7:	c3                   	ret    

c000f6e8 <sbrk>:
c000f6e8:	55                   	push   ebp
c000f6e9:	57                   	push   edi
c000f6ea:	56                   	push   esi
c000f6eb:	53                   	push   ebx
c000f6ec:	83 ec 1c             	sub    esp,0x1c
c000f6ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6f3:	85 c0                	test   eax,eax
c000f6f5:	74 3e                	je     c000f735 <sbrk+0x4d>
c000f6f7:	78 43                	js     c000f73c <sbrk+0x54>
c000f6f9:	8b 15 08 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f008
c000f6ff:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f705:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f70b:	83 e2 01             	and    edx,0x1
c000f70e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f712:	8b 0d c0 dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002ddc0
c000f718:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f71c:	05 ff 0f 00 00       	add    eax,0xfff
c000f721:	89 c2                	mov    edx,eax
c000f723:	78 2f                	js     c000f754 <sbrk+0x6c>
c000f725:	c1 fa 0c             	sar    edx,0xc
c000f728:	89 d7                	mov    edi,edx
c000f72a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f72e:	be 00 00 00 00       	mov    esi,0x0
c000f733:	eb 36                	jmp    c000f76b <sbrk+0x83>
c000f735:	a1 c0 dd 02 c0       	mov    eax,ds:0xc002ddc0
c000f73a:	eb 73                	jmp    c000f7af <sbrk+0xc7>
c000f73c:	83 ec 08             	sub    esp,0x8
c000f73f:	50                   	push   eax
c000f740:	68 28 ab 02 c0       	push   0xc002ab28
c000f745:	e8 85 31 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000f74a:	83 c4 10             	add    esp,0x10
c000f74d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f752:	eb 5b                	jmp    c000f7af <sbrk+0xc7>
c000f754:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f75a:	eb c9                	jmp    c000f725 <sbrk+0x3d>
c000f75c:	81 05 c0 dd 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002ddc0,0x1000
c000f766:	46                   	inc    esi
c000f767:	39 f7                	cmp    edi,esi
c000f769:	74 33                	je     c000f79e <sbrk+0xb6>
c000f76b:	8b 1d 70 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f170
c000f771:	8b 2d c0 dd 02 c0    	mov    ebp,DWORD PTR ds:0xc002ddc0
c000f777:	e8 15 04 00 00       	call   c000fb91 <Phys::allocatePage()>
c000f77c:	68 01 0c 00 00       	push   0xc01
c000f781:	55                   	push   ebp
c000f782:	50                   	push   eax
c000f783:	53                   	push   ebx
c000f784:	e8 77 25 00 00       	call   c0011d00 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f789:	83 c4 10             	add    esp,0x10
c000f78c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f791:	74 c9                	je     c000f75c <sbrk+0x74>
c000f793:	8b 1d c0 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002ddc0
c000f799:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f79c:	eb be                	jmp    c000f75c <sbrk+0x74>
c000f79e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7a3:	75 12                	jne    c000f7b7 <sbrk+0xcf>
c000f7a5:	0f 20 d8             	mov    eax,cr3
c000f7a8:	0f 22 d8             	mov    cr3,eax
c000f7ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7af:	83 c4 1c             	add    esp,0x1c
c000f7b2:	5b                   	pop    ebx
c000f7b3:	5e                   	pop    esi
c000f7b4:	5f                   	pop    edi
c000f7b5:	5d                   	pop    ebp
c000f7b6:	c3                   	ret    
c000f7b7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f7bb:	89 cb                	mov    ebx,ecx
c000f7bd:	c1 eb 0a             	shr    ebx,0xa
c000f7c0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f7c6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f7cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7d0:	c1 e0 0c             	shl    eax,0xc
c000f7d3:	01 c8                	add    eax,ecx
c000f7d5:	c1 e8 0a             	shr    eax,0xa
c000f7d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f7dd:	2d 00 00 40 00       	sub    eax,0x400000
c000f7e2:	39 c3                	cmp    ebx,eax
c000f7e4:	77 c5                	ja     c000f7ab <sbrk+0xc3>
c000f7e6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7e9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7ef:	39 d8                	cmp    eax,ebx
c000f7f1:	73 f3                	jae    c000f7e6 <sbrk+0xfe>
c000f7f3:	eb b6                	jmp    c000f7ab <sbrk+0xc3>

c000f7f5 <mmap>:
c000f7f5:	83 ec 18             	sub    esp,0x18
c000f7f8:	68 58 ab 02 c0       	push   0xc002ab58
c000f7fd:	e8 03 ab 00 00       	call   c001a305 <Krnl::panic(char const*)>
c000f802:	b8 00 00 00 00       	mov    eax,0x0
c000f807:	83 c4 1c             	add    esp,0x1c
c000f80a:	c3                   	ret    

c000f80b <munmap>:
c000f80b:	83 ec 18             	sub    esp,0x18
c000f80e:	68 5d ab 02 c0       	push   0xc002ab5d
c000f813:	e8 ed aa 00 00       	call   c001a305 <Krnl::panic(char const*)>
c000f818:	b8 00 00 00 00       	mov    eax,0x0
c000f81d:	83 c4 1c             	add    esp,0x1c
c000f820:	c3                   	ret    

c000f821 <liballoc_lock()>:
c000f821:	fa                   	cli    
c000f822:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c000f828:	b8 00 00 00 00       	mov    eax,0x0
c000f82d:	c3                   	ret    

c000f82e <liballoc_unlock()>:
c000f82e:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c000f833:	48                   	dec    eax
c000f834:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c000f839:	75 01                	jne    c000f83c <liballoc_unlock()+0xe>
c000f83b:	fb                   	sti    
c000f83c:	b8 00 00 00 00       	mov    eax,0x0
c000f841:	c3                   	ret    

c000f842 <liballoc_alloc(int)>:
c000f842:	83 ec 10             	sub    esp,0x10
c000f845:	68 01 08 00 00       	push   0x801
c000f84a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f84e:	ff 35 70 f1 02 c0    	push   DWORD PTR ds:0xc002f170
c000f854:	e8 a9 25 00 00       	call   c0011e02 <VAS::allocatePages(int, int)>
c000f859:	83 c4 1c             	add    esp,0x1c
c000f85c:	c3                   	ret    

c000f85d <liballoc_free(void*, int)>:
c000f85d:	83 ec 14             	sub    esp,0x14
c000f860:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f864:	ff 35 70 f1 02 c0    	push   DWORD PTR ds:0xc002f170
c000f86a:	e8 3d 22 00 00       	call   c0011aac <VAS::freeAllocatedPages(unsigned long)>
c000f86f:	b8 00 00 00 00       	mov    eax,0x0
c000f874:	83 c4 1c             	add    esp,0x1c
c000f877:	c3                   	ret    

c000f878 <realloc>:
c000f878:	83 ec 14             	sub    esp,0x14
c000f87b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f87f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f883:	e8 a4 1d ff ff       	call   c000162c <dlrealloc>
c000f888:	83 c4 1c             	add    esp,0x1c
c000f88b:	c3                   	ret    

c000f88c <malloc>:
c000f88c:	83 ec 18             	sub    esp,0x18
c000f88f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f893:	e8 57 18 ff ff       	call   c00010ef <dlmalloc>
c000f898:	83 c4 1c             	add    esp,0x1c
c000f89b:	c3                   	ret    

c000f89c <free>:
c000f89c:	83 ec 18             	sub    esp,0x18
c000f89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8a3:	e8 ec 14 ff ff       	call   c0000d94 <dlfree>
c000f8a8:	83 c4 1c             	add    esp,0x1c
c000f8ab:	c3                   	ret    

c000f8ac <rfree>:
c000f8ac:	83 ec 18             	sub    esp,0x18
c000f8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8b3:	e8 dc 14 ff ff       	call   c0000d94 <dlfree>
c000f8b8:	83 c4 1c             	add    esp,0x1c
c000f8bb:	c3                   	ret    

c000f8bc <calloc>:
c000f8bc:	56                   	push   esi
c000f8bd:	53                   	push   ebx
c000f8be:	83 ec 10             	sub    esp,0x10
c000f8c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8c5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8ca:	53                   	push   ebx
c000f8cb:	e8 bc ff ff ff       	call   c000f88c <malloc>
c000f8d0:	89 c6                	mov    esi,eax
c000f8d2:	83 c4 0c             	add    esp,0xc
c000f8d5:	53                   	push   ebx
c000f8d6:	6a 00                	push   0x0
c000f8d8:	50                   	push   eax
c000f8d9:	e8 72 0e ff ff       	call   c0000750 <memset>
c000f8de:	89 f0                	mov    eax,esi
c000f8e0:	83 c4 14             	add    esp,0x14
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	c3                   	ret    

c000f8e6 <kernel_main>:
c000f8e6:	57                   	push   edi
c000f8e7:	bf f9 03 00 00       	mov    edi,0x3f9
c000f8ec:	56                   	push   esi
c000f8ed:	89 fa                	mov    edx,edi
c000f8ef:	53                   	push   ebx
c000f8f0:	31 f6                	xor    esi,esi
c000f8f2:	83 ec 2c             	sub    esp,0x2c
c000f8f5:	89 f0                	mov    eax,esi
c000f8f7:	ee                   	out    dx,al
c000f8f8:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f8fd:	b0 80                	mov    al,0x80
c000f8ff:	89 da                	mov    edx,ebx
c000f901:	ee                   	out    dx,al
c000f902:	b1 03                	mov    cl,0x3
c000f904:	ba f8 03 00 00       	mov    edx,0x3f8
c000f909:	88 c8                	mov    al,cl
c000f90b:	ee                   	out    dx,al
c000f90c:	89 f0                	mov    eax,esi
c000f90e:	89 fa                	mov    edx,edi
c000f910:	ee                   	out    dx,al
c000f911:	88 c8                	mov    al,cl
c000f913:	89 da                	mov    edx,ebx
c000f915:	ee                   	out    dx,al
c000f916:	b0 c7                	mov    al,0xc7
c000f918:	ba fa 03 00 00       	mov    edx,0x3fa
c000f91d:	ee                   	out    dx,al
c000f91e:	b0 0b                	mov    al,0xb
c000f920:	ba fc 03 00 00       	mov    edx,0x3fc
c000f925:	ee                   	out    dx,al
c000f926:	68 64 ab 02 c0       	push   0xc002ab64
c000f92b:	e8 9f 2f 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000f930:	e8 dd 08 00 00       	call   c0010212 <installVgaTextImplementation()>
c000f935:	0f b6 05 e0 dd 02 c0 	movzx  eax,BYTE PTR ds:0xc002dde0
c000f93c:	83 c4 10             	add    esp,0x10
c000f93f:	84 c0                	test   al,al
c000f941:	74 45                	je     c000f988 <kernel_main+0xa2>
c000f943:	31 c9                	xor    ecx,ecx
c000f945:	be 06 00 00 00       	mov    esi,0x6
c000f94a:	31 db                	xor    ebx,ebx
c000f94c:	eb 20                	jmp    c000f96e <kernel_main+0x88>
c000f94e:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f951:	80 cc 0f             	or     ah,0xf
c000f954:	c1 e2 04             	shl    edx,0x4
c000f957:	01 da                	add    edx,ebx
c000f959:	43                   	inc    ebx
c000f95a:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f962:	41                   	inc    ecx
c000f963:	0f b6 81 e0 dd 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffd2220]
c000f96a:	84 c0                	test   al,al
c000f96c:	74 1a                	je     c000f988 <kernel_main+0xa2>
c000f96e:	3c 0d                	cmp    al,0xd
c000f970:	74 f0                	je     c000f962 <kernel_main+0x7c>
c000f972:	3c 0a                	cmp    al,0xa
c000f974:	75 d8                	jne    c000f94e <kernel_main+0x68>
c000f976:	41                   	inc    ecx
c000f977:	46                   	inc    esi
c000f978:	0f b6 81 e0 dd 02 c0 	movzx  eax,BYTE PTR [ecx-0x3ffd2220]
c000f97f:	bb 0f 00 00 00       	mov    ebx,0xf
c000f984:	84 c0                	test   al,al
c000f986:	75 e6                	jne    c000f96e <kernel_main+0x88>
c000f988:	83 ec 0c             	sub    esp,0xc
c000f98b:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f990:	a3 20 f0 02 c0       	mov    ds:0xc002f020,eax
c000f995:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f99a:	05 ff 0f 00 00       	add    eax,0xfff
c000f99f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f9a4:	50                   	push   eax
c000f9a5:	e8 30 03 00 00       	call   c000fcda <Phys::physicalMemorySetup(unsigned int)>
c000f9aa:	e8 d9 1c 00 00       	call   c0011688 <Virt::virtualMemorySetup()>
c000f9af:	58                   	pop    eax
c000f9b0:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f9b4:	53                   	push   ebx
c000f9b5:	e8 1a 1f 00 00       	call   c00118d4 <VAS::VAS()>
c000f9ba:	89 1d 70 f1 02 c0    	mov    DWORD PTR ds:0xc002f170,ebx
c000f9c0:	e8 5b 06 ff ff       	call   c0000020 <callGlobalConstructors>
c000f9c5:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f9cc:	e8 bb fe ff ff       	call   c000f88c <malloc>
c000f9d1:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9d4:	89 c6                	mov    esi,eax
c000f9d6:	e8 a9 ed ff ff       	call   c000e784 <Computer::Computer()>
c000f9db:	6a 00                	push   0x0
c000f9dd:	89 35 08 f0 02 c0    	mov    DWORD PTR ds:0xc002f008,esi
c000f9e3:	6a 00                	push   0x0
c000f9e5:	6a 00                	push   0x0
c000f9e7:	56                   	push   esi
c000f9e8:	e8 e7 f4 ff ff       	call   c000eed4 <Computer::open(int, int, void*)>
c000f9ed:	83 c4 14             	add    esp,0x14
c000f9f0:	53                   	push   ebx
c000f9f1:	e8 8e 21 00 00       	call   c0011b84 <VAS::~VAS()>
c000f9f6:	83 c4 30             	add    esp,0x30
c000f9f9:	5b                   	pop    ebx
c000f9fa:	5e                   	pop    esi
c000f9fb:	5f                   	pop    edi
c000f9fc:	c3                   	ret    

c000f9fd <Phys::allocateDMA(unsigned long)>:
c000f9fd:	55                   	push   ebp
c000f9fe:	31 d2                	xor    edx,edx
c000fa00:	57                   	push   edi
c000fa01:	31 ed                	xor    ebp,ebp
c000fa03:	56                   	push   esi
c000fa04:	31 c9                	xor    ecx,ecx
c000fa06:	53                   	push   ebx
c000fa07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fa0b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fa11:	31 c0                	xor    eax,eax
c000fa13:	c1 ee 0c             	shr    esi,0xc
c000fa16:	eb 17                	jmp    c000fa2f <Phys::allocateDMA(unsigned long)+0x32>
c000fa18:	85 c9                	test   ecx,ecx
c000fa1a:	75 04                	jne    c000fa20 <Phys::allocateDMA(unsigned long)+0x23>
c000fa1c:	89 d5                	mov    ebp,edx
c000fa1e:	89 d0                	mov    eax,edx
c000fa20:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fa23:	39 de                	cmp    esi,ebx
c000fa25:	74 20                	je     c000fa47 <Phys::allocateDMA(unsigned long)+0x4a>
c000fa27:	42                   	inc    edx
c000fa28:	89 d9                	mov    ecx,ebx
c000fa2a:	83 fa 2f             	cmp    edx,0x2f
c000fa2d:	7f 11                	jg     c000fa40 <Phys::allocateDMA(unsigned long)+0x43>
c000fa2f:	80 ba 60 f0 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd0fa0],0x0
c000fa36:	74 e0                	je     c000fa18 <Phys::allocateDMA(unsigned long)+0x1b>
c000fa38:	31 c9                	xor    ecx,ecx
c000fa3a:	42                   	inc    edx
c000fa3b:	83 fa 2f             	cmp    edx,0x2f
c000fa3e:	7e ef                	jle    c000fa2f <Phys::allocateDMA(unsigned long)+0x32>
c000fa40:	5b                   	pop    ebx
c000fa41:	31 c0                	xor    eax,eax
c000fa43:	5e                   	pop    esi
c000fa44:	5f                   	pop    edi
c000fa45:	5d                   	pop    ebp
c000fa46:	c3                   	ret    
c000fa47:	8d 14 30             	lea    edx,[eax+esi*1]
c000fa4a:	89 d7                	mov    edi,edx
c000fa4c:	4f                   	dec    edi
c000fa4d:	79 03                	jns    c000fa52 <Phys::allocateDMA(unsigned long)+0x55>
c000fa4f:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fa52:	c1 ff 04             	sar    edi,0x4
c000fa55:	89 c2                	mov    edx,eax
c000fa57:	c1 fa 04             	sar    edx,0x4
c000fa5a:	39 fa                	cmp    edx,edi
c000fa5c:	75 2f                	jne    c000fa8d <Phys::allocateDMA(unsigned long)+0x90>
c000fa5e:	85 db                	test   ebx,ebx
c000fa60:	74 1a                	je     c000fa7c <Phys::allocateDMA(unsigned long)+0x7f>
c000fa62:	be 60 f0 02 c0       	mov    esi,0xc002f060
c000fa67:	8d 90 60 f0 02 c0    	lea    edx,[eax-0x3ffd0fa0]
c000fa6d:	f7 d6                	not    esi
c000fa6f:	29 c6                	sub    esi,eax
c000fa71:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fa74:	42                   	inc    edx
c000fa75:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fa78:	39 d9                	cmp    ecx,ebx
c000fa7a:	7f f5                	jg     c000fa71 <Phys::allocateDMA(unsigned long)+0x74>
c000fa7c:	85 ff                	test   edi,edi
c000fa7e:	74 13                	je     c000fa93 <Phys::allocateDMA(unsigned long)+0x96>
c000fa80:	5b                   	pop    ebx
c000fa81:	05 50 20 0c 00       	add    eax,0xc2050
c000fa86:	5e                   	pop    esi
c000fa87:	c1 e0 0c             	shl    eax,0xc
c000fa8a:	5f                   	pop    edi
c000fa8b:	5d                   	pop    ebp
c000fa8c:	c3                   	ret    
c000fa8d:	89 ea                	mov    edx,ebp
c000fa8f:	31 c9                	xor    ecx,ecx
c000fa91:	eb a7                	jmp    c000fa3a <Phys::allocateDMA(unsigned long)+0x3d>
c000fa93:	5b                   	pop    ebx
c000fa94:	c1 e0 0c             	shl    eax,0xc
c000fa97:	5e                   	pop    esi
c000fa98:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fa9d:	5f                   	pop    edi
c000fa9e:	5d                   	pop    ebp
c000fa9f:	c3                   	ret    

c000faa0 <Phys::freeDMA(unsigned long, unsigned long)>:
c000faa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000faa4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000faa8:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000faae:	c1 e9 0c             	shr    ecx,0xc
c000fab1:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fab6:	76 25                	jbe    c000fadd <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fab8:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fabd:	c1 e8 0c             	shr    eax,0xc
c000fac0:	8d 50 10             	lea    edx,[eax+0x10]
c000fac3:	85 c9                	test   ecx,ecx
c000fac5:	74 15                	je     c000fadc <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fac7:	8d 82 60 f0 02 c0    	lea    eax,[edx-0x3ffd0fa0]
c000facd:	8d 94 11 60 f0 02 c0 	lea    edx,[ecx+edx*1-0x3ffd0fa0]
c000fad4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fad7:	40                   	inc    eax
c000fad8:	39 d0                	cmp    eax,edx
c000fada:	75 f8                	jne    c000fad4 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fadc:	c3                   	ret    
c000fadd:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fae3:	c1 ea 0c             	shr    edx,0xc
c000fae6:	eb db                	jmp    c000fac3 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fae8 <Phys::setPageState(unsigned long, bool)>:
c000fae8:	56                   	push   esi
c000fae9:	ba 01 00 00 00       	mov    edx,0x1
c000faee:	53                   	push   ebx
c000faef:	8b 35 24 df 02 c0    	mov    esi,DWORD PTR ds:0xc002df24
c000faf5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000faf9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fafd:	89 c8                	mov    eax,ecx
c000faff:	83 e1 07             	and    ecx,0x7
c000fb02:	c1 e8 03             	shr    eax,0x3
c000fb05:	d3 e3                	shl    ebx,cl
c000fb07:	01 c6                	add    esi,eax
c000fb09:	d3 e2                	shl    edx,cl
c000fb0b:	f7 d2                	not    edx
c000fb0d:	20 16                	and    BYTE PTR [esi],dl
c000fb0f:	03 05 24 df 02 c0    	add    eax,DWORD PTR ds:0xc002df24
c000fb15:	08 18                	or     BYTE PTR [eax],bl
c000fb17:	5b                   	pop    ebx
c000fb18:	5e                   	pop    esi
c000fb19:	c3                   	ret    

c000fb1a <Phys::getPageState(unsigned long)>:
c000fb1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fb1e:	8b 15 24 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df24
c000fb24:	89 c8                	mov    eax,ecx
c000fb26:	83 e1 07             	and    ecx,0x7
c000fb29:	c1 e8 03             	shr    eax,0x3
c000fb2c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fb30:	d3 f8                	sar    eax,cl
c000fb32:	83 e0 01             	and    eax,0x1
c000fb35:	c3                   	ret    

c000fb36 <Phys::freePage(unsigned long)>:
c000fb36:	53                   	push   ebx
c000fb37:	83 ec 08             	sub    esp,0x8
c000fb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb3e:	3d ff ff 07 00       	cmp    eax,0x7ffff
c000fb43:	76 3a                	jbe    c000fb7f <Phys::freePage(unsigned long)+0x49>
c000fb45:	c1 e8 0c             	shr    eax,0xc
c000fb48:	50                   	push   eax
c000fb49:	89 c3                	mov    ebx,eax
c000fb4b:	e8 ca ff ff ff       	call   c000fb1a <Phys::getPageState(unsigned long)>
c000fb50:	5a                   	pop    edx
c000fb51:	84 c0                	test   al,al
c000fb53:	74 19                	je     c000fb6e <Phys::freePage(unsigned long)+0x38>
c000fb55:	83 ec 08             	sub    esp,0x8
c000fb58:	ff 0d 50 f0 02 c0    	dec    DWORD PTR ds:0xc002f050
c000fb5e:	6a 00                	push   0x0
c000fb60:	53                   	push   ebx
c000fb61:	e8 82 ff ff ff       	call   c000fae8 <Phys::setPageState(unsigned long, bool)>
c000fb66:	83 c4 10             	add    esp,0x10
c000fb69:	83 c4 08             	add    esp,0x8
c000fb6c:	5b                   	pop    ebx
c000fb6d:	c3                   	ret    
c000fb6e:	c7 44 24 10 7b ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ab7b
c000fb76:	83 c4 08             	add    esp,0x8
c000fb79:	5b                   	pop    ebx
c000fb7a:	e9 86 a7 00 00       	jmp    c001a305 <Krnl::panic(char const*)>
c000fb7f:	68 00 10 00 00       	push   0x1000
c000fb84:	50                   	push   eax
c000fb85:	e8 16 ff ff ff       	call   c000faa0 <Phys::freeDMA(unsigned long, unsigned long)>
c000fb8a:	59                   	pop    ecx
c000fb8b:	5b                   	pop    ebx
c000fb8c:	83 c4 08             	add    esp,0x8
c000fb8f:	5b                   	pop    ebx
c000fb90:	c3                   	ret    

c000fb91 <Phys::allocatePage()>:
c000fb91:	56                   	push   esi
c000fb92:	53                   	push   ebx
c000fb93:	51                   	push   ecx
c000fb94:	8b 35 44 f0 02 c0    	mov    esi,DWORD PTR ds:0xc002f044
c000fb9a:	89 f3                	mov    ebx,esi
c000fb9c:	eb 0a                	jmp    c000fba8 <Phys::allocatePage()+0x17>
c000fb9e:	89 1d 44 f0 02 c0    	mov    DWORD PTR ds:0xc002f044,ebx
c000fba4:	39 de                	cmp    esi,ebx
c000fba6:	74 24                	je     c000fbcc <Phys::allocatePage()+0x3b>
c000fba8:	53                   	push   ebx
c000fba9:	e8 6c ff ff ff       	call   c000fb1a <Phys::getPageState(unsigned long)>
c000fbae:	5a                   	pop    edx
c000fbaf:	84 c0                	test   al,al
c000fbb1:	74 77                	je     c000fc2a <Phys::allocatePage()+0x99>
c000fbb3:	43                   	inc    ebx
c000fbb4:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fbba:	75 e2                	jne    c000fb9e <Phys::allocatePage()+0xd>
c000fbbc:	31 db                	xor    ebx,ebx
c000fbbe:	c7 05 44 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f044,0x0
c000fbc8:	39 de                	cmp    esi,ebx
c000fbca:	75 dc                	jne    c000fba8 <Phys::allocatePage()+0x17>
c000fbcc:	83 ec 0c             	sub    esp,0xc
c000fbcf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fbd4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fbd7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000fbdd:	e8 1a 2a 00 00       	call   c00125fc <VAS::scanForEviction()>
c000fbe2:	83 c4 10             	add    esp,0x10
c000fbe5:	85 c0                	test   eax,eax
c000fbe7:	75 59                	jne    c000fc42 <Phys::allocatePage()+0xb1>
c000fbe9:	83 ec 0c             	sub    esp,0xc
c000fbec:	68 91 ab 02 c0       	push   0xc002ab91
c000fbf1:	e8 d9 2c 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000fbf6:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fbfd:	e8 fb fd ff ff       	call   c000f9fd <Phys::allocateDMA(unsigned long)>
c000fc02:	83 c4 10             	add    esp,0x10
c000fc05:	85 c0                	test   eax,eax
c000fc07:	75 39                	jne    c000fc42 <Phys::allocatePage()+0xb1>
c000fc09:	83 ec 0c             	sub    esp,0xc
c000fc0c:	68 a2 ab 02 c0       	push   0xc002aba2
c000fc11:	e8 ef a6 00 00       	call   c001a305 <Krnl::panic(char const*)>
c000fc16:	83 c4 10             	add    esp,0x10
c000fc19:	8b 1d 44 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f044
c000fc1f:	53                   	push   ebx
c000fc20:	e8 f5 fe ff ff       	call   c000fb1a <Phys::getPageState(unsigned long)>
c000fc25:	5a                   	pop    edx
c000fc26:	84 c0                	test   al,al
c000fc28:	75 89                	jne    c000fbb3 <Phys::allocatePage()+0x22>
c000fc2a:	6a 01                	push   0x1
c000fc2c:	53                   	push   ebx
c000fc2d:	e8 b6 fe ff ff       	call   c000fae8 <Phys::setPageState(unsigned long, bool)>
c000fc32:	a1 44 f0 02 c0       	mov    eax,ds:0xc002f044
c000fc37:	59                   	pop    ecx
c000fc38:	ff 05 50 f0 02 c0    	inc    DWORD PTR ds:0xc002f050
c000fc3e:	c1 e0 0c             	shl    eax,0xc
c000fc41:	5b                   	pop    ebx
c000fc42:	5a                   	pop    edx
c000fc43:	5b                   	pop    ebx
c000fc44:	5e                   	pop    esi
c000fc45:	c3                   	ret    

c000fc46 <Phys::allocateContiguousPages(int)>:
c000fc46:	57                   	push   edi
c000fc47:	56                   	push   esi
c000fc48:	53                   	push   ebx
c000fc49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc4d:	fa                   	cli    
c000fc4e:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c000fc54:	31 db                	xor    ebx,ebx
c000fc56:	85 db                	test   ebx,ebx
c000fc58:	75 11                	jne    c000fc6b <Phys::allocateContiguousPages(int)+0x25>
c000fc5a:	e8 32 ff ff ff       	call   c000fb91 <Phys::allocatePage()>
c000fc5f:	83 fe 01             	cmp    esi,0x1
c000fc62:	89 c7                	mov    edi,eax
c000fc64:	74 21                	je     c000fc87 <Phys::allocateContiguousPages(int)+0x41>
c000fc66:	bb 01 00 00 00       	mov    ebx,0x1
c000fc6b:	e8 21 ff ff ff       	call   c000fb91 <Phys::allocatePage()>
c000fc70:	89 da                	mov    edx,ebx
c000fc72:	c1 e2 0c             	shl    edx,0xc
c000fc75:	01 fa                	add    edx,edi
c000fc77:	39 c2                	cmp    edx,eax
c000fc79:	74 20                	je     c000fc9b <Phys::allocateContiguousPages(int)+0x55>
c000fc7b:	bb 01 00 00 00       	mov    ebx,0x1
c000fc80:	89 c7                	mov    edi,eax
c000fc82:	83 fe 01             	cmp    esi,0x1
c000fc85:	75 e4                	jne    c000fc6b <Phys::allocateContiguousPages(int)+0x25>
c000fc87:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c000fc8c:	48                   	dec    eax
c000fc8d:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c000fc92:	75 01                	jne    c000fc95 <Phys::allocateContiguousPages(int)+0x4f>
c000fc94:	fb                   	sti    
c000fc95:	89 f8                	mov    eax,edi
c000fc97:	5b                   	pop    ebx
c000fc98:	5e                   	pop    esi
c000fc99:	5f                   	pop    edi
c000fc9a:	c3                   	ret    
c000fc9b:	43                   	inc    ebx
c000fc9c:	39 f3                	cmp    ebx,esi
c000fc9e:	75 b6                	jne    c000fc56 <Phys::allocateContiguousPages(int)+0x10>
c000fca0:	eb e5                	jmp    c000fc87 <Phys::allocateContiguousPages(int)+0x41>

c000fca2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fca2:	56                   	push   esi
c000fca3:	53                   	push   ebx
c000fca4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fca8:	39 1d 48 f0 02 c0    	cmp    DWORD PTR ds:0xc002f048,ebx
c000fcae:	73 06                	jae    c000fcb6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fcb0:	89 1d 48 f0 02 c0    	mov    DWORD PTR ds:0xc002f048,ebx
c000fcb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fcba:	c1 eb 0c             	shr    ebx,0xc
c000fcbd:	c1 e8 0c             	shr    eax,0xc
c000fcc0:	39 d8                	cmp    eax,ebx
c000fcc2:	73 13                	jae    c000fcd7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fcc4:	6a 00                	push   0x0
c000fcc6:	8d 70 01             	lea    esi,[eax+0x1]
c000fcc9:	50                   	push   eax
c000fcca:	e8 19 fe ff ff       	call   c000fae8 <Phys::setPageState(unsigned long, bool)>
c000fccf:	5a                   	pop    edx
c000fcd0:	89 f0                	mov    eax,esi
c000fcd2:	59                   	pop    ecx
c000fcd3:	39 f3                	cmp    ebx,esi
c000fcd5:	75 ed                	jne    c000fcc4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fcd7:	5b                   	pop    ebx
c000fcd8:	5e                   	pop    esi
c000fcd9:	c3                   	ret    

c000fcda <Phys::physicalMemorySetup(unsigned int)>:
c000fcda:	55                   	push   ebp
c000fcdb:	57                   	push   edi
c000fcdc:	56                   	push   esi
c000fcdd:	53                   	push   ebx
c000fcde:	31 db                	xor    ebx,ebx
c000fce0:	83 ec 40             	sub    esp,0x40
c000fce3:	6a 30                	push   0x30
c000fce5:	6a 00                	push   0x0
c000fce7:	68 60 f0 02 c0       	push   0xc002f060
c000fcec:	e8 5f 0a ff ff       	call   c0000750 <memset>
c000fcf1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fcf5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fcfa:	05 00 10 00 00       	add    eax,0x1000
c000fcff:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fd03:	83 c4 10             	add    esp,0x10
c000fd06:	83 ec 08             	sub    esp,0x8
c000fd09:	6a 01                	push   0x1
c000fd0b:	53                   	push   ebx
c000fd0c:	43                   	inc    ebx
c000fd0d:	e8 d6 fd ff ff       	call   c000fae8 <Phys::setPageState(unsigned long, bool)>
c000fd12:	83 c4 10             	add    esp,0x10
c000fd15:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fd1b:	75 e9                	jne    c000fd06 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fd1d:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fd24:	66 85 c0             	test   ax,ax
c000fd27:	0f 84 8e 01 00 00    	je     c000febb <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fd2d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fd31:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fd39:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd3d:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fd42:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fd46:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fd4e:	eb 15                	jmp    c000fd65 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fd50:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fd54:	83 c3 18             	add    ebx,0x18
c000fd57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd5b:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fd5f:	0f 84 66 01 00 00    	je     c000fecb <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fd65:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fd68:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fd6b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fd6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd72:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd76:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fd78:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fd7b:	01 f0                	add    eax,esi
c000fd7d:	55                   	push   ebp
c000fd7e:	11 fa                	adc    edx,edi
c000fd80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd84:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fd88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fd8c:	56                   	push   esi
c000fd8d:	68 dc ab 02 c0       	push   0xc002abdc
c000fd92:	e8 38 2b 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000fd97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fd9b:	83 c4 10             	add    esp,0x10
c000fd9e:	09 f8                	or     eax,edi
c000fda0:	0f 85 25 01 00 00    	jne    c000fecb <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fda6:	4d                   	dec    ebp
c000fda7:	75 a7                	jne    c000fd50 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fda9:	ba 00 00 08 00       	mov    edx,0x80000
c000fdae:	89 c1                	mov    ecx,eax
c000fdb0:	39 f2                	cmp    edx,esi
c000fdb2:	19 f9                	sbb    ecx,edi
c000fdb4:	0f 82 a7 00 00 00    	jb     c000fe61 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fdba:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fdbe:	89 c1                	mov    ecx,eax
c000fdc0:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fdc4:	0f 83 97 00 00 00    	jae    c000fe61 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fdca:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fdcf:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fdd3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fdd7:	39 fa                	cmp    edx,edi
c000fdd9:	19 e8                	sbb    eax,ebp
c000fddb:	0f 82 14 01 00 00    	jb     c000fef5 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fde1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fde5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fde9:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fdef:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fdf4:	83 d5 ff             	adc    ebp,0xffffffff
c000fdf7:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fdfb:	31 c0                	xor    eax,eax
c000fdfd:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fe01:	39 fa                	cmp    edx,edi
c000fe03:	89 c1                	mov    ecx,eax
c000fe05:	19 e9                	sbb    ecx,ebp
c000fe07:	0f 83 43 ff ff ff    	jae    c000fd50 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe0d:	be 00 00 08 00       	mov    esi,0x80000
c000fe12:	50                   	push   eax
c000fe13:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fe17:	57                   	push   edi
c000fe18:	56                   	push   esi
c000fe19:	68 00 ac 02 c0       	push   0xc002ac00
c000fe1e:	e8 ac 2a 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000fe23:	5a                   	pop    edx
c000fe24:	59                   	pop    ecx
c000fe25:	57                   	push   edi
c000fe26:	56                   	push   esi
c000fe27:	e8 76 fe ff ff       	call   c000fca2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fe2c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fe30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fe34:	83 c4 0c             	add    esp,0xc
c000fe37:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fe3b:	03 05 54 f0 02 c0    	add    eax,DWORD PTR ds:0xc002f054
c000fe41:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fe48:	a3 54 f0 02 c0       	mov    ds:0xc002f054,eax
c000fe4d:	52                   	push   edx
c000fe4e:	50                   	push   eax
c000fe4f:	68 be ab 02 c0       	push   0xc002abbe
c000fe54:	e8 76 2a 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c000fe59:	83 c4 10             	add    esp,0x10
c000fe5c:	e9 ef fe ff ff       	jmp    c000fd50 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe61:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fe65:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe6d:	39 ea                	cmp    edx,ebp
c000fe6f:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fe73:	0f 82 d7 fe ff ff    	jb     c000fd50 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe79:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fe7e:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fe82:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fe86:	0f 83 c4 fe ff ff    	jae    c000fd50 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe8c:	39 ee                	cmp    esi,ebp
c000fe8e:	89 f8                	mov    eax,edi
c000fe90:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fe94:	0f 83 78 ff ff ff    	jae    c000fe12 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fe9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe9e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fea2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fea6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000feaa:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000feae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000feb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000feb6:	e9 57 ff ff ff       	jmp    c000fe12 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000febb:	83 ec 0c             	sub    esp,0xc
c000febe:	68 b0 ab 02 c0       	push   0xc002abb0
c000fec3:	e8 3d a4 00 00       	call   c001a305 <Krnl::panic(char const*)>
c000fec8:	83 c4 10             	add    esp,0x10
c000fecb:	bb 40 01 00 00       	mov    ebx,0x140
c000fed0:	83 ec 08             	sub    esp,0x8
c000fed3:	6a 00                	push   0x0
c000fed5:	53                   	push   ebx
c000fed6:	43                   	inc    ebx
c000fed7:	e8 0c fc ff ff       	call   c000fae8 <Phys::setPageState(unsigned long, bool)>
c000fedc:	ff 05 54 f0 02 c0    	inc    DWORD PTR ds:0xc002f054
c000fee2:	83 c4 10             	add    esp,0x10
c000fee5:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000feeb:	75 e3                	jne    c000fed0 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000feed:	83 c4 3c             	add    esp,0x3c
c000fef0:	5b                   	pop    ebx
c000fef1:	5e                   	pop    esi
c000fef2:	5f                   	pop    edi
c000fef3:	5d                   	pop    ebp
c000fef4:	c3                   	ret    
c000fef5:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fefd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ff05:	e9 d7 fe ff ff       	jmp    c000fde1 <Phys::physicalMemorySetup(unsigned int)+0x107>

c000ff0a <Pipe::isAtty()>:
c000ff0a:	31 c0                	xor    eax,eax
c000ff0c:	c3                   	ret    
c000ff0d:	90                   	nop

c000ff0e <Pipe::~Pipe()>:
c000ff0e:	83 ec 0c             	sub    esp,0xc
c000ff11:	ba 6c ac 02 c0       	mov    edx,0xc002ac6c
c000ff16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff1a:	89 10                	mov    DWORD PTR [eax],edx
c000ff1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff20:	83 ec 0c             	sub    esp,0xc
c000ff23:	50                   	push   eax
c000ff24:	e8 3f 13 00 00       	call   c0011268 <UnixFile::~UnixFile()>
c000ff29:	83 c4 10             	add    esp,0x10
c000ff2c:	90                   	nop
c000ff2d:	83 c4 0c             	add    esp,0xc
c000ff30:	c3                   	ret    
c000ff31:	90                   	nop

c000ff32 <Pipe::~Pipe()>:
c000ff32:	83 ec 0c             	sub    esp,0xc
c000ff35:	83 ec 0c             	sub    esp,0xc
c000ff38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff3c:	e8 cd ff ff ff       	call   c000ff0e <Pipe::~Pipe()>
c000ff41:	83 c4 10             	add    esp,0x10
c000ff44:	83 ec 08             	sub    esp,0x8
c000ff47:	6a 20                	push   0x20
c000ff49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff4d:	e8 9d 28 00 00       	call   c00127ef <operator delete(void*, unsigned long)>
c000ff52:	83 c4 10             	add    esp,0x10
c000ff55:	83 c4 0c             	add    esp,0xc
c000ff58:	c3                   	ret    
c000ff59:	90                   	nop

c000ff5a <Pipe::read(unsigned long long, void*, int*)>:
c000ff5a:	55                   	push   ebp
c000ff5b:	57                   	push   edi
c000ff5c:	56                   	push   esi
c000ff5d:	53                   	push   ebx
c000ff5e:	83 ec 1c             	sub    esp,0x1c
c000ff61:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ff65:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ff69:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ff6d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000ff70:	89 c8                	mov    eax,ecx
c000ff72:	99                   	cdq    
c000ff73:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000ff77:	74 24                	je     c000ff9d <Pipe::read(unsigned long long, void*, int*)+0x43>
c000ff79:	39 f9                	cmp    ecx,edi
c000ff7b:	89 d1                	mov    ecx,edx
c000ff7d:	19 f1                	sbb    ecx,esi
c000ff7f:	73 1c                	jae    c000ff9d <Pipe::read(unsigned long long, void*, int*)+0x43>
c000ff81:	fa                   	cli    
c000ff82:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c000ff88:	e8 2b e1 00 00       	call   c001e0b8 <schedule()>
c000ff8d:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c000ff92:	48                   	dec    eax
c000ff93:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c000ff98:	75 d3                	jne    c000ff6d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000ff9a:	fb                   	sti    
c000ff9b:	eb d0                	jmp    c000ff6d <Pipe::read(unsigned long long, void*, int*)+0x13>
c000ff9d:	39 f8                	cmp    eax,edi
c000ff9f:	89 d1                	mov    ecx,edx
c000ffa1:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ffa4:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ffa8:	19 f1                	sbb    ecx,esi
c000ffaa:	73 07                	jae    c000ffb3 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000ffac:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffaf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ffb3:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000ffb6:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000ffb9:	29 f7                	sub    edi,esi
c000ffbb:	89 f8                	mov    eax,edi
c000ffbd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ffc1:	99                   	cdq    
c000ffc2:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000ffc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffc9:	19 d0                	sbb    eax,edx
c000ffcb:	73 07                	jae    c000ffd4 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000ffcd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ffd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ffd4:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000ffd7:	89 ea                	mov    edx,ebp
c000ffd9:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000ffdd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ffe2:	74 0d                	je     c000fff1 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000ffe4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ffe7:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ffeb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ffef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fff1:	85 d2                	test   edx,edx
c000fff3:	74 11                	je     c0010006 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fff5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fff9:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fffc:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010000:	89 d1                	mov    ecx,edx
c0010002:	89 c7                	mov    edi,eax
c0010004:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010006:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010009:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c001000c:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001000f:	99                   	cdq    
c0010010:	89 f7                	mov    edi,esi
c0010012:	03 04 24             	add    eax,DWORD PTR [esp]
c0010015:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0010019:	c1 ff 1f             	sar    edi,0x1f
c001001c:	57                   	push   edi
c001001d:	56                   	push   esi
c001001e:	52                   	push   edx
c001001f:	50                   	push   eax
c0010020:	e8 cf 72 01 00       	call   c00272f4 <__umoddi3>
c0010025:	83 c4 10             	add    esp,0x10
c0010028:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001002b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010030:	75 10                	jne    c0010042 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0010032:	83 ec 0c             	sub    esp,0xc
c0010035:	68 29 ac 02 c0       	push   0xc002ac29
c001003a:	e8 c6 a2 00 00       	call   c001a305 <Krnl::panic(char const*)>
c001003f:	83 c4 10             	add    esp,0x10
c0010042:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010046:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010049:	89 10                	mov    DWORD PTR [eax],edx
c001004b:	83 c4 1c             	add    esp,0x1c
c001004e:	31 c0                	xor    eax,eax
c0010050:	5b                   	pop    ebx
c0010051:	5e                   	pop    esi
c0010052:	5f                   	pop    edi
c0010053:	5d                   	pop    ebp
c0010054:	c3                   	ret    
c0010055:	90                   	nop

c0010056 <Pipe::write(unsigned long long, void*, int*)>:
c0010056:	55                   	push   ebp
c0010057:	57                   	push   edi
c0010058:	56                   	push   esi
c0010059:	53                   	push   ebx
c001005a:	83 ec 1c             	sub    esp,0x1c
c001005d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010061:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010065:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010068:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001006c:	89 04 24             	mov    DWORD PTR [esp],eax
c001006f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010073:	89 d8                	mov    eax,ebx
c0010075:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010078:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001007c:	89 d6                	mov    esi,edx
c001007e:	89 d7                	mov    edi,edx
c0010080:	c1 ff 1f             	sar    edi,0x1f
c0010083:	03 34 24             	add    esi,DWORD PTR [esp]
c0010086:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c001008a:	c1 f8 1f             	sar    eax,0x1f
c001008d:	39 f3                	cmp    ebx,esi
c001008f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010093:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010097:	19 f8                	sbb    eax,edi
c0010099:	b8 01 00 00 00       	mov    eax,0x1
c001009e:	72 6e                	jb     c001010e <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00100a0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00100a3:	01 d0                	add    eax,edx
c00100a5:	99                   	cdq    
c00100a6:	f7 fb                	idiv   ebx
c00100a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100ac:	29 d3                	sub    ebx,edx
c00100ae:	89 d7                	mov    edi,edx
c00100b0:	89 de                	mov    esi,ebx
c00100b2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00100b5:	c1 fb 1f             	sar    ebx,0x1f
c00100b8:	39 f2                	cmp    edx,esi
c00100ba:	19 d8                	sbb    eax,ebx
c00100bc:	b8 00 00 00 00       	mov    eax,0x0
c00100c1:	72 04                	jb     c00100c7 <Pipe::write(unsigned long long, void*, int*)+0x71>
c00100c3:	89 d0                	mov    eax,edx
c00100c5:	29 f0                	sub    eax,esi
c00100c7:	89 d3                	mov    ebx,edx
c00100c9:	29 c3                	sub    ebx,eax
c00100cb:	74 0b                	je     c00100d8 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00100cd:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00100d0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00100d4:	89 d9                	mov    ecx,ebx
c00100d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100d8:	85 c0                	test   eax,eax
c00100da:	74 0d                	je     c00100e9 <Pipe::write(unsigned long long, void*, int*)+0x93>
c00100dc:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00100e0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00100e3:	89 de                	mov    esi,ebx
c00100e5:	89 c1                	mov    ecx,eax
c00100e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100e9:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00100ec:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00100f1:	75 10                	jne    c0010103 <Pipe::write(unsigned long long, void*, int*)+0xad>
c00100f3:	83 ec 0c             	sub    esp,0xc
c00100f6:	68 45 ac 02 c0       	push   0xc002ac45
c00100fb:	e8 05 a2 00 00       	call   c001a305 <Krnl::panic(char const*)>
c0010100:	83 c4 10             	add    esp,0x10
c0010103:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010107:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001010a:	89 08                	mov    DWORD PTR [eax],ecx
c001010c:	31 c0                	xor    eax,eax
c001010e:	83 c4 1c             	add    esp,0x1c
c0010111:	5b                   	pop    ebx
c0010112:	5e                   	pop    esi
c0010113:	5f                   	pop    edi
c0010114:	5d                   	pop    ebp
c0010115:	c3                   	ret    

c0010116 <Pipe::Pipe(int)>:
c0010116:	83 ec 0c             	sub    esp,0xc
c0010119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001011d:	83 ec 08             	sub    esp,0x8
c0010120:	6a 00                	push   0x0
c0010122:	50                   	push   eax
c0010123:	e8 5e 0f 00 00       	call   c0011086 <UnixFile::UnixFile(int)>
c0010128:	83 c4 10             	add    esp,0x10
c001012b:	ba 6c ac 02 c0       	mov    edx,0xc002ac6c
c0010130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010134:	89 10                	mov    DWORD PTR [eax],edx
c0010136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001013a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001013e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010145:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001014c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010150:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010157:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001015b:	83 ec 0c             	sub    esp,0xc
c001015e:	50                   	push   eax
c001015f:	e8 28 f7 ff ff       	call   c000f88c <malloc>
c0010164:	83 c4 10             	add    esp,0x10
c0010167:	89 c2                	mov    edx,eax
c0010169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001016d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010174:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010178:	90                   	nop
c0010179:	83 c4 0c             	add    esp,0xc
c001017c:	c3                   	ret    
c001017d:	90                   	nop

c001017e <VgaText::isAtty()>:
c001017e:	b0 01                	mov    al,0x1
c0010180:	c3                   	ret    
c0010181:	90                   	nop

c0010182 <VgaText::~VgaText()>:
c0010182:	83 ec 0c             	sub    esp,0xc
c0010185:	ba 28 ad 02 c0       	mov    edx,0xc002ad28
c001018a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001018e:	89 10                	mov    DWORD PTR [eax],edx
c0010190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010194:	83 ec 0c             	sub    esp,0xc
c0010197:	50                   	push   eax
c0010198:	e8 cb 10 00 00       	call   c0011268 <UnixFile::~UnixFile()>
c001019d:	83 c4 10             	add    esp,0x10
c00101a0:	90                   	nop
c00101a1:	83 c4 0c             	add    esp,0xc
c00101a4:	c3                   	ret    
c00101a5:	90                   	nop

c00101a6 <VgaText::~VgaText()>:
c00101a6:	83 ec 0c             	sub    esp,0xc
c00101a9:	83 ec 0c             	sub    esp,0xc
c00101ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101b0:	e8 cd ff ff ff       	call   c0010182 <VgaText::~VgaText()>
c00101b5:	83 c4 10             	add    esp,0x10
c00101b8:	83 ec 08             	sub    esp,0x8
c00101bb:	68 c4 02 00 00       	push   0x2c4
c00101c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101c4:	e8 26 26 00 00       	call   c00127ef <operator delete(void*, unsigned long)>
c00101c9:	83 c4 10             	add    esp,0x10
c00101cc:	83 c4 0c             	add    esp,0xc
c00101cf:	c3                   	ret    

c00101d0 <VgaText::read(unsigned long long, void*, int*)>:
c00101d0:	83 ec 10             	sub    esp,0x10
c00101d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00101db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101df:	e8 a0 5b 00 00       	call   c0015d84 <readKeyboard(VgaText*, char*, unsigned long)>
c00101e4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00101e8:	89 02                	mov    DWORD PTR [edx],eax
c00101ea:	31 c0                	xor    eax,eax
c00101ec:	83 c4 1c             	add    esp,0x1c
c00101ef:	c3                   	ret    

c00101f0 <setTerminalScrollLock(bool)>:
c00101f0:	c3                   	ret    

c00101f1 <addToTerminalCycle(VgaText*)>:
c00101f1:	8b 15 c0 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f0c0
c00101f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101fb:	85 d2                	test   edx,edx
c00101fd:	75 09                	jne    c0010208 <addToTerminalCycle(VgaText*)+0x17>
c00101ff:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010202:	a3 c0 f0 02 c0       	mov    ds:0xc002f0c0,eax
c0010207:	c3                   	ret    
c0010208:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c001020b:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001020e:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010211:	c3                   	ret    

c0010212 <installVgaTextImplementation()>:
c0010212:	83 ec 10             	sub    esp,0x10
c0010215:	6a 20                	push   0x20
c0010217:	6a 00                	push   0x0
c0010219:	68 a0 f0 02 c0       	push   0xc002f0a0
c001021e:	e8 2d 05 ff ff       	call   c0000750 <memset>
c0010223:	83 c4 1c             	add    esp,0x1c
c0010226:	c3                   	ret    

c0010227 <scrollTerminalScrollLock(int)>:
c0010227:	c3                   	ret    

c0010228 <VgaText::updateTitle()>:
c0010228:	53                   	push   ebx
c0010229:	31 c0                	xor    eax,eax
c001022b:	83 ec 58             	sub    esp,0x58
c001022e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010232:	89 e1                	mov    ecx,esp
c0010234:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010238:	40                   	inc    eax
c0010239:	83 f8 50             	cmp    eax,0x50
c001023c:	75 f6                	jne    c0010234 <VgaText::updateTitle()+0xc>
c001023e:	31 c0                	xor    eax,eax
c0010240:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010247:	84 db                	test   bl,bl
c0010249:	74 06                	je     c0010251 <VgaText::updateTitle()+0x29>
c001024b:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c001024e:	40                   	inc    eax
c001024f:	eb ef                	jmp    c0010240 <VgaText::updateTitle()+0x18>
c0010251:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010254:	85 c0                	test   eax,eax
c0010256:	74 09                	je     c0010261 <VgaText::updateTitle()+0x39>
c0010258:	53                   	push   ebx
c0010259:	53                   	push   ebx
c001025a:	51                   	push   ecx
c001025b:	52                   	push   edx
c001025c:	ff d0                	call   eax
c001025e:	83 c4 10             	add    esp,0x10
c0010261:	83 c4 58             	add    esp,0x58
c0010264:	5b                   	pop    ebx
c0010265:	c3                   	ret    

c0010266 <VgaText::load()>:
c0010266:	53                   	push   ebx
c0010267:	31 c0                	xor    eax,eax
c0010269:	83 ec 58             	sub    esp,0x58
c001026c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010270:	89 e2                	mov    edx,esp
c0010272:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010276:	40                   	inc    eax
c0010277:	83 f8 50             	cmp    eax,0x50
c001027a:	75 f6                	jne    c0010272 <VgaText::load()+0xc>
c001027c:	31 c0                	xor    eax,eax
c001027e:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c0010285:	84 c9                	test   cl,cl
c0010287:	74 06                	je     c001028f <VgaText::load()+0x29>
c0010289:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001028c:	40                   	inc    eax
c001028d:	eb ef                	jmp    c001027e <VgaText::load()+0x18>
c001028f:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c0010292:	85 c0                	test   eax,eax
c0010294:	74 09                	je     c001029f <VgaText::load()+0x39>
c0010296:	51                   	push   ecx
c0010297:	51                   	push   ecx
c0010298:	52                   	push   edx
c0010299:	53                   	push   ebx
c001029a:	ff d0                	call   eax
c001029c:	83 c4 10             	add    esp,0x10
c001029f:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00102a2:	85 c0                	test   eax,eax
c00102a4:	74 09                	je     c00102af <VgaText::load()+0x49>
c00102a6:	83 ec 0c             	sub    esp,0xc
c00102a9:	53                   	push   ebx
c00102aa:	ff d0                	call   eax
c00102ac:	83 c4 10             	add    esp,0x10
c00102af:	83 c4 58             	add    esp,0x58
c00102b2:	5b                   	pop    ebx
c00102b3:	c3                   	ret    

c00102b4 <VgaText::updateCursor()>:
c00102b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102b8:	39 05 c4 f0 02 c0    	cmp    DWORD PTR ds:0xc002f0c4,eax
c00102be:	75 09                	jne    c00102c9 <VgaText::updateCursor()+0x15>
c00102c0:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00102c3:	85 c0                	test   eax,eax
c00102c5:	74 02                	je     c00102c9 <VgaText::updateCursor()+0x15>
c00102c7:	ff e0                	jmp    eax
c00102c9:	c3                   	ret    

c00102ca <VgaText::showCursor(bool)>:
c00102ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102d2:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c00102d5:	c3                   	ret    

c00102d6 <VgaText::disableBlink(bool)>:
c00102d6:	56                   	push   esi
c00102d7:	53                   	push   ebx
c00102d8:	51                   	push   ecx
c00102d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00102e1:	39 1d c4 f0 02 c0    	cmp    DWORD PTR ds:0xc002f0c4,ebx
c00102e7:	75 15                	jne    c00102fe <VgaText::disableBlink(bool)+0x28>
c00102e9:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c00102ec:	85 c0                	test   eax,eax
c00102ee:	74 0e                	je     c00102fe <VgaText::disableBlink(bool)+0x28>
c00102f0:	89 f1                	mov    ecx,esi
c00102f2:	52                   	push   edx
c00102f3:	52                   	push   edx
c00102f4:	0f b6 d1             	movzx  edx,cl
c00102f7:	52                   	push   edx
c00102f8:	53                   	push   ebx
c00102f9:	ff d0                	call   eax
c00102fb:	83 c4 10             	add    esp,0x10
c00102fe:	89 f0                	mov    eax,esi
c0010300:	83 f0 01             	xor    eax,0x1
c0010303:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c0010306:	58                   	pop    eax
c0010307:	5b                   	pop    ebx
c0010308:	5e                   	pop    esi
c0010309:	c3                   	ret    

c001030a <VgaText::doANSI_SGR(int)>:
c001030a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001030e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010312:	85 d2                	test   edx,edx
c0010314:	75 0b                	jne    c0010321 <VgaText::doANSI_SGR(int)+0x17>
c0010316:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010319:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001031c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001031f:	eb 59                	jmp    c001037a <VgaText::doANSI_SGR(int)+0x70>
c0010321:	83 fa 07             	cmp    edx,0x7
c0010324:	75 0b                	jne    c0010331 <VgaText::doANSI_SGR(int)+0x27>
c0010326:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010329:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c001032c:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001032f:	eb 49                	jmp    c001037a <VgaText::doANSI_SGR(int)+0x70>
c0010331:	83 fa 1b             	cmp    edx,0x1b
c0010334:	74 e0                	je     c0010316 <VgaText::doANSI_SGR(int)+0xc>
c0010336:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010339:	83 f9 07             	cmp    ecx,0x7
c001033c:	77 09                	ja     c0010347 <VgaText::doANSI_SGR(int)+0x3d>
c001033e:	8b 14 8d 60 df 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd20a0]
c0010345:	eb 20                	jmp    c0010367 <VgaText::doANSI_SGR(int)+0x5d>
c0010347:	8d 4a d8             	lea    ecx,[edx-0x28]
c001034a:	83 f9 07             	cmp    ecx,0x7
c001034d:	77 09                	ja     c0010358 <VgaText::doANSI_SGR(int)+0x4e>
c001034f:	8b 14 8d 60 df 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd20a0]
c0010356:	eb 22                	jmp    c001037a <VgaText::doANSI_SGR(int)+0x70>
c0010358:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001035b:	83 f9 07             	cmp    ecx,0x7
c001035e:	77 0b                	ja     c001036b <VgaText::doANSI_SGR(int)+0x61>
c0010360:	8b 14 95 18 de 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd21e8]
c0010367:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001036a:	c3                   	ret    
c001036b:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001036e:	83 f9 07             	cmp    ecx,0x7
c0010371:	77 0a                	ja     c001037d <VgaText::doANSI_SGR(int)+0x73>
c0010373:	8b 14 95 f0 dd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2210]
c001037a:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001037d:	c3                   	ret    

c001037e <VgaText::setDefaultBgColour(VgaColour)>:
c001037e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010382:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010386:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010389:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001038c:	c3                   	ret    
c001038d:	90                   	nop

c001038e <VgaText::setDefaultFgColour(VgaColour)>:
c001038e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010392:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010396:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010399:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001039c:	c3                   	ret    
c001039d:	90                   	nop

c001039e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001039e:	53                   	push   ebx
c001039f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00103a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00103a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00103ab:	51                   	push   ecx
c00103ac:	e8 cd ff ff ff       	call   c001037e <VgaText::setDefaultBgColour(VgaColour)>
c00103b1:	58                   	pop    eax
c00103b2:	5a                   	pop    edx
c00103b3:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00103b7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00103bb:	5b                   	pop    ebx
c00103bc:	eb d0                	jmp    c001038e <VgaText::setDefaultFgColour(VgaColour)>

c00103be <VgaText::setTitleTextColour(VgaColour)>:
c00103be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103c6:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00103c9:	e9 5a fe ff ff       	jmp    c0010228 <VgaText::updateTitle()>

c00103ce <VgaText::setTitleColour(VgaColour)>:
c00103ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103d6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00103d9:	e9 4a fe ff ff       	jmp    c0010228 <VgaText::updateTitle()>

c00103de <VgaText::setTitle(char*)>:
c00103de:	53                   	push   ebx
c00103df:	83 ec 10             	sub    esp,0x10
c00103e2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00103e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103ea:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c00103f0:	50                   	push   eax
c00103f1:	e8 16 04 ff ff       	call   c000080c <strcpy>
c00103f6:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00103fa:	83 c4 18             	add    esp,0x18
c00103fd:	5b                   	pop    ebx
c00103fe:	e9 25 fe ff ff       	jmp    c0010228 <VgaText::updateTitle()>
c0010403:	90                   	nop

c0010404 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010404:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010408:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001040d:	83 e0 0f             	and    eax,0xf
c0010410:	c1 e2 04             	shl    edx,0x4
c0010413:	09 d0                	or     eax,edx
c0010415:	c3                   	ret    

c0010416 <VgaText::scrollScreen()>:
c0010416:	55                   	push   ebp
c0010417:	b9 01 00 00 00       	mov    ecx,0x1
c001041c:	57                   	push   edi
c001041d:	56                   	push   esi
c001041e:	53                   	push   ebx
c001041f:	83 ec 0c             	sub    esp,0xc
c0010422:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010426:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c001042c:	31 ff                	xor    edi,edi
c001042e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010431:	83 f9 17             	cmp    ecx,0x17
c0010434:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0010437:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c001043e:	75 27                	jne    c0010467 <VgaText::scrollScreen()+0x51>
c0010440:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010443:	01 f5                	add    ebp,esi
c0010445:	f7 c7 01 00 00 00    	test   edi,0x1
c001044b:	74 16                	je     c0010463 <VgaText::scrollScreen()+0x4d>
c001044d:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010451:	50                   	push   eax
c0010452:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010456:	50                   	push   eax
c0010457:	e8 a8 ff ff ff       	call   c0010404 <VgaText::combineColours(unsigned char, unsigned char)>
c001045c:	5a                   	pop    edx
c001045d:	5a                   	pop    edx
c001045e:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010461:	eb 04                	jmp    c0010467 <VgaText::scrollScreen()+0x51>
c0010463:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010467:	47                   	inc    edi
c0010468:	46                   	inc    esi
c0010469:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001046f:	75 bd                	jne    c001042e <VgaText::scrollScreen()+0x18>
c0010471:	41                   	inc    ecx
c0010472:	83 f9 18             	cmp    ecx,0x18
c0010475:	75 af                	jne    c0010426 <VgaText::scrollScreen()+0x10>
c0010477:	39 1d c4 f0 02 c0    	cmp    DWORD PTR ds:0xc002f0c4,ebx
c001047d:	75 1b                	jne    c001049a <VgaText::scrollScreen()+0x84>
c001047f:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010483:	74 05                	je     c001048a <VgaText::scrollScreen()+0x74>
c0010485:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010488:	eb 10                	jmp    c001049a <VgaText::scrollScreen()+0x84>
c001048a:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c001048d:	85 c0                	test   eax,eax
c001048f:	74 09                	je     c001049a <VgaText::scrollScreen()+0x84>
c0010491:	83 ec 0c             	sub    esp,0xc
c0010494:	53                   	push   ebx
c0010495:	ff d0                	call   eax
c0010497:	83 c4 10             	add    esp,0x10
c001049a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001049e:	83 c4 0c             	add    esp,0xc
c00104a1:	5b                   	pop    ebx
c00104a2:	5e                   	pop    esi
c00104a3:	5f                   	pop    edi
c00104a4:	5d                   	pop    ebp
c00104a5:	e9 0a fe ff ff       	jmp    c00102b4 <VgaText::updateCursor()>

c00104aa <VgaText::combineCharAndColour(char, unsigned char)>:
c00104aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00104af:	c1 e0 08             	shl    eax,0x8
c00104b2:	89 c2                	mov    edx,eax
c00104b4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00104b9:	09 d0                	or     eax,edx
c00104bb:	c3                   	ret    

c00104bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00104bc:	56                   	push   esi
c00104bd:	53                   	push   ebx
c00104be:	51                   	push   ecx
c00104bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00104c3:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00104c8:	50                   	push   eax
c00104c9:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00104ce:	50                   	push   eax
c00104cf:	e8 30 ff ff ff       	call   c0010404 <VgaText::combineColours(unsigned char, unsigned char)>
c00104d4:	5b                   	pop    ebx
c00104d5:	0f b6 c0             	movzx  eax,al
c00104d8:	5e                   	pop    esi
c00104d9:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00104de:	50                   	push   eax
c00104df:	53                   	push   ebx
c00104e0:	e8 c5 ff ff ff       	call   c00104aa <VgaText::combineCharAndColour(char, unsigned char)>
c00104e5:	5a                   	pop    edx
c00104e6:	5e                   	pop    esi
c00104e7:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00104ea:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00104f0:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00104f4:	0f b7 d2             	movzx  edx,dx
c00104f7:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00104fb:	39 0d c4 f0 02 c0    	cmp    DWORD PTR ds:0xc002f0c4,ecx
c0010501:	75 10                	jne    c0010513 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010503:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c0010506:	85 c0                	test   eax,eax
c0010508:	74 09                	je     c0010513 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001050a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001050e:	5a                   	pop    edx
c001050f:	5b                   	pop    ebx
c0010510:	5e                   	pop    esi
c0010511:	ff e0                	jmp    eax
c0010513:	58                   	pop    eax
c0010514:	5b                   	pop    ebx
c0010515:	5e                   	pop    esi
c0010516:	c3                   	ret    
c0010517:	90                   	nop

c0010518 <VgaText::getCursorX()>:
c0010518:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001051c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001051f:	c3                   	ret    

c0010520 <VgaText::getCursorY()>:
c0010520:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010524:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0010527:	c3                   	ret    

c0010528 <VgaText::setCursor(int, int)>:
c0010528:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001052c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010530:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010533:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010537:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001053a:	e9 75 fd ff ff       	jmp    c00102b4 <VgaText::updateCursor()>
c001053f:	90                   	nop

c0010540 <VgaText::setCursorX(int)>:
c0010540:	83 ec 10             	sub    esp,0x10
c0010543:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010547:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001054a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001054e:	50                   	push   eax
c001054f:	e8 d4 ff ff ff       	call   c0010528 <VgaText::setCursor(int, int)>
c0010554:	83 c4 1c             	add    esp,0x1c
c0010557:	c3                   	ret    

c0010558 <VgaText::setCursorY(int)>:
c0010558:	83 ec 10             	sub    esp,0x10
c001055b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001055f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010563:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010566:	50                   	push   eax
c0010567:	e8 bc ff ff ff       	call   c0010528 <VgaText::setCursor(int, int)>
c001056c:	83 c4 1c             	add    esp,0x1c
c001056f:	c3                   	ret    

c0010570 <VgaText::incrementCursor(bool)>:
c0010570:	56                   	push   esi
c0010571:	53                   	push   ebx
c0010572:	51                   	push   ecx
c0010573:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010577:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001057b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001057e:	40                   	inc    eax
c001057f:	83 f8 50             	cmp    eax,0x50
c0010582:	74 05                	je     c0010589 <VgaText::incrementCursor(bool)+0x19>
c0010584:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010587:	eb 24                	jmp    c00105ad <VgaText::incrementCursor(bool)+0x3d>
c0010589:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001058c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010593:	8d 50 01             	lea    edx,[eax+0x1]
c0010596:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010599:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001059c:	75 0f                	jne    c00105ad <VgaText::incrementCursor(bool)+0x3d>
c001059e:	83 ec 0c             	sub    esp,0xc
c00105a1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00105a4:	53                   	push   ebx
c00105a5:	e8 6c fe ff ff       	call   c0010416 <VgaText::scrollScreen()>
c00105aa:	83 c4 10             	add    esp,0x10
c00105ad:	89 f0                	mov    eax,esi
c00105af:	84 c0                	test   al,al
c00105b1:	74 0c                	je     c00105bf <VgaText::incrementCursor(bool)+0x4f>
c00105b3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00105b7:	5a                   	pop    edx
c00105b8:	5b                   	pop    ebx
c00105b9:	5e                   	pop    esi
c00105ba:	e9 f5 fc ff ff       	jmp    c00102b4 <VgaText::updateCursor()>
c00105bf:	58                   	pop    eax
c00105c0:	5b                   	pop    ebx
c00105c1:	5e                   	pop    esi
c00105c2:	c3                   	ret    
c00105c3:	90                   	nop

c00105c4 <VgaText::decrementCursor(bool)>:
c00105c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00105c8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00105cc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00105cf:	85 c0                	test   eax,eax
c00105d1:	74 04                	je     c00105d7 <VgaText::decrementCursor(bool)+0x13>
c00105d3:	48                   	dec    eax
c00105d4:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00105d7:	84 c9                	test   cl,cl
c00105d9:	74 09                	je     c00105e4 <VgaText::decrementCursor(bool)+0x20>
c00105db:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00105df:	e9 d0 fc ff ff       	jmp    c00102b4 <VgaText::updateCursor()>
c00105e4:	c3                   	ret    
c00105e5:	90                   	nop

c00105e6 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00105e6:	53                   	push   ebx
c00105e7:	83 ec 08             	sub    esp,0x8
c00105ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00105ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00105f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00105f6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00105fa:	3c 07                	cmp    al,0x7
c00105fc:	75 2a                	jne    c0010628 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c00105fe:	a1 78 f1 02 c0       	mov    eax,ds:0xc002f178
c0010603:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001060b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010613:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001061b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001061f:	83 c4 08             	add    esp,0x8
c0010622:	5b                   	pop    ebx
c0010623:	e9 b4 30 00 00       	jmp    c00136dc <Buzzer::beep(int, int, bool)>
c0010628:	3c 0d                	cmp    al,0xd
c001062a:	75 09                	jne    c0010635 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c001062c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010633:	eb 2c                	jmp    c0010661 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010635:	3c 0a                	cmp    al,0xa
c0010637:	75 31                	jne    c001066a <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010639:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001063c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010643:	8d 50 01             	lea    edx,[eax+0x1]
c0010646:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010649:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001064c:	75 0f                	jne    c001065d <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c001064e:	83 ec 0c             	sub    esp,0xc
c0010651:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010654:	53                   	push   ebx
c0010655:	e8 bc fd ff ff       	call   c0010416 <VgaText::scrollScreen()>
c001065a:	83 c4 10             	add    esp,0x10
c001065d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010661:	83 c4 08             	add    esp,0x8
c0010664:	5b                   	pop    ebx
c0010665:	e9 4a fc ff ff       	jmp    c00102b4 <VgaText::updateCursor()>
c001066a:	3c 08                	cmp    al,0x8
c001066c:	75 25                	jne    c0010693 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c001066e:	50                   	push   eax
c001066f:	50                   	push   eax
c0010670:	6a 01                	push   0x1
c0010672:	53                   	push   ebx
c0010673:	e8 4c ff ff ff       	call   c00105c4 <VgaText::decrementCursor(bool)>
c0010678:	5a                   	pop    edx
c0010679:	59                   	pop    ecx
c001067a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001067d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010680:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010683:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010686:	6a 20                	push   0x20
c0010688:	53                   	push   ebx
c0010689:	e8 2e fe ff ff       	call   c00104bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001068e:	83 c4 28             	add    esp,0x28
c0010691:	5b                   	pop    ebx
c0010692:	c3                   	ret    
c0010693:	83 ec 08             	sub    esp,0x8
c0010696:	0f be c0             	movsx  eax,al
c0010699:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001069c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001069f:	51                   	push   ecx
c00106a0:	52                   	push   edx
c00106a1:	50                   	push   eax
c00106a2:	53                   	push   ebx
c00106a3:	e8 14 fe ff ff       	call   c00104bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00106a8:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00106ac:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00106b4:	83 c4 28             	add    esp,0x28
c00106b7:	5b                   	pop    ebx
c00106b8:	e9 b3 fe ff ff       	jmp    c0010570 <VgaText::incrementCursor(bool)>
c00106bd:	90                   	nop

c00106be <VgaText::isShowingCursor()>:
c00106be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106c2:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c00106c5:	c3                   	ret    

c00106c6 <VgaText::isBlinkDisabled()>:
c00106c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ca:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c00106cd:	83 f0 01             	xor    eax,0x1
c00106d0:	c3                   	ret    
c00106d1:	90                   	nop

c00106d2 <VgaText::setCursorHeight(int)>:
c00106d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106da:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00106dd:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c00106e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00106e5:	e9 e0 fb ff ff       	jmp    c00102ca <VgaText::showCursor(bool)>

c00106ea <VgaText::getCursorHeight()>:
c00106ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ee:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00106f1:	c3                   	ret    

c00106f2 <setActiveTerminal(VgaText*)>:
c00106f2:	53                   	push   ebx
c00106f3:	83 ec 08             	sub    esp,0x8
c00106f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106fa:	85 db                	test   ebx,ebx
c00106fc:	75 11                	jne    c001070f <setActiveTerminal(VgaText*)+0x1d>
c00106fe:	c7 44 24 10 80 ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ac80
c0010706:	83 c4 08             	add    esp,0x8
c0010709:	5b                   	pop    ebx
c001070a:	e9 f6 9b 00 00       	jmp    c001a305 <Krnl::panic(char const*)>
c001070f:	50                   	push   eax
c0010710:	50                   	push   eax
c0010711:	53                   	push   ebx
c0010712:	68 8e ac 02 c0       	push   0xc002ac8e
c0010717:	e8 b3 21 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001071c:	a1 c4 f0 02 c0       	mov    eax,ds:0xc002f0c4
c0010721:	83 c4 10             	add    esp,0x10
c0010724:	85 c0                	test   eax,eax
c0010726:	74 0c                	je     c0010734 <setActiveTerminal(VgaText*)+0x42>
c0010728:	83 ec 0c             	sub    esp,0xc
c001072b:	50                   	push   eax
c001072c:	e8 83 fb ff ff       	call   c00102b4 <VgaText::updateCursor()>
c0010731:	83 c4 10             	add    esp,0x10
c0010734:	89 1d c4 f0 02 c0    	mov    DWORD PTR ds:0xc002f0c4,ebx
c001073a:	51                   	push   ecx
c001073b:	51                   	push   ecx
c001073c:	53                   	push   ebx
c001073d:	68 a6 ac 02 c0       	push   0xc002aca6
c0010742:	e8 88 21 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0010747:	83 c4 0c             	add    esp,0xc
c001074a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001074d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010750:	53                   	push   ebx
c0010751:	e8 d2 fd ff ff       	call   c0010528 <VgaText::setCursor(int, int)>
c0010756:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010759:	e8 68 ff ff ff       	call   c00106c6 <VgaText::isBlinkDisabled()>
c001075e:	5a                   	pop    edx
c001075f:	0f b6 c0             	movzx  eax,al
c0010762:	59                   	pop    ecx
c0010763:	50                   	push   eax
c0010764:	53                   	push   ebx
c0010765:	e8 6c fb ff ff       	call   c00102d6 <VgaText::disableBlink(bool)>
c001076a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001076d:	e8 78 ff ff ff       	call   c00106ea <VgaText::getCursorHeight()>
c0010772:	5a                   	pop    edx
c0010773:	59                   	pop    ecx
c0010774:	50                   	push   eax
c0010775:	53                   	push   ebx
c0010776:	e8 57 ff ff ff       	call   c00106d2 <VgaText::setCursorHeight(int)>
c001077b:	83 c4 10             	add    esp,0x10
c001077e:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010782:	75 07                	jne    c001078b <setActiveTerminal(VgaText*)+0x99>
c0010784:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c001078b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001078f:	83 c4 08             	add    esp,0x8
c0010792:	5b                   	pop    ebx
c0010793:	e9 ce fa ff ff       	jmp    c0010266 <VgaText::load()>

c0010798 <doTerminalCycle()>:
c0010798:	83 ec 18             	sub    esp,0x18
c001079b:	a1 c0 f0 02 c0       	mov    eax,ds:0xc002f0c0
c00107a0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00107a3:	50                   	push   eax
c00107a4:	a3 c0 f0 02 c0       	mov    ds:0xc002f0c0,eax
c00107a9:	e8 44 ff ff ff       	call   c00106f2 <setActiveTerminal(VgaText*)>
c00107ae:	83 c4 1c             	add    esp,0x1c
c00107b1:	c3                   	ret    

c00107b2 <VgaText::doUpdate()>:
c00107b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107b6:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c00107b9:	85 c0                	test   eax,eax
c00107bb:	74 02                	je     c00107bf <VgaText::doUpdate()+0xd>
c00107bd:	ff e0                	jmp    eax
c00107bf:	c3                   	ret    

c00107c0 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00107c0:	55                   	push   ebp
c00107c1:	31 ed                	xor    ebp,ebp
c00107c3:	57                   	push   edi
c00107c4:	56                   	push   esi
c00107c5:	53                   	push   ebx
c00107c6:	83 ec 1c             	sub    esp,0x1c
c00107c9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00107cd:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00107d2:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00107d9:	50                   	push   eax
c00107da:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00107df:	50                   	push   eax
c00107e0:	e8 1f fc ff ff       	call   c0010404 <VgaText::combineColours(unsigned char, unsigned char)>
c00107e5:	59                   	pop    ecx
c00107e6:	0f b6 c0             	movzx  eax,al
c00107e9:	5e                   	pop    esi
c00107ea:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00107ef:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00107f3:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00107f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00107fa:	0f b7 f6             	movzx  esi,si
c00107fd:	01 f6                	add    esi,esi
c00107ff:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010802:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010805:	84 c0                	test   al,al
c0010807:	0f 84 fd 00 00 00    	je     c001090a <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c001080d:	3c 0d                	cmp    al,0xd
c001080f:	75 0c                	jne    c001081d <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010811:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010818:	e9 e7 00 00 00       	jmp    c0010904 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001081d:	3c 0a                	cmp    al,0xa
c001081f:	75 47                	jne    c0010868 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010821:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010824:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001082b:	8d 48 01             	lea    ecx,[eax+0x1]
c001082e:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010831:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010834:	75 0f                	jne    c0010845 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010836:	83 ec 0c             	sub    esp,0xc
c0010839:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001083c:	53                   	push   ebx
c001083d:	e8 d4 fb ff ff       	call   c0010416 <VgaText::scrollScreen()>
c0010842:	83 c4 10             	add    esp,0x10
c0010845:	83 ec 0c             	sub    esp,0xc
c0010848:	31 ed                	xor    ebp,ebp
c001084a:	53                   	push   ebx
c001084b:	e8 64 fa ff ff       	call   c00102b4 <VgaText::updateCursor()>
c0010850:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010855:	83 c4 10             	add    esp,0x10
c0010858:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001085b:	0f b7 f6             	movzx  esi,si
c001085e:	01 f6                	add    esi,esi
c0010860:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010863:	e9 9c 00 00 00       	jmp    c0010904 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010868:	3c 08                	cmp    al,0x8
c001086a:	75 35                	jne    c00108a1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c001086c:	56                   	push   esi
c001086d:	56                   	push   esi
c001086e:	6a 01                	push   0x1
c0010870:	53                   	push   ebx
c0010871:	e8 4e fd ff ff       	call   c00105c4 <VgaText::decrementCursor(bool)>
c0010876:	58                   	pop    eax
c0010877:	5a                   	pop    edx
c0010878:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001087b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001087e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010881:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010884:	6a 20                	push   0x20
c0010886:	53                   	push   ebx
c0010887:	e8 30 fc ff ff       	call   c00104bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001088c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010891:	83 c4 20             	add    esp,0x20
c0010894:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010897:	0f b7 f6             	movzx  esi,si
c001089a:	01 f6                	add    esi,esi
c001089c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001089f:	eb 63                	jmp    c0010904 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00108a1:	51                   	push   ecx
c00108a2:	51                   	push   ecx
c00108a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00108a7:	50                   	push   eax
c00108a8:	e8 fd fb ff ff       	call   c00104aa <VgaText::combineCharAndColour(char, unsigned char)>
c00108ad:	83 c4 10             	add    esp,0x10
c00108b0:	66 89 06             	mov    WORD PTR [esi],ax
c00108b3:	39 1d c4 f0 02 c0    	cmp    DWORD PTR ds:0xc002f0c4,ebx
c00108b9:	75 21                	jne    c00108dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00108bb:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c00108be:	85 c0                	test   eax,eax
c00108c0:	74 1a                	je     c00108dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c00108c2:	52                   	push   edx
c00108c3:	52                   	push   edx
c00108c4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00108c7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00108ca:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00108ce:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00108d2:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c00108d5:	51                   	push   ecx
c00108d6:	53                   	push   ebx
c00108d7:	ff d0                	call   eax
c00108d9:	83 c4 20             	add    esp,0x20
c00108dc:	83 c6 02             	add    esi,0x2
c00108df:	50                   	push   eax
c00108e0:	50                   	push   eax
c00108e1:	6a 00                	push   0x0
c00108e3:	53                   	push   ebx
c00108e4:	e8 87 fc ff ff       	call   c0010570 <VgaText::incrementCursor(bool)>
c00108e9:	83 c4 10             	add    esp,0x10
c00108ec:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00108f0:	75 0d                	jne    c00108ff <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c00108f2:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00108f7:	0f b7 f6             	movzx  esi,si
c00108fa:	01 f6                	add    esi,esi
c00108fc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00108ff:	bd 01 00 00 00       	mov    ebp,0x1
c0010904:	47                   	inc    edi
c0010905:	e9 f8 fe ff ff       	jmp    c0010802 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c001090a:	83 ec 0c             	sub    esp,0xc
c001090d:	53                   	push   ebx
c001090e:	e8 a1 f9 ff ff       	call   c00102b4 <VgaText::updateCursor()>
c0010913:	83 c4 10             	add    esp,0x10
c0010916:	89 e8                	mov    eax,ebp
c0010918:	84 c0                	test   al,al
c001091a:	74 0c                	je     c0010928 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c001091c:	83 ec 0c             	sub    esp,0xc
c001091f:	53                   	push   ebx
c0010920:	e8 8d fe ff ff       	call   c00107b2 <VgaText::doUpdate()>
c0010925:	83 c4 10             	add    esp,0x10
c0010928:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001092f:	83 c4 1c             	add    esp,0x1c
c0010932:	5b                   	pop    ebx
c0010933:	5e                   	pop    esi
c0010934:	5f                   	pop    edi
c0010935:	5d                   	pop    ebp
c0010936:	c3                   	ret    
c0010937:	90                   	nop

c0010938 <VgaText::clearScreen()>:
c0010938:	57                   	push   edi
c0010939:	56                   	push   esi
c001093a:	31 f6                	xor    esi,esi
c001093c:	53                   	push   ebx
c001093d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010941:	52                   	push   edx
c0010942:	6a 00                	push   0x0
c0010944:	6a 00                	push   0x0
c0010946:	53                   	push   ebx
c0010947:	e8 dc fb ff ff       	call   c0010528 <VgaText::setCursor(int, int)>
c001094c:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010953:	83 c4 10             	add    esp,0x10
c0010956:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010959:	7e 20                	jle    c001097b <VgaText::clearScreen()+0x43>
c001095b:	31 ff                	xor    edi,edi
c001095d:	50                   	push   eax
c001095e:	50                   	push   eax
c001095f:	56                   	push   esi
c0010960:	57                   	push   edi
c0010961:	47                   	inc    edi
c0010962:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010965:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010968:	6a 20                	push   0x20
c001096a:	53                   	push   ebx
c001096b:	e8 4c fb ff ff       	call   c00104bc <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010970:	83 c4 20             	add    esp,0x20
c0010973:	83 ff 50             	cmp    edi,0x50
c0010976:	75 e5                	jne    c001095d <VgaText::clearScreen()+0x25>
c0010978:	46                   	inc    esi
c0010979:	eb db                	jmp    c0010956 <VgaText::clearScreen()+0x1e>
c001097b:	83 ec 0c             	sub    esp,0xc
c001097e:	53                   	push   ebx
c001097f:	e8 2e fe ff ff       	call   c00107b2 <VgaText::doUpdate()>
c0010984:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c001098b:	83 c4 10             	add    esp,0x10
c001098e:	5b                   	pop    ebx
c001098f:	5e                   	pop    esi
c0010990:	5f                   	pop    edi
c0010991:	c3                   	ret    

c0010992 <VgaText::putchar(char)>:
c0010992:	56                   	push   esi
c0010993:	53                   	push   ebx
c0010994:	83 ec 14             	sub    esp,0x14
c0010997:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001099b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001099f:	3c 5b                	cmp    al,0x5b
c00109a1:	75 18                	jne    c00109bb <VgaText::putchar(char)+0x29>
c00109a3:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00109a7:	74 1f                	je     c00109c8 <VgaText::putchar(char)+0x36>
c00109a9:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00109af:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00109b6:	e9 bd 00 00 00       	jmp    c0010a78 <VgaText::putchar(char)+0xe6>
c00109bb:	3c 1b                	cmp    al,0x1b
c00109bd:	75 09                	jne    c00109c8 <VgaText::putchar(char)+0x36>
c00109bf:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00109c3:	e9 b0 00 00 00       	jmp    c0010a78 <VgaText::putchar(char)+0xe6>
c00109c8:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00109cb:	84 c9                	test   cl,cl
c00109cd:	0f 84 92 00 00 00    	je     c0010a65 <VgaText::putchar(char)+0xd3>
c00109d3:	8d 50 c0             	lea    edx,[eax-0x40]
c00109d6:	80 fa 3e             	cmp    dl,0x3e
c00109d9:	77 76                	ja     c0010a51 <VgaText::putchar(char)+0xbf>
c00109db:	3c 6d                	cmp    al,0x6d
c00109dd:	75 47                	jne    c0010a26 <VgaText::putchar(char)+0x94>
c00109df:	31 f6                	xor    esi,esi
c00109e1:	31 d2                	xor    edx,edx
c00109e3:	31 c0                	xor    eax,eax
c00109e5:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00109e8:	7e 2d                	jle    c0010a17 <VgaText::putchar(char)+0x85>
c00109ea:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00109ef:	80 fa 3b             	cmp    dl,0x3b
c00109f2:	75 17                	jne    c0010a0b <VgaText::putchar(char)+0x79>
c00109f4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00109f8:	50                   	push   eax
c00109f9:	53                   	push   ebx
c00109fa:	e8 0b f9 ff ff       	call   c001030a <VgaText::doANSI_SGR(int)>
c00109ff:	59                   	pop    ecx
c0010a00:	31 d2                	xor    edx,edx
c0010a02:	58                   	pop    eax
c0010a03:	31 c0                	xor    eax,eax
c0010a05:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010a09:	eb 09                	jmp    c0010a14 <VgaText::putchar(char)+0x82>
c0010a0b:	6b c0 0a             	imul   eax,eax,0xa
c0010a0e:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010a12:	88 ca                	mov    dl,cl
c0010a14:	46                   	inc    esi
c0010a15:	eb ce                	jmp    c00109e5 <VgaText::putchar(char)+0x53>
c0010a17:	84 d2                	test   dl,dl
c0010a19:	74 2e                	je     c0010a49 <VgaText::putchar(char)+0xb7>
c0010a1b:	50                   	push   eax
c0010a1c:	53                   	push   ebx
c0010a1d:	e8 e8 f8 ff ff       	call   c001030a <VgaText::doANSI_SGR(int)>
c0010a22:	58                   	pop    eax
c0010a23:	5a                   	pop    edx
c0010a24:	eb 23                	jmp    c0010a49 <VgaText::putchar(char)+0xb7>
c0010a26:	3c 4a                	cmp    al,0x4a
c0010a28:	75 1f                	jne    c0010a49 <VgaText::putchar(char)+0xb7>
c0010a2a:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010a2e:	75 19                	jne    c0010a49 <VgaText::putchar(char)+0xb7>
c0010a30:	83 ec 0c             	sub    esp,0xc
c0010a33:	53                   	push   ebx
c0010a34:	e8 ff fe ff ff       	call   c0010938 <VgaText::clearScreen()>
c0010a39:	83 c4 0c             	add    esp,0xc
c0010a3c:	6a 00                	push   0x0
c0010a3e:	6a 00                	push   0x0
c0010a40:	53                   	push   ebx
c0010a41:	e8 e2 fa ff ff       	call   c0010528 <VgaText::setCursor(int, int)>
c0010a46:	83 c4 10             	add    esp,0x10
c0010a49:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010a4f:	eb 27                	jmp    c0010a78 <VgaText::putchar(char)+0xe6>
c0010a51:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010a54:	83 fa 0e             	cmp    edx,0xe
c0010a57:	7f 1f                	jg     c0010a78 <VgaText::putchar(char)+0xe6>
c0010a59:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010a5c:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010a5f:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010a63:	eb 13                	jmp    c0010a78 <VgaText::putchar(char)+0xe6>
c0010a65:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010a68:	0f be c0             	movsx  eax,al
c0010a6b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010a6e:	50                   	push   eax
c0010a6f:	53                   	push   ebx
c0010a70:	e8 71 fb ff ff       	call   c00105e6 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010a75:	83 c4 10             	add    esp,0x10
c0010a78:	83 c4 14             	add    esp,0x14
c0010a7b:	5b                   	pop    ebx
c0010a7c:	5e                   	pop    esi
c0010a7d:	c3                   	ret    

c0010a7e <VgaText::putx(unsigned int)>:
c0010a7e:	57                   	push   edi
c0010a7f:	b9 11 00 00 00       	mov    ecx,0x11
c0010a84:	56                   	push   esi
c0010a85:	be c2 ac 02 c0       	mov    esi,0xc002acc2
c0010a8a:	53                   	push   ebx
c0010a8b:	83 ec 20             	sub    esp,0x20
c0010a8e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a92:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010a96:	fc                   	cld    
c0010a97:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010a99:	be 08 00 00 00       	mov    esi,0x8
c0010a9e:	50                   	push   eax
c0010a9f:	50                   	push   eax
c0010aa0:	89 d8                	mov    eax,ebx
c0010aa2:	c1 e3 04             	shl    ebx,0x4
c0010aa5:	c1 e8 1c             	shr    eax,0x1c
c0010aa8:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010aad:	50                   	push   eax
c0010aae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010ab2:	e8 db fe ff ff       	call   c0010992 <VgaText::putchar(char)>
c0010ab7:	83 c4 10             	add    esp,0x10
c0010aba:	4e                   	dec    esi
c0010abb:	75 e1                	jne    c0010a9e <VgaText::putx(unsigned int)+0x20>
c0010abd:	83 c4 20             	add    esp,0x20
c0010ac0:	5b                   	pop    ebx
c0010ac1:	5e                   	pop    esi
c0010ac2:	5f                   	pop    edi
c0010ac3:	c3                   	ret    

c0010ac4 <VgaText::puts(char const*)>:
c0010ac4:	53                   	push   ebx
c0010ac5:	83 ec 08             	sub    esp,0x8
c0010ac8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010acc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010acf:	84 c0                	test   al,al
c0010ad1:	74 12                	je     c0010ae5 <VgaText::puts(char const*)+0x21>
c0010ad3:	43                   	inc    ebx
c0010ad4:	51                   	push   ecx
c0010ad5:	51                   	push   ecx
c0010ad6:	50                   	push   eax
c0010ad7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010adb:	e8 b2 fe ff ff       	call   c0010992 <VgaText::putchar(char)>
c0010ae0:	83 c4 10             	add    esp,0x10
c0010ae3:	eb e7                	jmp    c0010acc <VgaText::puts(char const*)+0x8>
c0010ae5:	83 c4 08             	add    esp,0x8
c0010ae8:	5b                   	pop    ebx
c0010ae9:	c3                   	ret    

c0010aea <VgaText::VgaText(char const*)>:
c0010aea:	57                   	push   edi
c0010aeb:	56                   	push   esi
c0010aec:	53                   	push   ebx
c0010aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010af1:	83 ec 08             	sub    esp,0x8
c0010af4:	6a 00                	push   0x0
c0010af6:	50                   	push   eax
c0010af7:	e8 8a 05 00 00       	call   c0011086 <UnixFile::UnixFile(int)>
c0010afc:	83 c4 10             	add    esp,0x10
c0010aff:	ba 28 ad 02 c0       	mov    edx,0xc002ad28
c0010b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b08:	89 10                	mov    DWORD PTR [eax],edx
c0010b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b0e:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010b15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b19:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010b20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b24:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b2c:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b34:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b3f:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b4a:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010b51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b55:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b60:	8d 50 60             	lea    edx,[eax+0x60]
c0010b63:	bb a0 f0 02 c0       	mov    ebx,0xc002f0a0
c0010b68:	b8 08 00 00 00       	mov    eax,0x8
c0010b6d:	fc                   	cld    
c0010b6e:	89 d7                	mov    edi,edx
c0010b70:	89 de                	mov    esi,ebx
c0010b72:	89 c1                	mov    ecx,eax
c0010b74:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b7a:	05 82 00 00 00       	add    eax,0x82
c0010b7f:	83 ec 08             	sub    esp,0x8
c0010b82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b86:	50                   	push   eax
c0010b87:	e8 80 fc fe ff       	call   c000080c <strcpy>
c0010b8c:	83 c4 10             	add    esp,0x10
c0010b8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b93:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010b9a:	83 ec 0c             	sub    esp,0xc
c0010b9d:	6a 01                	push   0x1
c0010b9f:	e8 25 09 00 00       	call   c00114c9 <Virt::allocateKernelVirtualPages(int)>
c0010ba4:	83 c4 10             	add    esp,0x10
c0010ba7:	89 c2                	mov    edx,eax
c0010ba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bad:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010bb0:	8b 1d 70 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f170
c0010bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010bbd:	89 c6                	mov    esi,eax
c0010bbf:	e8 cd ef ff ff       	call   c000fb91 <Phys::allocatePage()>
c0010bc4:	6a 05                	push   0x5
c0010bc6:	56                   	push   esi
c0010bc7:	50                   	push   eax
c0010bc8:	53                   	push   ebx
c0010bc9:	e8 32 11 00 00       	call   c0011d00 <VAS::mapPage(unsigned long, unsigned long, int)>
c0010bce:	83 c4 10             	add    esp,0x10
c0010bd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bd5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010bd8:	83 ec 04             	sub    esp,0x4
c0010bdb:	68 00 0f 00 00       	push   0xf00
c0010be0:	6a 00                	push   0x0
c0010be2:	50                   	push   eax
c0010be3:	e8 68 fb fe ff       	call   c0000750 <memset>
c0010be8:	83 c4 10             	add    esp,0x10
c0010beb:	83 ec 04             	sub    esp,0x4
c0010bee:	6a 00                	push   0x0
c0010bf0:	6a 07                	push   0x7
c0010bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bf6:	e8 a3 f7 ff ff       	call   c001039e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010bfb:	83 c4 10             	add    esp,0x10
c0010bfe:	83 ec 08             	sub    esp,0x8
c0010c01:	6a 02                	push   0x2
c0010c03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c07:	e8 c6 fa ff ff       	call   c00106d2 <VgaText::setCursorHeight(int)>
c0010c0c:	83 c4 10             	add    esp,0x10
c0010c0f:	83 ec 04             	sub    esp,0x4
c0010c12:	6a 00                	push   0x0
c0010c14:	6a 00                	push   0x0
c0010c16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c1a:	e8 09 f9 ff ff       	call   c0010528 <VgaText::setCursor(int, int)>
c0010c1f:	83 c4 10             	add    esp,0x10
c0010c22:	83 ec 08             	sub    esp,0x8
c0010c25:	6a 01                	push   0x1
c0010c27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c2b:	e8 9a f6 ff ff       	call   c00102ca <VgaText::showCursor(bool)>
c0010c30:	83 c4 10             	add    esp,0x10
c0010c33:	83 ec 08             	sub    esp,0x8
c0010c36:	6a 01                	push   0x1
c0010c38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c3c:	e8 95 f6 ff ff       	call   c00102d6 <VgaText::disableBlink(bool)>
c0010c41:	83 c4 10             	add    esp,0x10
c0010c44:	83 ec 0c             	sub    esp,0xc
c0010c47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c4b:	e8 e8 fc ff ff       	call   c0010938 <VgaText::clearScreen()>
c0010c50:	83 c4 10             	add    esp,0x10
c0010c53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c57:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c5f:	05 02 01 00 00       	add    eax,0x102
c0010c64:	83 ec 04             	sub    esp,0x4
c0010c67:	68 96 00 00 00       	push   0x96
c0010c6c:	6a 00                	push   0x0
c0010c6e:	50                   	push   eax
c0010c6f:	e8 dc fa fe ff       	call   c0000750 <memset>
c0010c74:	83 c4 10             	add    esp,0x10
c0010c77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c7b:	05 98 01 00 00       	add    eax,0x198
c0010c80:	83 ec 04             	sub    esp,0x4
c0010c83:	68 2c 01 00 00       	push   0x12c
c0010c88:	6a 00                	push   0x0
c0010c8a:	50                   	push   eax
c0010c8b:	e8 c0 fa fe ff       	call   c0000750 <memset>
c0010c90:	83 c4 10             	add    esp,0x10
c0010c93:	90                   	nop
c0010c94:	5b                   	pop    ebx
c0010c95:	5e                   	pop    esi
c0010c96:	5f                   	pop    edi
c0010c97:	c3                   	ret    

c0010c98 <VgaText::receiveKey(unsigned char)>:
c0010c98:	55                   	push   ebp
c0010c99:	57                   	push   edi
c0010c9a:	56                   	push   esi
c0010c9b:	53                   	push   ebx
c0010c9c:	83 ec 1c             	sub    esp,0x1c
c0010c9f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010ca3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ca7:	84 db                	test   bl,bl
c0010ca9:	0f 84 c9 00 00 00    	je     c0010d78 <VgaText::receiveKey(unsigned char)+0xe0>
c0010caf:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010cb5:	80 fb 08             	cmp    bl,0x8
c0010cb8:	75 2c                	jne    c0010ce6 <VgaText::receiveKey(unsigned char)+0x4e>
c0010cba:	83 ec 0c             	sub    esp,0xc
c0010cbd:	57                   	push   edi
c0010cbe:	e8 a9 fa fe ff       	call   c000076c <strlen>
c0010cc3:	83 c4 10             	add    esp,0x10
c0010cc6:	85 c0                	test   eax,eax
c0010cc8:	74 41                	je     c0010d0b <VgaText::receiveKey(unsigned char)+0x73>
c0010cca:	50                   	push   eax
c0010ccb:	50                   	push   eax
c0010ccc:	6a 08                	push   0x8
c0010cce:	56                   	push   esi
c0010ccf:	e8 be fc ff ff       	call   c0010992 <VgaText::putchar(char)>
c0010cd4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010cd7:	e8 90 fa fe ff       	call   c000076c <strlen>
c0010cdc:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010ce4:	eb 22                	jmp    c0010d08 <VgaText::receiveKey(unsigned char)+0x70>
c0010ce6:	0f be c3             	movsx  eax,bl
c0010ce9:	52                   	push   edx
c0010cea:	52                   	push   edx
c0010ceb:	50                   	push   eax
c0010cec:	56                   	push   esi
c0010ced:	e8 a0 fc ff ff       	call   c0010992 <VgaText::putchar(char)>
c0010cf2:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010cf6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010cfb:	59                   	pop    ecx
c0010cfc:	5d                   	pop    ebp
c0010cfd:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010d01:	50                   	push   eax
c0010d02:	57                   	push   edi
c0010d03:	e8 44 fc fe ff       	call   c000094c <strcat>
c0010d08:	83 c4 10             	add    esp,0x10
c0010d0b:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010d12:	75 05                	jne    c0010d19 <VgaText::receiveKey(unsigned char)+0x81>
c0010d14:	80 fb 0a             	cmp    bl,0xa
c0010d17:	75 53                	jne    c0010d6c <VgaText::receiveKey(unsigned char)+0xd4>
c0010d19:	83 ec 0c             	sub    esp,0xc
c0010d1c:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010d22:	53                   	push   ebx
c0010d23:	e8 44 fa fe ff       	call   c000076c <strlen>
c0010d28:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010d2b:	89 c5                	mov    ebp,eax
c0010d2d:	e8 3a fa fe ff       	call   c000076c <strlen>
c0010d32:	83 c4 10             	add    esp,0x10
c0010d35:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010d39:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010d3e:	76 10                	jbe    c0010d50 <VgaText::receiveKey(unsigned char)+0xb8>
c0010d40:	83 ec 0c             	sub    esp,0xc
c0010d43:	68 d3 ac 02 c0       	push   0xc002acd3
c0010d48:	e8 b8 95 00 00       	call   c001a305 <Krnl::panic(char const*)>
c0010d4d:	83 c4 10             	add    esp,0x10
c0010d50:	50                   	push   eax
c0010d51:	50                   	push   eax
c0010d52:	57                   	push   edi
c0010d53:	53                   	push   ebx
c0010d54:	e8 f3 fb fe ff       	call   c000094c <strcat>
c0010d59:	83 c4 0c             	add    esp,0xc
c0010d5c:	68 96 00 00 00       	push   0x96
c0010d61:	6a 00                	push   0x0
c0010d63:	57                   	push   edi
c0010d64:	e8 e7 f9 fe ff       	call   c0000750 <memset>
c0010d69:	83 c4 10             	add    esp,0x10
c0010d6c:	83 ec 0c             	sub    esp,0xc
c0010d6f:	56                   	push   esi
c0010d70:	e8 3d fa ff ff       	call   c00107b2 <VgaText::doUpdate()>
c0010d75:	83 c4 10             	add    esp,0x10
c0010d78:	83 c4 1c             	add    esp,0x1c
c0010d7b:	5b                   	pop    ebx
c0010d7c:	5e                   	pop    esi
c0010d7d:	5f                   	pop    edi
c0010d7e:	5d                   	pop    ebp
c0010d7f:	c3                   	ret    

c0010d80 <VgaText::write(unsigned long long, void*, int*)>:
c0010d80:	55                   	push   ebp
c0010d81:	57                   	push   edi
c0010d82:	56                   	push   esi
c0010d83:	53                   	push   ebx
c0010d84:	83 ec 0c             	sub    esp,0xc
c0010d87:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010d8b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010d8f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d93:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010d9a:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010d9d:	39 eb                	cmp    ebx,ebp
c0010d9f:	74 13                	je     c0010db4 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010da1:	43                   	inc    ebx
c0010da2:	50                   	push   eax
c0010da3:	50                   	push   eax
c0010da4:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010da8:	50                   	push   eax
c0010da9:	56                   	push   esi
c0010daa:	e8 e3 fb ff ff       	call   c0010992 <VgaText::putchar(char)>
c0010daf:	83 c4 10             	add    esp,0x10
c0010db2:	eb e9                	jmp    c0010d9d <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010db4:	83 ec 0c             	sub    esp,0xc
c0010db7:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010dbe:	56                   	push   esi
c0010dbf:	e8 ee f9 ff ff       	call   c00107b2 <VgaText::doUpdate()>
c0010dc4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010dc8:	89 38                	mov    DWORD PTR [eax],edi
c0010dca:	83 c4 1c             	add    esp,0x1c
c0010dcd:	31 c0                	xor    eax,eax
c0010dcf:	5b                   	pop    ebx
c0010dd0:	5e                   	pop    esi
c0010dd1:	5f                   	pop    edi
c0010dd2:	5d                   	pop    ebp
c0010dd3:	c3                   	ret    

c0010dd4 <newTerminal(char*)>:
c0010dd4:	83 ec 28             	sub    esp,0x28
c0010dd7:	68 c4 02 00 00       	push   0x2c4
c0010ddc:	e8 ab ea ff ff       	call   c000f88c <malloc>
c0010de1:	5a                   	pop    edx
c0010de2:	59                   	pop    ecx
c0010de3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010de7:	50                   	push   eax
c0010de8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010dec:	e8 f9 fc ff ff       	call   c0010aea <VgaText::VgaText(char const*)>
c0010df1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010df5:	83 c4 2c             	add    esp,0x2c
c0010df8:	c3                   	ret    
c0010df9:	90                   	nop

c0010dfa <TSS::TSS()>:
c0010dfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dfe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e05:	90                   	nop
c0010e06:	c3                   	ret    
c0010e07:	90                   	nop

c0010e08 <TSS::setESP(unsigned long)>:
c0010e08:	55                   	push   ebp
c0010e09:	89 e5                	mov    ebp,esp
c0010e0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e11:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e14:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e17:	90                   	nop
c0010e18:	5d                   	pop    ebp
c0010e19:	c3                   	ret    

c0010e1a <TSS::flush()>:
c0010e1a:	55                   	push   ebp
c0010e1b:	89 e5                	mov    ebp,esp
c0010e1d:	83 ec 10             	sub    esp,0x10
c0010e20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e23:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e25:	83 c8 03             	or     eax,0x3
c0010e28:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010e2c:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010e30:	66 89 d0             	mov    ax,dx
c0010e33:	0f 00 d8             	ltr    ax
c0010e36:	90                   	nop
c0010e37:	c9                   	leave  
c0010e38:	c3                   	ret    
c0010e39:	90                   	nop

c0010e3a <TSS::setup(unsigned long, unsigned long)>:
c0010e3a:	55                   	push   ebp
c0010e3b:	89 e5                	mov    ebp,esp
c0010e3d:	83 ec 18             	sub    esp,0x18
c0010e40:	83 ec 0c             	sub    esp,0xc
c0010e43:	6a 68                	push   0x68
c0010e45:	e8 42 ea ff ff       	call   c000f88c <malloc>
c0010e4a:	83 c4 10             	add    esp,0x10
c0010e4d:	89 c2                	mov    edx,eax
c0010e4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e52:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e5b:	83 ec 04             	sub    esp,0x4
c0010e5e:	6a 68                	push   0x68
c0010e60:	6a 00                	push   0x0
c0010e62:	50                   	push   eax
c0010e63:	e8 e8 f8 fe ff       	call   c0000750 <memset>
c0010e68:	83 c4 10             	add    esp,0x10
c0010e6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e71:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010e77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e7d:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010e83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e89:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e8c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e95:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010e9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ea1:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010ea7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ead:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010eb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010eb9:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010ebf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ec2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ec5:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010ecb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ece:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ed1:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010ed7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010edd:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010ee0:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010ee3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ee6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ee9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010eec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010eef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ef2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ef5:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010efc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f02:	0f 20 da             	mov    edx,cr3
c0010f05:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010f08:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010f0b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010f0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f11:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f14:	83 ec 08             	sub    esp,0x8
c0010f17:	50                   	push   eax
c0010f18:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010f1b:	50                   	push   eax
c0010f1c:	e8 47 e1 ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c0010f21:	83 c4 10             	add    esp,0x10
c0010f24:	83 ec 08             	sub    esp,0x8
c0010f27:	6a 68                	push   0x68
c0010f29:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010f2c:	50                   	push   eax
c0010f2d:	e8 52 e1 ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c0010f32:	83 c4 10             	add    esp,0x10
c0010f35:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010f39:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010f3c:	83 e0 0f             	and    eax,0xf
c0010f3f:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010f42:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010f45:	83 c8 40             	or     eax,0x40
c0010f48:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010f4b:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0010f50:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010f56:	05 78 01 00 00       	add    eax,0x178
c0010f5b:	83 ec 04             	sub    esp,0x4
c0010f5e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010f61:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010f64:	50                   	push   eax
c0010f65:	e8 4e e1 ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c0010f6a:	83 c4 10             	add    esp,0x10
c0010f6d:	89 c2                	mov    edx,eax
c0010f6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f72:	89 10                	mov    DWORD PTR [eax],edx
c0010f74:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0010f79:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010f7f:	05 78 01 00 00       	add    eax,0x178
c0010f84:	83 ec 0c             	sub    esp,0xc
c0010f87:	50                   	push   eax
c0010f88:	e8 6f e1 ff ff       	call   c000f0fc <GDT::flush()>
c0010f8d:	83 c4 10             	add    esp,0x10
c0010f90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f93:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f95:	83 ec 08             	sub    esp,0x8
c0010f98:	50                   	push   eax
c0010f99:	68 3c ad 02 c0       	push   0xc002ad3c
c0010f9e:	e8 2c 19 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0010fa3:	83 c4 10             	add    esp,0x10
c0010fa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010fa9:	8b 00                	mov    eax,DWORD PTR [eax]
c0010fab:	c9                   	leave  
c0010fac:	c3                   	ret    
c0010fad:	90                   	nop

c0010fae <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010fae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fb2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010fb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fb9:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010fbe:	75 08                	jne    c0010fc8 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010fc0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010fc6:	eb 38                	jmp    c0011000 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010fc8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010fcd:	75 17                	jne    c0010fe6 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010fcf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fd4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010fd7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010fdd:	8b 10                	mov    edx,DWORD PTR [eax]
c0010fdf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010fe3:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010fe6:	89 c1                	mov    ecx,eax
c0010fe8:	83 e1 fd             	and    ecx,0xfffffffd
c0010feb:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010ff1:	74 cd                	je     c0010fc0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010ff3:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010ff8:	83 e0 ef             	and    eax,0xffffffef
c0010ffb:	83 f8 08             	cmp    eax,0x8
c0010ffe:	76 c0                	jbe    c0010fc0 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011000:	31 c0                	xor    eax,eax
c0011002:	c3                   	ret    
c0011003:	90                   	nop

c0011004 <ReservedFilename::isAtty()>:
c0011004:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011008:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001100b:	31 c0                	xor    eax,eax
c001100d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011013:	74 09                	je     c001101e <ReservedFilename::isAtty()+0x1a>
c0011015:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001101b:	0f 94 c0             	sete   al
c001101e:	c3                   	ret    
c001101f:	90                   	nop

c0011020 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011020:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011024:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001102b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001102f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011034:	75 08                	jne    c001103e <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011036:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001103c:	eb 3d                	jmp    c001107b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001103e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011043:	75 17                	jne    c001105c <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011045:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001104a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001104d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011053:	8b 10                	mov    edx,DWORD PTR [eax]
c0011055:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011059:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001105c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011061:	75 04                	jne    c0011067 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011063:	89 0a                	mov    DWORD PTR [edx],ecx
c0011065:	eb 14                	jmp    c001107b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011067:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001106c:	74 c8                	je     c0011036 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001106e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011073:	83 e0 ef             	and    eax,0xffffffef
c0011076:	83 f8 08             	cmp    eax,0x8
c0011079:	76 bb                	jbe    c0011036 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001107b:	31 c0                	xor    eax,eax
c001107d:	c3                   	ret    

c001107e <UnixFile::getFileDescriptor()>:
c001107e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011082:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011085:	c3                   	ret    

c0011086 <UnixFile::UnixFile(int)>:
c0011086:	53                   	push   ebx
c0011087:	83 ec 28             	sub    esp,0x28
c001108a:	ba 28 ae 02 c0       	mov    edx,0xc002ae28
c001108f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011093:	89 10                	mov    DWORD PTR [eax],edx
c0011095:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001109d:	0f 8f 8c 01 00 00    	jg     c001122f <UnixFile::UnixFile(int)+0x1a9>
c00110a3:	a1 a0 df 02 c0       	mov    eax,ds:0xc002dfa0
c00110a8:	8d 50 01             	lea    edx,[eax+0x1]
c00110ab:	89 15 a0 df 02 c0    	mov    DWORD PTR ds:0xc002dfa0,edx
c00110b1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00110b5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00110b8:	83 ec 08             	sub    esp,0x8
c00110bb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00110bf:	68 58 f1 02 c0       	push   0xc002f158
c00110c4:	e8 b3 7e 01 00       	call   c0028f7c <LinkedList<UnixFile>::addElement(UnixFile*)>
c00110c9:	83 c4 10             	add    esp,0x10
c00110cc:	a0 54 f1 02 c0       	mov    al,ds:0xc002f154
c00110d1:	83 f0 01             	xor    eax,0x1
c00110d4:	84 c0                	test   al,al
c00110d6:	0f 84 54 01 00 00    	je     c0011230 <UnixFile::UnixFile(int)+0x1aa>
c00110dc:	c6 05 54 f1 02 c0 01 	mov    BYTE PTR ds:0xc002f154,0x1
c00110e3:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00110eb:	83 ec 0c             	sub    esp,0xc
c00110ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110f2:	e8 95 e7 ff ff       	call   c000f88c <malloc>
c00110f7:	83 c4 10             	add    esp,0x10
c00110fa:	89 c3                	mov    ebx,eax
c00110fc:	83 ec 08             	sub    esp,0x8
c00110ff:	68 03 ff ff 0f       	push   0xfffff03
c0011104:	53                   	push   ebx
c0011105:	e8 2c 01 00 00       	call   c0011236 <ReservedFilename::ReservedFilename(int)>
c001110a:	83 c4 10             	add    esp,0x10
c001110d:	89 1d 4c f1 02 c0    	mov    DWORD PTR ds:0xc002f14c,ebx
c0011113:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001111b:	83 ec 0c             	sub    esp,0xc
c001111e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011122:	e8 65 e7 ff ff       	call   c000f88c <malloc>
c0011127:	83 c4 10             	add    esp,0x10
c001112a:	89 c3                	mov    ebx,eax
c001112c:	83 ec 08             	sub    esp,0x8
c001112f:	68 01 ff ff 0f       	push   0xfffff01
c0011134:	53                   	push   ebx
c0011135:	e8 fc 00 00 00       	call   c0011236 <ReservedFilename::ReservedFilename(int)>
c001113a:	83 c4 10             	add    esp,0x10
c001113d:	89 1d 50 f1 02 c0    	mov    DWORD PTR ds:0xc002f150,ebx
c0011143:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001114b:	83 ec 0c             	sub    esp,0xc
c001114e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011152:	e8 35 e7 ff ff       	call   c000f88c <malloc>
c0011157:	83 c4 10             	add    esp,0x10
c001115a:	89 c3                	mov    ebx,eax
c001115c:	83 ec 08             	sub    esp,0x8
c001115f:	68 00 ff ff 0f       	push   0xfffff00
c0011164:	53                   	push   ebx
c0011165:	e8 cc 00 00 00       	call   c0011236 <ReservedFilename::ReservedFilename(int)>
c001116a:	83 c4 10             	add    esp,0x10
c001116d:	89 1d 44 f1 02 c0    	mov    DWORD PTR ds:0xc002f144,ebx
c0011173:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001117b:	83 ec 0c             	sub    esp,0xc
c001117e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011182:	e8 05 e7 ff ff       	call   c000f88c <malloc>
c0011187:	83 c4 10             	add    esp,0x10
c001118a:	89 c3                	mov    ebx,eax
c001118c:	83 ec 08             	sub    esp,0x8
c001118f:	68 02 ff ff 0f       	push   0xfffff02
c0011194:	53                   	push   ebx
c0011195:	e8 9c 00 00 00       	call   c0011236 <ReservedFilename::ReservedFilename(int)>
c001119a:	83 c4 10             	add    esp,0x10
c001119d:	89 1d 48 f1 02 c0    	mov    DWORD PTR ds:0xc002f148,ebx
c00111a3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00111ab:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00111b0:	7f 7e                	jg     c0011230 <UnixFile::UnixFile(int)+0x1aa>
c00111b2:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00111ba:	83 ec 0c             	sub    esp,0xc
c00111bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00111c1:	e8 c6 e6 ff ff       	call   c000f88c <malloc>
c00111c6:	83 c4 10             	add    esp,0x10
c00111c9:	89 c3                	mov    ebx,eax
c00111cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111cf:	05 10 ff ff 0f       	add    eax,0xfffff10
c00111d4:	83 ec 08             	sub    esp,0x8
c00111d7:	50                   	push   eax
c00111d8:	53                   	push   ebx
c00111d9:	e8 58 00 00 00       	call   c0011236 <ReservedFilename::ReservedFilename(int)>
c00111de:	83 c4 10             	add    esp,0x10
c00111e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111e5:	89 1c 85 20 f1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0ee0],ebx
c00111ec:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00111f4:	83 ec 0c             	sub    esp,0xc
c00111f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00111fb:	e8 8c e6 ff ff       	call   c000f88c <malloc>
c0011200:	83 c4 10             	add    esp,0x10
c0011203:	89 c3                	mov    ebx,eax
c0011205:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011209:	05 20 ff ff 0f       	add    eax,0xfffff20
c001120e:	83 ec 08             	sub    esp,0x8
c0011211:	50                   	push   eax
c0011212:	53                   	push   ebx
c0011213:	e8 1e 00 00 00       	call   c0011236 <ReservedFilename::ReservedFilename(int)>
c0011218:	83 c4 10             	add    esp,0x10
c001121b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001121f:	89 1c 85 e0 f0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0f20],ebx
c0011226:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001122a:	e9 7c ff ff ff       	jmp    c00111ab <UnixFile::UnixFile(int)+0x125>
c001122f:	90                   	nop
c0011230:	83 c4 28             	add    esp,0x28
c0011233:	5b                   	pop    ebx
c0011234:	c3                   	ret    
c0011235:	90                   	nop

c0011236 <ReservedFilename::ReservedFilename(int)>:
c0011236:	83 ec 0c             	sub    esp,0xc
c0011239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001123d:	83 ec 08             	sub    esp,0x8
c0011240:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011244:	50                   	push   eax
c0011245:	e8 3c fe ff ff       	call   c0011086 <UnixFile::UnixFile(int)>
c001124a:	83 c4 10             	add    esp,0x10
c001124d:	ba 44 ae 02 c0       	mov    edx,0xc002ae44
c0011252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011256:	89 10                	mov    DWORD PTR [eax],edx
c0011258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001125c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011260:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011263:	90                   	nop
c0011264:	83 c4 0c             	add    esp,0xc
c0011267:	c3                   	ret    

c0011268 <UnixFile::~UnixFile()>:
c0011268:	83 ec 1c             	sub    esp,0x1c
c001126b:	ba 28 ae 02 c0       	mov    edx,0xc002ae28
c0011270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011274:	89 10                	mov    DWORD PTR [eax],edx
c0011276:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001127a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001127d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011282:	7f 73                	jg     c00112f7 <UnixFile::~UnixFile()+0x8f>
c0011284:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001128c:	83 ec 0c             	sub    esp,0xc
c001128f:	68 58 f1 02 c0       	push   0xc002f158
c0011294:	e8 b7 7d 01 00       	call   c0029050 <LinkedList<UnixFile>::getFirstElement()>
c0011299:	83 c4 10             	add    esp,0x10
c001129c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00112a0:	83 ec 0c             	sub    esp,0xc
c00112a3:	68 58 f1 02 c0       	push   0xc002f158
c00112a8:	e8 ab 7d 01 00       	call   c0029058 <LinkedList<UnixFile>::removeFirst()>
c00112ad:	83 c4 10             	add    esp,0x10
c00112b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00112b4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00112b8:	74 40                	je     c00112fa <UnixFile::~UnixFile()+0x92>
c00112ba:	83 ec 08             	sub    esp,0x8
c00112bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00112c1:	68 58 f1 02 c0       	push   0xc002f158
c00112c6:	e8 b1 7c 01 00       	call   c0028f7c <LinkedList<UnixFile>::addElement(UnixFile*)>
c00112cb:	83 c4 10             	add    esp,0x10
c00112ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112d2:	8d 50 01             	lea    edx,[eax+0x1]
c00112d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00112d9:	3d 88 13 00 00       	cmp    eax,0x1388
c00112de:	0f 94 c0             	sete   al
c00112e1:	84 c0                	test   al,al
c00112e3:	74 a7                	je     c001128c <UnixFile::~UnixFile()+0x24>
c00112e5:	83 ec 0c             	sub    esp,0xc
c00112e8:	68 00 ae 02 c0       	push   0xc002ae00
c00112ed:	e8 13 90 00 00       	call   c001a305 <Krnl::panic(char const*)>
c00112f2:	83 c4 10             	add    esp,0x10
c00112f5:	eb 95                	jmp    c001128c <UnixFile::~UnixFile()+0x24>
c00112f7:	90                   	nop
c00112f8:	eb 01                	jmp    c00112fb <UnixFile::~UnixFile()+0x93>
c00112fa:	90                   	nop
c00112fb:	90                   	nop
c00112fc:	83 c4 1c             	add    esp,0x1c
c00112ff:	c3                   	ret    

c0011300 <UnixFile::~UnixFile()>:
c0011300:	83 ec 0c             	sub    esp,0xc
c0011303:	83 ec 0c             	sub    esp,0xc
c0011306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001130a:	e8 59 ff ff ff       	call   c0011268 <UnixFile::~UnixFile()>
c001130f:	83 c4 10             	add    esp,0x10
c0011312:	83 ec 08             	sub    esp,0x8
c0011315:	6a 0c                	push   0xc
c0011317:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001131b:	e8 cf 14 00 00       	call   c00127ef <operator delete(void*, unsigned long)>
c0011320:	83 c4 10             	add    esp,0x10
c0011323:	83 c4 0c             	add    esp,0xc
c0011326:	c3                   	ret    
c0011327:	90                   	nop

c0011328 <ReservedFilename::~ReservedFilename()>:
c0011328:	83 ec 0c             	sub    esp,0xc
c001132b:	ba 44 ae 02 c0       	mov    edx,0xc002ae44
c0011330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011334:	89 10                	mov    DWORD PTR [eax],edx
c0011336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001133a:	83 ec 0c             	sub    esp,0xc
c001133d:	50                   	push   eax
c001133e:	e8 25 ff ff ff       	call   c0011268 <UnixFile::~UnixFile()>
c0011343:	83 c4 10             	add    esp,0x10
c0011346:	90                   	nop
c0011347:	83 c4 0c             	add    esp,0xc
c001134a:	c3                   	ret    
c001134b:	90                   	nop

c001134c <ReservedFilename::~ReservedFilename()>:
c001134c:	83 ec 0c             	sub    esp,0xc
c001134f:	83 ec 0c             	sub    esp,0xc
c0011352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011356:	e8 cd ff ff ff       	call   c0011328 <ReservedFilename::~ReservedFilename()>
c001135b:	83 c4 10             	add    esp,0x10
c001135e:	83 ec 08             	sub    esp,0x8
c0011361:	6a 0c                	push   0xc
c0011363:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011367:	e8 83 14 00 00       	call   c00127ef <operator delete(void*, unsigned long)>
c001136c:	83 c4 10             	add    esp,0x10
c001136f:	83 c4 0c             	add    esp,0xc
c0011372:	c3                   	ret    

c0011373 <getFromFileDescriptor(int)>:
c0011373:	53                   	push   ebx
c0011374:	83 ec 08             	sub    esp,0x8
c0011377:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001137b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011381:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011387:	7f 2c                	jg     c00113b5 <getFromFileDescriptor(int)+0x42>
c0011389:	83 ec 0c             	sub    esp,0xc
c001138c:	68 58 f1 02 c0       	push   0xc002f158
c0011391:	e8 ba 7c 01 00       	call   c0029050 <LinkedList<UnixFile>::getFirstElement()>
c0011396:	83 c4 10             	add    esp,0x10
c0011399:	85 c0                	test   eax,eax
c001139b:	75 04                	jne    c00113a1 <getFromFileDescriptor(int)+0x2e>
c001139d:	31 c0                	xor    eax,eax
c001139f:	eb 6e                	jmp    c001140f <getFromFileDescriptor(int)+0x9c>
c00113a1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00113a4:	74 69                	je     c001140f <getFromFileDescriptor(int)+0x9c>
c00113a6:	52                   	push   edx
c00113a7:	52                   	push   edx
c00113a8:	50                   	push   eax
c00113a9:	68 58 f1 02 c0       	push   0xc002f158
c00113ae:	e8 47 7d 01 00       	call   c00290fa <LinkedList<UnixFile>::getNext(UnixFile*)>
c00113b3:	eb e1                	jmp    c0011396 <getFromFileDescriptor(int)+0x23>
c00113b5:	a1 4c f1 02 c0       	mov    eax,ds:0xc002f14c
c00113ba:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00113c0:	74 4d                	je     c001140f <getFromFileDescriptor(int)+0x9c>
c00113c2:	a1 50 f1 02 c0       	mov    eax,ds:0xc002f150
c00113c7:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00113cd:	74 40                	je     c001140f <getFromFileDescriptor(int)+0x9c>
c00113cf:	a1 48 f1 02 c0       	mov    eax,ds:0xc002f148
c00113d4:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00113da:	74 33                	je     c001140f <getFromFileDescriptor(int)+0x9c>
c00113dc:	a1 44 f1 02 c0       	mov    eax,ds:0xc002f144
c00113e1:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00113e7:	74 26                	je     c001140f <getFromFileDescriptor(int)+0x9c>
c00113e9:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00113ef:	83 f8 08             	cmp    eax,0x8
c00113f2:	77 09                	ja     c00113fd <getFromFileDescriptor(int)+0x8a>
c00113f4:	8b 04 85 20 f1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ee0]
c00113fb:	eb 12                	jmp    c001140f <getFromFileDescriptor(int)+0x9c>
c00113fd:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011403:	83 fb 08             	cmp    ebx,0x8
c0011406:	77 95                	ja     c001139d <getFromFileDescriptor(int)+0x2a>
c0011408:	8b 04 9d e0 f0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0f20]
c001140f:	83 c4 08             	add    esp,0x8
c0011412:	5b                   	pop    ebx
c0011413:	c3                   	ret    

c0011414 <__static_initialization_and_destruction_0(int, int)>:
c0011414:	83 ec 0c             	sub    esp,0xc
c0011417:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001141c:	75 34                	jne    c0011452 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001141e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011426:	75 2a                	jne    c0011452 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011428:	83 ec 0c             	sub    esp,0xc
c001142b:	68 58 f1 02 c0       	push   0xc002f158
c0011430:	e8 ef 7a 01 00       	call   c0028f24 <LinkedList<UnixFile>::LinkedList()>
c0011435:	83 c4 10             	add    esp,0x10
c0011438:	83 ec 04             	sub    esp,0x4
c001143b:	68 bc dd 02 c0       	push   0xc002ddbc
c0011440:	68 58 f1 02 c0       	push   0xc002f158
c0011445:	68 22 8f 02 c0       	push   0xc0028f22
c001144a:	e8 1a 13 00 00       	call   c0012769 <__cxa_atexit>
c001144f:	83 c4 10             	add    esp,0x10
c0011452:	90                   	nop
c0011453:	83 c4 0c             	add    esp,0xc
c0011456:	c3                   	ret    

c0011457 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011457:	83 ec 0c             	sub    esp,0xc
c001145a:	83 ec 08             	sub    esp,0x8
c001145d:	68 ff ff 00 00       	push   0xffff
c0011462:	6a 01                	push   0x1
c0011464:	e8 ab ff ff ff       	call   c0011414 <__static_initialization_and_destruction_0(int, int)>
c0011469:	83 c4 10             	add    esp,0x10
c001146c:	83 c4 0c             	add    esp,0xc
c001146f:	c3                   	ret    

c0011470 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011470:	53                   	push   ebx
c0011471:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011475:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011479:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c001147f:	89 c8                	mov    eax,ecx
c0011481:	d1 e8                	shr    eax,1
c0011483:	03 05 a8 df 02 c0    	add    eax,DWORD PTR ds:0xc002dfa8
c0011489:	83 e1 01             	and    ecx,0x1
c001148c:	8a 10                	mov    dl,BYTE PTR [eax]
c001148e:	75 09                	jne    c0011499 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011490:	83 e2 f0             	and    edx,0xfffffff0
c0011493:	09 da                	or     edx,ebx
c0011495:	88 10                	mov    BYTE PTR [eax],dl
c0011497:	5b                   	pop    ebx
c0011498:	c3                   	ret    
c0011499:	c1 e3 04             	shl    ebx,0x4
c001149c:	83 e2 0f             	and    edx,0xf
c001149f:	09 da                	or     edx,ebx
c00114a1:	88 10                	mov    BYTE PTR [eax],dl
c00114a3:	5b                   	pop    ebx
c00114a4:	c3                   	ret    

c00114a5 <Virt::getPageState(unsigned long)>:
c00114a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114a9:	8b 0d a8 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfa8
c00114af:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00114b5:	89 d0                	mov    eax,edx
c00114b7:	d1 e8                	shr    eax,1
c00114b9:	83 e2 01             	and    edx,0x1
c00114bc:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00114bf:	75 04                	jne    c00114c5 <Virt::getPageState(unsigned long)+0x20>
c00114c1:	83 e0 0f             	and    eax,0xf
c00114c4:	c3                   	ret    
c00114c5:	c0 e8 04             	shr    al,0x4
c00114c8:	c3                   	ret    

c00114c9 <Virt::allocateKernelVirtualPages(int)>:
c00114c9:	55                   	push   ebp
c00114ca:	31 ed                	xor    ebp,ebp
c00114cc:	57                   	push   edi
c00114cd:	56                   	push   esi
c00114ce:	53                   	push   ebx
c00114cf:	31 db                	xor    ebx,ebx
c00114d1:	83 ec 1c             	sub    esp,0x1c
c00114d4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00114d8:	8b 3d a4 df 02 c0    	mov    edi,DWORD PTR ds:0xc002dfa4
c00114de:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00114e3:	57                   	push   edi
c00114e4:	e8 bc ff ff ff       	call   c00114a5 <Virt::getPageState(unsigned long)>
c00114e9:	5a                   	pop    edx
c00114ea:	84 c0                	test   al,al
c00114ec:	75 3a                	jne    c0011528 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00114ee:	85 db                	test   ebx,ebx
c00114f0:	75 02                	jne    c00114f4 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00114f2:	89 fd                	mov    ebp,edi
c00114f4:	43                   	inc    ebx
c00114f5:	39 f3                	cmp    ebx,esi
c00114f7:	74 5a                	je     c0011553 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00114f9:	47                   	inc    edi
c00114fa:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011500:	76 31                	jbe    c0011533 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011502:	c7 05 a4 df 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002dfa4,0xc8000
c001150c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011511:	75 28                	jne    c001153b <Virt::allocateKernelVirtualPages(int)+0x72>
c0011513:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011518:	bf 00 80 0c 00       	mov    edi,0xc8000
c001151d:	57                   	push   edi
c001151e:	e8 82 ff ff ff       	call   c00114a5 <Virt::getPageState(unsigned long)>
c0011523:	5a                   	pop    edx
c0011524:	84 c0                	test   al,al
c0011526:	74 c6                	je     c00114ee <Virt::allocateKernelVirtualPages(int)+0x25>
c0011528:	31 db                	xor    ebx,ebx
c001152a:	47                   	inc    edi
c001152b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011531:	77 cf                	ja     c0011502 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011533:	89 3d a4 df 02 c0    	mov    DWORD PTR ds:0xc002dfa4,edi
c0011539:	eb a8                	jmp    c00114e3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c001153b:	83 ec 0c             	sub    esp,0xc
c001153e:	68 58 ae 02 c0       	push   0xc002ae58
c0011543:	e8 bd 8d 00 00       	call   c001a305 <Krnl::panic(char const*)>
c0011548:	8b 3d a4 df 02 c0    	mov    edi,DWORD PTR ds:0xc002dfa4
c001154e:	83 c4 10             	add    esp,0x10
c0011551:	eb 90                	jmp    c00114e3 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011553:	89 2d a4 df 02 c0    	mov    DWORD PTR ds:0xc002dfa4,ebp
c0011559:	4b                   	dec    ebx
c001155a:	74 5f                	je     c00115bb <Virt::allocateKernelVirtualPages(int)+0xf2>
c001155c:	85 f6                	test   esi,esi
c001155e:	74 3d                	je     c001159d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011560:	89 e8                	mov    eax,ebp
c0011562:	31 db                	xor    ebx,ebx
c0011564:	8d 7e ff             	lea    edi,[esi-0x1]
c0011567:	eb 14                	jmp    c001157d <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011569:	6a 01                	push   0x1
c001156b:	43                   	inc    ebx
c001156c:	50                   	push   eax
c001156d:	e8 fe fe ff ff       	call   c0011470 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011572:	58                   	pop    eax
c0011573:	39 f3                	cmp    ebx,esi
c0011575:	5a                   	pop    edx
c0011576:	74 25                	je     c001159d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011578:	a1 a4 df 02 c0       	mov    eax,ds:0xc002dfa4
c001157d:	8d 50 01             	lea    edx,[eax+0x1]
c0011580:	85 db                	test   ebx,ebx
c0011582:	89 15 a4 df 02 c0    	mov    DWORD PTR ds:0xc002dfa4,edx
c0011588:	74 20                	je     c00115aa <Virt::allocateKernelVirtualPages(int)+0xe1>
c001158a:	39 df                	cmp    edi,ebx
c001158c:	75 db                	jne    c0011569 <Virt::allocateKernelVirtualPages(int)+0xa0>
c001158e:	6a 03                	push   0x3
c0011590:	43                   	inc    ebx
c0011591:	50                   	push   eax
c0011592:	e8 d9 fe ff ff       	call   c0011470 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011597:	59                   	pop    ecx
c0011598:	39 f3                	cmp    ebx,esi
c001159a:	58                   	pop    eax
c001159b:	75 db                	jne    c0011578 <Virt::allocateKernelVirtualPages(int)+0xaf>
c001159d:	83 c4 1c             	add    esp,0x1c
c00115a0:	89 e8                	mov    eax,ebp
c00115a2:	5b                   	pop    ebx
c00115a3:	c1 e0 0c             	shl    eax,0xc
c00115a6:	5e                   	pop    esi
c00115a7:	5f                   	pop    edi
c00115a8:	5d                   	pop    ebp
c00115a9:	c3                   	ret    
c00115aa:	6a 02                	push   0x2
c00115ac:	bb 01 00 00 00       	mov    ebx,0x1
c00115b1:	50                   	push   eax
c00115b2:	e8 b9 fe ff ff       	call   c0011470 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00115b7:	58                   	pop    eax
c00115b8:	5a                   	pop    edx
c00115b9:	eb bd                	jmp    c0011578 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00115bb:	6a 04                	push   0x4
c00115bd:	8d 45 01             	lea    eax,[ebp+0x1]
c00115c0:	55                   	push   ebp
c00115c1:	a3 a4 df 02 c0       	mov    ds:0xc002dfa4,eax
c00115c6:	e8 a5 fe ff ff       	call   c0011470 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00115cb:	59                   	pop    ecx
c00115cc:	89 e8                	mov    eax,ebp
c00115ce:	5b                   	pop    ebx
c00115cf:	c1 e0 0c             	shl    eax,0xc
c00115d2:	83 c4 1c             	add    esp,0x1c
c00115d5:	5b                   	pop    ebx
c00115d6:	5e                   	pop    esi
c00115d7:	5f                   	pop    edi
c00115d8:	5d                   	pop    ebp
c00115d9:	c3                   	ret    

c00115da <Virt::freeSwapfilePage(unsigned long)>:
c00115da:	53                   	push   ebx
c00115db:	8b 15 6c f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f16c
c00115e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115e5:	b8 01 00 00 00       	mov    eax,0x1
c00115ea:	89 cb                	mov    ebx,ecx
c00115ec:	d3 e0                	shl    eax,cl
c00115ee:	c1 eb 05             	shr    ebx,0x5
c00115f1:	f7 d0                	not    eax
c00115f3:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00115f6:	5b                   	pop    ebx
c00115f7:	c3                   	ret    

c00115f8 <Virt::swapIDToSector(unsigned long)>:
c00115f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115fc:	0f af 05 ac df 02 c0 	imul   eax,DWORD PTR ds:0xc002dfac
c0011603:	03 05 b4 df 02 c0    	add    eax,DWORD PTR ds:0xc002dfb4
c0011609:	c3                   	ret    

c001160a <Virt::allocateSwapfilePage()>:
c001160a:	55                   	push   ebp
c001160b:	31 d2                	xor    edx,edx
c001160d:	57                   	push   edi
c001160e:	56                   	push   esi
c001160f:	53                   	push   ebx
c0011610:	83 ec 0c             	sub    esp,0xc
c0011613:	8b 0d ac df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfac
c0011619:	a1 b0 df 02 c0       	mov    eax,ds:0xc002dfb0
c001161e:	f7 f1                	div    ecx
c0011620:	39 0d b0 df 02 c0    	cmp    DWORD PTR ds:0xc002dfb0,ecx
c0011626:	72 2d                	jb     c0011655 <Virt::allocateSwapfilePage()+0x4b>
c0011628:	8b 35 6c f1 02 c0    	mov    esi,DWORD PTR ds:0xc002f16c
c001162e:	8b 16                	mov    edx,DWORD PTR [esi]
c0011630:	f6 c2 01             	test   dl,0x1
c0011633:	74 3c                	je     c0011671 <Virt::allocateSwapfilePage()+0x67>
c0011635:	31 c9                	xor    ecx,ecx
c0011637:	bf 01 00 00 00       	mov    edi,0x1
c001163c:	eb 12                	jmp    c0011650 <Virt::allocateSwapfilePage()+0x46>
c001163e:	89 fd                	mov    ebp,edi
c0011640:	89 ca                	mov    edx,ecx
c0011642:	d3 e5                	shl    ebp,cl
c0011644:	c1 ea 05             	shr    edx,0x5
c0011647:	8d 1c 96             	lea    ebx,[esi+edx*4]
c001164a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001164c:	85 ea                	test   edx,ebp
c001164e:	74 2a                	je     c001167a <Virt::allocateSwapfilePage()+0x70>
c0011650:	41                   	inc    ecx
c0011651:	39 c8                	cmp    eax,ecx
c0011653:	77 e9                	ja     c001163e <Virt::allocateSwapfilePage()+0x34>
c0011655:	83 ec 0c             	sub    esp,0xc
c0011658:	68 df af 02 c0       	push   0xc002afdf
c001165d:	e8 a3 8c 00 00       	call   c001a305 <Krnl::panic(char const*)>
c0011662:	83 c4 10             	add    esp,0x10
c0011665:	31 c9                	xor    ecx,ecx
c0011667:	83 c4 0c             	add    esp,0xc
c001166a:	89 c8                	mov    eax,ecx
c001166c:	5b                   	pop    ebx
c001166d:	5e                   	pop    esi
c001166e:	5f                   	pop    edi
c001166f:	5d                   	pop    ebp
c0011670:	c3                   	ret    
c0011671:	89 f3                	mov    ebx,esi
c0011673:	bd 01 00 00 00       	mov    ebp,0x1
c0011678:	31 c9                	xor    ecx,ecx
c001167a:	09 ea                	or     edx,ebp
c001167c:	89 c8                	mov    eax,ecx
c001167e:	89 13                	mov    DWORD PTR [ebx],edx
c0011680:	83 c4 0c             	add    esp,0xc
c0011683:	5b                   	pop    ebx
c0011684:	5e                   	pop    esi
c0011685:	5f                   	pop    edi
c0011686:	5d                   	pop    ebp
c0011687:	c3                   	ret    

c0011688 <Virt::virtualMemorySetup()>:
c0011688:	53                   	push   ebx
c0011689:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001168e:	83 ec 08             	sub    esp,0x8
c0011691:	6a 0f                	push   0xf
c0011693:	53                   	push   ebx
c0011694:	43                   	inc    ebx
c0011695:	e8 d6 fd ff ff       	call   c0011470 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001169a:	59                   	pop    ecx
c001169b:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00116a1:	58                   	pop    eax
c00116a2:	75 ed                	jne    c0011691 <Virt::virtualMemorySetup()+0x9>
c00116a4:	83 ec 08             	sub    esp,0x8
c00116a7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00116ac:	68 00 00 00 c8       	push   0xc8000000
c00116b1:	68 f6 af 02 c0       	push   0xc002aff6
c00116b6:	e8 14 12 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00116bb:	58                   	pop    eax
c00116bc:	5a                   	pop    edx
c00116bd:	68 00 f0 ff ef       	push   0xeffff000
c00116c2:	68 0a b0 02 c0       	push   0xc002b00a
c00116c7:	e8 03 12 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00116cc:	83 c4 10             	add    esp,0x10
c00116cf:	83 ec 08             	sub    esp,0x8
c00116d2:	6a 00                	push   0x0
c00116d4:	53                   	push   ebx
c00116d5:	43                   	inc    ebx
c00116d6:	e8 95 fd ff ff       	call   c0011470 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116db:	83 c4 10             	add    esp,0x10
c00116de:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00116e4:	75 e9                	jne    c00116cf <Virt::virtualMemorySetup()+0x47>
c00116e6:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00116eb:	83 ec 08             	sub    esp,0x8
c00116ee:	6a 0f                	push   0xf
c00116f0:	53                   	push   ebx
c00116f1:	43                   	inc    ebx
c00116f2:	e8 79 fd ff ff       	call   c0011470 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116f7:	83 c4 10             	add    esp,0x10
c00116fa:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011700:	75 e9                	jne    c00116eb <Virt::virtualMemorySetup()+0x63>
c0011702:	83 c4 08             	add    esp,0x8
c0011705:	5b                   	pop    ebx
c0011706:	c3                   	ret    

c0011707 <Virt::setupPageSwapping(int)>:
c0011707:	57                   	push   edi
c0011708:	56                   	push   esi
c0011709:	53                   	push   ebx
c001170a:	83 ec 1c             	sub    esp,0x1c
c001170d:	68 1e b0 02 c0       	push   0xc002b01e
c0011712:	e8 b8 11 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0011717:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001171e:	e8 69 e1 ff ff       	call   c000f88c <malloc>
c0011723:	83 c4 0c             	add    esp,0xc
c0011726:	89 c6                	mov    esi,eax
c0011728:	ff 35 50 25 03 c0    	push   DWORD PTR ds:0xc0032550
c001172e:	68 32 b0 02 c0       	push   0xc002b032
c0011733:	50                   	push   eax
c0011734:	e8 f5 16 00 00       	call   c0012e2e <File::File(char const*, Process*)>
c0011739:	89 34 24             	mov    DWORD PTR [esp],esi
c001173c:	e8 c9 18 00 00       	call   c001300a <File::unlink()>
c0011741:	59                   	pop    ecx
c0011742:	5b                   	pop    ebx
c0011743:	6a 12                	push   0x12
c0011745:	56                   	push   esi
c0011746:	e8 47 17 00 00       	call   c0012e92 <File::open(FileOpenMode)>
c001174b:	83 c4 10             	add    esp,0x10
c001174e:	85 c0                	test   eax,eax
c0011750:	0f 85 5b 01 00 00    	jne    c00118b1 <Virt::setupPageSwapping(int)+0x1aa>
c0011756:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001175a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011762:	c1 e3 08             	shl    ebx,0x8
c0011765:	83 ec 0c             	sub    esp,0xc
c0011768:	68 00 00 01 00       	push   0x10000
c001176d:	e8 1a e1 ff ff       	call   c000f88c <malloc>
c0011772:	83 c4 0c             	add    esp,0xc
c0011775:	89 c7                	mov    edi,eax
c0011777:	68 00 00 01 00       	push   0x10000
c001177c:	68 ee 00 00 00       	push   0xee
c0011781:	50                   	push   eax
c0011782:	e8 c9 ef fe ff       	call   c0000750 <memset>
c0011787:	83 c4 10             	add    esp,0x10
c001178a:	85 db                	test   ebx,ebx
c001178c:	79 03                	jns    c0011791 <Virt::setupPageSwapping(int)+0x8a>
c001178e:	83 c3 0f             	add    ebx,0xf
c0011791:	c1 fb 04             	sar    ebx,0x4
c0011794:	4b                   	dec    ebx
c0011795:	83 fb ff             	cmp    ebx,0xffffffff
c0011798:	74 4f                	je     c00117e9 <Virt::setupPageSwapping(int)+0xe2>
c001179a:	83 ec 0c             	sub    esp,0xc
c001179d:	8b 06                	mov    eax,DWORD PTR [esi]
c001179f:	8d 54 24 18          	lea    edx,[esp+0x18]
c00117a3:	52                   	push   edx
c00117a4:	57                   	push   edi
c00117a5:	6a 00                	push   0x0
c00117a7:	68 00 00 01 00       	push   0x10000
c00117ac:	56                   	push   esi
c00117ad:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00117b0:	83 c4 20             	add    esp,0x20
c00117b3:	85 c0                	test   eax,eax
c00117b5:	0f 85 e0 00 00 00    	jne    c001189b <Virt::setupPageSwapping(int)+0x194>
c00117bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117bf:	3d 00 00 01 00       	cmp    eax,0x10000
c00117c4:	74 ce                	je     c0011794 <Virt::setupPageSwapping(int)+0x8d>
c00117c6:	83 ec 08             	sub    esp,0x8
c00117c9:	4b                   	dec    ebx
c00117ca:	50                   	push   eax
c00117cb:	68 85 b0 02 c0       	push   0xc002b085
c00117d0:	e8 fa 10 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00117d5:	c7 04 24 8e b0 02 c0 	mov    DWORD PTR [esp],0xc002b08e
c00117dc:	e8 24 8b 00 00       	call   c001a305 <Krnl::panic(char const*)>
c00117e1:	83 c4 10             	add    esp,0x10
c00117e4:	83 fb ff             	cmp    ebx,0xffffffff
c00117e7:	75 b1                	jne    c001179a <Virt::setupPageSwapping(int)+0x93>
c00117e9:	83 ec 0c             	sub    esp,0xc
c00117ec:	56                   	push   esi
c00117ed:	e8 fe 16 00 00       	call   c0012ef0 <File::close()>
c00117f2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00117f5:	e8 b2 e0 ff ff       	call   c000f8ac <rfree>
c00117fa:	83 c4 10             	add    esp,0x10
c00117fd:	85 f6                	test   esi,esi
c00117ff:	74 0c                	je     c001180d <Virt::setupPageSwapping(int)+0x106>
c0011801:	83 ec 0c             	sub    esp,0xc
c0011804:	8b 06                	mov    eax,DWORD PTR [esi]
c0011806:	56                   	push   esi
c0011807:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001180a:	83 c4 10             	add    esp,0x10
c001180d:	83 ec 08             	sub    esp,0x8
c0011810:	a1 08 f6 02 c0       	mov    eax,ds:0xc002f608
c0011815:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001181b:	8b 10                	mov    edx,DWORD PTR [eax]
c001181d:	68 32 b0 02 c0       	push   0xc002b032
c0011822:	50                   	push   eax
c0011823:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011826:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001182a:	c6 05 b8 df 02 c0 43 	mov    BYTE PTR ds:0xc002dfb8,0x43
c0011831:	c1 e2 0b             	shl    edx,0xb
c0011834:	a3 b4 df 02 c0       	mov    ds:0xc002dfb4,eax
c0011839:	89 15 b0 df 02 c0    	mov    DWORD PTR ds:0xc002dfb0,edx
c001183f:	c7 05 ac df 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002dfac,0x8
c0011849:	c1 ea 08             	shr    edx,0x8
c001184c:	89 14 24             	mov    DWORD PTR [esp],edx
c001184f:	e8 38 e0 ff ff       	call   c000f88c <malloc>
c0011854:	83 c4 0c             	add    esp,0xc
c0011857:	89 c1                	mov    ecx,eax
c0011859:	a3 6c f1 02 c0       	mov    ds:0xc002f16c,eax
c001185e:	31 d2                	xor    edx,edx
c0011860:	a1 b0 df 02 c0       	mov    eax,ds:0xc002dfb0
c0011865:	f7 35 ac df 02 c0    	div    DWORD PTR ds:0xc002dfac
c001186b:	c1 e8 05             	shr    eax,0x5
c001186e:	50                   	push   eax
c001186f:	6a 00                	push   0x0
c0011871:	51                   	push   ecx
c0011872:	e8 d9 ee fe ff       	call   c0000750 <memset>
c0011877:	58                   	pop    eax
c0011878:	a1 b0 df 02 c0       	mov    eax,ds:0xc002dfb0
c001187d:	5a                   	pop    edx
c001187e:	31 d2                	xor    edx,edx
c0011880:	f7 35 ac df 02 c0    	div    DWORD PTR ds:0xc002dfac
c0011886:	c1 e8 05             	shr    eax,0x5
c0011889:	50                   	push   eax
c001188a:	68 94 b0 02 c0       	push   0xc002b094
c001188f:	e8 3b 10 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0011894:	83 c4 20             	add    esp,0x20
c0011897:	5b                   	pop    ebx
c0011898:	5e                   	pop    esi
c0011899:	5f                   	pop    edi
c001189a:	c3                   	ret    
c001189b:	83 ec 08             	sub    esp,0x8
c001189e:	50                   	push   eax
c001189f:	68 6d b0 02 c0       	push   0xc002b06d
c00118a4:	e8 26 10 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00118a9:	83 c4 10             	add    esp,0x10
c00118ac:	e9 0a ff ff ff       	jmp    c00117bb <Virt::setupPageSwapping(int)+0xb4>
c00118b1:	83 ec 08             	sub    esp,0x8
c00118b4:	50                   	push   eax
c00118b5:	68 49 b0 02 c0       	push   0xc002b049
c00118ba:	e8 10 10 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00118bf:	c7 04 24 52 b0 02 c0 	mov    DWORD PTR [esp],0xc002b052
c00118c6:	e8 3a 8a 00 00       	call   c001a305 <Krnl::panic(char const*)>
c00118cb:	83 c4 10             	add    esp,0x10
c00118ce:	e9 83 fe ff ff       	jmp    c0011756 <Virt::setupPageSwapping(int)+0x4f>
c00118d3:	90                   	nop

c00118d4 <VAS::VAS()>:
c00118d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118d8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00118df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118e3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00118ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118ee:	a3 70 f1 02 c0       	mov    ds:0xc002f170,eax
c00118f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118f7:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00118fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118ff:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011906:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c001190d:	90                   	nop
c001190e:	c3                   	ret    
c001190f:	90                   	nop

c0011910 <VAS::VAS(VAS*)>:
c0011910:	83 ec 0c             	sub    esp,0xc
c0011913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011917:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001191e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011922:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011929:	83 ec 0c             	sub    esp,0xc
c001192c:	68 78 ae 02 c0       	push   0xc002ae78
c0011931:	e8 cf 89 00 00       	call   c001a305 <Krnl::panic(char const*)>
c0011936:	83 c4 10             	add    esp,0x10
c0011939:	90                   	nop
c001193a:	83 c4 0c             	add    esp,0xc
c001193d:	c3                   	ret    

c001193e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001193e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011942:	89 c2                	mov    edx,eax
c0011944:	c1 e8 0a             	shr    eax,0xa
c0011947:	c1 ea 16             	shr    edx,0x16
c001194a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001194f:	19 c9                	sbb    ecx,ecx
c0011951:	c1 e2 0c             	shl    edx,0xc
c0011954:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001195a:	25 fc 0f 00 00       	and    eax,0xffc
c001195f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011966:	01 d0                	add    eax,edx
c0011968:	c3                   	ret    
c0011969:	90                   	nop

c001196a <VAS::getPageTableEntry(unsigned long)>:
c001196a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001196e:	89 ca                	mov    edx,ecx
c0011970:	c1 e9 0a             	shr    ecx,0xa
c0011973:	c1 ea 16             	shr    edx,0x16
c0011976:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001197c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011982:	c1 e0 0c             	shl    eax,0xc
c0011985:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011988:	c3                   	ret    

c0011989 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011989:	57                   	push   edi
c001198a:	56                   	push   esi
c001198b:	be 01 00 00 00       	mov    esi,0x1
c0011990:	53                   	push   ebx
c0011991:	83 ec 10             	sub    esp,0x10
c0011994:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011998:	c1 eb 0c             	shr    ebx,0xc
c001199b:	eb 3f                	jmp    c00119dc <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c001199d:	83 ec 08             	sub    esp,0x8
c00119a0:	57                   	push   edi
c00119a1:	ff 35 70 f1 02 c0    	push   DWORD PTR ds:0xc002f170
c00119a7:	e8 be ff ff ff       	call   c001196a <VAS::getPageTableEntry(unsigned long)>
c00119ac:	83 c4 10             	add    esp,0x10
c00119af:	8b 00                	mov    eax,DWORD PTR [eax]
c00119b1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00119b5:	f6 c4 04             	test   ah,0x4
c00119b8:	75 5f                	jne    c0011a19 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c00119ba:	80 fa 04             	cmp    dl,0x4
c00119bd:	74 78                	je     c0011a37 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c00119bf:	80 fa 02             	cmp    dl,0x2
c00119c2:	0f 84 88 00 00 00    	je     c0011a50 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00119c8:	80 fa 03             	cmp    dl,0x3
c00119cb:	0f 84 ad 00 00 00    	je     c0011a7e <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c00119d1:	fe ca                	dec    dl
c00119d3:	0f 84 92 00 00 00    	je     c0011a6b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00119d9:	43                   	inc    ebx
c00119da:	31 f6                	xor    esi,esi
c00119dc:	53                   	push   ebx
c00119dd:	89 df                	mov    edi,ebx
c00119df:	e8 c1 fa ff ff       	call   c00114a5 <Virt::getPageState(unsigned long)>
c00119e4:	c1 e7 0c             	shl    edi,0xc
c00119e7:	59                   	pop    ecx
c00119e8:	84 c0                	test   al,al
c00119ea:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00119ee:	75 ad                	jne    c001199d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00119f0:	83 ec 0c             	sub    esp,0xc
c00119f3:	68 af b0 02 c0       	push   0xc002b0af
c00119f8:	e8 08 89 00 00       	call   c001a305 <Krnl::panic(char const*)>
c00119fd:	58                   	pop    eax
c00119fe:	5a                   	pop    edx
c00119ff:	57                   	push   edi
c0011a00:	ff 35 70 f1 02 c0    	push   DWORD PTR ds:0xc002f170
c0011a06:	e8 5f ff ff ff       	call   c001196a <VAS::getPageTableEntry(unsigned long)>
c0011a0b:	83 c4 10             	add    esp,0x10
c0011a0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a10:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a14:	f6 c4 04             	test   ah,0x4
c0011a17:	74 c0                	je     c00119d9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a19:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011a1d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a22:	83 ec 0c             	sub    esp,0xc
c0011a25:	50                   	push   eax
c0011a26:	e8 0b e1 ff ff       	call   c000fb36 <Phys::freePage(unsigned long)>
c0011a2b:	83 c4 10             	add    esp,0x10
c0011a2e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011a32:	80 fa 04             	cmp    dl,0x4
c0011a35:	75 88                	jne    c00119bf <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011a37:	89 f0                	mov    eax,esi
c0011a39:	84 c0                	test   al,al
c0011a3b:	75 47                	jne    c0011a84 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011a3d:	c7 44 24 20 9c ae 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ae9c
c0011a45:	83 c4 10             	add    esp,0x10
c0011a48:	5b                   	pop    ebx
c0011a49:	5e                   	pop    esi
c0011a4a:	5f                   	pop    edi
c0011a4b:	e9 b5 88 00 00       	jmp    c001a305 <Krnl::panic(char const*)>
c0011a50:	89 f0                	mov    eax,esi
c0011a52:	84 c0                	test   al,al
c0011a54:	75 15                	jne    c0011a6b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a56:	83 ec 0c             	sub    esp,0xc
c0011a59:	68 cb b0 02 c0       	push   0xc002b0cb
c0011a5e:	e8 a2 88 00 00       	call   c001a305 <Krnl::panic(char const*)>
c0011a63:	83 c4 10             	add    esp,0x10
c0011a66:	e9 6e ff ff ff       	jmp    c00119d9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a6b:	83 ec 08             	sub    esp,0x8
c0011a6e:	6a 00                	push   0x0
c0011a70:	53                   	push   ebx
c0011a71:	e8 fa f9 ff ff       	call   c0011470 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a76:	83 c4 10             	add    esp,0x10
c0011a79:	e9 5b ff ff ff       	jmp    c00119d9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a7e:	89 f0                	mov    eax,esi
c0011a80:	84 c0                	test   al,al
c0011a82:	75 15                	jne    c0011a99 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011a84:	83 ec 08             	sub    esp,0x8
c0011a87:	6a 00                	push   0x0
c0011a89:	53                   	push   ebx
c0011a8a:	e8 e1 f9 ff ff       	call   c0011470 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a8f:	83 c4 10             	add    esp,0x10
c0011a92:	83 c4 10             	add    esp,0x10
c0011a95:	5b                   	pop    ebx
c0011a96:	5e                   	pop    esi
c0011a97:	5f                   	pop    edi
c0011a98:	c3                   	ret    
c0011a99:	c7 44 24 20 e7 b0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b0e7
c0011aa1:	83 c4 10             	add    esp,0x10
c0011aa4:	5b                   	pop    ebx
c0011aa5:	5e                   	pop    esi
c0011aa6:	5f                   	pop    edi
c0011aa7:	e9 59 88 00 00       	jmp    c001a305 <Krnl::panic(char const*)>

c0011aac <VAS::freeAllocatedPages(unsigned long)>:
c0011aac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ab0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011ab4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011ab8:	74 09                	je     c0011ac3 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011aba:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011abe:	e9 c6 fe ff ff       	jmp    c0011989 <Virt::freeKernelVirtualPages(unsigned long)>
c0011ac3:	c7 44 24 04 c0 ae 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aec0
c0011acb:	e9 ff 0d 00 00       	jmp    c00128cf <Dbg::kprintf(char const*, ...)>

c0011ad0 <VAS::virtualToPhysical(unsigned long)>:
c0011ad0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011ad4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011ad8:	e8 8d fe ff ff       	call   c001196a <VAS::getPageTableEntry(unsigned long)>
c0011add:	5a                   	pop    edx
c0011ade:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ae0:	59                   	pop    ecx
c0011ae1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ae6:	c3                   	ret    
c0011ae7:	90                   	nop

c0011ae8 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011ae8:	55                   	push   ebp
c0011ae9:	57                   	push   edi
c0011aea:	56                   	push   esi
c0011aeb:	53                   	push   ebx
c0011aec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011af0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011af4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011af8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011afc:	85 db                	test   ebx,ebx
c0011afe:	7e 22                	jle    c0011b22 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011b00:	c1 e3 0c             	shl    ebx,0xc
c0011b03:	01 f3                	add    ebx,esi
c0011b05:	56                   	push   esi
c0011b06:	81 c6 00 10 00 00    	add    esi,0x1000
c0011b0c:	55                   	push   ebp
c0011b0d:	e8 58 fe ff ff       	call   c001196a <VAS::getPageTableEntry(unsigned long)>
c0011b12:	5a                   	pop    edx
c0011b13:	59                   	pop    ecx
c0011b14:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011b16:	21 f9                	and    ecx,edi
c0011b18:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011b1c:	39 f3                	cmp    ebx,esi
c0011b1e:	89 08                	mov    DWORD PTR [eax],ecx
c0011b20:	75 e3                	jne    c0011b05 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011b22:	5b                   	pop    ebx
c0011b23:	5e                   	pop    esi
c0011b24:	5f                   	pop    edi
c0011b25:	5d                   	pop    ebp
c0011b26:	c3                   	ret    
c0011b27:	90                   	nop

c0011b28 <VAS::setToWriteCombining(unsigned long, int)>:
c0011b28:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0011b2d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011b33:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011b3a:	75 01                	jne    c0011b3d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011b3c:	c3                   	ret    
c0011b3d:	68 80 00 00 00       	push   0x80
c0011b42:	6a ff                	push   0xffffffff
c0011b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011b50:	e8 93 ff ff ff       	call   c0011ae8 <VAS::reflagRange(unsigned long, int, int, int)>
c0011b55:	83 c4 14             	add    esp,0x14
c0011b58:	c3                   	ret    
c0011b59:	90                   	nop

c0011b5a <VAS::mapOtherVASIn(bool, VAS*)>:
c0011b5a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b63:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011b66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b6a:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011b6d:	19 c0                	sbb    eax,eax
c0011b6f:	83 ca 03             	or     edx,0x3
c0011b72:	83 e0 fc             	and    eax,0xfffffffc
c0011b75:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011b7c:	0f 20 d8             	mov    eax,cr3
c0011b7f:	0f 22 d8             	mov    cr3,eax
c0011b82:	c3                   	ret    
c0011b83:	90                   	nop

c0011b84 <VAS::~VAS()>:
c0011b84:	83 ec 2c             	sub    esp,0x2c
c0011b87:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011b8f:	fa                   	cli    
c0011b90:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0011b95:	40                   	inc    eax
c0011b96:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c0011b9b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011ba0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ba2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ba5:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011bab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011baf:	6a 01                	push   0x1
c0011bb1:	50                   	push   eax
c0011bb2:	e8 a3 ff ff ff       	call   c0011b5a <VAS::mapOtherVASIn(bool, VAS*)>
c0011bb7:	83 c4 0c             	add    esp,0xc
c0011bba:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011bc2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011bca:	0f 8f d4 00 00 00    	jg     c0011ca4 <VAS::~VAS()+0x120>
c0011bd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011bd4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011bd7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011bdb:	c1 e2 02             	shl    edx,0x2
c0011bde:	01 d0                	add    eax,edx
c0011be0:	8b 00                	mov    eax,DWORD PTR [eax]
c0011be2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bea:	83 e0 01             	and    eax,0x1
c0011bed:	0f 84 a8 00 00 00    	je     c0011c9b <VAS::~VAS()+0x117>
c0011bf3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011bfb:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011c03:	7f 72                	jg     c0011c77 <VAS::~VAS()+0xf3>
c0011c05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c09:	c1 e0 0a             	shl    eax,0xa
c0011c0c:	89 c2                	mov    edx,eax
c0011c0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c12:	01 d0                	add    eax,edx
c0011c14:	c1 e0 0c             	shl    eax,0xc
c0011c17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c1b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011c20:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c22:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011c25:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011c2b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011c2f:	6a 01                	push   0x1
c0011c31:	50                   	push   eax
c0011c32:	e8 07 fd ff ff       	call   c001193e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011c37:	83 c4 0c             	add    esp,0xc
c0011c3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011c3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c42:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c4c:	25 01 04 00 00       	and    eax,0x401
c0011c51:	3d 01 04 00 00       	cmp    eax,0x401
c0011c56:	75 19                	jne    c0011c71 <VAS::~VAS()+0xed>
c0011c58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c61:	83 ec 0c             	sub    esp,0xc
c0011c64:	50                   	push   eax
c0011c65:	e8 cc de ff ff       	call   c000fb36 <Phys::freePage(unsigned long)>
c0011c6a:	83 c4 10             	add    esp,0x10
c0011c6d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c71:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011c75:	eb 84                	jmp    c0011bfb <VAS::~VAS()+0x77>
c0011c77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c7b:	25 00 04 00 00       	and    eax,0x400
c0011c80:	74 19                	je     c0011c9b <VAS::~VAS()+0x117>
c0011c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c86:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c8b:	83 ec 0c             	sub    esp,0xc
c0011c8e:	50                   	push   eax
c0011c8f:	e8 a2 de ff ff       	call   c000fb36 <Phys::freePage(unsigned long)>
c0011c94:	83 c4 10             	add    esp,0x10
c0011c97:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c9b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011c9f:	e9 1e ff ff ff       	jmp    c0011bc2 <VAS::~VAS()+0x3e>
c0011ca4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ca8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011cab:	83 ec 0c             	sub    esp,0xc
c0011cae:	50                   	push   eax
c0011caf:	e8 d5 fc ff ff       	call   c0011989 <Virt::freeKernelVirtualPages(unsigned long)>
c0011cb4:	83 c4 10             	add    esp,0x10
c0011cb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cbb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011cbe:	83 ec 0c             	sub    esp,0xc
c0011cc1:	50                   	push   eax
c0011cc2:	e8 6f de ff ff       	call   c000fb36 <Phys::freePage(unsigned long)>
c0011cc7:	83 c4 10             	add    esp,0x10
c0011cca:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011cce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cd2:	c1 e0 02             	shl    eax,0x2
c0011cd5:	83 ec 08             	sub    esp,0x8
c0011cd8:	50                   	push   eax
c0011cd9:	68 e4 ae 02 c0       	push   0xc002aee4
c0011cde:	e8 ec 0b 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0011ce3:	83 c4 10             	add    esp,0x10
c0011ce6:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0011ceb:	48                   	dec    eax
c0011cec:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c0011cf1:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0011cf6:	85 c0                	test   eax,eax
c0011cf8:	75 01                	jne    c0011cfb <VAS::~VAS()+0x177>
c0011cfa:	fb                   	sti    
c0011cfb:	90                   	nop
c0011cfc:	83 c4 2c             	add    esp,0x2c
c0011cff:	c3                   	ret    

c0011d00 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011d00:	55                   	push   ebp
c0011d01:	57                   	push   edi
c0011d02:	56                   	push   esi
c0011d03:	53                   	push   ebx
c0011d04:	83 ec 1c             	sub    esp,0x1c
c0011d07:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011d0b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011d0f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011d15:	77 08                	ja     c0011d1f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011d17:	0f 20 d8             	mov    eax,cr3
c0011d1a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011d1d:	75 47                	jne    c0011d66 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011d1f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d23:	09 d8                	or     eax,ebx
c0011d25:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d2a:	75 57                	jne    c0011d83 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011d2c:	89 de                	mov    esi,ebx
c0011d2e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011d31:	c1 ee 16             	shr    esi,0x16
c0011d34:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011d3b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011d3f:	74 54                	je     c0011d95 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011d41:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d45:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011d4b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011d4f:	c1 e6 0c             	shl    esi,0xc
c0011d52:	c1 eb 0a             	shr    ebx,0xa
c0011d55:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011d5b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011d5e:	83 c4 1c             	add    esp,0x1c
c0011d61:	5b                   	pop    ebx
c0011d62:	5e                   	pop    esi
c0011d63:	5f                   	pop    edi
c0011d64:	5d                   	pop    ebp
c0011d65:	c3                   	ret    
c0011d66:	83 ec 0c             	sub    esp,0xc
c0011d69:	68 04 af 02 c0       	push   0xc002af04
c0011d6e:	e8 5c 0b 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0011d73:	83 c4 10             	add    esp,0x10
c0011d76:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d7a:	09 d8                	or     eax,ebx
c0011d7c:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d81:	74 a9                	je     c0011d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011d83:	83 ec 0c             	sub    esp,0xc
c0011d86:	68 6c af 02 c0       	push   0xc002af6c
c0011d8b:	e8 75 85 00 00       	call   c001a305 <Krnl::panic(char const*)>
c0011d90:	83 c4 10             	add    esp,0x10
c0011d93:	eb 97                	jmp    c0011d2c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011d95:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d99:	e8 f3 dd ff ff       	call   c000fb91 <Phys::allocatePage()>
c0011d9e:	83 ec 0c             	sub    esp,0xc
c0011da1:	89 c5                	mov    ebp,eax
c0011da3:	8b 0d 70 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f170
c0011da9:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011dad:	6a 01                	push   0x1
c0011daf:	e8 15 f7 ff ff       	call   c00114c9 <Virt::allocateKernelVirtualPages(int)>
c0011db4:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011dbb:	6a 01                	push   0x1
c0011dbd:	50                   	push   eax
c0011dbe:	55                   	push   ebp
c0011dbf:	81 cd 07 04 00 00    	or     ebp,0x407
c0011dc5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011dc9:	51                   	push   ecx
c0011dca:	e8 27 02 00 00       	call   c0011ff6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011dcf:	83 c4 1c             	add    esp,0x1c
c0011dd2:	68 00 10 00 00       	push   0x1000
c0011dd7:	6a 00                	push   0x0
c0011dd9:	50                   	push   eax
c0011dda:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011dde:	e8 6d e9 fe ff       	call   c0000750 <memset>
c0011de3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011de7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011dea:	e8 9a fb ff ff       	call   c0011989 <Virt::freeKernelVirtualPages(unsigned long)>
c0011def:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011df3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011df6:	83 c4 10             	add    esp,0x10
c0011df9:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011dfc:	e9 40 ff ff ff       	jmp    c0011d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011e01:	90                   	nop

c0011e02 <VAS::allocatePages(int, int)>:
c0011e02:	55                   	push   ebp
c0011e03:	57                   	push   edi
c0011e04:	56                   	push   esi
c0011e05:	53                   	push   ebx
c0011e06:	83 ec 1c             	sub    esp,0x1c
c0011e09:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011e0d:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0011e12:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011e18:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011e1e:	83 e0 01             	and    eax,0x1
c0011e21:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011e25:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011e29:	0f 85 cc 00 00 00    	jne    c0011efb <VAS::allocatePages(int, int)+0xf9>
c0011e2f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011e32:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e36:	85 c0                	test   eax,eax
c0011e38:	0f 84 a1 00 00 00    	je     c0011edf <VAS::allocatePages(int, int)+0xdd>
c0011e3e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011e42:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e46:	c1 e6 0c             	shl    esi,0xc
c0011e49:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011e4d:	85 c0                	test   eax,eax
c0011e4f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011e52:	7e 33                	jle    c0011e87 <VAS::allocatePages(int, int)+0x85>
c0011e54:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011e58:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011e5c:	81 cd 00 04 00 00    	or     ebp,0x400
c0011e62:	e8 2a dd ff ff       	call   c000fb91 <Phys::allocatePage()>
c0011e67:	55                   	push   ebp
c0011e68:	53                   	push   ebx
c0011e69:	50                   	push   eax
c0011e6a:	57                   	push   edi
c0011e6b:	e8 90 fe ff ff       	call   c0011d00 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011e70:	83 c4 10             	add    esp,0x10
c0011e73:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e78:	74 03                	je     c0011e7d <VAS::allocatePages(int, int)+0x7b>
c0011e7a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e7d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011e83:	39 de                	cmp    esi,ebx
c0011e85:	75 db                	jne    c0011e62 <VAS::allocatePages(int, int)+0x60>
c0011e87:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e8c:	75 12                	jne    c0011ea0 <VAS::allocatePages(int, int)+0x9e>
c0011e8e:	0f 20 d8             	mov    eax,cr3
c0011e91:	0f 22 d8             	mov    cr3,eax
c0011e94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e98:	83 c4 1c             	add    esp,0x1c
c0011e9b:	5b                   	pop    ebx
c0011e9c:	5e                   	pop    esi
c0011e9d:	5f                   	pop    edi
c0011e9e:	5d                   	pop    ebp
c0011e9f:	c3                   	ret    
c0011ea0:	c1 ee 0a             	shr    esi,0xa
c0011ea3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ea7:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011ead:	c1 eb 0a             	shr    ebx,0xa
c0011eb0:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011eb6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011ebc:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ec2:	39 c3                	cmp    ebx,eax
c0011ec4:	77 ce                	ja     c0011e94 <VAS::allocatePages(int, int)+0x92>
c0011ec6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ec9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ecf:	39 d8                	cmp    eax,ebx
c0011ed1:	73 f3                	jae    c0011ec6 <VAS::allocatePages(int, int)+0xc4>
c0011ed3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ed7:	83 c4 1c             	add    esp,0x1c
c0011eda:	5b                   	pop    ebx
c0011edb:	5e                   	pop    esi
c0011edc:	5f                   	pop    edi
c0011edd:	5d                   	pop    ebp
c0011ede:	c3                   	ret    
c0011edf:	83 ec 0c             	sub    esp,0xc
c0011ee2:	68 90 af 02 c0       	push   0xc002af90
c0011ee7:	e8 19 84 00 00       	call   c001a305 <Krnl::panic(char const*)>
c0011eec:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011eef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011ef3:	83 c4 10             	add    esp,0x10
c0011ef6:	e9 43 ff ff ff       	jmp    c0011e3e <VAS::allocatePages(int, int)+0x3c>
c0011efb:	83 ec 0c             	sub    esp,0xc
c0011efe:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011f02:	e8 c2 f5 ff ff       	call   c00114c9 <Virt::allocateKernelVirtualPages(int)>
c0011f07:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011f0b:	83 c4 10             	add    esp,0x10
c0011f0e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011f13:	0f 87 9b 00 00 00    	ja     c0011fb4 <VAS::allocatePages(int, int)+0x1b2>
c0011f19:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011f1d:	85 d2                	test   edx,edx
c0011f1f:	7e 3c                	jle    c0011f5d <VAS::allocatePages(int, int)+0x15b>
c0011f21:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011f25:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011f29:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011f2d:	c1 e5 0c             	shl    ebp,0xc
c0011f30:	81 ce 00 04 00 00    	or     esi,0x400
c0011f36:	01 dd                	add    ebp,ebx
c0011f38:	e8 54 dc ff ff       	call   c000fb91 <Phys::allocatePage()>
c0011f3d:	56                   	push   esi
c0011f3e:	53                   	push   ebx
c0011f3f:	50                   	push   eax
c0011f40:	57                   	push   edi
c0011f41:	e8 ba fd ff ff       	call   c0011d00 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f46:	83 c4 10             	add    esp,0x10
c0011f49:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f4e:	74 03                	je     c0011f53 <VAS::allocatePages(int, int)+0x151>
c0011f50:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f53:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f59:	39 dd                	cmp    ebp,ebx
c0011f5b:	75 db                	jne    c0011f38 <VAS::allocatePages(int, int)+0x136>
c0011f5d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f62:	0f 84 26 ff ff ff    	je     c0011e8e <VAS::allocatePages(int, int)+0x8c>
c0011f68:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f70:	89 d3                	mov    ebx,edx
c0011f72:	c1 e0 0c             	shl    eax,0xc
c0011f75:	c1 eb 0a             	shr    ebx,0xa
c0011f78:	01 d0                	add    eax,edx
c0011f7a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011f80:	c1 e8 0a             	shr    eax,0xa
c0011f83:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011f89:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f8e:	2d 00 00 40 00       	sub    eax,0x400000
c0011f93:	39 c3                	cmp    ebx,eax
c0011f95:	0f 87 f9 fe ff ff    	ja     c0011e94 <VAS::allocatePages(int, int)+0x92>
c0011f9b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f9e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011fa4:	39 d8                	cmp    eax,ebx
c0011fa6:	73 f3                	jae    c0011f9b <VAS::allocatePages(int, int)+0x199>
c0011fa8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fac:	83 c4 1c             	add    esp,0x1c
c0011faf:	5b                   	pop    ebx
c0011fb0:	5e                   	pop    esi
c0011fb1:	5f                   	pop    edi
c0011fb2:	5d                   	pop    ebp
c0011fb3:	c3                   	ret    
c0011fb4:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0011fb9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fbf:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011fc6:	0f 84 4d ff ff ff    	je     c0011f19 <VAS::allocatePages(int, int)+0x117>
c0011fcc:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011fd4:	e9 40 ff ff ff       	jmp    c0011f19 <VAS::allocatePages(int, int)+0x117>
c0011fd9:	90                   	nop

c0011fda <VAS::setCPUSpecific(unsigned long)>:
c0011fda:	83 ec 0c             	sub    esp,0xc
c0011fdd:	6a 05                	push   0x5
c0011fdf:	68 00 00 40 c2       	push   0xc2400000
c0011fe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011fec:	e8 0f fd ff ff       	call   c0011d00 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ff1:	83 c4 1c             	add    esp,0x1c
c0011ff4:	c3                   	ret    
c0011ff5:	90                   	nop

c0011ff6 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011ff6:	55                   	push   ebp
c0011ff7:	57                   	push   edi
c0011ff8:	56                   	push   esi
c0011ff9:	53                   	push   ebx
c0011ffa:	83 ec 1c             	sub    esp,0x1c
c0011ffd:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0012002:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012006:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001200c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012010:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012016:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001201a:	83 e0 01             	and    eax,0x1
c001201d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012021:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012025:	85 c0                	test   eax,eax
c0012027:	7e 39                	jle    c0012062 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012029:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001202d:	89 f3                	mov    ebx,esi
c001202f:	c1 e0 0c             	shl    eax,0xc
c0012032:	01 f0                	add    eax,esi
c0012034:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012038:	55                   	push   ebp
c0012039:	53                   	push   ebx
c001203a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001203e:	29 f0                	sub    eax,esi
c0012040:	01 d8                	add    eax,ebx
c0012042:	50                   	push   eax
c0012043:	57                   	push   edi
c0012044:	e8 b7 fc ff ff       	call   c0011d00 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012049:	83 c4 10             	add    esp,0x10
c001204c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012051:	74 03                	je     c0012056 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012053:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012056:	81 c3 00 10 00 00    	add    ebx,0x1000
c001205c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012060:	75 d6                	jne    c0012038 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012062:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012067:	75 10                	jne    c0012079 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012069:	0f 20 d8             	mov    eax,cr3
c001206c:	0f 22 d8             	mov    cr3,eax
c001206f:	83 c4 1c             	add    esp,0x1c
c0012072:	89 f0                	mov    eax,esi
c0012074:	5b                   	pop    ebx
c0012075:	5e                   	pop    esi
c0012076:	5f                   	pop    edi
c0012077:	5d                   	pop    ebp
c0012078:	c3                   	ret    
c0012079:	89 f3                	mov    ebx,esi
c001207b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001207f:	c1 eb 0a             	shr    ebx,0xa
c0012082:	c1 e0 0c             	shl    eax,0xc
c0012085:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001208b:	01 f0                	add    eax,esi
c001208d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012093:	c1 e8 0a             	shr    eax,0xa
c0012096:	25 00 f0 ff ff       	and    eax,0xfffff000
c001209b:	2d 00 00 40 00       	sub    eax,0x400000
c00120a0:	39 c3                	cmp    ebx,eax
c00120a2:	77 cb                	ja     c001206f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00120a4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120a7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120ad:	39 d8                	cmp    eax,ebx
c00120af:	73 f3                	jae    c00120a4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00120b1:	83 c4 1c             	add    esp,0x1c
c00120b4:	89 f0                	mov    eax,esi
c00120b6:	5b                   	pop    ebx
c00120b7:	5e                   	pop    esi
c00120b8:	5f                   	pop    edi
c00120b9:	5d                   	pop    ebp
c00120ba:	c3                   	ret    
c00120bb:	90                   	nop

c00120bc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00120bc:	55                   	push   ebp
c00120bd:	57                   	push   edi
c00120be:	56                   	push   esi
c00120bf:	53                   	push   ebx
c00120c0:	83 ec 1c             	sub    esp,0x1c
c00120c3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00120c7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00120cb:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00120cf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00120d3:	a9 ff 0f 00 00       	test   eax,0xfff
c00120d8:	75 4a                	jne    c0012124 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00120da:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00120de:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00120e1:	c1 eb 16             	shr    ebx,0x16
c00120e4:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00120eb:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c00120ef:	74 4d                	je     c001213e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c00120f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00120f5:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00120f9:	c1 e8 0a             	shr    eax,0xa
c00120fc:	80 fa 01             	cmp    dl,0x1
c00120ff:	19 d2                	sbb    edx,edx
c0012101:	c1 e3 0c             	shl    ebx,0xc
c0012104:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012108:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001210e:	25 fc 0f 00 00       	and    eax,0xffc
c0012113:	01 d8                	add    eax,ebx
c0012115:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001211c:	83 c4 1c             	add    esp,0x1c
c001211f:	5b                   	pop    ebx
c0012120:	5e                   	pop    esi
c0012121:	5f                   	pop    edi
c0012122:	5d                   	pop    ebp
c0012123:	c3                   	ret    
c0012124:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012128:	83 ec 0c             	sub    esp,0xc
c001212b:	68 bc af 02 c0       	push   0xc002afbc
c0012130:	e8 d0 81 00 00       	call   c001a305 <Krnl::panic(char const*)>
c0012135:	83 c4 10             	add    esp,0x10
c0012138:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001213c:	eb 9c                	jmp    c00120da <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c001213e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012142:	e8 4a da ff ff       	call   c000fb91 <Phys::allocatePage()>
c0012147:	83 ec 0c             	sub    esp,0xc
c001214a:	89 c5                	mov    ebp,eax
c001214c:	8b 0d 70 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f170
c0012152:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012156:	6a 01                	push   0x1
c0012158:	e8 6c f3 ff ff       	call   c00114c9 <Virt::allocateKernelVirtualPages(int)>
c001215d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012164:	6a 01                	push   0x1
c0012166:	50                   	push   eax
c0012167:	55                   	push   ebp
c0012168:	81 cd 07 04 00 00    	or     ebp,0x407
c001216e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012172:	51                   	push   ecx
c0012173:	e8 7e fe ff ff       	call   c0011ff6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012178:	83 c4 1c             	add    esp,0x1c
c001217b:	68 00 10 00 00       	push   0x1000
c0012180:	6a 00                	push   0x0
c0012182:	50                   	push   eax
c0012183:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012187:	e8 c4 e5 fe ff       	call   c0000750 <memset>
c001218c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012190:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012193:	e8 f1 f7 ff ff       	call   c0011989 <Virt::freeKernelVirtualPages(unsigned long)>
c0012198:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001219b:	83 c4 10             	add    esp,0x10
c001219e:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00121a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121a5:	e9 47 ff ff ff       	jmp    c00120f1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c00121aa <VAS::VAS(bool)>:
c00121aa:	53                   	push   ebx
c00121ab:	83 ec 28             	sub    esp,0x28
c00121ae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00121b2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00121b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00121c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121c5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00121cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121d0:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00121d4:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00121d7:	e8 b5 d9 ff ff       	call   c000fb91 <Phys::allocatePage()>
c00121dc:	89 c2                	mov    edx,eax
c00121de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121e2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00121e5:	8b 1d 70 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f170
c00121eb:	83 ec 0c             	sub    esp,0xc
c00121ee:	6a 01                	push   0x1
c00121f0:	e8 d4 f2 ff ff       	call   c00114c9 <Virt::allocateKernelVirtualPages(int)>
c00121f5:	83 c4 10             	add    esp,0x10
c00121f8:	89 c2                	mov    edx,eax
c00121fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121fe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012201:	83 ec 0c             	sub    esp,0xc
c0012204:	6a 03                	push   0x3
c0012206:	6a 01                	push   0x1
c0012208:	52                   	push   edx
c0012209:	50                   	push   eax
c001220a:	53                   	push   ebx
c001220b:	e8 e6 fd ff ff       	call   c0011ff6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012210:	83 c4 20             	add    esp,0x20
c0012213:	89 c2                	mov    edx,eax
c0012215:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012219:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001221c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012224:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001222c:	7f 1c                	jg     c001224a <VAS::VAS(bool)+0xa0>
c001222e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012232:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012235:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012239:	c1 e2 02             	shl    edx,0x2
c001223c:	01 d0                	add    eax,edx
c001223e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012244:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012248:	eb da                	jmp    c0012224 <VAS::VAS(bool)+0x7a>
c001224a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012252:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001225a:	7f 7a                	jg     c00122d6 <VAS::VAS(bool)+0x12c>
c001225c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012260:	2d 00 02 00 00       	sub    eax,0x200
c0012265:	c1 e0 0c             	shl    eax,0xc
c0012268:	83 c8 03             	or     eax,0x3
c001226b:	89 c2                	mov    edx,eax
c001226d:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0012272:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012278:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001227e:	83 e0 10             	and    eax,0x10
c0012281:	84 c0                	test   al,al
c0012283:	74 07                	je     c001228c <VAS::VAS(bool)+0xe2>
c0012285:	b8 00 01 00 00       	mov    eax,0x100
c001228a:	eb 05                	jmp    c0012291 <VAS::VAS(bool)+0xe7>
c001228c:	b8 00 00 00 00       	mov    eax,0x0
c0012291:	09 d0                	or     eax,edx
c0012293:	89 c1                	mov    ecx,eax
c0012295:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012299:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001229c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122a0:	c1 e2 02             	shl    edx,0x2
c00122a3:	01 d0                	add    eax,edx
c00122a5:	89 ca                	mov    edx,ecx
c00122a7:	89 10                	mov    DWORD PTR [eax],edx
c00122a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122ad:	2d 40 03 00 00       	sub    eax,0x340
c00122b2:	83 f8 7f             	cmp    eax,0x7f
c00122b5:	77 16                	ja     c00122cd <VAS::VAS(bool)+0x123>
c00122b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00122c2:	c1 e2 02             	shl    edx,0x2
c00122c5:	01 d0                	add    eax,edx
c00122c7:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00122cd:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122d1:	e9 7c ff ff ff       	jmp    c0012252 <VAS::VAS(bool)+0xa8>
c00122d6:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c00122db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122e1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00122e7:	83 e0 10             	and    eax,0x10
c00122ea:	84 c0                	test   al,al
c00122ec:	74 07                	je     c00122f5 <VAS::VAS(bool)+0x14b>
c00122ee:	b8 03 41 00 00       	mov    eax,0x4103
c00122f3:	eb 05                	jmp    c00122fa <VAS::VAS(bool)+0x150>
c00122f5:	b8 03 40 00 00       	mov    eax,0x4003
c00122fa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00122fe:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012301:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012307:	89 02                	mov    DWORD PTR [edx],eax
c0012309:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001230e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012314:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001231a:	83 ec 08             	sub    esp,0x8
c001231d:	50                   	push   eax
c001231e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012322:	e8 b3 fc ff ff       	call   c0011fda <VAS::setCPUSpecific(unsigned long)>
c0012327:	83 c4 10             	add    esp,0x10
c001232a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001232e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012331:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0012336:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001233c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012342:	83 e0 10             	and    eax,0x10
c0012345:	84 c0                	test   al,al
c0012347:	74 07                	je     c0012350 <VAS::VAS(bool)+0x1a6>
c0012349:	b8 00 01 00 00       	mov    eax,0x100
c001234e:	eb 05                	jmp    c0012355 <VAS::VAS(bool)+0x1ab>
c0012350:	b8 00 00 00 00       	mov    eax,0x0
c0012355:	09 c2                	or     edx,eax
c0012357:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001235b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001235e:	05 fc 0f 00 00       	add    eax,0xffc
c0012363:	83 ca 03             	or     edx,0x3
c0012366:	89 10                	mov    DWORD PTR [eax],edx
c0012368:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001236d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012373:	83 ec 0c             	sub    esp,0xc
c0012376:	50                   	push   eax
c0012377:	e8 8c 1c 00 00       	call   c0014008 <Device::getName()>
c001237c:	83 c4 10             	add    esp,0x10
c001237f:	83 ec 08             	sub    esp,0x8
c0012382:	68 01 b1 02 c0       	push   0xc002b101
c0012387:	50                   	push   eax
c0012388:	e8 0b e5 fe ff       	call   c0000898 <strcmp>
c001238d:	83 c4 10             	add    esp,0x10
c0012390:	85 c0                	test   eax,eax
c0012392:	0f 94 c0             	sete   al
c0012395:	84 c0                	test   al,al
c0012397:	0f 84 87 00 00 00    	je     c0012424 <VAS::VAS(bool)+0x27a>
c001239d:	fa                   	cli    
c001239e:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c00123a3:	40                   	inc    eax
c00123a4:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c00123a9:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c00123ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123b4:	05 7c 09 00 00       	add    eax,0x97c
c00123b9:	83 ec 0c             	sub    esp,0xc
c00123bc:	50                   	push   eax
c00123bd:	e8 4c cf ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00123c2:	83 c4 10             	add    esp,0x10
c00123c5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123ca:	89 c3                	mov    ebx,eax
c00123cc:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c00123d1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123d7:	05 7c 09 00 00       	add    eax,0x97c
c00123dc:	83 ec 0c             	sub    esp,0xc
c00123df:	50                   	push   eax
c00123e0:	e8 29 cf ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00123e5:	83 c4 10             	add    esp,0x10
c00123e8:	83 ec 08             	sub    esp,0x8
c00123eb:	50                   	push   eax
c00123ec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123f0:	e8 75 f5 ff ff       	call   c001196a <VAS::getPageTableEntry(unsigned long)>
c00123f5:	83 c4 10             	add    esp,0x10
c00123f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00123fa:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123ff:	6a 11                	push   0x11
c0012401:	53                   	push   ebx
c0012402:	50                   	push   eax
c0012403:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012407:	e8 f4 f8 ff ff       	call   c0011d00 <VAS::mapPage(unsigned long, unsigned long, int)>
c001240c:	83 c4 10             	add    esp,0x10
c001240f:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0012414:	48                   	dec    eax
c0012415:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001241a:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001241f:	85 c0                	test   eax,eax
c0012421:	75 01                	jne    c0012424 <VAS::VAS(bool)+0x27a>
c0012423:	fb                   	sti    
c0012424:	90                   	nop
c0012425:	83 c4 28             	add    esp,0x28
c0012428:	5b                   	pop    ebx
c0012429:	c3                   	ret    

c001242a <VAS::evict(unsigned long)>:
c001242a:	55                   	push   ebp
c001242b:	57                   	push   edi
c001242c:	56                   	push   esi
c001242d:	53                   	push   ebx
c001242e:	83 ec 1c             	sub    esp,0x1c
c0012431:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012435:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012439:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001243d:	e8 c8 f1 ff ff       	call   c001160a <Virt::allocateSwapfilePage()>
c0012442:	89 c7                	mov    edi,eax
c0012444:	a1 ac df 02 c0       	mov    eax,ds:0xc002dfac
c0012449:	85 c0                	test   eax,eax
c001244b:	7e 3d                	jle    c001248a <VAS::evict(unsigned long)+0x60>
c001244d:	89 ee                	mov    esi,ebp
c001244f:	31 db                	xor    ebx,ebx
c0012451:	83 ec 0c             	sub    esp,0xc
c0012454:	57                   	push   edi
c0012455:	e8 9e f1 ff ff       	call   c00115f8 <Virt::swapIDToSector(unsigned long)>
c001245a:	89 34 24             	mov    DWORD PTR [esp],esi
c001245d:	01 d8                	add    eax,ebx
c001245f:	6a 01                	push   0x1
c0012461:	31 d2                	xor    edx,edx
c0012463:	43                   	inc    ebx
c0012464:	52                   	push   edx
c0012465:	81 c6 00 02 00 00    	add    esi,0x200
c001246b:	50                   	push   eax
c001246c:	0f be 05 b8 df 02 c0 	movsx  eax,BYTE PTR ds:0xc002dfb8
c0012473:	ff 34 85 fc f4 02 c0 	push   DWORD PTR [eax*4-0x3ffd0b04]
c001247a:	e8 39 3e 00 00       	call   c00162b8 <LogicalDisk::write(unsigned long long, int, void*)>
c001247f:	83 c4 20             	add    esp,0x20
c0012482:	39 1d ac df 02 c0    	cmp    DWORD PTR ds:0xc002dfac,ebx
c0012488:	7f c7                	jg     c0012451 <VAS::evict(unsigned long)+0x27>
c001248a:	83 ec 08             	sub    esp,0x8
c001248d:	c1 e7 0b             	shl    edi,0xb
c0012490:	55                   	push   ebp
c0012491:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012495:	e8 d0 f4 ff ff       	call   c001196a <VAS::getPageTableEntry(unsigned long)>
c001249a:	83 c4 0c             	add    esp,0xc
c001249d:	8b 10                	mov    edx,DWORD PTR [eax]
c001249f:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00124a5:	09 d7                	or     edi,edx
c00124a7:	89 38                	mov    DWORD PTR [eax],edi
c00124a9:	a1 68 f1 02 c0       	mov    eax,ds:0xc002f168
c00124ae:	40                   	inc    eax
c00124af:	a3 68 f1 02 c0       	mov    ds:0xc002f168,eax
c00124b4:	0f 20 da             	mov    edx,cr3
c00124b7:	0f 22 da             	mov    cr3,edx
c00124ba:	50                   	push   eax
c00124bb:	55                   	push   ebp
c00124bc:	68 0f b1 02 c0       	push   0xc002b10f
c00124c1:	e8 09 04 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00124c6:	a1 64 f1 02 c0       	mov    eax,ds:0xc002f164
c00124cb:	c7 44 24 40 24 b1 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b124
c00124d3:	8d 50 01             	lea    edx,[eax+0x1]
c00124d6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00124da:	89 15 64 f1 02 c0    	mov    DWORD PTR ds:0xc002f164,edx
c00124e0:	83 c4 2c             	add    esp,0x2c
c00124e3:	5b                   	pop    ebx
c00124e4:	5e                   	pop    esi
c00124e5:	5f                   	pop    edi
c00124e6:	5d                   	pop    ebp
c00124e7:	e9 e3 03 00 00       	jmp    c00128cf <Dbg::kprintf(char const*, ...)>

c00124ec <VAS::tryLoadBackOffDisk(unsigned long)>:
c00124ec:	55                   	push   ebp
c00124ed:	57                   	push   edi
c00124ee:	56                   	push   esi
c00124ef:	53                   	push   ebx
c00124f0:	83 ec 0c             	sub    esp,0xc
c00124f3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00124f7:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00124fd:	0f 84 dc 00 00 00    	je     c00125df <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012503:	56                   	push   esi
c0012504:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012508:	e8 5d f4 ff ff       	call   c001196a <VAS::getPageTableEntry(unsigned long)>
c001250d:	5b                   	pop    ebx
c001250e:	85 c0                	test   eax,eax
c0012510:	5f                   	pop    edi
c0012511:	89 c3                	mov    ebx,eax
c0012513:	0f 84 c6 00 00 00    	je     c00125df <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012519:	8b 38                	mov    edi,DWORD PTR [eax]
c001251b:	31 c0                	xor    eax,eax
c001251d:	89 fa                	mov    edx,edi
c001251f:	81 e2 01 04 00 00    	and    edx,0x401
c0012525:	81 fa 00 04 00 00    	cmp    edx,0x400
c001252b:	0f 85 b0 00 00 00    	jne    c00125e1 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012531:	e8 5b d6 ff ff       	call   c000fb91 <Phys::allocatePage()>
c0012536:	c1 ef 0b             	shr    edi,0xb
c0012539:	8b 13                	mov    edx,DWORD PTR [ebx]
c001253b:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012541:	09 c2                	or     edx,eax
c0012543:	81 ca 01 08 00 00    	or     edx,0x801
c0012549:	89 13                	mov    DWORD PTR [ebx],edx
c001254b:	8b 0d ac df 02 c0    	mov    ecx,DWORD PTR ds:0xc002dfac
c0012551:	85 c9                	test   ecx,ecx
c0012553:	7e 3d                	jle    c0012592 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012555:	89 f5                	mov    ebp,esi
c0012557:	31 db                	xor    ebx,ebx
c0012559:	83 ec 0c             	sub    esp,0xc
c001255c:	57                   	push   edi
c001255d:	e8 96 f0 ff ff       	call   c00115f8 <Virt::swapIDToSector(unsigned long)>
c0012562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012565:	01 d8                	add    eax,ebx
c0012567:	6a 01                	push   0x1
c0012569:	31 d2                	xor    edx,edx
c001256b:	43                   	inc    ebx
c001256c:	52                   	push   edx
c001256d:	81 c5 00 02 00 00    	add    ebp,0x200
c0012573:	50                   	push   eax
c0012574:	0f be 05 b8 df 02 c0 	movsx  eax,BYTE PTR ds:0xc002dfb8
c001257b:	ff 34 85 fc f4 02 c0 	push   DWORD PTR [eax*4-0x3ffd0b04]
c0012582:	e8 c5 3c 00 00       	call   c001624c <LogicalDisk::read(unsigned long long, int, void*)>
c0012587:	83 c4 20             	add    esp,0x20
c001258a:	39 1d ac df 02 c0    	cmp    DWORD PTR ds:0xc002dfac,ebx
c0012590:	7f c7                	jg     c0012559 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012592:	a1 68 f1 02 c0       	mov    eax,ds:0xc002f168
c0012597:	48                   	dec    eax
c0012598:	52                   	push   edx
c0012599:	a3 68 f1 02 c0       	mov    ds:0xc002f168,eax
c001259e:	50                   	push   eax
c001259f:	56                   	push   esi
c00125a0:	68 35 b1 02 c0       	push   0xc002b135
c00125a5:	e8 25 03 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00125aa:	89 3c 24             	mov    DWORD PTR [esp],edi
c00125ad:	e8 28 f0 ff ff       	call   c00115da <Virt::freeSwapfilePage(unsigned long)>
c00125b2:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c00125b7:	83 c4 10             	add    esp,0x10
c00125ba:	48                   	dec    eax
c00125bb:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c00125c0:	85 c0                	test   eax,eax
c00125c2:	75 01                	jne    c00125c5 <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c00125c4:	fb                   	sti    
c00125c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00125c9:	25 ff 0f 00 00       	and    eax,0xfff
c00125ce:	3d e0 0f 00 00       	cmp    eax,0xfe0
c00125d3:	77 14                	ja     c00125e9 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c00125d5:	0f 20 d8             	mov    eax,cr3
c00125d8:	0f 22 d8             	mov    cr3,eax
c00125db:	b0 01                	mov    al,0x1
c00125dd:	eb 02                	jmp    c00125e1 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c00125df:	31 c0                	xor    eax,eax
c00125e1:	83 c4 0c             	add    esp,0xc
c00125e4:	5b                   	pop    ebx
c00125e5:	5e                   	pop    esi
c00125e6:	5f                   	pop    edi
c00125e7:	5d                   	pop    ebp
c00125e8:	c3                   	ret    
c00125e9:	83 ec 0c             	sub    esp,0xc
c00125ec:	68 4a b1 02 c0       	push   0xc002b14a
c00125f1:	e8 d9 02 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00125f6:	83 c4 10             	add    esp,0x10
c00125f9:	eb da                	jmp    c00125d5 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c00125fb:	90                   	nop

c00125fc <VAS::scanForEviction()>:
c00125fc:	57                   	push   edi
c00125fd:	56                   	push   esi
c00125fe:	53                   	push   ebx
c00125ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012603:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012606:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001260c:	75 0e                	jne    c001261c <VAS::scanForEviction()+0x20>
c001260e:	89 da                	mov    edx,ebx
c0012610:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012613:	c1 ea 16             	shr    edx,0x16
c0012616:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001261a:	74 48                	je     c0012664 <VAS::scanForEviction()+0x68>
c001261c:	53                   	push   ebx
c001261d:	56                   	push   esi
c001261e:	e8 47 f3 ff ff       	call   c001196a <VAS::getPageTableEntry(unsigned long)>
c0012623:	5a                   	pop    edx
c0012624:	8b 38                	mov    edi,DWORD PTR [eax]
c0012626:	59                   	pop    ecx
c0012627:	89 fa                	mov    edx,edi
c0012629:	81 e2 00 0c 00 00    	and    edx,0xc00
c001262f:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012635:	74 3d                	je     c0012674 <VAS::scanForEviction()+0x78>
c0012637:	81 c3 00 10 00 00    	add    ebx,0x1000
c001263d:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012643:	76 2a                	jbe    c001266f <VAS::scanForEviction()+0x73>
c0012645:	31 db                	xor    ebx,ebx
c0012647:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001264e:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012654:	75 c6                	jne    c001261c <VAS::scanForEviction()+0x20>
c0012656:	89 da                	mov    edx,ebx
c0012658:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001265b:	c1 ea 16             	shr    edx,0x16
c001265e:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012662:	75 b8                	jne    c001261c <VAS::scanForEviction()+0x20>
c0012664:	81 c3 00 00 40 00    	add    ebx,0x400000
c001266a:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c001266d:	eb 97                	jmp    c0012606 <VAS::scanForEviction()+0xa>
c001266f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012672:	eb 92                	jmp    c0012606 <VAS::scanForEviction()+0xa>
c0012674:	f7 c7 01 00 00 00    	test   edi,0x1
c001267a:	74 bb                	je     c0012637 <VAS::scanForEviction()+0x3b>
c001267c:	f7 c7 20 00 00 00    	test   edi,0x20
c0012682:	74 0a                	je     c001268e <VAS::scanForEviction()+0x92>
c0012684:	83 e7 df             	and    edi,0xffffffdf
c0012687:	89 38                	mov    DWORD PTR [eax],edi
c0012689:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c001268c:	eb a9                	jmp    c0012637 <VAS::scanForEviction()+0x3b>
c001268e:	83 ec 08             	sub    esp,0x8
c0012691:	53                   	push   ebx
c0012692:	56                   	push   esi
c0012693:	e8 92 fd ff ff       	call   c001242a <VAS::evict(unsigned long)>
c0012698:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c001269f:	83 c4 10             	add    esp,0x10
c00126a2:	89 f8                	mov    eax,edi
c00126a4:	5b                   	pop    ebx
c00126a5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126aa:	5e                   	pop    esi
c00126ab:	5f                   	pop    edi
c00126ac:	c3                   	ret    

c00126ad <mapVASFirstTime>:
c00126ad:	55                   	push   ebp
c00126ae:	57                   	push   edi
c00126af:	56                   	push   esi
c00126b0:	53                   	push   ebx
c00126b1:	83 ec 0c             	sub    esp,0xc
c00126b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126b9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00126bc:	4a                   	dec    edx
c00126bd:	0f 84 8e 00 00 00    	je     c0012751 <mapVASFirstTime+0xa4>
c00126c3:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00126c6:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00126c9:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00126ce:	c1 e5 15             	shl    ebp,0x15
c00126d1:	be 00 90 e7 01       	mov    esi,0x1e79000
c00126d6:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c00126dc:	29 eb                	sub    ebx,ebp
c00126de:	29 ee                	sub    esi,ebp
c00126e0:	e8 ac d4 ff ff       	call   c000fb91 <Phys::allocatePage()>
c00126e5:	83 ec 0c             	sub    esp,0xc
c00126e8:	68 03 04 00 00       	push   0x403
c00126ed:	6a 01                	push   0x1
c00126ef:	53                   	push   ebx
c00126f0:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00126f6:	50                   	push   eax
c00126f7:	57                   	push   edi
c00126f8:	e8 f9 f8 ff ff       	call   c0011ff6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126fd:	83 c4 20             	add    esp,0x20
c0012700:	39 f3                	cmp    ebx,esi
c0012702:	75 dc                	jne    c00126e0 <mapVASFirstTime+0x33>
c0012704:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012709:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c001270e:	29 ee                	sub    esi,ebp
c0012710:	29 e8                	sub    eax,ebp
c0012712:	89 c5                	mov    ebp,eax
c0012714:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012718:	19 db                	sbb    ebx,ebx
c001271a:	e8 72 d4 ff ff       	call   c000fb91 <Phys::allocatePage()>
c001271f:	83 e3 04             	and    ebx,0x4
c0012722:	83 ec 0c             	sub    esp,0xc
c0012725:	81 c3 03 04 00 00    	add    ebx,0x403
c001272b:	53                   	push   ebx
c001272c:	6a 01                	push   0x1
c001272e:	56                   	push   esi
c001272f:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012735:	50                   	push   eax
c0012736:	57                   	push   edi
c0012737:	e8 ba f8 ff ff       	call   c0011ff6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001273c:	83 c4 20             	add    esp,0x20
c001273f:	39 f5                	cmp    ebp,esi
c0012741:	75 d1                	jne    c0012714 <mapVASFirstTime+0x67>
c0012743:	0f 20 d8             	mov    eax,cr3
c0012746:	0f 22 d8             	mov    cr3,eax
c0012749:	83 c4 0c             	add    esp,0xc
c001274c:	5b                   	pop    ebx
c001274d:	5e                   	pop    esi
c001274e:	5f                   	pop    edi
c001274f:	5d                   	pop    ebp
c0012750:	c3                   	ret    
c0012751:	83 ec 0c             	sub    esp,0xc
c0012754:	68 5a b1 02 c0       	push   0xc002b15a
c0012759:	e8 71 01 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001275e:	83 c4 10             	add    esp,0x10
c0012761:	83 c4 0c             	add    esp,0xc
c0012764:	5b                   	pop    ebx
c0012765:	5e                   	pop    esi
c0012766:	5f                   	pop    edi
c0012767:	5d                   	pop    ebp
c0012768:	c3                   	ret    

c0012769 <__cxa_atexit>:
c0012769:	31 c0                	xor    eax,eax
c001276b:	c3                   	ret    

c001276c <__cxa_finalize>:
c001276c:	c3                   	ret    

c001276d <__stack_chk_fail>:
c001276d:	55                   	push   ebp
c001276e:	89 e5                	mov    ebp,esp
c0012770:	83 ec 14             	sub    esp,0x14
c0012773:	68 73 b1 02 c0       	push   0xc002b173
c0012778:	e8 52 01 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001277d:	58                   	pop    eax
c001277e:	5a                   	pop    edx
c001277f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012782:	68 c3 b1 02 c0       	push   0xc002b1c3
c0012787:	e8 43 01 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001278c:	59                   	pop    ecx
c001278d:	58                   	pop    eax
c001278e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012791:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012794:	68 c3 b1 02 c0       	push   0xc002b1c3
c0012799:	e8 31 01 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001279e:	5a                   	pop    edx
c001279f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127a2:	59                   	pop    ecx
c00127a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00127a5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127a8:	68 c3 b1 02 c0       	push   0xc002b1c3
c00127ad:	e8 1d 01 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00127b2:	5a                   	pop    edx
c00127b3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00127b6:	59                   	pop    ecx
c00127b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00127b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00127bb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00127be:	68 c3 b1 02 c0       	push   0xc002b1c3
c00127c3:	e8 07 01 00 00       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00127c8:	c7 04 24 cb b1 02 c0 	mov    DWORD PTR [esp],0xc002b1cb
c00127cf:	e8 31 7b 00 00       	call   c001a305 <Krnl::panic(char const*)>
c00127d4:	83 c4 10             	add    esp,0x10
c00127d7:	c9                   	leave  
c00127d8:	c3                   	ret    

c00127d9 <__cxa_pure_virtual>:
c00127d9:	83 ec 18             	sub    esp,0x18
c00127dc:	68 e3 b1 02 c0       	push   0xc002b1e3
c00127e1:	e8 1f 7b 00 00       	call   c001a305 <Krnl::panic(char const*)>
c00127e6:	83 c4 1c             	add    esp,0x1c
c00127e9:	c3                   	ret    

c00127ea <operator new[](unsigned long)>:
c00127ea:	e9 9d d0 ff ff       	jmp    c000f88c <malloc>

c00127ef <operator delete(void*, unsigned long)>:
c00127ef:	e9 b8 d0 ff ff       	jmp    c000f8ac <rfree>

c00127f4 <operator delete[](void*)>:
c00127f4:	e9 b3 d0 ff ff       	jmp    c000f8ac <rfree>

c00127f9 <operator delete[](void*, unsigned long)>:
c00127f9:	e9 ae d0 ff ff       	jmp    c000f8ac <rfree>

c00127fe <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00127fe:	57                   	push   edi
c00127ff:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012804:	56                   	push   esi
c0012805:	be f8 b1 02 c0       	mov    esi,0xc002b1f8
c001280a:	53                   	push   ebx
c001280b:	83 ec 40             	sub    esp,0x40
c001280e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012812:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012816:	fc                   	cld    
c0012817:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012819:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c001281d:	83 f9 3e             	cmp    ecx,0x3e
c0012820:	7e 05                	jle    c0012827 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012822:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012827:	89 df                	mov    edi,ebx
c0012829:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001282d:	eb 02                	jmp    c0012831 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c001282f:	89 c7                	mov    edi,eax
c0012831:	31 d2                	xor    edx,edx
c0012833:	46                   	inc    esi
c0012834:	89 f8                	mov    eax,edi
c0012836:	f7 f1                	div    ecx
c0012838:	39 cf                	cmp    edi,ecx
c001283a:	73 f3                	jae    c001282f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c001283c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001283f:	eb 02                	jmp    c0012843 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012841:	89 c3                	mov    ebx,eax
c0012843:	31 d2                	xor    edx,edx
c0012845:	4e                   	dec    esi
c0012846:	89 d8                	mov    eax,ebx
c0012848:	f7 f1                	div    ecx
c001284a:	39 cb                	cmp    ebx,ecx
c001284c:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012850:	88 16                	mov    BYTE PTR [esi],dl
c0012852:	73 ed                	jae    c0012841 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012854:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012858:	83 c4 40             	add    esp,0x40
c001285b:	5b                   	pop    ebx
c001285c:	5e                   	pop    esi
c001285d:	5f                   	pop    edi
c001285e:	c3                   	ret    

c001285f <Dbg::logc(char)>:
c001285f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012863:	ba fd 03 00 00       	mov    edx,0x3fd
c0012868:	ec                   	in     al,dx
c0012869:	a8 20                	test   al,0x20
c001286b:	74 fb                	je     c0012868 <Dbg::logc(char)+0x9>
c001286d:	ba f8 03 00 00       	mov    edx,0x3f8
c0012872:	88 c8                	mov    al,cl
c0012874:	ee                   	out    dx,al
c0012875:	c3                   	ret    

c0012876 <Dbg::logs(char*)>:
c0012876:	53                   	push   ebx
c0012877:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001287b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001287e:	84 c0                	test   al,al
c0012880:	74 0f                	je     c0012891 <Dbg::logs(char*)+0x1b>
c0012882:	50                   	push   eax
c0012883:	43                   	inc    ebx
c0012884:	e8 d6 ff ff ff       	call   c001285f <Dbg::logc(char)>
c0012889:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001288c:	5a                   	pop    edx
c001288d:	84 c0                	test   al,al
c001288f:	75 f1                	jne    c0012882 <Dbg::logs(char*)+0xc>
c0012891:	5b                   	pop    ebx
c0012892:	c3                   	ret    

c0012893 <Dbg::logWriteInt(unsigned int)>:
c0012893:	83 ec 10             	sub    esp,0x10
c0012896:	6a 0a                	push   0xa
c0012898:	8d 44 24 08          	lea    eax,[esp+0x8]
c001289c:	50                   	push   eax
c001289d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128a1:	e8 58 ff ff ff       	call   c00127fe <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128a6:	50                   	push   eax
c00128a7:	e8 ca ff ff ff       	call   c0012876 <Dbg::logs(char*)>
c00128ac:	83 c4 20             	add    esp,0x20
c00128af:	c3                   	ret    

c00128b0 <Dbg::logWriteIntBase(unsigned int, int)>:
c00128b0:	83 ec 10             	sub    esp,0x10
c00128b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128b7:	8d 44 24 08          	lea    eax,[esp+0x8]
c00128bb:	50                   	push   eax
c00128bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128c0:	e8 39 ff ff ff       	call   c00127fe <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00128c5:	50                   	push   eax
c00128c6:	e8 ab ff ff ff       	call   c0012876 <Dbg::logs(char*)>
c00128cb:	83 c4 20             	add    esp,0x20
c00128ce:	c3                   	ret    

c00128cf <Dbg::kprintf(char const*, ...)>:
c00128cf:	55                   	push   ebp
c00128d0:	57                   	push   edi
c00128d1:	56                   	push   esi
c00128d2:	53                   	push   ebx
c00128d3:	83 ec 0c             	sub    esp,0xc
c00128d6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00128da:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00128de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128e2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00128e5:	84 c0                	test   al,al
c00128e7:	74 4a                	je     c0012933 <Dbg::kprintf(char const*, ...)+0x64>
c00128e9:	31 db                	xor    ebx,ebx
c00128eb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00128ee:	3c 25                	cmp    al,0x25
c00128f0:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00128f3:	0f 85 e4 00 00 00    	jne    c00129dd <Dbg::kprintf(char const*, ...)+0x10e>
c00128f9:	83 c3 02             	add    ebx,0x2
c00128fc:	8a 07                	mov    al,BYTE PTR [edi]
c00128fe:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012901:	83 e8 25             	sub    eax,0x25
c0012904:	3c 53                	cmp    al,0x53
c0012906:	0f 87 ba 00 00 00    	ja     c00129c6 <Dbg::kprintf(char const*, ...)+0xf7>
c001290c:	0f b6 c0             	movzx  eax,al
c001290f:	ff 24 85 38 b2 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4dc8]
c0012916:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001291a:	89 c8                	mov    eax,ecx
c001291c:	83 c1 04             	add    ecx,0x4
c001291f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012923:	ff 30                	push   DWORD PTR [eax]
c0012925:	e8 4c ff ff ff       	call   c0012876 <Dbg::logs(char*)>
c001292a:	58                   	pop    eax
c001292b:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001292f:	84 c0                	test   al,al
c0012931:	75 b8                	jne    c00128eb <Dbg::kprintf(char const*, ...)+0x1c>
c0012933:	83 c4 0c             	add    esp,0xc
c0012936:	5b                   	pop    ebx
c0012937:	5e                   	pop    esi
c0012938:	5f                   	pop    edi
c0012939:	5d                   	pop    ebp
c001293a:	c3                   	ret    
c001293b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001293f:	89 d0                	mov    eax,edx
c0012941:	83 c2 04             	add    edx,0x4
c0012944:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012948:	ff 30                	push   DWORD PTR [eax]
c001294a:	e8 44 ff ff ff       	call   c0012893 <Dbg::logWriteInt(unsigned int)>
c001294f:	58                   	pop    eax
c0012950:	eb d9                	jmp    c001292b <Dbg::kprintf(char const*, ...)+0x5c>
c0012952:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012956:	89 d0                	mov    eax,edx
c0012958:	83 c2 04             	add    edx,0x4
c001295b:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001295e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012962:	50                   	push   eax
c0012963:	e8 f7 fe ff ff       	call   c001285f <Dbg::logc(char)>
c0012968:	58                   	pop    eax
c0012969:	eb c0                	jmp    c001292b <Dbg::kprintf(char const*, ...)+0x5c>
c001296b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001296f:	89 c8                	mov    eax,ecx
c0012971:	83 c1 04             	add    ecx,0x4
c0012974:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012978:	ff 30                	push   DWORD PTR [eax]
c001297a:	e8 14 ff ff ff       	call   c0012893 <Dbg::logWriteInt(unsigned int)>
c001297f:	5f                   	pop    edi
c0012980:	eb a9                	jmp    c001292b <Dbg::kprintf(char const*, ...)+0x5c>
c0012982:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012986:	89 c8                	mov    eax,ecx
c0012988:	83 c1 04             	add    ecx,0x4
c001298b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001298f:	6a 10                	push   0x10
c0012991:	ff 30                	push   DWORD PTR [eax]
c0012993:	e8 18 ff ff ff       	call   c00128b0 <Dbg::logWriteIntBase(unsigned int, int)>
c0012998:	59                   	pop    ecx
c0012999:	5f                   	pop    edi
c001299a:	eb 8f                	jmp    c001292b <Dbg::kprintf(char const*, ...)+0x5c>
c001299c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00129a0:	89 d0                	mov    eax,edx
c00129a2:	83 c2 08             	add    edx,0x8
c00129a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00129a9:	6a 10                	push   0x10
c00129ab:	ff 30                	push   DWORD PTR [eax]
c00129ad:	e8 fe fe ff ff       	call   c00128b0 <Dbg::logWriteIntBase(unsigned int, int)>
c00129b2:	58                   	pop    eax
c00129b3:	5a                   	pop    edx
c00129b4:	e9 72 ff ff ff       	jmp    c001292b <Dbg::kprintf(char const*, ...)+0x5c>
c00129b9:	6a 25                	push   0x25
c00129bb:	e8 9f fe ff ff       	call   c001285f <Dbg::logc(char)>
c00129c0:	58                   	pop    eax
c00129c1:	e9 65 ff ff ff       	jmp    c001292b <Dbg::kprintf(char const*, ...)+0x5c>
c00129c6:	6a 25                	push   0x25
c00129c8:	e8 92 fe ff ff       	call   c001285f <Dbg::logc(char)>
c00129cd:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00129d0:	50                   	push   eax
c00129d1:	e8 89 fe ff ff       	call   c001285f <Dbg::logc(char)>
c00129d6:	5a                   	pop    edx
c00129d7:	59                   	pop    ecx
c00129d8:	e9 4e ff ff ff       	jmp    c001292b <Dbg::kprintf(char const*, ...)+0x5c>
c00129dd:	50                   	push   eax
c00129de:	89 eb                	mov    ebx,ebp
c00129e0:	e8 7a fe ff ff       	call   c001285f <Dbg::logc(char)>
c00129e5:	89 fd                	mov    ebp,edi
c00129e7:	58                   	pop    eax
c00129e8:	e9 3e ff ff ff       	jmp    c001292b <Dbg::kprintf(char const*, ...)+0x5c>
c00129ed:	90                   	nop

c00129ee <File::read(unsigned long long, void*, int*)>:
c00129ee:	53                   	push   ebx
c00129ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129f3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00129f7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00129fe:	3c 19                	cmp    al,0x19
c0012a00:	77 35                	ja     c0012a37 <File::read(unsigned long long, void*, int*)+0x49>
c0012a02:	8b 04 85 00 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0a00]
c0012a09:	85 c0                	test   eax,eax
c0012a0b:	74 2a                	je     c0012a37 <File::read(unsigned long long, void*, int*)+0x49>
c0012a0d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a13:	85 c0                	test   eax,eax
c0012a15:	74 20                	je     c0012a37 <File::read(unsigned long long, void*, int*)+0x49>
c0012a17:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a1b:	74 21                	je     c0012a3e <File::read(unsigned long long, void*, int*)+0x50>
c0012a1d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a1f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a23:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a2d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a31:	5b                   	pop    ebx
c0012a32:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012a35:	ff e0                	jmp    eax
c0012a37:	b8 0b 00 00 00       	mov    eax,0xb
c0012a3c:	eb 05                	jmp    c0012a43 <File::read(unsigned long long, void*, int*)+0x55>
c0012a3e:	b8 05 00 00 00       	mov    eax,0x5
c0012a43:	5b                   	pop    ebx
c0012a44:	c3                   	ret    
c0012a45:	90                   	nop

c0012a46 <File::write(unsigned long long, void*, int*)>:
c0012a46:	53                   	push   ebx
c0012a47:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a4b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a4f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a56:	3c 19                	cmp    al,0x19
c0012a58:	77 35                	ja     c0012a8f <File::write(unsigned long long, void*, int*)+0x49>
c0012a5a:	8b 04 85 00 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0a00]
c0012a61:	85 c0                	test   eax,eax
c0012a63:	74 2a                	je     c0012a8f <File::write(unsigned long long, void*, int*)+0x49>
c0012a65:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a6b:	85 c0                	test   eax,eax
c0012a6d:	74 20                	je     c0012a8f <File::write(unsigned long long, void*, int*)+0x49>
c0012a6f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a73:	74 21                	je     c0012a96 <File::write(unsigned long long, void*, int*)+0x50>
c0012a75:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a77:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a7b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a81:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a85:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a89:	5b                   	pop    ebx
c0012a8a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012a8d:	ff e0                	jmp    eax
c0012a8f:	b8 0b 00 00 00       	mov    eax,0xb
c0012a94:	eb 05                	jmp    c0012a9b <File::write(unsigned long long, void*, int*)+0x55>
c0012a96:	b8 05 00 00 00       	mov    eax,0x5
c0012a9b:	5b                   	pop    ebx
c0012a9c:	c3                   	ret    
c0012a9d:	90                   	nop

c0012a9e <Directory::read(unsigned long long, void*, int*)>:
c0012a9e:	53                   	push   ebx
c0012a9f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012aa3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012aa7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012aae:	3c 19                	cmp    al,0x19
c0012ab0:	77 35                	ja     c0012ae7 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ab2:	8b 04 85 00 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0a00]
c0012ab9:	85 c0                	test   eax,eax
c0012abb:	74 2a                	je     c0012ae7 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012abd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012ac3:	85 c0                	test   eax,eax
c0012ac5:	74 20                	je     c0012ae7 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012ac7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012acb:	74 21                	je     c0012aee <Directory::read(unsigned long long, void*, int*)+0x50>
c0012acd:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012acf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012ad3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012ad9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012add:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012ae1:	5b                   	pop    ebx
c0012ae2:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012ae5:	ff e0                	jmp    eax
c0012ae7:	b8 0b 00 00 00       	mov    eax,0xb
c0012aec:	eb 05                	jmp    c0012af3 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012aee:	b8 05 00 00 00       	mov    eax,0x5
c0012af3:	5b                   	pop    ebx
c0012af4:	c3                   	ret    
c0012af5:	90                   	nop

c0012af6 <Directory::write(unsigned long long, void*, int*)>:
c0012af6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012afa:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012b01:	b8 0b 00 00 00       	mov    eax,0xb
c0012b06:	80 fa 19             	cmp    dl,0x19
c0012b09:	77 18                	ja     c0012b23 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b0b:	8b 14 95 00 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0a00]
c0012b12:	85 d2                	test   edx,edx
c0012b14:	74 0d                	je     c0012b23 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012b16:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012b1d:	19 c0                	sbb    eax,eax
c0012b1f:	83 e0 0a             	and    eax,0xa
c0012b22:	40                   	inc    eax
c0012b23:	c3                   	ret    

c0012b24 <File::isAtty()>:
c0012b24:	31 c0                	xor    eax,eax
c0012b26:	c3                   	ret    
c0012b27:	90                   	nop

c0012b28 <Directory::isAtty()>:
c0012b28:	31 c0                	xor    eax,eax
c0012b2a:	c3                   	ret    
c0012b2b:	90                   	nop

c0012b2c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012b2c:	b8 0a 00 00 00       	mov    eax,0xa
c0012b31:	c3                   	ret    

c0012b32 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012b32:	b8 0a 00 00 00       	mov    eax,0xa
c0012b37:	c3                   	ret    

c0012b38 <Filesystem::getFileFirstSector(char const*)>:
c0012b38:	31 c0                	xor    eax,eax
c0012b3a:	31 d2                	xor    edx,edx
c0012b3c:	c3                   	ret    
c0012b3d:	90                   	nop

c0012b3e <File::~File()>:
c0012b3e:	83 ec 0c             	sub    esp,0xc
c0012b41:	ba f8 b3 02 c0       	mov    edx,0xc002b3f8
c0012b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b4a:	89 10                	mov    DWORD PTR [eax],edx
c0012b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b50:	83 ec 0c             	sub    esp,0xc
c0012b53:	50                   	push   eax
c0012b54:	e8 0f e7 ff ff       	call   c0011268 <UnixFile::~UnixFile()>
c0012b59:	83 c4 10             	add    esp,0x10
c0012b5c:	90                   	nop
c0012b5d:	83 c4 0c             	add    esp,0xc
c0012b60:	c3                   	ret    
c0012b61:	90                   	nop

c0012b62 <File::~File()>:
c0012b62:	83 ec 0c             	sub    esp,0xc
c0012b65:	83 ec 0c             	sub    esp,0xc
c0012b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b6c:	e8 cd ff ff ff       	call   c0012b3e <File::~File()>
c0012b71:	83 c4 10             	add    esp,0x10
c0012b74:	83 ec 08             	sub    esp,0x8
c0012b77:	68 14 01 00 00       	push   0x114
c0012b7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b80:	e8 6a fc ff ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0012b85:	83 c4 10             	add    esp,0x10
c0012b88:	83 c4 0c             	add    esp,0xc
c0012b8b:	c3                   	ret    

c0012b8c <Directory::~Directory()>:
c0012b8c:	83 ec 0c             	sub    esp,0xc
c0012b8f:	ba 14 b4 02 c0       	mov    edx,0xc002b414
c0012b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b98:	89 10                	mov    DWORD PTR [eax],edx
c0012b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b9e:	83 ec 0c             	sub    esp,0xc
c0012ba1:	50                   	push   eax
c0012ba2:	e8 c1 e6 ff ff       	call   c0011268 <UnixFile::~UnixFile()>
c0012ba7:	83 c4 10             	add    esp,0x10
c0012baa:	90                   	nop
c0012bab:	83 c4 0c             	add    esp,0xc
c0012bae:	c3                   	ret    
c0012baf:	90                   	nop

c0012bb0 <Directory::~Directory()>:
c0012bb0:	83 ec 0c             	sub    esp,0xc
c0012bb3:	83 ec 0c             	sub    esp,0xc
c0012bb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bba:	e8 cd ff ff ff       	call   c0012b8c <Directory::~Directory()>
c0012bbf:	83 c4 10             	add    esp,0x10
c0012bc2:	83 ec 08             	sub    esp,0x8
c0012bc5:	68 14 01 00 00       	push   0x114
c0012bca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bce:	e8 1c fc ff ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0012bd3:	83 c4 10             	add    esp,0x10
c0012bd6:	83 c4 0c             	add    esp,0xc
c0012bd9:	c3                   	ret    

c0012bda <Filesystem::Filesystem()>:
c0012bda:	ba 90 b3 02 c0       	mov    edx,0xc002b390
c0012bdf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012be3:	89 10                	mov    DWORD PTR [eax],edx
c0012be5:	8b 15 74 f1 02 c0    	mov    edx,DWORD PTR ds:0xc002f174
c0012beb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012bf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bf6:	a3 74 f1 02 c0       	mov    ds:0xc002f174,eax
c0012bfb:	90                   	nop
c0012bfc:	c3                   	ret    
c0012bfd:	90                   	nop

c0012bfe <Filesystem::~Filesystem()>:
c0012bfe:	ba 90 b3 02 c0       	mov    edx,0xc002b390
c0012c03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c07:	89 10                	mov    DWORD PTR [eax],edx
c0012c09:	90                   	nop
c0012c0a:	c3                   	ret    
c0012c0b:	90                   	nop

c0012c0c <Filesystem::~Filesystem()>:
c0012c0c:	83 ec 0c             	sub    esp,0xc
c0012c0f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012c13:	e8 e6 ff ff ff       	call   c0012bfe <Filesystem::~Filesystem()>
c0012c18:	83 c4 04             	add    esp,0x4
c0012c1b:	83 ec 08             	sub    esp,0x8
c0012c1e:	6a 08                	push   0x8
c0012c20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c24:	e8 c6 fb ff ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0012c29:	83 c4 10             	add    esp,0x10
c0012c2c:	83 c4 0c             	add    esp,0xc
c0012c2f:	c3                   	ret    

c0012c30 <Fs::getcwd(Process*, char*, int)>:
c0012c30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c34:	31 c0                	xor    eax,eax
c0012c36:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012c39:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012c3d:	7d 15                	jge    c0012c54 <Fs::getcwd(Process*, char*, int)+0x24>
c0012c3f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c43:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012c4a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012c4d:	84 c9                	test   cl,cl
c0012c4f:	74 06                	je     c0012c57 <Fs::getcwd(Process*, char*, int)+0x27>
c0012c51:	40                   	inc    eax
c0012c52:	eb e2                	jmp    c0012c36 <Fs::getcwd(Process*, char*, int)+0x6>
c0012c54:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c57:	31 c0                	xor    eax,eax
c0012c59:	c3                   	ret    

c0012c5a <Fs::initVFS()>:
c0012c5a:	83 ec 18             	sub    esp,0x18
c0012c5d:	6a 08                	push   0x8
c0012c5f:	e8 28 cc ff ff       	call   c000f88c <malloc>
c0012c64:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c67:	e8 08 e5 00 00       	call   c0021174 <FAT::FAT()>
c0012c6c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012c73:	e8 14 cc ff ff       	call   c000f88c <malloc>
c0012c78:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c7b:	e8 30 f7 00 00       	call   c00223b0 <ISO9660::ISO9660()>
c0012c80:	83 c4 1c             	add    esp,0x1c
c0012c83:	c3                   	ret    

c0012c84 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012c84:	55                   	push   ebp
c0012c85:	57                   	push   edi
c0012c86:	56                   	push   esi
c0012c87:	53                   	push   ebx
c0012c88:	81 ec 10 04 00 00    	sub    esp,0x410
c0012c8e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012c95:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012c9c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012ca3:	68 00 04 00 00       	push   0x400
c0012ca8:	6a 00                	push   0x0
c0012caa:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012cae:	56                   	push   esi
c0012caf:	e8 9c da fe ff       	call   c0000750 <memset>
c0012cb4:	83 c4 10             	add    esp,0x10
c0012cb7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012cbb:	75 0b                	jne    c0012cc8 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012cbd:	50                   	push   eax
c0012cbe:	50                   	push   eax
c0012cbf:	57                   	push   edi
c0012cc0:	56                   	push   esi
c0012cc1:	e8 46 db fe ff       	call   c000080c <strcpy>
c0012cc6:	eb 41                	jmp    c0012d09 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012cc8:	8a 07                	mov    al,BYTE PTR [edi]
c0012cca:	3c 5c                	cmp    al,0x5c
c0012ccc:	74 04                	je     c0012cd2 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012cce:	3c 2f                	cmp    al,0x2f
c0012cd0:	75 18                	jne    c0012cea <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012cd2:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012cd5:	3c 60                	cmp    al,0x60
c0012cd7:	7e 03                	jle    c0012cdc <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012cd9:	83 e8 20             	sub    eax,0x20
c0012cdc:	88 04 24             	mov    BYTE PTR [esp],al
c0012cdf:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012ce6:	50                   	push   eax
c0012ce7:	50                   	push   eax
c0012ce8:	eb 18                	jmp    c0012d02 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012cea:	50                   	push   eax
c0012ceb:	50                   	push   eax
c0012cec:	55                   	push   ebp
c0012ced:	56                   	push   esi
c0012cee:	e8 19 db fe ff       	call   c000080c <strcpy>
c0012cf3:	5a                   	pop    edx
c0012cf4:	59                   	pop    ecx
c0012cf5:	68 6d cb 02 c0       	push   0xc002cb6d
c0012cfa:	56                   	push   esi
c0012cfb:	e8 4c dc fe ff       	call   c000094c <strcat>
c0012d00:	5d                   	pop    ebp
c0012d01:	58                   	pop    eax
c0012d02:	57                   	push   edi
c0012d03:	56                   	push   esi
c0012d04:	e8 43 dc fe ff       	call   c000094c <strcat>
c0012d09:	83 c4 10             	add    esp,0x10
c0012d0c:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012d0f:	3c 60                	cmp    al,0x60
c0012d11:	7e 03                	jle    c0012d16 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012d13:	83 e8 20             	sub    eax,0x20
c0012d16:	88 04 24             	mov    BYTE PTR [esp],al
c0012d19:	88 03                	mov    BYTE PTR [ebx],al
c0012d1b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012d22:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012d28:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012d2c:	bf 03 00 00 00       	mov    edi,0x3
c0012d31:	b8 03 00 00 00       	mov    eax,0x3
c0012d36:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012d39:	84 d2                	test   dl,dl
c0012d3b:	0f 84 91 00 00 00    	je     c0012dd2 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012d41:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012d44:	80 fa 5c             	cmp    dl,0x5c
c0012d47:	74 05                	je     c0012d4e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012d49:	80 fa 2f             	cmp    dl,0x2f
c0012d4c:	75 12                	jne    c0012d60 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d4e:	89 c5                	mov    ebp,eax
c0012d50:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012d55:	74 09                	je     c0012d60 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d57:	40                   	inc    eax
c0012d58:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012d5c:	89 cf                	mov    edi,ecx
c0012d5e:	eb d6                	jmp    c0012d36 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012d60:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012d65:	75 5b                	jne    c0012dc2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d67:	80 fa 2e             	cmp    dl,0x2e
c0012d6a:	75 56                	jne    c0012dc2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d6c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012d70:	74 19                	je     c0012d8b <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012d72:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d77:	74 53                	je     c0012dcc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d79:	89 f9                	mov    ecx,edi
c0012d7b:	41                   	inc    ecx
c0012d7c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d7f:	80 fa 2f             	cmp    dl,0x2f
c0012d82:	74 f7                	je     c0012d7b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d84:	80 fa 5c             	cmp    dl,0x5c
c0012d87:	74 f2                	je     c0012d7b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d89:	eb d1                	jmp    c0012d5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d8b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d90:	74 3a                	je     c0012dcc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d92:	83 f8 03             	cmp    eax,0x3
c0012d95:	74 c5                	je     c0012d5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d97:	41                   	inc    ecx
c0012d98:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d9b:	80 fa 2f             	cmp    dl,0x2f
c0012d9e:	74 f7                	je     c0012d97 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012da0:	80 fa 5c             	cmp    dl,0x5c
c0012da3:	74 f2                	je     c0012d97 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012da5:	48                   	dec    eax
c0012da6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012daa:	75 06                	jne    c0012db2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012dac:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012db0:	eb f3                	jmp    c0012da5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012db2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012db6:	74 07                	je     c0012dbf <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012db8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dbc:	48                   	dec    eax
c0012dbd:	eb f3                	jmp    c0012db2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012dbf:	40                   	inc    eax
c0012dc0:	eb 9a                	jmp    c0012d5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dc2:	80 fa 2f             	cmp    dl,0x2f
c0012dc5:	74 95                	je     c0012d5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dc7:	80 fa 5c             	cmp    dl,0x5c
c0012dca:	74 90                	je     c0012d5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dcc:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012dcf:	40                   	inc    eax
c0012dd0:	eb 8a                	jmp    c0012d5c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012dd2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012dd6:	83 ec 0c             	sub    esp,0xc
c0012dd9:	53                   	push   ebx
c0012dda:	e8 8d d9 fe ff       	call   c000076c <strlen>
c0012ddf:	83 c4 10             	add    esp,0x10
c0012de2:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012de7:	75 26                	jne    c0012e0f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012de9:	83 ec 0c             	sub    esp,0xc
c0012dec:	53                   	push   ebx
c0012ded:	e8 7a d9 fe ff       	call   c000076c <strlen>
c0012df2:	83 c4 10             	add    esp,0x10
c0012df5:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012dfa:	74 26                	je     c0012e22 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012dfc:	83 ec 0c             	sub    esp,0xc
c0012dff:	53                   	push   ebx
c0012e00:	e8 67 d9 fe ff       	call   c000076c <strlen>
c0012e05:	83 c4 10             	add    esp,0x10
c0012e08:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e0d:	eb c7                	jmp    c0012dd6 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012e0f:	83 ec 0c             	sub    esp,0xc
c0012e12:	53                   	push   ebx
c0012e13:	e8 54 d9 fe ff       	call   c000076c <strlen>
c0012e18:	83 c4 10             	add    esp,0x10
c0012e1b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012e20:	74 c7                	je     c0012de9 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012e22:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012e28:	5b                   	pop    ebx
c0012e29:	5e                   	pop    esi
c0012e2a:	5f                   	pop    edi
c0012e2b:	5d                   	pop    ebp
c0012e2c:	c3                   	ret    
c0012e2d:	90                   	nop

c0012e2e <File::File(char const*, Process*)>:
c0012e2e:	83 ec 0c             	sub    esp,0xc
c0012e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e35:	83 ec 08             	sub    esp,0x8
c0012e38:	6a 00                	push   0x0
c0012e3a:	50                   	push   eax
c0012e3b:	e8 46 e2 ff ff       	call   c0011086 <UnixFile::UnixFile(int)>
c0012e40:	83 c4 10             	add    esp,0x10
c0012e43:	ba f8 b3 02 c0       	mov    edx,0xc002b3f8
c0012e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e4c:	89 10                	mov    DWORD PTR [eax],edx
c0012e4e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012e52:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e5c:	83 c0 0d             	add    eax,0xd
c0012e5f:	83 ec 04             	sub    esp,0x4
c0012e62:	52                   	push   edx
c0012e63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e67:	50                   	push   eax
c0012e68:	e8 17 fe ff ff       	call   c0012c84 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e6d:	83 c4 10             	add    esp,0x10
c0012e70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e74:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012e77:	8d 50 bf             	lea    edx,[eax-0x41]
c0012e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e7e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e88:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012e8c:	90                   	nop
c0012e8d:	83 c4 0c             	add    esp,0xc
c0012e90:	c3                   	ret    
c0012e91:	90                   	nop

c0012e92 <File::open(FileOpenMode)>:
c0012e92:	53                   	push   ebx
c0012e93:	b8 0b 00 00 00       	mov    eax,0xb
c0012e98:	83 ec 08             	sub    esp,0x8
c0012e9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012e9f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012ea6:	80 fa 19             	cmp    dl,0x19
c0012ea9:	77 40                	ja     c0012eeb <File::open(FileOpenMode)+0x59>
c0012eab:	8b 14 95 00 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0a00]
c0012eb2:	85 d2                	test   edx,edx
c0012eb4:	74 35                	je     c0012eeb <File::open(FileOpenMode)+0x59>
c0012eb6:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012ebc:	85 d2                	test   edx,edx
c0012ebe:	74 2b                	je     c0012eeb <File::open(FileOpenMode)+0x59>
c0012ec0:	b8 06 00 00 00       	mov    eax,0x6
c0012ec5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012ec9:	75 20                	jne    c0012eeb <File::open(FileOpenMode)+0x59>
c0012ecb:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ecd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012ed3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ed7:	51                   	push   ecx
c0012ed8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012edb:	51                   	push   ecx
c0012edc:	52                   	push   edx
c0012edd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012ee0:	83 c4 10             	add    esp,0x10
c0012ee3:	85 c0                	test   eax,eax
c0012ee5:	75 04                	jne    c0012eeb <File::open(FileOpenMode)+0x59>
c0012ee7:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012eeb:	83 c4 08             	add    esp,0x8
c0012eee:	5b                   	pop    ebx
c0012eef:	c3                   	ret    

c0012ef0 <File::close()>:
c0012ef0:	53                   	push   ebx
c0012ef1:	b8 0b 00 00 00       	mov    eax,0xb
c0012ef6:	83 ec 08             	sub    esp,0x8
c0012ef9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012efd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f04:	80 fa 19             	cmp    dl,0x19
c0012f07:	77 41                	ja     c0012f4a <File::close()+0x5a>
c0012f09:	8b 1c 95 00 f6 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0a00]
c0012f10:	85 db                	test   ebx,ebx
c0012f12:	74 36                	je     c0012f4a <File::close()+0x5a>
c0012f14:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012f1b:	74 2d                	je     c0012f4a <File::close()+0x5a>
c0012f1d:	b8 05 00 00 00       	mov    eax,0x5
c0012f22:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f26:	74 22                	je     c0012f4a <File::close()+0x5a>
c0012f28:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012f2c:	8b 04 95 00 f6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0a00]
c0012f33:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f39:	53                   	push   ebx
c0012f3a:	53                   	push   ebx
c0012f3b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f3d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012f43:	50                   	push   eax
c0012f44:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012f47:	83 c4 10             	add    esp,0x10
c0012f4a:	83 c4 08             	add    esp,0x8
c0012f4d:	5b                   	pop    ebx
c0012f4e:	c3                   	ret    
c0012f4f:	90                   	nop

c0012f50 <File::seek(unsigned long long)>:
c0012f50:	56                   	push   esi
c0012f51:	53                   	push   ebx
c0012f52:	b8 0b 00 00 00       	mov    eax,0xb
c0012f57:	51                   	push   ecx
c0012f58:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012f5c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012f60:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012f67:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f6b:	80 fa 19             	cmp    dl,0x19
c0012f6e:	77 31                	ja     c0012fa1 <File::seek(unsigned long long)+0x51>
c0012f70:	8b 14 95 00 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0a00]
c0012f77:	85 d2                	test   edx,edx
c0012f79:	74 26                	je     c0012fa1 <File::seek(unsigned long long)+0x51>
c0012f7b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f81:	85 d2                	test   edx,edx
c0012f83:	74 1c                	je     c0012fa1 <File::seek(unsigned long long)+0x51>
c0012f85:	b8 05 00 00 00       	mov    eax,0x5
c0012f8a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012f8e:	74 11                	je     c0012fa1 <File::seek(unsigned long long)+0x51>
c0012f90:	8b 02                	mov    eax,DWORD PTR [edx]
c0012f92:	53                   	push   ebx
c0012f93:	51                   	push   ecx
c0012f94:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012f9a:	52                   	push   edx
c0012f9b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012f9e:	83 c4 10             	add    esp,0x10
c0012fa1:	5a                   	pop    edx
c0012fa2:	5b                   	pop    ebx
c0012fa3:	5e                   	pop    esi
c0012fa4:	c3                   	ret    
c0012fa5:	90                   	nop

c0012fa6 <File::tell(unsigned long long*)>:
c0012fa6:	83 ec 0c             	sub    esp,0xc
c0012fa9:	b8 0b 00 00 00       	mov    eax,0xb
c0012fae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012fb2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012fb9:	80 fa 19             	cmp    dl,0x19
c0012fbc:	77 34                	ja     c0012ff2 <File::tell(unsigned long long*)+0x4c>
c0012fbe:	8b 14 95 00 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0a00]
c0012fc5:	85 d2                	test   edx,edx
c0012fc7:	74 29                	je     c0012ff2 <File::tell(unsigned long long*)+0x4c>
c0012fc9:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012fcf:	85 d2                	test   edx,edx
c0012fd1:	74 1f                	je     c0012ff2 <File::tell(unsigned long long*)+0x4c>
c0012fd3:	b8 05 00 00 00       	mov    eax,0x5
c0012fd8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012fdc:	74 14                	je     c0012ff2 <File::tell(unsigned long long*)+0x4c>
c0012fde:	50                   	push   eax
c0012fdf:	8b 02                	mov    eax,DWORD PTR [edx]
c0012fe1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012fe5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012feb:	52                   	push   edx
c0012fec:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012fef:	83 c4 10             	add    esp,0x10
c0012ff2:	83 c4 0c             	add    esp,0xc
c0012ff5:	c3                   	ret    

c0012ff6 <File::rewind()>:
c0012ff6:	83 ec 10             	sub    esp,0x10
c0012ff9:	6a 00                	push   0x0
c0012ffb:	6a 00                	push   0x0
c0012ffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013001:	e8 4a ff ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c0013006:	83 c4 1c             	add    esp,0x1c
c0013009:	c3                   	ret    

c001300a <File::unlink()>:
c001300a:	83 ec 0c             	sub    esp,0xc
c001300d:	b8 0b 00 00 00       	mov    eax,0xb
c0013012:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013016:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001301d:	80 f9 19             	cmp    cl,0x19
c0013020:	77 2f                	ja     c0013051 <File::unlink()+0x47>
c0013022:	8b 0c 8d 00 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a00]
c0013029:	85 c9                	test   ecx,ecx
c001302b:	74 24                	je     c0013051 <File::unlink()+0x47>
c001302d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013033:	85 c9                	test   ecx,ecx
c0013035:	74 1a                	je     c0013051 <File::unlink()+0x47>
c0013037:	b8 06 00 00 00       	mov    eax,0x6
c001303c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013040:	75 0f                	jne    c0013051 <File::unlink()+0x47>
c0013042:	83 c2 0d             	add    edx,0xd
c0013045:	50                   	push   eax
c0013046:	50                   	push   eax
c0013047:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013049:	52                   	push   edx
c001304a:	51                   	push   ecx
c001304b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001304e:	83 c4 10             	add    esp,0x10
c0013051:	83 c4 0c             	add    esp,0xc
c0013054:	c3                   	ret    
c0013055:	90                   	nop

c0013056 <File::rename(char const*)>:
c0013056:	83 ec 0c             	sub    esp,0xc
c0013059:	b8 0b 00 00 00       	mov    eax,0xb
c001305e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013062:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013069:	80 f9 19             	cmp    cl,0x19
c001306c:	77 32                	ja     c00130a0 <File::rename(char const*)+0x4a>
c001306e:	8b 0c 8d 00 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a00]
c0013075:	85 c9                	test   ecx,ecx
c0013077:	74 27                	je     c00130a0 <File::rename(char const*)+0x4a>
c0013079:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001307f:	85 c9                	test   ecx,ecx
c0013081:	74 1d                	je     c00130a0 <File::rename(char const*)+0x4a>
c0013083:	b8 06 00 00 00       	mov    eax,0x6
c0013088:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001308c:	75 12                	jne    c00130a0 <File::rename(char const*)+0x4a>
c001308e:	83 c2 0d             	add    edx,0xd
c0013091:	50                   	push   eax
c0013092:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013094:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013098:	52                   	push   edx
c0013099:	51                   	push   ecx
c001309a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001309d:	83 c4 10             	add    esp,0x10
c00130a0:	83 c4 0c             	add    esp,0xc
c00130a3:	c3                   	ret    

c00130a4 <File::chfatattr(unsigned char, unsigned char)>:
c00130a4:	57                   	push   edi
c00130a5:	b8 0b 00 00 00       	mov    eax,0xb
c00130aa:	56                   	push   esi
c00130ab:	53                   	push   ebx
c00130ac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130b0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00130b4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130bb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00130bf:	80 f9 19             	cmp    cl,0x19
c00130c2:	77 37                	ja     c00130fb <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130c4:	8b 0c 8d 00 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a00]
c00130cb:	85 c9                	test   ecx,ecx
c00130cd:	74 2c                	je     c00130fb <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130cf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130d5:	85 c9                	test   ecx,ecx
c00130d7:	74 22                	je     c00130fb <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130d9:	b8 06 00 00 00       	mov    eax,0x6
c00130de:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130e2:	75 17                	jne    c00130fb <File::chfatattr(unsigned char, unsigned char)+0x57>
c00130e4:	8b 39                	mov    edi,DWORD PTR [ecx]
c00130e6:	89 f0                	mov    eax,esi
c00130e8:	83 c2 0d             	add    edx,0xd
c00130eb:	0f b6 f0             	movzx  esi,al
c00130ee:	0f b6 db             	movzx  ebx,bl
c00130f1:	56                   	push   esi
c00130f2:	53                   	push   ebx
c00130f3:	52                   	push   edx
c00130f4:	51                   	push   ecx
c00130f5:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00130f8:	83 c4 10             	add    esp,0x10
c00130fb:	5b                   	pop    ebx
c00130fc:	5e                   	pop    esi
c00130fd:	5f                   	pop    edi
c00130fe:	c3                   	ret    
c00130ff:	90                   	nop

c0013100 <File::exists()>:
c0013100:	83 ec 0c             	sub    esp,0xc
c0013103:	31 c0                	xor    eax,eax
c0013105:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013109:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013110:	80 f9 19             	cmp    cl,0x19
c0013113:	77 24                	ja     c0013139 <File::exists()+0x39>
c0013115:	8b 0c 8d 00 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a00]
c001311c:	85 c9                	test   ecx,ecx
c001311e:	74 19                	je     c0013139 <File::exists()+0x39>
c0013120:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013126:	85 c9                	test   ecx,ecx
c0013128:	74 0f                	je     c0013139 <File::exists()+0x39>
c001312a:	83 c2 0d             	add    edx,0xd
c001312d:	50                   	push   eax
c001312e:	50                   	push   eax
c001312f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013131:	52                   	push   edx
c0013132:	51                   	push   ecx
c0013133:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013136:	83 c4 10             	add    esp,0x10
c0013139:	83 c4 0c             	add    esp,0xc
c001313c:	c3                   	ret    
c001313d:	90                   	nop

c001313e <File::stat(unsigned long long*, bool*)>:
c001313e:	56                   	push   esi
c001313f:	53                   	push   ebx
c0013140:	50                   	push   eax
c0013141:	b8 0b 00 00 00       	mov    eax,0xb
c0013146:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001314a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001314e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013155:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013159:	80 f9 19             	cmp    cl,0x19
c001315c:	77 3d                	ja     c001319b <File::stat(unsigned long long*, bool*)+0x5d>
c001315e:	8b 0c 8d 00 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a00]
c0013165:	85 c9                	test   ecx,ecx
c0013167:	74 32                	je     c001319b <File::stat(unsigned long long*, bool*)+0x5d>
c0013169:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001316f:	85 c9                	test   ecx,ecx
c0013171:	74 28                	je     c001319b <File::stat(unsigned long long*, bool*)+0x5d>
c0013173:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013175:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013179:	74 13                	je     c001318e <File::stat(unsigned long long*, bool*)+0x50>
c001317b:	83 ec 04             	sub    esp,0x4
c001317e:	56                   	push   esi
c001317f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013185:	51                   	push   ecx
c0013186:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013189:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001318c:	eb 0a                	jmp    c0013198 <File::stat(unsigned long long*, bool*)+0x5a>
c001318e:	53                   	push   ebx
c001318f:	83 c2 0d             	add    edx,0xd
c0013192:	56                   	push   esi
c0013193:	52                   	push   edx
c0013194:	51                   	push   ecx
c0013195:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013198:	83 c4 10             	add    esp,0x10
c001319b:	5a                   	pop    edx
c001319c:	5b                   	pop    ebx
c001319d:	5e                   	pop    esi
c001319e:	c3                   	ret    

c001319f <Fs::setcwd(Process*, char*)>:
c001319f:	55                   	push   ebp
c00131a0:	57                   	push   edi
c00131a1:	56                   	push   esi
c00131a2:	53                   	push   ebx
c00131a3:	81 ec 20 02 00 00    	sub    esp,0x220
c00131a9:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00131b0:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00131b6:	57                   	push   edi
c00131b7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00131be:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00131c2:	56                   	push   esi
c00131c3:	e8 bc fa ff ff       	call   c0012c84 <Fs::standardiseFiles(char*, char const*, char const*)>
c00131c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00131cb:	e8 9c d5 fe ff       	call   c000076c <strlen>
c00131d0:	83 c4 10             	add    esp,0x10
c00131d3:	83 f8 02             	cmp    eax,0x2
c00131d6:	77 17                	ja     c00131ef <Fs::setcwd(Process*, char*)+0x50>
c00131d8:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00131dd:	83 e8 41             	sub    eax,0x41
c00131e0:	83 f8 19             	cmp    eax,0x19
c00131e3:	76 24                	jbe    c0013209 <Fs::setcwd(Process*, char*)+0x6a>
c00131e5:	b8 03 00 00 00       	mov    eax,0x3
c00131ea:	e9 e0 00 00 00       	jmp    c00132cf <Fs::setcwd(Process*, char*)+0x130>
c00131ef:	83 ec 0c             	sub    esp,0xc
c00131f2:	56                   	push   esi
c00131f3:	e8 74 d5 fe ff       	call   c000076c <strlen>
c00131f8:	83 c4 10             	add    esp,0x10
c00131fb:	83 f8 03             	cmp    eax,0x3
c00131fe:	75 34                	jne    c0013234 <Fs::setcwd(Process*, char*)+0x95>
c0013200:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013205:	75 2d                	jne    c0013234 <Fs::setcwd(Process*, char*)+0x95>
c0013207:	eb cf                	jmp    c00131d8 <Fs::setcwd(Process*, char*)+0x39>
c0013209:	8b 14 85 00 f6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0a00]
c0013210:	b8 05 00 00 00       	mov    eax,0x5
c0013215:	85 d2                	test   edx,edx
c0013217:	0f 84 b2 00 00 00    	je     c00132cf <Fs::setcwd(Process*, char*)+0x130>
c001321d:	b8 06 00 00 00       	mov    eax,0x6
c0013222:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013229:	0f 85 92 00 00 00    	jne    c00132c1 <Fs::setcwd(Process*, char*)+0x122>
c001322f:	e9 9b 00 00 00       	jmp    c00132cf <Fs::setcwd(Process*, char*)+0x130>
c0013234:	83 ec 0c             	sub    esp,0xc
c0013237:	68 14 01 00 00       	push   0x114
c001323c:	e8 4b c6 ff ff       	call   c000f88c <malloc>
c0013241:	83 c4 0c             	add    esp,0xc
c0013244:	89 c3                	mov    ebx,eax
c0013246:	55                   	push   ebp
c0013247:	56                   	push   esi
c0013248:	50                   	push   eax
c0013249:	e8 e0 fb ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001324e:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013253:	83 c4 0c             	add    esp,0xc
c0013256:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001325a:	50                   	push   eax
c001325b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001325f:	50                   	push   eax
c0013260:	53                   	push   ebx
c0013261:	e8 d8 fe ff ff       	call   c001313e <File::stat(unsigned long long*, bool*)>
c0013266:	83 c4 10             	add    esp,0x10
c0013269:	83 f8 02             	cmp    eax,0x2
c001326c:	74 04                	je     c0013272 <Fs::setcwd(Process*, char*)+0xd3>
c001326e:	85 c0                	test   eax,eax
c0013270:	74 1c                	je     c001328e <Fs::setcwd(Process*, char*)+0xef>
c0013272:	b8 01 00 00 00       	mov    eax,0x1
c0013277:	85 db                	test   ebx,ebx
c0013279:	74 54                	je     c00132cf <Fs::setcwd(Process*, char*)+0x130>
c001327b:	83 ec 0c             	sub    esp,0xc
c001327e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013280:	53                   	push   ebx
c0013281:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013284:	83 c4 10             	add    esp,0x10
c0013287:	b8 01 00 00 00       	mov    eax,0x1
c001328c:	eb 41                	jmp    c00132cf <Fs::setcwd(Process*, char*)+0x130>
c001328e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013293:	75 1c                	jne    c00132b1 <Fs::setcwd(Process*, char*)+0x112>
c0013295:	b8 02 00 00 00       	mov    eax,0x2
c001329a:	85 db                	test   ebx,ebx
c001329c:	74 31                	je     c00132cf <Fs::setcwd(Process*, char*)+0x130>
c001329e:	83 ec 0c             	sub    esp,0xc
c00132a1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132a3:	53                   	push   ebx
c00132a4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132a7:	83 c4 10             	add    esp,0x10
c00132aa:	b8 02 00 00 00       	mov    eax,0x2
c00132af:	eb 1e                	jmp    c00132cf <Fs::setcwd(Process*, char*)+0x130>
c00132b1:	85 db                	test   ebx,ebx
c00132b3:	74 0c                	je     c00132c1 <Fs::setcwd(Process*, char*)+0x122>
c00132b5:	83 ec 0c             	sub    esp,0xc
c00132b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00132ba:	53                   	push   ebx
c00132bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00132be:	83 c4 10             	add    esp,0x10
c00132c1:	50                   	push   eax
c00132c2:	50                   	push   eax
c00132c3:	56                   	push   esi
c00132c4:	57                   	push   edi
c00132c5:	e8 42 d5 fe ff       	call   c000080c <strcpy>
c00132ca:	83 c4 10             	add    esp,0x10
c00132cd:	31 c0                	xor    eax,eax
c00132cf:	81 c4 1c 02 00 00    	add    esp,0x21c
c00132d5:	5b                   	pop    ebx
c00132d6:	5e                   	pop    esi
c00132d7:	5f                   	pop    edi
c00132d8:	5d                   	pop    ebp
c00132d9:	c3                   	ret    

c00132da <Directory::Directory(char const*, Process*)>:
c00132da:	83 ec 0c             	sub    esp,0xc
c00132dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132e1:	83 ec 08             	sub    esp,0x8
c00132e4:	6a 00                	push   0x0
c00132e6:	50                   	push   eax
c00132e7:	e8 9a dd ff ff       	call   c0011086 <UnixFile::UnixFile(int)>
c00132ec:	83 c4 10             	add    esp,0x10
c00132ef:	ba 14 b4 02 c0       	mov    edx,0xc002b414
c00132f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132f8:	89 10                	mov    DWORD PTR [eax],edx
c00132fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132fe:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013308:	83 c0 0d             	add    eax,0xd
c001330b:	83 ec 04             	sub    esp,0x4
c001330e:	52                   	push   edx
c001330f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013313:	50                   	push   eax
c0013314:	e8 6b f9 ff ff       	call   c0012c84 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013319:	83 c4 10             	add    esp,0x10
c001331c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013320:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013323:	8d 50 bf             	lea    edx,[eax-0x41]
c0013326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001332a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013334:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013338:	90                   	nop
c0013339:	83 c4 0c             	add    esp,0xc
c001333c:	c3                   	ret    
c001333d:	90                   	nop

c001333e <Directory::open()>:
c001333e:	53                   	push   ebx
c001333f:	b8 0b 00 00 00       	mov    eax,0xb
c0013344:	83 ec 08             	sub    esp,0x8
c0013347:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001334b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013352:	80 fa 19             	cmp    dl,0x19
c0013355:	77 3d                	ja     c0013394 <Directory::open()+0x56>
c0013357:	8b 14 95 00 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0a00]
c001335e:	85 d2                	test   edx,edx
c0013360:	74 32                	je     c0013394 <Directory::open()+0x56>
c0013362:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013368:	85 d2                	test   edx,edx
c001336a:	74 28                	je     c0013394 <Directory::open()+0x56>
c001336c:	b8 06 00 00 00       	mov    eax,0x6
c0013371:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013375:	75 1d                	jne    c0013394 <Directory::open()+0x56>
c0013377:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001337d:	50                   	push   eax
c001337e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013380:	51                   	push   ecx
c0013381:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013384:	51                   	push   ecx
c0013385:	52                   	push   edx
c0013386:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013389:	83 c4 10             	add    esp,0x10
c001338c:	85 c0                	test   eax,eax
c001338e:	75 04                	jne    c0013394 <Directory::open()+0x56>
c0013390:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013394:	83 c4 08             	add    esp,0x8
c0013397:	5b                   	pop    ebx
c0013398:	c3                   	ret    
c0013399:	90                   	nop

c001339a <Directory::close()>:
c001339a:	53                   	push   ebx
c001339b:	b8 0b 00 00 00       	mov    eax,0xb
c00133a0:	83 ec 08             	sub    esp,0x8
c00133a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00133a7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133ae:	80 fa 19             	cmp    dl,0x19
c00133b1:	77 41                	ja     c00133f4 <Directory::close()+0x5a>
c00133b3:	8b 1c 95 00 f6 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0a00]
c00133ba:	85 db                	test   ebx,ebx
c00133bc:	74 36                	je     c00133f4 <Directory::close()+0x5a>
c00133be:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00133c5:	74 2d                	je     c00133f4 <Directory::close()+0x5a>
c00133c7:	b8 05 00 00 00       	mov    eax,0x5
c00133cc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00133d0:	74 22                	je     c00133f4 <Directory::close()+0x5a>
c00133d2:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00133d6:	8b 04 95 00 f6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0a00]
c00133dd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00133e3:	53                   	push   ebx
c00133e4:	53                   	push   ebx
c00133e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00133e7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00133ed:	50                   	push   eax
c00133ee:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00133f1:	83 c4 10             	add    esp,0x10
c00133f4:	83 c4 08             	add    esp,0x8
c00133f7:	5b                   	pop    ebx
c00133f8:	c3                   	ret    
c00133f9:	90                   	nop

c00133fa <Directory::unlink()>:
c00133fa:	83 ec 0c             	sub    esp,0xc
c00133fd:	b8 0b 00 00 00       	mov    eax,0xb
c0013402:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013406:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001340d:	80 f9 19             	cmp    cl,0x19
c0013410:	77 2f                	ja     c0013441 <Directory::unlink()+0x47>
c0013412:	8b 0c 8d 00 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a00]
c0013419:	85 c9                	test   ecx,ecx
c001341b:	74 24                	je     c0013441 <Directory::unlink()+0x47>
c001341d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013423:	85 c9                	test   ecx,ecx
c0013425:	74 1a                	je     c0013441 <Directory::unlink()+0x47>
c0013427:	b8 06 00 00 00       	mov    eax,0x6
c001342c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013430:	75 0f                	jne    c0013441 <Directory::unlink()+0x47>
c0013432:	83 c2 0d             	add    edx,0xd
c0013435:	50                   	push   eax
c0013436:	50                   	push   eax
c0013437:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013439:	52                   	push   edx
c001343a:	51                   	push   ecx
c001343b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001343e:	83 c4 10             	add    esp,0x10
c0013441:	83 c4 0c             	add    esp,0xc
c0013444:	c3                   	ret    
c0013445:	90                   	nop

c0013446 <Directory::rename(char const*)>:
c0013446:	83 ec 0c             	sub    esp,0xc
c0013449:	b8 0b 00 00 00       	mov    eax,0xb
c001344e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013452:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013459:	80 f9 19             	cmp    cl,0x19
c001345c:	77 32                	ja     c0013490 <Directory::rename(char const*)+0x4a>
c001345e:	8b 0c 8d 00 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a00]
c0013465:	85 c9                	test   ecx,ecx
c0013467:	74 27                	je     c0013490 <Directory::rename(char const*)+0x4a>
c0013469:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001346f:	85 c9                	test   ecx,ecx
c0013471:	74 1d                	je     c0013490 <Directory::rename(char const*)+0x4a>
c0013473:	b8 06 00 00 00       	mov    eax,0x6
c0013478:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001347c:	75 12                	jne    c0013490 <Directory::rename(char const*)+0x4a>
c001347e:	83 c2 0d             	add    edx,0xd
c0013481:	50                   	push   eax
c0013482:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013488:	52                   	push   edx
c0013489:	51                   	push   ecx
c001348a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001348d:	83 c4 10             	add    esp,0x10
c0013490:	83 c4 0c             	add    esp,0xc
c0013493:	c3                   	ret    

c0013494 <Directory::exists()>:
c0013494:	83 ec 0c             	sub    esp,0xc
c0013497:	31 c0                	xor    eax,eax
c0013499:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001349d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134a4:	80 f9 19             	cmp    cl,0x19
c00134a7:	77 24                	ja     c00134cd <Directory::exists()+0x39>
c00134a9:	8b 0c 8d 00 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a00]
c00134b0:	85 c9                	test   ecx,ecx
c00134b2:	74 19                	je     c00134cd <Directory::exists()+0x39>
c00134b4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134ba:	85 c9                	test   ecx,ecx
c00134bc:	74 0f                	je     c00134cd <Directory::exists()+0x39>
c00134be:	83 c2 0d             	add    edx,0xd
c00134c1:	50                   	push   eax
c00134c2:	50                   	push   eax
c00134c3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134c5:	52                   	push   edx
c00134c6:	51                   	push   ecx
c00134c7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00134ca:	83 c4 10             	add    esp,0x10
c00134cd:	83 c4 0c             	add    esp,0xc
c00134d0:	c3                   	ret    
c00134d1:	90                   	nop

c00134d2 <Directory::read(dirent*)>:
c00134d2:	83 ec 1c             	sub    esp,0x1c
c00134d5:	b8 0b 00 00 00       	mov    eax,0xb
c00134da:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00134de:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00134e5:	80 fa 19             	cmp    dl,0x19
c00134e8:	77 30                	ja     c001351a <Directory::read(dirent*)+0x48>
c00134ea:	8b 14 95 00 f6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0a00]
c00134f1:	85 d2                	test   edx,edx
c00134f3:	74 25                	je     c001351a <Directory::read(dirent*)+0x48>
c00134f5:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00134fc:	74 1c                	je     c001351a <Directory::read(dirent*)+0x48>
c00134fe:	83 ec 0c             	sub    esp,0xc
c0013501:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013503:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013507:	52                   	push   edx
c0013508:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001350c:	6a 00                	push   0x0
c001350e:	68 10 01 00 00       	push   0x110
c0013513:	51                   	push   ecx
c0013514:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013517:	83 c4 20             	add    esp,0x20
c001351a:	83 c4 1c             	add    esp,0x1c
c001351d:	c3                   	ret    

c001351e <Directory::create()>:
c001351e:	83 ec 0c             	sub    esp,0xc
c0013521:	b8 0b 00 00 00       	mov    eax,0xb
c0013526:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001352a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013531:	80 f9 19             	cmp    cl,0x19
c0013534:	77 2f                	ja     c0013565 <Directory::create()+0x47>
c0013536:	8b 0c 8d 00 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a00]
c001353d:	85 c9                	test   ecx,ecx
c001353f:	74 24                	je     c0013565 <Directory::create()+0x47>
c0013541:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013547:	85 c9                	test   ecx,ecx
c0013549:	74 1a                	je     c0013565 <Directory::create()+0x47>
c001354b:	b8 06 00 00 00       	mov    eax,0x6
c0013550:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013554:	75 0f                	jne    c0013565 <Directory::create()+0x47>
c0013556:	83 c2 0d             	add    edx,0xd
c0013559:	50                   	push   eax
c001355a:	50                   	push   eax
c001355b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001355d:	52                   	push   edx
c001355e:	51                   	push   ecx
c001355f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013562:	83 c4 10             	add    esp,0x10
c0013565:	83 c4 0c             	add    esp,0xc
c0013568:	c3                   	ret    
c0013569:	90                   	nop

c001356a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001356a:	b8 0a 00 00 00       	mov    eax,0xa
c001356f:	c3                   	ret    

c0013570 <Bus::Bus(char const*)>:
c0013570:	83 ec 0c             	sub    esp,0xc
c0013573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013577:	83 ec 08             	sub    esp,0x8
c001357a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001357e:	50                   	push   eax
c001357f:	e8 88 09 00 00       	call   c0013f0c <Device::Device(char const*)>
c0013584:	83 c4 10             	add    esp,0x10
c0013587:	ba 30 b4 02 c0       	mov    edx,0xc002b430
c001358c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013590:	89 10                	mov    DWORD PTR [eax],edx
c0013592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013596:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c00135a0:	90                   	nop
c00135a1:	83 c4 0c             	add    esp,0xc
c00135a4:	c3                   	ret    
c00135a5:	90                   	nop

c00135a6 <Bus::~Bus()>:
c00135a6:	83 ec 0c             	sub    esp,0xc
c00135a9:	ba 30 b4 02 c0       	mov    edx,0xc002b430
c00135ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b2:	89 10                	mov    DWORD PTR [eax],edx
c00135b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135b8:	83 ec 0c             	sub    esp,0xc
c00135bb:	50                   	push   eax
c00135bc:	e8 15 06 00 00       	call   c0013bd6 <Device::~Device()>
c00135c1:	83 c4 10             	add    esp,0x10
c00135c4:	90                   	nop
c00135c5:	83 c4 0c             	add    esp,0xc
c00135c8:	c3                   	ret    
c00135c9:	90                   	nop

c00135ca <Bus::~Bus()>:
c00135ca:	83 ec 0c             	sub    esp,0xc
c00135cd:	83 ec 0c             	sub    esp,0xc
c00135d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135d4:	e8 cd ff ff ff       	call   c00135a6 <Bus::~Bus()>
c00135d9:	83 c4 10             	add    esp,0x10
c00135dc:	83 ec 08             	sub    esp,0x8
c00135df:	68 58 01 00 00       	push   0x158
c00135e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135e8:	e8 02 f2 ff ff       	call   c00127ef <operator delete(void*, unsigned long)>
c00135ed:	83 c4 10             	add    esp,0x10
c00135f0:	83 c4 0c             	add    esp,0xc
c00135f3:	c3                   	ret    

c00135f4 <Buzzer::Buzzer(char const*)>:
c00135f4:	83 ec 0c             	sub    esp,0xc
c00135f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135fb:	83 ec 08             	sub    esp,0x8
c00135fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013602:	50                   	push   eax
c0013603:	e8 04 09 00 00       	call   c0013f0c <Device::Device(char const*)>
c0013608:	83 c4 10             	add    esp,0x10
c001360b:	ba 5c b4 02 c0       	mov    edx,0xc002b45c
c0013610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013614:	89 10                	mov    DWORD PTR [eax],edx
c0013616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001361a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013628:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013632:	90                   	nop
c0013633:	83 c4 0c             	add    esp,0xc
c0013636:	c3                   	ret    
c0013637:	90                   	nop

c0013638 <Buzzer::~Buzzer()>:
c0013638:	83 ec 0c             	sub    esp,0xc
c001363b:	ba 5c b4 02 c0       	mov    edx,0xc002b45c
c0013640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013644:	89 10                	mov    DWORD PTR [eax],edx
c0013646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001364a:	83 ec 0c             	sub    esp,0xc
c001364d:	50                   	push   eax
c001364e:	e8 83 05 00 00       	call   c0013bd6 <Device::~Device()>
c0013653:	83 c4 10             	add    esp,0x10
c0013656:	90                   	nop
c0013657:	83 c4 0c             	add    esp,0xc
c001365a:	c3                   	ret    
c001365b:	90                   	nop

c001365c <Buzzer::~Buzzer()>:
c001365c:	83 ec 0c             	sub    esp,0xc
c001365f:	83 ec 0c             	sub    esp,0xc
c0013662:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013666:	e8 cd ff ff ff       	call   c0013638 <Buzzer::~Buzzer()>
c001366b:	83 c4 10             	add    esp,0x10
c001366e:	83 ec 08             	sub    esp,0x8
c0013671:	68 5c 01 00 00       	push   0x15c
c0013676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001367a:	e8 70 f1 ff ff       	call   c00127ef <operator delete(void*, unsigned long)>
c001367f:	83 c4 10             	add    esp,0x10
c0013682:	83 c4 0c             	add    esp,0xc
c0013685:	c3                   	ret    

c0013686 <Buzzer::stop()>:
c0013686:	83 ec 14             	sub    esp,0x14
c0013689:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001368d:	8b 10                	mov    edx,DWORD PTR [eax]
c001368f:	6a 00                	push   0x0
c0013691:	50                   	push   eax
c0013692:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013695:	83 c4 1c             	add    esp,0x1c
c0013698:	c3                   	ret    

c0013699 <beepThread(void*)>:
c0013699:	53                   	push   ebx
c001369a:	83 ec 08             	sub    esp,0x8
c001369d:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c00136a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00136a6:	48                   	dec    eax
c00136a7:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c00136ac:	75 01                	jne    c00136af <beepThread(void*)+0x16>
c00136ae:	fb                   	sti    
c00136af:	50                   	push   eax
c00136b0:	50                   	push   eax
c00136b1:	b8 40 42 0f 00       	mov    eax,0xf4240
c00136b6:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00136bc:	52                   	push   edx
c00136bd:	50                   	push   eax
c00136be:	e8 f8 ac 00 00       	call   c001e3bb <nanoSleep(unsigned long long)>
c00136c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136c6:	e8 bb ff ff ff       	call   c0013686 <Buzzer::stop()>
c00136cb:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00136d3:	83 c4 18             	add    esp,0x18
c00136d6:	5b                   	pop    ebx
c00136d7:	e9 db ab 00 00       	jmp    c001e2b7 <blockTask(TaskState)>

c00136dc <Buzzer::beep(int, int, bool)>:
c00136dc:	57                   	push   edi
c00136dd:	56                   	push   esi
c00136de:	53                   	push   ebx
c00136df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136e3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00136e7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136eb:	52                   	push   edx
c00136ec:	52                   	push   edx
c00136ed:	8b 06                	mov    eax,DWORD PTR [esi]
c00136ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136f3:	56                   	push   esi
c00136f4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00136f7:	83 c4 10             	add    esp,0x10
c00136fa:	89 f8                	mov    eax,edi
c00136fc:	84 c0                	test   al,al
c00136fe:	74 1f                	je     c001371f <Buzzer::beep(int, int, bool)+0x43>
c0013700:	50                   	push   eax
c0013701:	50                   	push   eax
c0013702:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013708:	99                   	cdq    
c0013709:	52                   	push   edx
c001370a:	50                   	push   eax
c001370b:	e8 ab ac 00 00       	call   c001e3bb <nanoSleep(unsigned long long)>
c0013710:	83 c4 10             	add    esp,0x10
c0013713:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013717:	5b                   	pop    ebx
c0013718:	5e                   	pop    esi
c0013719:	5f                   	pop    edi
c001371a:	e9 67 ff ff ff       	jmp    c0013686 <Buzzer::stop()>
c001371f:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013725:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001372a:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013732:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013736:	c7 44 24 14 99 36 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013699
c001373e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013742:	5b                   	pop    ebx
c0013743:	5e                   	pop    esi
c0013744:	5f                   	pop    edi
c0013745:	e9 2a a7 00 00       	jmp    c001de74 <Process::createThread(void (*)(void*), void*, int)>

c001374a <User::loadClockSettings(int)>:
c001374a:	53                   	push   ebx
c001374b:	83 ec 14             	sub    esp,0x14
c001374e:	68 14 01 00 00       	push   0x114
c0013753:	e8 34 c1 ff ff       	call   c000f88c <malloc>
c0013758:	83 c4 0c             	add    esp,0xc
c001375b:	89 c3                	mov    ebx,eax
c001375d:	ff 35 50 25 03 c0    	push   DWORD PTR ds:0xc0032550
c0013763:	68 84 b4 02 c0       	push   0xc002b484
c0013768:	50                   	push   eax
c0013769:	e8 c0 f6 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001376e:	58                   	pop    eax
c001376f:	5a                   	pop    edx
c0013770:	6a 01                	push   0x1
c0013772:	53                   	push   ebx
c0013773:	e8 1a f7 ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c0013778:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001377b:	e8 70 f7 ff ff       	call   c0012ef0 <File::close()>
c0013780:	83 c4 10             	add    esp,0x10
c0013783:	85 db                	test   ebx,ebx
c0013785:	74 0f                	je     c0013796 <User::loadClockSettings(int)+0x4c>
c0013787:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013789:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001378d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013790:	83 c4 08             	add    esp,0x8
c0013793:	5b                   	pop    ebx
c0013794:	ff e0                	jmp    eax
c0013796:	83 c4 08             	add    esp,0x8
c0013799:	5b                   	pop    ebx
c001379a:	c3                   	ret    
c001379b:	90                   	nop

c001379c <Clock::Clock(char const*)>:
c001379c:	83 ec 0c             	sub    esp,0xc
c001379f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137a3:	83 ec 08             	sub    esp,0x8
c00137a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137aa:	50                   	push   eax
c00137ab:	e8 5c 07 00 00       	call   c0013f0c <Device::Device(char const*)>
c00137b0:	83 c4 10             	add    esp,0x10
c00137b3:	ba ac b4 02 c0       	mov    edx,0xc002b4ac
c00137b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137bc:	89 10                	mov    DWORD PTR [eax],edx
c00137be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137c2:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00137cc:	90                   	nop
c00137cd:	83 c4 0c             	add    esp,0xc
c00137d0:	c3                   	ret    
c00137d1:	90                   	nop

c00137d2 <Clock::~Clock()>:
c00137d2:	83 ec 0c             	sub    esp,0xc
c00137d5:	ba ac b4 02 c0       	mov    edx,0xc002b4ac
c00137da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137de:	89 10                	mov    DWORD PTR [eax],edx
c00137e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137e4:	83 ec 0c             	sub    esp,0xc
c00137e7:	50                   	push   eax
c00137e8:	e8 e9 03 00 00       	call   c0013bd6 <Device::~Device()>
c00137ed:	83 c4 10             	add    esp,0x10
c00137f0:	90                   	nop
c00137f1:	83 c4 0c             	add    esp,0xc
c00137f4:	c3                   	ret    
c00137f5:	90                   	nop

c00137f6 <Clock::~Clock()>:
c00137f6:	83 ec 0c             	sub    esp,0xc
c00137f9:	83 ec 0c             	sub    esp,0xc
c00137fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013800:	e8 cd ff ff ff       	call   c00137d2 <Clock::~Clock()>
c0013805:	83 c4 10             	add    esp,0x10
c0013808:	83 ec 08             	sub    esp,0x8
c001380b:	68 58 01 00 00       	push   0x158
c0013810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013814:	e8 d6 ef ff ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0013819:	83 c4 10             	add    esp,0x10
c001381c:	83 c4 0c             	add    esp,0xc
c001381f:	c3                   	ret    

c0013820 <Clock::timeInSecondsLocal()>:
c0013820:	53                   	push   ebx
c0013821:	83 ec 14             	sub    esp,0x14
c0013824:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013828:	8b 10                	mov    edx,DWORD PTR [eax]
c001382a:	50                   	push   eax
c001382b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001382e:	0f b6 0d 7c f1 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f17c
c0013835:	03 0d 80 f1 02 c0    	add    ecx,DWORD PTR ds:0xc002f180
c001383b:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013841:	89 cb                	mov    ebx,ecx
c0013843:	c1 fb 1f             	sar    ebx,0x1f
c0013846:	01 c8                	add    eax,ecx
c0013848:	11 da                	adc    edx,ebx
c001384a:	83 c4 10             	add    esp,0x10
c001384d:	31 c9                	xor    ecx,ecx
c001384f:	80 3d 7d f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f17d,0x0
c0013856:	74 05                	je     c001385d <Clock::timeInSecondsLocal()+0x3d>
c0013858:	b9 08 07 00 00       	mov    ecx,0x708
c001385d:	31 db                	xor    ebx,ebx
c001385f:	01 c8                	add    eax,ecx
c0013861:	11 da                	adc    edx,ebx
c0013863:	83 c4 08             	add    esp,0x8
c0013866:	5b                   	pop    ebx
c0013867:	c3                   	ret    

c0013868 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013868:	57                   	push   edi
c0013869:	56                   	push   esi
c001386a:	53                   	push   ebx
c001386b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001386f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013873:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013875:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013879:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001387c:	0f b6 05 7c f1 02 c0 	movzx  eax,BYTE PTR ds:0xc002f17c
c0013883:	03 05 80 f1 02 c0    	add    eax,DWORD PTR ds:0xc002f180
c0013889:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001388f:	99                   	cdq    
c0013890:	29 c6                	sub    esi,eax
c0013892:	19 d7                	sbb    edi,edx
c0013894:	89 f0                	mov    eax,esi
c0013896:	89 fa                	mov    edx,edi
c0013898:	31 f6                	xor    esi,esi
c001389a:	80 3d 7d f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f17d,0x0
c00138a1:	74 05                	je     c00138a8 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00138a3:	be 08 07 00 00       	mov    esi,0x708
c00138a8:	31 ff                	xor    edi,edi
c00138aa:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00138ae:	29 f0                	sub    eax,esi
c00138b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138b4:	19 fa                	sbb    edx,edi
c00138b6:	89 d8                	mov    eax,ebx
c00138b8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00138bc:	5b                   	pop    ebx
c00138bd:	5e                   	pop    esi
c00138be:	5f                   	pop    edi
c00138bf:	ff e0                	jmp    eax

c00138c1 <datetimeToSeconds(datetime_t)>:
c00138c1:	55                   	push   ebp
c00138c2:	57                   	push   edi
c00138c3:	56                   	push   esi
c00138c4:	53                   	push   ebx
c00138c5:	83 ec 14             	sub    esp,0x14
c00138c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138cc:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00138d0:	89 d3                	mov    ebx,edx
c00138d2:	0f b6 c6             	movzx  eax,dh
c00138d5:	c1 eb 10             	shr    ebx,0x10
c00138d8:	48                   	dec    eax
c00138d9:	66 81 eb 6c 07       	sub    bx,0x76c
c00138de:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00138e2:	0f b6 f5             	movzx  esi,ch
c00138e5:	89 cf                	mov    edi,ecx
c00138e7:	6b f6 3c             	imul   esi,esi,0x3c
c00138ea:	c1 ef 10             	shr    edi,0x10
c00138ed:	0f b6 c9             	movzx  ecx,cl
c00138f0:	89 f8                	mov    eax,edi
c00138f2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00138f8:	0f b6 f8             	movzx  edi,al
c00138fb:	0f b6 d2             	movzx  edx,dl
c00138fe:	01 fe                	add    esi,edi
c0013900:	01 f1                	add    ecx,esi
c0013902:	0f b7 f3             	movzx  esi,bx
c0013905:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013909:	c1 f9 1f             	sar    ecx,0x1f
c001390c:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013911:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013915:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001391a:	8b 0c 8d e0 b4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4b20]
c0013921:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013925:	76 29                	jbe    c0013950 <datetimeToSeconds(datetime_t)+0x8f>
c0013927:	f6 c3 03             	test   bl,0x3
c001392a:	75 24                	jne    c0013950 <datetimeToSeconds(datetime_t)+0x8f>
c001392c:	31 d2                	xor    edx,edx
c001392e:	bf 64 00 00 00       	mov    edi,0x64
c0013933:	89 d8                	mov    eax,ebx
c0013935:	66 f7 f7             	div    di
c0013938:	66 85 d2             	test   dx,dx
c001393b:	75 12                	jne    c001394f <datetimeToSeconds(datetime_t)+0x8e>
c001393d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013943:	bf 90 01 00 00       	mov    edi,0x190
c0013948:	99                   	cdq    
c0013949:	f7 ff                	idiv   edi
c001394b:	85 d2                	test   edx,edx
c001394d:	75 01                	jne    c0013950 <datetimeToSeconds(datetime_t)+0x8f>
c001394f:	41                   	inc    ecx
c0013950:	66 83 fb 46          	cmp    bx,0x46
c0013954:	76 45                	jbe    c001399b <datetimeToSeconds(datetime_t)+0xda>
c0013956:	bb 46 00 00 00       	mov    ebx,0x46
c001395b:	bf 64 00 00 00       	mov    edi,0x64
c0013960:	bd 90 01 00 00       	mov    ebp,0x190
c0013965:	b8 6d 01 00 00       	mov    eax,0x16d
c001396a:	f6 c3 03             	test   bl,0x3
c001396d:	75 23                	jne    c0013992 <datetimeToSeconds(datetime_t)+0xd1>
c001396f:	89 d8                	mov    eax,ebx
c0013971:	99                   	cdq    
c0013972:	f7 ff                	idiv   edi
c0013974:	b8 6e 01 00 00       	mov    eax,0x16e
c0013979:	85 d2                	test   edx,edx
c001397b:	75 15                	jne    c0013992 <datetimeToSeconds(datetime_t)+0xd1>
c001397d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013983:	99                   	cdq    
c0013984:	f7 fd                	idiv   ebp
c0013986:	83 fa 01             	cmp    edx,0x1
c0013989:	19 c0                	sbb    eax,eax
c001398b:	f7 d0                	not    eax
c001398d:	05 6e 01 00 00       	add    eax,0x16e
c0013992:	01 c1                	add    ecx,eax
c0013994:	43                   	inc    ebx
c0013995:	39 f3                	cmp    ebx,esi
c0013997:	7c cc                	jl     c0013965 <datetimeToSeconds(datetime_t)+0xa4>
c0013999:	eb 35                	jmp    c00139d0 <datetimeToSeconds(datetime_t)+0x10f>
c001399b:	74 33                	je     c00139d0 <datetimeToSeconds(datetime_t)+0x10f>
c001399d:	b8 45 00 00 00       	mov    eax,0x45
c00139a2:	89 c2                	mov    edx,eax
c00139a4:	83 e2 03             	and    edx,0x3
c00139a7:	39 f0                	cmp    eax,esi
c00139a9:	7e 0f                	jle    c00139ba <datetimeToSeconds(datetime_t)+0xf9>
c00139ab:	83 fa 01             	cmp    edx,0x1
c00139ae:	19 d2                	sbb    edx,edx
c00139b0:	48                   	dec    eax
c00139b1:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00139b8:	eb e8                	jmp    c00139a2 <datetimeToSeconds(datetime_t)+0xe1>
c00139ba:	b8 6d 01 00 00       	mov    eax,0x16d
c00139bf:	85 d2                	test   edx,edx
c00139c1:	75 0b                	jne    c00139ce <datetimeToSeconds(datetime_t)+0x10d>
c00139c3:	66 83 fb 01          	cmp    bx,0x1
c00139c7:	19 c0                	sbb    eax,eax
c00139c9:	05 6e 01 00 00       	add    eax,0x16e
c00139ce:	29 c1                	sub    ecx,eax
c00139d0:	b8 80 51 01 00       	mov    eax,0x15180
c00139d5:	f7 e9                	imul   ecx
c00139d7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00139db:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00139df:	83 c4 14             	add    esp,0x14
c00139e2:	5b                   	pop    ebx
c00139e3:	5e                   	pop    esi
c00139e4:	5f                   	pop    edi
c00139e5:	5d                   	pop    ebp
c00139e6:	c3                   	ret    
c00139e7:	90                   	nop

c00139e8 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00139e8:	57                   	push   edi
c00139e9:	56                   	push   esi
c00139ea:	53                   	push   ebx
c00139eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00139ef:	8b 06                	mov    eax,DWORD PTR [esi]
c00139f1:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00139f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139fc:	e8 c0 fe ff ff       	call   c00138c1 <datetimeToSeconds(datetime_t)>
c0013a01:	59                   	pop    ecx
c0013a02:	0f b6 0d 7c f1 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f17c
c0013a09:	5b                   	pop    ebx
c0013a0a:	03 0d 80 f1 02 c0    	add    ecx,DWORD PTR ds:0xc002f180
c0013a10:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013a16:	89 cb                	mov    ebx,ecx
c0013a18:	c1 fb 1f             	sar    ebx,0x1f
c0013a1b:	29 c8                	sub    eax,ecx
c0013a1d:	19 da                	sbb    edx,ebx
c0013a1f:	31 c9                	xor    ecx,ecx
c0013a21:	80 3d 7d f1 02 c0 00 	cmp    BYTE PTR ds:0xc002f17d,0x0
c0013a28:	74 05                	je     c0013a2f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013a2a:	b9 08 07 00 00       	mov    ecx,0x708
c0013a2f:	31 db                	xor    ebx,ebx
c0013a31:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013a35:	29 c8                	sub    eax,ecx
c0013a37:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a3b:	19 da                	sbb    edx,ebx
c0013a3d:	89 f8                	mov    eax,edi
c0013a3f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013a43:	5b                   	pop    ebx
c0013a44:	5e                   	pop    esi
c0013a45:	5f                   	pop    edi
c0013a46:	ff e0                	jmp    eax

c0013a48 <secondsToDatetime(unsigned long long)>:
c0013a48:	55                   	push   ebp
c0013a49:	57                   	push   edi
c0013a4a:	56                   	push   esi
c0013a4b:	53                   	push   ebx
c0013a4c:	83 ec 1c             	sub    esp,0x1c
c0013a4f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013a53:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013a57:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013a5b:	6a 00                	push   0x0
c0013a5d:	68 80 51 01 00       	push   0x15180
c0013a62:	55                   	push   ebp
c0013a63:	57                   	push   edi
c0013a64:	e8 8b 37 01 00       	call   c00271f4 <__udivdi3>
c0013a69:	83 c4 10             	add    esp,0x10
c0013a6c:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013a72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a76:	6a 00                	push   0x0
c0013a78:	68 80 51 01 00       	push   0x15180
c0013a7d:	55                   	push   ebp
c0013a7e:	57                   	push   edi
c0013a7f:	bf 10 0e 00 00       	mov    edi,0xe10
c0013a84:	e8 6b 38 01 00       	call   c00272f4 <__umoddi3>
c0013a89:	83 c4 10             	add    esp,0x10
c0013a8c:	99                   	cdq    
c0013a8d:	f7 ff                	idiv   edi
c0013a8f:	bf 3c 00 00 00       	mov    edi,0x3c
c0013a94:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013a97:	89 d0                	mov    eax,edx
c0013a99:	99                   	cdq    
c0013a9a:	f7 ff                	idiv   edi
c0013a9c:	85 db                	test   ebx,ebx
c0013a9e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013aa1:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013aa4:	79 11                	jns    c0013ab7 <secondsToDatetime(unsigned long long)+0x6f>
c0013aa6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013aaa:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013ab0:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013ab5:	eb 07                	jmp    c0013abe <secondsToDatetime(unsigned long long)+0x76>
c0013ab7:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013abc:	89 d8                	mov    eax,ebx
c0013abe:	bf b4 05 00 00       	mov    edi,0x5b4
c0013ac3:	99                   	cdq    
c0013ac4:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013ac9:	f7 f9                	idiv   ecx
c0013acb:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013ad0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013ad4:	31 d2                	xor    edx,edx
c0013ad6:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013ade:	01 c3                	add    ebx,eax
c0013ae0:	89 d8                	mov    eax,ebx
c0013ae2:	f7 f1                	div    ecx
c0013ae4:	31 d2                	xor    edx,edx
c0013ae6:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013ae9:	89 d8                	mov    eax,ebx
c0013aeb:	f7 f7                	div    edi
c0013aed:	31 d2                	xor    edx,edx
c0013aef:	29 c1                	sub    ecx,eax
c0013af1:	89 d8                	mov    eax,ebx
c0013af3:	f7 f5                	div    ebp
c0013af5:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013afa:	29 c1                	sub    ecx,eax
c0013afc:	31 d2                	xor    edx,edx
c0013afe:	89 c8                	mov    eax,ecx
c0013b00:	f7 f5                	div    ebp
c0013b02:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013b07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b0b:	31 d2                	xor    edx,edx
c0013b0d:	89 c8                	mov    eax,ecx
c0013b0f:	f7 f5                	div    ebp
c0013b11:	31 d2                	xor    edx,edx
c0013b13:	01 c3                	add    ebx,eax
c0013b15:	89 c8                	mov    eax,ecx
c0013b17:	f7 f7                	div    edi
c0013b19:	bf 99 00 00 00       	mov    edi,0x99
c0013b1e:	29 c3                	sub    ebx,eax
c0013b20:	31 d2                	xor    edx,edx
c0013b22:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013b2a:	29 c3                	sub    ebx,eax
c0013b2c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013b2f:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013b32:	bb 05 00 00 00       	mov    ebx,0x5
c0013b37:	83 c1 02             	add    ecx,0x2
c0013b3a:	89 c8                	mov    eax,ecx
c0013b3c:	f7 f7                	div    edi
c0013b3e:	31 d2                	xor    edx,edx
c0013b40:	89 c7                	mov    edi,eax
c0013b42:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013b48:	83 c0 02             	add    eax,0x2
c0013b4b:	f7 f3                	div    ebx
c0013b4d:	89 eb                	mov    ebx,ebp
c0013b4f:	29 c3                	sub    ebx,eax
c0013b51:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013b57:	88 1e                	mov    BYTE PTR [esi],bl
c0013b59:	19 c0                	sbb    eax,eax
c0013b5b:	31 d2                	xor    edx,edx
c0013b5d:	83 e0 0c             	and    eax,0xc
c0013b60:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013b64:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013b6c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013b70:	83 f9 01             	cmp    ecx,0x1
c0013b73:	0f 96 c2             	setbe  dl
c0013b76:	41                   	inc    ecx
c0013b77:	01 d0                	add    eax,edx
c0013b79:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013b7c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013b80:	83 c4 1c             	add    esp,0x1c
c0013b83:	89 f0                	mov    eax,esi
c0013b85:	5b                   	pop    ebx
c0013b86:	5e                   	pop    esi
c0013b87:	5f                   	pop    edi
c0013b88:	5d                   	pop    ebp
c0013b89:	c2 04 00             	ret    0x4

c0013b8c <Clock::timeInDatetimeLocal()>:
c0013b8c:	53                   	push   ebx
c0013b8d:	83 ec 14             	sub    esp,0x14
c0013b90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013b98:	e8 83 fc ff ff       	call   c0013820 <Clock::timeInSecondsLocal()>
c0013b9d:	83 c4 0c             	add    esp,0xc
c0013ba0:	52                   	push   edx
c0013ba1:	50                   	push   eax
c0013ba2:	53                   	push   ebx
c0013ba3:	e8 a0 fe ff ff       	call   c0013a48 <secondsToDatetime(unsigned long long)>
c0013ba8:	89 d8                	mov    eax,ebx
c0013baa:	83 c4 14             	add    esp,0x14
c0013bad:	5b                   	pop    ebx
c0013bae:	c2 04 00             	ret    0x4
c0013bb1:	90                   	nop

c0013bb2 <Device::hibernate()>:
c0013bb2:	c3                   	ret    
c0013bb3:	90                   	nop

c0013bb4 <Device::wake()>:
c0013bb4:	c3                   	ret    
c0013bb5:	90                   	nop

c0013bb6 <Device::detect()>:
c0013bb6:	c3                   	ret    
c0013bb7:	90                   	nop

c0013bb8 <Device::disableLegacy()>:
c0013bb8:	c3                   	ret    
c0013bb9:	90                   	nop

c0013bba <Device::powerSaving(PowerSavingLevel)>:
c0013bba:	c3                   	ret    
c0013bbb:	90                   	nop

c0013bbc <DriverlessDevice::close(int, int, void*)>:
c0013bbc:	31 c0                	xor    eax,eax
c0013bbe:	c3                   	ret    
c0013bbf:	90                   	nop

c0013bc0 <DriverlessDevice::detect()>:
c0013bc0:	c3                   	ret    
c0013bc1:	90                   	nop

c0013bc2 <DriverlessDevice::open(int, int, void*)>:
c0013bc2:	83 ec 18             	sub    esp,0x18
c0013bc5:	68 10 b5 02 c0       	push   0xc002b510
c0013bca:	e8 36 67 00 00       	call   c001a305 <Krnl::panic(char const*)>
c0013bcf:	83 c8 ff             	or     eax,0xffffffff
c0013bd2:	83 c4 1c             	add    esp,0x1c
c0013bd5:	c3                   	ret    

c0013bd6 <Device::~Device()>:
c0013bd6:	ba 70 b5 02 c0       	mov    edx,0xc002b570
c0013bdb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013bdf:	89 10                	mov    DWORD PTR [eax],edx
c0013be1:	90                   	nop
c0013be2:	c3                   	ret    
c0013be3:	90                   	nop

c0013be4 <Device::~Device()>:
c0013be4:	83 ec 0c             	sub    esp,0xc
c0013be7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013beb:	e8 e6 ff ff ff       	call   c0013bd6 <Device::~Device()>
c0013bf0:	83 c4 04             	add    esp,0x4
c0013bf3:	83 ec 08             	sub    esp,0x8
c0013bf6:	68 58 01 00 00       	push   0x158
c0013bfb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bff:	e8 eb eb ff ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0013c04:	83 c4 10             	add    esp,0x10
c0013c07:	83 c4 0c             	add    esp,0xc
c0013c0a:	c3                   	ret    
c0013c0b:	90                   	nop

c0013c0c <Device::findAndLoadDriver()>:
c0013c0c:	c7 44 24 04 2e b5 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b52e
c0013c14:	e9 b6 ec ff ff       	jmp    c00128cf <Dbg::kprintf(char const*, ...)>
c0013c19:	90                   	nop

c0013c1a <Device::preOpenPCI(PCIDeviceInfo)>:
c0013c1a:	57                   	push   edi
c0013c1b:	b9 09 00 00 00       	mov    ecx,0x9
c0013c20:	56                   	push   esi
c0013c21:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013c25:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013c29:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013c33:	81 c7 18 01 00 00    	add    edi,0x118
c0013c39:	fc                   	cld    
c0013c3a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013c3c:	5e                   	pop    esi
c0013c3d:	5f                   	pop    edi
c0013c3e:	c3                   	ret    
c0013c3f:	90                   	nop

c0013c40 <Device::preOpenACPI(void*, char*, char*)>:
c0013c40:	57                   	push   edi
c0013c41:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013c46:	56                   	push   esi
c0013c47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c4f:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013c59:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013c5f:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c6b:	b9 0e 00 00 00       	mov    ecx,0xe
c0013c70:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013c76:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013c7a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c7c:	5e                   	pop    esi
c0013c7d:	5f                   	pop    edi
c0013c7e:	c3                   	ret    
c0013c7f:	90                   	nop

c0013c80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013c80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c84:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013c89:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013c90:	75 0b                	jne    c0013c9d <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013c92:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c94:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c98:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013c9b:	eb 1e                	jmp    c0013cbb <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013c9d:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0013ca2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013ca8:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013cae:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013cb0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cb4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cb8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013cbb:	ff e0                	jmp    eax
c0013cbd:	90                   	nop

c0013cbe <Device::getParent()>:
c0013cbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cc2:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013cc8:	c3                   	ret    
c0013cc9:	90                   	nop

c0013cca <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013cca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013cce:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013cd3:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013cda:	75 0b                	jne    c0013ce7 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013cdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0013cde:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ce2:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013ce5:	eb 1e                	jmp    c0013d05 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013ce7:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0013cec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013cf2:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013cf8:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013cfa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013cfe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013d02:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013d05:	ff e0                	jmp    eax
c0013d07:	90                   	nop

c0013d08 <Device::addChild(Device*)>:
c0013d08:	53                   	push   ebx
c0013d09:	83 ec 08             	sub    esp,0x8
c0013d0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d14:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013d1a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013d20:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013d22:	85 d2                	test   edx,edx
c0013d24:	74 04                	je     c0013d2a <Device::addChild(Device*)+0x22>
c0013d26:	89 d3                	mov    ebx,edx
c0013d28:	eb f6                	jmp    c0013d20 <Device::addChild(Device*)+0x18>
c0013d2a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013d2d:	83 ec 0c             	sub    esp,0xc
c0013d30:	6a 08                	push   0x8
c0013d32:	e8 55 bb ff ff       	call   c000f88c <malloc>
c0013d37:	89 03                	mov    DWORD PTR [ebx],eax
c0013d39:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d3f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d46:	83 c4 18             	add    esp,0x18
c0013d49:	5b                   	pop    ebx
c0013d4a:	c3                   	ret    
c0013d4b:	90                   	nop

c0013d4c <Device::removeAllChildren()>:
c0013d4c:	56                   	push   esi
c0013d4d:	53                   	push   ebx
c0013d4e:	52                   	push   edx
c0013d4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d53:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013d59:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d5c:	74 17                	je     c0013d75 <Device::removeAllChildren()+0x29>
c0013d5e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013d61:	85 c0                	test   eax,eax
c0013d63:	74 0c                	je     c0013d71 <Device::removeAllChildren()+0x25>
c0013d65:	83 ec 0c             	sub    esp,0xc
c0013d68:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d6a:	50                   	push   eax
c0013d6b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013d6e:	83 c4 10             	add    esp,0x10
c0013d71:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d73:	eb e4                	jmp    c0013d59 <Device::removeAllChildren()+0xd>
c0013d75:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d7b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d81:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d87:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d8e:	58                   	pop    eax
c0013d8f:	5b                   	pop    ebx
c0013d90:	5e                   	pop    esi
c0013d91:	c3                   	ret    

c0013d92 <Device::hibernateAll()>:
c0013d92:	53                   	push   ebx
c0013d93:	83 ec 14             	sub    esp,0x14
c0013d96:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d9c:	53                   	push   ebx
c0013d9d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013da0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013da6:	83 c4 10             	add    esp,0x10
c0013da9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013dac:	74 0f                	je     c0013dbd <Device::hibernateAll()+0x2b>
c0013dae:	83 ec 0c             	sub    esp,0xc
c0013db1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013db4:	e8 d9 ff ff ff       	call   c0013d92 <Device::hibernateAll()>
c0013db9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dbb:	eb e9                	jmp    c0013da6 <Device::hibernateAll()+0x14>
c0013dbd:	83 c4 08             	add    esp,0x8
c0013dc0:	5b                   	pop    ebx
c0013dc1:	c3                   	ret    

c0013dc2 <Device::wakeAll()>:
c0013dc2:	53                   	push   ebx
c0013dc3:	83 ec 14             	sub    esp,0x14
c0013dc6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dca:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dcc:	53                   	push   ebx
c0013dcd:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013dd0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013dd6:	83 c4 10             	add    esp,0x10
c0013dd9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ddc:	74 0f                	je     c0013ded <Device::wakeAll()+0x2b>
c0013dde:	83 ec 0c             	sub    esp,0xc
c0013de1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013de4:	e8 d9 ff ff ff       	call   c0013dc2 <Device::wakeAll()>
c0013de9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013deb:	eb e9                	jmp    c0013dd6 <Device::wakeAll()+0x14>
c0013ded:	83 c4 08             	add    esp,0x8
c0013df0:	5b                   	pop    ebx
c0013df1:	c3                   	ret    

c0013df2 <Device::detectAll()>:
c0013df2:	53                   	push   ebx
c0013df3:	83 ec 14             	sub    esp,0x14
c0013df6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dfc:	53                   	push   ebx
c0013dfd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013e00:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e06:	83 c4 10             	add    esp,0x10
c0013e09:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e0c:	74 0f                	je     c0013e1d <Device::detectAll()+0x2b>
c0013e0e:	83 ec 0c             	sub    esp,0xc
c0013e11:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e14:	e8 d9 ff ff ff       	call   c0013df2 <Device::detectAll()>
c0013e19:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e1b:	eb e9                	jmp    c0013e06 <Device::detectAll()+0x14>
c0013e1d:	83 c4 08             	add    esp,0x8
c0013e20:	5b                   	pop    ebx
c0013e21:	c3                   	ret    

c0013e22 <Device::disableLegacyAll()>:
c0013e22:	53                   	push   ebx
c0013e23:	83 ec 14             	sub    esp,0x14
c0013e26:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e2c:	53                   	push   ebx
c0013e2d:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013e30:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e36:	83 c4 10             	add    esp,0x10
c0013e39:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e3c:	74 0f                	je     c0013e4d <Device::disableLegacyAll()+0x2b>
c0013e3e:	83 ec 0c             	sub    esp,0xc
c0013e41:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e44:	e8 d9 ff ff ff       	call   c0013e22 <Device::disableLegacyAll()>
c0013e49:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e4b:	eb e9                	jmp    c0013e36 <Device::disableLegacyAll()+0x14>
c0013e4d:	83 c4 08             	add    esp,0x8
c0013e50:	5b                   	pop    ebx
c0013e51:	c3                   	ret    

c0013e52 <Device::loadDriversForAll()>:
c0013e52:	53                   	push   ebx
c0013e53:	83 ec 08             	sub    esp,0x8
c0013e56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e5a:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013e61:	75 0c                	jne    c0013e6f <Device::loadDriversForAll()+0x1d>
c0013e63:	83 ec 0c             	sub    esp,0xc
c0013e66:	53                   	push   ebx
c0013e67:	e8 a0 fd ff ff       	call   c0013c0c <Device::findAndLoadDriver()>
c0013e6c:	83 c4 10             	add    esp,0x10
c0013e6f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e75:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e78:	74 12                	je     c0013e8c <Device::loadDriversForAll()+0x3a>
c0013e7a:	83 ec 0c             	sub    esp,0xc
c0013e7d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e80:	e8 cd ff ff ff       	call   c0013e52 <Device::loadDriversForAll()>
c0013e85:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e87:	83 c4 10             	add    esp,0x10
c0013e8a:	eb e9                	jmp    c0013e75 <Device::loadDriversForAll()+0x23>
c0013e8c:	83 c4 08             	add    esp,0x8
c0013e8f:	5b                   	pop    ebx
c0013e90:	c3                   	ret    
c0013e91:	90                   	nop

c0013e92 <Device::closeAll()>:
c0013e92:	53                   	push   ebx
c0013e93:	83 ec 08             	sub    esp,0x8
c0013e96:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e9c:	6a 00                	push   0x0
c0013e9e:	6a 00                	push   0x0
c0013ea0:	6a 00                	push   0x0
c0013ea2:	53                   	push   ebx
c0013ea3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ea6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013eac:	83 c4 10             	add    esp,0x10
c0013eaf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013eb2:	74 0f                	je     c0013ec3 <Device::closeAll()+0x31>
c0013eb4:	83 ec 0c             	sub    esp,0xc
c0013eb7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013eba:	e8 d3 ff ff ff       	call   c0013e92 <Device::closeAll()>
c0013ebf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ec1:	eb e9                	jmp    c0013eac <Device::closeAll()+0x1a>
c0013ec3:	83 c4 08             	add    esp,0x8
c0013ec6:	5b                   	pop    ebx
c0013ec7:	c3                   	ret    

c0013ec8 <Device::powerSavingAll(PowerSavingLevel)>:
c0013ec8:	56                   	push   esi
c0013ec9:	53                   	push   ebx
c0013eca:	83 ec 0c             	sub    esp,0xc
c0013ecd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ed1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013ed5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ed7:	56                   	push   esi
c0013ed8:	53                   	push   ebx
c0013ed9:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013edc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ee2:	83 c4 10             	add    esp,0x10
c0013ee5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ee8:	74 0f                	je     c0013ef9 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013eea:	52                   	push   edx
c0013eeb:	52                   	push   edx
c0013eec:	56                   	push   esi
c0013eed:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013ef0:	e8 d3 ff ff ff       	call   c0013ec8 <Device::powerSavingAll(PowerSavingLevel)>
c0013ef5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ef7:	eb e9                	jmp    c0013ee2 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013ef9:	58                   	pop    eax
c0013efa:	5b                   	pop    ebx
c0013efb:	5e                   	pop    esi
c0013efc:	c3                   	ret    
c0013efd:	90                   	nop

c0013efe <Device::setName(char const*)>:
c0013efe:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013f06:	e9 01 c9 fe ff       	jmp    c000080c <strcpy>
c0013f0b:	90                   	nop

c0013f0c <Device::Device(char const*)>:
c0013f0c:	83 ec 1c             	sub    esp,0x1c
c0013f0f:	ba 70 b5 02 c0       	mov    edx,0xc002b570
c0013f14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f18:	89 10                	mov    DWORD PTR [eax],edx
c0013f1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f1e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013f28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f2c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013f36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f3a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013f44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f48:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f52:	83 ec 08             	sub    esp,0x8
c0013f55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f5d:	e8 9c ff ff ff       	call   c0013efe <Device::setName(char const*)>
c0013f62:	83 c4 10             	add    esp,0x10
c0013f65:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013f6d:	83 ec 0c             	sub    esp,0xc
c0013f70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f74:	e8 13 b9 ff ff       	call   c000f88c <malloc>
c0013f79:	83 c4 10             	add    esp,0x10
c0013f7c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f82:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f89:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013f8d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f97:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f9d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013fa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fa7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013fad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fb8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013fbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc3:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013fca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fce:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013fd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fdc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013fe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fea:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013ff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ff8:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0014002:	90                   	nop
c0014003:	83 c4 1c             	add    esp,0x1c
c0014006:	c3                   	ret    
c0014007:	90                   	nop

c0014008 <Device::getName()>:
c0014008:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001400c:	05 d0 00 00 00       	add    eax,0xd0
c0014011:	c3                   	ret    

c0014012 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014012:	83 ec 0c             	sub    esp,0xc
c0014015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014019:	83 ec 08             	sub    esp,0x8
c001401c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014020:	50                   	push   eax
c0014021:	e8 e6 fe ff ff       	call   c0013f0c <Device::Device(char const*)>
c0014026:	83 c4 10             	add    esp,0x10
c0014029:	ba 9c b5 02 c0       	mov    edx,0xc002b59c
c001402e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014032:	89 10                	mov    DWORD PTR [eax],edx
c0014034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014038:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014042:	90                   	nop
c0014043:	83 c4 0c             	add    esp,0xc
c0014046:	c3                   	ret    
c0014047:	90                   	nop

c0014048 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014048:	57                   	push   edi
c0014049:	56                   	push   esi
c001404a:	53                   	push   ebx
c001404b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001404f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014053:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014057:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001405d:	75 0c                	jne    c001406b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001405f:	52                   	push   edx
c0014060:	52                   	push   edx
c0014061:	53                   	push   ebx
c0014062:	56                   	push   esi
c0014063:	e8 de 50 01 00       	call   c0029146 <LinkedList<Device>::addElement(Device*)>
c0014068:	83 c4 10             	add    esp,0x10
c001406b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014071:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014074:	74 12                	je     c0014088 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014076:	50                   	push   eax
c0014077:	57                   	push   edi
c0014078:	56                   	push   esi
c0014079:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001407c:	e8 c7 ff ff ff       	call   c0014048 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014081:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014083:	83 c4 10             	add    esp,0x10
c0014086:	eb e9                	jmp    c0014071 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014088:	5b                   	pop    ebx
c0014089:	5e                   	pop    esi
c001408a:	5f                   	pop    edi
c001408b:	c3                   	ret    

c001408c <getDevicesOfType(DeviceType)>:
c001408c:	53                   	push   ebx
c001408d:	83 ec 14             	sub    esp,0x14
c0014090:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014094:	53                   	push   ebx
c0014095:	e8 88 51 01 00       	call   c0029222 <LinkedList<Device>::LinkedList()>
c001409a:	83 c4 0c             	add    esp,0xc
c001409d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00140a1:	53                   	push   ebx
c00140a2:	ff 35 08 f0 02 c0    	push   DWORD PTR ds:0xc002f008
c00140a8:	e8 9b ff ff ff       	call   c0014048 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00140ad:	89 d8                	mov    eax,ebx
c00140af:	83 c4 18             	add    esp,0x18
c00140b2:	5b                   	pop    ebx
c00140b3:	c2 04 00             	ret    0x4

c00140b6 <HardDiskController::HardDiskController(char const*)>:
c00140b6:	83 ec 0c             	sub    esp,0xc
c00140b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140bd:	83 ec 08             	sub    esp,0x8
c00140c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140c4:	50                   	push   eax
c00140c5:	e8 42 fe ff ff       	call   c0013f0c <Device::Device(char const*)>
c00140ca:	83 c4 10             	add    esp,0x10
c00140cd:	ba c8 b5 02 c0       	mov    edx,0xc002b5c8
c00140d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140d6:	89 10                	mov    DWORD PTR [eax],edx
c00140d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140dc:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00140e6:	90                   	nop
c00140e7:	83 c4 0c             	add    esp,0xc
c00140ea:	c3                   	ret    
c00140eb:	90                   	nop

c00140ec <HardDiskController::~HardDiskController()>:
c00140ec:	83 ec 0c             	sub    esp,0xc
c00140ef:	ba c8 b5 02 c0       	mov    edx,0xc002b5c8
c00140f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140f8:	89 10                	mov    DWORD PTR [eax],edx
c00140fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140fe:	83 ec 0c             	sub    esp,0xc
c0014101:	50                   	push   eax
c0014102:	e8 cf fa ff ff       	call   c0013bd6 <Device::~Device()>
c0014107:	83 c4 10             	add    esp,0x10
c001410a:	90                   	nop
c001410b:	83 c4 0c             	add    esp,0xc
c001410e:	c3                   	ret    
c001410f:	90                   	nop

c0014110 <HardDiskController::~HardDiskController()>:
c0014110:	83 ec 0c             	sub    esp,0xc
c0014113:	83 ec 0c             	sub    esp,0xc
c0014116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001411a:	e8 cd ff ff ff       	call   c00140ec <HardDiskController::~HardDiskController()>
c001411f:	83 c4 10             	add    esp,0x10
c0014122:	83 ec 08             	sub    esp,0x8
c0014125:	68 58 01 00 00       	push   0x158
c001412a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001412e:	e8 bc e6 ff ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0014133:	83 c4 10             	add    esp,0x10
c0014136:	83 c4 0c             	add    esp,0xc
c0014139:	c3                   	ret    

c001413a <PhysicalDisk::eject()>:
c001413a:	83 ec 18             	sub    esp,0x18
c001413d:	68 ec b5 02 c0       	push   0xc002b5ec
c0014142:	e8 88 e7 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0014147:	83 c8 ff             	or     eax,0xffffffff
c001414a:	83 c4 1c             	add    esp,0x1c
c001414d:	c3                   	ret    

c001414e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001414e:	83 ec 0c             	sub    esp,0xc
c0014151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014155:	83 ec 08             	sub    esp,0x8
c0014158:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001415c:	50                   	push   eax
c001415d:	e8 aa fd ff ff       	call   c0013f0c <Device::Device(char const*)>
c0014162:	83 c4 10             	add    esp,0x10
c0014165:	ba 1c b6 02 c0       	mov    edx,0xc002b61c
c001416a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001416e:	89 10                	mov    DWORD PTR [eax],edx
c0014170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014174:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001417b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001417f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001418a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014194:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014198:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001419c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00141a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141a6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00141b0:	90                   	nop
c00141b1:	83 c4 0c             	add    esp,0xc
c00141b4:	c3                   	ret    
c00141b5:	90                   	nop

c00141b6 <PhysicalDisk::startCache()>:
c00141b6:	56                   	push   esi
c00141b7:	53                   	push   ebx
c00141b8:	83 ec 10             	sub    esp,0x10
c00141bb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141bf:	6a 44                	push   0x44
c00141c1:	e8 c6 b6 ff ff       	call   c000f88c <malloc>
c00141c6:	89 c6                	mov    esi,eax
c00141c8:	58                   	pop    eax
c00141c9:	5a                   	pop    edx
c00141ca:	53                   	push   ebx
c00141cb:	56                   	push   esi
c00141cc:	e8 a9 28 00 00       	call   c0016a7a <VCache::VCache(PhysicalDisk*)>
c00141d1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00141d7:	83 c4 14             	add    esp,0x14
c00141da:	5b                   	pop    ebx
c00141db:	5e                   	pop    esi
c00141dc:	c3                   	ret    
c00141dd:	90                   	nop

c00141de <PhysicalDisk::~PhysicalDisk()>:
c00141de:	83 ec 0c             	sub    esp,0xc
c00141e1:	ba 1c b6 02 c0       	mov    edx,0xc002b61c
c00141e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141ea:	89 10                	mov    DWORD PTR [eax],edx
c00141ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141f0:	83 ec 0c             	sub    esp,0xc
c00141f3:	50                   	push   eax
c00141f4:	e8 dd f9 ff ff       	call   c0013bd6 <Device::~Device()>
c00141f9:	83 c4 10             	add    esp,0x10
c00141fc:	90                   	nop
c00141fd:	83 c4 0c             	add    esp,0xc
c0014200:	c3                   	ret    
c0014201:	90                   	nop

c0014202 <PhysicalDisk::~PhysicalDisk()>:
c0014202:	83 ec 0c             	sub    esp,0xc
c0014205:	83 ec 0c             	sub    esp,0xc
c0014208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001420c:	e8 cd ff ff ff       	call   c00141de <PhysicalDisk::~PhysicalDisk()>
c0014211:	83 c4 10             	add    esp,0x10
c0014214:	83 ec 08             	sub    esp,0x8
c0014217:	68 6c 01 00 00       	push   0x16c
c001421c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014220:	e8 ca e5 ff ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0014225:	83 c4 10             	add    esp,0x10
c0014228:	83 c4 0c             	add    esp,0xc
c001422b:	c3                   	ret    

c001422c <FPU::FPU(char const*)>:
c001422c:	83 ec 0c             	sub    esp,0xc
c001422f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014233:	83 ec 08             	sub    esp,0x8
c0014236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001423a:	50                   	push   eax
c001423b:	e8 cc fc ff ff       	call   c0013f0c <Device::Device(char const*)>
c0014240:	83 c4 10             	add    esp,0x10
c0014243:	ba 60 b6 02 c0       	mov    edx,0xc002b660
c0014248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001424c:	89 10                	mov    DWORD PTR [eax],edx
c001424e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014252:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001425c:	90                   	nop
c001425d:	83 c4 0c             	add    esp,0xc
c0014260:	c3                   	ret    
c0014261:	90                   	nop

c0014262 <FPU::~FPU()>:
c0014262:	83 ec 0c             	sub    esp,0xc
c0014265:	ba 60 b6 02 c0       	mov    edx,0xc002b660
c001426a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001426e:	89 10                	mov    DWORD PTR [eax],edx
c0014270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014274:	83 ec 0c             	sub    esp,0xc
c0014277:	50                   	push   eax
c0014278:	e8 59 f9 ff ff       	call   c0013bd6 <Device::~Device()>
c001427d:	83 c4 10             	add    esp,0x10
c0014280:	90                   	nop
c0014281:	83 c4 0c             	add    esp,0xc
c0014284:	c3                   	ret    
c0014285:	90                   	nop

c0014286 <FPU::~FPU()>:
c0014286:	83 ec 0c             	sub    esp,0xc
c0014289:	83 ec 0c             	sub    esp,0xc
c001428c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014290:	e8 cd ff ff ff       	call   c0014262 <FPU::~FPU()>
c0014295:	83 c4 10             	add    esp,0x10
c0014298:	83 ec 08             	sub    esp,0x8
c001429b:	68 58 01 00 00       	push   0x158
c00142a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00142a4:	e8 46 e5 ff ff       	call   c00127ef <operator delete(void*, unsigned long)>
c00142a9:	83 c4 10             	add    esp,0x10
c00142ac:	83 c4 0c             	add    esp,0xc
c00142af:	c3                   	ret    

c00142b0 <setupFPU()>:
c00142b0:	53                   	push   ebx
c00142b1:	83 ec 08             	sub    esp,0x8
c00142b4:	8b 15 08 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f008
c00142ba:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00142c1:	74 19                	je     c00142dc <setupFPU()+0x2c>
c00142c3:	83 ec 0c             	sub    esp,0xc
c00142c6:	68 58 01 00 00       	push   0x158
c00142cb:	e8 bc b5 ff ff       	call   c000f88c <malloc>
c00142d0:	89 c3                	mov    ebx,eax
c00142d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00142d5:	e8 a2 1a 01 00       	call   c0025d7c <AVX::AVX()>
c00142da:	eb 5b                	jmp    c0014337 <setupFPU()+0x87>
c00142dc:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00142e2:	84 c0                	test   al,al
c00142e4:	79 19                	jns    c00142ff <setupFPU()+0x4f>
c00142e6:	83 ec 0c             	sub    esp,0xc
c00142e9:	68 58 01 00 00       	push   0x158
c00142ee:	e8 99 b5 ff ff       	call   c000f88c <malloc>
c00142f3:	89 c3                	mov    ebx,eax
c00142f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00142f8:	e8 a5 1b 01 00       	call   c0025ea2 <SSE::SSE()>
c00142fd:	eb 38                	jmp    c0014337 <setupFPU()+0x87>
c00142ff:	a8 20                	test   al,0x20
c0014301:	74 19                	je     c001431c <setupFPU()+0x6c>
c0014303:	83 ec 0c             	sub    esp,0xc
c0014306:	68 58 01 00 00       	push   0x158
c001430b:	e8 7c b5 ff ff       	call   c000f88c <malloc>
c0014310:	89 c3                	mov    ebx,eax
c0014312:	89 04 24             	mov    DWORD PTR [esp],eax
c0014315:	e8 f2 1a 01 00       	call   c0025e0c <MMX::MMX()>
c001431a:	eb 1b                	jmp    c0014337 <setupFPU()+0x87>
c001431c:	a8 10                	test   al,0x10
c001431e:	74 1c                	je     c001433c <setupFPU()+0x8c>
c0014320:	83 ec 0c             	sub    esp,0xc
c0014323:	68 58 01 00 00       	push   0x158
c0014328:	e8 5f b5 ff ff       	call   c000f88c <malloc>
c001432d:	89 c3                	mov    ebx,eax
c001432f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014332:	e8 f9 1b 01 00       	call   c0025f30 <x87::x87()>
c0014337:	83 c4 10             	add    esp,0x10
c001433a:	eb 24                	jmp    c0014360 <setupFPU()+0xb0>
c001433c:	83 e0 ef             	and    eax,0xffffffef
c001433f:	83 ec 0c             	sub    esp,0xc
c0014342:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014348:	68 4c b6 02 c0       	push   0xc002b64c
c001434d:	e8 7d e5 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0014352:	0f 20 c0             	mov    eax,cr0
c0014355:	83 c8 04             	or     eax,0x4
c0014358:	0f 22 c0             	mov    cr0,eax
c001435b:	31 db                	xor    ebx,ebx
c001435d:	83 c4 10             	add    esp,0x10
c0014360:	89 d8                	mov    eax,ebx
c0014362:	83 c4 08             	add    esp,0x8
c0014365:	5b                   	pop    ebx
c0014366:	c3                   	ret    
c0014367:	90                   	nop

c0014368 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014368:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001436c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014370:	c1 e0 04             	shl    eax,0x4
c0014373:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014377:	8d 50 10             	lea    edx,[eax+0x10]
c001437a:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014380:	74 08                	je     c001438a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014382:	83 c0 04             	add    eax,0x4
c0014385:	39 d0                	cmp    eax,edx
c0014387:	75 f1                	jne    c001437a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014389:	c3                   	ret    
c001438a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014394:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001439e:	eb e2                	jmp    c0014382 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00143a0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00143a0:	57                   	push   edi
c00143a1:	31 c0                	xor    eax,eax
c00143a3:	56                   	push   esi
c00143a4:	53                   	push   ebx
c00143a5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00143a9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00143ad:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00143b1:	89 da                	mov    edx,ebx
c00143b3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00143b7:	c1 e2 04             	shl    edx,0x4
c00143ba:	01 ca                	add    edx,ecx
c00143bc:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00143c4:	74 16                	je     c00143dc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00143c6:	40                   	inc    eax
c00143c7:	83 f8 04             	cmp    eax,0x4
c00143ca:	75 f0                	jne    c00143bc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00143cc:	c7 44 24 10 90 b6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b690
c00143d4:	5b                   	pop    ebx
c00143d5:	5e                   	pop    esi
c00143d6:	5f                   	pop    edi
c00143d7:	e9 29 5f 00 00       	jmp    c001a305 <Krnl::panic(char const*)>
c00143dc:	8d 04 98             	lea    eax,[eax+ebx*4]
c00143df:	8d 04 81             	lea    eax,[ecx+eax*4]
c00143e2:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00143e8:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00143ee:	5b                   	pop    ebx
c00143ef:	5e                   	pop    esi
c00143f0:	5f                   	pop    edi
c00143f1:	c3                   	ret    

c00143f2 <doubleFault(regs*, void*)>:
c00143f2:	55                   	push   ebp
c00143f3:	89 e5                	mov    ebp,esp
c00143f5:	83 ec 08             	sub    esp,0x8
c00143f8:	83 ec 0c             	sub    esp,0xc
c00143fb:	68 cb b6 02 c0       	push   0xc002b6cb
c0014400:	e8 00 5f 00 00       	call   c001a305 <Krnl::panic(char const*)>
c0014405:	83 c4 10             	add    esp,0x10
c0014408:	90                   	nop
c0014409:	c9                   	leave  
c001440a:	c3                   	ret    
c001440b:	90                   	nop

c001440c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001440c:	56                   	push   esi
c001440d:	53                   	push   ebx
c001440e:	50                   	push   eax
c001440f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014413:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014417:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001441c:	75 35                	jne    c0014453 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001441e:	8d 43 20             	lea    eax,[ebx+0x20]
c0014421:	31 d2                	xor    edx,edx
c0014423:	89 c1                	mov    ecx,eax
c0014425:	c1 e1 04             	shl    ecx,0x4
c0014428:	01 f1                	add    ecx,esi
c001442a:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014432:	74 3e                	je     c0014472 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014434:	42                   	inc    edx
c0014435:	83 fa 04             	cmp    edx,0x4
c0014438:	75 f0                	jne    c001442a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001443a:	83 ec 0c             	sub    esp,0xc
c001443d:	68 10 b7 02 c0       	push   0xc002b710
c0014442:	e8 be 5e 00 00       	call   c001a305 <Krnl::panic(char const*)>
c0014447:	83 c4 10             	add    esp,0x10
c001444a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001444f:	5a                   	pop    edx
c0014450:	5b                   	pop    ebx
c0014451:	5e                   	pop    esi
c0014452:	c3                   	ret    
c0014453:	83 ec 0c             	sub    esp,0xc
c0014456:	56                   	push   esi
c0014457:	e8 ac fb ff ff       	call   c0014008 <Device::getName()>
c001445c:	83 c4 10             	add    esp,0x10
c001445f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014462:	75 ba                	jne    c001441e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014464:	83 fb 0f             	cmp    ebx,0xf
c0014467:	7f 29                	jg     c0014492 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014469:	0f b6 9b 60 e2 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1da0]
c0014470:	eb ac                	jmp    c001441e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014472:	8d 04 82             	lea    eax,[edx+eax*4]
c0014475:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014479:	8d 04 86             	lea    eax,[esi+eax*4]
c001447c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014482:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014486:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c001448c:	89 d8                	mov    eax,ebx
c001448e:	5a                   	pop    edx
c001448f:	5b                   	pop    ebx
c0014490:	5e                   	pop    esi
c0014491:	c3                   	ret    
c0014492:	83 ec 0c             	sub    esp,0xc
c0014495:	68 d8 b6 02 c0       	push   0xc002b6d8
c001449a:	e8 66 5e 00 00       	call   c001a305 <Krnl::panic(char const*)>
c001449f:	83 c4 10             	add    esp,0x10
c00144a2:	e9 77 ff ff ff       	jmp    c001441e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00144a7:	90                   	nop

c00144a8 <InterruptController::clearAllHandlers(int, bool)>:
c00144a8:	56                   	push   esi
c00144a9:	53                   	push   ebx
c00144aa:	52                   	push   edx
c00144ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00144af:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00144b3:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00144b8:	75 61                	jne    c001451b <InterruptController::clearAllHandlers(int, bool)+0x73>
c00144ba:	8d 46 20             	lea    eax,[esi+0x20]
c00144bd:	c1 e6 04             	shl    esi,0x4
c00144c0:	c1 e0 04             	shl    eax,0x4
c00144c3:	01 de                	add    esi,ebx
c00144c5:	01 d8                	add    eax,ebx
c00144c7:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00144d1:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00144db:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00144e5:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00144ef:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00144f9:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014503:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c001450d:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014517:	58                   	pop    eax
c0014518:	5b                   	pop    ebx
c0014519:	5e                   	pop    esi
c001451a:	c3                   	ret    
c001451b:	83 ec 0c             	sub    esp,0xc
c001451e:	53                   	push   ebx
c001451f:	e8 e4 fa ff ff       	call   c0014008 <Device::getName()>
c0014524:	83 c4 10             	add    esp,0x10
c0014527:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001452a:	75 8e                	jne    c00144ba <InterruptController::clearAllHandlers(int, bool)+0x12>
c001452c:	83 fe 0f             	cmp    esi,0xf
c001452f:	7f 09                	jg     c001453a <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014531:	0f b6 b6 60 e2 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1da0]
c0014538:	eb 80                	jmp    c00144ba <InterruptController::clearAllHandlers(int, bool)+0x12>
c001453a:	83 ec 0c             	sub    esp,0xc
c001453d:	68 4c b7 02 c0       	push   0xc002b74c
c0014542:	e8 be 5d 00 00       	call   c001a305 <Krnl::panic(char const*)>
c0014547:	83 c4 10             	add    esp,0x10
c001454a:	e9 6b ff ff ff       	jmp    c00144ba <InterruptController::clearAllHandlers(int, bool)+0x12>
c001454f:	90                   	nop

c0014550 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014550:	56                   	push   esi
c0014551:	53                   	push   ebx
c0014552:	52                   	push   edx
c0014553:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014557:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001455b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014560:	75 3a                	jne    c001459c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014562:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014566:	8d 50 20             	lea    edx,[eax+0x20]
c0014569:	c1 e2 04             	shl    edx,0x4
c001456c:	8d 04 16             	lea    eax,[esi+edx*1]
c001456f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014573:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014579:	74 0b                	je     c0014586 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001457b:	83 c0 04             	add    eax,0x4
c001457e:	39 d0                	cmp    eax,edx
c0014580:	75 f1                	jne    c0014573 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014582:	58                   	pop    eax
c0014583:	5b                   	pop    ebx
c0014584:	5e                   	pop    esi
c0014585:	c3                   	ret    
c0014586:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014590:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001459a:	eb df                	jmp    c001457b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001459c:	83 ec 0c             	sub    esp,0xc
c001459f:	56                   	push   esi
c00145a0:	e8 63 fa ff ff       	call   c0014008 <Device::getName()>
c00145a5:	83 c4 10             	add    esp,0x10
c00145a8:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00145ab:	75 b5                	jne    c0014562 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00145ad:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00145b2:	7f 11                	jg     c00145c5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c00145b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00145b8:	0f b6 80 60 e2 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1da0]
c00145bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00145c3:	eb 9d                	jmp    c0014562 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c00145c5:	83 ec 0c             	sub    esp,0xc
c00145c8:	68 4c b7 02 c0       	push   0xc002b74c
c00145cd:	e8 33 5d 00 00       	call   c001a305 <Krnl::panic(char const*)>
c00145d2:	83 c4 10             	add    esp,0x10
c00145d5:	eb 8b                	jmp    c0014562 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00145d7 <nmiHandler(regs*, void*)>:
c00145d7:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c00145dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00145e0:	e9 f1 a9 ff ff       	jmp    c000efd6 <Computer::handleNMI()>

c00145e5 <int_handler>:
c00145e5:	55                   	push   ebp
c00145e6:	57                   	push   edi
c00145e7:	56                   	push   esi
c00145e8:	53                   	push   ebx
c00145e9:	83 ec 0c             	sub    esp,0xc
c00145ec:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00145f0:	80 3d 44 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b44,0x0
c00145f7:	74 0b                	je     c0014604 <int_handler+0x1f>
c00145f9:	fa                   	cli    
c00145fa:	f4                   	hlt    
c00145fb:	80 3d 44 1b 03 c0 00 	cmp    BYTE PTR ds:0xc0031b44,0x0
c0014602:	75 f5                	jne    c00145f9 <int_handler+0x14>
c0014604:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0014609:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c001460c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014612:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014618:	8d 43 e0             	lea    eax,[ebx-0x20]
c001461b:	83 f8 17             	cmp    eax,0x17
c001461e:	77 13                	ja     c0014633 <int_handler+0x4e>
c0014620:	83 ec 08             	sub    esp,0x8
c0014623:	8b 17                	mov    edx,DWORD PTR [edi]
c0014625:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014628:	0f b6 c0             	movzx  eax,al
c001462b:	50                   	push   eax
c001462c:	57                   	push   edi
c001462d:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014630:	83 c4 10             	add    esp,0x10
c0014633:	83 c3 15             	add    ebx,0x15
c0014636:	c1 e3 04             	shl    ebx,0x4
c0014639:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001463d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014644:	31 db                	xor    ebx,ebx
c0014646:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001464a:	85 c0                	test   eax,eax
c001464c:	74 13                	je     c0014661 <int_handler+0x7c>
c001464e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014651:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014655:	74 1c                	je     c0014673 <int_handler+0x8e>
c0014657:	83 ec 08             	sub    esp,0x8
c001465a:	52                   	push   edx
c001465b:	56                   	push   esi
c001465c:	ff d0                	call   eax
c001465e:	83 c4 10             	add    esp,0x10
c0014661:	43                   	inc    ebx
c0014662:	83 fb 04             	cmp    ebx,0x4
c0014665:	75 df                	jne    c0014646 <int_handler+0x61>
c0014667:	83 c4 0c             	add    esp,0xc
c001466a:	31 c0                	xor    eax,eax
c001466c:	5b                   	pop    ebx
c001466d:	31 d2                	xor    edx,edx
c001466f:	5e                   	pop    esi
c0014670:	5f                   	pop    edi
c0014671:	5d                   	pop    ebp
c0014672:	c3                   	ret    
c0014673:	83 ec 08             	sub    esp,0x8
c0014676:	52                   	push   edx
c0014677:	56                   	push   esi
c0014678:	ff d0                	call   eax
c001467a:	83 c4 10             	add    esp,0x10
c001467d:	83 c4 0c             	add    esp,0xc
c0014680:	5b                   	pop    ebx
c0014681:	5e                   	pop    esi
c0014682:	5f                   	pop    edi
c0014683:	5d                   	pop    ebp
c0014684:	c3                   	ret    
c0014685:	90                   	nop

c0014686 <InterruptController::InterruptController(char const*)>:
c0014686:	83 ec 1c             	sub    esp,0x1c
c0014689:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001468d:	83 ec 08             	sub    esp,0x8
c0014690:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014694:	50                   	push   eax
c0014695:	e8 72 f8 ff ff       	call   c0013f0c <Device::Device(char const*)>
c001469a:	83 c4 10             	add    esp,0x10
c001469d:	ba 0c ba 02 c0       	mov    edx,0xc002ba0c
c00146a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146a6:	89 10                	mov    DWORD PTR [eax],edx
c00146a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146ac:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c00146b6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146be:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00146c6:	7f 5e                	jg     c0014726 <InterruptController::InterruptController(char const*)+0xa0>
c00146c8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00146d0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00146d5:	7f 49                	jg     c0014720 <InterruptController::InterruptController(char const*)+0x9a>
c00146d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146df:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146ea:	01 ca                	add    edx,ecx
c00146ec:	83 c2 54             	add    edx,0x54
c00146ef:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00146f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146ff:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014706:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001470a:	01 ca                	add    edx,ecx
c001470c:	81 c2 54 04 00 00    	add    edx,0x454
c0014712:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001471a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001471e:	eb b0                	jmp    c00146d0 <InterruptController::InterruptController(char const*)+0x4a>
c0014720:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014724:	eb 98                	jmp    c00146be <InterruptController::InterruptController(char const*)+0x38>
c0014726:	90                   	nop
c0014727:	83 c4 1c             	add    esp,0x1c
c001472a:	c3                   	ret    
c001472b:	90                   	nop

c001472c <InterruptController::~InterruptController()>:
c001472c:	83 ec 0c             	sub    esp,0xc
c001472f:	ba 0c ba 02 c0       	mov    edx,0xc002ba0c
c0014734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014738:	89 10                	mov    DWORD PTR [eax],edx
c001473a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001473e:	83 ec 0c             	sub    esp,0xc
c0014741:	50                   	push   eax
c0014742:	e8 8f f4 ff ff       	call   c0013bd6 <Device::~Device()>
c0014747:	83 c4 10             	add    esp,0x10
c001474a:	90                   	nop
c001474b:	83 c4 0c             	add    esp,0xc
c001474e:	c3                   	ret    
c001474f:	90                   	nop

c0014750 <InterruptController::~InterruptController()>:
c0014750:	83 ec 0c             	sub    esp,0xc
c0014753:	83 ec 0c             	sub    esp,0xc
c0014756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001475a:	e8 cd ff ff ff       	call   c001472c <InterruptController::~InterruptController()>
c001475f:	83 c4 10             	add    esp,0x10
c0014762:	83 ec 08             	sub    esp,0x8
c0014765:	68 58 21 00 00       	push   0x2158
c001476a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001476e:	e8 7c e0 ff ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0014773:	83 c4 10             	add    esp,0x10
c0014776:	83 c4 0c             	add    esp,0xc
c0014779:	c3                   	ret    

c001477a <displayDebugInfo(regs*)>:
c001477a:	55                   	push   ebp
c001477b:	57                   	push   edi
c001477c:	56                   	push   esi
c001477d:	53                   	push   ebx
c001477e:	83 ec 24             	sub    esp,0x24
c0014781:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014785:	0f 20 c2             	mov    edx,cr0
c0014788:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001478c:	0f 20 d7             	mov    edi,cr2
c001478f:	0f 20 de             	mov    esi,cr3
c0014792:	0f 20 e5             	mov    ebp,cr4
c0014795:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014798:	68 86 b7 02 c0       	push   0xc002b786
c001479d:	e8 2d e1 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00147a2:	59                   	pop    ecx
c00147a3:	58                   	pop    eax
c00147a4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00147a7:	68 91 b7 02 c0       	push   0xc002b791
c00147ac:	e8 1e e1 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00147b1:	58                   	pop    eax
c00147b2:	5a                   	pop    edx
c00147b3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00147b6:	68 9c b7 02 c0       	push   0xc002b79c
c00147bb:	e8 0f e1 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00147c0:	59                   	pop    ecx
c00147c1:	58                   	pop    eax
c00147c2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00147c5:	68 a7 b7 02 c0       	push   0xc002b7a7
c00147ca:	e8 00 e1 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00147cf:	58                   	pop    eax
c00147d0:	5a                   	pop    edx
c00147d1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00147d4:	68 b2 b7 02 c0       	push   0xc002b7b2
c00147d9:	e8 f1 e0 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00147de:	59                   	pop    ecx
c00147df:	58                   	pop    eax
c00147e0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00147e3:	68 bd b7 02 c0       	push   0xc002b7bd
c00147e8:	e8 e2 e0 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00147ed:	58                   	pop    eax
c00147ee:	5a                   	pop    edx
c00147ef:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00147f2:	68 c8 b7 02 c0       	push   0xc002b7c8
c00147f7:	e8 d3 e0 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00147fc:	59                   	pop    ecx
c00147fd:	58                   	pop    eax
c00147fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014801:	68 d3 b7 02 c0       	push   0xc002b7d3
c0014806:	e8 c4 e0 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001480b:	58                   	pop    eax
c001480c:	5a                   	pop    edx
c001480d:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014810:	68 de b7 02 c0       	push   0xc002b7de
c0014815:	e8 b5 e0 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001481a:	59                   	pop    ecx
c001481b:	58                   	pop    eax
c001481c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001481f:	68 ed b7 02 c0       	push   0xc002b7ed
c0014824:	e8 a6 e0 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0014829:	58                   	pop    eax
c001482a:	5a                   	pop    edx
c001482b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001482e:	68 f8 b7 02 c0       	push   0xc002b7f8
c0014833:	e8 97 e0 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0014838:	59                   	pop    ecx
c0014839:	58                   	pop    eax
c001483a:	57                   	push   edi
c001483b:	68 03 b8 02 c0       	push   0xc002b803
c0014840:	e8 8a e0 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0014845:	58                   	pop    eax
c0014846:	5a                   	pop    edx
c0014847:	56                   	push   esi
c0014848:	68 0e b8 02 c0       	push   0xc002b80e
c001484d:	e8 7d e0 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0014852:	59                   	pop    ecx
c0014853:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014858:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001485e:	e8 8f be ff ff       	call   c00106f2 <setActiveTerminal(VgaText*)>
c0014863:	58                   	pop    eax
c0014864:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014867:	5a                   	pop    edx
c0014868:	c1 e0 05             	shl    eax,0x5
c001486b:	05 c0 df 02 c0       	add    eax,0xc002dfc0
c0014870:	50                   	push   eax
c0014871:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014876:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001487c:	e8 43 c2 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c0014881:	59                   	pop    ecx
c0014882:	58                   	pop    eax
c0014883:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014888:	68 19 b8 02 c0       	push   0xc002b819
c001488d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014893:	e8 2c c2 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c0014898:	58                   	pop    eax
c0014899:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001489e:	5a                   	pop    edx
c001489f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00148a2:	83 c0 0c             	add    eax,0xc
c00148a5:	50                   	push   eax
c00148a6:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c00148ab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148b1:	e8 0e c2 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c00148b6:	59                   	pop    ecx
c00148b7:	58                   	pop    eax
c00148b8:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c00148bd:	68 22 b8 02 c0       	push   0xc002b822
c00148c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c8:	e8 f7 c1 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c00148cd:	58                   	pop    eax
c00148ce:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c00148d3:	5a                   	pop    edx
c00148d4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00148d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148dd:	e8 9c c1 ff ff       	call   c0010a7e <VgaText::putx(unsigned int)>
c00148e2:	59                   	pop    ecx
c00148e3:	58                   	pop    eax
c00148e4:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c00148e9:	68 2a b8 02 c0       	push   0xc002b82a
c00148ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f4:	e8 cb c1 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c00148f9:	58                   	pop    eax
c00148fa:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c00148ff:	5a                   	pop    edx
c0014900:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014903:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014909:	e8 70 c1 ff ff       	call   c0010a7e <VgaText::putx(unsigned int)>
c001490e:	59                   	pop    ecx
c001490f:	58                   	pop    eax
c0014910:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014915:	68 32 b8 02 c0       	push   0xc002b832
c001491a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014920:	e8 9f c1 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c0014925:	58                   	pop    eax
c0014926:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001492b:	5a                   	pop    edx
c001492c:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001492f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014935:	e8 44 c1 ff ff       	call   c0010a7e <VgaText::putx(unsigned int)>
c001493a:	59                   	pop    ecx
c001493b:	58                   	pop    eax
c001493c:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014941:	68 3a b8 02 c0       	push   0xc002b83a
c0014946:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001494c:	e8 73 c1 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c0014951:	58                   	pop    eax
c0014952:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014957:	5a                   	pop    edx
c0014958:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001495b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014961:	e8 18 c1 ff ff       	call   c0010a7e <VgaText::putx(unsigned int)>
c0014966:	59                   	pop    ecx
c0014967:	58                   	pop    eax
c0014968:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001496d:	68 42 b8 02 c0       	push   0xc002b842
c0014972:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014978:	e8 47 c1 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c001497d:	58                   	pop    eax
c001497e:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014983:	5a                   	pop    edx
c0014984:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014987:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001498d:	e8 ec c0 ff ff       	call   c0010a7e <VgaText::putx(unsigned int)>
c0014992:	59                   	pop    ecx
c0014993:	58                   	pop    eax
c0014994:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014999:	68 4a b8 02 c0       	push   0xc002b84a
c001499e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a4:	e8 1b c1 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c00149a9:	58                   	pop    eax
c00149aa:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c00149af:	5a                   	pop    edx
c00149b0:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00149b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149b9:	e8 c0 c0 ff ff       	call   c0010a7e <VgaText::putx(unsigned int)>
c00149be:	59                   	pop    ecx
c00149bf:	58                   	pop    eax
c00149c0:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c00149c5:	68 52 b8 02 c0       	push   0xc002b852
c00149ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149d0:	e8 ef c0 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c00149d5:	58                   	pop    eax
c00149d6:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c00149db:	5a                   	pop    edx
c00149dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00149e0:	52                   	push   edx
c00149e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149e7:	e8 92 c0 ff ff       	call   c0010a7e <VgaText::putx(unsigned int)>
c00149ec:	59                   	pop    ecx
c00149ed:	58                   	pop    eax
c00149ee:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c00149f3:	68 5b b8 02 c0       	push   0xc002b85b
c00149f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149fe:	e8 c1 c0 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c0014a03:	58                   	pop    eax
c0014a04:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014a09:	5a                   	pop    edx
c0014a0a:	57                   	push   edi
c0014a0b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a11:	e8 68 c0 ff ff       	call   c0010a7e <VgaText::putx(unsigned int)>
c0014a16:	59                   	pop    ecx
c0014a17:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014a1c:	5f                   	pop    edi
c0014a1d:	68 63 b8 02 c0       	push   0xc002b863
c0014a22:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a28:	e8 97 c0 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c0014a2d:	58                   	pop    eax
c0014a2e:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014a33:	5a                   	pop    edx
c0014a34:	56                   	push   esi
c0014a35:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a3b:	e8 3e c0 ff ff       	call   c0010a7e <VgaText::putx(unsigned int)>
c0014a40:	59                   	pop    ecx
c0014a41:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014a46:	5e                   	pop    esi
c0014a47:	68 6b b8 02 c0       	push   0xc002b86b
c0014a4c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a52:	e8 6d c0 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c0014a57:	5f                   	pop    edi
c0014a58:	58                   	pop    eax
c0014a59:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014a5e:	55                   	push   ebp
c0014a5f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a65:	e8 14 c0 ff ff       	call   c0010a7e <VgaText::putx(unsigned int)>
c0014a6a:	58                   	pop    eax
c0014a6b:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014a70:	5a                   	pop    edx
c0014a71:	68 73 b8 02 c0       	push   0xc002b873
c0014a76:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a7c:	e8 43 c0 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c0014a81:	0f 21 c0             	mov    eax,db0
c0014a84:	59                   	pop    ecx
c0014a85:	5e                   	pop    esi
c0014a86:	50                   	push   eax
c0014a87:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014a8c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a92:	e8 e7 bf ff ff       	call   c0010a7e <VgaText::putx(unsigned int)>
c0014a97:	5f                   	pop    edi
c0014a98:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014a9d:	5d                   	pop    ebp
c0014a9e:	68 7c b8 02 c0       	push   0xc002b87c
c0014aa3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aa9:	e8 16 c0 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c0014aae:	0f 21 c8             	mov    eax,db1
c0014ab1:	5a                   	pop    edx
c0014ab2:	59                   	pop    ecx
c0014ab3:	50                   	push   eax
c0014ab4:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014ab9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014abf:	e8 ba bf ff ff       	call   c0010a7e <VgaText::putx(unsigned int)>
c0014ac4:	5e                   	pop    esi
c0014ac5:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014aca:	5f                   	pop    edi
c0014acb:	68 84 b8 02 c0       	push   0xc002b884
c0014ad0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ad6:	e8 e9 bf ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c0014adb:	0f 21 d0             	mov    eax,db2
c0014ade:	5d                   	pop    ebp
c0014adf:	5a                   	pop    edx
c0014ae0:	50                   	push   eax
c0014ae1:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014ae6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aec:	e8 8d bf ff ff       	call   c0010a7e <VgaText::putx(unsigned int)>
c0014af1:	59                   	pop    ecx
c0014af2:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014af7:	5e                   	pop    esi
c0014af8:	68 8c b8 02 c0       	push   0xc002b88c
c0014afd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b03:	e8 bc bf ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c0014b08:	0f 21 d8             	mov    eax,db3
c0014b0b:	5f                   	pop    edi
c0014b0c:	5d                   	pop    ebp
c0014b0d:	50                   	push   eax
c0014b0e:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014b13:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b19:	e8 60 bf ff ff       	call   c0010a7e <VgaText::putx(unsigned int)>
c0014b1e:	58                   	pop    eax
c0014b1f:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014b24:	5a                   	pop    edx
c0014b25:	68 94 b8 02 c0       	push   0xc002b894
c0014b2a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b30:	e8 8f bf ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c0014b35:	0f 21 f0             	mov    eax,db6
c0014b38:	59                   	pop    ecx
c0014b39:	5e                   	pop    esi
c0014b3a:	50                   	push   eax
c0014b3b:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014b40:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b46:	e8 33 bf ff ff       	call   c0010a7e <VgaText::putx(unsigned int)>
c0014b4b:	5f                   	pop    edi
c0014b4c:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014b51:	5d                   	pop    ebp
c0014b52:	68 9c b8 02 c0       	push   0xc002b89c
c0014b57:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b5d:	e8 62 bf ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c0014b62:	0f 21 f8             	mov    eax,db7
c0014b65:	5a                   	pop    edx
c0014b66:	59                   	pop    ecx
c0014b67:	50                   	push   eax
c0014b68:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014b6d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b73:	e8 06 bf ff ff       	call   c0010a7e <VgaText::putx(unsigned int)>
c0014b78:	5e                   	pop    esi
c0014b79:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b7c:	e8 07 8b 00 00       	call   c001d688 <Thr::getDriverNameFromAddress(unsigned long)>
c0014b81:	83 c4 10             	add    esp,0x10
c0014b84:	85 c0                	test   eax,eax
c0014b86:	74 7d                	je     c0014c05 <displayDebugInfo(regs*)+0x48b>
c0014b88:	89 c6                	mov    esi,eax
c0014b8a:	50                   	push   eax
c0014b8b:	50                   	push   eax
c0014b8c:	56                   	push   esi
c0014b8d:	68 a4 b8 02 c0       	push   0xc002b8a4
c0014b92:	e8 38 dd ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0014b97:	5a                   	pop    edx
c0014b98:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014b9d:	59                   	pop    ecx
c0014b9e:	68 b2 b8 02 c0       	push   0xc002b8b2
c0014ba3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ba9:	e8 16 bf ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c0014bae:	5f                   	pop    edi
c0014baf:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014bb4:	5d                   	pop    ebp
c0014bb5:	56                   	push   esi
c0014bb6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bbc:	e8 03 bf ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c0014bc1:	58                   	pop    eax
c0014bc2:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014bc7:	5a                   	pop    edx
c0014bc8:	68 be b8 02 c0       	push   0xc002b8be
c0014bcd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bd3:	e8 ec be ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c0014bd8:	59                   	pop    ecx
c0014bd9:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0014bde:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014be4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014be7:	e8 d3 8a 00 00       	call   c001d6bf <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014bec:	5b                   	pop    ebx
c0014bed:	5d                   	pop    ebp
c0014bee:	50                   	push   eax
c0014bef:	57                   	push   edi
c0014bf0:	e8 89 be ff ff       	call   c0010a7e <VgaText::putx(unsigned int)>
c0014bf5:	58                   	pop    eax
c0014bf6:	5a                   	pop    edx
c0014bf7:	56                   	push   esi
c0014bf8:	68 ca b8 02 c0       	push   0xc002b8ca
c0014bfd:	e8 cd dc ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0014c02:	83 c4 10             	add    esp,0x10
c0014c05:	fa                   	cli    
c0014c06:	f4                   	hlt    
c0014c07:	eb fe                	jmp    c0014c07 <displayDebugInfo(regs*)+0x48d>

c0014c09 <x87EmulHandler(regs*, void*)>:
c0014c09:	83 ec 0c             	sub    esp,0xc
c0014c0c:	0f 20 c2             	mov    edx,cr0
c0014c0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c14:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014c18:	75 4b                	jne    c0014c65 <x87EmulHandler(regs*, void*)+0x5c>
c0014c1a:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0014c1f:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014c25:	85 c0                	test   eax,eax
c0014c27:	74 05                	je     c0014c2e <x87EmulHandler(regs*, void*)+0x25>
c0014c29:	83 e2 08             	and    edx,0x8
c0014c2c:	75 17                	jne    c0014c45 <x87EmulHandler(regs*, void*)+0x3c>
c0014c2e:	83 ec 0c             	sub    esp,0xc
c0014c31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c35:	e8 45 af 00 00       	call   c001fb7f <Vm::x87Handler(regs*)>
c0014c3a:	83 c4 10             	add    esp,0x10
c0014c3d:	84 c0                	test   al,al
c0014c3f:	74 24                	je     c0014c65 <x87EmulHandler(regs*, void*)+0x5c>
c0014c41:	83 c4 0c             	add    esp,0xc
c0014c44:	c3                   	ret    
c0014c45:	83 ec 0c             	sub    esp,0xc
c0014c48:	68 f0 b8 02 c0       	push   0xc002b8f0
c0014c4d:	e8 7d dc ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0014c52:	0f 06                	clts   
c0014c54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c59:	83 c4 10             	add    esp,0x10
c0014c5c:	a3 88 f1 02 c0       	mov    ds:0xc002f188,eax
c0014c61:	83 c4 0c             	add    esp,0xc
c0014c64:	c3                   	ret    
c0014c65:	83 ec 0c             	sub    esp,0xc
c0014c68:	68 da b8 02 c0       	push   0xc002b8da
c0014c6d:	e8 5d dc ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0014c72:	5a                   	pop    edx
c0014c73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c77:	e8 fe fa ff ff       	call   c001477a <displayDebugInfo(regs*)>

c0014c7c <gpFault(regs*, void*)>:
c0014c7c:	53                   	push   ebx
c0014c7d:	83 ec 14             	sub    esp,0x14
c0014c80:	c7 05 84 f1 02 c0 58 f0 01 c0 	mov    DWORD PTR ds:0xc002f184,0xc001f058
c0014c8a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014c8e:	53                   	push   ebx
c0014c8f:	e8 c4 a3 00 00       	call   c001f058 <Vm::faultHandler(regs*)>
c0014c94:	83 c4 10             	add    esp,0x10
c0014c97:	84 c0                	test   al,al
c0014c99:	74 05                	je     c0014ca0 <gpFault(regs*, void*)+0x24>
c0014c9b:	83 c4 08             	add    esp,0x8
c0014c9e:	5b                   	pop    ebx
c0014c9f:	c3                   	ret    
c0014ca0:	83 ec 0c             	sub    esp,0xc
c0014ca3:	68 fd b8 02 c0       	push   0xc002b8fd
c0014ca8:	e8 22 dc ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0014cad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014cb0:	e8 c5 fa ff ff       	call   c001477a <displayDebugInfo(regs*)>

c0014cb5 <pgFault(regs*, void*)>:
c0014cb5:	83 ec 18             	sub    esp,0x18
c0014cb8:	68 18 b9 02 c0       	push   0xc002b918
c0014cbd:	e8 0d dc ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0014cc2:	58                   	pop    eax
c0014cc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cc7:	e8 ae fa ff ff       	call   c001477a <displayDebugInfo(regs*)>

c0014ccc <otherISRHandler(regs*, void*)>:
c0014ccc:	53                   	push   ebx
c0014ccd:	83 ec 0c             	sub    esp,0xc
c0014cd0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014cd4:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014cd7:	50                   	push   eax
c0014cd8:	50                   	push   eax
c0014cd9:	68 25 b9 02 c0       	push   0xc002b925
c0014cde:	e8 ec db ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0014ce3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ce6:	e8 8f fa ff ff       	call   c001477a <displayDebugInfo(regs*)>

c0014ceb <opcodeFault(regs*, void*)>:
c0014ceb:	55                   	push   ebp
c0014cec:	89 e5                	mov    ebp,esp
c0014cee:	56                   	push   esi
c0014cef:	53                   	push   ebx
c0014cf0:	83 ec 40             	sub    esp,0x40
c0014cf3:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0014cf8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014cfe:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014d04:	84 c0                	test   al,al
c0014d06:	74 24                	je     c0014d2c <opcodeFault(regs*, void*)+0x41>
c0014d08:	83 ec 0c             	sub    esp,0xc
c0014d0b:	68 44 b9 02 c0       	push   0xc002b944
c0014d10:	e8 ba db ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0014d15:	83 c4 10             	add    esp,0x10
c0014d18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d1b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d1e:	8d 50 19             	lea    edx,[eax+0x19]
c0014d21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d24:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d27:	e9 d5 05 00 00       	jmp    c0015301 <opcodeFault(regs*, void*)+0x616>
c0014d2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d32:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014d35:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014d39:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014d3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d40:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d43:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014d46:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d49:	8a 00                	mov    al,BYTE PTR [eax]
c0014d4b:	3c f0                	cmp    al,0xf0
c0014d4d:	75 17                	jne    c0014d66 <opcodeFault(regs*, void*)+0x7b>
c0014d4f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d55:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d58:	8d 50 01             	lea    edx,[eax+0x1]
c0014d5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d5e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d61:	e9 da 00 00 00       	jmp    c0014e40 <opcodeFault(regs*, void*)+0x155>
c0014d66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d69:	8a 00                	mov    al,BYTE PTR [eax]
c0014d6b:	3c f2                	cmp    al,0xf2
c0014d6d:	74 09                	je     c0014d78 <opcodeFault(regs*, void*)+0x8d>
c0014d6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d72:	8a 00                	mov    al,BYTE PTR [eax]
c0014d74:	3c f3                	cmp    al,0xf3
c0014d76:	75 1b                	jne    c0014d93 <opcodeFault(regs*, void*)+0xa8>
c0014d78:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d7c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d82:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d85:	8d 50 01             	lea    edx,[eax+0x1]
c0014d88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d8b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d8e:	e9 ad 00 00 00       	jmp    c0014e40 <opcodeFault(regs*, void*)+0x155>
c0014d93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d96:	8a 00                	mov    al,BYTE PTR [eax]
c0014d98:	3c 66                	cmp    al,0x66
c0014d9a:	75 1f                	jne    c0014dbb <opcodeFault(regs*, void*)+0xd0>
c0014d9c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014da0:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014da4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014da7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014daa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dad:	8d 50 01             	lea    edx,[eax+0x1]
c0014db0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014db6:	e9 85 00 00 00       	jmp    c0014e40 <opcodeFault(regs*, void*)+0x155>
c0014dbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dbe:	8a 00                	mov    al,BYTE PTR [eax]
c0014dc0:	3c 67                	cmp    al,0x67
c0014dc2:	75 18                	jne    c0014ddc <opcodeFault(regs*, void*)+0xf1>
c0014dc4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014dc8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014dcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dce:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dd1:	8d 50 01             	lea    edx,[eax+0x1]
c0014dd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dda:	eb 64                	jmp    c0014e40 <opcodeFault(regs*, void*)+0x155>
c0014ddc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ddf:	8a 00                	mov    al,BYTE PTR [eax]
c0014de1:	3c 2e                	cmp    al,0x2e
c0014de3:	74 09                	je     c0014dee <opcodeFault(regs*, void*)+0x103>
c0014de5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014de8:	8a 00                	mov    al,BYTE PTR [eax]
c0014dea:	3c 3e                	cmp    al,0x3e
c0014dec:	75 18                	jne    c0014e06 <opcodeFault(regs*, void*)+0x11b>
c0014dee:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014df2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014df5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014df8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014dfb:	8d 50 01             	lea    edx,[eax+0x1]
c0014dfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e01:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e04:	eb 3a                	jmp    c0014e40 <opcodeFault(regs*, void*)+0x155>
c0014e06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e09:	8a 00                	mov    al,BYTE PTR [eax]
c0014e0b:	3c 36                	cmp    al,0x36
c0014e0d:	74 1b                	je     c0014e2a <opcodeFault(regs*, void*)+0x13f>
c0014e0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e12:	8a 00                	mov    al,BYTE PTR [eax]
c0014e14:	3c 26                	cmp    al,0x26
c0014e16:	74 12                	je     c0014e2a <opcodeFault(regs*, void*)+0x13f>
c0014e18:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e1b:	8a 00                	mov    al,BYTE PTR [eax]
c0014e1d:	3c 64                	cmp    al,0x64
c0014e1f:	74 09                	je     c0014e2a <opcodeFault(regs*, void*)+0x13f>
c0014e21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e24:	8a 00                	mov    al,BYTE PTR [eax]
c0014e26:	3c 65                	cmp    al,0x65
c0014e28:	75 16                	jne    c0014e40 <opcodeFault(regs*, void*)+0x155>
c0014e2a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014e2e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e34:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e37:	8d 50 01             	lea    edx,[eax+0x1]
c0014e3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e3d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e43:	8a 00                	mov    al,BYTE PTR [eax]
c0014e45:	3c 0f                	cmp    al,0xf
c0014e47:	0f 85 ad 00 00 00    	jne    c0014efa <opcodeFault(regs*, void*)+0x20f>
c0014e4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e50:	40                   	inc    eax
c0014e51:	8a 00                	mov    al,BYTE PTR [eax]
c0014e53:	3c c2                	cmp    al,0xc2
c0014e55:	74 0e                	je     c0014e65 <opcodeFault(regs*, void*)+0x17a>
c0014e57:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e5a:	40                   	inc    eax
c0014e5b:	8a 00                	mov    al,BYTE PTR [eax]
c0014e5d:	3c c3                	cmp    al,0xc3
c0014e5f:	0f 85 95 00 00 00    	jne    c0014efa <opcodeFault(regs*, void*)+0x20f>
c0014e65:	83 ec 0c             	sub    esp,0xc
c0014e68:	68 67 b9 02 c0       	push   0xc002b967
c0014e6d:	e8 5d da ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0014e72:	83 c4 10             	add    esp,0x10
c0014e75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e78:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e7b:	8d 50 01             	lea    edx,[eax+0x1]
c0014e7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e81:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e84:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e8a:	8a 00                	mov    al,BYTE PTR [eax]
c0014e8c:	8d 50 fe             	lea    edx,[eax-0x2]
c0014e8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e92:	88 10                	mov    BYTE PTR [eax],dl
c0014e94:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014e97:	50                   	push   eax
c0014e98:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014e9b:	50                   	push   eax
c0014e9c:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014e9f:	50                   	push   eax
c0014ea0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ea3:	e8 2a 4b 00 00       	call   c00199d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014ea8:	83 c4 10             	add    esp,0x10
c0014eab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eae:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014eb1:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014eb4:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014eb7:	01 d0                	add    eax,edx
c0014eb9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014ebc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ebf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ec2:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014ec5:	48                   	dec    eax
c0014ec6:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014ec9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ecc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014ecf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ed2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ed5:	83 ec 04             	sub    esp,0x4
c0014ed8:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014edb:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014ede:	50                   	push   eax
c0014edf:	e8 d0 b2 fe ff       	call   c00001b4 <voodooXADD>
c0014ee4:	83 c4 10             	add    esp,0x10
c0014ee7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014eea:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014eed:	01 c2                	add    edx,eax
c0014eef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ef5:	e9 07 04 00 00       	jmp    c0015301 <opcodeFault(regs*, void*)+0x616>
c0014efa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014efd:	8a 00                	mov    al,BYTE PTR [eax]
c0014eff:	3c 0f                	cmp    al,0xf
c0014f01:	0f 85 8b 01 00 00    	jne    c0015092 <opcodeFault(regs*, void*)+0x3a7>
c0014f07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f0a:	40                   	inc    eax
c0014f0b:	8a 00                	mov    al,BYTE PTR [eax]
c0014f0d:	3c c7                	cmp    al,0xc7
c0014f0f:	0f 86 7d 01 00 00    	jbe    c0015092 <opcodeFault(regs*, void*)+0x3a7>
c0014f15:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f18:	40                   	inc    eax
c0014f19:	8a 00                	mov    al,BYTE PTR [eax]
c0014f1b:	3c cf                	cmp    al,0xcf
c0014f1d:	0f 87 6f 01 00 00    	ja     c0015092 <opcodeFault(regs*, void*)+0x3a7>
c0014f23:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f26:	40                   	inc    eax
c0014f27:	8a 00                	mov    al,BYTE PTR [eax]
c0014f29:	83 c0 38             	add    eax,0x38
c0014f2c:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014f2f:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014f33:	75 0b                	jne    c0014f40 <opcodeFault(regs*, void*)+0x255>
c0014f35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f38:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014f3b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f3e:	eb 75                	jmp    c0014fb5 <opcodeFault(regs*, void*)+0x2ca>
c0014f40:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014f44:	75 0b                	jne    c0014f51 <opcodeFault(regs*, void*)+0x266>
c0014f46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f49:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014f4c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f4f:	eb 64                	jmp    c0014fb5 <opcodeFault(regs*, void*)+0x2ca>
c0014f51:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014f55:	75 0b                	jne    c0014f62 <opcodeFault(regs*, void*)+0x277>
c0014f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f5d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f60:	eb 53                	jmp    c0014fb5 <opcodeFault(regs*, void*)+0x2ca>
c0014f62:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f66:	75 0b                	jne    c0014f73 <opcodeFault(regs*, void*)+0x288>
c0014f68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f6b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f6e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f71:	eb 42                	jmp    c0014fb5 <opcodeFault(regs*, void*)+0x2ca>
c0014f73:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014f77:	75 0b                	jne    c0014f84 <opcodeFault(regs*, void*)+0x299>
c0014f79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f7c:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f7f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f82:	eb 31                	jmp    c0014fb5 <opcodeFault(regs*, void*)+0x2ca>
c0014f84:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014f88:	75 0b                	jne    c0014f95 <opcodeFault(regs*, void*)+0x2aa>
c0014f8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014f90:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f93:	eb 20                	jmp    c0014fb5 <opcodeFault(regs*, void*)+0x2ca>
c0014f95:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014f99:	75 0b                	jne    c0014fa6 <opcodeFault(regs*, void*)+0x2bb>
c0014f9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f9e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014fa1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014fa4:	eb 0f                	jmp    c0014fb5 <opcodeFault(regs*, void*)+0x2ca>
c0014fa6:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014faa:	75 09                	jne    c0014fb5 <opcodeFault(regs*, void*)+0x2ca>
c0014fac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014faf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014fb2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014fb5:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014fb9:	74 10                	je     c0014fcb <opcodeFault(regs*, void*)+0x2e0>
c0014fbb:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014fc2:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014fc9:	eb 2d                	jmp    c0014ff8 <opcodeFault(regs*, void*)+0x30d>
c0014fcb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fce:	c1 e0 18             	shl    eax,0x18
c0014fd1:	89 c2                	mov    edx,eax
c0014fd3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fd6:	c1 e0 08             	shl    eax,0x8
c0014fd9:	25 00 00 ff 00       	and    eax,0xff0000
c0014fde:	09 c2                	or     edx,eax
c0014fe0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014fe3:	c1 e8 08             	shr    eax,0x8
c0014fe6:	25 00 ff 00 00       	and    eax,0xff00
c0014feb:	09 c2                	or     edx,eax
c0014fed:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ff0:	c1 e8 18             	shr    eax,0x18
c0014ff3:	09 d0                	or     eax,edx
c0014ff5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ff8:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014ffc:	75 0b                	jne    c0015009 <opcodeFault(regs*, void*)+0x31e>
c0014ffe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015001:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015004:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015007:	eb 75                	jmp    c001507e <opcodeFault(regs*, void*)+0x393>
c0015009:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001500d:	75 0b                	jne    c001501a <opcodeFault(regs*, void*)+0x32f>
c001500f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015012:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015015:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015018:	eb 64                	jmp    c001507e <opcodeFault(regs*, void*)+0x393>
c001501a:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001501e:	75 0b                	jne    c001502b <opcodeFault(regs*, void*)+0x340>
c0015020:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015023:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015026:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015029:	eb 53                	jmp    c001507e <opcodeFault(regs*, void*)+0x393>
c001502b:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001502f:	75 0b                	jne    c001503c <opcodeFault(regs*, void*)+0x351>
c0015031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015034:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015037:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001503a:	eb 42                	jmp    c001507e <opcodeFault(regs*, void*)+0x393>
c001503c:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015040:	75 0b                	jne    c001504d <opcodeFault(regs*, void*)+0x362>
c0015042:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015045:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015048:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001504b:	eb 31                	jmp    c001507e <opcodeFault(regs*, void*)+0x393>
c001504d:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015051:	75 0b                	jne    c001505e <opcodeFault(regs*, void*)+0x373>
c0015053:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015056:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015059:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001505c:	eb 20                	jmp    c001507e <opcodeFault(regs*, void*)+0x393>
c001505e:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015062:	75 0b                	jne    c001506f <opcodeFault(regs*, void*)+0x384>
c0015064:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015067:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001506a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001506d:	eb 0f                	jmp    c001507e <opcodeFault(regs*, void*)+0x393>
c001506f:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015073:	75 09                	jne    c001507e <opcodeFault(regs*, void*)+0x393>
c0015075:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015078:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001507b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001507e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015081:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015084:	8d 50 02             	lea    edx,[eax+0x2]
c0015087:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001508d:	e9 6f 02 00 00       	jmp    c0015301 <opcodeFault(regs*, void*)+0x616>
c0015092:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015095:	8a 00                	mov    al,BYTE PTR [eax]
c0015097:	3c 0f                	cmp    al,0xf
c0015099:	0f 85 8d 01 00 00    	jne    c001522c <opcodeFault(regs*, void*)+0x541>
c001509f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150a2:	40                   	inc    eax
c00150a3:	8a 00                	mov    al,BYTE PTR [eax]
c00150a5:	3c c7                	cmp    al,0xc7
c00150a7:	0f 85 7f 01 00 00    	jne    c001522c <opcodeFault(regs*, void*)+0x541>
c00150ad:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00150b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150b6:	8d 50 01             	lea    edx,[eax+0x1]
c00150b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150bc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150bf:	8d 45 ba             	lea    eax,[ebp-0x46]
c00150c2:	50                   	push   eax
c00150c3:	8d 45 bb             	lea    eax,[ebp-0x45]
c00150c6:	50                   	push   eax
c00150c7:	8d 45 bc             	lea    eax,[ebp-0x44]
c00150ca:	50                   	push   eax
c00150cb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00150ce:	e8 ff 48 00 00       	call   c00199d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00150d3:	83 c4 10             	add    esp,0x10
c00150d6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00150d9:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00150dc:	83 f0 01             	xor    eax,0x1
c00150df:	84 c0                	test   al,al
c00150e1:	0f 84 45 01 00 00    	je     c001522c <opcodeFault(regs*, void*)+0x541>
c00150e7:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00150ea:	3c 01                	cmp    al,0x1
c00150ec:	0f 85 3a 01 00 00    	jne    c001522c <opcodeFault(regs*, void*)+0x541>
c00150f2:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00150f5:	83 f0 01             	xor    eax,0x1
c00150f8:	84 c0                	test   al,al
c00150fa:	0f 84 2c 01 00 00    	je     c001522c <opcodeFault(regs*, void*)+0x541>
c0015100:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015103:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015106:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015109:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015110:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015113:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015116:	89 c2                	mov    edx,eax
c0015118:	b8 00 00 00 00       	mov    eax,0x0
c001511d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015120:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015123:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015126:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015129:	ba 00 00 00 00       	mov    edx,0x0
c001512e:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015131:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015134:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015137:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001513a:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001513d:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015144:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015147:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001514a:	89 c2                	mov    edx,eax
c001514c:	b8 00 00 00 00       	mov    eax,0x0
c0015151:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015154:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001515a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001515d:	ba 00 00 00 00       	mov    edx,0x0
c0015162:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015165:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015168:	fa                   	cli    
c0015169:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001516e:	40                   	inc    eax
c001516f:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c0015174:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015177:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001517a:	8b 00                	mov    eax,DWORD PTR [eax]
c001517c:	89 c1                	mov    ecx,eax
c001517e:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015181:	89 cb                	mov    ebx,ecx
c0015183:	89 d0                	mov    eax,edx
c0015185:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015188:	89 c6                	mov    esi,eax
c001518a:	89 f0                	mov    eax,esi
c001518c:	09 d8                	or     eax,ebx
c001518e:	85 c0                	test   eax,eax
c0015190:	75 21                	jne    c00151b3 <opcodeFault(regs*, void*)+0x4c8>
c0015192:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015195:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015198:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001519b:	89 01                	mov    DWORD PTR [ecx],eax
c001519d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00151a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151a6:	83 c8 40             	or     eax,0x40
c00151a9:	89 c2                	mov    edx,eax
c00151ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ae:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00151b1:	eb 3e                	jmp    c00151f1 <opcodeFault(regs*, void*)+0x506>
c00151b3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00151b6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00151b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00151bb:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00151be:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00151c1:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00151c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c7:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00151ca:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00151cd:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00151d0:	89 d0                	mov    eax,edx
c00151d2:	31 d2                	xor    edx,edx
c00151d4:	89 c3                	mov    ebx,eax
c00151d6:	89 d6                	mov    esi,edx
c00151d8:	89 da                	mov    edx,ebx
c00151da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151dd:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00151e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00151e6:	83 e0 bf             	and    eax,0xffffffbf
c00151e9:	89 c2                	mov    edx,eax
c00151eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151ee:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00151f1:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c00151f6:	48                   	dec    eax
c00151f7:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c00151fc:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0015201:	85 c0                	test   eax,eax
c0015203:	75 01                	jne    c0015206 <opcodeFault(regs*, void*)+0x51b>
c0015205:	fb                   	sti    
c0015206:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015209:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001520c:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001520f:	01 c2                	add    edx,eax
c0015211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015214:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015217:	83 ec 0c             	sub    esp,0xc
c001521a:	68 76 b9 02 c0       	push   0xc002b976
c001521f:	e8 ab d6 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0015224:	83 c4 10             	add    esp,0x10
c0015227:	e9 d5 00 00 00       	jmp    c0015301 <opcodeFault(regs*, void*)+0x616>
c001522c:	83 ec 0c             	sub    esp,0xc
c001522f:	68 89 b9 02 c0       	push   0xc002b989
c0015234:	e8 96 d6 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0015239:	83 c4 10             	add    esp,0x10
c001523c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001523f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015242:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015245:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015248:	c1 e0 04             	shl    eax,0x4
c001524b:	01 d0                	add    eax,edx
c001524d:	83 c0 03             	add    eax,0x3
c0015250:	8a 00                	mov    al,BYTE PTR [eax]
c0015252:	0f b6 d8             	movzx  ebx,al
c0015255:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015258:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001525b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001525e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015261:	c1 e0 04             	shl    eax,0x4
c0015264:	01 d0                	add    eax,edx
c0015266:	83 c0 02             	add    eax,0x2
c0015269:	8a 00                	mov    al,BYTE PTR [eax]
c001526b:	0f b6 c8             	movzx  ecx,al
c001526e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015271:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015277:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001527a:	c1 e0 04             	shl    eax,0x4
c001527d:	01 d0                	add    eax,edx
c001527f:	40                   	inc    eax
c0015280:	8a 00                	mov    al,BYTE PTR [eax]
c0015282:	0f b6 d0             	movzx  edx,al
c0015285:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015288:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001528b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001528e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015291:	c1 e0 04             	shl    eax,0x4
c0015294:	01 f0                	add    eax,esi
c0015296:	8a 00                	mov    al,BYTE PTR [eax]
c0015298:	0f b6 c0             	movzx  eax,al
c001529b:	83 ec 0c             	sub    esp,0xc
c001529e:	53                   	push   ebx
c001529f:	51                   	push   ecx
c00152a0:	52                   	push   edx
c00152a1:	50                   	push   eax
c00152a2:	68 9c b9 02 c0       	push   0xc002b99c
c00152a7:	e8 23 d6 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00152ac:	83 c4 20             	add    esp,0x20
c00152af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152b5:	83 c0 03             	add    eax,0x3
c00152b8:	8a 00                	mov    al,BYTE PTR [eax]
c00152ba:	0f b6 d8             	movzx  ebx,al
c00152bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152c3:	83 c0 02             	add    eax,0x2
c00152c6:	8a 00                	mov    al,BYTE PTR [eax]
c00152c8:	0f b6 c8             	movzx  ecx,al
c00152cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ce:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152d1:	40                   	inc    eax
c00152d2:	8a 00                	mov    al,BYTE PTR [eax]
c00152d4:	0f b6 d0             	movzx  edx,al
c00152d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152da:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152dd:	8a 00                	mov    al,BYTE PTR [eax]
c00152df:	0f b6 c0             	movzx  eax,al
c00152e2:	83 ec 0c             	sub    esp,0xc
c00152e5:	53                   	push   ebx
c00152e6:	51                   	push   ecx
c00152e7:	52                   	push   edx
c00152e8:	50                   	push   eax
c00152e9:	68 c4 b9 02 c0       	push   0xc002b9c4
c00152ee:	e8 dc d5 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00152f3:	83 c4 20             	add    esp,0x20
c00152f6:	83 ec 0c             	sub    esp,0xc
c00152f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00152fc:	e8 79 f4 ff ff       	call   c001477a <displayDebugInfo(regs*)>
c0015301:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015304:	5b                   	pop    ebx
c0015305:	5e                   	pop    esi
c0015306:	5d                   	pop    ebp
c0015307:	c3                   	ret    

c0015308 <displayProgramFault(char const*)>:
c0015308:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001530d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015310:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015316:	85 c0                	test   eax,eax
c0015318:	74 15                	je     c001532f <displayProgramFault(char const*)+0x27>
c001531a:	83 ec 0c             	sub    esp,0xc
c001531d:	6a 04                	push   0x4
c001531f:	6a 0f                	push   0xf
c0015321:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015325:	50                   	push   eax
c0015326:	e8 95 b4 ff ff       	call   c00107c0 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001532b:	83 c4 1c             	add    esp,0x1c
c001532e:	c3                   	ret    
c001532f:	c3                   	ret    

c0015330 <setupInterruptController()>:
c0015330:	55                   	push   ebp
c0015331:	89 e5                	mov    ebp,esp
c0015333:	53                   	push   ebx
c0015334:	83 ec 24             	sub    esp,0x24
c0015337:	b8 00 00 00 00       	mov    eax,0x0
c001533c:	85 c0                	test   eax,eax
c001533e:	0f 95 c0             	setne  al
c0015341:	84 c0                	test   al,al
c0015343:	74 5b                	je     c00153a0 <setupInterruptController()+0x70>
c0015345:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001534c:	83 ec 0c             	sub    esp,0xc
c001534f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015352:	e8 35 a5 ff ff       	call   c000f88c <malloc>
c0015357:	83 c4 10             	add    esp,0x10
c001535a:	89 c3                	mov    ebx,eax
c001535c:	83 ec 0c             	sub    esp,0xc
c001535f:	53                   	push   ebx
c0015360:	e8 09 0e 01 00       	call   c002616e <APIC::APIC()>
c0015365:	83 c4 10             	add    esp,0x10
c0015368:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001536b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001536e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015371:	8b 00                	mov    eax,DWORD PTR [eax]
c0015373:	83 c0 08             	add    eax,0x8
c0015376:	8b 00                	mov    eax,DWORD PTR [eax]
c0015378:	6a 00                	push   0x0
c001537a:	6a 00                	push   0x0
c001537c:	6a 00                	push   0x0
c001537e:	52                   	push   edx
c001537f:	ff d0                	call   eax
c0015381:	83 c4 10             	add    esp,0x10
c0015384:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0015389:	83 ec 08             	sub    esp,0x8
c001538c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001538f:	50                   	push   eax
c0015390:	e8 73 e9 ff ff       	call   c0013d08 <Device::addChild(Device*)>
c0015395:	83 c4 10             	add    esp,0x10
c0015398:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001539b:	e9 89 03 00 00       	jmp    c0015729 <setupInterruptController()+0x3f9>
c00153a0:	a0 80 19 03 c0       	mov    al,ds:0xc0031980
c00153a5:	84 c0                	test   al,al
c00153a7:	75 24                	jne    c00153cd <setupInterruptController()+0x9d>
c00153a9:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c00153ae:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00153b4:	83 e2 fe             	and    edx,0xfffffffe
c00153b7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00153bd:	83 ec 0c             	sub    esp,0xc
c00153c0:	68 e9 b9 02 c0       	push   0xc002b9e9
c00153c5:	e8 05 d5 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00153ca:	83 c4 10             	add    esp,0x10
c00153cd:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c00153d2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00153d8:	83 e0 01             	and    eax,0x1
c00153db:	84 c0                	test   al,al
c00153dd:	0f 95 c0             	setne  al
c00153e0:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00153e3:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00153ea:	83 ec 0c             	sub    esp,0xc
c00153ed:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00153f0:	e8 97 a4 ff ff       	call   c000f88c <malloc>
c00153f5:	83 c4 10             	add    esp,0x10
c00153f8:	89 c3                	mov    ebx,eax
c00153fa:	83 ec 0c             	sub    esp,0xc
c00153fd:	53                   	push   ebx
c00153fe:	e8 c3 12 01 00       	call   c00266c6 <PIC::PIC()>
c0015403:	83 c4 10             	add    esp,0x10
c0015406:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015409:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001540c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001540f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015411:	83 c0 08             	add    eax,0x8
c0015414:	8b 00                	mov    eax,DWORD PTR [eax]
c0015416:	6a 00                	push   0x0
c0015418:	6a 00                	push   0x0
c001541a:	6a 00                	push   0x0
c001541c:	52                   	push   edx
c001541d:	ff d0                	call   eax
c001541f:	83 c4 10             	add    esp,0x10
c0015422:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015426:	74 73                	je     c001549b <setupInterruptController()+0x16b>
c0015428:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001542b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001542e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015430:	83 c0 0c             	add    eax,0xc
c0015433:	8b 00                	mov    eax,DWORD PTR [eax]
c0015435:	6a 00                	push   0x0
c0015437:	6a 00                	push   0x0
c0015439:	6a 00                	push   0x0
c001543b:	52                   	push   edx
c001543c:	ff d0                	call   eax
c001543e:	83 c4 10             	add    esp,0x10
c0015441:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015445:	74 15                	je     c001545c <setupInterruptController()+0x12c>
c0015447:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544a:	8b 00                	mov    eax,DWORD PTR [eax]
c001544c:	83 c0 04             	add    eax,0x4
c001544f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015451:	83 ec 0c             	sub    esp,0xc
c0015454:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015457:	ff d0                	call   eax
c0015459:	83 c4 10             	add    esp,0x10
c001545c:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015463:	83 ec 0c             	sub    esp,0xc
c0015466:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015469:	e8 1e a4 ff ff       	call   c000f88c <malloc>
c001546e:	83 c4 10             	add    esp,0x10
c0015471:	89 c3                	mov    ebx,eax
c0015473:	83 ec 0c             	sub    esp,0xc
c0015476:	53                   	push   ebx
c0015477:	e8 f2 0c 01 00       	call   c002616e <APIC::APIC()>
c001547c:	83 c4 10             	add    esp,0x10
c001547f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015482:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015485:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015488:	8b 00                	mov    eax,DWORD PTR [eax]
c001548a:	83 c0 08             	add    eax,0x8
c001548d:	8b 00                	mov    eax,DWORD PTR [eax]
c001548f:	6a 00                	push   0x0
c0015491:	6a 00                	push   0x0
c0015493:	6a 00                	push   0x0
c0015495:	52                   	push   edx
c0015496:	ff d0                	call   eax
c0015498:	83 c4 10             	add    esp,0x10
c001549b:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c00154a0:	83 ec 08             	sub    esp,0x8
c00154a3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154a6:	50                   	push   eax
c00154a7:	e8 5c e8 ff ff       	call   c0013d08 <Device::addChild(Device*)>
c00154ac:	83 c4 10             	add    esp,0x10
c00154af:	c7 05 88 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f188,0x0
c00154b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00154be:	83 c0 24             	add    eax,0x24
c00154c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00154c3:	6a 00                	push   0x0
c00154c5:	68 cc 4c 01 c0       	push   0xc0014ccc
c00154ca:	6a 00                	push   0x0
c00154cc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154cf:	ff d0                	call   eax
c00154d1:	83 c4 10             	add    esp,0x10
c00154d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d9:	83 c0 24             	add    eax,0x24
c00154dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00154de:	6a 00                	push   0x0
c00154e0:	68 cc 4c 01 c0       	push   0xc0014ccc
c00154e5:	6a 01                	push   0x1
c00154e7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154ea:	ff d0                	call   eax
c00154ec:	83 c4 10             	add    esp,0x10
c00154ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f4:	83 c0 24             	add    eax,0x24
c00154f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f9:	6a 00                	push   0x0
c00154fb:	68 d7 45 01 c0       	push   0xc00145d7
c0015500:	6a 02                	push   0x2
c0015502:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015505:	ff d0                	call   eax
c0015507:	83 c4 10             	add    esp,0x10
c001550a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001550d:	8b 00                	mov    eax,DWORD PTR [eax]
c001550f:	83 c0 24             	add    eax,0x24
c0015512:	8b 00                	mov    eax,DWORD PTR [eax]
c0015514:	6a 00                	push   0x0
c0015516:	68 cc 4c 01 c0       	push   0xc0014ccc
c001551b:	6a 03                	push   0x3
c001551d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015520:	ff d0                	call   eax
c0015522:	83 c4 10             	add    esp,0x10
c0015525:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015528:	8b 00                	mov    eax,DWORD PTR [eax]
c001552a:	83 c0 24             	add    eax,0x24
c001552d:	8b 00                	mov    eax,DWORD PTR [eax]
c001552f:	6a 00                	push   0x0
c0015531:	68 cc 4c 01 c0       	push   0xc0014ccc
c0015536:	6a 04                	push   0x4
c0015538:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001553b:	ff d0                	call   eax
c001553d:	83 c4 10             	add    esp,0x10
c0015540:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015543:	8b 00                	mov    eax,DWORD PTR [eax]
c0015545:	83 c0 24             	add    eax,0x24
c0015548:	8b 00                	mov    eax,DWORD PTR [eax]
c001554a:	6a 00                	push   0x0
c001554c:	68 cc 4c 01 c0       	push   0xc0014ccc
c0015551:	6a 05                	push   0x5
c0015553:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015556:	ff d0                	call   eax
c0015558:	83 c4 10             	add    esp,0x10
c001555b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001555e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015560:	83 c0 24             	add    eax,0x24
c0015563:	8b 00                	mov    eax,DWORD PTR [eax]
c0015565:	6a 00                	push   0x0
c0015567:	68 eb 4c 01 c0       	push   0xc0014ceb
c001556c:	6a 06                	push   0x6
c001556e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015571:	ff d0                	call   eax
c0015573:	83 c4 10             	add    esp,0x10
c0015576:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015579:	8b 00                	mov    eax,DWORD PTR [eax]
c001557b:	83 c0 24             	add    eax,0x24
c001557e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015580:	6a 00                	push   0x0
c0015582:	68 09 4c 01 c0       	push   0xc0014c09
c0015587:	6a 07                	push   0x7
c0015589:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001558c:	ff d0                	call   eax
c001558e:	83 c4 10             	add    esp,0x10
c0015591:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015594:	8b 00                	mov    eax,DWORD PTR [eax]
c0015596:	83 c0 24             	add    eax,0x24
c0015599:	8b 00                	mov    eax,DWORD PTR [eax]
c001559b:	6a 00                	push   0x0
c001559d:	68 f2 43 01 c0       	push   0xc00143f2
c00155a2:	6a 08                	push   0x8
c00155a4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155a7:	ff d0                	call   eax
c00155a9:	83 c4 10             	add    esp,0x10
c00155ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155af:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b1:	83 c0 24             	add    eax,0x24
c00155b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b6:	6a 00                	push   0x0
c00155b8:	68 cc 4c 01 c0       	push   0xc0014ccc
c00155bd:	6a 09                	push   0x9
c00155bf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155c2:	ff d0                	call   eax
c00155c4:	83 c4 10             	add    esp,0x10
c00155c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00155cc:	83 c0 24             	add    eax,0x24
c00155cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00155d1:	6a 00                	push   0x0
c00155d3:	68 cc 4c 01 c0       	push   0xc0014ccc
c00155d8:	6a 0a                	push   0xa
c00155da:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155dd:	ff d0                	call   eax
c00155df:	83 c4 10             	add    esp,0x10
c00155e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e7:	83 c0 24             	add    eax,0x24
c00155ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ec:	6a 00                	push   0x0
c00155ee:	68 cc 4c 01 c0       	push   0xc0014ccc
c00155f3:	6a 0b                	push   0xb
c00155f5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155f8:	ff d0                	call   eax
c00155fa:	83 c4 10             	add    esp,0x10
c00155fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015600:	8b 00                	mov    eax,DWORD PTR [eax]
c0015602:	83 c0 24             	add    eax,0x24
c0015605:	8b 00                	mov    eax,DWORD PTR [eax]
c0015607:	6a 00                	push   0x0
c0015609:	68 cc 4c 01 c0       	push   0xc0014ccc
c001560e:	6a 0c                	push   0xc
c0015610:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015613:	ff d0                	call   eax
c0015615:	83 c4 10             	add    esp,0x10
c0015618:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001561b:	8b 00                	mov    eax,DWORD PTR [eax]
c001561d:	83 c0 24             	add    eax,0x24
c0015620:	8b 00                	mov    eax,DWORD PTR [eax]
c0015622:	6a 00                	push   0x0
c0015624:	68 7c 4c 01 c0       	push   0xc0014c7c
c0015629:	6a 0d                	push   0xd
c001562b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001562e:	ff d0                	call   eax
c0015630:	83 c4 10             	add    esp,0x10
c0015633:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015636:	8b 00                	mov    eax,DWORD PTR [eax]
c0015638:	83 c0 24             	add    eax,0x24
c001563b:	8b 00                	mov    eax,DWORD PTR [eax]
c001563d:	6a 00                	push   0x0
c001563f:	68 b5 4c 01 c0       	push   0xc0014cb5
c0015644:	6a 0e                	push   0xe
c0015646:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015649:	ff d0                	call   eax
c001564b:	83 c4 10             	add    esp,0x10
c001564e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015651:	8b 00                	mov    eax,DWORD PTR [eax]
c0015653:	83 c0 24             	add    eax,0x24
c0015656:	8b 00                	mov    eax,DWORD PTR [eax]
c0015658:	6a 00                	push   0x0
c001565a:	68 cc 4c 01 c0       	push   0xc0014ccc
c001565f:	6a 0f                	push   0xf
c0015661:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015664:	ff d0                	call   eax
c0015666:	83 c4 10             	add    esp,0x10
c0015669:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001566c:	8b 00                	mov    eax,DWORD PTR [eax]
c001566e:	83 c0 24             	add    eax,0x24
c0015671:	8b 00                	mov    eax,DWORD PTR [eax]
c0015673:	6a 00                	push   0x0
c0015675:	68 cc 4c 01 c0       	push   0xc0014ccc
c001567a:	6a 10                	push   0x10
c001567c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001567f:	ff d0                	call   eax
c0015681:	83 c4 10             	add    esp,0x10
c0015684:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015687:	8b 00                	mov    eax,DWORD PTR [eax]
c0015689:	83 c0 24             	add    eax,0x24
c001568c:	8b 00                	mov    eax,DWORD PTR [eax]
c001568e:	6a 00                	push   0x0
c0015690:	68 cc 4c 01 c0       	push   0xc0014ccc
c0015695:	6a 11                	push   0x11
c0015697:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001569a:	ff d0                	call   eax
c001569c:	83 c4 10             	add    esp,0x10
c001569f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00156a4:	83 c0 24             	add    eax,0x24
c00156a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00156a9:	6a 00                	push   0x0
c00156ab:	68 cc 4c 01 c0       	push   0xc0014ccc
c00156b0:	6a 12                	push   0x12
c00156b2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156b5:	ff d0                	call   eax
c00156b7:	83 c4 10             	add    esp,0x10
c00156ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00156bf:	83 c0 24             	add    eax,0x24
c00156c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00156c4:	6a 00                	push   0x0
c00156c6:	68 cc 4c 01 c0       	push   0xc0014ccc
c00156cb:	6a 13                	push   0x13
c00156cd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156d0:	ff d0                	call   eax
c00156d2:	83 c4 10             	add    esp,0x10
c00156d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00156da:	83 c0 24             	add    eax,0x24
c00156dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00156df:	6a 00                	push   0x0
c00156e1:	68 cc 4c 01 c0       	push   0xc0014ccc
c00156e6:	6a 14                	push   0x14
c00156e8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156eb:	ff d0                	call   eax
c00156ed:	83 c4 10             	add    esp,0x10
c00156f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00156f5:	83 c0 24             	add    eax,0x24
c00156f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00156fa:	6a 00                	push   0x0
c00156fc:	68 cc 4c 01 c0       	push   0xc0014ccc
c0015701:	6a 1e                	push   0x1e
c0015703:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015706:	ff d0                	call   eax
c0015708:	83 c4 10             	add    esp,0x10
c001570b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001570e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015710:	83 c0 24             	add    eax,0x24
c0015713:	8b 00                	mov    eax,DWORD PTR [eax]
c0015715:	6a 00                	push   0x0
c0015717:	68 fe c6 01 c0       	push   0xc001c6fe
c001571c:	6a 60                	push   0x60
c001571e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015721:	ff d0                	call   eax
c0015723:	83 c4 10             	add    esp,0x10
c0015726:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015729:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001572c:	c9                   	leave  
c001572d:	c3                   	ret    

c001572e <InterruptController::convertLegacyIRQNumber(int)>:
c001572e:	55                   	push   ebp
c001572f:	89 e5                	mov    ebp,esp
c0015731:	83 ec 08             	sub    esp,0x8
c0015734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015737:	83 ec 0c             	sub    esp,0xc
c001573a:	50                   	push   eax
c001573b:	e8 c8 e8 ff ff       	call   c0014008 <Device::getName()>
c0015740:	83 c4 10             	add    esp,0x10
c0015743:	8a 00                	mov    al,BYTE PTR [eax]
c0015745:	3c 41                	cmp    al,0x41
c0015747:	0f 94 c0             	sete   al
c001574a:	84 c0                	test   al,al
c001574c:	74 28                	je     c0015776 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001574e:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015752:	7f 12                	jg     c0015766 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015754:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015757:	05 60 e2 02 c0       	add    eax,0xc002e260
c001575c:	8a 00                	mov    al,BYTE PTR [eax]
c001575e:	0f b6 c0             	movzx  eax,al
c0015761:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015764:	eb 10                	jmp    c0015776 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015766:	83 ec 0c             	sub    esp,0xc
c0015769:	68 d8 b6 02 c0       	push   0xc002b6d8
c001576e:	e8 92 4b 00 00       	call   c001a305 <Krnl::panic(char const*)>
c0015773:	83 c4 10             	add    esp,0x10
c0015776:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015779:	c9                   	leave  
c001577a:	c3                   	ret    
c001577b:	90                   	nop

c001577c <startGUI(void*)>:
c001577c:	55                   	push   ebp
c001577d:	89 e5                	mov    ebp,esp
c001577f:	53                   	push   ebx
c0015780:	83 ec 04             	sub    esp,0x4
c0015783:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0015788:	48                   	dec    eax
c0015789:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001578e:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0015793:	85 c0                	test   eax,eax
c0015795:	75 01                	jne    c0015798 <startGUI(void*)+0x1c>
c0015797:	fb                   	sti    
c0015798:	8b 1d 08 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f008
c001579e:	83 ec 08             	sub    esp,0x8
c00157a1:	6a 01                	push   0x1
c00157a3:	68 4c ba 02 c0       	push   0xc002ba4c
c00157a8:	e8 2c 7f 00 00       	call   c001d6d9 <Thr::loadDLL(char const*, bool)>
c00157ad:	83 c4 10             	add    esp,0x10
c00157b0:	83 ec 08             	sub    esp,0x8
c00157b3:	53                   	push   ebx
c00157b4:	50                   	push   eax
c00157b5:	e8 4a 81 00 00       	call   c001d904 <Thr::executeDLL(unsigned long, void*)>
c00157ba:	83 c4 10             	add    esp,0x10
c00157bd:	8b 1d 08 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f008
c00157c3:	83 ec 08             	sub    esp,0x8
c00157c6:	6a 01                	push   0x1
c00157c8:	68 66 ba 02 c0       	push   0xc002ba66
c00157cd:	e8 07 7f 00 00       	call   c001d6d9 <Thr::loadDLL(char const*, bool)>
c00157d2:	83 c4 10             	add    esp,0x10
c00157d5:	83 ec 08             	sub    esp,0x8
c00157d8:	53                   	push   ebx
c00157d9:	50                   	push   eax
c00157da:	e8 25 81 00 00       	call   c001d904 <Thr::executeDLL(unsigned long, void*)>
c00157df:	83 c4 10             	add    esp,0x10
c00157e2:	90                   	nop
c00157e3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00157e6:	c9                   	leave  
c00157e7:	c3                   	ret    

c00157e8 <startGUIVESA(void*)>:
c00157e8:	55                   	push   ebp
c00157e9:	89 e5                	mov    ebp,esp
c00157eb:	53                   	push   ebx
c00157ec:	83 ec 04             	sub    esp,0x4
c00157ef:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c00157f4:	48                   	dec    eax
c00157f5:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c00157fa:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c00157ff:	85 c0                	test   eax,eax
c0015801:	75 01                	jne    c0015804 <startGUIVESA(void*)+0x1c>
c0015803:	fb                   	sti    
c0015804:	8b 1d 08 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f008
c001580a:	83 ec 08             	sub    esp,0x8
c001580d:	6a 01                	push   0x1
c001580f:	68 80 ba 02 c0       	push   0xc002ba80
c0015814:	e8 c0 7e 00 00       	call   c001d6d9 <Thr::loadDLL(char const*, bool)>
c0015819:	83 c4 10             	add    esp,0x10
c001581c:	83 ec 08             	sub    esp,0x8
c001581f:	53                   	push   ebx
c0015820:	50                   	push   eax
c0015821:	e8 de 80 00 00       	call   c001d904 <Thr::executeDLL(unsigned long, void*)>
c0015826:	83 c4 10             	add    esp,0x10
c0015829:	8b 1d 08 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f008
c001582f:	83 ec 08             	sub    esp,0x8
c0015832:	6a 01                	push   0x1
c0015834:	68 66 ba 02 c0       	push   0xc002ba66
c0015839:	e8 9b 7e 00 00       	call   c001d6d9 <Thr::loadDLL(char const*, bool)>
c001583e:	83 c4 10             	add    esp,0x10
c0015841:	83 ec 08             	sub    esp,0x8
c0015844:	53                   	push   ebx
c0015845:	50                   	push   eax
c0015846:	e8 b9 80 00 00       	call   c001d904 <Thr::executeDLL(unsigned long, void*)>
c001584b:	83 c4 10             	add    esp,0x10
c001584e:	90                   	nop
c001584f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015852:	c9                   	leave  
c0015853:	c3                   	ret    

c0015854 <sendKeyToTerminal(unsigned char)>:
c0015854:	55                   	push   ebp
c0015855:	89 e5                	mov    ebp,esp
c0015857:	83 ec 28             	sub    esp,0x28
c001585a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015860:	a1 c4 f0 02 c0       	mov    eax,ds:0xc002f0c4
c0015865:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015869:	83 ec 08             	sub    esp,0x8
c001586c:	52                   	push   edx
c001586d:	50                   	push   eax
c001586e:	e8 25 b4 ff ff       	call   c0010c98 <VgaText::receiveKey(unsigned char)>
c0015873:	83 c4 10             	add    esp,0x10
c0015876:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c001587a:	0f 85 8f 00 00 00    	jne    c001590f <sendKeyToTerminal(unsigned char)+0xbb>
c0015880:	fa                   	cli    
c0015881:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0015886:	40                   	inc    eax
c0015887:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001588c:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c0015891:	40                   	inc    eax
c0015892:	a3 24 25 03 c0       	mov    ds:0xc0032524,eax
c0015897:	a1 a0 f1 02 c0       	mov    eax,ds:0xc002f1a0
c001589c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001589f:	c7 05 a0 f1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f1a0,0x0
c00158a9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00158ad:	74 1f                	je     c00158ce <sendKeyToTerminal(unsigned char)+0x7a>
c00158af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158b2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00158b5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00158b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00158bb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00158be:	83 ec 0c             	sub    esp,0xc
c00158c1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00158c4:	e8 b3 8c 00 00       	call   c001e57c <unblockTask(ThreadControlBlock*)>
c00158c9:	83 c4 10             	add    esp,0x10
c00158cc:	eb db                	jmp    c00158a9 <sendKeyToTerminal(unsigned char)+0x55>
c00158ce:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c00158d3:	48                   	dec    eax
c00158d4:	a3 24 25 03 c0       	mov    ds:0xc0032524,eax
c00158d9:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c00158de:	85 c0                	test   eax,eax
c00158e0:	75 18                	jne    c00158fa <sendKeyToTerminal(unsigned char)+0xa6>
c00158e2:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c00158e7:	85 c0                	test   eax,eax
c00158e9:	74 0f                	je     c00158fa <sendKeyToTerminal(unsigned char)+0xa6>
c00158eb:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c00158f5:	e8 be 87 00 00       	call   c001e0b8 <schedule()>
c00158fa:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c00158ff:	48                   	dec    eax
c0015900:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c0015905:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001590a:	85 c0                	test   eax,eax
c001590c:	75 01                	jne    c001590f <sendKeyToTerminal(unsigned char)+0xbb>
c001590e:	fb                   	sti    
c001590f:	90                   	nop
c0015910:	c9                   	leave  
c0015911:	c3                   	ret    

c0015912 <sendKeyboardToken(KeyboardToken)>:
c0015912:	55                   	push   ebp
c0015913:	89 e5                	mov    ebp,esp
c0015915:	83 ec 18             	sub    esp,0x18
c0015918:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001591b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001591e:	0f b7 c0             	movzx  eax,ax
c0015921:	83 f2 01             	xor    edx,0x1
c0015924:	88 90 c0 f1 02 c0    	mov    BYTE PTR [eax-0x3ffd0e40],dl
c001592a:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c001592f:	85 c0                	test   eax,eax
c0015931:	74 24                	je     c0015957 <sendKeyboardToken(KeyboardToken)+0x45>
c0015933:	8b 0d a8 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f1a8
c0015939:	83 ec 04             	sub    esp,0x4
c001593c:	68 c0 f1 02 c0       	push   0xc002f1c0
c0015941:	83 ec 08             	sub    esp,0x8
c0015944:	89 e2                	mov    edx,esp
c0015946:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015949:	89 02                	mov    DWORD PTR [edx],eax
c001594b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001594e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015952:	ff d1                	call   ecx
c0015954:	83 c4 10             	add    esp,0x10
c0015957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001595a:	66 3d 03 02          	cmp    ax,0x203
c001595e:	75 07                	jne    c0015967 <sendKeyboardToken(KeyboardToken)+0x55>
c0015960:	a0 c0 f2 02 c0       	mov    al,ds:0xc002f2c0
c0015965:	84 c0                	test   al,al
c0015967:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001596b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001596e:	a0 c8 f5 02 c0       	mov    al,ds:0xc002f5c8
c0015973:	38 c2                	cmp    dl,al
c0015975:	74 1c                	je     c0015993 <sendKeyboardToken(KeyboardToken)+0x81>
c0015977:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001597a:	a2 c8 f5 02 c0       	mov    ds:0xc002f5c8,al
c001597f:	a0 c8 f5 02 c0       	mov    al,ds:0xc002f5c8
c0015984:	0f b6 c0             	movzx  eax,al
c0015987:	83 ec 0c             	sub    esp,0xc
c001598a:	50                   	push   eax
c001598b:	e8 60 a8 ff ff       	call   c00101f0 <setTerminalScrollLock(bool)>
c0015990:	83 c4 10             	add    esp,0x10
c0015993:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015996:	84 c0                	test   al,al
c0015998:	0f 84 ae 00 00 00    	je     c0015a4c <sendKeyboardToken(KeyboardToken)+0x13a>
c001599e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a1:	66 3d 10 03          	cmp    ax,0x310
c00159a5:	75 06                	jne    c00159ad <sendKeyboardToken(KeyboardToken)+0x9b>
c00159a7:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00159ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b0:	66 3d 11 03          	cmp    ax,0x311
c00159b4:	75 06                	jne    c00159bc <sendKeyboardToken(KeyboardToken)+0xaa>
c00159b6:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00159bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159bf:	66 3d 12 03          	cmp    ax,0x312
c00159c3:	75 06                	jne    c00159cb <sendKeyboardToken(KeyboardToken)+0xb9>
c00159c5:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00159cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ce:	66 3d 13 03          	cmp    ax,0x313
c00159d2:	75 06                	jne    c00159da <sendKeyboardToken(KeyboardToken)+0xc8>
c00159d4:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00159da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159dd:	66 3d 14 03          	cmp    ax,0x314
c00159e1:	75 06                	jne    c00159e9 <sendKeyboardToken(KeyboardToken)+0xd7>
c00159e3:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00159e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159ec:	66 3d 15 03          	cmp    ax,0x315
c00159f0:	75 06                	jne    c00159f8 <sendKeyboardToken(KeyboardToken)+0xe6>
c00159f2:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00159f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159fb:	66 3d 16 03          	cmp    ax,0x316
c00159ff:	75 06                	jne    c0015a07 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015a01:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015a07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a0a:	66 3d 17 03          	cmp    ax,0x317
c0015a0e:	75 06                	jne    c0015a16 <sendKeyboardToken(KeyboardToken)+0x104>
c0015a10:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015a16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a19:	66 3d 18 03          	cmp    ax,0x318
c0015a1d:	75 06                	jne    c0015a25 <sendKeyboardToken(KeyboardToken)+0x113>
c0015a1f:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015a25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a28:	66 3d 19 03          	cmp    ax,0x319
c0015a2c:	75 06                	jne    c0015a34 <sendKeyboardToken(KeyboardToken)+0x122>
c0015a2e:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015a34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a37:	66 3d 1a 03          	cmp    ax,0x31a
c0015a3b:	0f 85 c9 00 00 00    	jne    c0015b0a <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015a41:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015a47:	e9 be 00 00 00       	jmp    c0015b0a <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015a4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a4f:	66 3d 10 03          	cmp    ax,0x310
c0015a53:	75 0a                	jne    c0015a5f <sendKeyboardToken(KeyboardToken)+0x14d>
c0015a55:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015a5b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a62:	66 3d 11 03          	cmp    ax,0x311
c0015a66:	75 0a                	jne    c0015a72 <sendKeyboardToken(KeyboardToken)+0x160>
c0015a68:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015a6e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a75:	66 3d 12 03          	cmp    ax,0x312
c0015a79:	75 0a                	jne    c0015a85 <sendKeyboardToken(KeyboardToken)+0x173>
c0015a7b:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015a81:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a88:	66 3d 13 03          	cmp    ax,0x313
c0015a8c:	75 0a                	jne    c0015a98 <sendKeyboardToken(KeyboardToken)+0x186>
c0015a8e:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015a94:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a9b:	66 3d 14 03          	cmp    ax,0x314
c0015a9f:	75 0a                	jne    c0015aab <sendKeyboardToken(KeyboardToken)+0x199>
c0015aa1:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015aa7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015aab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aae:	66 3d 15 03          	cmp    ax,0x315
c0015ab2:	75 0a                	jne    c0015abe <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015ab4:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015aba:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015abe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac1:	66 3d 16 03          	cmp    ax,0x316
c0015ac5:	75 0a                	jne    c0015ad1 <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015ac7:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015acd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ad1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ad4:	66 3d 17 03          	cmp    ax,0x317
c0015ad8:	75 0a                	jne    c0015ae4 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015ada:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015ae0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ae4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ae7:	66 3d 18 03          	cmp    ax,0x318
c0015aeb:	75 0a                	jne    c0015af7 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015aed:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015af3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015af7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015afa:	66 3d 19 03          	cmp    ax,0x319
c0015afe:	75 0a                	jne    c0015b0a <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015b00:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015b06:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015b0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b0d:	66 3d 00 02          	cmp    ax,0x200
c0015b11:	75 2c                	jne    c0015b3f <sendKeyboardToken(KeyboardToken)+0x22d>
c0015b13:	a0 c0 f5 02 c0       	mov    al,ds:0xc002f5c0
c0015b18:	83 f0 01             	xor    eax,0x1
c0015b1b:	84 c0                	test   al,al
c0015b1d:	74 20                	je     c0015b3f <sendKeyboardToken(KeyboardToken)+0x22d>
c0015b1f:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0015b24:	6a 01                	push   0x1
c0015b26:	6a 00                	push   0x0
c0015b28:	68 7c 57 01 c0       	push   0xc001577c
c0015b2d:	50                   	push   eax
c0015b2e:	e8 41 83 00 00       	call   c001de74 <Process::createThread(void (*)(void*), void*, int)>
c0015b33:	83 c4 10             	add    esp,0x10
c0015b36:	c6 05 c0 f5 02 c0 01 	mov    BYTE PTR ds:0xc002f5c0,0x1
c0015b3d:	eb 33                	jmp    c0015b72 <sendKeyboardToken(KeyboardToken)+0x260>
c0015b3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b42:	66 3d 01 02          	cmp    ax,0x201
c0015b46:	75 2a                	jne    c0015b72 <sendKeyboardToken(KeyboardToken)+0x260>
c0015b48:	a0 c0 f5 02 c0       	mov    al,ds:0xc002f5c0
c0015b4d:	83 f0 01             	xor    eax,0x1
c0015b50:	84 c0                	test   al,al
c0015b52:	74 1e                	je     c0015b72 <sendKeyboardToken(KeyboardToken)+0x260>
c0015b54:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0015b59:	6a 01                	push   0x1
c0015b5b:	6a 00                	push   0x0
c0015b5d:	68 e8 57 01 c0       	push   0xc00157e8
c0015b62:	50                   	push   eax
c0015b63:	e8 0c 83 00 00       	call   c001de74 <Process::createThread(void (*)(void*), void*, int)>
c0015b68:	83 c4 10             	add    esp,0x10
c0015b6b:	c6 05 c0 f5 02 c0 01 	mov    BYTE PTR ds:0xc002f5c0,0x1
c0015b72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b75:	66 3d 1d 03          	cmp    ax,0x31d
c0015b79:	75 06                	jne    c0015b81 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015b7b:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015b81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b84:	66 3d 1c 03          	cmp    ax,0x31c
c0015b88:	75 06                	jne    c0015b90 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015b8a:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015b90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b93:	66 3d 1b 03          	cmp    ax,0x31b
c0015b97:	75 06                	jne    c0015b9f <sendKeyboardToken(KeyboardToken)+0x28d>
c0015b99:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015b9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ba2:	66 3d 1e 03          	cmp    ax,0x31e
c0015ba6:	75 06                	jne    c0015bae <sendKeyboardToken(KeyboardToken)+0x29c>
c0015ba8:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015bae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bb1:	66 3d 1f 03          	cmp    ax,0x31f
c0015bb5:	75 06                	jne    c0015bbd <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015bb7:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015bbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bc0:	66 3d 1a 03          	cmp    ax,0x31a
c0015bc4:	75 06                	jne    c0015bcc <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015bc6:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015bcc:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015bd0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015bd3:	83 f0 01             	xor    eax,0x1
c0015bd6:	84 c0                	test   al,al
c0015bd8:	74 77                	je     c0015c51 <sendKeyboardToken(KeyboardToken)+0x33f>
c0015bda:	a0 c1 f2 02 c0       	mov    al,ds:0xc002f2c1
c0015bdf:	84 c0                	test   al,al
c0015be1:	74 41                	je     c0015c24 <sendKeyboardToken(KeyboardToken)+0x312>
c0015be3:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015be7:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015beb:	74 2b                	je     c0015c18 <sendKeyboardToken(KeyboardToken)+0x306>
c0015bed:	8b 15 c4 f5 02 c0    	mov    edx,DWORD PTR ds:0xc002f5c4
c0015bf3:	89 d0                	mov    eax,edx
c0015bf5:	c1 e0 02             	shl    eax,0x2
c0015bf8:	01 d0                	add    eax,edx
c0015bfa:	01 c0                	add    eax,eax
c0015bfc:	a3 c4 f5 02 c0       	mov    ds:0xc002f5c4,eax
c0015c01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c04:	0f b7 c0             	movzx  eax,ax
c0015c07:	8d 50 d0             	lea    edx,[eax-0x30]
c0015c0a:	a1 c4 f5 02 c0       	mov    eax,ds:0xc002f5c4
c0015c0f:	01 d0                	add    eax,edx
c0015c11:	a3 c4 f5 02 c0       	mov    ds:0xc002f5c4,eax
c0015c16:	eb 6d                	jmp    c0015c85 <sendKeyboardToken(KeyboardToken)+0x373>
c0015c18:	c7 05 c4 f5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f5c4,0x0
c0015c22:	eb 61                	jmp    c0015c85 <sendKeyboardToken(KeyboardToken)+0x373>
c0015c24:	a1 c4 f5 02 c0       	mov    eax,ds:0xc002f5c4
c0015c29:	85 c0                	test   eax,eax
c0015c2b:	74 18                	je     c0015c45 <sendKeyboardToken(KeyboardToken)+0x333>
c0015c2d:	a1 c4 f5 02 c0       	mov    eax,ds:0xc002f5c4
c0015c32:	0f b6 c0             	movzx  eax,al
c0015c35:	83 ec 0c             	sub    esp,0xc
c0015c38:	50                   	push   eax
c0015c39:	e8 16 fc ff ff       	call   c0015854 <sendKeyToTerminal(unsigned char)>
c0015c3e:	83 c4 10             	add    esp,0x10
c0015c41:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015c45:	c7 05 c4 f5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f5c4,0x0
c0015c4f:	eb 34                	jmp    c0015c85 <sendKeyboardToken(KeyboardToken)+0x373>
c0015c51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c54:	66 3d 01 01          	cmp    ax,0x101
c0015c58:	75 2b                	jne    c0015c85 <sendKeyboardToken(KeyboardToken)+0x373>
c0015c5a:	a1 c4 f5 02 c0       	mov    eax,ds:0xc002f5c4
c0015c5f:	85 c0                	test   eax,eax
c0015c61:	74 18                	je     c0015c7b <sendKeyboardToken(KeyboardToken)+0x369>
c0015c63:	a1 c4 f5 02 c0       	mov    eax,ds:0xc002f5c4
c0015c68:	0f b6 c0             	movzx  eax,al
c0015c6b:	83 ec 0c             	sub    esp,0xc
c0015c6e:	50                   	push   eax
c0015c6f:	e8 e0 fb ff ff       	call   c0015854 <sendKeyToTerminal(unsigned char)>
c0015c74:	83 c4 10             	add    esp,0x10
c0015c77:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015c7b:	c7 05 c4 f5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f5c4,0x0
c0015c85:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015c88:	83 f0 01             	xor    eax,0x1
c0015c8b:	84 c0                	test   al,al
c0015c8d:	74 4c                	je     c0015cdb <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c8f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015c92:	83 f0 01             	xor    eax,0x1
c0015c95:	84 c0                	test   al,al
c0015c97:	74 42                	je     c0015cdb <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c99:	a0 c0 f2 02 c0       	mov    al,ds:0xc002f2c0
c0015c9e:	83 f0 01             	xor    eax,0x1
c0015ca1:	84 c0                	test   al,al
c0015ca3:	74 36                	je     c0015cdb <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015ca5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ca8:	66 83 f8 1f          	cmp    ax,0x1f
c0015cac:	76 09                	jbe    c0015cb7 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015cae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cb1:	66 83 f8 7e          	cmp    ax,0x7e
c0015cb5:	76 12                	jbe    c0015cc9 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015cb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cba:	66 83 f8 0a          	cmp    ax,0xa
c0015cbe:	74 09                	je     c0015cc9 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015cc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cc3:	66 83 f8 08          	cmp    ax,0x8
c0015cc7:	75 12                	jne    c0015cdb <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015cc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ccc:	0f b6 c0             	movzx  eax,al
c0015ccf:	83 ec 0c             	sub    esp,0xc
c0015cd2:	50                   	push   eax
c0015cd3:	e8 7c fb ff ff       	call   c0015854 <sendKeyToTerminal(unsigned char)>
c0015cd8:	83 c4 10             	add    esp,0x10
c0015cdb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015cde:	83 f0 01             	xor    eax,0x1
c0015ce1:	84 c0                	test   al,al
c0015ce3:	74 4f                	je     c0015d34 <sendKeyboardToken(KeyboardToken)+0x422>
c0015ce5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015ce8:	83 f0 01             	xor    eax,0x1
c0015ceb:	84 c0                	test   al,al
c0015ced:	74 45                	je     c0015d34 <sendKeyboardToken(KeyboardToken)+0x422>
c0015cef:	a0 c0 f2 02 c0       	mov    al,ds:0xc002f2c0
c0015cf4:	84 c0                	test   al,al
c0015cf6:	74 3c                	je     c0015d34 <sendKeyboardToken(KeyboardToken)+0x422>
c0015cf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cfb:	66 83 f8 3f          	cmp    ax,0x3f
c0015cff:	76 33                	jbe    c0015d34 <sendKeyboardToken(KeyboardToken)+0x422>
c0015d01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d04:	66 83 f8 7f          	cmp    ax,0x7f
c0015d08:	77 2a                	ja     c0015d34 <sendKeyboardToken(KeyboardToken)+0x422>
c0015d0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d0d:	88 c2                	mov    dl,al
c0015d0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d12:	66 83 f8 5f          	cmp    ax,0x5f
c0015d16:	76 04                	jbe    c0015d1c <sendKeyboardToken(KeyboardToken)+0x40a>
c0015d18:	b0 20                	mov    al,0x20
c0015d1a:	eb 02                	jmp    c0015d1e <sendKeyboardToken(KeyboardToken)+0x40c>
c0015d1c:	b0 00                	mov    al,0x0
c0015d1e:	29 c2                	sub    edx,eax
c0015d20:	88 d0                	mov    al,dl
c0015d22:	83 e8 40             	sub    eax,0x40
c0015d25:	0f b6 c0             	movzx  eax,al
c0015d28:	83 ec 0c             	sub    esp,0xc
c0015d2b:	50                   	push   eax
c0015d2c:	e8 23 fb ff ff       	call   c0015854 <sendKeyToTerminal(unsigned char)>
c0015d31:	83 c4 10             	add    esp,0x10
c0015d34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d37:	66 3d 00 03          	cmp    ax,0x300
c0015d3b:	75 0f                	jne    c0015d4c <sendKeyboardToken(KeyboardToken)+0x43a>
c0015d3d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d40:	83 f0 01             	xor    eax,0x1
c0015d43:	84 c0                	test   al,al
c0015d45:	74 05                	je     c0015d4c <sendKeyboardToken(KeyboardToken)+0x43a>
c0015d47:	e8 4c aa ff ff       	call   c0010798 <doTerminalCycle()>
c0015d4c:	90                   	nop
c0015d4d:	c9                   	leave  
c0015d4e:	c3                   	ret    

c0015d4f <clearInternalKeybuffer(VgaText*)>:
c0015d4f:	55                   	push   ebp
c0015d50:	89 e5                	mov    ebp,esp
c0015d52:	83 ec 08             	sub    esp,0x8
c0015d55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d58:	05 98 01 00 00       	add    eax,0x198
c0015d5d:	83 ec 0c             	sub    esp,0xc
c0015d60:	50                   	push   eax
c0015d61:	e8 06 aa fe ff       	call   c000076c <strlen>
c0015d66:	83 c4 10             	add    esp,0x10
c0015d69:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015d6c:	81 c2 98 01 00 00    	add    edx,0x198
c0015d72:	83 ec 04             	sub    esp,0x4
c0015d75:	50                   	push   eax
c0015d76:	6a 00                	push   0x0
c0015d78:	52                   	push   edx
c0015d79:	e8 d2 a9 fe ff       	call   c0000750 <memset>
c0015d7e:	83 c4 10             	add    esp,0x10
c0015d81:	90                   	nop
c0015d82:	c9                   	leave  
c0015d83:	c3                   	ret    

c0015d84 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015d84:	55                   	push   ebp
c0015d85:	89 e5                	mov    ebp,esp
c0015d87:	83 ec 18             	sub    esp,0x18
c0015d8a:	a1 a8 f1 02 c0       	mov    eax,ds:0xc002f1a8
c0015d8f:	85 c0                	test   eax,eax
c0015d91:	74 2a                	je     c0015dbd <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015d93:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015d99:	8b 0d a8 f1 02 c0    	mov    ecx,DWORD PTR ds:0xc002f1a8
c0015d9f:	83 ec 04             	sub    esp,0x4
c0015da2:	68 c0 f1 02 c0       	push   0xc002f1c0
c0015da7:	83 ec 08             	sub    esp,0x8
c0015daa:	89 e2                	mov    edx,esp
c0015dac:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015daf:	89 02                	mov    DWORD PTR [edx],eax
c0015db1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015db4:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015db8:	ff d1                	call   ecx
c0015dba:	83 c4 10             	add    esp,0x10
c0015dbd:	83 ec 0c             	sub    esp,0xc
c0015dc0:	68 9b ba 02 c0       	push   0xc002ba9b
c0015dc5:	e8 05 cb ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0015dca:	83 c4 10             	add    esp,0x10
c0015dcd:	fb                   	sti    
c0015dce:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015dd5:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015dd9:	0f 84 a1 00 00 00    	je     c0015e80 <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c0015ddf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015de2:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015de8:	84 c0                	test   al,al
c0015dea:	75 28                	jne    c0015e14 <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c0015dec:	fa                   	cli    
c0015ded:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0015df2:	40                   	inc    eax
c0015df3:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c0015df8:	e8 bb 82 00 00       	call   c001e0b8 <schedule()>
c0015dfd:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0015e02:	48                   	dec    eax
c0015e03:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c0015e08:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0015e0d:	85 c0                	test   eax,eax
c0015e0f:	75 ce                	jne    c0015ddf <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0015e11:	fb                   	sti    
c0015e12:	eb cb                	jmp    c0015ddf <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0015e14:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e17:	8d 50 01             	lea    edx,[eax+0x1]
c0015e1a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015e1d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e20:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015e26:	88 10                	mov    BYTE PTR [eax],dl
c0015e28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e2b:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015e31:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015e34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e37:	05 98 01 00 00       	add    eax,0x198
c0015e3c:	83 ec 0c             	sub    esp,0xc
c0015e3f:	50                   	push   eax
c0015e40:	e8 27 a9 fe ff       	call   c000076c <strlen>
c0015e45:	83 c4 10             	add    esp,0x10
c0015e48:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e4b:	81 c2 98 01 00 00    	add    edx,0x198
c0015e51:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015e54:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e57:	81 c2 98 01 00 00    	add    edx,0x198
c0015e5d:	83 ec 04             	sub    esp,0x4
c0015e60:	50                   	push   eax
c0015e61:	51                   	push   ecx
c0015e62:	52                   	push   edx
c0015e63:	e8 20 a8 fe ff       	call   c0000688 <memmove>
c0015e68:	83 c4 10             	add    esp,0x10
c0015e6b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015e6e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015e71:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015e75:	0f 85 5a ff ff ff    	jne    c0015dd5 <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c0015e7b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e7e:	eb 03                	jmp    c0015e83 <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c0015e80:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e83:	c9                   	leave  
c0015e84:	c3                   	ret    
c0015e85:	90                   	nop

c0015e86 <Keyboard::Keyboard(char const*)>:
c0015e86:	83 ec 0c             	sub    esp,0xc
c0015e89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e8d:	83 ec 08             	sub    esp,0x8
c0015e90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e94:	50                   	push   eax
c0015e95:	e8 72 e0 ff ff       	call   c0013f0c <Device::Device(char const*)>
c0015e9a:	83 c4 10             	add    esp,0x10
c0015e9d:	ba bc ba 02 c0       	mov    edx,0xc002babc
c0015ea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ea6:	89 10                	mov    DWORD PTR [eax],edx
c0015ea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015eac:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015eb6:	c6 05 a4 f1 02 c0 01 	mov    BYTE PTR ds:0xc002f1a4,0x1
c0015ebd:	90                   	nop
c0015ebe:	83 c4 0c             	add    esp,0xc
c0015ec1:	c3                   	ret    

c0015ec2 <Keyboard::~Keyboard()>:
c0015ec2:	83 ec 0c             	sub    esp,0xc
c0015ec5:	ba bc ba 02 c0       	mov    edx,0xc002babc
c0015eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ece:	89 10                	mov    DWORD PTR [eax],edx
c0015ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ed4:	83 ec 0c             	sub    esp,0xc
c0015ed7:	50                   	push   eax
c0015ed8:	e8 f9 dc ff ff       	call   c0013bd6 <Device::~Device()>
c0015edd:	83 c4 10             	add    esp,0x10
c0015ee0:	90                   	nop
c0015ee1:	83 c4 0c             	add    esp,0xc
c0015ee4:	c3                   	ret    
c0015ee5:	90                   	nop

c0015ee6 <Keyboard::~Keyboard()>:
c0015ee6:	83 ec 0c             	sub    esp,0xc
c0015ee9:	83 ec 0c             	sub    esp,0xc
c0015eec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ef0:	e8 cd ff ff ff       	call   c0015ec2 <Keyboard::~Keyboard()>
c0015ef5:	83 c4 10             	add    esp,0x10
c0015ef8:	83 ec 08             	sub    esp,0x8
c0015efb:	68 5c 01 00 00       	push   0x15c
c0015f00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f04:	e8 e6 c8 ff ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0015f09:	83 c4 10             	add    esp,0x10
c0015f0c:	83 c4 0c             	add    esp,0xc
c0015f0f:	c3                   	ret    

c0015f10 <LogicalDisk::close(int, int, void*)>:
c0015f10:	83 c8 ff             	or     eax,0xffffffff
c0015f13:	c3                   	ret    

c0015f14 <LogicalDisk::~LogicalDisk()>:
c0015f14:	83 ec 0c             	sub    esp,0xc
c0015f17:	ba 6c bb 02 c0       	mov    edx,0xc002bb6c
c0015f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f20:	89 10                	mov    DWORD PTR [eax],edx
c0015f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f26:	83 ec 0c             	sub    esp,0xc
c0015f29:	50                   	push   eax
c0015f2a:	e8 a7 dc ff ff       	call   c0013bd6 <Device::~Device()>
c0015f2f:	83 c4 10             	add    esp,0x10
c0015f32:	90                   	nop
c0015f33:	83 c4 0c             	add    esp,0xc
c0015f36:	c3                   	ret    
c0015f37:	90                   	nop

c0015f38 <LogicalDisk::~LogicalDisk()>:
c0015f38:	83 ec 0c             	sub    esp,0xc
c0015f3b:	83 ec 0c             	sub    esp,0xc
c0015f3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f42:	e8 cd ff ff ff       	call   c0015f14 <LogicalDisk::~LogicalDisk()>
c0015f47:	83 c4 10             	add    esp,0x10
c0015f4a:	83 ec 08             	sub    esp,0x8
c0015f4d:	68 74 01 00 00       	push   0x174
c0015f52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f56:	e8 94 c8 ff ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0015f5b:	83 c4 10             	add    esp,0x10
c0015f5e:	83 c4 0c             	add    esp,0xc
c0015f61:	c3                   	ret    

c0015f62 <LogicalDisk::open(int, int, void*)>:
c0015f62:	83 ec 18             	sub    esp,0x18
c0015f65:	68 e8 ba 02 c0       	push   0xc002bae8
c0015f6a:	e8 96 43 00 00       	call   c001a305 <Krnl::panic(char const*)>
c0015f6f:	83 c8 ff             	or     eax,0xffffffff
c0015f72:	83 c4 1c             	add    esp,0x1c
c0015f75:	c3                   	ret    

c0015f76 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015f76:	53                   	push   ebx
c0015f77:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015f7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f7f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f83:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015f89:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015f8f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015f95:	77 10                	ja     c0015fa7 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015f97:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015f9d:	89 d3                	mov    ebx,edx
c0015f9f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015fa5:	72 05                	jb     c0015fac <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015fa7:	83 c8 ff             	or     eax,0xffffffff
c0015faa:	89 c2                	mov    edx,eax
c0015fac:	5b                   	pop    ebx
c0015fad:	c3                   	ret    

c0015fae <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015fae:	56                   	push   esi
c0015faf:	83 c8 ff             	or     eax,0xffffffff
c0015fb2:	53                   	push   ebx
c0015fb3:	89 c2                	mov    edx,eax
c0015fb5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015fb9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015fbd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015fc1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015fc7:	77 27                	ja     c0015ff0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015fc9:	89 d8                	mov    eax,ebx
c0015fcb:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015fd1:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015fd7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015fdc:	89 c2                	mov    edx,eax
c0015fde:	73 10                	jae    c0015ff0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015fe0:	89 c8                	mov    eax,ecx
c0015fe2:	89 da                	mov    edx,ebx
c0015fe4:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015fea:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015ff0:	5b                   	pop    ebx
c0015ff1:	5e                   	pop    esi
c0015ff2:	c3                   	ret    
c0015ff3:	90                   	nop

c0015ff4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015ff4:	83 ec 1c             	sub    esp,0x1c
c0015ff7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015ffb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015fff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016003:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016007:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001600b:	89 04 24             	mov    DWORD PTR [esp],eax
c001600e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016012:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001601a:	83 ec 08             	sub    esp,0x8
c001601d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016021:	50                   	push   eax
c0016022:	e8 e5 de ff ff       	call   c0013f0c <Device::Device(char const*)>
c0016027:	83 c4 10             	add    esp,0x10
c001602a:	ba 6c bb 02 c0       	mov    edx,0xc002bb6c
c001602f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016033:	89 10                	mov    DWORD PTR [eax],edx
c0016035:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016039:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016040:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016044:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001604b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001604f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016059:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001605d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016061:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016065:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001606b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016071:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016075:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016078:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001607c:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016082:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016088:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001608c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016090:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016096:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001609a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00160a4:	90                   	nop
c00160a5:	83 c4 1c             	add    esp,0x1c
c00160a8:	c3                   	ret    
c00160a9:	90                   	nop

c00160aa <LogicalDisk::assignDriveLetter()>:
c00160aa:	55                   	push   ebp
c00160ab:	57                   	push   edi
c00160ac:	56                   	push   esi
c00160ad:	53                   	push   ebx
c00160ae:	83 ec 14             	sub    esp,0x14
c00160b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00160b5:	8b 3d e0 f5 02 c0    	mov    edi,DWORD PTR ds:0xc002f5e0
c00160bb:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00160c1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00160c5:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00160cb:	8b 3d e4 f5 02 c0    	mov    edi,DWORD PTR ds:0xc002f5e4
c00160d1:	3c 01                	cmp    al,0x1
c00160d3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00160d7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00160db:	19 c0                	sbb    eax,eax
c00160dd:	83 e0 02             	and    eax,0x2
c00160e0:	83 c0 41             	add    eax,0x41
c00160e3:	0f be e8             	movsx  ebp,al
c00160e6:	3c 43                	cmp    al,0x43
c00160e8:	75 10                	jne    c00160fa <LogicalDisk::assignDriveLetter()+0x50>
c00160ea:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00160f1:	75 5d                	jne    c0016150 <LogicalDisk::assignDriveLetter()+0xa6>
c00160f3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00160f8:	75 56                	jne    c0016150 <LogicalDisk::assignDriveLetter()+0xa6>
c00160fa:	8d 75 bf             	lea    esi,[ebp-0x41]
c00160fd:	ba 01 00 00 00       	mov    edx,0x1
c0016102:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016106:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001610a:	d3 e2                	shl    edx,cl
c001610c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016110:	89 d7                	mov    edi,edx
c0016112:	89 d6                	mov    esi,edx
c0016114:	c1 ff 1f             	sar    edi,0x1f
c0016117:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001611b:	21 f9                	and    ecx,edi
c001611d:	09 d1                	or     ecx,edx
c001611f:	75 2f                	jne    c0016150 <LogicalDisk::assignDriveLetter()+0xa6>
c0016121:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016125:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016129:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001612f:	09 f2                	or     edx,esi
c0016131:	89 15 e0 f5 02 c0    	mov    DWORD PTR ds:0xc002f5e0,edx
c0016137:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001613b:	09 fa                	or     edx,edi
c001613d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016141:	89 15 e4 f5 02 c0    	mov    DWORD PTR ds:0xc002f5e4,edx
c0016147:	89 1c bd 00 f6 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0a00],ebx
c001614e:	eb 08                	jmp    c0016158 <LogicalDisk::assignDriveLetter()+0xae>
c0016150:	45                   	inc    ebp
c0016151:	40                   	inc    eax
c0016152:	3c 5b                	cmp    al,0x5b
c0016154:	75 90                	jne    c00160e6 <LogicalDisk::assignDriveLetter()+0x3c>
c0016156:	31 c0                	xor    eax,eax
c0016158:	83 c4 14             	add    esp,0x14
c001615b:	5b                   	pop    ebx
c001615c:	5e                   	pop    esi
c001615d:	5f                   	pop    edi
c001615e:	5d                   	pop    ebp
c001615f:	c3                   	ret    

c0016160 <LogicalDisk::mount()>:
c0016160:	56                   	push   esi
c0016161:	53                   	push   ebx
c0016162:	50                   	push   eax
c0016163:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016167:	8b 1d 74 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f174
c001616d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016177:	85 db                	test   ebx,ebx
c0016179:	74 50                	je     c00161cb <LogicalDisk::mount()+0x6b>
c001617b:	50                   	push   eax
c001617c:	50                   	push   eax
c001617d:	ff 35 28 25 03 c0    	push   DWORD PTR ds:0xc0032528
c0016183:	68 0c bb 02 c0       	push   0xc002bb0c
c0016188:	e8 42 c7 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001618d:	83 c4 0c             	add    esp,0xc
c0016190:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016197:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016199:	83 e8 41             	sub    eax,0x41
c001619c:	50                   	push   eax
c001619d:	56                   	push   esi
c001619e:	53                   	push   ebx
c001619f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00161a2:	83 c4 10             	add    esp,0x10
c00161a5:	84 c0                	test   al,al
c00161a7:	74 08                	je     c00161b1 <LogicalDisk::mount()+0x51>
c00161a9:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00161af:	eb 1c                	jmp    c00161cd <LogicalDisk::mount()+0x6d>
c00161b1:	51                   	push   ecx
c00161b2:	51                   	push   ecx
c00161b3:	ff 35 28 25 03 c0    	push   DWORD PTR ds:0xc0032528
c00161b9:	68 27 bb 02 c0       	push   0xc002bb27
c00161be:	e8 0c c7 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00161c3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00161c6:	83 c4 10             	add    esp,0x10
c00161c9:	eb ac                	jmp    c0016177 <LogicalDisk::mount()+0x17>
c00161cb:	31 c0                	xor    eax,eax
c00161cd:	5a                   	pop    edx
c00161ce:	5b                   	pop    ebx
c00161cf:	5e                   	pop    esi
c00161d0:	c3                   	ret    
c00161d1:	90                   	nop

c00161d2 <LogicalDisk::unmount()>:
c00161d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00161d6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00161e0:	c3                   	ret    
c00161e1:	90                   	nop

c00161e2 <LogicalDisk::eject()>:
c00161e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00161e6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00161ec:	8b 10                	mov    edx,DWORD PTR [eax]
c00161ee:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00161f2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00161f5:	90                   	nop

c00161f6 <LogicalDisk::unassignDriveLetter()>:
c00161f6:	57                   	push   edi
c00161f7:	56                   	push   esi
c00161f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00161fc:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016203:	84 c9                	test   cl,cl
c0016205:	75 0f                	jne    c0016216 <LogicalDisk::unassignDriveLetter()+0x20>
c0016207:	c7 44 24 0c 42 bb 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bb42
c001620f:	5e                   	pop    esi
c0016210:	5f                   	pop    edi
c0016211:	e9 ef 40 00 00       	jmp    c001a305 <Krnl::panic(char const*)>
c0016216:	83 e9 41             	sub    ecx,0x41
c0016219:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016220:	b8 01 00 00 00       	mov    eax,0x1
c0016225:	c7 04 8d 00 f6 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0a00],0x0
c0016230:	d3 e0                	shl    eax,cl
c0016232:	89 c7                	mov    edi,eax
c0016234:	f7 d0                	not    eax
c0016236:	c1 ff 1f             	sar    edi,0x1f
c0016239:	21 05 e0 f5 02 c0    	and    DWORD PTR ds:0xc002f5e0,eax
c001623f:	89 fe                	mov    esi,edi
c0016241:	f7 d6                	not    esi
c0016243:	21 35 e4 f5 02 c0    	and    DWORD PTR ds:0xc002f5e4,esi
c0016249:	5e                   	pop    esi
c001624a:	5f                   	pop    edi
c001624b:	c3                   	ret    

c001624c <LogicalDisk::read(unsigned long long, int, void*)>:
c001624c:	57                   	push   edi
c001624d:	56                   	push   esi
c001624e:	53                   	push   ebx
c001624f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016253:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016257:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001625b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001625f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016265:	77 41                	ja     c00162a8 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016267:	99                   	cdq    
c0016268:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001626e:	01 c8                	add    eax,ecx
c0016270:	11 da                	adc    edx,ebx
c0016272:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016278:	19 d7                	sbb    edi,edx
c001627a:	72 33                	jb     c00162af <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001627c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016282:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016288:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001628c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016290:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016296:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001629c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00162a0:	5b                   	pop    ebx
c00162a1:	5e                   	pop    esi
c00162a2:	5f                   	pop    edi
c00162a3:	e9 ec 0a 00 00       	jmp    c0016d94 <VCache::read(unsigned long long, int, void*)>
c00162a8:	b8 05 00 00 00       	mov    eax,0x5
c00162ad:	eb 05                	jmp    c00162b4 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00162af:	b8 07 00 00 00       	mov    eax,0x7
c00162b4:	5b                   	pop    ebx
c00162b5:	5e                   	pop    esi
c00162b6:	5f                   	pop    edi
c00162b7:	c3                   	ret    

c00162b8 <LogicalDisk::write(unsigned long long, int, void*)>:
c00162b8:	57                   	push   edi
c00162b9:	56                   	push   esi
c00162ba:	53                   	push   ebx
c00162bb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00162bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162c3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00162c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162cb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00162d1:	77 41                	ja     c0016314 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00162d3:	99                   	cdq    
c00162d4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00162da:	01 c8                	add    eax,ecx
c00162dc:	11 da                	adc    edx,ebx
c00162de:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00162e4:	19 d7                	sbb    edi,edx
c00162e6:	72 33                	jb     c001631b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00162e8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00162ee:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00162f4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00162f8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00162fc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016302:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016308:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001630c:	5b                   	pop    ebx
c001630d:	5e                   	pop    esi
c001630e:	5f                   	pop    edi
c001630f:	e9 96 09 00 00       	jmp    c0016caa <VCache::write(unsigned long long, int, void*)>
c0016314:	b8 05 00 00 00       	mov    eax,0x5
c0016319:	eb 05                	jmp    c0016320 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001631b:	b8 07 00 00 00       	mov    eax,0x7
c0016320:	5b                   	pop    ebx
c0016321:	5e                   	pop    esi
c0016322:	5f                   	pop    edi
c0016323:	c3                   	ret    

c0016324 <Mouse::Mouse(char const*)>:
c0016324:	83 ec 0c             	sub    esp,0xc
c0016327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001632b:	83 ec 08             	sub    esp,0x8
c001632e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016332:	50                   	push   eax
c0016333:	e8 d4 db ff ff       	call   c0013f0c <Device::Device(char const*)>
c0016338:	83 c4 10             	add    esp,0x10
c001633b:	ba 98 bb 02 c0       	mov    edx,0xc002bb98
c0016340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016344:	89 10                	mov    DWORD PTR [eax],edx
c0016346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001634a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016354:	90                   	nop
c0016355:	83 c4 0c             	add    esp,0xc
c0016358:	c3                   	ret    
c0016359:	90                   	nop

c001635a <Mouse::~Mouse()>:
c001635a:	83 ec 0c             	sub    esp,0xc
c001635d:	ba 98 bb 02 c0       	mov    edx,0xc002bb98
c0016362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016366:	89 10                	mov    DWORD PTR [eax],edx
c0016368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001636c:	83 ec 0c             	sub    esp,0xc
c001636f:	50                   	push   eax
c0016370:	e8 61 d8 ff ff       	call   c0013bd6 <Device::~Device()>
c0016375:	83 c4 10             	add    esp,0x10
c0016378:	90                   	nop
c0016379:	83 c4 0c             	add    esp,0xc
c001637c:	c3                   	ret    
c001637d:	90                   	nop

c001637e <Mouse::~Mouse()>:
c001637e:	83 ec 0c             	sub    esp,0xc
c0016381:	83 ec 0c             	sub    esp,0xc
c0016384:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016388:	e8 cd ff ff ff       	call   c001635a <Mouse::~Mouse()>
c001638d:	83 c4 10             	add    esp,0x10
c0016390:	83 ec 08             	sub    esp,0x8
c0016393:	68 58 01 00 00       	push   0x158
c0016398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001639c:	e8 4e c4 ff ff       	call   c00127ef <operator delete(void*, unsigned long)>
c00163a1:	83 c4 10             	add    esp,0x10
c00163a4:	83 c4 0c             	add    esp,0xc
c00163a7:	c3                   	ret    

c00163a8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00163a8:	55                   	push   ebp
c00163a9:	57                   	push   edi
c00163aa:	56                   	push   esi
c00163ab:	53                   	push   ebx
c00163ac:	81 ec 20 01 00 00    	sub    esp,0x120
c00163b2:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c00163b9:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00163c0:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00163c7:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00163ce:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00163d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00163d6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00163da:	56                   	push   esi
c00163db:	68 bc bb 02 c0       	push   0xc002bbbc
c00163e0:	e8 ea c4 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00163e5:	58                   	pop    eax
c00163e6:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00163ed:	e8 16 dc ff ff       	call   c0014008 <Device::getName()>
c00163f2:	5a                   	pop    edx
c00163f3:	59                   	pop    ecx
c00163f4:	50                   	push   eax
c00163f5:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00163f9:	53                   	push   ebx
c00163fa:	e8 0d a4 fe ff       	call   c000080c <strcpy>
c00163ff:	5d                   	pop    ebp
c0016400:	58                   	pop    eax
c0016401:	68 ed bb 02 c0       	push   0xc002bbed
c0016406:	53                   	push   ebx
c0016407:	e8 40 a5 fe ff       	call   c000094c <strcat>
c001640c:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016413:	e8 74 94 ff ff       	call   c000f88c <malloc>
c0016418:	83 c4 0c             	add    esp,0xc
c001641b:	89 c5                	mov    ebp,eax
c001641d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016421:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016425:	57                   	push   edi
c0016426:	56                   	push   esi
c0016427:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001642e:	53                   	push   ebx
c001642f:	50                   	push   eax
c0016430:	e8 bf fb ff ff       	call   c0015ff4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016435:	83 c4 14             	add    esp,0x14
c0016438:	55                   	push   ebp
c0016439:	e8 6c fc ff ff       	call   c00160aa <LogicalDisk::assignDriveLetter()>
c001643e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016441:	0f be d8             	movsx  ebx,al
c0016444:	e8 17 fd ff ff       	call   c0016160 <LogicalDisk::mount()>
c0016449:	58                   	pop    eax
c001644a:	5a                   	pop    edx
c001644b:	55                   	push   ebp
c001644c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016453:	e8 b0 d8 ff ff       	call   c0013d08 <Device::addChild(Device*)>
c0016458:	59                   	pop    ecx
c0016459:	5e                   	pop    esi
c001645a:	53                   	push   ebx
c001645b:	68 f8 bb 02 c0       	push   0xc002bbf8
c0016460:	e8 6a c4 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0016465:	81 c4 2c 01 00 00    	add    esp,0x12c
c001646b:	5b                   	pop    ebx
c001646c:	5e                   	pop    esi
c001646d:	5f                   	pop    edi
c001646e:	5d                   	pop    ebp
c001646f:	c3                   	ret    

c0016470 <createPartitionsForDisk(PhysicalDisk*)>:
c0016470:	55                   	push   ebp
c0016471:	57                   	push   edi
c0016472:	56                   	push   esi
c0016473:	53                   	push   ebx
c0016474:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001647a:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016481:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016487:	3d 00 02 00 00       	cmp    eax,0x200
c001648c:	74 27                	je     c00164b5 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001648e:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016494:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001649a:	83 ec 10             	sub    esp,0x10
c001649d:	0f a4 f7 0a          	shld   edi,esi,0xa
c00164a1:	99                   	cdq    
c00164a2:	c1 e6 0a             	shl    esi,0xa
c00164a5:	52                   	push   edx
c00164a6:	89 fd                	mov    ebp,edi
c00164a8:	50                   	push   eax
c00164a9:	55                   	push   ebp
c00164aa:	56                   	push   esi
c00164ab:	e8 44 0d 01 00       	call   c00271f4 <__udivdi3>
c00164b0:	e9 b1 00 00 00       	jmp    c0016566 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00164b5:	83 ec 0c             	sub    esp,0xc
c00164b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00164ba:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00164be:	56                   	push   esi
c00164bf:	6a 01                	push   0x1
c00164c1:	6a 00                	push   0x0
c00164c3:	6a 00                	push   0x0
c00164c5:	53                   	push   ebx
c00164c6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00164c9:	83 c4 20             	add    esp,0x20
c00164cc:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00164d4:	75 0a                	jne    c00164e0 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00164d6:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00164de:	74 2c                	je     c001650c <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00164e0:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00164e6:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00164ec:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00164f2:	83 ec 10             	sub    esp,0x10
c00164f5:	0f a4 c2 0a          	shld   edx,eax,0xa
c00164f9:	89 f7                	mov    edi,esi
c00164fb:	c1 e0 0a             	shl    eax,0xa
c00164fe:	c1 ff 1f             	sar    edi,0x1f
c0016501:	57                   	push   edi
c0016502:	56                   	push   esi
c0016503:	52                   	push   edx
c0016504:	50                   	push   eax
c0016505:	e8 ea 0c 01 00       	call   c00271f4 <__udivdi3>
c001650a:	eb 5a                	jmp    c0016566 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001650c:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016513:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001651a:	83 e1 7f             	and    ecx,0x7f
c001651d:	83 e0 7f             	and    eax,0x7f
c0016520:	01 c1                	add    ecx,eax
c0016522:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016529:	83 e0 7f             	and    eax,0x7f
c001652c:	01 c1                	add    ecx,eax
c001652e:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016535:	83 e0 7f             	and    eax,0x7f
c0016538:	00 c1                	add    cl,al
c001653a:	74 41                	je     c001657d <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001653c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016542:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016548:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001654e:	83 ec 10             	sub    esp,0x10
c0016551:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016555:	89 f7                	mov    edi,esi
c0016557:	c1 e0 0a             	shl    eax,0xa
c001655a:	c1 ff 1f             	sar    edi,0x1f
c001655d:	57                   	push   edi
c001655e:	56                   	push   esi
c001655f:	52                   	push   edx
c0016560:	50                   	push   eax
c0016561:	e8 8e 0c 01 00       	call   c00271f4 <__udivdi3>
c0016566:	83 c4 14             	add    esp,0x14
c0016569:	52                   	push   edx
c001656a:	50                   	push   eax
c001656b:	6a 00                	push   0x0
c001656d:	6a 00                	push   0x0
c001656f:	53                   	push   ebx
c0016570:	e8 33 fe ff ff       	call   c00163a8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016575:	83 c4 20             	add    esp,0x20
c0016578:	e9 79 01 00 00       	jmp    c00166f6 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001657d:	89 f0                	mov    eax,esi
c001657f:	31 f6                	xor    esi,esi
c0016581:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016588:	75 02                	jne    c001658c <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001658a:	89 f1                	mov    ecx,esi
c001658c:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016593:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001659a:	c1 e2 08             	shl    edx,0x8
c001659d:	c1 e7 10             	shl    edi,0x10
c00165a0:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00165a8:	09 fa                	or     edx,edi
c00165aa:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00165b2:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00165b9:	83 c0 10             	add    eax,0x10
c00165bc:	09 fa                	or     edx,edi
c00165be:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00165c5:	c1 e7 18             	shl    edi,0x18
c00165c8:	09 fa                	or     edx,edi
c00165ca:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00165d1:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00165d5:	c1 e7 10             	shl    edi,0x10
c00165d8:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00165df:	c1 e2 08             	shl    edx,0x8
c00165e2:	09 fa                	or     edx,edi
c00165e4:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00165eb:	09 fa                	or     edx,edi
c00165ed:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00165f4:	c1 e7 18             	shl    edi,0x18
c00165f7:	09 fa                	or     edx,edi
c00165f9:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00165fd:	46                   	inc    esi
c00165fe:	83 fe 04             	cmp    esi,0x4
c0016601:	0f 85 7a ff ff ff    	jne    c0016581 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001660b:	83 f0 01             	xor    eax,0x1
c001660e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016612:	75 57                	jne    c001666b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016614:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016618:	83 f0 01             	xor    eax,0x1
c001661b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001661f:	75 4a                	jne    c001666b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016621:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016625:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001662d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016635:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001663b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016641:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016647:	0f a4 c2 0a          	shld   edx,eax,0xa
c001664b:	89 f7                	mov    edi,esi
c001664d:	c1 e0 0a             	shl    eax,0xa
c0016650:	c1 ff 1f             	sar    edi,0x1f
c0016653:	57                   	push   edi
c0016654:	56                   	push   esi
c0016655:	52                   	push   edx
c0016656:	50                   	push   eax
c0016657:	e8 98 0b 01 00       	call   c00271f4 <__udivdi3>
c001665c:	83 c4 10             	add    esp,0x10
c001665f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016663:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016667:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001666b:	84 c9                	test   cl,cl
c001666d:	74 53                	je     c00166c2 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001666f:	0f b6 c9             	movzx  ecx,cl
c0016672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016676:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001667a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001667e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016682:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016686:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001668a:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001668e:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016692:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016696:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001669e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166a2:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00166a6:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00166aa:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00166ae:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00166b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00166b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00166ba:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00166be:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00166c2:	31 ed                	xor    ebp,ebp
c00166c4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00166c8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00166cc:	89 f8                	mov    eax,edi
c00166ce:	09 f0                	or     eax,esi
c00166d0:	74 1e                	je     c00166f0 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00166d2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00166d6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00166da:	89 d1                	mov    ecx,edx
c00166dc:	09 c1                	or     ecx,eax
c00166de:	74 10                	je     c00166f0 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00166e0:	83 ec 0c             	sub    esp,0xc
c00166e3:	57                   	push   edi
c00166e4:	56                   	push   esi
c00166e5:	52                   	push   edx
c00166e6:	50                   	push   eax
c00166e7:	53                   	push   ebx
c00166e8:	e8 bb fc ff ff       	call   c00163a8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00166ed:	83 c4 20             	add    esp,0x20
c00166f0:	45                   	inc    ebp
c00166f1:	83 fd 04             	cmp    ebp,0x4
c00166f4:	75 ce                	jne    c00166c4 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00166f6:	81 c4 5c 02 00 00    	add    esp,0x25c
c00166fc:	5b                   	pop    ebx
c00166fd:	5e                   	pop    esi
c00166fe:	5f                   	pop    edi
c00166ff:	5d                   	pop    ebp
c0016700:	c3                   	ret    
c0016701:	90                   	nop

c0016702 <Serial::Serial(char const*)>:
c0016702:	83 ec 0c             	sub    esp,0xc
c0016705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016709:	83 ec 08             	sub    esp,0x8
c001670c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016710:	50                   	push   eax
c0016711:	e8 f6 d7 ff ff       	call   c0013f0c <Device::Device(char const*)>
c0016716:	83 c4 10             	add    esp,0x10
c0016719:	ba 24 bc 02 c0       	mov    edx,0xc002bc24
c001671e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016722:	89 10                	mov    DWORD PTR [eax],edx
c0016724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016728:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016732:	90                   	nop
c0016733:	83 c4 0c             	add    esp,0xc
c0016736:	c3                   	ret    
c0016737:	90                   	nop

c0016738 <Serial::~Serial()>:
c0016738:	83 ec 0c             	sub    esp,0xc
c001673b:	ba 24 bc 02 c0       	mov    edx,0xc002bc24
c0016740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016744:	89 10                	mov    DWORD PTR [eax],edx
c0016746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001674a:	83 ec 0c             	sub    esp,0xc
c001674d:	50                   	push   eax
c001674e:	e8 83 d4 ff ff       	call   c0013bd6 <Device::~Device()>
c0016753:	83 c4 10             	add    esp,0x10
c0016756:	90                   	nop
c0016757:	83 c4 0c             	add    esp,0xc
c001675a:	c3                   	ret    
c001675b:	90                   	nop

c001675c <Serial::~Serial()>:
c001675c:	83 ec 0c             	sub    esp,0xc
c001675f:	83 ec 0c             	sub    esp,0xc
c0016762:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016766:	e8 cd ff ff ff       	call   c0016738 <Serial::~Serial()>
c001676b:	83 c4 10             	add    esp,0x10
c001676e:	83 ec 08             	sub    esp,0x8
c0016771:	68 58 01 00 00       	push   0x158
c0016776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001677a:	e8 70 c0 ff ff       	call   c00127ef <operator delete(void*, unsigned long)>
c001677f:	83 c4 10             	add    esp,0x10
c0016782:	83 c4 0c             	add    esp,0xc
c0016785:	c3                   	ret    

c0016786 <Timer::Timer(char const*)>:
c0016786:	83 ec 0c             	sub    esp,0xc
c0016789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001678d:	83 ec 08             	sub    esp,0x8
c0016790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016794:	50                   	push   eax
c0016795:	e8 72 d7 ff ff       	call   c0013f0c <Device::Device(char const*)>
c001679a:	83 c4 10             	add    esp,0x10
c001679d:	ba 68 bc 02 c0       	mov    edx,0xc002bc68
c00167a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167a6:	89 10                	mov    DWORD PTR [eax],edx
c00167a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ac:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00167b6:	90                   	nop
c00167b7:	83 c4 0c             	add    esp,0xc
c00167ba:	c3                   	ret    
c00167bb:	90                   	nop

c00167bc <Timer::~Timer()>:
c00167bc:	83 ec 0c             	sub    esp,0xc
c00167bf:	ba 68 bc 02 c0       	mov    edx,0xc002bc68
c00167c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167c8:	89 10                	mov    DWORD PTR [eax],edx
c00167ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ce:	83 ec 0c             	sub    esp,0xc
c00167d1:	50                   	push   eax
c00167d2:	e8 ff d3 ff ff       	call   c0013bd6 <Device::~Device()>
c00167d7:	83 c4 10             	add    esp,0x10
c00167da:	90                   	nop
c00167db:	83 c4 0c             	add    esp,0xc
c00167de:	c3                   	ret    
c00167df:	90                   	nop

c00167e0 <Timer::~Timer()>:
c00167e0:	83 ec 0c             	sub    esp,0xc
c00167e3:	83 ec 0c             	sub    esp,0xc
c00167e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167ea:	e8 cd ff ff ff       	call   c00167bc <Timer::~Timer()>
c00167ef:	83 c4 10             	add    esp,0x10
c00167f2:	83 ec 08             	sub    esp,0x8
c00167f5:	68 5c 01 00 00       	push   0x15c
c00167fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167fe:	e8 ec bf ff ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0016803:	83 c4 10             	add    esp,0x10
c0016806:	83 c4 0c             	add    esp,0xc
c0016809:	c3                   	ret    

c001680a <Timer::read()>:
c001680a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001680e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016814:	c3                   	ret    

c0016815 <timerHandler(unsigned long long)>:
c0016815:	55                   	push   ebp
c0016816:	57                   	push   edi
c0016817:	56                   	push   esi
c0016818:	53                   	push   ebx
c0016819:	83 ec 0c             	sub    esp,0xc
c001681c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016820:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016824:	01 35 70 f6 02 c0    	add    DWORD PTR ds:0xc002f670,esi
c001682a:	11 3d 74 f6 02 c0    	adc    DWORD PTR ds:0xc002f674,edi
c0016830:	80 3d 0d f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f00d,0x0
c0016837:	0f 84 42 01 00 00    	je     c001697f <timerHandler(unsigned long long)+0x16a>
c001683d:	fa                   	cli    
c001683e:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c0016844:	83 ec 0c             	sub    esp,0xc
c0016847:	ff 05 24 25 03 c0    	inc    DWORD PTR ds:0xc0032524
c001684d:	68 38 25 03 c0       	push   0xc0032538
c0016852:	e8 23 2a 01 00       	call   c002927a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016857:	83 c4 10             	add    esp,0x10
c001685a:	84 c0                	test   al,al
c001685c:	0f 85 a2 00 00 00    	jne    c0016904 <timerHandler(unsigned long long)+0xef>
c0016862:	83 ec 0c             	sub    esp,0xc
c0016865:	68 38 25 03 c0       	push   0xc0032538
c001686a:	e8 27 2a 01 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001686f:	83 c4 10             	add    esp,0x10
c0016872:	89 c3                	mov    ebx,eax
c0016874:	83 ec 0c             	sub    esp,0xc
c0016877:	68 38 25 03 c0       	push   0xc0032538
c001687c:	e8 15 2a 01 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016881:	c7 04 24 38 25 03 c0 	mov    DWORD PTR [esp],0xc0032538
c0016888:	89 c5                	mov    ebp,eax
c001688a:	e8 0f 2a 01 00       	call   c002929e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001688f:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016892:	83 c4 10             	add    esp,0x10
c0016895:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016898:	39 15 70 f6 02 c0    	cmp    DWORD PTR ds:0xc002f670,edx
c001689e:	a1 74 f6 02 c0       	mov    eax,ds:0xc002f674
c00168a3:	19 c8                	sbb    eax,ecx
c00168a5:	72 21                	jb     c00168c8 <timerHandler(unsigned long long)+0xb3>
c00168a7:	83 ec 0c             	sub    esp,0xc
c00168aa:	55                   	push   ebp
c00168ab:	e8 cc 7c 00 00       	call   c001e57c <unblockTask(ThreadControlBlock*)>
c00168b0:	83 c4 10             	add    esp,0x10
c00168b3:	39 eb                	cmp    ebx,ebp
c00168b5:	75 21                	jne    c00168d8 <timerHandler(unsigned long long)+0xc3>
c00168b7:	83 ec 0c             	sub    esp,0xc
c00168ba:	68 38 25 03 c0       	push   0xc0032538
c00168bf:	e8 d2 29 01 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168c4:	89 c3                	mov    ebx,eax
c00168c6:	eb 0d                	jmp    c00168d5 <timerHandler(unsigned long long)+0xc0>
c00168c8:	50                   	push   eax
c00168c9:	50                   	push   eax
c00168ca:	55                   	push   ebp
c00168cb:	68 38 25 03 c0       	push   0xc0032538
c00168d0:	e8 77 2a 01 00       	call   c002934c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00168d5:	83 c4 10             	add    esp,0x10
c00168d8:	83 ec 0c             	sub    esp,0xc
c00168db:	68 38 25 03 c0       	push   0xc0032538
c00168e0:	e8 95 29 01 00       	call   c002927a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00168e5:	83 c4 10             	add    esp,0x10
c00168e8:	84 c0                	test   al,al
c00168ea:	75 18                	jne    c0016904 <timerHandler(unsigned long long)+0xef>
c00168ec:	83 ec 0c             	sub    esp,0xc
c00168ef:	68 38 25 03 c0       	push   0xc0032538
c00168f4:	e8 9d 29 01 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168f9:	83 c4 10             	add    esp,0x10
c00168fc:	39 d8                	cmp    eax,ebx
c00168fe:	0f 85 70 ff ff ff    	jne    c0016874 <timerHandler(unsigned long long)+0x5f>
c0016904:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016909:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c001690d:	74 3d                	je     c001694c <timerHandler(unsigned long long)+0x137>
c001690f:	80 3d 0c f0 02 c0 00 	cmp    BYTE PTR ds:0xc002f00c,0x0
c0016916:	74 34                	je     c001694c <timerHandler(unsigned long long)+0x137>
c0016918:	fa                   	cli    
c0016919:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001691f:	31 d2                	xor    edx,edx
c0016921:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016926:	89 f9                	mov    ecx,edi
c0016928:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001692b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016930:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016933:	39 c6                	cmp    esi,eax
c0016935:	19 d1                	sbb    ecx,edx
c0016937:	72 05                	jb     c001693e <timerHandler(unsigned long long)+0x129>
c0016939:	e8 7a 77 00 00       	call   c001e0b8 <schedule()>
c001693e:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0016943:	48                   	dec    eax
c0016944:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c0016949:	75 01                	jne    c001694c <timerHandler(unsigned long long)+0x137>
c001694b:	fb                   	sti    
c001694c:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c0016951:	48                   	dec    eax
c0016952:	a3 24 25 03 c0       	mov    ds:0xc0032524,eax
c0016957:	75 18                	jne    c0016971 <timerHandler(unsigned long long)+0x15c>
c0016959:	83 3d 20 25 03 c0 00 	cmp    DWORD PTR ds:0xc0032520,0x0
c0016960:	74 0f                	je     c0016971 <timerHandler(unsigned long long)+0x15c>
c0016962:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c001696c:	e8 47 77 00 00       	call   c001e0b8 <schedule()>
c0016971:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0016976:	48                   	dec    eax
c0016977:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001697c:	75 01                	jne    c001697f <timerHandler(unsigned long long)+0x16a>
c001697e:	fb                   	sti    
c001697f:	83 c4 0c             	add    esp,0xc
c0016982:	5b                   	pop    ebx
c0016983:	5e                   	pop    esi
c0016984:	5f                   	pop    edi
c0016985:	5d                   	pop    ebp
c0016986:	c3                   	ret    

c0016987 <setupTimer(int)>:
c0016987:	57                   	push   edi
c0016988:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001698d:	56                   	push   esi
c001698e:	53                   	push   ebx
c001698f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016993:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016999:	83 ec 0c             	sub    esp,0xc
c001699c:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00169a2:	e8 61 d6 ff ff       	call   c0014008 <Device::getName()>
c00169a7:	83 c4 10             	add    esp,0x10
c00169aa:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00169ad:	0f 85 8d 00 00 00    	jne    c0016a40 <setupTimer(int)+0xb9>
c00169b3:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c00169b8:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00169bf:	74 7f                	je     c0016a40 <setupTimer(int)+0xb9>
c00169c1:	83 ec 0c             	sub    esp,0xc
c00169c4:	68 5c 01 00 00       	push   0x15c
c00169c9:	e8 be 8e ff ff       	call   c000f88c <malloc>
c00169ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00169d1:	89 c3                	mov    ebx,eax
c00169d3:	e8 f8 03 01 00       	call   c0026dd0 <PIT::PIT()>
c00169d8:	59                   	pop    ecx
c00169d9:	5f                   	pop    edi
c00169da:	53                   	push   ebx
c00169db:	ff 35 08 f0 02 c0    	push   DWORD PTR ds:0xc002f008
c00169e1:	e8 22 d3 ff ff       	call   c0013d08 <Device::addChild(Device*)>
c00169e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169e8:	6a 00                	push   0x0
c00169ea:	6a 00                	push   0x0
c00169ec:	56                   	push   esi
c00169ed:	53                   	push   ebx
c00169ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00169f1:	83 c4 14             	add    esp,0x14
c00169f4:	68 60 01 00 00       	push   0x160
c00169f9:	e8 8e 8e ff ff       	call   c000f88c <malloc>
c00169fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a01:	89 c7                	mov    edi,eax
c0016a03:	e8 78 02 01 00       	call   c0026c80 <APICTimer::APICTimer()>
c0016a08:	6a 00                	push   0x0
c0016a0a:	6a 00                	push   0x0
c0016a0c:	56                   	push   esi
c0016a0d:	57                   	push   edi
c0016a0e:	e8 6f 01 01 00       	call   c0026b82 <APICTimer::open(int, int, void*)>
c0016a13:	83 c4 20             	add    esp,0x20
c0016a16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a18:	6a 00                	push   0x0
c0016a1a:	6a 00                	push   0x0
c0016a1c:	6a 00                	push   0x0
c0016a1e:	53                   	push   ebx
c0016a1f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016a22:	58                   	pop    eax
c0016a23:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0016a28:	5a                   	pop    edx
c0016a29:	57                   	push   edi
c0016a2a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016a30:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016a36:	e8 cd d2 ff ff       	call   c0013d08 <Device::addChild(Device*)>
c0016a3b:	83 c4 10             	add    esp,0x10
c0016a3e:	eb 33                	jmp    c0016a73 <setupTimer(int)+0xec>
c0016a40:	83 ec 0c             	sub    esp,0xc
c0016a43:	68 5c 01 00 00       	push   0x15c
c0016a48:	e8 3f 8e ff ff       	call   c000f88c <malloc>
c0016a4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a50:	89 c3                	mov    ebx,eax
c0016a52:	e8 79 03 01 00       	call   c0026dd0 <PIT::PIT()>
c0016a57:	58                   	pop    eax
c0016a58:	5a                   	pop    edx
c0016a59:	53                   	push   ebx
c0016a5a:	ff 35 08 f0 02 c0    	push   DWORD PTR ds:0xc002f008
c0016a60:	e8 a3 d2 ff ff       	call   c0013d08 <Device::addChild(Device*)>
c0016a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a67:	6a 00                	push   0x0
c0016a69:	6a 00                	push   0x0
c0016a6b:	56                   	push   esi
c0016a6c:	53                   	push   ebx
c0016a6d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a70:	83 c4 20             	add    esp,0x20
c0016a73:	89 d8                	mov    eax,ebx
c0016a75:	5b                   	pop    ebx
c0016a76:	5e                   	pop    esi
c0016a77:	5f                   	pop    edi
c0016a78:	c3                   	ret    
c0016a79:	90                   	nop

c0016a7a <VCache::VCache(PhysicalDisk*)>:
c0016a7a:	53                   	push   ebx
c0016a7b:	83 ec 18             	sub    esp,0x18
c0016a7e:	ba 98 bc 02 c0       	mov    edx,0xc002bc98
c0016a83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a87:	89 10                	mov    DWORD PTR [eax],edx
c0016a89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a8d:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a98:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016a9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aa3:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016aaa:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016ab1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ab5:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016abc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016ac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ac7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016ace:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ad2:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016ad6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ada:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016ae1:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aec:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016af0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016af4:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016afc:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b04:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016b0b:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016b13:	83 ec 0c             	sub    esp,0xc
c0016b16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016b1a:	e8 6d 8d ff ff       	call   c000f88c <malloc>
c0016b1f:	83 c4 10             	add    esp,0x10
c0016b22:	89 c3                	mov    ebx,eax
c0016b24:	83 ec 0c             	sub    esp,0xc
c0016b27:	53                   	push   ebx
c0016b28:	e8 35 73 00 00       	call   c001de62 <Mutex::Mutex()>
c0016b2d:	83 c4 10             	add    esp,0x10
c0016b30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b34:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016b37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b3b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016b3f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016b42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b46:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016b4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b51:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016b57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b5b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016b5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b62:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016b68:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b6e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016b72:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016b75:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016b78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b7c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016b80:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b84:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b8a:	05 00 01 00 00       	add    eax,0x100
c0016b8f:	c1 e0 04             	shl    eax,0x4
c0016b92:	83 ec 0c             	sub    esp,0xc
c0016b95:	50                   	push   eax
c0016b96:	e8 f1 8c ff ff       	call   c000f88c <malloc>
c0016b9b:	83 c4 10             	add    esp,0x10
c0016b9e:	89 c2                	mov    edx,eax
c0016ba0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ba4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016ba7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bab:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016bb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bb6:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016bba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016bbe:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016bc4:	c1 e0 07             	shl    eax,0x7
c0016bc7:	83 ec 0c             	sub    esp,0xc
c0016bca:	50                   	push   eax
c0016bcb:	e8 bc 8c ff ff       	call   c000f88c <malloc>
c0016bd0:	83 c4 10             	add    esp,0x10
c0016bd3:	89 c2                	mov    edx,eax
c0016bd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bd9:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016bdc:	90                   	nop
c0016bdd:	83 c4 18             	add    esp,0x18
c0016be0:	5b                   	pop    ebx
c0016be1:	c3                   	ret    

c0016be2 <VCache::invalidateReadBuffer()>:
c0016be2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016be6:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016bec:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016bf0:	c3                   	ret    
c0016bf1:	90                   	nop

c0016bf2 <VCache::writeWriteBuffer()>:
c0016bf2:	53                   	push   ebx
c0016bf3:	83 ec 14             	sub    esp,0x14
c0016bf6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016bfa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016bfd:	8b 10                	mov    edx,DWORD PTR [eax]
c0016bff:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016c02:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016c05:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016c08:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016c0b:	50                   	push   eax
c0016c0c:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016c0f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016c16:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016c1d:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016c21:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016c28:	83 c4 28             	add    esp,0x28
c0016c2b:	5b                   	pop    ebx
c0016c2c:	c3                   	ret    
c0016c2d:	90                   	nop

c0016c2e <VCache::~VCache()>:
c0016c2e:	83 ec 0c             	sub    esp,0xc
c0016c31:	ba 98 bc 02 c0       	mov    edx,0xc002bc98
c0016c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c3a:	89 10                	mov    DWORD PTR [eax],edx
c0016c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c40:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016c43:	84 c0                	test   al,al
c0016c45:	74 0f                	je     c0016c56 <VCache::~VCache()+0x28>
c0016c47:	83 ec 0c             	sub    esp,0xc
c0016c4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c4e:	e8 9f ff ff ff       	call   c0016bf2 <VCache::writeWriteBuffer()>
c0016c53:	83 c4 10             	add    esp,0x10
c0016c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c5a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016c5d:	83 ec 0c             	sub    esp,0xc
c0016c60:	50                   	push   eax
c0016c61:	e8 36 8c ff ff       	call   c000f89c <free>
c0016c66:	83 c4 10             	add    esp,0x10
c0016c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c6d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016c70:	83 ec 0c             	sub    esp,0xc
c0016c73:	50                   	push   eax
c0016c74:	e8 23 8c ff ff       	call   c000f89c <free>
c0016c79:	83 c4 10             	add    esp,0x10
c0016c7c:	90                   	nop
c0016c7d:	83 c4 0c             	add    esp,0xc
c0016c80:	c3                   	ret    
c0016c81:	90                   	nop

c0016c82 <VCache::~VCache()>:
c0016c82:	83 ec 0c             	sub    esp,0xc
c0016c85:	83 ec 0c             	sub    esp,0xc
c0016c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c8c:	e8 9d ff ff ff       	call   c0016c2e <VCache::~VCache()>
c0016c91:	83 c4 10             	add    esp,0x10
c0016c94:	83 ec 08             	sub    esp,0x8
c0016c97:	6a 44                	push   0x44
c0016c99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c9d:	e8 4d bb ff ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0016ca2:	83 c4 10             	add    esp,0x10
c0016ca5:	83 c4 0c             	add    esp,0xc
c0016ca8:	c3                   	ret    
c0016ca9:	90                   	nop

c0016caa <VCache::write(unsigned long long, int, void*)>:
c0016caa:	55                   	push   ebp
c0016cab:	57                   	push   edi
c0016cac:	56                   	push   esi
c0016cad:	53                   	push   ebx
c0016cae:	83 ec 18             	sub    esp,0x18
c0016cb1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016cb5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016cb9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016cbd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016cc0:	e8 2b 77 00 00       	call   c001e3f0 <Semaphore::acquire()>
c0016cc5:	83 c4 10             	add    esp,0x10
c0016cc8:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016ccc:	74 0c                	je     c0016cda <VCache::write(unsigned long long, int, void*)+0x30>
c0016cce:	83 ec 0c             	sub    esp,0xc
c0016cd1:	53                   	push   ebx
c0016cd2:	e8 0b ff ff ff       	call   c0016be2 <VCache::invalidateReadBuffer()>
c0016cd7:	83 c4 10             	add    esp,0x10
c0016cda:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016cde:	74 5c                	je     c0016d3c <VCache::write(unsigned long long, int, void*)+0x92>
c0016ce0:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016ce3:	89 e8                	mov    eax,ebp
c0016ce5:	99                   	cdq    
c0016ce6:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016ce9:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016cec:	89 c1                	mov    ecx,eax
c0016cee:	89 d0                	mov    eax,edx
c0016cf0:	31 f1                	xor    ecx,esi
c0016cf2:	31 f8                	xor    eax,edi
c0016cf4:	09 c1                	or     ecx,eax
c0016cf6:	75 38                	jne    c0016d30 <VCache::write(unsigned long long, int, void*)+0x86>
c0016cf8:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016cfd:	75 31                	jne    c0016d30 <VCache::write(unsigned long long, int, void*)+0x86>
c0016cff:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d02:	89 ef                	mov    edi,ebp
c0016d04:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016d0a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d0e:	0f af f9             	imul   edi,ecx
c0016d11:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016d14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d16:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016d19:	40                   	inc    eax
c0016d1a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016d1d:	83 c0 80             	add    eax,0xffffff80
c0016d20:	75 5c                	jne    c0016d7e <VCache::write(unsigned long long, int, void*)+0xd4>
c0016d22:	83 ec 0c             	sub    esp,0xc
c0016d25:	53                   	push   ebx
c0016d26:	e8 c7 fe ff ff       	call   c0016bf2 <VCache::writeWriteBuffer()>
c0016d2b:	83 c4 10             	add    esp,0x10
c0016d2e:	eb 4e                	jmp    c0016d7e <VCache::write(unsigned long long, int, void*)+0xd4>
c0016d30:	83 ec 0c             	sub    esp,0xc
c0016d33:	53                   	push   ebx
c0016d34:	e8 b9 fe ff ff       	call   c0016bf2 <VCache::writeWriteBuffer()>
c0016d39:	83 c4 10             	add    esp,0x10
c0016d3c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d3f:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016d44:	7f 22                	jg     c0016d68 <VCache::write(unsigned long long, int, void*)+0xbe>
c0016d46:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016d49:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016d4c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016d50:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016d54:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016d57:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016d5a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016d60:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d64:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d66:	eb 16                	jmp    c0016d7e <VCache::write(unsigned long long, int, void*)+0xd4>
c0016d68:	83 ec 0c             	sub    esp,0xc
c0016d6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0016d6d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016d71:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016d75:	57                   	push   edi
c0016d76:	56                   	push   esi
c0016d77:	50                   	push   eax
c0016d78:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016d7b:	83 c4 20             	add    esp,0x20
c0016d7e:	83 ec 0c             	sub    esp,0xc
c0016d81:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d84:	e8 a1 7d 00 00       	call   c001eb2a <Semaphore::release()>
c0016d89:	83 c4 1c             	add    esp,0x1c
c0016d8c:	31 c0                	xor    eax,eax
c0016d8e:	5b                   	pop    ebx
c0016d8f:	5e                   	pop    esi
c0016d90:	5f                   	pop    edi
c0016d91:	5d                   	pop    ebp
c0016d92:	c3                   	ret    
c0016d93:	90                   	nop

c0016d94 <VCache::read(unsigned long long, int, void*)>:
c0016d94:	55                   	push   ebp
c0016d95:	57                   	push   edi
c0016d96:	56                   	push   esi
c0016d97:	53                   	push   ebx
c0016d98:	83 ec 28             	sub    esp,0x28
c0016d9b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016d9f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016da3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016da7:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016dab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016dae:	e8 3d 76 00 00       	call   c001e3f0 <Semaphore::acquire()>
c0016db3:	83 c4 10             	add    esp,0x10
c0016db6:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016dba:	74 0c                	je     c0016dc8 <VCache::read(unsigned long long, int, void*)+0x34>
c0016dbc:	83 ec 0c             	sub    esp,0xc
c0016dbf:	53                   	push   ebx
c0016dc0:	e8 2d fe ff ff       	call   c0016bf2 <VCache::writeWriteBuffer()>
c0016dc5:	83 c4 10             	add    esp,0x10
c0016dc8:	83 fd 01             	cmp    ebp,0x1
c0016dcb:	0f 85 80 00 00 00    	jne    c0016e51 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016dd1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016dd4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016dd8:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016ddf:	75 70                	jne    c0016e51 <VCache::read(unsigned long long, int, void*)+0xbd>
c0016de1:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016de4:	89 e9                	mov    ecx,ebp
c0016de6:	f7 d9                	neg    ecx
c0016de8:	89 c8                	mov    eax,ecx
c0016dea:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016dee:	c1 f8 1f             	sar    eax,0x1f
c0016df1:	21 f1                	and    ecx,esi
c0016df3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016df7:	89 c8                	mov    eax,ecx
c0016df9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016dfd:	21 f9                	and    ecx,edi
c0016dff:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016e03:	89 ca                	mov    edx,ecx
c0016e05:	74 0a                	je     c0016e11 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016e07:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016e0a:	75 05                	jne    c0016e11 <VCache::read(unsigned long long, int, void*)+0x7d>
c0016e0c:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016e0f:	74 23                	je     c0016e34 <VCache::read(unsigned long long, int, void*)+0xa0>
c0016e11:	83 ec 0c             	sub    esp,0xc
c0016e14:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016e18:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016e1c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016e1f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016e22:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016e24:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016e27:	55                   	push   ebp
c0016e28:	52                   	push   edx
c0016e29:	50                   	push   eax
c0016e2a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016e2e:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016e31:	83 c4 20             	add    esp,0x20
c0016e34:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e37:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016e3b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016e41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016e44:	48                   	dec    eax
c0016e45:	21 c6                	and    esi,eax
c0016e47:	0f af f1             	imul   esi,ecx
c0016e4a:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016e4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e4f:	eb 1d                	jmp    c0016e6e <VCache::read(unsigned long long, int, void*)+0xda>
c0016e51:	83 ec 0c             	sub    esp,0xc
c0016e54:	53                   	push   ebx
c0016e55:	e8 88 fd ff ff       	call   c0016be2 <VCache::invalidateReadBuffer()>
c0016e5a:	5a                   	pop    edx
c0016e5b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e5e:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e60:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016e64:	55                   	push   ebp
c0016e65:	57                   	push   edi
c0016e66:	56                   	push   esi
c0016e67:	50                   	push   eax
c0016e68:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016e6b:	83 c4 20             	add    esp,0x20
c0016e6e:	83 ec 0c             	sub    esp,0xc
c0016e71:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016e74:	e8 b1 7c 00 00       	call   c001eb2a <Semaphore::release()>
c0016e79:	83 c4 2c             	add    esp,0x2c
c0016e7c:	31 c0                	xor    eax,eax
c0016e7e:	5b                   	pop    ebx
c0016e7f:	5e                   	pop    esi
c0016e80:	5f                   	pop    edi
c0016e81:	5d                   	pop    ebp
c0016e82:	c3                   	ret    
c0016e83:	90                   	nop

c0016e84 <Video::putrect(int, int, int, int, unsigned int)>:
c0016e84:	55                   	push   ebp
c0016e85:	57                   	push   edi
c0016e86:	56                   	push   esi
c0016e87:	53                   	push   ebx
c0016e88:	83 ec 1c             	sub    esp,0x1c
c0016e8b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016e8f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e93:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016e97:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016e9b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016e9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ea3:	01 df                	add    edi,ebx
c0016ea5:	39 fb                	cmp    ebx,edi
c0016ea7:	7d 1f                	jge    c0016ec8 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016ea9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016ead:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016eb1:	7d 12                	jge    c0016ec5 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016eb3:	8b 16                	mov    edx,DWORD PTR [esi]
c0016eb5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016eb9:	53                   	push   ebx
c0016eba:	55                   	push   ebp
c0016ebb:	45                   	inc    ebp
c0016ebc:	56                   	push   esi
c0016ebd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016ec0:	83 c4 10             	add    esp,0x10
c0016ec3:	eb e8                	jmp    c0016ead <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016ec5:	43                   	inc    ebx
c0016ec6:	eb dd                	jmp    c0016ea5 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016ec8:	83 c4 1c             	add    esp,0x1c
c0016ecb:	5b                   	pop    ebx
c0016ecc:	5e                   	pop    esi
c0016ecd:	5f                   	pop    edi
c0016ece:	5d                   	pop    ebp
c0016ecf:	c3                   	ret    

c0016ed0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016ed0:	55                   	push   ebp
c0016ed1:	57                   	push   edi
c0016ed2:	31 ff                	xor    edi,edi
c0016ed4:	56                   	push   esi
c0016ed5:	53                   	push   ebx
c0016ed6:	83 ec 1c             	sub    esp,0x1c
c0016ed9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016edd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016ee1:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016ee8:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016eed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ef1:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016ef5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ef9:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016efc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f00:	01 f9                	add    ecx,edi
c0016f02:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016f06:	7d 2f                	jge    c0016f37 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016f08:	31 f6                	xor    esi,esi
c0016f0a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016f0e:	01 f2                	add    edx,esi
c0016f10:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016f14:	7d 1a                	jge    c0016f30 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016f16:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016f19:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016f1c:	46                   	inc    esi
c0016f1d:	51                   	push   ecx
c0016f1e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016f22:	52                   	push   edx
c0016f23:	55                   	push   ebp
c0016f24:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f27:	83 c4 10             	add    esp,0x10
c0016f2a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016f2e:	eb da                	jmp    c0016f0a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016f30:	47                   	inc    edi
c0016f31:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016f35:	eb c5                	jmp    c0016efc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016f37:	83 c4 1c             	add    esp,0x1c
c0016f3a:	5b                   	pop    ebx
c0016f3b:	5e                   	pop    esi
c0016f3c:	5f                   	pop    edi
c0016f3d:	5d                   	pop    ebp
c0016f3e:	c3                   	ret    
c0016f3f:	90                   	nop

c0016f40 <Video::blit(unsigned int*, int, int, int, int)>:
c0016f40:	55                   	push   ebp
c0016f41:	57                   	push   edi
c0016f42:	56                   	push   esi
c0016f43:	53                   	push   ebx
c0016f44:	83 ec 1c             	sub    esp,0x1c
c0016f47:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016f4b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016f4f:	85 c0                	test   eax,eax
c0016f51:	79 02                	jns    c0016f55 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016f53:	31 c0                	xor    eax,eax
c0016f55:	c1 e0 02             	shl    eax,0x2
c0016f58:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016f5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f60:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f64:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016f68:	39 d8                	cmp    eax,ebx
c0016f6a:	7e 49                	jle    c0016fb5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016f6c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016f72:	7c 41                	jl     c0016fb5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016f74:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016f78:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016f7c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f80:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016f84:	39 f9                	cmp    ecx,edi
c0016f86:	7e 22                	jle    c0016faa <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016f88:	83 c5 04             	add    ebp,0x4
c0016f8b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016f91:	7c 14                	jl     c0016fa7 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016f93:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016f95:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016f98:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f9c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016fa0:	56                   	push   esi
c0016fa1:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016fa4:	83 c4 10             	add    esp,0x10
c0016fa7:	47                   	inc    edi
c0016fa8:	eb d2                	jmp    c0016f7c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016faa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fae:	43                   	inc    ebx
c0016faf:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016fb3:	eb ab                	jmp    c0016f60 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016fb5:	83 c4 1c             	add    esp,0x1c
c0016fb8:	5b                   	pop    ebx
c0016fb9:	5e                   	pop    esi
c0016fba:	5f                   	pop    edi
c0016fbb:	5d                   	pop    ebp
c0016fbc:	c3                   	ret    
c0016fbd:	90                   	nop

c0016fbe <Video::clearScreen(unsigned int)>:
c0016fbe:	57                   	push   edi
c0016fbf:	56                   	push   esi
c0016fc0:	53                   	push   ebx
c0016fc1:	31 db                	xor    ebx,ebx
c0016fc3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016fc7:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016fcd:	7e 1f                	jle    c0016fee <Video::clearScreen(unsigned int)+0x30>
c0016fcf:	31 ff                	xor    edi,edi
c0016fd1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016fd7:	7e 12                	jle    c0016feb <Video::clearScreen(unsigned int)+0x2d>
c0016fd9:	8b 06                	mov    eax,DWORD PTR [esi]
c0016fdb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016fdf:	53                   	push   ebx
c0016fe0:	57                   	push   edi
c0016fe1:	47                   	inc    edi
c0016fe2:	56                   	push   esi
c0016fe3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016fe6:	83 c4 10             	add    esp,0x10
c0016fe9:	eb e6                	jmp    c0016fd1 <Video::clearScreen(unsigned int)+0x13>
c0016feb:	43                   	inc    ebx
c0016fec:	eb d9                	jmp    c0016fc7 <Video::clearScreen(unsigned int)+0x9>
c0016fee:	5b                   	pop    ebx
c0016fef:	5e                   	pop    esi
c0016ff0:	5f                   	pop    edi
c0016ff1:	c3                   	ret    

c0016ff2 <Video::putpixel(int, int, unsigned int)>:
c0016ff2:	c7 44 24 04 a0 bc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bca0
c0016ffa:	e9 06 33 00 00       	jmp    c001a305 <Krnl::panic(char const*)>
c0016fff:	90                   	nop

c0017000 <Video::Video(char const*)>:
c0017000:	83 ec 0c             	sub    esp,0xc
c0017003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017007:	83 ec 08             	sub    esp,0x8
c001700a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001700e:	50                   	push   eax
c001700f:	e8 f8 ce ff ff       	call   c0013f0c <Device::Device(char const*)>
c0017014:	83 c4 10             	add    esp,0x10
c0017017:	ba 24 bd 02 c0       	mov    edx,0xc002bd24
c001701c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017020:	89 10                	mov    DWORD PTR [eax],edx
c0017022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017026:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017030:	90                   	nop
c0017031:	83 c4 0c             	add    esp,0xc
c0017034:	c3                   	ret    
c0017035:	90                   	nop

c0017036 <Video::~Video()>:
c0017036:	83 ec 0c             	sub    esp,0xc
c0017039:	ba 24 bd 02 c0       	mov    edx,0xc002bd24
c001703e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017042:	89 10                	mov    DWORD PTR [eax],edx
c0017044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017048:	83 ec 0c             	sub    esp,0xc
c001704b:	50                   	push   eax
c001704c:	e8 85 cb ff ff       	call   c0013bd6 <Device::~Device()>
c0017051:	83 c4 10             	add    esp,0x10
c0017054:	90                   	nop
c0017055:	83 c4 0c             	add    esp,0xc
c0017058:	c3                   	ret    
c0017059:	90                   	nop

c001705a <Video::~Video()>:
c001705a:	83 ec 0c             	sub    esp,0xc
c001705d:	83 ec 0c             	sub    esp,0xc
c0017060:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017064:	e8 cd ff ff ff       	call   c0017036 <Video::~Video()>
c0017069:	83 c4 10             	add    esp,0x10
c001706c:	83 ec 08             	sub    esp,0x8
c001706f:	68 64 01 00 00       	push   0x164
c0017074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017078:	e8 72 b7 ff ff       	call   c00127ef <operator delete(void*, unsigned long)>
c001707d:	83 c4 10             	add    esp,0x10
c0017080:	83 c4 0c             	add    esp,0xc
c0017083:	c3                   	ret    

c0017084 <Video::isMonochrome()>:
c0017084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017088:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001708e:	c3                   	ret    
c001708f:	90                   	nop

c0017090 <Video::getWidth()>:
c0017090:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017094:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001709a:	c3                   	ret    
c001709b:	90                   	nop

c001709c <Video::getHeight()>:
c001709c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170a0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170a6:	c3                   	ret    
c00170a7:	90                   	nop

c00170a8 <Video::drawCursor(int, int, unsigned char*, int)>:
c00170a8:	55                   	push   ebp
c00170a9:	57                   	push   edi
c00170aa:	56                   	push   esi
c00170ab:	53                   	push   ebx
c00170ac:	83 ec 2c             	sub    esp,0x2c
c00170af:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00170b3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00170b7:	83 f8 01             	cmp    eax,0x1
c00170ba:	19 c9                	sbb    ecx,ecx
c00170bc:	31 db                	xor    ebx,ebx
c00170be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00170c2:	89 cd                	mov    ebp,ecx
c00170c4:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00170cc:	f7 d5                	not    ebp
c00170ce:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00170d4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00170d8:	01 d8                	add    eax,ebx
c00170da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00170de:	56                   	push   esi
c00170df:	e8 b8 ff ff ff       	call   c001709c <Video::getHeight()>
c00170e4:	59                   	pop    ecx
c00170e5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00170e9:	7e 70                	jle    c001715b <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00170eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00170ef:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00170f3:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00170f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00170fa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00170fe:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017105:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017109:	89 f8                	mov    eax,edi
c001710b:	83 c0 20             	add    eax,0x20
c001710e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017112:	56                   	push   esi
c0017113:	e8 78 ff ff ff       	call   c0017090 <Video::getWidth()>
c0017118:	5a                   	pop    edx
c0017119:	39 c7                	cmp    edi,eax
c001711b:	7d 34                	jge    c0017151 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001711d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017122:	74 05                	je     c0017129 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017124:	8b 06                	mov    eax,DWORD PTR [esi]
c0017126:	55                   	push   ebp
c0017127:	eb 0d                	jmp    c0017136 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017129:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001712e:	74 12                	je     c0017142 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017130:	8b 06                	mov    eax,DWORD PTR [esi]
c0017132:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017136:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001713a:	57                   	push   edi
c001713b:	56                   	push   esi
c001713c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001713f:	83 c4 10             	add    esp,0x10
c0017142:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017146:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001714a:	47                   	inc    edi
c001714b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001714f:	75 c1                	jne    c0017112 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017151:	43                   	inc    ebx
c0017152:	83 fb 20             	cmp    ebx,0x20
c0017155:	0f 85 79 ff ff ff    	jne    c00170d4 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001715b:	83 c4 2c             	add    esp,0x2c
c001715e:	5b                   	pop    ebx
c001715f:	5e                   	pop    esi
c0017160:	5f                   	pop    edi
c0017161:	5d                   	pop    ebp
c0017162:	c3                   	ret    
c0017163:	90                   	nop

c0017164 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017164:	55                   	push   ebp
c0017165:	57                   	push   edi
c0017166:	56                   	push   esi
c0017167:	53                   	push   ebx
c0017168:	83 ec 28             	sub    esp,0x28
c001716b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001716f:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017173:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017177:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001717b:	c1 e7 08             	shl    edi,0x8
c001717e:	01 c7                	add    edi,eax
c0017180:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017184:	c1 e0 08             	shl    eax,0x8
c0017187:	01 d0                	add    eax,edx
c0017189:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001718d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017191:	0f af c7             	imul   eax,edi
c0017194:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001719b:	50                   	push   eax
c001719c:	e8 eb 86 ff ff       	call   c000f88c <malloc>
c00171a1:	83 c4 10             	add    esp,0x10
c00171a4:	89 c5                	mov    ebp,eax
c00171a6:	85 c0                	test   eax,eax
c00171a8:	75 15                	jne    c00171bf <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00171aa:	83 ec 0c             	sub    esp,0xc
c00171ad:	68 c1 bc 02 c0       	push   0xc002bcc1
c00171b2:	e8 18 b7 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00171b7:	83 c4 10             	add    esp,0x10
c00171ba:	e9 1c 01 00 00       	jmp    c00172db <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00171bf:	be 12 00 00 00       	mov    esi,0x12
c00171c4:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00171c8:	74 11                	je     c00171db <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00171ca:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00171ce:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00171d2:	c1 fe 03             	sar    esi,0x3
c00171d5:	0f af f0             	imul   esi,eax
c00171d8:	83 c6 12             	add    esi,0x12
c00171db:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00171df:	74 04                	je     c00171e5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00171e1:	85 ff                	test   edi,edi
c00171e3:	75 12                	jne    c00171f7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00171e5:	83 ec 0c             	sub    esp,0xc
c00171e8:	68 d8 bc 02 c0       	push   0xc002bcd8
c00171ed:	e8 dd b6 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00171f2:	e9 ce 00 00 00       	jmp    c00172c5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00171f7:	52                   	push   edx
c00171f8:	52                   	push   edx
c00171f9:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00171fd:	50                   	push   eax
c00171fe:	68 ed bc 02 c0       	push   0xc002bced
c0017203:	e8 c7 b6 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0017208:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c001720c:	83 c4 10             	add    esp,0x10
c001720f:	80 fa 02             	cmp    dl,0x2
c0017212:	0f 85 98 00 00 00    	jne    c00172b0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017218:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001721d:	75 10                	jne    c001722f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001721f:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017223:	75 0a                	jne    c001722f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017225:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017228:	83 e8 18             	sub    eax,0x18
c001722b:	a8 f7                	test   al,0xf7
c001722d:	74 0a                	je     c0017239 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001722f:	83 ec 0c             	sub    esp,0xc
c0017232:	68 fa bc 02 c0       	push   0xc002bcfa
c0017237:	eb 7f                	jmp    c00172b8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017239:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017241:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017249:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001724d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017255:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017259:	75 0c                	jne    c0017267 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001725b:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017260:	c1 e0 18             	shl    eax,0x18
c0017263:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017267:	41                   	inc    ecx
c0017268:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c001726d:	c1 e2 10             	shl    edx,0x10
c0017270:	89 d0                	mov    eax,edx
c0017272:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017277:	c1 e2 08             	shl    edx,0x8
c001727a:	09 c2                	or     edx,eax
c001727c:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017280:	09 c2                	or     edx,eax
c0017282:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017286:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c001728a:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001728e:	c1 f8 03             	sar    eax,0x3
c0017291:	01 c6                	add    esi,eax
c0017293:	89 c8                	mov    eax,ecx
c0017295:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017299:	39 c7                	cmp    edi,eax
c001729b:	7f b0                	jg     c001724d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001729d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00172a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00172a5:	39 14 24             	cmp    DWORD PTR [esp],edx
c00172a8:	7e 22                	jle    c00172cc <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00172aa:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00172ae:	eb 99                	jmp    c0017249 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00172b0:	50                   	push   eax
c00172b1:	50                   	push   eax
c00172b2:	52                   	push   edx
c00172b3:	68 08 bd 02 c0       	push   0xc002bd08
c00172b8:	e8 12 b6 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00172bd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00172c0:	e8 d7 85 ff ff       	call   c000f89c <free>
c00172c5:	83 c4 10             	add    esp,0x10
c00172c8:	31 ed                	xor    ebp,ebp
c00172ca:	eb 0f                	jmp    c00172db <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00172cc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00172d0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00172d3:	89 38                	mov    DWORD PTR [eax],edi
c00172d5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172d9:	89 08                	mov    DWORD PTR [eax],ecx
c00172db:	83 c4 1c             	add    esp,0x1c
c00172de:	89 e8                	mov    eax,ebp
c00172e0:	5b                   	pop    ebx
c00172e1:	5e                   	pop    esi
c00172e2:	5f                   	pop    edi
c00172e3:	5d                   	pop    ebp
c00172e4:	c3                   	ret    
c00172e5:	90                   	nop

c00172e6 <Video::putTGA(int, int, unsigned char*, int)>:
c00172e6:	55                   	push   ebp
c00172e7:	57                   	push   edi
c00172e8:	56                   	push   esi
c00172e9:	53                   	push   ebx
c00172ea:	83 ec 28             	sub    esp,0x28
c00172ed:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00172f1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172f5:	50                   	push   eax
c00172f6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172fa:	50                   	push   eax
c00172fb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00172ff:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017303:	56                   	push   esi
c0017304:	e8 5b fe ff ff       	call   c0017164 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017309:	83 c4 20             	add    esp,0x20
c001730c:	85 c0                	test   eax,eax
c001730e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017312:	74 35                	je     c0017349 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017314:	89 c7                	mov    edi,eax
c0017316:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001731a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001731e:	39 d8                	cmp    eax,ebx
c0017320:	7e 27                	jle    c0017349 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017322:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017326:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001732a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001732e:	39 e8                	cmp    eax,ebp
c0017330:	7e 14                	jle    c0017346 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017332:	8b 06                	mov    eax,DWORD PTR [esi]
c0017334:	83 c7 04             	add    edi,0x4
c0017337:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001733a:	53                   	push   ebx
c001733b:	55                   	push   ebp
c001733c:	45                   	inc    ebp
c001733d:	56                   	push   esi
c001733e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017341:	83 c4 10             	add    esp,0x10
c0017344:	eb e0                	jmp    c0017326 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017346:	43                   	inc    ebx
c0017347:	eb cd                	jmp    c0017316 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017349:	83 c4 1c             	add    esp,0x1c
c001734c:	5b                   	pop    ebx
c001734d:	5e                   	pop    esi
c001734e:	5f                   	pop    edi
c001734f:	5d                   	pop    ebp
c0017350:	c3                   	ret    
c0017351:	90                   	nop

c0017352 <ACPI::close(int, int, void*)>:
c0017352:	83 ec 1c             	sub    esp,0x1c
c0017355:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001735d:	74 0a                	je     c0017369 <ACPI::close(int, int, void*)+0x17>
c001735f:	b8 00 00 00 00       	mov    eax,0x0
c0017364:	e9 9a 00 00 00       	jmp    c0017403 <ACPI::close(int, int, void*)+0xb1>
c0017369:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001736e:	75 37                	jne    c00173a7 <ACPI::close(int, int, void*)+0x55>
c0017370:	83 ec 0c             	sub    esp,0xc
c0017373:	68 64 bd 02 c0       	push   0xc002bd64
c0017378:	e8 52 b5 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001737d:	83 c4 10             	add    esp,0x10
c0017380:	a1 a8 16 03 c0       	mov    eax,ds:0xc00316a8
c0017385:	85 c0                	test   eax,eax
c0017387:	74 07                	je     c0017390 <ACPI::close(int, int, void*)+0x3e>
c0017389:	a1 a8 16 03 c0       	mov    eax,ds:0xc00316a8
c001738e:	ff d0                	call   eax
c0017390:	83 ec 0c             	sub    esp,0xc
c0017393:	68 7c be 02 c0       	push   0xc002be7c
c0017398:	e8 68 2f 00 00       	call   c001a305 <Krnl::panic(char const*)>
c001739d:	83 c4 10             	add    esp,0x10
c00173a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00173a5:	eb 5c                	jmp    c0017403 <ACPI::close(int, int, void*)+0xb1>
c00173a7:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00173ac:	75 50                	jne    c00173fe <ACPI::close(int, int, void*)+0xac>
c00173ae:	a1 a4 16 03 c0       	mov    eax,ds:0xc00316a4
c00173b3:	85 c0                	test   eax,eax
c00173b5:	74 07                	je     c00173be <ACPI::close(int, int, void*)+0x6c>
c00173b7:	a1 a4 16 03 c0       	mov    eax,ds:0xc00316a4
c00173bc:	ff d0                	call   eax
c00173be:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00173c3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00173c8:	83 e0 02             	and    eax,0x2
c00173cb:	74 1c                	je     c00173e9 <ACPI::close(int, int, void*)+0x97>
c00173cd:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00173d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00173d8:	89 c2                	mov    edx,eax
c00173da:	ec                   	in     al,dx
c00173db:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00173df:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00173e3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00173e7:	eb da                	jmp    c00173c3 <ACPI::close(int, int, void*)+0x71>
c00173e9:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00173f0:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00173f5:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00173f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00173fd:	ee                   	out    dx,al
c00173fe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017403:	83 c4 1c             	add    esp,0x1c
c0017406:	c3                   	ret    

c0017407 <findRSDP()>:
c0017407:	83 ec 1c             	sub    esp,0x1c
c001740a:	83 ec 0c             	sub    esp,0xc
c001740d:	68 71 bd 02 c0       	push   0xc002bd71
c0017412:	e8 b8 b4 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0017417:	83 c4 10             	add    esp,0x10
c001741a:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001741f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017425:	83 e0 04             	and    eax,0x4
c0017428:	84 c0                	test   al,al
c001742a:	75 07                	jne    c0017433 <findRSDP()+0x2c>
c001742c:	b8 00 00 00 00       	mov    eax,0x0
c0017431:	eb 6a                	jmp    c001749d <findRSDP()+0x96>
c0017433:	a1 54 f0 02 c0       	mov    eax,ds:0xc002f054
c0017438:	3d ff 07 00 00       	cmp    eax,0x7ff
c001743d:	7f 1b                	jg     c001745a <findRSDP()+0x53>
c001743f:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0017444:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001744a:	83 e2 fb             	and    edx,0xfffffffb
c001744d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017453:	b8 00 00 00 00       	mov    eax,0x0
c0017458:	eb 43                	jmp    c001749d <findRSDP()+0x96>
c001745a:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017462:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001746a:	77 2c                	ja     c0017498 <findRSDP()+0x91>
c001746c:	83 ec 04             	sub    esp,0x4
c001746f:	6a 08                	push   0x8
c0017471:	68 7f bd 02 c0       	push   0xc002bd7f
c0017476:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001747a:	e8 cd 91 fe ff       	call   c000064c <memcmp>
c001747f:	83 c4 10             	add    esp,0x10
c0017482:	85 c0                	test   eax,eax
c0017484:	0f 94 c0             	sete   al
c0017487:	84 c0                	test   al,al
c0017489:	74 06                	je     c0017491 <findRSDP()+0x8a>
c001748b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001748f:	eb 0c                	jmp    c001749d <findRSDP()+0x96>
c0017491:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017496:	eb ca                	jmp    c0017462 <findRSDP()+0x5b>
c0017498:	b8 00 00 00 00       	mov    eax,0x0
c001749d:	83 c4 1c             	add    esp,0x1c
c00174a0:	c3                   	ret    

c00174a1 <loadACPITables(unsigned char*)>:
c00174a1:	57                   	push   edi
c00174a2:	56                   	push   esi
c00174a3:	53                   	push   ebx
c00174a4:	83 ec 60             	sub    esp,0x60
c00174a7:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c00174ac:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00174b2:	83 e0 04             	and    eax,0x4
c00174b5:	84 c0                	test   al,al
c00174b7:	0f 84 33 02 00 00    	je     c00176f0 <loadACPITables(unsigned char*)+0x24f>
c00174bd:	a0 c0 18 03 c0       	mov    al,ds:0xc00318c0
c00174c2:	84 c0                	test   al,al
c00174c4:	74 75                	je     c001753b <loadACPITables(unsigned char*)+0x9a>
c00174c6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00174ca:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00174ce:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00174d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00174d5:	83 e8 24             	sub    eax,0x24
c00174d8:	c1 e8 03             	shr    eax,0x3
c00174db:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00174df:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00174e7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00174eb:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c00174ef:	0f 8d b2 00 00 00    	jge    c00175a7 <loadACPITables(unsigned char*)+0x106>
c00174f5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00174f9:	83 c0 24             	add    eax,0x24
c00174fc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017500:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017504:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017508:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001750c:	c1 e0 03             	shl    eax,0x3
c001750f:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017513:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017517:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001751a:	8b 00                	mov    eax,DWORD PTR [eax]
c001751c:	89 c1                	mov    ecx,eax
c001751e:	a1 ac 16 03 c0       	mov    eax,ds:0xc00316ac
c0017523:	8d 50 01             	lea    edx,[eax+0x1]
c0017526:	89 15 ac 16 03 c0    	mov    DWORD PTR ds:0xc00316ac,edx
c001752c:	89 ca                	mov    edx,ecx
c001752e:	89 14 c5 c4 16 03 c0 	mov    DWORD PTR [eax*8-0x3ffce93c],edx
c0017535:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017539:	eb ac                	jmp    c00174e7 <loadACPITables(unsigned char*)+0x46>
c001753b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001753f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017543:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017547:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001754a:	83 e8 24             	sub    eax,0x24
c001754d:	c1 e8 02             	shr    eax,0x2
c0017550:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017554:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001755c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017560:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017564:	7d 41                	jge    c00175a7 <loadACPITables(unsigned char*)+0x106>
c0017566:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001756a:	83 c0 24             	add    eax,0x24
c001756d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017571:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017575:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017579:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001757d:	c1 e0 02             	shl    eax,0x2
c0017580:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017584:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017588:	8b 08                	mov    ecx,DWORD PTR [eax]
c001758a:	a1 ac 16 03 c0       	mov    eax,ds:0xc00316ac
c001758f:	8d 50 01             	lea    edx,[eax+0x1]
c0017592:	89 15 ac 16 03 c0    	mov    DWORD PTR ds:0xc00316ac,edx
c0017598:	89 ca                	mov    edx,ecx
c001759a:	89 14 c5 c4 16 03 c0 	mov    DWORD PTR [eax*8-0x3ffce93c],edx
c00175a1:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00175a5:	eb b5                	jmp    c001755c <loadACPITables(unsigned char*)+0xbb>
c00175a7:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00175af:	a1 ac 16 03 c0       	mov    eax,ds:0xc00316ac
c00175b4:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00175b8:	0f 8d 33 01 00 00    	jge    c00176f1 <loadACPITables(unsigned char*)+0x250>
c00175be:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00175c2:	8b 04 c5 c4 16 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce93c]
c00175c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175d1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00175d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175d9:	25 ff 0f 00 00       	and    eax,0xfff
c00175de:	89 c6                	mov    esi,eax
c00175e0:	8b 1d 70 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f170
c00175e6:	83 ec 0c             	sub    esp,0xc
c00175e9:	6a 01                	push   0x1
c00175eb:	e8 d9 9e ff ff       	call   c00114c9 <Virt::allocateKernelVirtualPages(int)>
c00175f0:	83 c4 10             	add    esp,0x10
c00175f3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00175f7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00175fd:	83 ec 0c             	sub    esp,0xc
c0017600:	6a 01                	push   0x1
c0017602:	6a 01                	push   0x1
c0017604:	50                   	push   eax
c0017605:	52                   	push   edx
c0017606:	53                   	push   ebx
c0017607:	e8 ea a9 ff ff       	call   c0011ff6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001760c:	83 c4 20             	add    esp,0x20
c001760f:	09 f0                	or     eax,esi
c0017611:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017615:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017619:	c1 e0 03             	shl    eax,0x3
c001761c:	05 c0 16 03 c0       	add    eax,0xc00316c0
c0017621:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017625:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017629:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001762d:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017635:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017639:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001763d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017641:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017645:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017649:	89 c6                	mov    esi,eax
c001764b:	89 d7                	mov    edi,edx
c001764d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001764f:	89 c8                	mov    eax,ecx
c0017651:	89 fa                	mov    edx,edi
c0017653:	89 f3                	mov    ebx,esi
c0017655:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017659:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001765d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017661:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017665:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017668:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001766c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017670:	05 00 10 00 00       	add    eax,0x1000
c0017675:	c1 e8 0c             	shr    eax,0xc
c0017678:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001767c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017680:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017684:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017688:	25 ff 0f 00 00       	and    eax,0xfff
c001768d:	89 c6                	mov    esi,eax
c001768f:	8b 1d 70 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f170
c0017695:	83 ec 0c             	sub    esp,0xc
c0017698:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001769c:	e8 28 9e ff ff       	call   c00114c9 <Virt::allocateKernelVirtualPages(int)>
c00176a1:	83 c4 10             	add    esp,0x10
c00176a4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00176a8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00176ae:	83 ec 0c             	sub    esp,0xc
c00176b1:	6a 01                	push   0x1
c00176b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00176b7:	50                   	push   eax
c00176b8:	52                   	push   edx
c00176b9:	53                   	push   ebx
c00176ba:	e8 37 a9 ff ff       	call   c0011ff6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00176bf:	83 c4 20             	add    esp,0x20
c00176c2:	09 f0                	or     eax,esi
c00176c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00176c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176cc:	83 ec 0c             	sub    esp,0xc
c00176cf:	50                   	push   eax
c00176d0:	e8 b4 a2 ff ff       	call   c0011989 <Virt::freeKernelVirtualPages(unsigned long)>
c00176d5:	83 c4 10             	add    esp,0x10
c00176d8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00176dc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00176e0:	89 14 c5 c4 16 03 c0 	mov    DWORD PTR [eax*8-0x3ffce93c],edx
c00176e7:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c00176eb:	e9 bf fe ff ff       	jmp    c00175af <loadACPITables(unsigned char*)+0x10e>
c00176f0:	90                   	nop
c00176f1:	83 c4 60             	add    esp,0x60
c00176f4:	5b                   	pop    ebx
c00176f5:	5e                   	pop    esi
c00176f6:	5f                   	pop    edi
c00176f7:	c3                   	ret    

c00176f8 <findRSDT(unsigned char*)>:
c00176f8:	57                   	push   edi
c00176f9:	56                   	push   esi
c00176fa:	53                   	push   ebx
c00176fb:	83 ec 50             	sub    esp,0x50
c00176fe:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0017703:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017709:	83 e0 04             	and    eax,0x4
c001770c:	84 c0                	test   al,al
c001770e:	75 0a                	jne    c001771a <findRSDT(unsigned char*)+0x22>
c0017710:	b8 00 00 00 00       	mov    eax,0x0
c0017715:	e9 21 01 00 00       	jmp    c001783b <findRSDT(unsigned char*)+0x143>
c001771a:	89 e0                	mov    eax,esp
c001771c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017720:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017724:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017728:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017730:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017734:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017738:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001773c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017740:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017744:	89 c6                	mov    esi,eax
c0017746:	89 d7                	mov    edi,edx
c0017748:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001774a:	89 c8                	mov    eax,ecx
c001774c:	89 fa                	mov    edx,edi
c001774e:	89 f3                	mov    ebx,esi
c0017750:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017754:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017758:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001775c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017760:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017764:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001776c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017770:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017774:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001777c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017780:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017784:	25 ff 0f 00 00       	and    eax,0xfff
c0017789:	89 c6                	mov    esi,eax
c001778b:	8b 1d 70 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f170
c0017791:	83 ec 0c             	sub    esp,0xc
c0017794:	6a 02                	push   0x2
c0017796:	e8 2e 9d ff ff       	call   c00114c9 <Virt::allocateKernelVirtualPages(int)>
c001779b:	83 c4 10             	add    esp,0x10
c001779e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00177a2:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00177a8:	83 ec 0c             	sub    esp,0xc
c00177ab:	6a 01                	push   0x1
c00177ad:	6a 02                	push   0x2
c00177af:	50                   	push   eax
c00177b0:	52                   	push   edx
c00177b1:	53                   	push   ebx
c00177b2:	e8 3f a8 ff ff       	call   c0011ff6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177b7:	83 c4 20             	add    esp,0x20
c00177ba:	09 f0                	or     eax,esi
c00177bc:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00177c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177c4:	25 ff 0f 00 00       	and    eax,0xfff
c00177c9:	89 c6                	mov    esi,eax
c00177cb:	8b 1d 70 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f170
c00177d1:	83 ec 0c             	sub    esp,0xc
c00177d4:	6a 02                	push   0x2
c00177d6:	e8 ee 9c ff ff       	call   c00114c9 <Virt::allocateKernelVirtualPages(int)>
c00177db:	83 c4 10             	add    esp,0x10
c00177de:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00177e2:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00177e8:	83 ec 0c             	sub    esp,0xc
c00177eb:	6a 01                	push   0x1
c00177ed:	6a 02                	push   0x2
c00177ef:	50                   	push   eax
c00177f0:	52                   	push   edx
c00177f1:	53                   	push   ebx
c00177f2:	e8 ff a7 ff ff       	call   c0011ff6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177f7:	83 c4 20             	add    esp,0x20
c00177fa:	09 f0                	or     eax,esi
c00177fc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017800:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017805:	75 11                	jne    c0017818 <findRSDT(unsigned char*)+0x120>
c0017807:	c6 05 c0 18 03 c0 00 	mov    BYTE PTR ds:0xc00318c0,0x0
c001780e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017812:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017816:	eb 1f                	jmp    c0017837 <findRSDT(unsigned char*)+0x13f>
c0017818:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c001781d:	75 11                	jne    c0017830 <findRSDT(unsigned char*)+0x138>
c001781f:	c6 05 c0 18 03 c0 01 	mov    BYTE PTR ds:0xc00318c0,0x1
c0017826:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001782a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001782e:	eb 07                	jmp    c0017837 <findRSDT(unsigned char*)+0x13f>
c0017830:	b8 00 00 00 00       	mov    eax,0x0
c0017835:	eb 04                	jmp    c001783b <findRSDT(unsigned char*)+0x143>
c0017837:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001783b:	83 c4 50             	add    esp,0x50
c001783e:	5b                   	pop    ebx
c001783f:	5e                   	pop    esi
c0017840:	5f                   	pop    edi
c0017841:	c3                   	ret    

c0017842 <findDataTable(unsigned char*, char*)>:
c0017842:	83 ec 1c             	sub    esp,0x1c
c0017845:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001784a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017850:	83 e0 04             	and    eax,0x4
c0017853:	84 c0                	test   al,al
c0017855:	75 07                	jne    c001785e <findDataTable(unsigned char*, char*)+0x1c>
c0017857:	b8 00 00 00 00       	mov    eax,0x0
c001785c:	eb 7c                	jmp    c00178da <findDataTable(unsigned char*, char*)+0x98>
c001785e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017866:	a1 ac 16 03 c0       	mov    eax,ds:0xc00316ac
c001786b:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001786f:	7d 3a                	jge    c00178ab <findDataTable(unsigned char*, char*)+0x69>
c0017871:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017875:	c1 e0 03             	shl    eax,0x3
c0017878:	05 c0 16 03 c0       	add    eax,0xc00316c0
c001787d:	83 ec 04             	sub    esp,0x4
c0017880:	6a 04                	push   0x4
c0017882:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017886:	50                   	push   eax
c0017887:	e8 c0 8d fe ff       	call   c000064c <memcmp>
c001788c:	83 c4 10             	add    esp,0x10
c001788f:	85 c0                	test   eax,eax
c0017891:	0f 94 c0             	sete   al
c0017894:	84 c0                	test   al,al
c0017896:	74 0d                	je     c00178a5 <findDataTable(unsigned char*, char*)+0x63>
c0017898:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001789c:	8b 04 c5 c4 16 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce93c]
c00178a3:	eb 35                	jmp    c00178da <findDataTable(unsigned char*, char*)+0x98>
c00178a5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00178a9:	eb bb                	jmp    c0017866 <findDataTable(unsigned char*, char*)+0x24>
c00178ab:	a0 c0 18 03 c0       	mov    al,ds:0xc00318c0
c00178b0:	84 c0                	test   al,al
c00178b2:	74 07                	je     c00178bb <findDataTable(unsigned char*, char*)+0x79>
c00178b4:	b8 58 00 00 00       	mov    eax,0x58
c00178b9:	eb 05                	jmp    c00178c0 <findDataTable(unsigned char*, char*)+0x7e>
c00178bb:	b8 52 00 00 00       	mov    eax,0x52
c00178c0:	83 ec 04             	sub    esp,0x4
c00178c3:	50                   	push   eax
c00178c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178c8:	68 a0 be 02 c0       	push   0xc002bea0
c00178cd:	e8 fd af ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00178d2:	83 c4 10             	add    esp,0x10
c00178d5:	b8 00 00 00 00       	mov    eax,0x0
c00178da:	83 c4 1c             	add    esp,0x1c
c00178dd:	c3                   	ret    

c00178de <scanMADT()>:
c00178de:	53                   	push   ebx
c00178df:	83 ec 38             	sub    esp,0x38
c00178e2:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c00178e7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178ed:	83 e0 04             	and    eax,0x4
c00178f0:	84 c0                	test   al,al
c00178f2:	0f 84 63 04 00 00    	je     c0017d5b <scanMADT()+0x47d>
c00178f8:	e8 0a fb ff ff       	call   c0017407 <findRSDP()>
c00178fd:	a3 cc 18 03 c0       	mov    ds:0xc00318cc,eax
c0017902:	a1 cc 18 03 c0       	mov    eax,ds:0xc00318cc
c0017907:	85 c0                	test   eax,eax
c0017909:	75 19                	jne    c0017924 <scanMADT()+0x46>
c001790b:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0017910:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017916:	83 e2 fb             	and    edx,0xfffffffb
c0017919:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001791f:	e9 3b 04 00 00       	jmp    c0017d5f <scanMADT()+0x481>
c0017924:	a1 cc 18 03 c0       	mov    eax,ds:0xc00318cc
c0017929:	83 ec 0c             	sub    esp,0xc
c001792c:	50                   	push   eax
c001792d:	e8 c6 fd ff ff       	call   c00176f8 <findRSDT(unsigned char*)>
c0017932:	83 c4 10             	add    esp,0x10
c0017935:	a3 c8 18 03 c0       	mov    ds:0xc00318c8,eax
c001793a:	a1 c8 18 03 c0       	mov    eax,ds:0xc00318c8
c001793f:	85 c0                	test   eax,eax
c0017941:	75 19                	jne    c001795c <scanMADT()+0x7e>
c0017943:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0017948:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001794e:	83 e2 fb             	and    edx,0xfffffffb
c0017951:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017957:	e9 03 04 00 00       	jmp    c0017d5f <scanMADT()+0x481>
c001795c:	a1 c8 18 03 c0       	mov    eax,ds:0xc00318c8
c0017961:	83 ec 0c             	sub    esp,0xc
c0017964:	50                   	push   eax
c0017965:	e8 37 fb ff ff       	call   c00174a1 <loadACPITables(unsigned char*)>
c001796a:	83 c4 10             	add    esp,0x10
c001796d:	a1 c8 18 03 c0       	mov    eax,ds:0xc00318c8
c0017972:	83 ec 08             	sub    esp,0x8
c0017975:	68 88 bd 02 c0       	push   0xc002bd88
c001797a:	50                   	push   eax
c001797b:	e8 c2 fe ff ff       	call   c0017842 <findDataTable(unsigned char*, char*)>
c0017980:	83 c4 10             	add    esp,0x10
c0017983:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017987:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001798c:	75 19                	jne    c00179a7 <scanMADT()+0xc9>
c001798e:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0017993:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017999:	83 e2 fe             	and    edx,0xfffffffe
c001799c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179a2:	e9 b8 03 00 00       	jmp    c0017d5f <scanMADT()+0x481>
c00179a7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00179af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179b6:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00179ba:	0f 87 9f 03 00 00    	ja     c0017d5f <scanMADT()+0x481>
c00179c0:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00179c8:	0f 87 91 03 00 00    	ja     c0017d5f <scanMADT()+0x481>
c00179ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00179d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179da:	8d 50 01             	lea    edx,[eax+0x1]
c00179dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179e5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179e9:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00179ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179f1:	8d 50 01             	lea    edx,[eax+0x1]
c00179f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179f8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179fc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a00:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017a04:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017a09:	0f 86 4f 03 00 00    	jbe    c0017d5e <scanMADT()+0x480>
c0017a0f:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017a14:	75 57                	jne    c0017a6d <scanMADT()+0x18f>
c0017a16:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a1a:	8d 50 01             	lea    edx,[eax+0x1]
c0017a1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a21:	8a 15 c0 1a 03 c0    	mov    dl,BYTE PTR ds:0xc0031ac0
c0017a27:	0f b6 d2             	movzx  edx,dl
c0017a2a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a2e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a32:	88 82 00 1b 03 c0    	mov    BYTE PTR [edx-0x3ffce500],al
c0017a38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a3c:	8d 50 01             	lea    edx,[eax+0x1]
c0017a3f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a43:	8a 15 c0 1a 03 c0    	mov    dl,BYTE PTR ds:0xc0031ac0
c0017a49:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017a4c:	88 0d c0 1a 03 c0    	mov    BYTE PTR ds:0xc0031ac0,cl
c0017a52:	0f b6 d2             	movzx  edx,dl
c0017a55:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a59:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a5d:	88 82 e0 1a 03 c0    	mov    BYTE PTR [edx-0x3ffce520],al
c0017a63:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a68:	e9 da 02 00 00       	jmp    c0017d47 <scanMADT()+0x469>
c0017a6d:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017a72:	0f 85 14 01 00 00    	jne    c0017b8c <scanMADT()+0x2ae>
c0017a78:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a7c:	8d 50 01             	lea    edx,[eax+0x1]
c0017a7f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a83:	8a 15 80 19 03 c0    	mov    dl,BYTE PTR ds:0xc0031980
c0017a89:	0f b6 d2             	movzx  edx,dl
c0017a8c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a90:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a94:	88 82 a0 19 03 c0    	mov    BYTE PTR [edx-0x3ffce660],al
c0017a9a:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017a9e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017aa2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017aa6:	01 d0                	add    eax,edx
c0017aa8:	83 c0 2c             	add    eax,0x2c
c0017aab:	8a 00                	mov    al,BYTE PTR [eax]
c0017aad:	0f b6 d0             	movzx  edx,al
c0017ab0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ab4:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ab7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017abb:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017abf:	0f b6 c0             	movzx  eax,al
c0017ac2:	c1 e0 08             	shl    eax,0x8
c0017ac5:	89 d1                	mov    ecx,edx
c0017ac7:	09 c1                	or     ecx,eax
c0017ac9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017acd:	8d 50 02             	lea    edx,[eax+0x2]
c0017ad0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ad4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017ad8:	0f b6 c0             	movzx  eax,al
c0017adb:	c1 e0 10             	shl    eax,0x10
c0017ade:	09 c1                	or     ecx,eax
c0017ae0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ae4:	8d 50 03             	lea    edx,[eax+0x3]
c0017ae7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017aeb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017aef:	0f b6 c0             	movzx  eax,al
c0017af2:	c1 e0 18             	shl    eax,0x18
c0017af5:	09 c1                	or     ecx,eax
c0017af7:	89 ca                	mov    edx,ecx
c0017af9:	a0 80 19 03 c0       	mov    al,ds:0xc0031980
c0017afe:	0f b6 c0             	movzx  eax,al
c0017b01:	89 14 85 c0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce640],edx
c0017b08:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b11:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b15:	01 d0                	add    eax,edx
c0017b17:	83 c0 2c             	add    eax,0x2c
c0017b1a:	8a 00                	mov    al,BYTE PTR [eax]
c0017b1c:	0f b6 d0             	movzx  edx,al
c0017b1f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b23:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b2a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b2e:	0f b6 c0             	movzx  eax,al
c0017b31:	c1 e0 08             	shl    eax,0x8
c0017b34:	89 d1                	mov    ecx,edx
c0017b36:	09 c1                	or     ecx,eax
c0017b38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b3c:	8d 50 02             	lea    edx,[eax+0x2]
c0017b3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b43:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b47:	0f b6 c0             	movzx  eax,al
c0017b4a:	c1 e0 10             	shl    eax,0x10
c0017b4d:	09 c1                	or     ecx,eax
c0017b4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b53:	8d 50 03             	lea    edx,[eax+0x3]
c0017b56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b5a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b5e:	0f b6 c0             	movzx  eax,al
c0017b61:	c1 e0 18             	shl    eax,0x18
c0017b64:	09 c1                	or     ecx,eax
c0017b66:	89 ca                	mov    edx,ecx
c0017b68:	a0 80 19 03 c0       	mov    al,ds:0xc0031980
c0017b6d:	0f b6 c0             	movzx  eax,al
c0017b70:	89 14 85 40 1a 03 c0 	mov    DWORD PTR [eax*4-0x3ffce5c0],edx
c0017b77:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b7c:	a0 80 19 03 c0       	mov    al,ds:0xc0031980
c0017b81:	40                   	inc    eax
c0017b82:	a2 80 19 03 c0       	mov    ds:0xc0031980,al
c0017b87:	e9 bb 01 00 00       	jmp    c0017d47 <scanMADT()+0x469>
c0017b8c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017b91:	0f 85 e9 00 00 00    	jne    c0017c80 <scanMADT()+0x3a2>
c0017b97:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b9b:	8d 50 01             	lea    edx,[eax+0x1]
c0017b9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ba2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ba6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017baa:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017bae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bb2:	8d 50 01             	lea    edx,[eax+0x1]
c0017bb5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017bb9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bbd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017bc1:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017bc5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bc9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bcd:	01 d0                	add    eax,edx
c0017bcf:	83 c0 2c             	add    eax,0x2c
c0017bd2:	8a 00                	mov    al,BYTE PTR [eax]
c0017bd4:	0f b6 d0             	movzx  edx,al
c0017bd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bdb:	8d 48 01             	lea    ecx,[eax+0x1]
c0017bde:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017be2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017be6:	0f b6 c0             	movzx  eax,al
c0017be9:	c1 e0 08             	shl    eax,0x8
c0017bec:	89 d1                	mov    ecx,edx
c0017bee:	09 c1                	or     ecx,eax
c0017bf0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bf4:	8d 50 02             	lea    edx,[eax+0x2]
c0017bf7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bfb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017bff:	0f b6 c0             	movzx  eax,al
c0017c02:	c1 e0 10             	shl    eax,0x10
c0017c05:	09 c1                	or     ecx,eax
c0017c07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c0b:	8d 50 03             	lea    edx,[eax+0x3]
c0017c0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c12:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c16:	0f b6 c0             	movzx  eax,al
c0017c19:	c1 e0 18             	shl    eax,0x18
c0017c1c:	09 c8                	or     eax,ecx
c0017c1e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017c22:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017c27:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c2f:	01 d0                	add    eax,edx
c0017c31:	83 c0 2c             	add    eax,0x2c
c0017c34:	8a 00                	mov    al,BYTE PTR [eax]
c0017c36:	0f b6 c0             	movzx  eax,al
c0017c39:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017c3d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017c40:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c44:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017c48:	0f b6 d2             	movzx  edx,dl
c0017c4b:	c1 e2 08             	shl    edx,0x8
c0017c4e:	09 d0                	or     eax,edx
c0017c50:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017c55:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017c5a:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017c5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c63:	88 90 60 e2 02 c0    	mov    BYTE PTR [eax-0x3ffd1da0],dl
c0017c69:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017c6e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017c73:	66 89 84 12 60 19 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce6a0],ax
c0017c7b:	e9 c7 00 00 00       	jmp    c0017d47 <scanMADT()+0x469>
c0017c80:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017c85:	0f 85 b0 00 00 00    	jne    c0017d3b <scanMADT()+0x45d>
c0017c8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c8f:	8d 50 01             	lea    edx,[eax+0x1]
c0017c92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c96:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c9a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c9e:	0f b6 c0             	movzx  eax,al
c0017ca1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ca5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ca9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cad:	01 d0                	add    eax,edx
c0017caf:	83 c0 2c             	add    eax,0x2c
c0017cb2:	8a 00                	mov    al,BYTE PTR [eax]
c0017cb4:	0f b6 d0             	movzx  edx,al
c0017cb7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cbb:	8d 48 01             	lea    ecx,[eax+0x1]
c0017cbe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017cc2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017cc6:	0f b6 c0             	movzx  eax,al
c0017cc9:	c1 e0 08             	shl    eax,0x8
c0017ccc:	09 d0                	or     eax,edx
c0017cce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017cd2:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017cd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017cdb:	8d 50 01             	lea    edx,[eax+0x1]
c0017cde:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ce2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ce6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017cea:	0f b6 c0             	movzx  eax,al
c0017ced:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017cf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cf5:	c1 e0 08             	shl    eax,0x8
c0017cf8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017cfc:	89 c1                	mov    ecx,eax
c0017cfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d02:	c1 e0 18             	shl    eax,0x18
c0017d05:	89 c3                	mov    ebx,eax
c0017d07:	a1 d0 18 03 c0       	mov    eax,ds:0xc00318d0
c0017d0c:	8d 50 01             	lea    edx,[eax+0x1]
c0017d0f:	89 15 d0 18 03 c0    	mov    DWORD PTR ds:0xc00318d0,edx
c0017d15:	09 d9                	or     ecx,ebx
c0017d17:	89 ca                	mov    edx,ecx
c0017d19:	89 14 85 e0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce720],edx
c0017d20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017d28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d2c:	68 d0 be 02 c0       	push   0xc002bed0
c0017d31:	e8 99 ab ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0017d36:	83 c4 10             	add    esp,0x10
c0017d39:	eb 0c                	jmp    c0017d47 <scanMADT()+0x469>
c0017d3b:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017d40:	75 05                	jne    c0017d47 <scanMADT()+0x469>
c0017d42:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017d47:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017d4c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d50:	01 d0                	add    eax,edx
c0017d52:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017d56:	e9 54 fc ff ff       	jmp    c00179af <scanMADT()+0xd1>
c0017d5b:	90                   	nop
c0017d5c:	eb 01                	jmp    c0017d5f <scanMADT()+0x481>
c0017d5e:	90                   	nop
c0017d5f:	83 c4 38             	add    esp,0x38
c0017d62:	5b                   	pop    ebx
c0017d63:	c3                   	ret    

c0017d64 <ACPI::ACPI()>:
c0017d64:	83 ec 0c             	sub    esp,0xc
c0017d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d6b:	83 ec 08             	sub    esp,0x8
c0017d6e:	68 8d bd 02 c0       	push   0xc002bd8d
c0017d73:	50                   	push   eax
c0017d74:	e8 93 c1 ff ff       	call   c0013f0c <Device::Device(char const*)>
c0017d79:	83 c4 10             	add    esp,0x10
c0017d7c:	ba 6c bf 02 c0       	mov    edx,0xc002bf6c
c0017d81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d85:	89 10                	mov    DWORD PTR [eax],edx
c0017d87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d8b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d96:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017da4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017dae:	e8 2b fb ff ff       	call   c00178de <scanMADT()>
c0017db3:	90                   	nop
c0017db4:	83 c4 0c             	add    esp,0xc
c0017db7:	c3                   	ret    

c0017db8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017db8:	83 ec 2c             	sub    esp,0x2c
c0017dbb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017dbf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017dc3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017dc7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017dcb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017dd0:	88 d0                	mov    al,dl
c0017dd2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017dd6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017ddb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017de3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017de7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017ded:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017df1:	0f 8d 97 00 00 00    	jge    c0017e8e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017df7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017dfb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017dff:	83 c2 2a             	add    edx,0x2a
c0017e02:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017e06:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017e0b:	75 78                	jne    c0017e85 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e11:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e15:	83 c2 2a             	add    edx,0x2a
c0017e18:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017e1c:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017e20:	75 63                	jne    c0017e85 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e22:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017e27:	74 3a                	je     c0017e63 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017e29:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e2d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e31:	83 c2 2a             	add    edx,0x2a
c0017e34:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017e38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e3c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017e3f:	39 c2                	cmp    edx,eax
c0017e41:	74 10                	je     c0017e53 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017e43:	83 ec 0c             	sub    esp,0xc
c0017e46:	68 0c bf 02 c0       	push   0xc002bf0c
c0017e4b:	e8 b5 24 00 00       	call   c001a305 <Krnl::panic(char const*)>
c0017e50:	83 c4 10             	add    esp,0x10
c0017e53:	83 ec 0c             	sub    esp,0xc
c0017e56:	68 92 bd 02 c0       	push   0xc002bd92
c0017e5b:	e8 a5 24 00 00       	call   c001a305 <Krnl::panic(char const*)>
c0017e60:	83 c4 10             	add    esp,0x10
c0017e63:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017e67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e6b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e6f:	83 c2 2a             	add    edx,0x2a
c0017e72:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017e76:	8b 02                	mov    eax,DWORD PTR [edx]
c0017e78:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017e7b:	89 01                	mov    DWORD PTR [ecx],eax
c0017e7d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e80:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017e85:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017e89:	e9 55 ff ff ff       	jmp    c0017de3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017e8e:	90                   	nop
c0017e8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e93:	83 c4 2c             	add    esp,0x2c
c0017e96:	c2 04 00             	ret    0x4
c0017e99:	90                   	nop

c0017e9a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017e9a:	83 ec 1c             	sub    esp,0x1c
c0017e9d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ea1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017ea5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ea9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017eae:	88 c8                	mov    al,cl
c0017eb0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017eb4:	88 d0                	mov    al,dl
c0017eb6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017eba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ebe:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017ec4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ec8:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017ecb:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017ecf:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017ed3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ed7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017edd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ee1:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ee8:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ef1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017ef7:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017efb:	8d 48 01             	lea    ecx,[eax+0x1]
c0017efe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f02:	83 c2 2a             	add    edx,0x2a
c0017f05:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017f09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f0d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f17:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017f1a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017f1e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017f22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f26:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f2c:	8d 50 01             	lea    edx,[eax+0x1]
c0017f2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f33:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017f39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f3d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f43:	3d 00 02 00 00       	cmp    eax,0x200
c0017f48:	75 10                	jne    c0017f5a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017f4a:	83 ec 0c             	sub    esp,0xc
c0017f4d:	68 a1 bd 02 c0       	push   0xc002bda1
c0017f52:	e8 ae 23 00 00       	call   c001a305 <Krnl::panic(char const*)>
c0017f57:	83 c4 10             	add    esp,0x10
c0017f5a:	90                   	nop
c0017f5b:	83 c4 1c             	add    esp,0x1c
c0017f5e:	c3                   	ret    
c0017f5f:	90                   	nop

c0017f60 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017f60:	b8 00 00 00 00       	mov    eax,0x0
c0017f65:	c3                   	ret    

c0017f66 <ACPI::detectPCI()>:
c0017f66:	53                   	push   ebx
c0017f67:	83 ec 28             	sub    esp,0x28
c0017f6a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017f6f:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017f74:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0017f79:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017f7f:	83 e0 04             	and    eax,0x4
c0017f82:	84 c0                	test   al,al
c0017f84:	74 2b                	je     c0017fb1 <ACPI::detectPCI()+0x4b>
c0017f86:	a1 c8 18 03 c0       	mov    eax,ds:0xc00318c8
c0017f8b:	83 ec 08             	sub    esp,0x8
c0017f8e:	68 be bd 02 c0       	push   0xc002bdbe
c0017f93:	50                   	push   eax
c0017f94:	e8 a9 f8 ff ff       	call   c0017842 <findDataTable(unsigned char*, char*)>
c0017f99:	83 c4 10             	add    esp,0x10
c0017f9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017fa0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017fa5:	74 0a                	je     c0017fb1 <ACPI::detectPCI()+0x4b>
c0017fa7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017fac:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017fb1:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017fb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fbd:	8a 00                	mov    al,BYTE PTR [eax]
c0017fbf:	3c 01                	cmp    al,0x1
c0017fc1:	75 0c                	jne    c0017fcf <ACPI::detectPCI()+0x69>
c0017fc3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017fc8:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017fcd:	eb 26                	jmp    c0017ff5 <ACPI::detectPCI()+0x8f>
c0017fcf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017fd3:	8a 00                	mov    al,BYTE PTR [eax]
c0017fd5:	3c 02                	cmp    al,0x2
c0017fd7:	75 1c                	jne    c0017ff5 <ACPI::detectPCI()+0x8f>
c0017fd9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017fde:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017fe3:	74 10                	je     c0017ff5 <ACPI::detectPCI()+0x8f>
c0017fe5:	83 ec 0c             	sub    esp,0xc
c0017fe8:	68 3c bf 02 c0       	push   0xc002bf3c
c0017fed:	e8 13 23 00 00       	call   c001a305 <Krnl::panic(char const*)>
c0017ff2:	83 c4 10             	add    esp,0x10
c0017ff5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017ff9:	83 f0 01             	xor    eax,0x1
c0017ffc:	84 c0                	test   al,al
c0017ffe:	74 3f                	je     c001803f <ACPI::detectPCI()+0xd9>
c0018000:	e8 4b 81 fe ff       	call   c0000150 <manualPCIProbe>
c0018005:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018009:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001800e:	75 0c                	jne    c001801c <ACPI::detectPCI()+0xb6>
c0018010:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018015:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001801a:	eb 23                	jmp    c001803f <ACPI::detectPCI()+0xd9>
c001801c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0018021:	75 1c                	jne    c001803f <ACPI::detectPCI()+0xd9>
c0018023:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018028:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c001802d:	74 10                	je     c001803f <ACPI::detectPCI()+0xd9>
c001802f:	83 ec 0c             	sub    esp,0xc
c0018032:	68 3c bf 02 c0       	push   0xc002bf3c
c0018037:	e8 c9 22 00 00       	call   c001a305 <Krnl::panic(char const*)>
c001803c:	83 c4 10             	add    esp,0x10
c001803f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018044:	74 0d                	je     c0018053 <ACPI::detectPCI()+0xed>
c0018046:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c001804a:	83 f0 01             	xor    eax,0x1
c001804d:	0f b6 c0             	movzx  eax,al
c0018050:	40                   	inc    eax
c0018051:	eb 05                	jmp    c0018058 <ACPI::detectPCI()+0xf2>
c0018053:	b8 00 00 00 00       	mov    eax,0x0
c0018058:	83 ec 08             	sub    esp,0x8
c001805b:	50                   	push   eax
c001805c:	68 c3 bd 02 c0       	push   0xc002bdc3
c0018061:	e8 69 a8 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0018066:	83 c4 10             	add    esp,0x10
c0018069:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001806e:	74 69                	je     c00180d9 <ACPI::detectPCI()+0x173>
c0018070:	c7 44 24 08 5c 01 00 00 	mov    DWORD PTR [esp+0x8],0x15c
c0018078:	83 ec 0c             	sub    esp,0xc
c001807b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001807f:	e8 08 78 ff ff       	call   c000f88c <malloc>
c0018084:	83 c4 10             	add    esp,0x10
c0018087:	89 c3                	mov    ebx,eax
c0018089:	83 ec 0c             	sub    esp,0xc
c001808c:	53                   	push   ebx
c001808d:	e8 0e ac 00 00       	call   c0022ca0 <PCI::PCI()>
c0018092:	83 c4 10             	add    esp,0x10
c0018095:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018099:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001809d:	83 ec 08             	sub    esp,0x8
c00180a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00180a4:	50                   	push   eax
c00180a5:	e8 5e bc ff ff       	call   c0013d08 <Device::addChild(Device*)>
c00180aa:	83 c4 10             	add    esp,0x10
c00180ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00180b3:	83 c0 08             	add    eax,0x8
c00180b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00180b8:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00180bd:	74 07                	je     c00180c6 <ACPI::detectPCI()+0x160>
c00180bf:	ba 01 00 00 00       	mov    edx,0x1
c00180c4:	eb 05                	jmp    c00180cb <ACPI::detectPCI()+0x165>
c00180c6:	ba 02 00 00 00       	mov    edx,0x2
c00180cb:	6a 00                	push   0x0
c00180cd:	6a 00                	push   0x0
c00180cf:	52                   	push   edx
c00180d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00180d4:	ff d0                	call   eax
c00180d6:	83 c4 10             	add    esp,0x10
c00180d9:	90                   	nop
c00180da:	83 c4 28             	add    esp,0x28
c00180dd:	5b                   	pop    ebx
c00180de:	c3                   	ret    
c00180df:	90                   	nop

c00180e0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00180e0:	83 ec 1c             	sub    esp,0x1c
c00180e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00180e7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00180ea:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00180ee:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c00180f3:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00180f8:	83 ec 08             	sub    esp,0x8
c00180fb:	52                   	push   edx
c00180fc:	50                   	push   eax
c00180fd:	e8 a0 6d ff ff       	call   c000eea2 <Computer::readCMOS(unsigned char)>
c0018102:	83 c4 10             	add    esp,0x10
c0018105:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018109:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001810e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018113:	83 ec 04             	sub    esp,0x4
c0018116:	6a 01                	push   0x1
c0018118:	52                   	push   edx
c0018119:	50                   	push   eax
c001811a:	e8 99 6e ff ff       	call   c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>
c001811f:	83 c4 10             	add    esp,0x10
c0018122:	90                   	nop
c0018123:	83 c4 1c             	add    esp,0x1c
c0018126:	c3                   	ret    
c0018127:	90                   	nop

c0018128 <ACPI::sleep()>:
c0018128:	83 ec 0c             	sub    esp,0xc
c001812b:	a1 a0 16 03 c0       	mov    eax,ds:0xc00316a0
c0018130:	85 c0                	test   eax,eax
c0018132:	74 07                	je     c001813b <ACPI::sleep()+0x13>
c0018134:	a1 a0 16 03 c0       	mov    eax,ds:0xc00316a0
c0018139:	ff d0                	call   eax
c001813b:	90                   	nop
c001813c:	83 c4 0c             	add    esp,0xc
c001813f:	c3                   	ret    

c0018140 <ACPI::open(int, int, void*)>:
c0018140:	57                   	push   edi
c0018141:	56                   	push   esi
c0018142:	53                   	push   ebx
c0018143:	81 ec 60 01 00 00    	sub    esp,0x160
c0018149:	83 ec 0c             	sub    esp,0xc
c001814c:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018153:	e8 0e fe ff ff       	call   c0017f66 <ACPI::detectPCI()>
c0018158:	83 c4 10             	add    esp,0x10
c001815b:	83 ec 0c             	sub    esp,0xc
c001815e:	68 cc bd 02 c0       	push   0xc002bdcc
c0018163:	e8 fa 4a 00 00       	call   c001cc62 <Thr::loadKernelSymbolTable(char const*)>
c0018168:	83 c4 10             	add    esp,0x10
c001816b:	83 ec 04             	sub    esp,0x4
c001816e:	6a 0c                	push   0xc
c0018170:	68 ea bd 02 c0       	push   0xc002bdea
c0018175:	68 fb bd 02 c0       	push   0xc002bdfb
c001817a:	e8 3c 2f 00 00       	call   c001b0bb <Reg::readIntWithDefault(char*, char*, int)>
c001817f:	83 c4 10             	add    esp,0x10
c0018182:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0018189:	83 ec 0c             	sub    esp,0xc
c001818c:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0018193:	e8 6f 95 ff ff       	call   c0011707 <Virt::setupPageSwapping(int)>
c0018198:	83 c4 10             	add    esp,0x10
c001819b:	8b 1d 08 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f008
c00181a1:	83 ec 08             	sub    esp,0x8
c00181a4:	6a 01                	push   0x1
c00181a6:	68 02 be 02 c0       	push   0xc002be02
c00181ab:	e8 29 55 00 00       	call   c001d6d9 <Thr::loadDLL(char const*, bool)>
c00181b0:	83 c4 10             	add    esp,0x10
c00181b3:	83 ec 08             	sub    esp,0x8
c00181b6:	53                   	push   ebx
c00181b7:	50                   	push   eax
c00181b8:	e8 47 57 00 00       	call   c001d904 <Thr::executeDLL(unsigned long, void*)>
c00181bd:	83 c4 10             	add    esp,0x10
c00181c0:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c00181c7:	83 ec 08             	sub    esp,0x8
c00181ca:	6a 12                	push   0x12
c00181cc:	50                   	push   eax
c00181cd:	e8 ba be ff ff       	call   c001408c <getDevicesOfType(DeviceType)>
c00181d2:	83 c4 0c             	add    esp,0xc
c00181d5:	83 ec 0c             	sub    esp,0xc
c00181d8:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00181df:	50                   	push   eax
c00181e0:	e8 8b 12 01 00       	call   c0029470 <LinkedList<Device>::isEmpty()>
c00181e5:	83 c4 10             	add    esp,0x10
c00181e8:	83 f0 01             	xor    eax,0x1
c00181eb:	84 c0                	test   al,al
c00181ed:	0f 84 43 01 00 00    	je     c0018336 <ACPI::open(int, int, void*)+0x1f6>
c00181f3:	83 ec 0c             	sub    esp,0xc
c00181f6:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00181fd:	50                   	push   eax
c00181fe:	e8 89 12 01 00       	call   c002948c <LinkedList<Device>::getFirstElement()>
c0018203:	83 c4 10             	add    esp,0x10
c0018206:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c001820d:	83 ec 0c             	sub    esp,0xc
c0018210:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018217:	50                   	push   eax
c0018218:	e8 77 12 01 00       	call   c0029494 <LinkedList<Device>::removeFirst()>
c001821d:	83 c4 10             	add    esp,0x10
c0018220:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0018227:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001822e:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c0018235:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018239:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001823f:	ba 09 00 00 00       	mov    edx,0x9
c0018244:	fc                   	cld    
c0018245:	89 c7                	mov    edi,eax
c0018247:	89 de                	mov    esi,ebx
c0018249:	89 d1                	mov    ecx,edx
c001824b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001824d:	83 ec 08             	sub    esp,0x8
c0018250:	8d 44 24 38          	lea    eax,[esp+0x38]
c0018254:	50                   	push   eax
c0018255:	83 ec 24             	sub    esp,0x24
c0018258:	89 e0                	mov    eax,esp
c001825a:	89 c3                	mov    ebx,eax
c001825c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018260:	ba 09 00 00 00       	mov    edx,0x9
c0018265:	89 df                	mov    edi,ebx
c0018267:	89 c6                	mov    esi,eax
c0018269:	89 d1                	mov    ecx,edx
c001826b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001826d:	e8 2e af 00 00       	call   c00231a0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0018272:	83 c4 30             	add    esp,0x30
c0018275:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c001827c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0018284:	0f 84 4b ff ff ff    	je     c00181d5 <ACPI::open(int, int, void*)+0x95>
c001828a:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0018295:	83 ec 0c             	sub    esp,0xc
c0018298:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001829f:	e8 e8 75 ff ff       	call   c000f88c <malloc>
c00182a4:	83 c4 10             	add    esp,0x10
c00182a7:	89 c3                	mov    ebx,eax
c00182a9:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c00182ae:	83 ec 04             	sub    esp,0x4
c00182b1:	50                   	push   eax
c00182b2:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00182b9:	53                   	push   ebx
c00182ba:	e8 6f ab ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c00182bf:	83 c4 10             	add    esp,0x10
c00182c2:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00182c9:	83 ec 0c             	sub    esp,0xc
c00182cc:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00182d3:	e8 28 ae ff ff       	call   c0013100 <File::exists()>
c00182d8:	83 c4 10             	add    esp,0x10
c00182db:	84 c0                	test   al,al
c00182dd:	74 27                	je     c0018306 <ACPI::open(int, int, void*)+0x1c6>
c00182df:	83 ec 08             	sub    esp,0x8
c00182e2:	6a 01                	push   0x1
c00182e4:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00182eb:	e8 e9 53 00 00       	call   c001d6d9 <Thr::loadDLL(char const*, bool)>
c00182f0:	83 c4 10             	add    esp,0x10
c00182f3:	83 ec 08             	sub    esp,0x8
c00182f6:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00182fd:	50                   	push   eax
c00182fe:	e8 01 56 00 00       	call   c001d904 <Thr::executeDLL(unsigned long, void*)>
c0018303:	83 c4 10             	add    esp,0x10
c0018306:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001830e:	0f 84 c1 fe ff ff    	je     c00181d5 <ACPI::open(int, int, void*)+0x95>
c0018314:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001831b:	8b 00                	mov    eax,DWORD PTR [eax]
c001831d:	83 c0 08             	add    eax,0x8
c0018320:	8b 00                	mov    eax,DWORD PTR [eax]
c0018322:	83 ec 0c             	sub    esp,0xc
c0018325:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001832c:	ff d0                	call   eax
c001832e:	83 c4 10             	add    esp,0x10
c0018331:	e9 9f fe ff ff       	jmp    c00181d5 <ACPI::open(int, int, void*)+0x95>
c0018336:	83 ec 0c             	sub    esp,0xc
c0018339:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018340:	50                   	push   eax
c0018341:	e8 28 11 01 00       	call   c002946e <LinkedList<Device>::~LinkedList()>
c0018346:	83 c4 10             	add    esp,0x10
c0018349:	8b 1d 08 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f008
c001834f:	83 ec 08             	sub    esp,0x8
c0018352:	6a 01                	push   0x1
c0018354:	68 1d be 02 c0       	push   0xc002be1d
c0018359:	e8 7b 53 00 00       	call   c001d6d9 <Thr::loadDLL(char const*, bool)>
c001835e:	83 c4 10             	add    esp,0x10
c0018361:	83 ec 08             	sub    esp,0x8
c0018364:	53                   	push   ebx
c0018365:	50                   	push   eax
c0018366:	e8 99 55 00 00       	call   c001d904 <Thr::executeDLL(unsigned long, void*)>
c001836b:	83 c4 10             	add    esp,0x10
c001836e:	8b 1d 08 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f008
c0018374:	83 ec 08             	sub    esp,0x8
c0018377:	6a 01                	push   0x1
c0018379:	68 3a be 02 c0       	push   0xc002be3a
c001837e:	e8 56 53 00 00       	call   c001d6d9 <Thr::loadDLL(char const*, bool)>
c0018383:	83 c4 10             	add    esp,0x10
c0018386:	83 ec 08             	sub    esp,0x8
c0018389:	53                   	push   ebx
c001838a:	50                   	push   eax
c001838b:	e8 74 55 00 00       	call   c001d904 <Thr::executeDLL(unsigned long, void*)>
c0018390:	83 c4 10             	add    esp,0x10
c0018393:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0018398:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001839e:	83 e0 04             	and    eax,0x4
c00183a1:	84 c0                	test   al,al
c00183a3:	0f 84 fd 00 00 00    	je     c00184a6 <ACPI::open(int, int, void*)+0x366>
c00183a9:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00183b4:	83 ec 0c             	sub    esp,0xc
c00183b7:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00183be:	e8 c9 74 ff ff       	call   c000f88c <malloc>
c00183c3:	83 c4 10             	add    esp,0x10
c00183c6:	89 c3                	mov    ebx,eax
c00183c8:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c00183cd:	83 ec 04             	sub    esp,0x4
c00183d0:	50                   	push   eax
c00183d1:	68 57 be 02 c0       	push   0xc002be57
c00183d6:	53                   	push   ebx
c00183d7:	e8 52 aa ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c00183dc:	83 c4 10             	add    esp,0x10
c00183df:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c00183e6:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00183ee:	74 1a                	je     c001840a <ACPI::open(int, int, void*)+0x2ca>
c00183f0:	83 ec 0c             	sub    esp,0xc
c00183f3:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00183fa:	e8 01 ad ff ff       	call   c0013100 <File::exists()>
c00183ff:	83 c4 10             	add    esp,0x10
c0018402:	84 c0                	test   al,al
c0018404:	74 04                	je     c001840a <ACPI::open(int, int, void*)+0x2ca>
c0018406:	b0 01                	mov    al,0x1
c0018408:	eb 02                	jmp    c001840c <ACPI::open(int, int, void*)+0x2cc>
c001840a:	b0 00                	mov    al,0x0
c001840c:	84 c0                	test   al,al
c001840e:	74 25                	je     c0018435 <ACPI::open(int, int, void*)+0x2f5>
c0018410:	83 ec 08             	sub    esp,0x8
c0018413:	6a 01                	push   0x1
c0018415:	68 57 be 02 c0       	push   0xc002be57
c001841a:	e8 ba 52 00 00       	call   c001d6d9 <Thr::loadDLL(char const*, bool)>
c001841f:	83 c4 10             	add    esp,0x10
c0018422:	83 ec 08             	sub    esp,0x8
c0018425:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c001842c:	50                   	push   eax
c001842d:	e8 d2 54 00 00       	call   c001d904 <Thr::executeDLL(unsigned long, void*)>
c0018432:	83 c4 10             	add    esp,0x10
c0018435:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001843d:	74 27                	je     c0018466 <ACPI::open(int, int, void*)+0x326>
c001843f:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018447:	74 1d                	je     c0018466 <ACPI::open(int, int, void*)+0x326>
c0018449:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018450:	8b 00                	mov    eax,DWORD PTR [eax]
c0018452:	83 c0 08             	add    eax,0x8
c0018455:	8b 00                	mov    eax,DWORD PTR [eax]
c0018457:	83 ec 0c             	sub    esp,0xc
c001845a:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018461:	ff d0                	call   eax
c0018463:	83 c4 10             	add    esp,0x10
c0018466:	a1 c8 18 03 c0       	mov    eax,ds:0xc00318c8
c001846b:	83 ec 08             	sub    esp,0x8
c001846e:	68 74 be 02 c0       	push   0xc002be74
c0018473:	50                   	push   eax
c0018474:	e8 c9 f3 ff ff       	call   c0017842 <findDataTable(unsigned char*, char*)>
c0018479:	83 c4 10             	add    esp,0x10
c001847c:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c0018483:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c001848b:	74 19                	je     c00184a6 <ACPI::open(int, int, void*)+0x366>
c001848d:	83 ec 08             	sub    esp,0x8
c0018490:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018497:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c001849e:	e8 3d fc ff ff       	call   c00180e0 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00184a3:	83 c4 10             	add    esp,0x10
c00184a6:	b8 00 00 00 00       	mov    eax,0x0
c00184ab:	81 c4 60 01 00 00    	add    esp,0x160
c00184b1:	5b                   	pop    ebx
c00184b2:	5e                   	pop    esi
c00184b3:	5f                   	pop    edi
c00184b4:	c3                   	ret    
c00184b5:	90                   	nop

c00184b6 <CPU::close(int, int, void*)>:
c00184b6:	31 c0                	xor    eax,eax
c00184b8:	c3                   	ret    
c00184b9:	90                   	nop

c00184ba <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00184ba:	55                   	push   ebp
c00184bb:	57                   	push   edi
c00184bc:	56                   	push   esi
c00184bd:	53                   	push   ebx
c00184be:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00184c2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00184c6:	89 ce                	mov    esi,ecx
c00184c8:	89 d5                	mov    ebp,edx
c00184ca:	80 f9 04             	cmp    cl,0x4
c00184cd:	75 28                	jne    c00184f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00184cf:	8d 42 f9             	lea    eax,[edx-0x7]
c00184d2:	3c 03                	cmp    al,0x3
c00184d4:	0f 86 63 01 00 00    	jbe    c001863d <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00184da:	80 fa 03             	cmp    dl,0x3
c00184dd:	0f 84 5a 01 00 00    	je     c001863d <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00184e3:	8d 7a f2             	lea    edi,[edx-0xe]
c00184e6:	b8 30 e4 02 c0       	mov    eax,0xc002e430
c00184eb:	89 fb                	mov    ebx,edi
c00184ed:	80 fb 01             	cmp    bl,0x1
c00184f0:	77 4e                	ja     c0018540 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00184f2:	e9 52 01 00 00       	jmp    c0018649 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184f7:	80 f9 05             	cmp    cl,0x5
c00184fa:	75 4d                	jne    c0018549 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00184fc:	b8 40 e4 02 c0       	mov    eax,0xc002e440
c0018501:	80 fa 03             	cmp    dl,0x3
c0018504:	0f 86 3f 01 00 00    	jbe    c0018649 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001850a:	8d 7a fa             	lea    edi,[edx-0x6]
c001850d:	b8 50 e4 02 c0       	mov    eax,0xc002e450
c0018512:	89 fb                	mov    ebx,edi
c0018514:	80 fb 01             	cmp    bl,0x1
c0018517:	0f 86 2c 01 00 00    	jbe    c0018649 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001851d:	b8 60 e4 02 c0       	mov    eax,0xc002e460
c0018522:	80 fa 08             	cmp    dl,0x8
c0018525:	0f 84 1e 01 00 00    	je     c0018649 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001852b:	89 d7                	mov    edi,edx
c001852d:	b8 70 e4 02 c0       	mov    eax,0xc002e470
c0018532:	83 e7 fb             	and    edi,0xfffffffb
c0018535:	89 fb                	mov    ebx,edi
c0018537:	80 fb 09             	cmp    bl,0x9
c001853a:	0f 84 09 01 00 00    	je     c0018649 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018540:	31 c0                	xor    eax,eax
c0018542:	89 eb                	mov    ebx,ebp
c0018544:	0f b6 fb             	movzx  edi,bl
c0018547:	eb 30                	jmp    c0018579 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018549:	31 c0                	xor    eax,eax
c001854b:	80 f9 06             	cmp    cl,0x6
c001854e:	75 f2                	jne    c0018542 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018550:	80 fa 0a             	cmp    dl,0xa
c0018553:	77 ed                	ja     c0018542 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018555:	bf de 05 00 00       	mov    edi,0x5de
c001855a:	0f a3 d7             	bt     edi,edx
c001855d:	73 e3                	jae    c0018542 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001855f:	b8 80 e4 02 c0       	mov    eax,0xc002e480
c0018564:	e9 e0 00 00 00       	jmp    c0018649 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018569:	39 c7                	cmp    edi,eax
c001856b:	0f 84 d3 00 00 00    	je     c0018644 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018571:	40                   	inc    eax
c0018572:	3d d0 00 00 00       	cmp    eax,0xd0
c0018577:	74 09                	je     c0018582 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018579:	89 f3                	mov    ebx,esi
c001857b:	80 fb 0f             	cmp    bl,0xf
c001857e:	75 f1                	jne    c0018571 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018580:	eb e7                	jmp    c0018569 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018582:	80 f9 10             	cmp    cl,0x10
c0018585:	75 14                	jne    c001859b <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018587:	8d 42 fc             	lea    eax,[edx-0x4]
c001858a:	83 e0 fb             	and    eax,0xfffffffb
c001858d:	3c 02                	cmp    al,0x2
c001858f:	76 34                	jbe    c00185c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018591:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c0018596:	80 fa 02             	cmp    dl,0x2
c0018599:	eb 24                	jmp    c00185bf <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001859b:	80 f9 11             	cmp    cl,0x11
c001859e:	75 13                	jne    c00185b3 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00185a0:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c00185a5:	80 fa 03             	cmp    dl,0x3
c00185a8:	0f 85 9b 00 00 00    	jne    c0018649 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185ae:	e9 91 00 00 00       	jmp    c0018644 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00185b3:	80 f9 12             	cmp    cl,0x12
c00185b6:	75 14                	jne    c00185cc <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00185b8:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c00185bd:	fe ca                	dec    dl
c00185bf:	0f 85 84 00 00 00    	jne    c0018649 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185c5:	b8 a0 e4 02 c0       	mov    eax,0xc002e4a0
c00185ca:	eb 7d                	jmp    c0018649 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185cc:	80 f9 14             	cmp    cl,0x14
c00185cf:	75 12                	jne    c00185e3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00185d1:	4a                   	dec    edx
c00185d2:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c00185d7:	80 fa 01             	cmp    dl,0x1
c00185da:	77 6d                	ja     c0018649 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185dc:	b8 b0 e4 02 c0       	mov    eax,0xc002e4b0
c00185e1:	eb 66                	jmp    c0018649 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185e3:	80 f9 15             	cmp    cl,0x15
c00185e6:	75 31                	jne    c0018619 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00185e8:	b8 c0 e4 02 c0       	mov    eax,0xc002e4c0
c00185ed:	80 fa 01             	cmp    dl,0x1
c00185f0:	74 57                	je     c0018649 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185f2:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c00185f7:	80 fa 13             	cmp    dl,0x13
c00185fa:	76 0c                	jbe    c0018608 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00185fc:	80 fa 30             	cmp    dl,0x30
c00185ff:	75 48                	jne    c0018649 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018601:	b8 e0 e4 02 c0       	mov    eax,0xc002e4e0
c0018606:	eb 41                	jmp    c0018649 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018608:	b9 04 00 09 00       	mov    ecx,0x90004
c001860d:	0f a3 d1             	bt     ecx,edx
c0018610:	73 37                	jae    c0018649 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018612:	b8 d0 e4 02 c0       	mov    eax,0xc002e4d0
c0018617:	eb 30                	jmp    c0018649 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018619:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c001861e:	80 f9 16             	cmp    cl,0x16
c0018621:	75 26                	jne    c0018649 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018623:	b8 f0 e4 02 c0       	mov    eax,0xc002e4f0
c0018628:	84 d2                	test   dl,dl
c001862a:	74 1d                	je     c0018649 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001862c:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c0018631:	80 fa 30             	cmp    dl,0x30
c0018634:	75 13                	jne    c0018649 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018636:	b8 00 e5 02 c0       	mov    eax,0xc002e500
c001863b:	eb 0c                	jmp    c0018649 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001863d:	b8 20 e4 02 c0       	mov    eax,0xc002e420
c0018642:	eb 05                	jmp    c0018649 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018644:	b8 90 e4 02 c0       	mov    eax,0xc002e490
c0018649:	5b                   	pop    ebx
c001864a:	5e                   	pop    esi
c001864b:	5f                   	pop    edi
c001864c:	5d                   	pop    ebp
c001864d:	c3                   	ret    

c001864e <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001864e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018652:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018656:	80 f9 04             	cmp    cl,0x4
c0018659:	75 6b                	jne    c00186c6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001865b:	b8 80 e2 02 c0       	mov    eax,0xc002e280
c0018660:	80 fa 01             	cmp    dl,0x1
c0018663:	0f 86 92 02 00 00    	jbe    c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018669:	b8 90 e2 02 c0       	mov    eax,0xc002e290
c001866e:	80 fa 02             	cmp    dl,0x2
c0018671:	0f 84 84 02 00 00    	je     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018677:	b8 a0 e2 02 c0       	mov    eax,0xc002e2a0
c001867c:	80 fa 03             	cmp    dl,0x3
c001867f:	0f 84 76 02 00 00    	je     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018685:	b8 b0 e2 02 c0       	mov    eax,0xc002e2b0
c001868a:	80 fa 04             	cmp    dl,0x4
c001868d:	0f 84 68 02 00 00    	je     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018693:	b8 c0 e2 02 c0       	mov    eax,0xc002e2c0
c0018698:	80 fa 05             	cmp    dl,0x5
c001869b:	0f 84 5a 02 00 00    	je     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186a1:	b8 a0 e2 02 c0       	mov    eax,0xc002e2a0
c00186a6:	80 fa 07             	cmp    dl,0x7
c00186a9:	0f 84 4c 02 00 00    	je     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186af:	83 ea 08             	sub    edx,0x8
c00186b2:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c00186b7:	80 fa 01             	cmp    dl,0x1
c00186ba:	0f 87 3b 02 00 00    	ja     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186c0:	b8 d0 e2 02 c0       	mov    eax,0xc002e2d0
c00186c5:	c3                   	ret    
c00186c6:	80 f9 05             	cmp    cl,0x5
c00186c9:	75 45                	jne    c0018710 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00186cb:	8d 4a ff             	lea    ecx,[edx-0x1]
c00186ce:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c00186d3:	80 f9 02             	cmp    cl,0x2
c00186d6:	0f 86 1f 02 00 00    	jbe    c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186dc:	80 fa 04             	cmp    dl,0x4
c00186df:	0f 84 f3 01 00 00    	je     c00188d8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00186e5:	80 fa 07             	cmp    dl,0x7
c00186e8:	0f 84 0d 02 00 00    	je     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186ee:	b8 f0 e2 02 c0       	mov    eax,0xc002e2f0
c00186f3:	80 fa 08             	cmp    dl,0x8
c00186f6:	0f 84 ff 01 00 00    	je     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186fc:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c0018701:	80 fa 09             	cmp    dl,0x9
c0018704:	0f 85 f1 01 00 00    	jne    c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001870a:	b8 00 e3 02 c0       	mov    eax,0xc002e300
c001870f:	c3                   	ret    
c0018710:	80 f9 06             	cmp    cl,0x6
c0018713:	0f 85 85 01 00 00    	jne    c001889e <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018719:	b8 10 e3 02 c0       	mov    eax,0xc002e310
c001871e:	80 fa 01             	cmp    dl,0x1
c0018721:	0f 84 d4 01 00 00    	je     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018727:	8d 42 fb             	lea    eax,[edx-0x5]
c001872a:	3c 01                	cmp    al,0x1
c001872c:	0f 86 ac 01 00 00    	jbe    c00188de <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018732:	80 fa 03             	cmp    dl,0x3
c0018735:	0f 84 a3 01 00 00    	je     c00188de <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001873b:	8d 4a f9             	lea    ecx,[edx-0x7]
c001873e:	b8 30 e3 02 c0       	mov    eax,0xc002e330
c0018743:	80 f9 01             	cmp    cl,0x1
c0018746:	0f 86 af 01 00 00    	jbe    c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001874c:	80 fa 09             	cmp    dl,0x9
c001874f:	0f 84 8f 01 00 00    	je     c00188e4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018755:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018758:	80 f9 01             	cmp    cl,0x1
c001875b:	0f 86 9a 01 00 00    	jbe    c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018761:	b8 40 e3 02 c0       	mov    eax,0xc002e340
c0018766:	80 fa 0d             	cmp    dl,0xd
c0018769:	0f 84 8c 01 00 00    	je     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001876f:	b8 50 e3 02 c0       	mov    eax,0xc002e350
c0018774:	80 fa 0e             	cmp    dl,0xe
c0018777:	0f 84 7e 01 00 00    	je     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001877d:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c0018782:	80 fa 0f             	cmp    dl,0xf
c0018785:	0f 84 70 01 00 00    	je     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001878b:	b8 40 e3 02 c0       	mov    eax,0xc002e340
c0018790:	80 fa 15             	cmp    dl,0x15
c0018793:	0f 84 62 01 00 00    	je     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018799:	8d 4a ea             	lea    ecx,[edx-0x16]
c001879c:	b8 60 e3 02 c0       	mov    eax,0xc002e360
c00187a1:	80 f9 01             	cmp    cl,0x1
c00187a4:	0f 86 51 01 00 00    	jbe    c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187aa:	80 fa 1a             	cmp    dl,0x1a
c00187ad:	0f 84 37 01 00 00    	je     c00188ea <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00187b3:	80 fa 1c             	cmp    dl,0x1c
c00187b6:	0f 84 34 01 00 00    	je     c00188f0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00187bc:	80 fa 1d             	cmp    dl,0x1d
c00187bf:	0f 84 36 01 00 00    	je     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187c5:	b8 90 e3 02 c0       	mov    eax,0xc002e390
c00187ca:	80 fa 25             	cmp    dl,0x25
c00187cd:	0f 84 28 01 00 00    	je     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187d3:	8d 4a da             	lea    ecx,[edx-0x26]
c00187d6:	b8 80 e3 02 c0       	mov    eax,0xc002e380
c00187db:	80 f9 01             	cmp    cl,0x1
c00187de:	0f 86 17 01 00 00    	jbe    c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187e4:	b8 a0 e3 02 c0       	mov    eax,0xc002e3a0
c00187e9:	80 fa 2a             	cmp    dl,0x2a
c00187ec:	0f 84 09 01 00 00    	je     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187f2:	b8 90 e3 02 c0       	mov    eax,0xc002e390
c00187f7:	80 fa 2c             	cmp    dl,0x2c
c00187fa:	0f 84 fb 00 00 00    	je     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018800:	b8 a0 e3 02 c0       	mov    eax,0xc002e3a0
c0018805:	80 fa 2d             	cmp    dl,0x2d
c0018808:	0f 84 ed 00 00 00    	je     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001880e:	b8 70 e3 02 c0       	mov    eax,0xc002e370
c0018813:	80 fa 2e             	cmp    dl,0x2e
c0018816:	0f 84 df 00 00 00    	je     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001881c:	b8 90 e3 02 c0       	mov    eax,0xc002e390
c0018821:	80 fa 2f             	cmp    dl,0x2f
c0018824:	0f 84 d1 00 00 00    	je     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001882a:	8d 4a cb             	lea    ecx,[edx-0x35]
c001882d:	b8 80 e3 02 c0       	mov    eax,0xc002e380
c0018832:	80 f9 01             	cmp    cl,0x1
c0018835:	0f 86 c0 00 00 00    	jbe    c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001883b:	b8 b0 e3 02 c0       	mov    eax,0xc002e3b0
c0018840:	80 fa 37             	cmp    dl,0x37
c0018843:	0f 84 b2 00 00 00    	je     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018849:	b8 c0 e3 02 c0       	mov    eax,0xc002e3c0
c001884e:	80 fa 3a             	cmp    dl,0x3a
c0018851:	0f 84 a4 00 00 00    	je     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018857:	b8 d0 e3 02 c0       	mov    eax,0xc002e3d0
c001885c:	80 fa 3c             	cmp    dl,0x3c
c001885f:	0f 84 96 00 00 00    	je     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018865:	b8 e0 e3 02 c0       	mov    eax,0xc002e3e0
c001886a:	80 fa 3d             	cmp    dl,0x3d
c001886d:	0f 84 88 00 00 00    	je     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018873:	b8 c0 e3 02 c0       	mov    eax,0xc002e3c0
c0018878:	80 fa 3e             	cmp    dl,0x3e
c001887b:	74 7e                	je     c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001887d:	8d 42 bb             	lea    eax,[edx-0x45]
c0018880:	3c 01                	cmp    al,0x1
c0018882:	76 72                	jbe    c00188f6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018884:	80 fa 3f             	cmp    dl,0x3f
c0018887:	74 6d                	je     c00188f6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018889:	80 fa 4a             	cmp    dl,0x4a
c001888c:	74 0a                	je     c0018898 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001888e:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c0018893:	80 fa 4d             	cmp    dl,0x4d
c0018896:	75 63                	jne    c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018898:	b8 b0 e3 02 c0       	mov    eax,0xc002e3b0
c001889d:	c3                   	ret    
c001889e:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c00188a3:	80 f9 0b             	cmp    cl,0xb
c00188a6:	75 0a                	jne    c00188b2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00188a8:	fe ca                	dec    dl
c00188aa:	75 4f                	jne    c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188ac:	b8 f0 e3 02 c0       	mov    eax,0xc002e3f0
c00188b1:	c3                   	ret    
c00188b2:	80 f9 0f             	cmp    cl,0xf
c00188b5:	75 44                	jne    c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188b7:	b8 00 e4 02 c0       	mov    eax,0xc002e400
c00188bc:	80 fa 02             	cmp    dl,0x2
c00188bf:	76 3a                	jbe    c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188c1:	8d 42 fd             	lea    eax,[edx-0x3]
c00188c4:	3c 01                	cmp    al,0x1
c00188c6:	76 0a                	jbe    c00188d2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00188c8:	b8 82 c2 02 c0       	mov    eax,0xc002c282
c00188cd:	80 fa 06             	cmp    dl,0x6
c00188d0:	75 29                	jne    c00188fb <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00188d2:	b8 10 e4 02 c0       	mov    eax,0xc002e410
c00188d7:	c3                   	ret    
c00188d8:	b8 f0 e2 02 c0       	mov    eax,0xc002e2f0
c00188dd:	c3                   	ret    
c00188de:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c00188e3:	c3                   	ret    
c00188e4:	b8 40 e3 02 c0       	mov    eax,0xc002e340
c00188e9:	c3                   	ret    
c00188ea:	b8 70 e3 02 c0       	mov    eax,0xc002e370
c00188ef:	c3                   	ret    
c00188f0:	b8 80 e3 02 c0       	mov    eax,0xc002e380
c00188f5:	c3                   	ret    
c00188f6:	b8 d0 e3 02 c0       	mov    eax,0xc002e3d0
c00188fb:	c3                   	ret    

c00188fc <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00188fc:	60                   	pusha  
c00188fd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018901:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018905:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018909:	9c                   	pushf  
c001890a:	fa                   	cli    
c001890b:	0f 09                	wbinvd 
c001890d:	0f 30                	wrmsr  
c001890f:	9d                   	popf   
c0018910:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018914:	89 02                	mov    DWORD PTR [edx],eax
c0018916:	61                   	popa   
c0018917:	c3                   	ret    

c0018918 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018918:	60                   	pusha  
c0018919:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001891d:	9c                   	pushf  
c001891e:	fa                   	cli    
c001891f:	0f 09                	wbinvd 
c0018921:	31 c0                	xor    eax,eax
c0018923:	31 d2                	xor    edx,edx
c0018925:	0f 32                	rdmsr  
c0018927:	9d                   	popf   
c0018928:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001892c:	89 02                	mov    DWORD PTR [edx],eax
c001892e:	61                   	popa   
c001892f:	c3                   	ret    

c0018930 <CPU::AMD_K6_writeback(int, int, int)>:
c0018930:	56                   	push   esi
c0018931:	53                   	push   ebx
c0018932:	83 ec 10             	sub    esp,0x10
c0018935:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018939:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001893e:	75 5d                	jne    c001899d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018940:	83 f8 08             	cmp    eax,0x8
c0018943:	75 09                	jne    c001894e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018945:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001894a:	7e 13                	jle    c001895f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001894c:	eb 30                	jmp    c001897e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001894e:	83 f8 06             	cmp    eax,0x6
c0018951:	7c 4a                	jl     c001899d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018953:	83 f8 07             	cmp    eax,0x7
c0018956:	7e 07                	jle    c001895f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018958:	83 f8 09             	cmp    eax,0x9
c001895b:	74 21                	je     c001897e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001895d:	eb 3e                	jmp    c001899d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001895f:	89 e6                	mov    esi,esp
c0018961:	8b 1d 48 f0 02 c0    	mov    ebx,DWORD PTR ds:0xc002f048
c0018967:	56                   	push   esi
c0018968:	c1 eb 15             	shr    ebx,0x15
c001896b:	68 82 00 00 c0       	push   0xc0000082
c0018970:	83 e3 7e             	and    ebx,0x7e
c0018973:	e8 a0 ff ff ff       	call   c0018918 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018978:	56                   	push   esi
c0018979:	6a 00                	push   0x0
c001897b:	53                   	push   ebx
c001897c:	eb 12                	jmp    c0018990 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001897e:	89 e3                	mov    ebx,esp
c0018980:	53                   	push   ebx
c0018981:	68 82 00 00 c0       	push   0xc0000082
c0018986:	e8 8d ff ff ff       	call   c0018918 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001898b:	53                   	push   ebx
c001898c:	6a 00                	push   0x0
c001898e:	6a 00                	push   0x0
c0018990:	68 82 00 00 c0       	push   0xc0000082
c0018995:	e8 62 ff ff ff       	call   c00188fc <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001899a:	83 c4 18             	add    esp,0x18
c001899d:	83 c4 10             	add    esp,0x10
c00189a0:	5b                   	pop    ebx
c00189a1:	5e                   	pop    esi
c00189a2:	c3                   	ret    
c00189a3:	90                   	nop

c00189a4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00189a4:	55                   	push   ebp
c00189a5:	57                   	push   edi
c00189a6:	56                   	push   esi
c00189a7:	53                   	push   ebx
c00189a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00189ac:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00189b0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00189b4:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00189b8:	39 05 20 e5 02 c0    	cmp    DWORD PTR ds:0xc002e520,eax
c00189be:	75 23                	jne    c00189e3 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00189c0:	a1 2c 1b 03 c0       	mov    eax,ds:0xc0031b2c
c00189c5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00189c9:	89 06                	mov    DWORD PTR [esi],eax
c00189cb:	a1 28 1b 03 c0       	mov    eax,ds:0xc0031b28
c00189d0:	89 07                	mov    DWORD PTR [edi],eax
c00189d2:	a1 24 1b 03 c0       	mov    eax,ds:0xc0031b24
c00189d7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00189da:	a1 20 1b 03 c0       	mov    eax,ds:0xc0031b20
c00189df:	89 02                	mov    DWORD PTR [edx],eax
c00189e1:	eb 3f                	jmp    c0018a22 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00189e3:	31 c9                	xor    ecx,ecx
c00189e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00189e9:	0f a2                	cpuid  
c00189eb:	89 06                	mov    DWORD PTR [esi],eax
c00189ed:	89 1f                	mov    DWORD PTR [edi],ebx
c00189ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00189f3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00189f6:	89 10                	mov    DWORD PTR [eax],edx
c00189f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00189fc:	a3 20 e5 02 c0       	mov    ds:0xc002e520,eax
c0018a01:	8b 06                	mov    eax,DWORD PTR [esi]
c0018a03:	a3 2c 1b 03 c0       	mov    ds:0xc0031b2c,eax
c0018a08:	8b 07                	mov    eax,DWORD PTR [edi]
c0018a0a:	a3 28 1b 03 c0       	mov    ds:0xc0031b28,eax
c0018a0f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018a12:	a3 24 1b 03 c0       	mov    ds:0xc0031b24,eax
c0018a17:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018a1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a1d:	a3 20 1b 03 c0       	mov    ds:0xc0031b20,eax
c0018a22:	5b                   	pop    ebx
c0018a23:	5e                   	pop    esi
c0018a24:	5f                   	pop    edi
c0018a25:	5d                   	pop    ebp
c0018a26:	c3                   	ret    
c0018a27:	90                   	nop

c0018a28 <CPU::cpuidCheckEDX(unsigned int)>:
c0018a28:	83 ec 10             	sub    esp,0x10
c0018a2b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a2f:	50                   	push   eax
c0018a30:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a34:	50                   	push   eax
c0018a35:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a39:	50                   	push   eax
c0018a3a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a3e:	50                   	push   eax
c0018a3f:	6a 01                	push   0x1
c0018a41:	e8 5e ff ff ff       	call   c00189a4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a46:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a4a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018a4e:	0f 95 c0             	setne  al
c0018a51:	83 c4 24             	add    esp,0x24
c0018a54:	c3                   	ret    
c0018a55:	90                   	nop

c0018a56 <CPU::cpuidCheckECX(unsigned int)>:
c0018a56:	83 ec 10             	sub    esp,0x10
c0018a59:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a5d:	50                   	push   eax
c0018a5e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a62:	50                   	push   eax
c0018a63:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a67:	50                   	push   eax
c0018a68:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a6c:	50                   	push   eax
c0018a6d:	6a 01                	push   0x1
c0018a6f:	e8 30 ff ff ff       	call   c00189a4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a74:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a78:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018a7c:	0f 95 c0             	setne  al
c0018a7f:	83 c4 24             	add    esp,0x24
c0018a82:	c3                   	ret    
c0018a83:	90                   	nop

c0018a84 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018a84:	83 ec 10             	sub    esp,0x10
c0018a87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a8b:	50                   	push   eax
c0018a8c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a90:	50                   	push   eax
c0018a91:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a95:	50                   	push   eax
c0018a96:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a9a:	50                   	push   eax
c0018a9b:	6a 07                	push   0x7
c0018a9d:	e8 02 ff ff ff       	call   c00189a4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018aa2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018aa6:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018aaa:	0f 95 c0             	setne  al
c0018aad:	83 c4 24             	add    esp,0x24
c0018ab0:	c3                   	ret    
c0018ab1:	90                   	nop

c0018ab2 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018ab2:	83 ec 10             	sub    esp,0x10
c0018ab5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ab9:	50                   	push   eax
c0018aba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018abe:	50                   	push   eax
c0018abf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ac3:	50                   	push   eax
c0018ac4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ac8:	50                   	push   eax
c0018ac9:	6a 07                	push   0x7
c0018acb:	e8 d4 fe ff ff       	call   c00189a4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ad0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ad4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018ad8:	0f 95 c0             	setne  al
c0018adb:	83 c4 24             	add    esp,0x24
c0018ade:	c3                   	ret    
c0018adf:	90                   	nop

c0018ae0 <CPU::CPU()>:
c0018ae0:	83 ec 0c             	sub    esp,0xc
c0018ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ae7:	83 ec 08             	sub    esp,0x8
c0018aea:	68 82 c2 02 c0       	push   0xc002c282
c0018aef:	50                   	push   eax
c0018af0:	e8 17 b4 ff ff       	call   c0013f0c <Device::Device(char const*)>
c0018af5:	83 c4 10             	add    esp,0x10
c0018af8:	ba 5c c3 02 c0       	mov    edx,0xc002c35c
c0018afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b01:	89 10                	mov    DWORD PTR [eax],edx
c0018b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b07:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018b11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b15:	05 78 01 00 00       	add    eax,0x178
c0018b1a:	83 ec 0c             	sub    esp,0xc
c0018b1d:	50                   	push   eax
c0018b1e:	e8 7f 65 ff ff       	call   c000f0a2 <GDT::GDT()>
c0018b23:	83 c4 10             	add    esp,0x10
c0018b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b2a:	05 7c 09 00 00       	add    eax,0x97c
c0018b2f:	83 ec 0c             	sub    esp,0xc
c0018b32:	50                   	push   eax
c0018b33:	e8 d4 67 ff ff       	call   c000f30c <IDT::IDT()>
c0018b38:	83 c4 10             	add    esp,0x10
c0018b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b3f:	05 7c 11 00 00       	add    eax,0x117c
c0018b44:	83 ec 0c             	sub    esp,0xc
c0018b47:	50                   	push   eax
c0018b48:	e8 ad 82 ff ff       	call   c0010dfa <TSS::TSS()>
c0018b4d:	83 c4 10             	add    esp,0x10
c0018b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b54:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018b5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b5f:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018b69:	90                   	nop
c0018b6a:	83 c4 0c             	add    esp,0xc
c0018b6d:	c3                   	ret    

c0018b6e <CPU::displayFeatures()>:
c0018b6e:	53                   	push   ebx
c0018b6f:	83 ec 10             	sub    esp,0x10
c0018b72:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018b76:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018b7c:	68 90 bf 02 c0       	push   0xc002bf90
c0018b81:	e8 49 9d ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0018b86:	59                   	pop    ecx
c0018b87:	58                   	pop    eax
c0018b88:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018b8e:	50                   	push   eax
c0018b8f:	68 a1 bf 02 c0       	push   0xc002bfa1
c0018b94:	e8 36 9d ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0018b99:	58                   	pop    eax
c0018b9a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ba0:	5a                   	pop    edx
c0018ba1:	c1 e8 0e             	shr    eax,0xe
c0018ba4:	0f b6 c0             	movzx  eax,al
c0018ba7:	50                   	push   eax
c0018ba8:	68 b2 bf 02 c0       	push   0xc002bfb2
c0018bad:	e8 1d 9d ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0018bb2:	59                   	pop    ecx
c0018bb3:	58                   	pop    eax
c0018bb4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018bba:	66 c1 e8 06          	shr    ax,0x6
c0018bbe:	0f b6 c0             	movzx  eax,al
c0018bc1:	50                   	push   eax
c0018bc2:	68 c3 bf 02 c0       	push   0xc002bfc3
c0018bc7:	e8 03 9d ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0018bcc:	c7 04 24 70 c4 02 c0 	mov    DWORD PTR [esp],0xc002c470
c0018bd3:	e8 f7 9c ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0018bd8:	83 c4 10             	add    esp,0x10
c0018bdb:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018be0:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018be7:	74 05                	je     c0018bee <CPU::displayFeatures()+0x80>
c0018be9:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018bee:	52                   	push   edx
c0018bef:	52                   	push   edx
c0018bf0:	50                   	push   eax
c0018bf1:	68 d4 bf 02 c0       	push   0xc002bfd4
c0018bf6:	e8 d4 9c ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0018bfb:	83 c4 10             	add    esp,0x10
c0018bfe:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018c03:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018c0a:	78 05                	js     c0018c11 <CPU::displayFeatures()+0xa3>
c0018c0c:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018c11:	51                   	push   ecx
c0018c12:	51                   	push   ecx
c0018c13:	50                   	push   eax
c0018c14:	68 eb bf 02 c0       	push   0xc002bfeb
c0018c19:	e8 b1 9c ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0018c1e:	83 c4 10             	add    esp,0x10
c0018c21:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018c26:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018c2d:	75 05                	jne    c0018c34 <CPU::displayFeatures()+0xc6>
c0018c2f:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018c34:	52                   	push   edx
c0018c35:	52                   	push   edx
c0018c36:	50                   	push   eax
c0018c37:	68 02 c0 02 c0       	push   0xc002c002
c0018c3c:	e8 8e 9c ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0018c41:	83 c4 10             	add    esp,0x10
c0018c44:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018c49:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018c50:	75 05                	jne    c0018c57 <CPU::displayFeatures()+0xe9>
c0018c52:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018c57:	51                   	push   ecx
c0018c58:	51                   	push   ecx
c0018c59:	50                   	push   eax
c0018c5a:	68 19 c0 02 c0       	push   0xc002c019
c0018c5f:	e8 6b 9c ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0018c64:	83 c4 10             	add    esp,0x10
c0018c67:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018c6c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018c73:	75 05                	jne    c0018c7a <CPU::displayFeatures()+0x10c>
c0018c75:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018c7a:	52                   	push   edx
c0018c7b:	52                   	push   edx
c0018c7c:	50                   	push   eax
c0018c7d:	68 30 c0 02 c0       	push   0xc002c030
c0018c82:	e8 48 9c ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0018c87:	83 c4 10             	add    esp,0x10
c0018c8a:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018c8f:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018c96:	75 05                	jne    c0018c9d <CPU::displayFeatures()+0x12f>
c0018c98:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018c9d:	51                   	push   ecx
c0018c9e:	51                   	push   ecx
c0018c9f:	50                   	push   eax
c0018ca0:	68 47 c0 02 c0       	push   0xc002c047
c0018ca5:	e8 25 9c ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0018caa:	83 c4 10             	add    esp,0x10
c0018cad:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018cb2:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018cb9:	75 05                	jne    c0018cc0 <CPU::displayFeatures()+0x152>
c0018cbb:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018cc0:	52                   	push   edx
c0018cc1:	52                   	push   edx
c0018cc2:	50                   	push   eax
c0018cc3:	68 5e c0 02 c0       	push   0xc002c05e
c0018cc8:	e8 02 9c ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0018ccd:	83 c4 10             	add    esp,0x10
c0018cd0:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018cd5:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018cdc:	75 05                	jne    c0018ce3 <CPU::displayFeatures()+0x175>
c0018cde:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018ce3:	51                   	push   ecx
c0018ce4:	51                   	push   ecx
c0018ce5:	50                   	push   eax
c0018ce6:	68 75 c0 02 c0       	push   0xc002c075
c0018ceb:	e8 df 9b ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0018cf0:	83 c4 10             	add    esp,0x10
c0018cf3:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018cf8:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018cff:	75 05                	jne    c0018d06 <CPU::displayFeatures()+0x198>
c0018d01:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018d06:	52                   	push   edx
c0018d07:	52                   	push   edx
c0018d08:	50                   	push   eax
c0018d09:	68 8c c0 02 c0       	push   0xc002c08c
c0018d0e:	e8 bc 9b ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0018d13:	83 c4 10             	add    esp,0x10
c0018d16:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018d1b:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018d22:	75 05                	jne    c0018d29 <CPU::displayFeatures()+0x1bb>
c0018d24:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018d29:	51                   	push   ecx
c0018d2a:	51                   	push   ecx
c0018d2b:	50                   	push   eax
c0018d2c:	68 a3 c0 02 c0       	push   0xc002c0a3
c0018d31:	e8 99 9b ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0018d36:	83 c4 10             	add    esp,0x10
c0018d39:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018d3e:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018d45:	75 05                	jne    c0018d4c <CPU::displayFeatures()+0x1de>
c0018d47:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018d4c:	52                   	push   edx
c0018d4d:	52                   	push   edx
c0018d4e:	50                   	push   eax
c0018d4f:	68 ba c0 02 c0       	push   0xc002c0ba
c0018d54:	e8 76 9b ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0018d59:	83 c4 10             	add    esp,0x10
c0018d5c:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018d61:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018d68:	75 05                	jne    c0018d6f <CPU::displayFeatures()+0x201>
c0018d6a:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018d6f:	51                   	push   ecx
c0018d70:	51                   	push   ecx
c0018d71:	50                   	push   eax
c0018d72:	68 d1 c0 02 c0       	push   0xc002c0d1
c0018d77:	e8 53 9b ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0018d7c:	83 c4 10             	add    esp,0x10
c0018d7f:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018d84:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018d8b:	75 05                	jne    c0018d92 <CPU::displayFeatures()+0x224>
c0018d8d:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018d92:	52                   	push   edx
c0018d93:	52                   	push   edx
c0018d94:	50                   	push   eax
c0018d95:	68 e8 c0 02 c0       	push   0xc002c0e8
c0018d9a:	e8 30 9b ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0018d9f:	83 c4 10             	add    esp,0x10
c0018da2:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018da7:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018dae:	78 05                	js     c0018db5 <CPU::displayFeatures()+0x247>
c0018db0:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018db5:	51                   	push   ecx
c0018db6:	51                   	push   ecx
c0018db7:	50                   	push   eax
c0018db8:	68 ff c0 02 c0       	push   0xc002c0ff
c0018dbd:	e8 0d 9b ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0018dc2:	83 c4 10             	add    esp,0x10
c0018dc5:	b8 52 a9 02 c0       	mov    eax,0xc002a952
c0018dca:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018dd1:	75 05                	jne    c0018dd8 <CPU::displayFeatures()+0x26a>
c0018dd3:	b8 56 a9 02 c0       	mov    eax,0xc002a956
c0018dd8:	52                   	push   edx
c0018dd9:	52                   	push   edx
c0018dda:	50                   	push   eax
c0018ddb:	68 16 c1 02 c0       	push   0xc002c116
c0018de0:	e8 ea 9a ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0018de5:	83 c4 18             	add    esp,0x18
c0018de8:	5b                   	pop    ebx
c0018de9:	c3                   	ret    

c0018dea <CPU::detectFeatures()>:
c0018dea:	55                   	push   ebp
c0018deb:	57                   	push   edi
c0018dec:	56                   	push   esi
c0018ded:	53                   	push   ebx
c0018dee:	83 ec 50             	sub    esp,0x50
c0018df1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018df5:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018dff:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018e06:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018e0c:	6a 0d                	push   0xd
c0018e0e:	6a 00                	push   0x0
c0018e10:	55                   	push   ebp
c0018e11:	e8 3a 79 fe ff       	call   c0000750 <memset>
c0018e16:	83 c4 10             	add    esp,0x10
c0018e19:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0018e1e:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018e25:	0f 84 22 09 00 00    	je     c001974d <CPU::detectFeatures()+0x963>
c0018e2b:	83 ec 0c             	sub    esp,0xc
c0018e2e:	89 ef                	mov    edi,ebp
c0018e30:	6a 10                	push   0x10
c0018e32:	e8 f1 fb ff ff       	call   c0018a28 <CPU::cpuidCheckEDX(unsigned int)>
c0018e37:	83 e0 01             	and    eax,0x1
c0018e3a:	8d 14 00             	lea    edx,[eax+eax*1]
c0018e3d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e43:	83 e0 fd             	and    eax,0xfffffffd
c0018e46:	09 d0                	or     eax,edx
c0018e48:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e4e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018e55:	e8 ce fb ff ff       	call   c0018a28 <CPU::cpuidCheckEDX(unsigned int)>
c0018e5a:	83 e0 01             	and    eax,0x1
c0018e5d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018e64:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e6a:	83 e0 fb             	and    eax,0xfffffffb
c0018e6d:	09 d0                	or     eax,edx
c0018e6f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e75:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018e7c:	e8 a7 fb ff ff       	call   c0018a28 <CPU::cpuidCheckEDX(unsigned int)>
c0018e81:	83 e0 01             	and    eax,0x1
c0018e84:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018e8b:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e91:	83 e0 f7             	and    eax,0xfffffff7
c0018e94:	09 d0                	or     eax,edx
c0018e96:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e9c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018ea3:	e8 80 fb ff ff       	call   c0018a28 <CPU::cpuidCheckEDX(unsigned int)>
c0018ea8:	83 e0 01             	and    eax,0x1
c0018eab:	c1 e0 04             	shl    eax,0x4
c0018eae:	88 c2                	mov    dl,al
c0018eb0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018eb6:	83 e0 ef             	and    eax,0xffffffef
c0018eb9:	09 d0                	or     eax,edx
c0018ebb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ec1:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018ec8:	e8 5b fb ff ff       	call   c0018a28 <CPU::cpuidCheckEDX(unsigned int)>
c0018ecd:	83 e0 01             	and    eax,0x1
c0018ed0:	c1 e0 05             	shl    eax,0x5
c0018ed3:	88 c2                	mov    dl,al
c0018ed5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018edb:	83 e0 df             	and    eax,0xffffffdf
c0018ede:	09 d0                	or     eax,edx
c0018ee0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018ee6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018eed:	e8 36 fb ff ff       	call   c0018a28 <CPU::cpuidCheckEDX(unsigned int)>
c0018ef2:	83 e0 01             	and    eax,0x1
c0018ef5:	8d 14 00             	lea    edx,[eax+eax*1]
c0018ef8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018efe:	83 e0 fd             	and    eax,0xfffffffd
c0018f01:	09 d0                	or     eax,edx
c0018f03:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018f09:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018f10:	e8 13 fb ff ff       	call   c0018a28 <CPU::cpuidCheckEDX(unsigned int)>
c0018f15:	83 e0 01             	and    eax,0x1
c0018f18:	c1 e0 06             	shl    eax,0x6
c0018f1b:	88 c2                	mov    dl,al
c0018f1d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018f23:	83 e0 bf             	and    eax,0xffffffbf
c0018f26:	09 d0                	or     eax,edx
c0018f28:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018f2e:	58                   	pop    eax
c0018f2f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f33:	50                   	push   eax
c0018f34:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f38:	50                   	push   eax
c0018f39:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018f3d:	56                   	push   esi
c0018f3e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f42:	50                   	push   eax
c0018f43:	6a 00                	push   0x0
c0018f45:	e8 5a fa ff ff       	call   c00189a4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f4a:	b8 04 00 00 00       	mov    eax,0x4
c0018f4f:	89 c1                	mov    ecx,eax
c0018f51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f53:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018f59:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018f5d:	89 c1                	mov    ecx,eax
c0018f5f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f61:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018f67:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018f6b:	89 c1                	mov    ecx,eax
c0018f6d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f6f:	83 c4 18             	add    esp,0x18
c0018f72:	68 2d c1 02 c0       	push   0xc002c12d
c0018f77:	55                   	push   ebp
c0018f78:	e8 1b 79 fe ff       	call   c0000898 <strcmp>
c0018f7d:	83 c4 10             	add    esp,0x10
c0018f80:	85 c0                	test   eax,eax
c0018f82:	75 0f                	jne    c0018f93 <CPU::detectFeatures()+0x1a9>
c0018f84:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018f8e:	e9 22 02 00 00       	jmp    c00191b5 <CPU::detectFeatures()+0x3cb>
c0018f93:	50                   	push   eax
c0018f94:	50                   	push   eax
c0018f95:	68 3a c1 02 c0       	push   0xc002c13a
c0018f9a:	55                   	push   ebp
c0018f9b:	e8 f8 78 fe ff       	call   c0000898 <strcmp>
c0018fa0:	83 c4 10             	add    esp,0x10
c0018fa3:	85 c0                	test   eax,eax
c0018fa5:	74 dd                	je     c0018f84 <CPU::detectFeatures()+0x19a>
c0018fa7:	50                   	push   eax
c0018fa8:	50                   	push   eax
c0018fa9:	68 47 c1 02 c0       	push   0xc002c147
c0018fae:	55                   	push   ebp
c0018faf:	e8 e4 78 fe ff       	call   c0000898 <strcmp>
c0018fb4:	83 c4 10             	add    esp,0x10
c0018fb7:	85 c0                	test   eax,eax
c0018fb9:	74 2a                	je     c0018fe5 <CPU::detectFeatures()+0x1fb>
c0018fbb:	50                   	push   eax
c0018fbc:	50                   	push   eax
c0018fbd:	68 54 c1 02 c0       	push   0xc002c154
c0018fc2:	55                   	push   ebp
c0018fc3:	e8 d0 78 fe ff       	call   c0000898 <strcmp>
c0018fc8:	83 c4 10             	add    esp,0x10
c0018fcb:	85 c0                	test   eax,eax
c0018fcd:	74 16                	je     c0018fe5 <CPU::detectFeatures()+0x1fb>
c0018fcf:	50                   	push   eax
c0018fd0:	50                   	push   eax
c0018fd1:	68 61 c1 02 c0       	push   0xc002c161
c0018fd6:	55                   	push   ebp
c0018fd7:	e8 bc 78 fe ff       	call   c0000898 <strcmp>
c0018fdc:	83 c4 10             	add    esp,0x10
c0018fdf:	85 c0                	test   eax,eax
c0018fe1:	74 48                	je     c001902b <CPU::detectFeatures()+0x241>
c0018fe3:	eb 0f                	jmp    c0018ff4 <CPU::detectFeatures()+0x20a>
c0018fe5:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018fef:	e9 c1 01 00 00       	jmp    c00191b5 <CPU::detectFeatures()+0x3cb>
c0018ff4:	50                   	push   eax
c0018ff5:	50                   	push   eax
c0018ff6:	68 6e c1 02 c0       	push   0xc002c16e
c0018ffb:	55                   	push   ebp
c0018ffc:	e8 97 78 fe ff       	call   c0000898 <strcmp>
c0019001:	83 c4 10             	add    esp,0x10
c0019004:	85 c0                	test   eax,eax
c0019006:	74 23                	je     c001902b <CPU::detectFeatures()+0x241>
c0019008:	57                   	push   edi
c0019009:	57                   	push   edi
c001900a:	68 7b c1 02 c0       	push   0xc002c17b
c001900f:	55                   	push   ebp
c0019010:	e8 83 78 fe ff       	call   c0000898 <strcmp>
c0019015:	83 c4 10             	add    esp,0x10
c0019018:	85 c0                	test   eax,eax
c001901a:	75 1e                	jne    c001903a <CPU::detectFeatures()+0x250>
c001901c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019026:	e9 8a 01 00 00       	jmp    c00191b5 <CPU::detectFeatures()+0x3cb>
c001902b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019035:	e9 7b 01 00 00       	jmp    c00191b5 <CPU::detectFeatures()+0x3cb>
c001903a:	56                   	push   esi
c001903b:	56                   	push   esi
c001903c:	68 88 c1 02 c0       	push   0xc002c188
c0019041:	55                   	push   ebp
c0019042:	e8 51 78 fe ff       	call   c0000898 <strcmp>
c0019047:	83 c4 10             	add    esp,0x10
c001904a:	85 c0                	test   eax,eax
c001904c:	75 0f                	jne    c001905d <CPU::detectFeatures()+0x273>
c001904e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019058:	e9 58 01 00 00       	jmp    c00191b5 <CPU::detectFeatures()+0x3cb>
c001905d:	51                   	push   ecx
c001905e:	51                   	push   ecx
c001905f:	68 47 c1 02 c0       	push   0xc002c147
c0019064:	55                   	push   ebp
c0019065:	e8 2e 78 fe ff       	call   c0000898 <strcmp>
c001906a:	83 c4 10             	add    esp,0x10
c001906d:	85 c0                	test   eax,eax
c001906f:	75 0f                	jne    c0019080 <CPU::detectFeatures()+0x296>
c0019071:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001907b:	e9 35 01 00 00       	jmp    c00191b5 <CPU::detectFeatures()+0x3cb>
c0019080:	52                   	push   edx
c0019081:	52                   	push   edx
c0019082:	68 95 c1 02 c0       	push   0xc002c195
c0019087:	55                   	push   ebp
c0019088:	e8 0b 78 fe ff       	call   c0000898 <strcmp>
c001908d:	83 c4 10             	add    esp,0x10
c0019090:	85 c0                	test   eax,eax
c0019092:	75 0f                	jne    c00190a3 <CPU::detectFeatures()+0x2b9>
c0019094:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001909e:	e9 12 01 00 00       	jmp    c00191b5 <CPU::detectFeatures()+0x3cb>
c00190a3:	50                   	push   eax
c00190a4:	50                   	push   eax
c00190a5:	68 a2 c1 02 c0       	push   0xc002c1a2
c00190aa:	55                   	push   ebp
c00190ab:	e8 e8 77 fe ff       	call   c0000898 <strcmp>
c00190b0:	83 c4 10             	add    esp,0x10
c00190b3:	85 c0                	test   eax,eax
c00190b5:	75 0f                	jne    c00190c6 <CPU::detectFeatures()+0x2dc>
c00190b7:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00190c1:	e9 ef 00 00 00       	jmp    c00191b5 <CPU::detectFeatures()+0x3cb>
c00190c6:	50                   	push   eax
c00190c7:	50                   	push   eax
c00190c8:	68 af c1 02 c0       	push   0xc002c1af
c00190cd:	55                   	push   ebp
c00190ce:	e8 c5 77 fe ff       	call   c0000898 <strcmp>
c00190d3:	83 c4 10             	add    esp,0x10
c00190d6:	85 c0                	test   eax,eax
c00190d8:	75 0f                	jne    c00190e9 <CPU::detectFeatures()+0x2ff>
c00190da:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00190e4:	e9 cc 00 00 00       	jmp    c00191b5 <CPU::detectFeatures()+0x3cb>
c00190e9:	50                   	push   eax
c00190ea:	50                   	push   eax
c00190eb:	68 bc c1 02 c0       	push   0xc002c1bc
c00190f0:	55                   	push   ebp
c00190f1:	e8 a2 77 fe ff       	call   c0000898 <strcmp>
c00190f6:	83 c4 10             	add    esp,0x10
c00190f9:	85 c0                	test   eax,eax
c00190fb:	75 0f                	jne    c001910c <CPU::detectFeatures()+0x322>
c00190fd:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0019107:	e9 a9 00 00 00       	jmp    c00191b5 <CPU::detectFeatures()+0x3cb>
c001910c:	50                   	push   eax
c001910d:	50                   	push   eax
c001910e:	68 c9 c1 02 c0       	push   0xc002c1c9
c0019113:	55                   	push   ebp
c0019114:	e8 7f 77 fe ff       	call   c0000898 <strcmp>
c0019119:	83 c4 10             	add    esp,0x10
c001911c:	85 c0                	test   eax,eax
c001911e:	75 0f                	jne    c001912f <CPU::detectFeatures()+0x345>
c0019120:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001912a:	e9 86 00 00 00       	jmp    c00191b5 <CPU::detectFeatures()+0x3cb>
c001912f:	50                   	push   eax
c0019130:	50                   	push   eax
c0019131:	68 d6 c1 02 c0       	push   0xc002c1d6
c0019136:	55                   	push   ebp
c0019137:	e8 5c 77 fe ff       	call   c0000898 <strcmp>
c001913c:	83 c4 10             	add    esp,0x10
c001913f:	85 c0                	test   eax,eax
c0019141:	75 0c                	jne    c001914f <CPU::detectFeatures()+0x365>
c0019143:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001914d:	eb 66                	jmp    c00191b5 <CPU::detectFeatures()+0x3cb>
c001914f:	50                   	push   eax
c0019150:	50                   	push   eax
c0019151:	68 e3 c1 02 c0       	push   0xc002c1e3
c0019156:	55                   	push   ebp
c0019157:	e8 3c 77 fe ff       	call   c0000898 <strcmp>
c001915c:	83 c4 10             	add    esp,0x10
c001915f:	85 c0                	test   eax,eax
c0019161:	75 0c                	jne    c001916f <CPU::detectFeatures()+0x385>
c0019163:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001916d:	eb 46                	jmp    c00191b5 <CPU::detectFeatures()+0x3cb>
c001916f:	57                   	push   edi
c0019170:	57                   	push   edi
c0019171:	68 f0 c1 02 c0       	push   0xc002c1f0
c0019176:	55                   	push   ebp
c0019177:	e8 1c 77 fe ff       	call   c0000898 <strcmp>
c001917c:	83 c4 10             	add    esp,0x10
c001917f:	85 c0                	test   eax,eax
c0019181:	74 e0                	je     c0019163 <CPU::detectFeatures()+0x379>
c0019183:	56                   	push   esi
c0019184:	56                   	push   esi
c0019185:	68 fd c1 02 c0       	push   0xc002c1fd
c001918a:	55                   	push   ebp
c001918b:	e8 08 77 fe ff       	call   c0000898 <strcmp>
c0019190:	83 c4 10             	add    esp,0x10
c0019193:	85 c0                	test   eax,eax
c0019195:	74 cc                	je     c0019163 <CPU::detectFeatures()+0x379>
c0019197:	51                   	push   ecx
c0019198:	51                   	push   ecx
c0019199:	68 0a c2 02 c0       	push   0xc002c20a
c001919e:	55                   	push   ebp
c001919f:	e8 f4 76 fe ff       	call   c0000898 <strcmp>
c00191a4:	83 c4 10             	add    esp,0x10
c00191a7:	85 c0                	test   eax,eax
c00191a9:	74 b8                	je     c0019163 <CPU::detectFeatures()+0x379>
c00191ab:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00191b5:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00191ba:	0f 86 be 00 00 00    	jbe    c001927e <CPU::detectFeatures()+0x494>
c00191c0:	83 ec 0c             	sub    esp,0xc
c00191c3:	68 80 00 00 00       	push   0x80
c00191c8:	e8 b7 f8 ff ff       	call   c0018a84 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00191cd:	83 e0 01             	and    eax,0x1
c00191d0:	c1 e0 06             	shl    eax,0x6
c00191d3:	88 c2                	mov    dl,al
c00191d5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191db:	83 e0 bf             	and    eax,0xffffffbf
c00191de:	09 d0                	or     eax,edx
c00191e0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191e6:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00191ed:	e8 92 f8 ff ff       	call   c0018a84 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00191f2:	83 e0 01             	and    eax,0x1
c00191f5:	c1 e0 04             	shl    eax,0x4
c00191f8:	88 c2                	mov    dl,al
c00191fa:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019200:	83 e0 ef             	and    eax,0xffffffef
c0019203:	09 d0                	or     eax,edx
c0019205:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001920b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019212:	e8 6d f8 ff ff       	call   c0018a84 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019217:	c1 e0 07             	shl    eax,0x7
c001921a:	88 c2                	mov    dl,al
c001921c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019222:	83 e0 7f             	and    eax,0x7f
c0019225:	09 d0                	or     eax,edx
c0019227:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001922d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019234:	e8 79 f8 ff ff       	call   c0018ab2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019239:	83 e0 01             	and    eax,0x1
c001923c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019243:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019249:	83 e0 f7             	and    eax,0xfffffff7
c001924c:	09 d0                	or     eax,edx
c001924e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019254:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001925b:	e8 52 f8 ff ff       	call   c0018ab2 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019260:	83 c4 10             	add    esp,0x10
c0019263:	83 e0 01             	and    eax,0x1
c0019266:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001926d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019273:	83 e0 fb             	and    eax,0xfffffffb
c0019276:	09 d0                	or     eax,edx
c0019278:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001927e:	83 ec 0c             	sub    esp,0xc
c0019281:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019285:	50                   	push   eax
c0019286:	8d 44 24 28          	lea    eax,[esp+0x28]
c001928a:	50                   	push   eax
c001928b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001928f:	56                   	push   esi
c0019290:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019294:	50                   	push   eax
c0019295:	6a 01                	push   0x1
c0019297:	e8 08 f7 ff ff       	call   c00189a4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001929c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00192a0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00192a6:	88 ca                	mov    dl,cl
c00192a8:	83 e0 f0             	and    eax,0xfffffff0
c00192ab:	83 e2 0f             	and    edx,0xf
c00192ae:	09 d0                	or     eax,edx
c00192b0:	88 ca                	mov    dl,cl
c00192b2:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00192b8:	c0 ea 04             	shr    dl,0x4
c00192bb:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00192bf:	0f b6 c2             	movzx  eax,dl
c00192c2:	83 c4 20             	add    esp,0x20
c00192c5:	c1 e0 06             	shl    eax,0x6
c00192c8:	89 c7                	mov    edi,eax
c00192ca:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192d0:	66 25 3f c0          	and    ax,0xc03f
c00192d4:	09 f8                	or     eax,edi
c00192d6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00192dd:	89 c8                	mov    eax,ecx
c00192df:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00192e6:	c1 e8 08             	shr    eax,0x8
c00192e9:	83 e5 3f             	and    ebp,0x3f
c00192ec:	83 e0 0f             	and    eax,0xf
c00192ef:	89 c7                	mov    edi,eax
c00192f1:	c1 e7 06             	shl    edi,0x6
c00192f4:	09 ef                	or     edi,ebp
c00192f6:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00192fd:	89 fa                	mov    edx,edi
c00192ff:	83 e5 c0             	and    ebp,0xffffffc0
c0019302:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019308:	88 c2                	mov    dl,al
c001930a:	c0 ea 02             	shr    dl,0x2
c001930d:	89 d7                	mov    edi,edx
c001930f:	09 ef                	or     edi,ebp
c0019311:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019317:	89 fa                	mov    edx,edi
c0019319:	83 e5 cf             	and    ebp,0xffffffcf
c001931c:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019322:	89 cf                	mov    edi,ecx
c0019324:	c1 ef 0c             	shr    edi,0xc
c0019327:	83 e7 03             	and    edi,0x3
c001932a:	c1 e7 04             	shl    edi,0x4
c001932d:	09 ef                	or     edi,ebp
c001932f:	3c 06                	cmp    al,0x6
c0019331:	89 fa                	mov    edx,edi
c0019333:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0019339:	74 04                	je     c001933f <CPU::detectFeatures()+0x555>
c001933b:	3c 0f                	cmp    al,0xf
c001933d:	75 5c                	jne    c001939b <CPU::detectFeatures()+0x5b1>
c001933f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019343:	89 cf                	mov    edi,ecx
c0019345:	c1 ef 10             	shr    edi,0x10
c0019348:	c1 e7 04             	shl    edi,0x4
c001934b:	09 fa                	or     edx,edi
c001934d:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0019353:	0f b6 d2             	movzx  edx,dl
c0019356:	66 81 e7 3f c0       	and    di,0xc03f
c001935b:	c1 e2 06             	shl    edx,0x6
c001935e:	09 fa                	or     edx,edi
c0019360:	3c 0f                	cmp    al,0xf
c0019362:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019369:	75 30                	jne    c001939b <CPU::detectFeatures()+0x5b1>
c001936b:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019371:	c1 e9 14             	shr    ecx,0x14
c0019374:	83 e0 3f             	and    eax,0x3f
c0019377:	83 c1 0f             	add    ecx,0xf
c001937a:	88 ca                	mov    dl,cl
c001937c:	c0 e9 02             	shr    cl,0x2
c001937f:	c1 e2 06             	shl    edx,0x6
c0019382:	09 d0                	or     eax,edx
c0019384:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001938a:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019390:	83 e0 c0             	and    eax,0xffffffc0
c0019393:	09 c1                	or     ecx,eax
c0019395:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001939b:	83 ec 0c             	sub    esp,0xc
c001939e:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00193a5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00193a9:	50                   	push   eax
c00193aa:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00193ae:	55                   	push   ebp
c00193af:	56                   	push   esi
c00193b0:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00193b4:	57                   	push   edi
c00193b5:	68 00 00 00 80       	push   0x80000000
c00193ba:	e8 e5 f5 ff ff       	call   c00189a4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00193bf:	83 c4 20             	add    esp,0x20
c00193c2:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00193ca:	76 22                	jbe    c00193ee <CPU::detectFeatures()+0x604>
c00193cc:	83 ec 0c             	sub    esp,0xc
c00193cf:	8d 44 24 28          	lea    eax,[esp+0x28]
c00193d3:	50                   	push   eax
c00193d4:	55                   	push   ebp
c00193d5:	56                   	push   esi
c00193d6:	57                   	push   edi
c00193d7:	68 01 00 00 80       	push   0x80000001
c00193dc:	e8 c3 f5 ff ff       	call   c00189a4 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00193e1:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00193eb:	83 c4 20             	add    esp,0x20
c00193ee:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00193f4:	83 f8 01             	cmp    eax,0x1
c00193f7:	75 6f                	jne    c0019468 <CPU::detectFeatures()+0x67e>
c00193f9:	51                   	push   ecx
c00193fa:	51                   	push   ecx
c00193fb:	68 16 c2 02 c0       	push   0xc002c216
c0019400:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019404:	56                   	push   esi
c0019405:	e8 02 74 fe ff       	call   c000080c <strcpy>
c001940a:	5f                   	pop    edi
c001940b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019411:	5d                   	pop    ebp
c0019412:	66 c1 e8 06          	shr    ax,0x6
c0019416:	0f b6 c0             	movzx  eax,al
c0019419:	50                   	push   eax
c001941a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019420:	c1 e8 0e             	shr    eax,0xe
c0019423:	0f b6 c0             	movzx  eax,al
c0019426:	50                   	push   eax
c0019427:	e8 22 f2 ff ff       	call   c001864e <CPU::lookupIntelName(unsigned char, unsigned char)>
c001942c:	5a                   	pop    edx
c001942d:	59                   	pop    ecx
c001942e:	50                   	push   eax
c001942f:	56                   	push   esi
c0019430:	e8 17 75 fe ff       	call   c000094c <strcat>
c0019435:	5f                   	pop    edi
c0019436:	5d                   	pop    ebp
c0019437:	56                   	push   esi
c0019438:	53                   	push   ebx
c0019439:	e8 c0 aa ff ff       	call   c0013efe <Device::setName(char const*)>
c001943e:	58                   	pop    eax
c001943f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019445:	5a                   	pop    edx
c0019446:	68 1d c2 02 c0       	push   0xc002c21d
c001944b:	50                   	push   eax
c001944c:	e8 47 74 fe ff       	call   c0000898 <strcmp>
c0019451:	83 c4 10             	add    esp,0x10
c0019454:	85 c0                	test   eax,eax
c0019456:	0f 85 71 03 00 00    	jne    c00197cd <CPU::detectFeatures()+0x9e3>
c001945c:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019463:	e9 65 03 00 00       	jmp    c00197cd <CPU::detectFeatures()+0x9e3>
c0019468:	83 f8 02             	cmp    eax,0x2
c001946b:	0f 85 b5 00 00 00    	jne    c0019526 <CPU::detectFeatures()+0x73c>
c0019471:	57                   	push   edi
c0019472:	57                   	push   edi
c0019473:	68 2f c2 02 c0       	push   0xc002c22f
c0019478:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001947c:	56                   	push   esi
c001947d:	e8 8a 73 fe ff       	call   c000080c <strcpy>
c0019482:	5d                   	pop    ebp
c0019483:	58                   	pop    eax
c0019484:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001948a:	66 c1 e8 06          	shr    ax,0x6
c001948e:	0f b6 c0             	movzx  eax,al
c0019491:	50                   	push   eax
c0019492:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019498:	c1 e8 0e             	shr    eax,0xe
c001949b:	0f b6 c0             	movzx  eax,al
c001949e:	50                   	push   eax
c001949f:	e8 16 f0 ff ff       	call   c00184ba <CPU::lookupAMDName(unsigned char, unsigned char)>
c00194a4:	5a                   	pop    edx
c00194a5:	59                   	pop    ecx
c00194a6:	50                   	push   eax
c00194a7:	56                   	push   esi
c00194a8:	e8 9f 74 fe ff       	call   c000094c <strcat>
c00194ad:	5f                   	pop    edi
c00194ae:	5d                   	pop    ebp
c00194af:	56                   	push   esi
c00194b0:	53                   	push   ebx
c00194b1:	e8 48 aa ff ff       	call   c0013efe <Device::setName(char const*)>
c00194b6:	58                   	pop    eax
c00194b7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00194bd:	5a                   	pop    edx
c00194be:	68 34 c2 02 c0       	push   0xc002c234
c00194c3:	50                   	push   eax
c00194c4:	e8 cf 73 fe ff       	call   c0000898 <strcmp>
c00194c9:	83 c4 10             	add    esp,0x10
c00194cc:	85 c0                	test   eax,eax
c00194ce:	75 20                	jne    c00194f0 <CPU::detectFeatures()+0x706>
c00194d0:	8b 15 08 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f008
c00194d6:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00194dc:	a8 01                	test   al,0x1
c00194de:	74 10                	je     c00194f0 <CPU::detectFeatures()+0x706>
c00194e0:	83 e0 fe             	and    eax,0xfffffffe
c00194e3:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00194e9:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00194f0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194f6:	c1 e8 0e             	shr    eax,0xe
c00194f9:	3c 05                	cmp    al,0x5
c00194fb:	0f 85 cc 02 00 00    	jne    c00197cd <CPU::detectFeatures()+0x9e3>
c0019501:	56                   	push   esi
c0019502:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019508:	83 e0 0f             	and    eax,0xf
c001950b:	50                   	push   eax
c001950c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019512:	66 c1 e8 06          	shr    ax,0x6
c0019516:	0f b6 c0             	movzx  eax,al
c0019519:	50                   	push   eax
c001951a:	6a 05                	push   0x5
c001951c:	e8 0f f4 ff ff       	call   c0018930 <CPU::AMD_K6_writeback(int, int, int)>
c0019521:	e9 1f 02 00 00       	jmp    c0019745 <CPU::detectFeatures()+0x95b>
c0019526:	8d 50 fd             	lea    edx,[eax-0x3]
c0019529:	83 fa 01             	cmp    edx,0x1
c001952c:	76 09                	jbe    c0019537 <CPU::detectFeatures()+0x74d>
c001952e:	83 f8 06             	cmp    eax,0x6
c0019531:	0f 85 91 01 00 00    	jne    c00196c8 <CPU::detectFeatures()+0x8de>
c0019537:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001953d:	c1 ea 0e             	shr    edx,0xe
c0019540:	80 fa 05             	cmp    dl,0x5
c0019543:	75 7b                	jne    c00195c0 <CPU::detectFeatures()+0x7d6>
c0019545:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001954b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019550:	66 81 fa 00 01       	cmp    dx,0x100
c0019555:	75 0c                	jne    c0019563 <CPU::detectFeatures()+0x779>
c0019557:	51                   	push   ecx
c0019558:	51                   	push   ecx
c0019559:	68 3b c2 02 c0       	push   0xc002c23b
c001955e:	e9 dc 01 00 00       	jmp    c001973f <CPU::detectFeatures()+0x955>
c0019563:	66 81 fa 00 02       	cmp    dx,0x200
c0019568:	75 0c                	jne    c0019576 <CPU::detectFeatures()+0x78c>
c001956a:	52                   	push   edx
c001956b:	52                   	push   edx
c001956c:	68 4e c2 02 c0       	push   0xc002c24e
c0019571:	e9 c9 01 00 00       	jmp    c001973f <CPU::detectFeatures()+0x955>
c0019576:	66 81 fa 40 02       	cmp    dx,0x240
c001957b:	75 0c                	jne    c0019589 <CPU::detectFeatures()+0x79f>
c001957d:	50                   	push   eax
c001957e:	50                   	push   eax
c001957f:	68 60 c2 02 c0       	push   0xc002c260
c0019584:	e9 b6 01 00 00       	jmp    c001973f <CPU::detectFeatures()+0x955>
c0019589:	83 f8 06             	cmp    eax,0x6
c001958c:	75 0c                	jne    c001959a <CPU::detectFeatures()+0x7b0>
c001958e:	50                   	push   eax
c001958f:	50                   	push   eax
c0019590:	68 72 c2 02 c0       	push   0xc002c272
c0019595:	e9 a5 01 00 00       	jmp    c001973f <CPU::detectFeatures()+0x955>
c001959a:	83 f8 04             	cmp    eax,0x4
c001959d:	75 0c                	jne    c00195ab <CPU::detectFeatures()+0x7c1>
c001959f:	50                   	push   eax
c00195a0:	50                   	push   eax
c00195a1:	68 7e c2 02 c0       	push   0xc002c27e
c00195a6:	e9 94 01 00 00       	jmp    c001973f <CPU::detectFeatures()+0x955>
c00195ab:	83 f8 03             	cmp    eax,0x3
c00195ae:	0f 85 19 02 00 00    	jne    c00197cd <CPU::detectFeatures()+0x9e3>
c00195b4:	50                   	push   eax
c00195b5:	50                   	push   eax
c00195b6:	68 86 c2 02 c0       	push   0xc002c286
c00195bb:	e9 7f 01 00 00       	jmp    c001973f <CPU::detectFeatures()+0x955>
c00195c0:	80 fa 06             	cmp    dl,0x6
c00195c3:	0f 85 db 00 00 00    	jne    c00196a4 <CPU::detectFeatures()+0x8ba>
c00195c9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00195cf:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00195d4:	66 81 fa 80 01       	cmp    dx,0x180
c00195d9:	75 0c                	jne    c00195e7 <CPU::detectFeatures()+0x7fd>
c00195db:	50                   	push   eax
c00195dc:	50                   	push   eax
c00195dd:	68 91 c2 02 c0       	push   0xc002c291
c00195e2:	e9 58 01 00 00       	jmp    c001973f <CPU::detectFeatures()+0x955>
c00195e7:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00195ed:	66 f7 c1 80 ff       	test   cx,0xff80
c00195f2:	75 0c                	jne    c0019600 <CPU::detectFeatures()+0x816>
c00195f4:	50                   	push   eax
c00195f5:	50                   	push   eax
c00195f6:	68 a1 c2 02 c0       	push   0xc002c2a1
c00195fb:	e9 3f 01 00 00       	jmp    c001973f <CPU::detectFeatures()+0x955>
c0019600:	66 81 fa 40 02       	cmp    dx,0x240
c0019605:	75 0c                	jne    c0019613 <CPU::detectFeatures()+0x829>
c0019607:	55                   	push   ebp
c0019608:	55                   	push   ebp
c0019609:	68 a8 c2 02 c0       	push   0xc002c2a8
c001960e:	e9 2c 01 00 00       	jmp    c001973f <CPU::detectFeatures()+0x955>
c0019613:	66 81 fa 80 02       	cmp    dx,0x280
c0019618:	75 0c                	jne    c0019626 <CPU::detectFeatures()+0x83c>
c001961a:	57                   	push   edi
c001961b:	57                   	push   edi
c001961c:	68 b1 c2 02 c0       	push   0xc002c2b1
c0019621:	e9 19 01 00 00       	jmp    c001973f <CPU::detectFeatures()+0x955>
c0019626:	66 81 fa 40 03       	cmp    dx,0x340
c001962b:	74 ed                	je     c001961a <CPU::detectFeatures()+0x830>
c001962d:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019632:	75 0c                	jne    c0019640 <CPU::detectFeatures()+0x856>
c0019634:	56                   	push   esi
c0019635:	56                   	push   esi
c0019636:	68 b8 c2 02 c0       	push   0xc002c2b8
c001963b:	e9 ff 00 00 00       	jmp    c001973f <CPU::detectFeatures()+0x955>
c0019640:	83 f8 06             	cmp    eax,0x6
c0019643:	0f 84 45 ff ff ff    	je     c001958e <CPU::detectFeatures()+0x7a4>
c0019649:	83 f8 04             	cmp    eax,0x4
c001964c:	0f 84 4d ff ff ff    	je     c001959f <CPU::detectFeatures()+0x7b5>
c0019652:	83 f8 03             	cmp    eax,0x3
c0019655:	0f 85 72 01 00 00    	jne    c00197cd <CPU::detectFeatures()+0x9e3>
c001965b:	51                   	push   ecx
c001965c:	51                   	push   ecx
c001965d:	68 c1 c2 02 c0       	push   0xc002c2c1
c0019662:	53                   	push   ebx
c0019663:	e8 96 a8 ff ff       	call   c0013efe <Device::setName(char const*)>
c0019668:	b1 c1                	mov    cl,0xc1
c001966a:	88 c8                	mov    al,cl
c001966c:	e6 22                	out    0x22,al
c001966e:	e4 23                	in     al,0x23
c0019670:	88 c2                	mov    dl,al
c0019672:	88 c8                	mov    al,cl
c0019674:	e6 22                	out    0x22,al
c0019676:	88 d0                	mov    al,dl
c0019678:	83 c8 10             	or     eax,0x10
c001967b:	e6 23                	out    0x23,al
c001967d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019684:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019687:	89 d0                	mov    eax,edx
c0019689:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001968f:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019693:	40                   	inc    eax
c0019694:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001969a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001969f:	e9 a1 00 00 00       	jmp    c0019745 <CPU::detectFeatures()+0x95b>
c00196a4:	83 f8 06             	cmp    eax,0x6
c00196a7:	0f 84 e1 fe ff ff    	je     c001958e <CPU::detectFeatures()+0x7a4>
c00196ad:	83 f8 04             	cmp    eax,0x4
c00196b0:	0f 84 e9 fe ff ff    	je     c001959f <CPU::detectFeatures()+0x7b5>
c00196b6:	83 f8 03             	cmp    eax,0x3
c00196b9:	0f 85 0e 01 00 00    	jne    c00197cd <CPU::detectFeatures()+0x9e3>
c00196bf:	52                   	push   edx
c00196c0:	52                   	push   edx
c00196c1:	68 cc c2 02 c0       	push   0xc002c2cc
c00196c6:	eb 77                	jmp    c001973f <CPU::detectFeatures()+0x955>
c00196c8:	83 f8 07             	cmp    eax,0x7
c00196cb:	75 09                	jne    c00196d6 <CPU::detectFeatures()+0x8ec>
c00196cd:	50                   	push   eax
c00196ce:	50                   	push   eax
c00196cf:	68 d6 c2 02 c0       	push   0xc002c2d6
c00196d4:	eb 69                	jmp    c001973f <CPU::detectFeatures()+0x955>
c00196d6:	83 f8 0a             	cmp    eax,0xa
c00196d9:	75 09                	jne    c00196e4 <CPU::detectFeatures()+0x8fa>
c00196db:	50                   	push   eax
c00196dc:	50                   	push   eax
c00196dd:	68 e1 c2 02 c0       	push   0xc002c2e1
c00196e2:	eb 5b                	jmp    c001973f <CPU::detectFeatures()+0x955>
c00196e4:	83 f8 0b             	cmp    eax,0xb
c00196e7:	75 09                	jne    c00196f2 <CPU::detectFeatures()+0x908>
c00196e9:	50                   	push   eax
c00196ea:	50                   	push   eax
c00196eb:	68 e9 c2 02 c0       	push   0xc002c2e9
c00196f0:	eb 4d                	jmp    c001973f <CPU::detectFeatures()+0x955>
c00196f2:	83 f8 08             	cmp    eax,0x8
c00196f5:	75 09                	jne    c0019700 <CPU::detectFeatures()+0x916>
c00196f7:	50                   	push   eax
c00196f8:	50                   	push   eax
c00196f9:	68 f2 c2 02 c0       	push   0xc002c2f2
c00196fe:	eb 3f                	jmp    c001973f <CPU::detectFeatures()+0x955>
c0019700:	83 f8 09             	cmp    eax,0x9
c0019703:	75 09                	jne    c001970e <CPU::detectFeatures()+0x924>
c0019705:	50                   	push   eax
c0019706:	50                   	push   eax
c0019707:	68 fa c2 02 c0       	push   0xc002c2fa
c001970c:	eb 31                	jmp    c001973f <CPU::detectFeatures()+0x955>
c001970e:	83 f8 05             	cmp    eax,0x5
c0019711:	75 09                	jne    c001971c <CPU::detectFeatures()+0x932>
c0019713:	50                   	push   eax
c0019714:	50                   	push   eax
c0019715:	68 02 c3 02 c0       	push   0xc002c302
c001971a:	eb 23                	jmp    c001973f <CPU::detectFeatures()+0x955>
c001971c:	83 f8 0c             	cmp    eax,0xc
c001971f:	75 09                	jne    c001972a <CPU::detectFeatures()+0x940>
c0019721:	55                   	push   ebp
c0019722:	55                   	push   ebp
c0019723:	68 10 c3 02 c0       	push   0xc002c310
c0019728:	eb 15                	jmp    c001973f <CPU::detectFeatures()+0x955>
c001972a:	83 f8 0d             	cmp    eax,0xd
c001972d:	75 09                	jne    c0019738 <CPU::detectFeatures()+0x94e>
c001972f:	57                   	push   edi
c0019730:	57                   	push   edi
c0019731:	68 1b c3 02 c0       	push   0xc002c31b
c0019736:	eb 07                	jmp    c001973f <CPU::detectFeatures()+0x955>
c0019738:	56                   	push   esi
c0019739:	56                   	push   esi
c001973a:	68 2f c3 02 c0       	push   0xc002c32f
c001973f:	53                   	push   ebx
c0019740:	e8 b9 a7 ff ff       	call   c0013efe <Device::setName(char const*)>
c0019745:	83 c4 10             	add    esp,0x10
c0019748:	e9 80 00 00 00       	jmp    c00197cd <CPU::detectFeatures()+0x9e3>
c001974d:	51                   	push   ecx
c001974e:	51                   	push   ecx
c001974f:	68 7b c1 02 c0       	push   0xc002c17b
c0019754:	55                   	push   ebp
c0019755:	e8 b2 70 fe ff       	call   c000080c <strcpy>
c001975a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019764:	e8 45 6b fe ff       	call   c00002ae <is486>
c0019769:	83 c4 10             	add    esp,0x10
c001976c:	85 c0                	test   eax,eax
c001976e:	74 2b                	je     c001979b <CPU::detectFeatures()+0x9b1>
c0019770:	52                   	push   edx
c0019771:	52                   	push   edx
c0019772:	68 3b c3 02 c0       	push   0xc002c33b
c0019777:	53                   	push   ebx
c0019778:	e8 81 a7 ff ff       	call   c0013efe <Device::setName(char const*)>
c001977d:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019784:	0f 20 c0             	mov    eax,cr0
c0019787:	83 e0 14             	and    eax,0x14
c001978a:	83 c4 10             	add    esp,0x10
c001978d:	83 f8 04             	cmp    eax,0x4
c0019790:	75 1f                	jne    c00197b1 <CPU::detectFeatures()+0x9c7>
c0019792:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019799:	eb 32                	jmp    c00197cd <CPU::detectFeatures()+0x9e3>
c001979b:	50                   	push   eax
c001979c:	50                   	push   eax
c001979d:	68 46 c3 02 c0       	push   0xc002c346
c00197a2:	53                   	push   ebx
c00197a3:	e8 56 a7 ff ff       	call   c0013efe <Device::setName(char const*)>
c00197a8:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00197af:	eb d3                	jmp    c0019784 <CPU::detectFeatures()+0x99a>
c00197b1:	e8 d3 6a fe ff       	call   c0000289 <hasLegacyFPU>
c00197b6:	83 e0 01             	and    eax,0x1
c00197b9:	8d 14 00             	lea    edx,[eax+eax*1]
c00197bc:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00197c2:	83 e0 fd             	and    eax,0xfffffffd
c00197c5:	09 d0                	or     eax,edx
c00197c7:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00197cd:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00197d4:	83 c4 4c             	add    esp,0x4c
c00197d7:	5b                   	pop    ebx
c00197d8:	5e                   	pop    esi
c00197d9:	5f                   	pop    edi
c00197da:	5d                   	pop    ebp
c00197db:	c3                   	ret    

c00197dc <CPU::setupSMEP()>:
c00197dc:	0f 20 e0             	mov    eax,cr4
c00197df:	0d 00 00 10 00       	or     eax,0x100000
c00197e4:	0f 22 e0             	mov    cr4,eax
c00197e7:	c3                   	ret    

c00197e8 <CPU::setupUMIP()>:
c00197e8:	0f 20 e0             	mov    eax,cr4
c00197eb:	80 cc 08             	or     ah,0x8
c00197ee:	0f 22 e0             	mov    cr4,eax
c00197f1:	c3                   	ret    

c00197f2 <CPU::setupTSC()>:
c00197f2:	0f 20 e0             	mov    eax,cr4
c00197f5:	83 c8 04             	or     eax,0x4
c00197f8:	0f 22 e0             	mov    cr4,eax
c00197fb:	c3                   	ret    

c00197fc <CPU::setupLargePages()>:
c00197fc:	0f 20 e0             	mov    eax,cr4
c00197ff:	83 c8 10             	or     eax,0x10
c0019802:	0f 22 e0             	mov    cr4,eax
c0019805:	c3                   	ret    

c0019806 <CPU::setupPAT()>:
c0019806:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001980b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019812:	74 2c                	je     c0019840 <CPU::setupPAT()+0x3a>
c0019814:	53                   	push   ebx
c0019815:	83 ec 10             	sub    esp,0x10
c0019818:	68 77 02 00 00       	push   0x277
c001981d:	50                   	push   eax
c001981e:	e8 0f 56 ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0019823:	83 e2 f8             	and    edx,0xfffffff8
c0019826:	83 ca 01             	or     edx,0x1
c0019829:	52                   	push   edx
c001982a:	50                   	push   eax
c001982b:	68 77 02 00 00       	push   0x277
c0019830:	ff 35 08 f0 02 c0    	push   DWORD PTR ds:0xc002f008
c0019836:	e8 23 56 ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c001983b:	83 c4 28             	add    esp,0x28
c001983e:	5b                   	pop    ebx
c001983f:	c3                   	ret    
c0019840:	c3                   	ret    
c0019841:	90                   	nop

c0019842 <CPU::setupMTRR()>:
c0019842:	c3                   	ret    
c0019843:	90                   	nop

c0019844 <CPU::setupGlobalPages()>:
c0019844:	0f 20 e0             	mov    eax,cr4
c0019847:	0c 80                	or     al,0x80
c0019849:	0f 22 e0             	mov    cr4,eax
c001984c:	c3                   	ret    
c001984d:	90                   	nop

c001984e <CPU::allowUsermodeDataAccess()>:
c001984e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019852:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019859:	74 03                	je     c001985e <CPU::allowUsermodeDataAccess()+0x10>
c001985b:	0f 01 cb             	stac   
c001985e:	c3                   	ret    
c001985f:	90                   	nop

c0019860 <CPU::prohibitUsermodeDataAccess()>:
c0019860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019864:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001986b:	74 03                	je     c0019870 <CPU::prohibitUsermodeDataAccess()+0x10>
c001986d:	0f 01 ca             	clac   
c0019870:	c3                   	ret    
c0019871:	90                   	nop

c0019872 <CPU::setupSMAP()>:
c0019872:	0f 20 e0             	mov    eax,cr4
c0019875:	0d 00 00 20 00       	or     eax,0x200000
c001987a:	0f 22 e0             	mov    cr4,eax
c001987d:	eb e1                	jmp    c0019860 <CPU::prohibitUsermodeDataAccess()>
c001987f:	90                   	nop

c0019880 <CPU::setupFeatures()>:
c0019880:	83 ec 0c             	sub    esp,0xc
c0019883:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019887:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c001988e:	74 07                	je     c0019897 <CPU::setupFeatures()+0x17>
c0019890:	52                   	push   edx
c0019891:	e8 46 ff ff ff       	call   c00197dc <CPU::setupSMEP()>
c0019896:	58                   	pop    eax
c0019897:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c001989e:	74 07                	je     c00198a7 <CPU::setupFeatures()+0x27>
c00198a0:	52                   	push   edx
c00198a1:	e8 cc ff ff ff       	call   c0019872 <CPU::setupSMAP()>
c00198a6:	58                   	pop    eax
c00198a7:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00198ae:	74 07                	je     c00198b7 <CPU::setupFeatures()+0x37>
c00198b0:	52                   	push   edx
c00198b1:	e8 32 ff ff ff       	call   c00197e8 <CPU::setupUMIP()>
c00198b6:	58                   	pop    eax
c00198b7:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00198be:	74 07                	je     c00198c7 <CPU::setupFeatures()+0x47>
c00198c0:	52                   	push   edx
c00198c1:	e8 2c ff ff ff       	call   c00197f2 <CPU::setupTSC()>
c00198c6:	58                   	pop    eax
c00198c7:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00198ce:	74 07                	je     c00198d7 <CPU::setupFeatures()+0x57>
c00198d0:	52                   	push   edx
c00198d1:	e8 26 ff ff ff       	call   c00197fc <CPU::setupLargePages()>
c00198d6:	59                   	pop    ecx
c00198d7:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00198de:	74 07                	je     c00198e7 <CPU::setupFeatures()+0x67>
c00198e0:	52                   	push   edx
c00198e1:	e8 5e ff ff ff       	call   c0019844 <CPU::setupGlobalPages()>
c00198e6:	58                   	pop    eax
c00198e7:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00198ee:	74 0c                	je     c00198fc <CPU::setupFeatures()+0x7c>
c00198f0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00198f4:	83 c4 0c             	add    esp,0xc
c00198f7:	e9 0a ff ff ff       	jmp    c0019806 <CPU::setupPAT()>
c00198fc:	83 c4 0c             	add    esp,0xc
c00198ff:	c3                   	ret    

c0019900 <CPU::open(int, int, void*)>:
c0019900:	57                   	push   edi
c0019901:	56                   	push   esi
c0019902:	53                   	push   ebx
c0019903:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019907:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001990b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019911:	83 ec 0c             	sub    esp,0xc
c0019914:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001991a:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019920:	50                   	push   eax
c0019921:	e8 f8 57 ff ff       	call   c000f11e <GDT::setup()>
c0019926:	83 c4 0c             	add    esp,0xc
c0019929:	6a 00                	push   0x0
c001992b:	68 ef be ad de       	push   0xdeadbeef
c0019930:	57                   	push   edi
c0019931:	e8 04 75 ff ff       	call   c0010e3a <TSS::setup(unsigned long, unsigned long)>
c0019936:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019939:	e8 dc 74 ff ff       	call   c0010e1a <TSS::flush()>
c001993e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019944:	89 04 24             	mov    DWORD PTR [esp],eax
c0019947:	e8 36 5a ff ff       	call   c000f382 <IDT::setup()>
c001994c:	b8 00 04 00 00       	mov    eax,0x400
c0019951:	0f 23 f8             	mov    db7,eax
c0019954:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001995e:	e8 2e 62 ff ff       	call   c000fb91 <Phys::allocatePage()>
c0019963:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019969:	89 30                	mov    DWORD PTR [eax],esi
c001996b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019971:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019974:	58                   	pop    eax
c0019975:	5a                   	pop    edx
c0019976:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001997c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019980:	e8 55 86 ff ff       	call   c0011fda <VAS::setCPUSpecific(unsigned long)>
c0019985:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019988:	e8 5d f4 ff ff       	call   c0018dea <CPU::detectFeatures()>
c001998d:	e8 9e b9 ff ff       	call   c0015330 <setupInterruptController()>
c0019992:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019998:	a1 20 f0 02 c0       	mov    eax,ds:0xc002f020
c001999d:	83 e0 10             	and    eax,0x10
c00199a0:	83 f8 01             	cmp    eax,0x1
c00199a3:	19 c0                	sbb    eax,eax
c00199a5:	83 e0 46             	and    eax,0x46
c00199a8:	83 c0 1e             	add    eax,0x1e
c00199ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00199ae:	e8 d4 cf ff ff       	call   c0016987 <setupTimer(int)>
c00199b3:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00199b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199bc:	e8 bf fe ff ff       	call   c0019880 <CPU::setupFeatures()>
c00199c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199c4:	e8 a5 f1 ff ff       	call   c0018b6e <CPU::displayFeatures()>
c00199c9:	83 c4 10             	add    esp,0x10
c00199cc:	31 c0                	xor    eax,eax
c00199ce:	5b                   	pop    ebx
c00199cf:	5e                   	pop    esi
c00199d0:	5f                   	pop    edi
c00199d1:	c3                   	ret    

c00199d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00199d2:	57                   	push   edi
c00199d3:	56                   	push   esi
c00199d4:	53                   	push   ebx
c00199d5:	51                   	push   ecx
c00199d6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00199da:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00199dd:	0f 02 c0             	lar    eax,ax
c00199e0:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00199e3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00199e7:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00199ea:	88 ca                	mov    dl,cl
c00199ec:	c0 ea 06             	shr    dl,0x6
c00199ef:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00199f3:	89 ca                	mov    edx,ecx
c00199f5:	66 c1 ea 03          	shr    dx,0x3
c00199f9:	83 e2 07             	and    edx,0x7
c00199fc:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019a01:	88 17                	mov    BYTE PTR [edi],dl
c0019a03:	0f 84 a6 01 00 00    	je     c0019baf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019a09:	83 e1 07             	and    ecx,0x7
c0019a0c:	80 f9 04             	cmp    cl,0x4
c0019a0f:	0f 84 98 00 00 00    	je     c0019aad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019a15:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019a1a:	0f 95 c0             	setne  al
c0019a1d:	80 f9 05             	cmp    cl,0x5
c0019a20:	0f 95 c2             	setne  dl
c0019a23:	08 c2                	or     dl,al
c0019a25:	74 79                	je     c0019aa0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019a27:	84 c9                	test   cl,cl
c0019a29:	75 05                	jne    c0019a30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019a2b:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019a2e:	eb 3c                	jmp    c0019a6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a30:	80 f9 01             	cmp    cl,0x1
c0019a33:	75 05                	jne    c0019a3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019a35:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019a38:	eb 32                	jmp    c0019a6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a3a:	80 f9 02             	cmp    cl,0x2
c0019a3d:	75 05                	jne    c0019a44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019a3f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019a42:	eb 28                	jmp    c0019a6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a44:	31 c0                	xor    eax,eax
c0019a46:	80 f9 03             	cmp    cl,0x3
c0019a49:	75 05                	jne    c0019a50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019a4b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019a4e:	eb 1c                	jmp    c0019a6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a50:	80 f9 05             	cmp    cl,0x5
c0019a53:	75 05                	jne    c0019a5a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019a55:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019a58:	eb 12                	jmp    c0019a6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a5a:	80 f9 06             	cmp    cl,0x6
c0019a5d:	75 05                	jne    c0019a64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019a5f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019a62:	eb 08                	jmp    c0019a6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a64:	80 f9 07             	cmp    cl,0x7
c0019a67:	75 03                	jne    c0019a6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a69:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019a6c:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019a71:	75 10                	jne    c0019a83 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019a73:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019a77:	b9 03 00 00 00       	mov    ecx,0x3
c0019a7c:	01 d0                	add    eax,edx
c0019a7e:	e9 37 01 00 00       	jmp    c0019bba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019a83:	b9 02 00 00 00       	mov    ecx,0x2
c0019a88:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019a8d:	0f 85 27 01 00 00    	jne    c0019bba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019a93:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019a96:	b9 06 00 00 00       	mov    ecx,0x6
c0019a9b:	e9 1a 01 00 00       	jmp    c0019bba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019aa0:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019aa3:	b9 06 00 00 00       	mov    ecx,0x6
c0019aa8:	e9 0f 01 00 00       	jmp    c0019bbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019aad:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019ab0:	88 ca                	mov    dl,cl
c0019ab2:	c0 ea 06             	shr    dl,0x6
c0019ab5:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019ab9:	89 ca                	mov    edx,ecx
c0019abb:	66 c1 ea 03          	shr    dx,0x3
c0019abf:	83 e2 07             	and    edx,0x7
c0019ac2:	80 e1 07             	and    cl,0x7
c0019ac5:	75 05                	jne    c0019acc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019ac7:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019aca:	eb 4c                	jmp    c0019b18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019acc:	80 f9 01             	cmp    cl,0x1
c0019acf:	75 05                	jne    c0019ad6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019ad1:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019ad4:	eb 42                	jmp    c0019b18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ad6:	80 f9 02             	cmp    cl,0x2
c0019ad9:	75 05                	jne    c0019ae0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019adb:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019ade:	eb 38                	jmp    c0019b18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ae0:	80 f9 03             	cmp    cl,0x3
c0019ae3:	75 05                	jne    c0019aea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019ae5:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019ae8:	eb 2e                	jmp    c0019b18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019aea:	80 f9 04             	cmp    cl,0x4
c0019aed:	75 12                	jne    c0019b01 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019aef:	f6 c4 60             	test   ah,0x60
c0019af2:	75 08                	jne    c0019afc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019af4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019af7:	8d 78 14             	lea    edi,[eax+0x14]
c0019afa:	eb 1c                	jmp    c0019b18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019afc:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019aff:	eb 17                	jmp    c0019b18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b01:	80 f9 05             	cmp    cl,0x5
c0019b04:	75 05                	jne    c0019b0b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019b06:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019b09:	eb 0d                	jmp    c0019b18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b0b:	80 f9 06             	cmp    cl,0x6
c0019b0e:	75 05                	jne    c0019b15 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019b10:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019b13:	eb 03                	jmp    c0019b18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019b15:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019b18:	84 d2                	test   dl,dl
c0019b1a:	75 05                	jne    c0019b21 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019b1c:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019b1f:	eb 3c                	jmp    c0019b5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b21:	80 fa 01             	cmp    dl,0x1
c0019b24:	75 05                	jne    c0019b2b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019b26:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019b29:	eb 32                	jmp    c0019b5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b2b:	80 fa 02             	cmp    dl,0x2
c0019b2e:	75 05                	jne    c0019b35 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019b30:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019b33:	eb 28                	jmp    c0019b5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b35:	80 fa 03             	cmp    dl,0x3
c0019b38:	75 05                	jne    c0019b3f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019b3a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019b3d:	eb 1e                	jmp    c0019b5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b3f:	31 c0                	xor    eax,eax
c0019b41:	80 fa 04             	cmp    dl,0x4
c0019b44:	74 17                	je     c0019b5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b46:	80 fa 05             	cmp    dl,0x5
c0019b49:	75 05                	jne    c0019b50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019b4b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019b4e:	eb 0d                	jmp    c0019b5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b50:	80 fa 06             	cmp    dl,0x6
c0019b53:	75 05                	jne    c0019b5a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019b55:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019b58:	eb 03                	jmp    c0019b5d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b5a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019b5d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019b62:	0f 94 c2             	sete   dl
c0019b65:	80 f9 05             	cmp    cl,0x5
c0019b68:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019b6c:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019b71:	d3 e0                	shl    eax,cl
c0019b73:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019b77:	74 0a                	je     c0019b83 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019b79:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019b7c:	b9 07 00 00 00       	mov    ecx,0x7
c0019b81:	eb 37                	jmp    c0019bba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b83:	01 f8                	add    eax,edi
c0019b85:	b9 03 00 00 00       	mov    ecx,0x3
c0019b8a:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019b8f:	74 2b                	je     c0019bbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019b91:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019b96:	75 0d                	jne    c0019ba5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019b98:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019b9c:	01 c8                	add    eax,ecx
c0019b9e:	b9 04 00 00 00       	mov    ecx,0x4
c0019ba3:	eb 17                	jmp    c0019bbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019ba5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019ba8:	b9 07 00 00 00       	mov    ecx,0x7
c0019bad:	eb 0d                	jmp    c0019bbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019baf:	b9 02 00 00 00       	mov    ecx,0x2
c0019bb4:	b2 01                	mov    dl,0x1
c0019bb6:	31 c0                	xor    eax,eax
c0019bb8:	eb 02                	jmp    c0019bbc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019bba:	31 d2                	xor    edx,edx
c0019bbc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019bc0:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019bc2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019bc6:	88 11                	mov    BYTE PTR [ecx],dl
c0019bc8:	5a                   	pop    edx
c0019bc9:	5b                   	pop    ebx
c0019bca:	5e                   	pop    esi
c0019bcb:	5f                   	pop    edi
c0019bcc:	c3                   	ret    

c0019bcd <Krnl::smpEntry()>:
c0019bcd:	eb fe                	jmp    c0019bcd <Krnl::smpEntry()>

c0019bcf <Krnl::startCPU(int)>:
c0019bcf:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0019bd4:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019bdb:	0f 84 36 01 00 00    	je     c0019d17 <Krnl::startCPU(int)+0x148>
c0019be1:	53                   	push   ebx
c0019be2:	83 ec 10             	sub    esp,0x10
c0019be5:	fa                   	cli    
c0019be6:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c0019bec:	6a 1b                	push   0x1b
c0019bee:	ff 35 08 f0 02 c0    	push   DWORD PTR ds:0xc002f008
c0019bf4:	e8 39 52 ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0019bf9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019bfe:	89 c3                	mov    ebx,eax
c0019c00:	58                   	pop    eax
c0019c01:	5a                   	pop    edx
c0019c02:	53                   	push   ebx
c0019c03:	68 80 c3 02 c0       	push   0xc002c380
c0019c08:	e8 c2 8c ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0019c0d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019c17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c1b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019c25:	c1 e0 18             	shl    eax,0x18
c0019c28:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019c2e:	83 c4 10             	add    esp,0x10
c0019c31:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019c37:	09 c2                	or     edx,eax
c0019c39:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019c3f:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019c45:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019c4b:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019c51:	80 cd c5             	or     ch,0xc5
c0019c54:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019c5a:	f3 90                	pause  
c0019c5c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019c5e:	0f ba e1 0c          	bt     ecx,0xc
c0019c62:	72 f6                	jb     c0019c5a <Krnl::startCPU(int)+0x8b>
c0019c64:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019c6a:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019c70:	09 c1                	or     ecx,eax
c0019c72:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019c78:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019c7e:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019c84:	80 cd 85             	or     ch,0x85
c0019c87:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019c8d:	f3 90                	pause  
c0019c8f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019c91:	0f ba e1 0c          	bt     ecx,0xc
c0019c95:	72 f6                	jb     c0019c8d <Krnl::startCPU(int)+0xbe>
c0019c97:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ca1:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019ca7:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019cad:	09 c1                	or     ecx,eax
c0019caf:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019cb5:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019cbb:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019cc1:	81 c9 02 06 00 00    	or     ecx,0x602
c0019cc7:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019ccd:	f3 90                	pause  
c0019ccf:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019cd1:	0f ba e1 0c          	bt     ecx,0xc
c0019cd5:	72 f6                	jb     c0019ccd <Krnl::startCPU(int)+0xfe>
c0019cd7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019ce1:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019ce7:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019ced:	09 c8                	or     eax,ecx
c0019cef:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019cf5:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019cfb:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019d00:	0d 02 06 00 00       	or     eax,0x602
c0019d05:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019d0b:	f3 90                	pause  
c0019d0d:	8b 02                	mov    eax,DWORD PTR [edx]
c0019d0f:	0f ba e0 0c          	bt     eax,0xc
c0019d13:	72 f6                	jb     c0019d0b <Krnl::startCPU(int)+0x13c>
c0019d15:	eb fe                	jmp    c0019d15 <Krnl::startCPU(int)+0x146>
c0019d17:	c3                   	ret    

c0019d18 <Krnl::startCPUs()>:
c0019d18:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0019d1d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019d23:	88 c2                	mov    dl,al
c0019d25:	83 e2 0a             	and    edx,0xa
c0019d28:	80 fa 0a             	cmp    dl,0xa
c0019d2b:	75 09                	jne    c0019d36 <Krnl::startCPUs()+0x1e>
c0019d2d:	a8 01                	test   al,0x1
c0019d2f:	74 05                	je     c0019d36 <Krnl::startCPUs()+0x1e>
c0019d31:	e9 65 64 fe ff       	jmp    c000019b <prepareTramp>
c0019d36:	c3                   	ret    
c0019d37:	90                   	nop

c0019d38 <EnvVarContainer::getEnv(char const*)>:
c0019d38:	57                   	push   edi
c0019d39:	56                   	push   esi
c0019d3a:	53                   	push   ebx
c0019d3b:	31 db                	xor    ebx,ebx
c0019d3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019d41:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019d43:	7e 2b                	jle    c0019d70 <EnvVarContainer::getEnv(char const*)+0x38>
c0019d45:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019d4c:	50                   	push   eax
c0019d4d:	50                   	push   eax
c0019d4e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019d51:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019d54:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019d58:	e8 3b 6b fe ff       	call   c0000898 <strcmp>
c0019d5d:	83 c4 10             	add    esp,0x10
c0019d60:	85 c0                	test   eax,eax
c0019d62:	75 09                	jne    c0019d6d <EnvVarContainer::getEnv(char const*)+0x35>
c0019d64:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019d67:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019d6b:	eb 05                	jmp    c0019d72 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019d6d:	43                   	inc    ebx
c0019d6e:	eb d1                	jmp    c0019d41 <EnvVarContainer::getEnv(char const*)+0x9>
c0019d70:	31 c0                	xor    eax,eax
c0019d72:	5b                   	pop    ebx
c0019d73:	5e                   	pop    esi
c0019d74:	5f                   	pop    edi
c0019d75:	c3                   	ret    

c0019d76 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019d76:	55                   	push   ebp
c0019d77:	57                   	push   edi
c0019d78:	56                   	push   esi
c0019d79:	53                   	push   ebx
c0019d7a:	83 ec 28             	sub    esp,0x28
c0019d7d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019d81:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019d85:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019d89:	56                   	push   esi
c0019d8a:	e8 dd 69 fe ff       	call   c000076c <strlen>
c0019d8f:	40                   	inc    eax
c0019d90:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d93:	e8 f4 5a ff ff       	call   c000f88c <malloc>
c0019d98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019d9f:	e8 c8 69 fe ff       	call   c000076c <strlen>
c0019da4:	40                   	inc    eax
c0019da5:	89 04 24             	mov    DWORD PTR [esp],eax
c0019da8:	e8 df 5a ff ff       	call   c000f88c <malloc>
c0019dad:	89 34 24             	mov    DWORD PTR [esp],esi
c0019db0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019db4:	e8 b3 69 fe ff       	call   c000076c <strlen>
c0019db9:	83 c4 0c             	add    esp,0xc
c0019dbc:	40                   	inc    eax
c0019dbd:	50                   	push   eax
c0019dbe:	6a 00                	push   0x0
c0019dc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019dc4:	e8 87 69 fe ff       	call   c0000750 <memset>
c0019dc9:	89 34 24             	mov    DWORD PTR [esp],esi
c0019dcc:	e8 9b 69 fe ff       	call   c000076c <strlen>
c0019dd1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019dd5:	8d 48 01             	lea    ecx,[eax+0x1]
c0019dd8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019dda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ddd:	89 de                	mov    esi,ebx
c0019ddf:	e8 88 69 fe ff       	call   c000076c <strlen>
c0019de4:	83 c4 0c             	add    esp,0xc
c0019de7:	40                   	inc    eax
c0019de8:	50                   	push   eax
c0019de9:	6a 00                	push   0x0
c0019deb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019def:	e8 5c 69 fe ff       	call   c0000750 <memset>
c0019df4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019df7:	e8 70 69 fe ff       	call   c000076c <strlen>
c0019dfc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019e00:	8d 48 01             	lea    ecx,[eax+0x1]
c0019e03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019e05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e08:	40                   	inc    eax
c0019e09:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019e0c:	c1 e0 03             	shl    eax,0x3
c0019e0f:	5a                   	pop    edx
c0019e10:	59                   	pop    ecx
c0019e11:	50                   	push   eax
c0019e12:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019e15:	e8 5e 5a ff ff       	call   c000f878 <realloc>
c0019e1a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019e1e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019e21:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019e24:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019e28:	b9 08 00 00 00       	mov    ecx,0x8
c0019e2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019e2f:	83 c4 2c             	add    esp,0x2c
c0019e32:	5b                   	pop    ebx
c0019e33:	5e                   	pop    esi
c0019e34:	5f                   	pop    edi
c0019e35:	5d                   	pop    ebp
c0019e36:	c3                   	ret    
c0019e37:	90                   	nop

c0019e38 <EnvVarContainer::deleteEnv(char const*)>:
c0019e38:	c3                   	ret    
c0019e39:	90                   	nop

c0019e3a <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019e3a:	55                   	push   ebp
c0019e3b:	57                   	push   edi
c0019e3c:	56                   	push   esi
c0019e3d:	53                   	push   ebx
c0019e3e:	81 ec 38 01 00 00    	sub    esp,0x138
c0019e44:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c0019e4b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019e52:	68 14 01 00 00       	push   0x114
c0019e57:	e8 30 5a ff ff       	call   c000f88c <malloc>
c0019e5c:	83 c4 0c             	add    esp,0xc
c0019e5f:	89 c5                	mov    ebp,eax
c0019e61:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0019e64:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019e6b:	50                   	push   eax
c0019e6c:	e8 bd 8f ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c0019e71:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019e74:	e8 87 92 ff ff       	call   c0013100 <File::exists()>
c0019e79:	83 c4 10             	add    esp,0x10
c0019e7c:	84 c0                	test   al,al
c0019e7e:	75 32                	jne    c0019eb2 <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c0019e80:	51                   	push   ecx
c0019e81:	51                   	push   ecx
c0019e82:	6a 12                	push   0x12
c0019e84:	55                   	push   ebp
c0019e85:	e8 08 90 ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c0019e8a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e8d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019e90:	89 34 24             	mov    DWORD PTR [esp],esi
c0019e93:	e8 d4 68 fe ff       	call   c000076c <strlen>
c0019e98:	5a                   	pop    edx
c0019e99:	31 d2                	xor    edx,edx
c0019e9b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019e9f:	51                   	push   ecx
c0019ea0:	56                   	push   esi
c0019ea1:	52                   	push   edx
c0019ea2:	50                   	push   eax
c0019ea3:	55                   	push   ebp
c0019ea4:	ff d7                	call   edi
c0019ea6:	83 c4 14             	add    esp,0x14
c0019ea9:	55                   	push   ebp
c0019eaa:	e8 41 90 ff ff       	call   c0012ef0 <File::close()>
c0019eaf:	83 c4 10             	add    esp,0x10
c0019eb2:	31 f6                	xor    esi,esi
c0019eb4:	50                   	push   eax
c0019eb5:	68 00 01 00 00       	push   0x100
c0019eba:	6a 00                	push   0x0
c0019ebc:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019ec0:	50                   	push   eax
c0019ec1:	e8 8a 68 fe ff       	call   c0000750 <memset>
c0019ec6:	58                   	pop    eax
c0019ec7:	5a                   	pop    edx
c0019ec8:	6a 01                	push   0x1
c0019eca:	55                   	push   ebp
c0019ecb:	e8 c2 8f ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c0019ed0:	83 c4 10             	add    esp,0x10
c0019ed3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019edb:	83 ec 0c             	sub    esp,0xc
c0019ede:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019ee1:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019ee5:	51                   	push   ecx
c0019ee6:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019eea:	52                   	push   edx
c0019eeb:	6a 00                	push   0x0
c0019eed:	6a 01                	push   0x1
c0019eef:	55                   	push   ebp
c0019ef0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019ef3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019ef7:	83 c4 20             	add    esp,0x20
c0019efa:	3c 0d                	cmp    al,0xd
c0019efc:	0f 84 16 01 00 00    	je     c001a018 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c0019f02:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f07:	0f 84 fc 00 00 00    	je     c001a009 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019f0d:	3c 0a                	cmp    al,0xa
c0019f0f:	74 13                	je     c0019f24 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c0019f11:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019f16:	74 0c                	je     c0019f24 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c0019f18:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019f1e:	0f 8e e5 00 00 00    	jle    c001a009 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019f24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f28:	83 ec 0c             	sub    esp,0xc
c0019f2b:	8d 78 01             	lea    edi,[eax+0x1]
c0019f2e:	57                   	push   edi
c0019f2f:	e8 58 59 ff ff       	call   c000f88c <malloc>
c0019f34:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019f38:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019f3c:	8d 56 04             	lea    edx,[esi+0x4]
c0019f3f:	89 14 24             	mov    DWORD PTR [esp],edx
c0019f42:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019f46:	e8 41 59 ff ff       	call   c000f88c <malloc>
c0019f4b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019f4f:	83 c4 0c             	add    esp,0xc
c0019f52:	57                   	push   edi
c0019f53:	6a 00                	push   0x0
c0019f55:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019f59:	e8 f2 67 fe ff       	call   c0000750 <memset>
c0019f5e:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019f62:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019f66:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019f6a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f6c:	83 c4 0c             	add    esp,0xc
c0019f6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019f73:	52                   	push   edx
c0019f74:	6a 00                	push   0x0
c0019f76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019f7a:	e8 d1 67 fe ff       	call   c0000750 <memset>
c0019f7f:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019f83:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019f87:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f8a:	e8 dd 67 fe ff       	call   c000076c <strlen>
c0019f8f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019f93:	89 c1                	mov    ecx,eax
c0019f95:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f97:	5e                   	pop    esi
c0019f98:	5f                   	pop    edi
c0019f99:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019f9d:	68 91 c3 02 c0       	push   0xc002c391
c0019fa2:	e8 28 89 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0019fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019fa9:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0019fac:	40                   	inc    eax
c0019fad:	83 c4 10             	add    esp,0x10
c0019fb0:	89 03                	mov    DWORD PTR [ebx],eax
c0019fb2:	85 d2                	test   edx,edx
c0019fb4:	75 0c                	jne    c0019fc2 <EnvVarContainer::loadFrom(char const*, char const*)+0x188>
c0019fb6:	83 ec 0c             	sub    esp,0xc
c0019fb9:	6a 08                	push   0x8
c0019fbb:	e8 cc 58 ff ff       	call   c000f88c <malloc>
c0019fc0:	eb 0c                	jmp    c0019fce <EnvVarContainer::loadFrom(char const*, char const*)+0x194>
c0019fc2:	c1 e0 03             	shl    eax,0x3
c0019fc5:	51                   	push   ecx
c0019fc6:	51                   	push   ecx
c0019fc7:	50                   	push   eax
c0019fc8:	52                   	push   edx
c0019fc9:	e8 aa 58 ff ff       	call   c000f878 <realloc>
c0019fce:	83 c4 10             	add    esp,0x10
c0019fd1:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019fd4:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019fd6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0019fd9:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019fdd:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019fe1:	b9 08 00 00 00       	mov    ecx,0x8
c0019fe6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019fe8:	31 f6                	xor    esi,esi
c0019fea:	52                   	push   edx
c0019feb:	68 00 01 00 00       	push   0x100
c0019ff0:	6a 00                	push   0x0
c0019ff2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019ff6:	50                   	push   eax
c0019ff7:	e8 54 67 fe ff       	call   c0000750 <memset>
c0019ffc:	83 c4 10             	add    esp,0x10
c0019fff:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a007:	eb 0f                	jmp    c001a018 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a009:	3c 3d                	cmp    al,0x3d
c001a00b:	74 07                	je     c001a014 <EnvVarContainer::loadFrom(char const*, char const*)+0x1da>
c001a00d:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a011:	46                   	inc    esi
c001a012:	eb 04                	jmp    c001a018 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a014:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a018:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a01d:	0f 85 b8 fe ff ff    	jne    c0019edb <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c001a023:	50                   	push   eax
c001a024:	50                   	push   eax
c001a025:	ff 33                	push   DWORD PTR [ebx]
c001a027:	68 9f c3 02 c0       	push   0xc002c39f
c001a02c:	e8 9e 88 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001a031:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a037:	5b                   	pop    ebx
c001a038:	5e                   	pop    esi
c001a039:	5f                   	pop    edi
c001a03a:	5d                   	pop    ebp
c001a03b:	c3                   	ret    

c001a03c <EnvVarContainer::__loadSystem()>:
c001a03c:	83 ec 10             	sub    esp,0x10
c001a03f:	68 40 e5 02 c0       	push   0xc002e540
c001a044:	68 ca c3 02 c0       	push   0xc002c3ca
c001a049:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a04d:	e8 e8 fd ff ff       	call   c0019e3a <EnvVarContainer::loadFrom(char const*, char const*)>
c001a052:	83 c4 1c             	add    esp,0x1c
c001a055:	c3                   	ret    

c001a056 <EnvVarContainer::__loadUser()>:
c001a056:	c3                   	ret    
c001a057:	90                   	nop

c001a058 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a066:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a06a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a06d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a071:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a078:	90                   	nop
c001a079:	c3                   	ret    

c001a07a <EnvVarContainer::~EnvVarContainer()>:
c001a07a:	83 ec 0c             	sub    esp,0xc
c001a07d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a081:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a084:	85 c0                	test   eax,eax
c001a086:	74 1d                	je     c001a0a5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a08c:	8b 00                	mov    eax,DWORD PTR [eax]
c001a08e:	85 c0                	test   eax,eax
c001a090:	74 13                	je     c001a0a5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a096:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a099:	83 ec 0c             	sub    esp,0xc
c001a09c:	50                   	push   eax
c001a09d:	e8 fa 57 ff ff       	call   c000f89c <free>
c001a0a2:	83 c4 10             	add    esp,0x10
c001a0a5:	90                   	nop
c001a0a6:	83 c4 0c             	add    esp,0xc
c001a0a9:	c3                   	ret    

c001a0aa <Krnl::getEnv(Process*, char const*)>:
c001a0aa:	53                   	push   ebx
c001a0ab:	83 ec 08             	sub    esp,0x8
c001a0ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a0b2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a0b6:	39 05 50 25 03 c0    	cmp    DWORD PTR ds:0xc0032550,eax
c001a0bc:	74 04                	je     c001a0c2 <Krnl::getEnv(Process*, char const*)+0x18>
c001a0be:	85 c0                	test   eax,eax
c001a0c0:	75 0b                	jne    c001a0cd <Krnl::getEnv(Process*, char const*)+0x23>
c001a0c2:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a0c7:	85 c0                	test   eax,eax
c001a0c9:	75 19                	jne    c001a0e4 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a0cb:	eb 27                	jmp    c001a0f4 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a0cd:	52                   	push   edx
c001a0ce:	52                   	push   edx
c001a0cf:	53                   	push   ebx
c001a0d0:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a0d6:	e8 5d fc ff ff       	call   c0019d38 <EnvVarContainer::getEnv(char const*)>
c001a0db:	83 c4 10             	add    esp,0x10
c001a0de:	85 c0                	test   eax,eax
c001a0e0:	75 28                	jne    c001a10a <Krnl::getEnv(Process*, char const*)+0x60>
c001a0e2:	eb de                	jmp    c001a0c2 <Krnl::getEnv(Process*, char const*)+0x18>
c001a0e4:	52                   	push   edx
c001a0e5:	52                   	push   edx
c001a0e6:	53                   	push   ebx
c001a0e7:	50                   	push   eax
c001a0e8:	e8 4b fc ff ff       	call   c0019d38 <EnvVarContainer::getEnv(char const*)>
c001a0ed:	83 c4 10             	add    esp,0x10
c001a0f0:	85 c0                	test   eax,eax
c001a0f2:	75 16                	jne    c001a10a <Krnl::getEnv(Process*, char const*)+0x60>
c001a0f4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a0f8:	a1 38 1b 03 c0       	mov    eax,ds:0xc0031b38
c001a0fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a101:	83 c4 08             	add    esp,0x8
c001a104:	5b                   	pop    ebx
c001a105:	e9 2e fc ff ff       	jmp    c0019d38 <EnvVarContainer::getEnv(char const*)>
c001a10a:	83 c4 08             	add    esp,0x8
c001a10d:	5b                   	pop    ebx
c001a10e:	c3                   	ret    

c001a10f <Krnl::setEnvSystem(char const*, char const*)>:
c001a10f:	83 ec 10             	sub    esp,0x10
c001a112:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a116:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a11a:	ff 35 38 1b 03 c0    	push   DWORD PTR ds:0xc0031b38
c001a120:	e8 51 fc ff ff       	call   c0019d76 <EnvVarContainer::setEnv(char const*, char const*)>
c001a125:	83 c4 1c             	add    esp,0x1c
c001a128:	c3                   	ret    

c001a129 <Krnl::setEnvUser(char const*, char const*)>:
c001a129:	a1 34 1b 03 c0       	mov    eax,ds:0xc0031b34
c001a12e:	85 c0                	test   eax,eax
c001a130:	74 15                	je     c001a147 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a132:	83 ec 10             	sub    esp,0x10
c001a135:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a139:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a13d:	50                   	push   eax
c001a13e:	e8 33 fc ff ff       	call   c0019d76 <EnvVarContainer::setEnv(char const*, char const*)>
c001a143:	83 c4 1c             	add    esp,0x1c
c001a146:	c3                   	ret    
c001a147:	c3                   	ret    

c001a148 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a148:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a14c:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a152:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a156:	e9 1b fc ff ff       	jmp    c0019d76 <EnvVarContainer::setEnv(char const*, char const*)>

c001a15b <Krnl::deleteEnvSystem(char const*)>:
c001a15b:	c3                   	ret    

c001a15c <Krnl::deleteEnvUser(char const*)>:
c001a15c:	c3                   	ret    

c001a15d <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a15d:	c3                   	ret    

c001a15e <Krnl::newProcessEnv(Process*)>:
c001a15e:	83 ec 28             	sub    esp,0x28
c001a161:	6a 0c                	push   0xc
c001a163:	e8 24 57 ff ff       	call   c000f88c <malloc>
c001a168:	5a                   	pop    edx
c001a169:	59                   	pop    ecx
c001a16a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a16e:	50                   	push   eax
c001a16f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a173:	e8 e0 fe ff ff       	call   c001a058 <EnvVarContainer::EnvVarContainer(Process*)>
c001a178:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a17c:	83 c4 2c             	add    esp,0x2c
c001a17f:	c3                   	ret    

c001a180 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a180:	57                   	push   edi
c001a181:	56                   	push   esi
c001a182:	53                   	push   ebx
c001a183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a187:	83 ec 0c             	sub    esp,0xc
c001a18a:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a190:	6a 0c                	push   0xc
c001a192:	e8 f5 56 ff ff       	call   c000f88c <malloc>
c001a197:	89 c3                	mov    ebx,eax
c001a199:	58                   	pop    eax
c001a19a:	5a                   	pop    edx
c001a19b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a19f:	53                   	push   ebx
c001a1a0:	e8 b3 fe ff ff       	call   c001a058 <EnvVarContainer::EnvVarContainer(Process*)>
c001a1a5:	8b 07                	mov    eax,DWORD PTR [edi]
c001a1a7:	89 03                	mov    DWORD PTR [ebx],eax
c001a1a9:	c1 e0 03             	shl    eax,0x3
c001a1ac:	89 04 24             	mov    DWORD PTR [esp],eax
c001a1af:	e8 d8 56 ff ff       	call   c000f88c <malloc>
c001a1b4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a1b7:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a1b9:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a1bc:	c1 e1 03             	shl    ecx,0x3
c001a1bf:	89 c7                	mov    edi,eax
c001a1c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a1c3:	83 c4 10             	add    esp,0x10
c001a1c6:	89 d8                	mov    eax,ebx
c001a1c8:	5b                   	pop    ebx
c001a1c9:	5e                   	pop    esi
c001a1ca:	5f                   	pop    edi
c001a1cb:	c3                   	ret    

c001a1cc <Krnl::loadSystemEnv()>:
c001a1cc:	53                   	push   ebx
c001a1cd:	83 ec 14             	sub    esp,0x14
c001a1d0:	6a 0c                	push   0xc
c001a1d2:	e8 b5 56 ff ff       	call   c000f88c <malloc>
c001a1d7:	89 c3                	mov    ebx,eax
c001a1d9:	58                   	pop    eax
c001a1da:	5a                   	pop    edx
c001a1db:	ff 35 50 25 03 c0    	push   DWORD PTR ds:0xc0032550
c001a1e1:	53                   	push   ebx
c001a1e2:	e8 71 fe ff ff       	call   c001a058 <EnvVarContainer::EnvVarContainer(Process*)>
c001a1e7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a1ea:	89 1d 38 1b 03 c0    	mov    DWORD PTR ds:0xc0031b38,ebx
c001a1f0:	e8 47 fe ff ff       	call   c001a03c <EnvVarContainer::__loadSystem()>
c001a1f5:	83 c4 18             	add    esp,0x18
c001a1f8:	5b                   	pop    ebx
c001a1f9:	c3                   	ret    

c001a1fa <Krnl::loadUserEnv()>:
c001a1fa:	53                   	push   ebx
c001a1fb:	83 ec 14             	sub    esp,0x14
c001a1fe:	6a 0c                	push   0xc
c001a200:	e8 87 56 ff ff       	call   c000f88c <malloc>
c001a205:	89 c3                	mov    ebx,eax
c001a207:	58                   	pop    eax
c001a208:	5a                   	pop    edx
c001a209:	ff 35 50 25 03 c0    	push   DWORD PTR ds:0xc0032550
c001a20f:	53                   	push   ebx
c001a210:	e8 43 fe ff ff       	call   c001a058 <EnvVarContainer::EnvVarContainer(Process*)>
c001a215:	89 1d 34 1b 03 c0    	mov    DWORD PTR ds:0xc0031b34,ebx
c001a21b:	83 c4 18             	add    esp,0x18
c001a21e:	5b                   	pop    ebx
c001a21f:	c3                   	ret    

c001a220 <Krnl::flushEnv()>:
c001a220:	c3                   	ret    

c001a221 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a221:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a225:	8b 15 34 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b34
c001a22b:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a231:	a1 38 1b 03 c0       	mov    eax,ds:0xc0031b38
c001a236:	8b 00                	mov    eax,DWORD PTR [eax]
c001a238:	03 01                	add    eax,DWORD PTR [ecx]
c001a23a:	85 d2                	test   edx,edx
c001a23c:	74 02                	je     c001a240 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a23e:	03 02                	add    eax,DWORD PTR [edx]
c001a240:	c3                   	ret    

c001a241 <Krnl::getProcessEnvPair(Process*, int)>:
c001a241:	57                   	push   edi
c001a242:	8b 0d 34 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031b34
c001a248:	56                   	push   esi
c001a249:	85 c9                	test   ecx,ecx
c001a24b:	53                   	push   ebx
c001a24c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a250:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a254:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a25a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a25e:	8b 02                	mov    eax,DWORD PTR [edx]
c001a260:	75 47                	jne    c001a2a9 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a262:	39 c3                	cmp    ebx,eax
c001a264:	7c 47                	jl     c001a2ad <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a266:	8b 15 38 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b38
c001a26c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a26e:	01 c1                	add    ecx,eax
c001a270:	39 d9                	cmp    ecx,ebx
c001a272:	7e 6c                	jle    c001a2e0 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a274:	51                   	push   ecx
c001a275:	89 d9                	mov    ecx,ebx
c001a277:	29 c1                	sub    ecx,eax
c001a279:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a27c:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a280:	53                   	push   ebx
c001a281:	68 ec c3 02 c0       	push   0xc002c3ec
c001a286:	e8 44 86 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001a28b:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a291:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a293:	a1 38 1b 03 c0       	mov    eax,ds:0xc0031b38
c001a298:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a29b:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a29f:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a2a2:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a2a5:	89 06                	mov    DWORD PTR [esi],eax
c001a2a7:	eb 51                	jmp    c001a2fa <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a2a9:	39 c3                	cmp    ebx,eax
c001a2ab:	7d 05                	jge    c001a2b2 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a2ad:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a2b0:	eb 20                	jmp    c001a2d2 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a2b2:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a2b4:	8d 14 07             	lea    edx,[edi+eax*1]
c001a2b7:	39 da                	cmp    edx,ebx
c001a2b9:	7e 04                	jle    c001a2bf <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a2bb:	29 c3                	sub    ebx,eax
c001a2bd:	eb 10                	jmp    c001a2cf <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a2bf:	8b 0d 38 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031b38
c001a2c5:	03 11                	add    edx,DWORD PTR [ecx]
c001a2c7:	39 da                	cmp    edx,ebx
c001a2c9:	7e 15                	jle    c001a2e0 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a2cb:	29 c3                	sub    ebx,eax
c001a2cd:	29 fb                	sub    ebx,edi
c001a2cf:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a2d2:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a2d6:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a2d9:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a2dc:	89 06                	mov    DWORD PTR [esi],eax
c001a2de:	eb 1d                	jmp    c001a2fd <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a2e0:	83 ec 0c             	sub    esp,0xc
c001a2e3:	68 00 c4 02 c0       	push   0xc002c400
c001a2e8:	e8 18 00 00 00       	call   c001a305 <Krnl::panic(char const*)>
c001a2ed:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a2f3:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a2fa:	83 c4 10             	add    esp,0x10
c001a2fd:	89 f0                	mov    eax,esi
c001a2ff:	5b                   	pop    ebx
c001a300:	5e                   	pop    esi
c001a301:	5f                   	pop    edi
c001a302:	c2 04 00             	ret    0x4

c001a305 <Krnl::panic(char const*)>:
c001a305:	55                   	push   ebp
c001a306:	89 e5                	mov    ebp,esp
c001a308:	53                   	push   ebx
c001a309:	83 ec 0c             	sub    esp,0xc
c001a30c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a30f:	fa                   	cli    
c001a310:	c6 05 44 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031b44,0x1
c001a317:	53                   	push   ebx
c001a318:	c6 05 40 df 02 c0 00 	mov    BYTE PTR ds:0xc002df40,0x0
c001a31f:	68 1a c4 02 c0       	push   0xc002c41a
c001a324:	e8 a6 85 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001a329:	58                   	pop    eax
c001a32a:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a32f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a335:	e8 b8 63 ff ff       	call   c00106f2 <setActiveTerminal(VgaText*)>
c001a33a:	83 c4 0c             	add    esp,0xc
c001a33d:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a342:	6a 01                	push   0x1
c001a344:	6a 0f                	push   0xf
c001a346:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a34c:	e8 4d 60 ff ff       	call   c001039e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a351:	58                   	pop    eax
c001a352:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a357:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a35d:	e8 d6 65 ff ff       	call   c0010938 <VgaText::clearScreen()>
c001a362:	58                   	pop    eax
c001a363:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a368:	5a                   	pop    edx
c001a369:	68 33 c4 02 c0       	push   0xc002c433
c001a36e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a374:	e8 4b 67 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c001a379:	59                   	pop    ecx
c001a37a:	58                   	pop    eax
c001a37b:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a380:	68 d8 c4 02 c0       	push   0xc002c4d8
c001a385:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a38b:	e8 34 67 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c001a390:	58                   	pop    eax
c001a391:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a396:	5a                   	pop    edx
c001a397:	68 4f c4 02 c0       	push   0xc002c44f
c001a39c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3a2:	e8 1d 67 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c001a3a7:	59                   	pop    ecx
c001a3a8:	58                   	pop    eax
c001a3a9:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a3ae:	53                   	push   ebx
c001a3af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3b5:	e8 0a 67 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c001a3ba:	58                   	pop    eax
c001a3bb:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a3c0:	5a                   	pop    edx
c001a3c1:	68 6f c4 02 c0       	push   0xc002c46f
c001a3c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3cc:	e8 f3 66 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c001a3d1:	a1 40 1b 03 c0       	mov    eax,ds:0xc0031b40
c001a3d6:	83 c4 10             	add    esp,0x10
c001a3d9:	85 c0                	test   eax,eax
c001a3db:	74 02                	je     c001a3df <Krnl::panic(char const*)+0xda>
c001a3dd:	ff d0                	call   eax
c001a3df:	83 ec 0c             	sub    esp,0xc
c001a3e2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a3e5:	e8 9e 32 00 00       	call   c001d688 <Thr::getDriverNameFromAddress(unsigned long)>
c001a3ea:	83 c4 10             	add    esp,0x10
c001a3ed:	89 c3                	mov    ebx,eax
c001a3ef:	85 c0                	test   eax,eax
c001a3f1:	0f 84 50 02 00 00    	je     c001a647 <Krnl::panic(char const*)+0x342>
c001a3f7:	83 ec 08             	sub    esp,0x8
c001a3fa:	8b 15 50 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032550
c001a400:	68 14 c5 02 c0       	push   0xc002c514
c001a405:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a40b:	e8 b4 66 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c001a410:	58                   	pop    eax
c001a411:	5a                   	pop    edx
c001a412:	8b 15 50 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032550
c001a418:	68 4f c4 02 c0       	push   0xc002c44f
c001a41d:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a423:	e8 9c 66 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c001a428:	59                   	pop    ecx
c001a429:	58                   	pop    eax
c001a42a:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a42f:	53                   	push   ebx
c001a430:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a436:	e8 89 66 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c001a43b:	83 c4 10             	add    esp,0x10
c001a43e:	83 ec 08             	sub    esp,0x8
c001a441:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a446:	68 6e c4 02 c0       	push   0xc002c46e
c001a44b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a451:	e8 6e 66 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c001a456:	58                   	pop    eax
c001a457:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a45c:	5a                   	pop    edx
c001a45d:	68 6c c5 02 c0       	push   0xc002c56c
c001a462:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a468:	e8 57 66 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c001a46d:	59                   	pop    ecx
c001a46e:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a473:	5b                   	pop    ebx
c001a474:	68 ac c5 02 c0       	push   0xc002c5ac
c001a479:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a47f:	e8 40 66 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c001a484:	58                   	pop    eax
c001a485:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a48a:	5a                   	pop    edx
c001a48b:	68 5a c4 02 c0       	push   0xc002c45a
c001a490:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a496:	e8 29 66 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c001a49b:	59                   	pop    ecx
c001a49c:	5b                   	pop    ebx
c001a49d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a4a0:	68 72 c4 02 c0       	push   0xc002c472
c001a4a5:	e8 25 84 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001a4aa:	58                   	pop    eax
c001a4ab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a4ae:	5a                   	pop    edx
c001a4af:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a4b2:	68 7b c4 02 c0       	push   0xc002c47b
c001a4b7:	e8 13 84 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001a4bc:	59                   	pop    ecx
c001a4bd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a4c0:	5b                   	pop    ebx
c001a4c1:	8b 00                	mov    eax,DWORD PTR [eax]
c001a4c3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a4c6:	68 84 c4 02 c0       	push   0xc002c484
c001a4cb:	e8 ff 83 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001a4d0:	58                   	pop    eax
c001a4d1:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a4d6:	5a                   	pop    edx
c001a4d7:	68 f0 c5 02 c0       	push   0xc002c5f0
c001a4dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4e2:	e8 dd 65 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c001a4e7:	59                   	pop    ecx
c001a4e8:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a4ed:	5b                   	pop    ebx
c001a4ee:	68 8d c4 02 c0       	push   0xc002c48d
c001a4f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4f9:	e8 c6 65 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c001a4fe:	0f 20 c0             	mov    eax,cr0
c001a501:	5a                   	pop    edx
c001a502:	59                   	pop    ecx
c001a503:	50                   	push   eax
c001a504:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a509:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a50f:	e8 6a 65 ff ff       	call   c0010a7e <VgaText::putx(unsigned int)>
c001a514:	5b                   	pop    ebx
c001a515:	58                   	pop    eax
c001a516:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a51b:	68 97 c4 02 c0       	push   0xc002c497
c001a520:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a526:	e8 99 65 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c001a52b:	0f 20 d0             	mov    eax,cr2
c001a52e:	5a                   	pop    edx
c001a52f:	59                   	pop    ecx
c001a530:	50                   	push   eax
c001a531:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a536:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a53c:	e8 3d 65 ff ff       	call   c0010a7e <VgaText::putx(unsigned int)>
c001a541:	5b                   	pop    ebx
c001a542:	58                   	pop    eax
c001a543:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a548:	68 a1 c4 02 c0       	push   0xc002c4a1
c001a54d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a553:	e8 6c 65 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c001a558:	0f 20 d8             	mov    eax,cr3
c001a55b:	5a                   	pop    edx
c001a55c:	59                   	pop    ecx
c001a55d:	50                   	push   eax
c001a55e:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a563:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a569:	e8 10 65 ff ff       	call   c0010a7e <VgaText::putx(unsigned int)>
c001a56e:	5b                   	pop    ebx
c001a56f:	58                   	pop    eax
c001a570:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a575:	68 b4 c4 02 c0       	push   0xc002c4b4
c001a57a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a580:	e8 3f 65 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c001a585:	0f 20 e0             	mov    eax,cr4
c001a588:	5a                   	pop    edx
c001a589:	59                   	pop    ecx
c001a58a:	50                   	push   eax
c001a58b:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a590:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a596:	e8 e3 64 ff ff       	call   c0010a7e <VgaText::putx(unsigned int)>
c001a59b:	5b                   	pop    ebx
c001a59c:	58                   	pop    eax
c001a59d:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a5a2:	68 be c4 02 c0       	push   0xc002c4be
c001a5a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5ad:	e8 12 65 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c001a5b2:	5a                   	pop    edx
c001a5b3:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a5b8:	59                   	pop    ecx
c001a5b9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a5bf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a5c2:	50                   	push   eax
c001a5c3:	e8 b6 64 ff ff       	call   c0010a7e <VgaText::putx(unsigned int)>
c001a5c8:	5b                   	pop    ebx
c001a5c9:	58                   	pop    eax
c001a5ca:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a5cf:	68 8b d3 02 c0       	push   0xc002d38b
c001a5d4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5da:	e8 e5 64 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c001a5df:	5a                   	pop    edx
c001a5e0:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a5e5:	59                   	pop    ecx
c001a5e6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a5ec:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a5ef:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a5f2:	50                   	push   eax
c001a5f3:	e8 86 64 ff ff       	call   c0010a7e <VgaText::putx(unsigned int)>
c001a5f8:	5b                   	pop    ebx
c001a5f9:	58                   	pop    eax
c001a5fa:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a5ff:	68 8b d3 02 c0       	push   0xc002d38b
c001a604:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a60a:	e8 b5 64 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c001a60f:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a614:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a617:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a61d:	8b 12                	mov    edx,DWORD PTR [edx]
c001a61f:	59                   	pop    ecx
c001a620:	5b                   	pop    ebx
c001a621:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a624:	50                   	push   eax
c001a625:	e8 54 64 ff ff       	call   c0010a7e <VgaText::putx(unsigned int)>
c001a62a:	83 c4 10             	add    esp,0x10
c001a62d:	b2 fe                	mov    dl,0xfe
c001a62f:	e4 60                	in     al,0x60
c001a631:	3c 1c                	cmp    al,0x1c
c001a633:	74 04                	je     c001a639 <Krnl::panic(char const*)+0x334>
c001a635:	3c 5a                	cmp    al,0x5a
c001a637:	75 f6                	jne    c001a62f <Krnl::panic(char const*)+0x32a>
c001a639:	e4 64                	in     al,0x64
c001a63b:	a8 02                	test   al,0x2
c001a63d:	75 fa                	jne    c001a639 <Krnl::panic(char const*)+0x334>
c001a63f:	88 d0                	mov    al,dl
c001a641:	e6 64                	out    0x64,al
c001a643:	fa                   	cli    
c001a644:	f4                   	hlt    
c001a645:	eb e8                	jmp    c001a62f <Krnl::panic(char const*)+0x32a>
c001a647:	50                   	push   eax
c001a648:	50                   	push   eax
c001a649:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a64e:	68 40 c5 02 c0       	push   0xc002c540
c001a653:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a659:	e8 66 64 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c001a65e:	58                   	pop    eax
c001a65f:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a664:	5a                   	pop    edx
c001a665:	68 4f c4 02 c0       	push   0xc002c44f
c001a66a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a670:	e8 4f 64 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c001a675:	59                   	pop    ecx
c001a676:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a67b:	5b                   	pop    ebx
c001a67c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a67f:	83 c0 0c             	add    eax,0xc
c001a682:	50                   	push   eax
c001a683:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001a688:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a68e:	e8 31 64 ff ff       	call   c0010ac4 <VgaText::puts(char const*)>
c001a693:	83 c4 10             	add    esp,0x10
c001a696:	e9 a3 fd ff ff       	jmp    c001a43e <Krnl::panic(char const*)+0x139>

c001a69b <Net::switchEndian16(unsigned short)>:
c001a69b:	83 ec 04             	sub    esp,0x4
c001a69e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6a2:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a6a6:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a6aa:	c1 f8 08             	sar    eax,0x8
c001a6ad:	89 c2                	mov    edx,eax
c001a6af:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a6b3:	c1 e0 08             	shl    eax,0x8
c001a6b6:	09 d0                	or     eax,edx
c001a6b8:	83 c4 04             	add    esp,0x4
c001a6bb:	c3                   	ret    

c001a6bc <Net::switchEndian32(unsigned int)>:
c001a6bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6c0:	c1 e8 18             	shr    eax,0x18
c001a6c3:	89 c2                	mov    edx,eax
c001a6c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6c9:	c1 e0 08             	shl    eax,0x8
c001a6cc:	25 00 00 ff 00       	and    eax,0xff0000
c001a6d1:	09 c2                	or     edx,eax
c001a6d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6d7:	c1 e8 08             	shr    eax,0x8
c001a6da:	25 00 ff 00 00       	and    eax,0xff00
c001a6df:	09 c2                	or     edx,eax
c001a6e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6e5:	c1 e0 18             	shl    eax,0x18
c001a6e8:	09 d0                	or     eax,edx
c001a6ea:	c3                   	ret    

c001a6eb <Net::crc32Calc(unsigned char*, int)>:
c001a6eb:	83 ec 10             	sub    esp,0x10
c001a6ee:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a6f3:	75 07                	jne    c001a6fc <Net::crc32Calc(unsigned char*, int)+0x11>
c001a6f5:	b8 00 00 00 00       	mov    eax,0x0
c001a6fa:	eb 7c                	jmp    c001a778 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a6fc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a701:	7f 07                	jg     c001a70a <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a703:	b8 00 00 00 00       	mov    eax,0x0
c001a708:	eb 6e                	jmp    c001a778 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a70a:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a712:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a71a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a71e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a722:	7d 4e                	jge    c001a772 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a724:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a728:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a72c:	01 d0                	add    eax,edx
c001a72e:	8a 00                	mov    al,BYTE PTR [eax]
c001a730:	0f b6 c0             	movzx  eax,al
c001a733:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a737:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a73f:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a744:	7f 26                	jg     c001a76c <Net::crc32Calc(unsigned char*, int)+0x81>
c001a746:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a74a:	83 e0 01             	and    eax,0x1
c001a74d:	74 0d                	je     c001a75c <Net::crc32Calc(unsigned char*, int)+0x71>
c001a74f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a753:	d1 e8                	shr    eax,1
c001a755:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a75a:	eb 06                	jmp    c001a762 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a75c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a760:	d1 e8                	shr    eax,1
c001a762:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a766:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a76a:	eb d3                	jmp    c001a73f <Net::crc32Calc(unsigned char*, int)+0x54>
c001a76c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a770:	eb a8                	jmp    c001a71a <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a772:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a776:	f7 d0                	not    eax
c001a778:	83 c4 10             	add    esp,0x10
c001a77b:	c3                   	ret    

c001a77c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a77c:	57                   	push   edi
c001a77d:	56                   	push   esi
c001a77e:	53                   	push   ebx
c001a77f:	83 ec 60             	sub    esp,0x60
c001a782:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a789:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a78d:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a795:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a79a:	7f 1a                	jg     c001a7b6 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a79c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7a3:	8d 50 01             	lea    edx,[eax+0x1]
c001a7a6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a7ad:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a7b0:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a7b4:	eb df                	jmp    c001a795 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a7b6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7bd:	8d 50 01             	lea    edx,[eax+0x1]
c001a7c0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a7c7:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a7ca:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a7d5:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a7d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a7dd:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a7e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a7e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a7ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a7f1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a7f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a7f9:	89 c6                	mov    esi,eax
c001a7fb:	89 d7                	mov    edi,edx
c001a7fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a7ff:	89 c8                	mov    eax,ecx
c001a801:	89 fa                	mov    edx,edi
c001a803:	89 f3                	mov    ebx,esi
c001a805:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a809:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a80d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a810:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a818:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a81f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a823:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a827:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a82b:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a833:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a837:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a83b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a83f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a843:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a847:	89 c6                	mov    esi,eax
c001a849:	89 d7                	mov    edi,edx
c001a84b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a84d:	89 c8                	mov    eax,ecx
c001a84f:	89 fa                	mov    edx,edi
c001a851:	89 f3                	mov    ebx,esi
c001a853:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a857:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a85b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a85f:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a867:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a86e:	0f b7 c0             	movzx  eax,ax
c001a871:	c1 f8 08             	sar    eax,0x8
c001a874:	89 c1                	mov    ecx,eax
c001a876:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a87d:	8d 50 01             	lea    edx,[eax+0x1]
c001a880:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a887:	88 ca                	mov    dl,cl
c001a889:	88 10                	mov    BYTE PTR [eax],dl
c001a88b:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a892:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a899:	8d 48 01             	lea    ecx,[eax+0x1]
c001a89c:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a8a3:	88 10                	mov    BYTE PTR [eax],dl
c001a8a5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a8a9:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a8ad:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a8b4:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a8b8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a8bc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a8c0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a8c4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a8c8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a8cc:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a8d0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a8d4:	89 c6                	mov    esi,eax
c001a8d6:	89 d7                	mov    edi,edx
c001a8d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a8da:	89 c8                	mov    eax,ecx
c001a8dc:	89 fa                	mov    edx,edi
c001a8de:	89 f3                	mov    ebx,esi
c001a8e0:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a8e4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a8e8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a8ec:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a8f0:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a8f7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a8fe:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a902:	50                   	push   eax
c001a903:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a907:	e8 df fd ff ff       	call   c001a6eb <Net::crc32Calc(unsigned char*, int)>
c001a90c:	83 c4 08             	add    esp,0x8
c001a90f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a913:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a917:	c1 e8 18             	shr    eax,0x18
c001a91a:	89 c1                	mov    ecx,eax
c001a91c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a923:	8d 50 01             	lea    edx,[eax+0x1]
c001a926:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a92d:	88 ca                	mov    dl,cl
c001a92f:	88 10                	mov    BYTE PTR [eax],dl
c001a931:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a935:	c1 e8 10             	shr    eax,0x10
c001a938:	89 c1                	mov    ecx,eax
c001a93a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a941:	8d 50 01             	lea    edx,[eax+0x1]
c001a944:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a94b:	88 ca                	mov    dl,cl
c001a94d:	88 10                	mov    BYTE PTR [eax],dl
c001a94f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a953:	c1 e8 08             	shr    eax,0x8
c001a956:	89 c1                	mov    ecx,eax
c001a958:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a95f:	8d 50 01             	lea    edx,[eax+0x1]
c001a962:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a969:	88 ca                	mov    dl,cl
c001a96b:	88 10                	mov    BYTE PTR [eax],dl
c001a96d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a974:	8d 50 01             	lea    edx,[eax+0x1]
c001a977:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a97e:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a982:	88 10                	mov    BYTE PTR [eax],dl
c001a984:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a988:	83 c4 60             	add    esp,0x60
c001a98b:	5b                   	pop    ebx
c001a98c:	5e                   	pop    esi
c001a98d:	5f                   	pop    edi
c001a98e:	c3                   	ret    

c001a98f <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a98f:	57                   	push   edi
c001a990:	56                   	push   esi
c001a991:	53                   	push   ebx
c001a992:	83 ec 70             	sub    esp,0x70
c001a995:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a99c:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a9a0:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a9a8:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a9af:	83 c0 0e             	add    eax,0xe
c001a9b2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a9b6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a9bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a9c1:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a9c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a9cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a9d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a9d5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a9d9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a9dd:	89 c6                	mov    esi,eax
c001a9df:	89 d7                	mov    edi,edx
c001a9e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a9e3:	89 c8                	mov    eax,ecx
c001a9e5:	89 fa                	mov    edx,edi
c001a9e7:	89 f3                	mov    ebx,esi
c001a9e9:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a9ed:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a9f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a9f5:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a9fd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aa04:	83 c0 08             	add    eax,0x8
c001aa07:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001aa0b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa12:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001aa16:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001aa1e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001aa22:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001aa26:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aa2a:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001aa2e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001aa32:	89 c6                	mov    esi,eax
c001aa34:	89 d7                	mov    edi,edx
c001aa36:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa38:	89 c8                	mov    eax,ecx
c001aa3a:	89 fa                	mov    edx,edi
c001aa3c:	89 f3                	mov    ebx,esi
c001aa3e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001aa42:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001aa46:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aa4a:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001aa52:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa59:	8d 50 01             	lea    edx,[eax+0x1]
c001aa5c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aa63:	8a 00                	mov    al,BYTE PTR [eax]
c001aa65:	0f b6 c0             	movzx  eax,al
c001aa68:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001aa6d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa74:	8d 50 01             	lea    edx,[eax+0x1]
c001aa77:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aa7e:	8a 00                	mov    al,BYTE PTR [eax]
c001aa80:	0f b6 c0             	movzx  eax,al
c001aa83:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001aa88:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001aa8d:	c1 e0 08             	shl    eax,0x8
c001aa90:	89 c2                	mov    edx,eax
c001aa92:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001aa96:	09 d0                	or     eax,edx
c001aa98:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001aa9f:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001aaa3:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001aaab:	75 46                	jne    c001aaf3 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001aaad:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aab4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aab7:	66 3d dc 05          	cmp    ax,0x5dc
c001aabb:	77 16                	ja     c001aad3 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001aabd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aac4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aac7:	0f b7 c0             	movzx  eax,ax
c001aaca:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001aad1:	eb 20                	jmp    c001aaf3 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001aad3:	83 ec 0c             	sub    esp,0xc
c001aad6:	68 18 c6 02 c0       	push   0xc002c618
c001aadb:	e8 ef 7d ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001aae0:	83 c4 10             	add    esp,0x10
c001aae3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aaea:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001aaee:	e9 17 01 00 00       	jmp    c001ac0a <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001aaf3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aafa:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001ab01:	8b 12                	mov    edx,DWORD PTR [edx]
c001ab03:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ab07:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001ab0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ab12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ab16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab22:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ab26:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ab2a:	89 c6                	mov    esi,eax
c001ab2c:	89 d7                	mov    edi,edx
c001ab2e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab30:	89 c8                	mov    eax,ecx
c001ab32:	89 fa                	mov    edx,edi
c001ab34:	89 f3                	mov    ebx,esi
c001ab36:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ab3a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ab3e:	89 04 24             	mov    DWORD PTR [esp],eax
c001ab41:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ab48:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001ab4f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab56:	8d 50 01             	lea    edx,[eax+0x1]
c001ab59:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab60:	8a 00                	mov    al,BYTE PTR [eax]
c001ab62:	0f b6 c0             	movzx  eax,al
c001ab65:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001ab69:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab70:	8d 50 01             	lea    edx,[eax+0x1]
c001ab73:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab7a:	8a 00                	mov    al,BYTE PTR [eax]
c001ab7c:	0f b6 c0             	movzx  eax,al
c001ab7f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001ab83:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab8a:	8d 50 01             	lea    edx,[eax+0x1]
c001ab8d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab94:	8a 00                	mov    al,BYTE PTR [eax]
c001ab96:	0f b6 c0             	movzx  eax,al
c001ab99:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001ab9d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aba4:	8d 50 01             	lea    edx,[eax+0x1]
c001aba7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001abae:	8a 00                	mov    al,BYTE PTR [eax]
c001abb0:	0f b6 c0             	movzx  eax,al
c001abb3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001abb7:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001abbb:	c1 e0 18             	shl    eax,0x18
c001abbe:	89 c2                	mov    edx,eax
c001abc0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001abc4:	c1 e0 10             	shl    eax,0x10
c001abc7:	09 c2                	or     edx,eax
c001abc9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001abcd:	c1 e0 08             	shl    eax,0x8
c001abd0:	09 d0                	or     eax,edx
c001abd2:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001abd6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001abda:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001abe1:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001abe5:	83 e8 04             	sub    eax,0x4
c001abe8:	83 ec 08             	sub    esp,0x8
c001abeb:	50                   	push   eax
c001abec:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001abf0:	e8 f6 fa ff ff       	call   c001a6eb <Net::crc32Calc(unsigned char*, int)>
c001abf5:	83 c4 10             	add    esp,0x10
c001abf8:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001abfc:	0f 94 c2             	sete   dl
c001abff:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ac06:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001ac09:	90                   	nop
c001ac0a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001ac11:	83 c4 70             	add    esp,0x70
c001ac14:	5b                   	pop    ebx
c001ac15:	5e                   	pop    esi
c001ac16:	5f                   	pop    edi
c001ac17:	c2 04 00             	ret    0x4

c001ac1a <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ac1a:	55                   	push   ebp
c001ac1b:	57                   	push   edi
c001ac1c:	56                   	push   esi
c001ac1d:	53                   	push   ebx
c001ac1e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ac24:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001ac2b:	8a 1e                	mov    bl,BYTE PTR [esi]
c001ac2d:	8d 6e 01             	lea    ebp,[esi+0x1]
c001ac30:	80 fb 40             	cmp    bl,0x40
c001ac33:	75 1b                	jne    c001ac50 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ac35:	8a 16                	mov    dl,BYTE PTR [esi]
c001ac37:	84 d2                	test   dl,dl
c001ac39:	0f 84 f1 00 00 00    	je     c001ad30 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac3f:	8d 46 01             	lea    eax,[esi+0x1]
c001ac42:	80 fa 3a             	cmp    dl,0x3a
c001ac45:	74 04                	je     c001ac4b <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ac47:	89 c6                	mov    esi,eax
c001ac49:	eb ea                	jmp    c001ac35 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ac4b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ac4e:	89 c6                	mov    esi,eax
c001ac50:	50                   	push   eax
c001ac51:	6a 40                	push   0x40
c001ac53:	6a 00                	push   0x0
c001ac55:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac59:	50                   	push   eax
c001ac5a:	e8 f1 5a fe ff       	call   c0000750 <memset>
c001ac5f:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ac66:	31 c0                	xor    eax,eax
c001ac68:	83 c4 10             	add    esp,0x10
c001ac6b:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ac6d:	84 c9                	test   cl,cl
c001ac6f:	0f 84 bb 00 00 00    	je     c001ad30 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac75:	3d c7 00 00 00       	cmp    eax,0xc7
c001ac7a:	0f 8f b0 00 00 00    	jg     c001ad30 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac80:	80 f9 0a             	cmp    cl,0xa
c001ac83:	0f 85 98 00 00 00    	jne    c001ad21 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ac89:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ac8e:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ac92:	a8 df                	test   al,0xdf
c001ac94:	0f 94 c1             	sete   cl
c001ac97:	3c 23                	cmp    al,0x23
c001ac99:	0f 94 c2             	sete   dl
c001ac9c:	08 d1                	or     cl,dl
c001ac9e:	75 4a                	jne    c001acea <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aca0:	8d 50 f7             	lea    edx,[eax-0x9]
c001aca3:	80 fa 01             	cmp    dl,0x1
c001aca6:	76 42                	jbe    c001acea <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aca8:	3c 5b                	cmp    al,0x5b
c001acaa:	75 42                	jne    c001acee <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001acac:	80 fb 40             	cmp    bl,0x40
c001acaf:	75 39                	jne    c001acea <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acb1:	83 ec 0c             	sub    esp,0xc
c001acb4:	8d 54 24 65          	lea    edx,[esp+0x65]
c001acb8:	52                   	push   edx
c001acb9:	e8 ae 5a fe ff       	call   c000076c <strlen>
c001acbe:	83 c4 10             	add    esp,0x10
c001acc1:	83 f8 3f             	cmp    eax,0x3f
c001acc4:	77 6a                	ja     c001ad30 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001acc6:	50                   	push   eax
c001acc7:	50                   	push   eax
c001acc8:	8d 54 24 61          	lea    edx,[esp+0x61]
c001accc:	52                   	push   edx
c001accd:	8d 54 24 24          	lea    edx,[esp+0x24]
c001acd1:	52                   	push   edx
c001acd2:	e8 35 5b fe ff       	call   c000080c <strcpy>
c001acd7:	58                   	pop    eax
c001acd8:	8d 54 24 24          	lea    edx,[esp+0x24]
c001acdc:	52                   	push   edx
c001acdd:	e8 8a 5a fe ff       	call   c000076c <strlen>
c001ace2:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ace7:	83 c4 10             	add    esp,0x10
c001acea:	31 d2                	xor    edx,edx
c001acec:	eb 3a                	jmp    c001ad28 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001acee:	80 fb 40             	cmp    bl,0x40
c001acf1:	74 06                	je     c001acf9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001acf3:	8d 44 24 58          	lea    eax,[esp+0x58]
c001acf7:	eb 20                	jmp    c001ad19 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001acf9:	50                   	push   eax
c001acfa:	50                   	push   eax
c001acfb:	55                   	push   ebp
c001acfc:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad00:	50                   	push   eax
c001ad01:	e8 92 5b fe ff       	call   c0000898 <strcmp>
c001ad06:	83 c4 10             	add    esp,0x10
c001ad09:	85 c0                	test   eax,eax
c001ad0b:	75 dd                	jne    c001acea <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad0d:	eb e4                	jmp    c001acf3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001ad0f:	8d 50 01             	lea    edx,[eax+0x1]
c001ad12:	80 f9 3d             	cmp    cl,0x3d
c001ad15:	74 1d                	je     c001ad34 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001ad17:	89 d0                	mov    eax,edx
c001ad19:	8a 08                	mov    cl,BYTE PTR [eax]
c001ad1b:	84 c9                	test   cl,cl
c001ad1d:	75 f0                	jne    c001ad0f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001ad1f:	eb 0f                	jmp    c001ad30 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ad21:	8d 50 01             	lea    edx,[eax+0x1]
c001ad24:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001ad28:	47                   	inc    edi
c001ad29:	89 d0                	mov    eax,edx
c001ad2b:	e9 3b ff ff ff       	jmp    c001ac6b <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001ad30:	31 c0                	xor    eax,eax
c001ad32:	eb 33                	jmp    c001ad67 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ad34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad38:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ad3b:	50                   	push   eax
c001ad3c:	50                   	push   eax
c001ad3d:	8d 44 24 60          	lea    eax,[esp+0x60]
c001ad41:	50                   	push   eax
c001ad42:	56                   	push   esi
c001ad43:	e8 50 5b fe ff       	call   c0000898 <strcmp>
c001ad48:	83 c4 10             	add    esp,0x10
c001ad4b:	85 c0                	test   eax,eax
c001ad4d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad51:	75 97                	jne    c001acea <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ad53:	51                   	push   ecx
c001ad54:	51                   	push   ecx
c001ad55:	52                   	push   edx
c001ad56:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ad5d:	e8 aa 5a fe ff       	call   c000080c <strcpy>
c001ad62:	83 c4 10             	add    esp,0x10
c001ad65:	b0 01                	mov    al,0x1
c001ad67:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ad6d:	5b                   	pop    ebx
c001ad6e:	5e                   	pop    esi
c001ad6f:	5f                   	pop    edi
c001ad70:	5d                   	pop    ebp
c001ad71:	c3                   	ret    

c001ad72 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ad72:	57                   	push   edi
c001ad73:	56                   	push   esi
c001ad74:	53                   	push   ebx
c001ad75:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad7b:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ad82:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ad89:	53                   	push   ebx
c001ad8a:	e8 dd 59 fe ff       	call   c000076c <strlen>
c001ad8f:	89 34 24             	mov    DWORD PTR [esp],esi
c001ad92:	89 c7                	mov    edi,eax
c001ad94:	e8 d3 59 fe ff       	call   c000076c <strlen>
c001ad99:	83 c4 10             	add    esp,0x10
c001ad9c:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ada0:	3d ff 00 00 00       	cmp    eax,0xff
c001ada5:	0f 87 d3 00 00 00    	ja     c001ae7e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001adab:	57                   	push   edi
c001adac:	57                   	push   edi
c001adad:	56                   	push   esi
c001adae:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001adb2:	56                   	push   esi
c001adb3:	e8 54 5a fe ff       	call   c000080c <strcpy>
c001adb8:	58                   	pop    eax
c001adb9:	5a                   	pop    edx
c001adba:	68 6d cb 02 c0       	push   0xc002cb6d
c001adbf:	56                   	push   esi
c001adc0:	e8 87 5b fe ff       	call   c000094c <strcat>
c001adc5:	59                   	pop    ecx
c001adc6:	5f                   	pop    edi
c001adc7:	53                   	push   ebx
c001adc8:	56                   	push   esi
c001adc9:	e8 7e 5b fe ff       	call   c000094c <strcat>
c001adce:	58                   	pop    eax
c001adcf:	5a                   	pop    edx
c001add0:	68 64 c6 02 c0       	push   0xc002c664
c001add5:	56                   	push   esi
c001add6:	e8 71 5b fe ff       	call   c000094c <strcat>
c001addb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ade2:	e8 a5 4a ff ff       	call   c000f88c <malloc>
c001ade7:	83 c4 0c             	add    esp,0xc
c001adea:	89 c3                	mov    ebx,eax
c001adec:	ff 35 50 25 03 c0    	push   DWORD PTR ds:0xc0032550
c001adf2:	56                   	push   esi
c001adf3:	50                   	push   eax
c001adf4:	e8 35 80 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001adf9:	83 c4 10             	add    esp,0x10
c001adfc:	85 db                	test   ebx,ebx
c001adfe:	74 7e                	je     c001ae7e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ae00:	51                   	push   ecx
c001ae01:	51                   	push   ecx
c001ae02:	6a 01                	push   0x1
c001ae04:	53                   	push   ebx
c001ae05:	e8 88 80 ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c001ae0a:	83 c4 10             	add    esp,0x10
c001ae0d:	85 c0                	test   eax,eax
c001ae0f:	74 08                	je     c001ae19 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001ae11:	83 ec 0c             	sub    esp,0xc
c001ae14:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae16:	53                   	push   ebx
c001ae17:	eb 5f                	jmp    c001ae78 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001ae19:	52                   	push   edx
c001ae1a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ae1e:	50                   	push   eax
c001ae1f:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ae23:	50                   	push   eax
c001ae24:	53                   	push   ebx
c001ae25:	e8 14 83 ff ff       	call   c001313e <File::stat(unsigned long long*, bool*)>
c001ae2a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ae2e:	83 c4 10             	add    esp,0x10
c001ae31:	89 c1                	mov    ecx,eax
c001ae33:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ae37:	74 31                	je     c001ae6a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae39:	83 ec 0c             	sub    esp,0xc
c001ae3c:	50                   	push   eax
c001ae3d:	e8 4a 4a ff ff       	call   c000f88c <malloc>
c001ae42:	89 c6                	mov    esi,eax
c001ae44:	58                   	pop    eax
c001ae45:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae47:	8d 54 24 20          	lea    edx,[esp+0x20]
c001ae4b:	52                   	push   edx
c001ae4c:	56                   	push   esi
c001ae4d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae51:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae55:	53                   	push   ebx
c001ae56:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae59:	83 c4 20             	add    esp,0x20
c001ae5c:	85 c0                	test   eax,eax
c001ae5e:	75 0a                	jne    c001ae6a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae60:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae64:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ae68:	74 18                	je     c001ae82 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001ae6a:	83 ec 0c             	sub    esp,0xc
c001ae6d:	53                   	push   ebx
c001ae6e:	e8 7d 80 ff ff       	call   c0012ef0 <File::close()>
c001ae73:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae75:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae78:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae7b:	83 c4 10             	add    esp,0x10
c001ae7e:	31 c0                	xor    eax,eax
c001ae80:	eb 3b                	jmp    c001aebd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001ae82:	83 ec 0c             	sub    esp,0xc
c001ae85:	53                   	push   ebx
c001ae86:	e8 65 80 ff ff       	call   c0012ef0 <File::close()>
c001ae8b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae90:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae93:	83 c4 0c             	add    esp,0xc
c001ae96:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ae9d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001aea4:	56                   	push   esi
c001aea5:	e8 70 fd ff ff       	call   c001ac1a <Reg::findLineFromLoadedData(char*, char*, char*)>
c001aeaa:	89 34 24             	mov    DWORD PTR [esp],esi
c001aead:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001aeb1:	e8 e6 49 ff ff       	call   c000f89c <free>
c001aeb6:	83 c4 10             	add    esp,0x10
c001aeb9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001aebd:	81 c4 20 01 00 00    	add    esp,0x120
c001aec3:	5b                   	pop    ebx
c001aec4:	5e                   	pop    esi
c001aec5:	5f                   	pop    edi
c001aec6:	c3                   	ret    

c001aec7 <Reg::getLine(char*, char*, char*)>:
c001aec7:	57                   	push   edi
c001aec8:	56                   	push   esi
c001aec9:	53                   	push   ebx
c001aeca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aece:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aed2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001aed6:	57                   	push   edi
c001aed7:	56                   	push   esi
c001aed8:	53                   	push   ebx
c001aed9:	68 69 c6 02 c0       	push   0xc002c669
c001aede:	e8 8f fe ff ff       	call   c001ad72 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aee3:	83 c4 10             	add    esp,0x10
c001aee6:	84 c0                	test   al,al
c001aee8:	75 10                	jne    c001aefa <Reg::getLine(char*, char*, char*)+0x33>
c001aeea:	57                   	push   edi
c001aeeb:	56                   	push   esi
c001aeec:	53                   	push   ebx
c001aeed:	68 8e c6 02 c0       	push   0xc002c68e
c001aef2:	e8 7b fe ff ff       	call   c001ad72 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aef7:	83 c4 10             	add    esp,0x10
c001aefa:	5b                   	pop    ebx
c001aefb:	5e                   	pop    esi
c001aefc:	5f                   	pop    edi
c001aefd:	c3                   	ret    

c001aefe <Reg::readInt(char*, char*, int*)>:
c001aefe:	55                   	push   ebp
c001aeff:	57                   	push   edi
c001af00:	56                   	push   esi
c001af01:	53                   	push   ebx
c001af02:	81 ec f0 00 00 00    	sub    esp,0xf0
c001af08:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001af0c:	57                   	push   edi
c001af0d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001af14:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001af1b:	e8 a7 ff ff ff       	call   c001aec7 <Reg::getLine(char*, char*, char*)>
c001af20:	83 c4 10             	add    esp,0x10
c001af23:	84 c0                	test   al,al
c001af25:	0f 84 b3 00 00 00    	je     c001afde <Reg::readInt(char*, char*, int*)+0xe0>
c001af2b:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001af2f:	80 fa 2b             	cmp    dl,0x2b
c001af32:	74 0c                	je     c001af40 <Reg::readInt(char*, char*, int*)+0x42>
c001af34:	80 fa 2d             	cmp    dl,0x2d
c001af37:	75 0e                	jne    c001af47 <Reg::readInt(char*, char*, int*)+0x49>
c001af39:	ba 01 00 00 00       	mov    edx,0x1
c001af3e:	eb 0b                	jmp    c001af4b <Reg::readInt(char*, char*, int*)+0x4d>
c001af40:	ba 01 00 00 00       	mov    edx,0x1
c001af45:	eb 02                	jmp    c001af49 <Reg::readInt(char*, char*, int*)+0x4b>
c001af47:	31 d2                	xor    edx,edx
c001af49:	31 c0                	xor    eax,eax
c001af4b:	be 0a 00 00 00       	mov    esi,0xa
c001af50:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001af55:	75 20                	jne    c001af77 <Reg::readInt(char*, char*, int*)+0x79>
c001af57:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001af5b:	80 f9 78             	cmp    cl,0x78
c001af5e:	75 0a                	jne    c001af6a <Reg::readInt(char*, char*, int*)+0x6c>
c001af60:	83 c2 02             	add    edx,0x2
c001af63:	be 10 00 00 00       	mov    esi,0x10
c001af68:	eb 0d                	jmp    c001af77 <Reg::readInt(char*, char*, int*)+0x79>
c001af6a:	80 f9 62             	cmp    cl,0x62
c001af6d:	75 08                	jne    c001af77 <Reg::readInt(char*, char*, int*)+0x79>
c001af6f:	83 c2 02             	add    edx,0x2
c001af72:	be 02 00 00 00       	mov    esi,0x2
c001af77:	01 d7                	add    edi,edx
c001af79:	31 d2                	xor    edx,edx
c001af7b:	8a 1f                	mov    bl,BYTE PTR [edi]
c001af7d:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001af81:	80 fb 0d             	cmp    bl,0xd
c001af84:	0f 94 c3             	sete   bl
c001af87:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001af8c:	0f 94 c1             	sete   cl
c001af8f:	08 cb                	or     bl,cl
c001af91:	75 3a                	jne    c001afcd <Reg::readInt(char*, char*, int*)+0xcf>
c001af93:	0f af d6             	imul   edx,esi
c001af96:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001af9b:	83 fe 10             	cmp    esi,0x10
c001af9e:	75 26                	jne    c001afc6 <Reg::readInt(char*, char*, int*)+0xc8>
c001afa0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001afa4:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001afa7:	89 e9                	mov    ecx,ebp
c001afa9:	80 f9 05             	cmp    cl,0x5
c001afac:	77 06                	ja     c001afb4 <Reg::readInt(char*, char*, int*)+0xb6>
c001afae:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001afb2:	eb 16                	jmp    c001afca <Reg::readInt(char*, char*, int*)+0xcc>
c001afb4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001afb8:	83 e9 61             	sub    ecx,0x61
c001afbb:	80 f9 05             	cmp    cl,0x5
c001afbe:	77 06                	ja     c001afc6 <Reg::readInt(char*, char*, int*)+0xc8>
c001afc0:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001afc4:	eb 04                	jmp    c001afca <Reg::readInt(char*, char*, int*)+0xcc>
c001afc6:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001afca:	47                   	inc    edi
c001afcb:	eb ae                	jmp    c001af7b <Reg::readInt(char*, char*, int*)+0x7d>
c001afcd:	84 c0                	test   al,al
c001afcf:	74 02                	je     c001afd3 <Reg::readInt(char*, char*, int*)+0xd5>
c001afd1:	f7 da                	neg    edx
c001afd3:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001afda:	89 10                	mov    DWORD PTR [eax],edx
c001afdc:	88 d8                	mov    al,bl
c001afde:	81 c4 ec 00 00 00    	add    esp,0xec
c001afe4:	5b                   	pop    ebx
c001afe5:	5e                   	pop    esi
c001afe6:	5f                   	pop    edi
c001afe7:	5d                   	pop    ebp
c001afe8:	c3                   	ret    

c001afe9 <Reg::readString(char*, char*, char*, int)>:
c001afe9:	57                   	push   edi
c001afea:	56                   	push   esi
c001afeb:	53                   	push   ebx
c001afec:	81 ec d4 00 00 00    	sub    esp,0xd4
c001aff2:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001aff9:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001affd:	57                   	push   edi
c001affe:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b005:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b00c:	e8 b6 fe ff ff       	call   c001aec7 <Reg::getLine(char*, char*, char*)>
c001b011:	83 c4 10             	add    esp,0x10
c001b014:	89 c6                	mov    esi,eax
c001b016:	84 c0                	test   al,al
c001b018:	74 44                	je     c001b05e <Reg::readString(char*, char*, char*, int)+0x75>
c001b01a:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b021:	31 c0                	xor    eax,eax
c001b023:	4a                   	dec    edx
c001b024:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b027:	84 c9                	test   cl,cl
c001b029:	74 0f                	je     c001b03a <Reg::readString(char*, char*, char*, int)+0x51>
c001b02b:	39 c2                	cmp    edx,eax
c001b02d:	7e 0b                	jle    c001b03a <Reg::readString(char*, char*, char*, int)+0x51>
c001b02f:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b032:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b037:	40                   	inc    eax
c001b038:	eb ea                	jmp    c001b024 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b03a:	83 ec 0c             	sub    esp,0xc
c001b03d:	53                   	push   ebx
c001b03e:	e8 29 57 fe ff       	call   c000076c <strlen>
c001b043:	83 c4 10             	add    esp,0x10
c001b046:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b04b:	75 11                	jne    c001b05e <Reg::readString(char*, char*, char*, int)+0x75>
c001b04d:	83 ec 0c             	sub    esp,0xc
c001b050:	53                   	push   ebx
c001b051:	e8 16 57 fe ff       	call   c000076c <strlen>
c001b056:	83 c4 10             	add    esp,0x10
c001b059:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b05e:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b064:	89 f0                	mov    eax,esi
c001b066:	5b                   	pop    ebx
c001b067:	5e                   	pop    esi
c001b068:	5f                   	pop    edi
c001b069:	c3                   	ret    

c001b06a <Reg::readBool(char*, char*, bool*)>:
c001b06a:	83 ec 20             	sub    esp,0x20
c001b06d:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b071:	50                   	push   eax
c001b072:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b076:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b07a:	e8 7f fe ff ff       	call   c001aefe <Reg::readInt(char*, char*, int*)>
c001b07f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b084:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b088:	0f 95 02             	setne  BYTE PTR [edx]
c001b08b:	83 c4 2c             	add    esp,0x2c
c001b08e:	c3                   	ret    

c001b08f <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b08f:	53                   	push   ebx
c001b090:	83 ec 1c             	sub    esp,0x1c
c001b093:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b097:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b09b:	50                   	push   eax
c001b09c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0a4:	e8 c1 ff ff ff       	call   c001b06a <Reg::readBool(char*, char*, bool*)>
c001b0a9:	83 c4 10             	add    esp,0x10
c001b0ac:	84 c0                	test   al,al
c001b0ae:	74 04                	je     c001b0b4 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b0b0:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b0b4:	88 d8                	mov    al,bl
c001b0b6:	83 c4 18             	add    esp,0x18
c001b0b9:	5b                   	pop    ebx
c001b0ba:	c3                   	ret    

c001b0bb <Reg::readIntWithDefault(char*, char*, int)>:
c001b0bb:	53                   	push   ebx
c001b0bc:	83 ec 1c             	sub    esp,0x1c
c001b0bf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b0c3:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b0c7:	50                   	push   eax
c001b0c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0cc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b0d0:	e8 29 fe ff ff       	call   c001aefe <Reg::readInt(char*, char*, int*)>
c001b0d5:	83 c4 10             	add    esp,0x10
c001b0d8:	84 c0                	test   al,al
c001b0da:	74 04                	je     c001b0e0 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b0dc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b0e0:	89 d8                	mov    eax,ebx
c001b0e2:	83 c4 18             	add    esp,0x18
c001b0e5:	5b                   	pop    ebx
c001b0e6:	c3                   	ret    

c001b0e7 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b0e7:	57                   	push   edi
c001b0e8:	56                   	push   esi
c001b0e9:	56                   	push   esi
c001b0ea:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b0ee:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b0f2:	56                   	push   esi
c001b0f3:	57                   	push   edi
c001b0f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0fc:	e8 e8 fe ff ff       	call   c001afe9 <Reg::readString(char*, char*, char*, int)>
c001b101:	83 c4 10             	add    esp,0x10
c001b104:	84 c0                	test   al,al
c001b106:	75 1a                	jne    c001b122 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b108:	51                   	push   ecx
c001b109:	56                   	push   esi
c001b10a:	6a 00                	push   0x0
c001b10c:	57                   	push   edi
c001b10d:	e8 3e 56 fe ff       	call   c0000750 <memset>
c001b112:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b115:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b119:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b11b:	83 c4 10             	add    esp,0x10
c001b11e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b122:	89 f8                	mov    eax,edi
c001b124:	5a                   	pop    edx
c001b125:	5e                   	pop    esi
c001b126:	5f                   	pop    edi
c001b127:	c3                   	ret    

c001b128 <Sys::eject(regs*)>:
c001b128:	83 ec 0c             	sub    esp,0xc
c001b12b:	83 ca ff             	or     edx,0xffffffff
c001b12e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b132:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b135:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b13a:	83 e9 41             	sub    ecx,0x41
c001b13d:	83 f9 19             	cmp    ecx,0x19
c001b140:	77 18                	ja     c001b15a <Sys::eject(regs*)+0x32>
c001b142:	8b 0c 8d 00 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a00]
c001b149:	85 c9                	test   ecx,ecx
c001b14b:	74 0d                	je     c001b15a <Sys::eject(regs*)+0x32>
c001b14d:	83 ec 0c             	sub    esp,0xc
c001b150:	51                   	push   ecx
c001b151:	e8 8c b0 ff ff       	call   c00161e2 <LogicalDisk::eject()>
c001b156:	83 c4 10             	add    esp,0x10
c001b159:	99                   	cdq    
c001b15a:	83 c4 0c             	add    esp,0xc
c001b15d:	c3                   	ret    

c001b15e <Sys::exit(regs*)>:
c001b15e:	83 ec 18             	sub    esp,0x18
c001b161:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b165:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b168:	e8 7e 38 00 00       	call   c001e9eb <terminateTask(int)>
c001b16d:	83 c8 ff             	or     eax,0xffffffff
c001b170:	83 c4 1c             	add    esp,0x1c
c001b173:	89 c2                	mov    edx,eax
c001b175:	c3                   	ret    

c001b176 <Sys::getCwd(regs*)>:
c001b176:	83 ec 10             	sub    esp,0x10
c001b179:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b17d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b180:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b183:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b188:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b18b:	e8 a0 7a ff ff       	call   c0012c30 <Fs::getcwd(Process*, char*, int)>
c001b190:	83 c4 1c             	add    esp,0x1c
c001b193:	99                   	cdq    
c001b194:	c3                   	ret    

c001b195 <Sys::getPID(regs*)>:
c001b195:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b19a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b19d:	8b 00                	mov    eax,DWORD PTR [eax]
c001b19f:	99                   	cdq    
c001b1a0:	c3                   	ret    

c001b1a1 <Sys::getRAMData(regs*)>:
c001b1a1:	8b 0d 54 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f054
c001b1a7:	6b 05 50 f0 02 c0 64 	imul   eax,DWORD PTR ds:0xc002f050,0x64
c001b1ae:	99                   	cdq    
c001b1af:	f7 f9                	idiv   ecx
c001b1b1:	c1 e0 18             	shl    eax,0x18
c001b1b4:	09 c8                	or     eax,ecx
c001b1b6:	99                   	cdq    
c001b1b7:	c3                   	ret    

c001b1b8 <Sys::getVGAPtr(regs*)>:
c001b1b8:	55                   	push   ebp
c001b1b9:	57                   	push   edi
c001b1ba:	56                   	push   esi
c001b1bb:	53                   	push   ebx
c001b1bc:	83 ec 18             	sub    esp,0x18
c001b1bf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b1c3:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b1c6:	e8 02 33 00 00       	call   c001e4cd <Thr::processFromPID(int)>
c001b1cb:	83 c4 10             	add    esp,0x10
c001b1ce:	89 c1                	mov    ecx,eax
c001b1d0:	b8 01 00 00 00       	mov    eax,0x1
c001b1d5:	85 c9                	test   ecx,ecx
c001b1d7:	74 59                	je     c001b232 <Sys::getVGAPtr(regs*)+0x7a>
c001b1d9:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b1df:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b1e3:	74 0c                	je     c001b1f1 <Sys::getVGAPtr(regs*)+0x39>
c001b1e5:	83 ec 0c             	sub    esp,0xc
c001b1e8:	53                   	push   ebx
c001b1e9:	e8 04 55 ff ff       	call   c00106f2 <setActiveTerminal(VgaText*)>
c001b1ee:	83 c4 10             	add    esp,0x10
c001b1f1:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b1f4:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b1f7:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b1fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1fe:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b201:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b204:	81 c3 82 00 00 00    	add    ebx,0x82
c001b20a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b210:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b213:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b216:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b21c:	50                   	push   eax
c001b21d:	50                   	push   eax
c001b21e:	53                   	push   ebx
c001b21f:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b222:	05 a8 0f 00 00       	add    eax,0xfa8
c001b227:	50                   	push   eax
c001b228:	e8 df 55 fe ff       	call   c000080c <strcpy>
c001b22d:	83 c4 10             	add    esp,0x10
c001b230:	31 c0                	xor    eax,eax
c001b232:	83 c4 0c             	add    esp,0xc
c001b235:	31 d2                	xor    edx,edx
c001b237:	5b                   	pop    ebx
c001b238:	5e                   	pop    esi
c001b239:	5f                   	pop    edi
c001b23a:	5d                   	pop    ebp
c001b23b:	c3                   	ret    

c001b23c <Sys::loadDLL(regs*)>:
c001b23c:	56                   	push   esi
c001b23d:	53                   	push   ebx
c001b23e:	31 d2                	xor    edx,edx
c001b240:	51                   	push   ecx
c001b241:	b8 01 00 00 00       	mov    eax,0x1
c001b246:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b24a:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b24e:	0f 84 8c 00 00 00    	je     c001b2e0 <Sys::loadDLL(regs*)+0xa4>
c001b254:	83 ec 0c             	sub    esp,0xc
c001b257:	68 14 01 00 00       	push   0x114
c001b25c:	e8 2b 46 ff ff       	call   c000f88c <malloc>
c001b261:	83 c4 0c             	add    esp,0xc
c001b264:	89 c3                	mov    ebx,eax
c001b266:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b26b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b26e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b271:	53                   	push   ebx
c001b272:	e8 b7 7b ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001b277:	83 c4 10             	add    esp,0x10
c001b27a:	31 d2                	xor    edx,edx
c001b27c:	b8 02 00 00 00       	mov    eax,0x2
c001b281:	85 db                	test   ebx,ebx
c001b283:	74 5b                	je     c001b2e0 <Sys::loadDLL(regs*)+0xa4>
c001b285:	83 ec 0c             	sub    esp,0xc
c001b288:	53                   	push   ebx
c001b289:	e8 72 7e ff ff       	call   c0013100 <File::exists()>
c001b28e:	83 c4 10             	add    esp,0x10
c001b291:	84 c0                	test   al,al
c001b293:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b295:	75 11                	jne    c001b2a8 <Sys::loadDLL(regs*)+0x6c>
c001b297:	83 ec 0c             	sub    esp,0xc
c001b29a:	53                   	push   ebx
c001b29b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b29e:	83 c4 10             	add    esp,0x10
c001b2a1:	b8 03 00 00 00       	mov    eax,0x3
c001b2a6:	eb 36                	jmp    c001b2de <Sys::loadDLL(regs*)+0xa2>
c001b2a8:	83 ec 0c             	sub    esp,0xc
c001b2ab:	53                   	push   ebx
c001b2ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2af:	58                   	pop    eax
c001b2b0:	5a                   	pop    edx
c001b2b1:	6a 00                	push   0x0
c001b2b3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b2b6:	e8 1e 24 00 00       	call   c001d6d9 <Thr::loadDLL(char const*, bool)>
c001b2bb:	83 c4 10             	add    esp,0x10
c001b2be:	89 c1                	mov    ecx,eax
c001b2c0:	31 d2                	xor    edx,edx
c001b2c2:	b8 04 00 00 00       	mov    eax,0x4
c001b2c7:	85 c9                	test   ecx,ecx
c001b2c9:	74 15                	je     c001b2e0 <Sys::loadDLL(regs*)+0xa4>
c001b2cb:	53                   	push   ebx
c001b2cc:	53                   	push   ebx
c001b2cd:	ff 35 08 f0 02 c0    	push   DWORD PTR ds:0xc002f008
c001b2d3:	51                   	push   ecx
c001b2d4:	e8 2b 26 00 00       	call   c001d904 <Thr::executeDLL(unsigned long, void*)>
c001b2d9:	83 c4 10             	add    esp,0x10
c001b2dc:	31 c0                	xor    eax,eax
c001b2de:	31 d2                	xor    edx,edx
c001b2e0:	59                   	pop    ecx
c001b2e1:	5b                   	pop    ebx
c001b2e2:	5e                   	pop    esi
c001b2e3:	c3                   	ret    

c001b2e4 <Sys::read(regs*)>:
c001b2e4:	57                   	push   edi
c001b2e5:	56                   	push   esi
c001b2e6:	53                   	push   ebx
c001b2e7:	83 ec 10             	sub    esp,0x10
c001b2ea:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b2ee:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b2f1:	83 f8 02             	cmp    eax,0x2
c001b2f4:	77 10                	ja     c001b306 <Sys::read(regs*)+0x22>
c001b2f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2fe:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b304:	eb 0e                	jmp    c001b314 <Sys::read(regs*)+0x30>
c001b306:	83 ec 0c             	sub    esp,0xc
c001b309:	50                   	push   eax
c001b30a:	e8 64 60 ff ff       	call   c0011373 <getFromFileDescriptor(int)>
c001b30f:	83 c4 10             	add    esp,0x10
c001b312:	89 c1                	mov    ecx,eax
c001b314:	83 c8 ff             	or     eax,0xffffffff
c001b317:	85 c9                	test   ecx,ecx
c001b319:	89 c2                	mov    edx,eax
c001b31b:	74 28                	je     c001b345 <Sys::read(regs*)+0x61>
c001b31d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b325:	31 ff                	xor    edi,edi
c001b327:	83 ec 0c             	sub    esp,0xc
c001b32a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b32c:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b330:	52                   	push   edx
c001b331:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b334:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b337:	57                   	push   edi
c001b338:	56                   	push   esi
c001b339:	51                   	push   ecx
c001b33a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b33d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b341:	83 c4 20             	add    esp,0x20
c001b344:	99                   	cdq    
c001b345:	83 c4 10             	add    esp,0x10
c001b348:	5b                   	pop    ebx
c001b349:	5e                   	pop    esi
c001b34a:	5f                   	pop    edi
c001b34b:	c3                   	ret    

c001b34c <Sys::sbrk(regs*)>:
c001b34c:	56                   	push   esi
c001b34d:	53                   	push   ebx
c001b34e:	50                   	push   eax
c001b34f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b354:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b358:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b35b:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b35e:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b364:	85 db                	test   ebx,ebx
c001b366:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b369:	74 02                	je     c001b36d <Sys::sbrk(regs*)+0x21>
c001b36b:	79 06                	jns    c001b373 <Sys::sbrk(regs*)+0x27>
c001b36d:	89 f0                	mov    eax,esi
c001b36f:	31 d2                	xor    edx,edx
c001b371:	eb 2a                	jmp    c001b39d <Sys::sbrk(regs*)+0x51>
c001b373:	83 c8 ff             	or     eax,0xffffffff
c001b376:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b37c:	89 c2                	mov    edx,eax
c001b37e:	77 1d                	ja     c001b39d <Sys::sbrk(regs*)+0x51>
c001b380:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b386:	50                   	push   eax
c001b387:	c1 ea 0c             	shr    edx,0xc
c001b38a:	68 07 0c 00 00       	push   0xc07
c001b38f:	52                   	push   edx
c001b390:	51                   	push   ecx
c001b391:	e8 6c 6a ff ff       	call   c0011e02 <VAS::allocatePages(int, int)>
c001b396:	89 f0                	mov    eax,esi
c001b398:	31 d2                	xor    edx,edx
c001b39a:	83 c4 10             	add    esp,0x10
c001b39d:	59                   	pop    ecx
c001b39e:	5b                   	pop    ebx
c001b39f:	5e                   	pop    esi
c001b3a0:	c3                   	ret    

c001b3a1 <Sys::setCwd(regs*)>:
c001b3a1:	83 ec 14             	sub    esp,0x14
c001b3a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b3a8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b3ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3b0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3b3:	e8 e7 7d ff ff       	call   c001319f <Fs::setcwd(Process*, char*)>
c001b3b8:	83 c4 1c             	add    esp,0x1c
c001b3bb:	99                   	cdq    
c001b3bc:	c3                   	ret    

c001b3bd <Sys::setTime(regs*)>:
c001b3bd:	55                   	push   ebp
c001b3be:	31 d2                	xor    edx,edx
c001b3c0:	57                   	push   edi
c001b3c1:	bf 18 00 00 00       	mov    edi,0x18
c001b3c6:	56                   	push   esi
c001b3c7:	53                   	push   ebx
c001b3c8:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b3cd:	83 ec 30             	sub    esp,0x30
c001b3d0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b3d4:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b3d7:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b3da:	f7 f3                	div    ebx
c001b3dc:	89 d6                	mov    esi,edx
c001b3de:	31 d2                	xor    edx,edx
c001b3e0:	f7 f3                	div    ebx
c001b3e2:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b3e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b3e9:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b3ee:	31 d2                	xor    edx,edx
c001b3f0:	f7 f3                	div    ebx
c001b3f2:	31 d2                	xor    edx,edx
c001b3f4:	bb 0c 00 00 00       	mov    ebx,0xc
c001b3f9:	f7 f7                	div    edi
c001b3fb:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b3fe:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b402:	0f b7 cd             	movzx  ecx,bp
c001b405:	56                   	push   esi
c001b406:	89 c7                	mov    edi,eax
c001b408:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b40c:	c1 e6 10             	shl    esi,0x10
c001b40f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b413:	83 e7 1f             	and    edi,0x1f
c001b416:	51                   	push   ecx
c001b417:	47                   	inc    edi
c001b418:	c1 e8 05             	shr    eax,0x5
c001b41b:	31 d2                	xor    edx,edx
c001b41d:	f7 f3                	div    ebx
c001b41f:	31 db                	xor    ebx,ebx
c001b421:	52                   	push   edx
c001b422:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b426:	57                   	push   edi
c001b427:	68 a9 c6 02 c0       	push   0xc002c6a9
c001b42c:	e8 9e 74 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001b431:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b435:	89 f8                	mov    eax,edi
c001b437:	31 c9                	xor    ecx,ecx
c001b439:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b43d:	88 c1                	mov    cl,al
c001b43f:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b445:	88 d5                	mov    ch,dl
c001b447:	c1 e0 10             	shl    eax,0x10
c001b44a:	0f b7 d1             	movzx  edx,cx
c001b44d:	09 c2                	or     edx,eax
c001b44f:	89 d8                	mov    eax,ebx
c001b451:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b456:	09 f0                	or     eax,esi
c001b458:	89 c3                	mov    ebx,eax
c001b45a:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b45e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b462:	83 c4 18             	add    esp,0x18
c001b465:	53                   	push   ebx
c001b466:	52                   	push   edx
c001b467:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b46b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b46f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b473:	e8 49 84 ff ff       	call   c00138c1 <datetimeToSeconds(datetime_t)>
c001b478:	83 c4 0c             	add    esp,0xc
c001b47b:	52                   	push   edx
c001b47c:	50                   	push   eax
c001b47d:	56                   	push   esi
c001b47e:	e8 c5 85 ff ff       	call   c0013a48 <secondsToDatetime(unsigned long long)>
c001b483:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b487:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b48b:	51                   	push   ecx
c001b48c:	89 d6                	mov    esi,edx
c001b48e:	51                   	push   ecx
c001b48f:	c1 ee 10             	shr    esi,0x10
c001b492:	89 f3                	mov    ebx,esi
c001b494:	0f b6 f3             	movzx  esi,bl
c001b497:	56                   	push   esi
c001b498:	0f b6 f6             	movzx  esi,dh
c001b49b:	0f b6 d2             	movzx  edx,dl
c001b49e:	56                   	push   esi
c001b49f:	52                   	push   edx
c001b4a0:	89 c2                	mov    edx,eax
c001b4a2:	c1 ea 10             	shr    edx,0x10
c001b4a5:	52                   	push   edx
c001b4a6:	0f b6 d4             	movzx  edx,ah
c001b4a9:	0f b6 c0             	movzx  eax,al
c001b4ac:	52                   	push   edx
c001b4ad:	50                   	push   eax
c001b4ae:	68 c5 c6 02 c0       	push   0xc002c6c5
c001b4b3:	e8 17 74 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001b4b8:	83 c4 2c             	add    esp,0x2c
c001b4bb:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001b4c0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b4c4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b4c8:	53                   	push   ebx
c001b4c9:	51                   	push   ecx
c001b4ca:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b4d0:	e8 13 85 ff ff       	call   c00139e8 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b4d5:	83 f0 01             	xor    eax,0x1
c001b4d8:	31 d2                	xor    edx,edx
c001b4da:	0f b6 c0             	movzx  eax,al
c001b4dd:	83 c4 3c             	add    esp,0x3c
c001b4e0:	5b                   	pop    ebx
c001b4e1:	5e                   	pop    esi
c001b4e2:	5f                   	pop    edi
c001b4e3:	5d                   	pop    ebp
c001b4e4:	c3                   	ret    

c001b4e5 <Sys::timezone(regs*)>:
c001b4e5:	53                   	push   ebx
c001b4e6:	83 ec 08             	sub    esp,0x8
c001b4e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4ed:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b4f1:	75 17                	jne    c001b50a <Sys::timezone(regs*)+0x25>
c001b4f3:	83 ec 0c             	sub    esp,0xc
c001b4f6:	68 e1 c6 02 c0       	push   0xc002c6e1
c001b4fb:	e8 cf 73 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001b500:	83 c8 ff             	or     eax,0xffffffff
c001b503:	83 c4 10             	add    esp,0x10
c001b506:	89 c2                	mov    edx,eax
c001b508:	eb 20                	jmp    c001b52a <Sys::timezone(regs*)+0x45>
c001b50a:	83 ec 0c             	sub    esp,0xc
c001b50d:	68 19 c7 02 c0       	push   0xc002c719
c001b512:	e8 b8 73 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001b517:	58                   	pop    eax
c001b518:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b51b:	e8 2a 82 ff ff       	call   c001374a <User::loadClockSettings(int)>
c001b520:	83 c4 10             	add    esp,0x10
c001b523:	b8 01 00 00 00       	mov    eax,0x1
c001b528:	31 d2                	xor    edx,edx
c001b52a:	83 c4 08             	add    esp,0x8
c001b52d:	5b                   	pop    ebx
c001b52e:	c3                   	ret    

c001b52f <Sys::write(regs*)>:
c001b52f:	57                   	push   edi
c001b530:	56                   	push   esi
c001b531:	53                   	push   ebx
c001b532:	83 ec 10             	sub    esp,0x10
c001b535:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b539:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b53c:	83 f8 02             	cmp    eax,0x2
c001b53f:	77 10                	ja     c001b551 <Sys::write(regs*)+0x22>
c001b541:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b546:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b549:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b54f:	eb 0e                	jmp    c001b55f <Sys::write(regs*)+0x30>
c001b551:	83 ec 0c             	sub    esp,0xc
c001b554:	50                   	push   eax
c001b555:	e8 19 5e ff ff       	call   c0011373 <getFromFileDescriptor(int)>
c001b55a:	83 c4 10             	add    esp,0x10
c001b55d:	89 c1                	mov    ecx,eax
c001b55f:	83 c8 ff             	or     eax,0xffffffff
c001b562:	85 c9                	test   ecx,ecx
c001b564:	89 c2                	mov    edx,eax
c001b566:	74 28                	je     c001b590 <Sys::write(regs*)+0x61>
c001b568:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b570:	31 ff                	xor    edi,edi
c001b572:	83 ec 0c             	sub    esp,0xc
c001b575:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b577:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b57b:	52                   	push   edx
c001b57c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b57f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b582:	57                   	push   edi
c001b583:	56                   	push   esi
c001b584:	51                   	push   ecx
c001b585:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b588:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b58c:	83 c4 20             	add    esp,0x20
c001b58f:	99                   	cdq    
c001b590:	83 c4 10             	add    esp,0x10
c001b593:	5b                   	pop    ebx
c001b594:	5e                   	pop    esi
c001b595:	5f                   	pop    edi
c001b596:	c3                   	ret    

c001b597 <Sys::wsbe(regs*)>:
c001b597:	57                   	push   edi
c001b598:	b9 0b 00 00 00       	mov    ecx,0xb
c001b59d:	56                   	push   esi
c001b59e:	be 58 c7 02 c0       	mov    esi,0xc002c758
c001b5a3:	53                   	push   ebx
c001b5a4:	83 ec 30             	sub    esp,0x30
c001b5a7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b5ab:	fc                   	cld    
c001b5ac:	83 ec 0c             	sub    esp,0xc
c001b5af:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b5b1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b5b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5ba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5bd:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b5c3:	8b 06                	mov    eax,DWORD PTR [esi]
c001b5c5:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b5c8:	57                   	push   edi
c001b5c9:	e8 9e 51 fe ff       	call   c000076c <strlen>
c001b5ce:	5a                   	pop    edx
c001b5cf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b5d3:	52                   	push   edx
c001b5d4:	31 d2                	xor    edx,edx
c001b5d6:	57                   	push   edi
c001b5d7:	52                   	push   edx
c001b5d8:	50                   	push   eax
c001b5d9:	56                   	push   esi
c001b5da:	ff d3                	call   ebx
c001b5dc:	83 c4 14             	add    esp,0x14
c001b5df:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b5e3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b5e6:	e8 00 34 00 00       	call   c001e9eb <terminateTask(int)>
c001b5eb:	83 c4 40             	add    esp,0x40
c001b5ee:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b5f3:	5b                   	pop    ebx
c001b5f4:	31 d2                	xor    edx,edx
c001b5f6:	5e                   	pop    esi
c001b5f7:	5f                   	pop    edi
c001b5f8:	c3                   	ret    

c001b5f9 <Sys::yield(regs*)>:
c001b5f9:	57                   	push   edi
c001b5fa:	56                   	push   esi
c001b5fb:	53                   	push   ebx
c001b5fc:	fa                   	cli    
c001b5fd:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001b603:	e8 b0 2a 00 00       	call   c001e0b8 <schedule()>
c001b608:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001b60d:	48                   	dec    eax
c001b60e:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001b613:	75 01                	jne    c001b616 <Sys::yield(regs*)+0x1d>
c001b615:	fb                   	sti    
c001b616:	8b 35 70 f6 02 c0    	mov    esi,DWORD PTR ds:0xc002f670
c001b61c:	8b 3d 74 f6 02 c0    	mov    edi,DWORD PTR ds:0xc002f674
c001b622:	89 f0                	mov    eax,esi
c001b624:	89 fb                	mov    ebx,edi
c001b626:	89 f1                	mov    ecx,esi
c001b628:	c1 e0 07             	shl    eax,0x7
c001b62b:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b62f:	25 80 30 0f 00       	and    eax,0xf3080
c001b634:	c1 eb 17             	shr    ebx,0x17
c001b637:	31 c8                	xor    eax,ecx
c001b639:	89 da                	mov    edx,ebx
c001b63b:	5b                   	pop    ebx
c001b63c:	5e                   	pop    esi
c001b63d:	5f                   	pop    edi
c001b63e:	c3                   	ret    

c001b63f <sysCallSeekDir(regs*)>:
c001b63f:	31 c0                	xor    eax,eax
c001b641:	31 d2                	xor    edx,edx
c001b643:	c3                   	ret    

c001b644 <sysCallTellDir(regs*)>:
c001b644:	31 c0                	xor    eax,eax
c001b646:	31 d2                	xor    edx,edx
c001b648:	c3                   	ret    

c001b649 <sysCallVerify(regs*)>:
c001b649:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b64d:	31 d2                	xor    edx,edx
c001b64f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b652:	c3                   	ret    

c001b653 <sysFormatDisk(regs*)>:
c001b653:	56                   	push   esi
c001b654:	53                   	push   ebx
c001b655:	53                   	push   ebx
c001b656:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b65a:	8b 1d 74 f1 02 c0    	mov    ebx,DWORD PTR ds:0xc002f174
c001b660:	eb 25                	jmp    c001b687 <sysFormatDisk(regs*)+0x34>
c001b662:	83 ec 0c             	sub    esp,0xc
c001b665:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b668:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b66a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b66d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b670:	50                   	push   eax
c001b671:	ff 34 85 00 f6 02 c0 	push   DWORD PTR [eax*4-0x3ffd0a00]
c001b678:	53                   	push   ebx
c001b679:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b67c:	83 c4 20             	add    esp,0x20
c001b67f:	83 f8 08             	cmp    eax,0x8
c001b682:	75 12                	jne    c001b696 <sysFormatDisk(regs*)+0x43>
c001b684:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b687:	85 db                	test   ebx,ebx
c001b689:	75 d7                	jne    c001b662 <sysFormatDisk(regs*)+0xf>
c001b68b:	59                   	pop    ecx
c001b68c:	b8 03 00 00 00       	mov    eax,0x3
c001b691:	31 d2                	xor    edx,edx
c001b693:	5b                   	pop    ebx
c001b694:	5e                   	pop    esi
c001b695:	c3                   	ret    
c001b696:	85 c0                	test   eax,eax
c001b698:	74 1b                	je     c001b6b5 <sysFormatDisk(regs*)+0x62>
c001b69a:	83 f8 09             	cmp    eax,0x9
c001b69d:	74 0b                	je     c001b6aa <sysFormatDisk(regs*)+0x57>
c001b69f:	59                   	pop    ecx
c001b6a0:	b8 02 00 00 00       	mov    eax,0x2
c001b6a5:	31 d2                	xor    edx,edx
c001b6a7:	5b                   	pop    ebx
c001b6a8:	5e                   	pop    esi
c001b6a9:	c3                   	ret    
c001b6aa:	59                   	pop    ecx
c001b6ab:	b8 01 00 00 00       	mov    eax,0x1
c001b6b0:	31 d2                	xor    edx,edx
c001b6b2:	5b                   	pop    ebx
c001b6b3:	5e                   	pop    esi
c001b6b4:	c3                   	ret    
c001b6b5:	59                   	pop    ecx
c001b6b6:	31 c0                	xor    eax,eax
c001b6b8:	31 d2                	xor    edx,edx
c001b6ba:	5b                   	pop    ebx
c001b6bb:	5e                   	pop    esi
c001b6bc:	c3                   	ret    

c001b6bd <sysSetDiskVolumeLabel(regs*)>:
c001b6bd:	56                   	push   esi
c001b6be:	53                   	push   ebx
c001b6bf:	53                   	push   ebx
c001b6c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b6c4:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b6c7:	83 f8 19             	cmp    eax,0x19
c001b6ca:	77 29                	ja     c001b6f5 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6cc:	8b 0c 85 00 f6 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0a00]
c001b6d3:	85 c9                	test   ecx,ecx
c001b6d5:	74 1e                	je     c001b6f5 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6d7:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b6da:	85 d2                	test   edx,edx
c001b6dc:	74 17                	je     c001b6f5 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b6de:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b6e4:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b6e6:	52                   	push   edx
c001b6e7:	50                   	push   eax
c001b6e8:	51                   	push   ecx
c001b6e9:	53                   	push   ebx
c001b6ea:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b6ed:	83 c4 10             	add    esp,0x10
c001b6f0:	99                   	cdq    
c001b6f1:	59                   	pop    ecx
c001b6f2:	5b                   	pop    ebx
c001b6f3:	5e                   	pop    esi
c001b6f4:	c3                   	ret    
c001b6f5:	59                   	pop    ecx
c001b6f6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b6fb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b700:	5b                   	pop    ebx
c001b701:	5e                   	pop    esi
c001b702:	c3                   	ret    

c001b703 <sysGetDiskVolumeLabel(regs*)>:
c001b703:	57                   	push   edi
c001b704:	56                   	push   esi
c001b705:	53                   	push   ebx
c001b706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b70a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b70d:	83 fa 19             	cmp    edx,0x19
c001b710:	77 34                	ja     c001b746 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b712:	8b 0c 95 00 f6 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0a00]
c001b719:	85 c9                	test   ecx,ecx
c001b71b:	74 29                	je     c001b746 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b71d:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b720:	85 db                	test   ebx,ebx
c001b722:	74 22                	je     c001b746 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b727:	85 c0                	test   eax,eax
c001b729:	74 1b                	je     c001b746 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b72b:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b731:	83 ec 0c             	sub    esp,0xc
c001b734:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b736:	50                   	push   eax
c001b737:	53                   	push   ebx
c001b738:	52                   	push   edx
c001b739:	51                   	push   ecx
c001b73a:	56                   	push   esi
c001b73b:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b73e:	83 c4 20             	add    esp,0x20
c001b741:	99                   	cdq    
c001b742:	5b                   	pop    ebx
c001b743:	5e                   	pop    esi
c001b744:	5f                   	pop    edi
c001b745:	c3                   	ret    
c001b746:	5b                   	pop    ebx
c001b747:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b74c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b751:	5e                   	pop    esi
c001b752:	5f                   	pop    edi
c001b753:	c3                   	ret    

c001b754 <sysShutdown(regs*)>:
c001b754:	83 ec 0c             	sub    esp,0xc
c001b757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b75b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b75e:	85 c0                	test   eax,eax
c001b760:	74 18                	je     c001b77a <sysShutdown(regs*)+0x26>
c001b762:	83 f8 01             	cmp    eax,0x1
c001b765:	74 38                	je     c001b79f <sysShutdown(regs*)+0x4b>
c001b767:	83 f8 02             	cmp    eax,0x2
c001b76a:	74 24                	je     c001b790 <sysShutdown(regs*)+0x3c>
c001b76c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b771:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b776:	83 c4 0c             	add    esp,0xc
c001b779:	c3                   	ret    
c001b77a:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001b77f:	8b 10                	mov    edx,DWORD PTR [eax]
c001b781:	6a 00                	push   0x0
c001b783:	6a 00                	push   0x0
c001b785:	6a 00                	push   0x0
c001b787:	50                   	push   eax
c001b788:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b78b:	83 c4 10             	add    esp,0x10
c001b78e:	eb dc                	jmp    c001b76c <sysShutdown(regs*)+0x18>
c001b790:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001b795:	8b 10                	mov    edx,DWORD PTR [eax]
c001b797:	6a 00                	push   0x0
c001b799:	6a 00                	push   0x0
c001b79b:	6a 01                	push   0x1
c001b79d:	eb e8                	jmp    c001b787 <sysShutdown(regs*)+0x33>
c001b79f:	a1 a0 16 03 c0       	mov    eax,ds:0xc00316a0
c001b7a4:	85 c0                	test   eax,eax
c001b7a6:	74 02                	je     c001b7aa <sysShutdown(regs*)+0x56>
c001b7a8:	ff d0                	call   eax
c001b7aa:	31 c0                	xor    eax,eax
c001b7ac:	31 d2                	xor    edx,edx
c001b7ae:	83 c4 0c             	add    esp,0xc
c001b7b1:	c3                   	ret    

c001b7b2 <sysCallRealpath(regs*)>:
c001b7b2:	83 ec 0c             	sub    esp,0xc
c001b7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7b9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b7bc:	85 d2                	test   edx,edx
c001b7be:	74 07                	je     c001b7c7 <sysCallRealpath(regs*)+0x15>
c001b7c0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b7c3:	85 c0                	test   eax,eax
c001b7c5:	75 0b                	jne    c001b7d2 <sysCallRealpath(regs*)+0x20>
c001b7c7:	b8 01 00 00 00       	mov    eax,0x1
c001b7cc:	31 d2                	xor    edx,edx
c001b7ce:	83 c4 0c             	add    esp,0xc
c001b7d1:	c3                   	ret    
c001b7d2:	51                   	push   ecx
c001b7d3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b7d9:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b7dc:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b7e2:	51                   	push   ecx
c001b7e3:	52                   	push   edx
c001b7e4:	50                   	push   eax
c001b7e5:	e8 9a 74 ff ff       	call   c0012c84 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b7ea:	83 c4 10             	add    esp,0x10
c001b7ed:	31 c0                	xor    eax,eax
c001b7ef:	31 d2                	xor    edx,edx
c001b7f1:	83 c4 0c             	add    esp,0xc
c001b7f4:	c3                   	ret    

c001b7f5 <sysCallGetArgc(regs*)>:
c001b7f5:	83 ec 14             	sub    esp,0x14
c001b7f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7fd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b800:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b806:	68 84 c7 02 c0       	push   0xc002c784
c001b80b:	e8 bf 70 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001b810:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b815:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b818:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b81e:	83 c4 1c             	add    esp,0x1c
c001b821:	99                   	cdq    
c001b822:	c3                   	ret    

c001b823 <sysCallReadDir(regs*)>:
c001b823:	53                   	push   ebx
c001b824:	83 ec 18             	sub    esp,0x18
c001b827:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b82b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b82e:	83 f8 02             	cmp    eax,0x2
c001b831:	76 53                	jbe    c001b886 <sysCallReadDir(regs*)+0x63>
c001b833:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b836:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b83c:	77 4f                	ja     c001b88d <sysCallReadDir(regs*)+0x6a>
c001b83e:	83 ec 0c             	sub    esp,0xc
c001b841:	50                   	push   eax
c001b842:	e8 2c 5b ff ff       	call   c0011373 <getFromFileDescriptor(int)>
c001b847:	83 c4 10             	add    esp,0x10
c001b84a:	85 c0                	test   eax,eax
c001b84c:	74 50                	je     c001b89e <sysCallReadDir(regs*)+0x7b>
c001b84e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b856:	83 ec 0c             	sub    esp,0xc
c001b859:	8b 10                	mov    edx,DWORD PTR [eax]
c001b85b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b85f:	51                   	push   ecx
c001b860:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b863:	6a 00                	push   0x0
c001b865:	68 10 01 00 00       	push   0x110
c001b86a:	50                   	push   eax
c001b86b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b86e:	83 c4 20             	add    esp,0x20
c001b871:	85 c0                	test   eax,eax
c001b873:	74 38                	je     c001b8ad <sysCallReadDir(regs*)+0x8a>
c001b875:	83 f8 07             	cmp    eax,0x7
c001b878:	74 0c                	je     c001b886 <sysCallReadDir(regs*)+0x63>
c001b87a:	b8 02 00 00 00       	mov    eax,0x2
c001b87f:	31 d2                	xor    edx,edx
c001b881:	83 c4 18             	add    esp,0x18
c001b884:	5b                   	pop    ebx
c001b885:	c3                   	ret    
c001b886:	b8 01 00 00 00       	mov    eax,0x1
c001b88b:	eb f2                	jmp    c001b87f <sysCallReadDir(regs*)+0x5c>
c001b88d:	83 ec 08             	sub    esp,0x8
c001b890:	52                   	push   edx
c001b891:	68 a8 c8 02 c0       	push   0xc002c8a8
c001b896:	e8 34 70 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001b89b:	83 c4 10             	add    esp,0x10
c001b89e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8a8:	83 c4 18             	add    esp,0x18
c001b8ab:	5b                   	pop    ebx
c001b8ac:	c3                   	ret    
c001b8ad:	31 c0                	xor    eax,eax
c001b8af:	eb ce                	jmp    c001b87f <sysCallReadDir(regs*)+0x5c>

c001b8b1 <sysCallIsATTY(regs*)>:
c001b8b1:	83 ec 0c             	sub    esp,0xc
c001b8b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8b8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b8bb:	83 f8 02             	cmp    eax,0x2
c001b8be:	76 07                	jbe    c001b8c7 <sysCallIsATTY(regs*)+0x16>
c001b8c0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b8c5:	75 26                	jne    c001b8ed <sysCallIsATTY(regs*)+0x3c>
c001b8c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8cc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8cf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b8d5:	85 c0                	test   eax,eax
c001b8d7:	74 24                	je     c001b8fd <sysCallIsATTY(regs*)+0x4c>
c001b8d9:	83 ec 0c             	sub    esp,0xc
c001b8dc:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8de:	50                   	push   eax
c001b8df:	ff 12                	call   DWORD PTR [edx]
c001b8e1:	31 d2                	xor    edx,edx
c001b8e3:	0f b6 c0             	movzx  eax,al
c001b8e6:	83 c4 10             	add    esp,0x10
c001b8e9:	83 c4 0c             	add    esp,0xc
c001b8ec:	c3                   	ret    
c001b8ed:	83 ec 0c             	sub    esp,0xc
c001b8f0:	50                   	push   eax
c001b8f1:	e8 7d 5a ff ff       	call   c0011373 <getFromFileDescriptor(int)>
c001b8f6:	83 c4 10             	add    esp,0x10
c001b8f9:	85 c0                	test   eax,eax
c001b8fb:	75 dc                	jne    c001b8d9 <sysCallIsATTY(regs*)+0x28>
c001b8fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b902:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b907:	83 c4 0c             	add    esp,0xc
c001b90a:	c3                   	ret    

c001b90b <sysCallSeek(regs*)>:
c001b90b:	53                   	push   ebx
c001b90c:	83 ec 08             	sub    esp,0x8
c001b90f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b913:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b916:	83 f8 02             	cmp    eax,0x2
c001b919:	76 4a                	jbe    c001b965 <sysCallSeek(regs*)+0x5a>
c001b91b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b920:	77 32                	ja     c001b954 <sysCallSeek(regs*)+0x49>
c001b922:	83 ec 0c             	sub    esp,0xc
c001b925:	50                   	push   eax
c001b926:	e8 48 5a ff ff       	call   c0011373 <getFromFileDescriptor(int)>
c001b92b:	83 c4 0c             	add    esp,0xc
c001b92e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b931:	31 db                	xor    ebx,ebx
c001b933:	53                   	push   ebx
c001b934:	51                   	push   ecx
c001b935:	50                   	push   eax
c001b936:	e8 15 76 ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001b93b:	83 c4 10             	add    esp,0x10
c001b93e:	85 c0                	test   eax,eax
c001b940:	0f 95 c0             	setne  al
c001b943:	31 d2                	xor    edx,edx
c001b945:	0f b6 c0             	movzx  eax,al
c001b948:	f7 d8                	neg    eax
c001b94a:	83 d2 00             	adc    edx,0x0
c001b94d:	83 c4 08             	add    esp,0x8
c001b950:	f7 da                	neg    edx
c001b952:	5b                   	pop    ebx
c001b953:	c3                   	ret    
c001b954:	83 ec 08             	sub    esp,0x8
c001b957:	50                   	push   eax
c001b958:	68 8f c7 02 c0       	push   0xc002c78f
c001b95d:	e8 6d 6f ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001b962:	83 c4 10             	add    esp,0x10
c001b965:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b96a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b96f:	83 c4 08             	add    esp,0x8
c001b972:	5b                   	pop    ebx
c001b973:	c3                   	ret    

c001b974 <sysCallTell(regs*)>:
c001b974:	53                   	push   ebx
c001b975:	83 ec 08             	sub    esp,0x8
c001b978:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b97c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b97f:	83 f8 02             	cmp    eax,0x2
c001b982:	76 5e                	jbe    c001b9e2 <sysCallTell(regs*)+0x6e>
c001b984:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b989:	77 2d                	ja     c001b9b8 <sysCallTell(regs*)+0x44>
c001b98b:	83 ec 0c             	sub    esp,0xc
c001b98e:	50                   	push   eax
c001b98f:	e8 df 59 ff ff       	call   c0011373 <getFromFileDescriptor(int)>
c001b994:	5a                   	pop    edx
c001b995:	59                   	pop    ecx
c001b996:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b999:	50                   	push   eax
c001b99a:	e8 07 76 ff ff       	call   c0012fa6 <File::tell(unsigned long long*)>
c001b99f:	83 c4 10             	add    esp,0x10
c001b9a2:	85 c0                	test   eax,eax
c001b9a4:	0f 95 c0             	setne  al
c001b9a7:	31 d2                	xor    edx,edx
c001b9a9:	0f b6 c0             	movzx  eax,al
c001b9ac:	f7 d8                	neg    eax
c001b9ae:	83 d2 00             	adc    edx,0x0
c001b9b1:	83 c4 08             	add    esp,0x8
c001b9b4:	f7 da                	neg    edx
c001b9b6:	5b                   	pop    ebx
c001b9b7:	c3                   	ret    
c001b9b8:	83 ec 08             	sub    esp,0x8
c001b9bb:	50                   	push   eax
c001b9bc:	68 a9 c7 02 c0       	push   0xc002c7a9
c001b9c1:	e8 09 6f ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001b9c6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b9c9:	83 c4 10             	add    esp,0x10
c001b9cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b9d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b9d9:	31 d2                	xor    edx,edx
c001b9db:	31 c0                	xor    eax,eax
c001b9dd:	83 c4 08             	add    esp,0x8
c001b9e0:	5b                   	pop    ebx
c001b9e1:	c3                   	ret    
c001b9e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9e7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9ec:	83 c4 08             	add    esp,0x8
c001b9ef:	5b                   	pop    ebx
c001b9f0:	c3                   	ret    

c001b9f1 <sysCallSize(regs*)>:
c001b9f1:	53                   	push   ebx
c001b9f2:	83 ec 18             	sub    esp,0x18
c001b9f5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b9f9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9fc:	83 f8 02             	cmp    eax,0x2
c001b9ff:	76 64                	jbe    c001ba65 <sysCallSize(regs*)+0x74>
c001ba01:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba06:	77 33                	ja     c001ba3b <sysCallSize(regs*)+0x4a>
c001ba08:	83 ec 0c             	sub    esp,0xc
c001ba0b:	50                   	push   eax
c001ba0c:	e8 62 59 ff ff       	call   c0011373 <getFromFileDescriptor(int)>
c001ba11:	83 c4 0c             	add    esp,0xc
c001ba14:	8d 54 24 13          	lea    edx,[esp+0x13]
c001ba18:	52                   	push   edx
c001ba19:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001ba1c:	50                   	push   eax
c001ba1d:	e8 1c 77 ff ff       	call   c001313e <File::stat(unsigned long long*, bool*)>
c001ba22:	83 c4 10             	add    esp,0x10
c001ba25:	85 c0                	test   eax,eax
c001ba27:	0f 95 c0             	setne  al
c001ba2a:	31 d2                	xor    edx,edx
c001ba2c:	0f b6 c0             	movzx  eax,al
c001ba2f:	f7 d8                	neg    eax
c001ba31:	83 d2 00             	adc    edx,0x0
c001ba34:	83 c4 18             	add    esp,0x18
c001ba37:	f7 da                	neg    edx
c001ba39:	5b                   	pop    ebx
c001ba3a:	c3                   	ret    
c001ba3b:	83 ec 08             	sub    esp,0x8
c001ba3e:	50                   	push   eax
c001ba3f:	68 c3 c7 02 c0       	push   0xc002c7c3
c001ba44:	e8 86 6e ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001ba49:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ba4c:	83 c4 10             	add    esp,0x10
c001ba4f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba55:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba5c:	31 d2                	xor    edx,edx
c001ba5e:	31 c0                	xor    eax,eax
c001ba60:	83 c4 18             	add    esp,0x18
c001ba63:	5b                   	pop    ebx
c001ba64:	c3                   	ret    
c001ba65:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba6a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba6f:	83 c4 18             	add    esp,0x18
c001ba72:	5b                   	pop    ebx
c001ba73:	c3                   	ret    

c001ba74 <sysCallSizeFromFilename(regs*)>:
c001ba74:	57                   	push   edi
c001ba75:	56                   	push   esi
c001ba76:	53                   	push   ebx
c001ba77:	83 ec 20             	sub    esp,0x20
c001ba7a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ba7e:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001ba81:	83 fb 02             	cmp    ebx,0x2
c001ba84:	0f 86 99 00 00 00    	jbe    c001bb23 <sysCallSizeFromFilename(regs*)+0xaf>
c001ba8a:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001ba90:	77 65                	ja     c001baf7 <sysCallSizeFromFilename(regs*)+0x83>
c001ba92:	83 ec 0c             	sub    esp,0xc
c001ba95:	68 14 01 00 00       	push   0x114
c001ba9a:	e8 ed 3d ff ff       	call   c000f88c <malloc>
c001ba9f:	83 c4 0c             	add    esp,0xc
c001baa2:	89 c6                	mov    esi,eax
c001baa4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baa9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001baac:	53                   	push   ebx
c001baad:	56                   	push   esi
c001baae:	e8 7b 73 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001bab3:	83 c4 0c             	add    esp,0xc
c001bab6:	8d 44 24 23          	lea    eax,[esp+0x23]
c001baba:	50                   	push   eax
c001babb:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001babe:	56                   	push   esi
c001babf:	e8 7a 76 ff ff       	call   c001313e <File::stat(unsigned long long*, bool*)>
c001bac4:	83 c4 10             	add    esp,0x10
c001bac7:	85 f6                	test   esi,esi
c001bac9:	74 14                	je     c001badf <sysCallSizeFromFilename(regs*)+0x6b>
c001bacb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bacf:	8b 16                	mov    edx,DWORD PTR [esi]
c001bad1:	83 ec 0c             	sub    esp,0xc
c001bad4:	56                   	push   esi
c001bad5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bad8:	83 c4 10             	add    esp,0x10
c001badb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001badf:	85 c0                	test   eax,eax
c001bae1:	0f 95 c0             	setne  al
c001bae4:	31 d2                	xor    edx,edx
c001bae6:	0f b6 c0             	movzx  eax,al
c001bae9:	f7 d8                	neg    eax
c001baeb:	83 d2 00             	adc    edx,0x0
c001baee:	83 c4 20             	add    esp,0x20
c001baf1:	f7 da                	neg    edx
c001baf3:	5b                   	pop    ebx
c001baf4:	5e                   	pop    esi
c001baf5:	5f                   	pop    edi
c001baf6:	c3                   	ret    
c001baf7:	83 ec 08             	sub    esp,0x8
c001bafa:	53                   	push   ebx
c001bafb:	68 c3 c7 02 c0       	push   0xc002c7c3
c001bb00:	e8 ca 6d ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001bb05:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bb08:	83 c4 10             	add    esp,0x10
c001bb0b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb11:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb18:	31 d2                	xor    edx,edx
c001bb1a:	83 c4 20             	add    esp,0x20
c001bb1d:	31 c0                	xor    eax,eax
c001bb1f:	5b                   	pop    ebx
c001bb20:	5e                   	pop    esi
c001bb21:	5f                   	pop    edi
c001bb22:	c3                   	ret    
c001bb23:	83 c4 20             	add    esp,0x20
c001bb26:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb2b:	5b                   	pop    ebx
c001bb2c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb31:	5e                   	pop    esi
c001bb32:	5f                   	pop    edi
c001bb33:	c3                   	ret    

c001bb34 <sysCallClose(regs*)>:
c001bb34:	53                   	push   ebx
c001bb35:	83 ec 08             	sub    esp,0x8
c001bb38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb3c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb3f:	83 f8 02             	cmp    eax,0x2
c001bb42:	76 50                	jbe    c001bb94 <sysCallClose(regs*)+0x60>
c001bb44:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bb49:	74 58                	je     c001bba3 <sysCallClose(regs*)+0x6f>
c001bb4b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb50:	74 60                	je     c001bbb2 <sysCallClose(regs*)+0x7e>
c001bb52:	77 2f                	ja     c001bb83 <sysCallClose(regs*)+0x4f>
c001bb54:	83 ec 0c             	sub    esp,0xc
c001bb57:	50                   	push   eax
c001bb58:	e8 16 58 ff ff       	call   c0011373 <getFromFileDescriptor(int)>
c001bb5d:	89 c3                	mov    ebx,eax
c001bb5f:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb62:	e8 89 73 ff ff       	call   c0012ef0 <File::close()>
c001bb67:	83 c4 10             	add    esp,0x10
c001bb6a:	85 db                	test   ebx,ebx
c001bb6c:	74 0c                	je     c001bb7a <sysCallClose(regs*)+0x46>
c001bb6e:	83 ec 0c             	sub    esp,0xc
c001bb71:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb73:	53                   	push   ebx
c001bb74:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb77:	83 c4 10             	add    esp,0x10
c001bb7a:	31 c0                	xor    eax,eax
c001bb7c:	31 d2                	xor    edx,edx
c001bb7e:	83 c4 08             	add    esp,0x8
c001bb81:	5b                   	pop    ebx
c001bb82:	c3                   	ret    
c001bb83:	83 ec 08             	sub    esp,0x8
c001bb86:	50                   	push   eax
c001bb87:	68 cc c8 02 c0       	push   0xc002c8cc
c001bb8c:	e8 3e 6d ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001bb91:	83 c4 10             	add    esp,0x10
c001bb94:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb99:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb9e:	83 c4 08             	add    esp,0x8
c001bba1:	5b                   	pop    ebx
c001bba2:	c3                   	ret    
c001bba3:	83 ec 0c             	sub    esp,0xc
c001bba6:	68 de c7 02 c0       	push   0xc002c7de
c001bbab:	e8 1f 6d ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001bbb0:	eb c5                	jmp    c001bb77 <sysCallClose(regs*)+0x43>
c001bbb2:	83 ec 0c             	sub    esp,0xc
c001bbb5:	68 ec c7 02 c0       	push   0xc002c7ec
c001bbba:	eb ef                	jmp    c001bbab <sysCallClose(regs*)+0x77>

c001bbbc <sysCallOpenDir(regs*)>:
c001bbbc:	56                   	push   esi
c001bbbd:	53                   	push   ebx
c001bbbe:	53                   	push   ebx
c001bbbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bbc3:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bbc6:	85 f6                	test   esi,esi
c001bbc8:	74 59                	je     c001bc23 <sysCallOpenDir(regs*)+0x67>
c001bbca:	83 ec 0c             	sub    esp,0xc
c001bbcd:	68 14 01 00 00       	push   0x114
c001bbd2:	e8 b5 3c ff ff       	call   c000f88c <malloc>
c001bbd7:	83 c4 0c             	add    esp,0xc
c001bbda:	89 c6                	mov    esi,eax
c001bbdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbe1:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbe4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bbe7:	56                   	push   esi
c001bbe8:	e8 ed 76 ff ff       	call   c00132da <Directory::Directory(char const*, Process*)>
c001bbed:	83 c4 10             	add    esp,0x10
c001bbf0:	85 f6                	test   esi,esi
c001bbf2:	74 2f                	je     c001bc23 <sysCallOpenDir(regs*)+0x67>
c001bbf4:	83 ec 0c             	sub    esp,0xc
c001bbf7:	56                   	push   esi
c001bbf8:	e8 41 77 ff ff       	call   c001333e <Directory::open()>
c001bbfd:	83 c4 10             	add    esp,0x10
c001bc00:	85 c0                	test   eax,eax
c001bc02:	75 1f                	jne    c001bc23 <sysCallOpenDir(regs*)+0x67>
c001bc04:	83 ec 0c             	sub    esp,0xc
c001bc07:	56                   	push   esi
c001bc08:	e8 71 54 ff ff       	call   c001107e <UnixFile::getFileDescriptor()>
c001bc0d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bc10:	83 c4 10             	add    esp,0x10
c001bc13:	89 02                	mov    DWORD PTR [edx],eax
c001bc15:	c1 f8 1f             	sar    eax,0x1f
c001bc18:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bc1b:	31 c0                	xor    eax,eax
c001bc1d:	59                   	pop    ecx
c001bc1e:	31 d2                	xor    edx,edx
c001bc20:	5b                   	pop    ebx
c001bc21:	5e                   	pop    esi
c001bc22:	c3                   	ret    
c001bc23:	59                   	pop    ecx
c001bc24:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc29:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc2e:	5b                   	pop    ebx
c001bc2f:	5e                   	pop    esi
c001bc30:	c3                   	ret    

c001bc31 <sysCallCloseDir(regs*)>:
c001bc31:	53                   	push   ebx
c001bc32:	83 ec 08             	sub    esp,0x8
c001bc35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc39:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc3c:	83 f8 02             	cmp    eax,0x2
c001bc3f:	76 47                	jbe    c001bc88 <sysCallCloseDir(regs*)+0x57>
c001bc41:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc46:	77 2f                	ja     c001bc77 <sysCallCloseDir(regs*)+0x46>
c001bc48:	83 ec 0c             	sub    esp,0xc
c001bc4b:	50                   	push   eax
c001bc4c:	e8 22 57 ff ff       	call   c0011373 <getFromFileDescriptor(int)>
c001bc51:	89 c3                	mov    ebx,eax
c001bc53:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc56:	e8 3f 77 ff ff       	call   c001339a <Directory::close()>
c001bc5b:	83 c4 10             	add    esp,0x10
c001bc5e:	85 db                	test   ebx,ebx
c001bc60:	74 0c                	je     c001bc6e <sysCallCloseDir(regs*)+0x3d>
c001bc62:	83 ec 0c             	sub    esp,0xc
c001bc65:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc67:	53                   	push   ebx
c001bc68:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc6b:	83 c4 10             	add    esp,0x10
c001bc6e:	31 c0                	xor    eax,eax
c001bc70:	31 d2                	xor    edx,edx
c001bc72:	83 c4 08             	add    esp,0x8
c001bc75:	5b                   	pop    ebx
c001bc76:	c3                   	ret    
c001bc77:	83 ec 08             	sub    esp,0x8
c001bc7a:	50                   	push   eax
c001bc7b:	68 f4 c8 02 c0       	push   0xc002c8f4
c001bc80:	e8 4a 6c ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001bc85:	83 c4 10             	add    esp,0x10
c001bc88:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc8d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc92:	83 c4 08             	add    esp,0x8
c001bc95:	5b                   	pop    ebx
c001bc96:	c3                   	ret    

c001bc97 <sysCallMakeDir(regs*)>:
c001bc97:	56                   	push   esi
c001bc98:	53                   	push   ebx
c001bc99:	83 ec 10             	sub    esp,0x10
c001bc9c:	68 14 01 00 00       	push   0x114
c001bca1:	e8 e6 3b ff ff       	call   c000f88c <malloc>
c001bca6:	83 c4 0c             	add    esp,0xc
c001bca9:	89 c3                	mov    ebx,eax
c001bcab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bcb0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bcb3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bcb7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bcba:	53                   	push   ebx
c001bcbb:	e8 1a 76 ff ff       	call   c00132da <Directory::Directory(char const*, Process*)>
c001bcc0:	83 c4 10             	add    esp,0x10
c001bcc3:	85 db                	test   ebx,ebx
c001bcc5:	74 32                	je     c001bcf9 <sysCallMakeDir(regs*)+0x62>
c001bcc7:	83 ec 0c             	sub    esp,0xc
c001bcca:	53                   	push   ebx
c001bccb:	e8 4e 78 ff ff       	call   c001351e <Directory::create()>
c001bcd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcd3:	89 c6                	mov    esi,eax
c001bcd5:	e8 c0 76 ff ff       	call   c001339a <Directory::close()>
c001bcda:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bcdc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bcdf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bce2:	83 c4 10             	add    esp,0x10
c001bce5:	31 c0                	xor    eax,eax
c001bce7:	59                   	pop    ecx
c001bce8:	85 f6                	test   esi,esi
c001bcea:	5b                   	pop    ebx
c001bceb:	0f 95 c0             	setne  al
c001bcee:	5e                   	pop    esi
c001bcef:	31 d2                	xor    edx,edx
c001bcf1:	f7 d8                	neg    eax
c001bcf3:	83 d2 00             	adc    edx,0x0
c001bcf6:	f7 da                	neg    edx
c001bcf8:	c3                   	ret    
c001bcf9:	59                   	pop    ecx
c001bcfa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcff:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd04:	5b                   	pop    ebx
c001bd05:	5e                   	pop    esi
c001bd06:	c3                   	ret    

c001bd07 <sysCallWait(regs*)>:
c001bd07:	83 ec 10             	sub    esp,0x10
c001bd0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bd0e:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bd11:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd14:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bd17:	e8 c8 25 00 00       	call   c001e2e4 <waitTask(int, int*, int)>
c001bd1c:	83 c4 1c             	add    esp,0x1c
c001bd1f:	99                   	cdq    
c001bd20:	c3                   	ret    

c001bd21 <sysCallNotImpl(regs*)>:
c001bd21:	83 ec 18             	sub    esp,0x18
c001bd24:	68 fa c7 02 c0       	push   0xc002c7fa
c001bd29:	e8 d7 e5 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001bd2e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd33:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd38:	83 c4 1c             	add    esp,0x1c
c001bd3b:	c3                   	ret    

c001bd3c <sysPanic(regs*)>:
c001bd3c:	83 ec 18             	sub    esp,0x18
c001bd3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bd43:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bd46:	e8 ba e5 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001bd4b:	c7 04 24 14 c8 02 c0 	mov    DWORD PTR [esp],0xc002c814
c001bd52:	e8 ae e5 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001bd57:	b8 01 00 00 00       	mov    eax,0x1
c001bd5c:	31 d2                	xor    edx,edx
c001bd5e:	83 c4 1c             	add    esp,0x1c
c001bd61:	c3                   	ret    

c001bd62 <sysCallRmdir(regs*)>:
c001bd62:	56                   	push   esi
c001bd63:	53                   	push   ebx
c001bd64:	83 ec 20             	sub    esp,0x20
c001bd67:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bd6b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bd6e:	68 14 01 00 00       	push   0x114
c001bd73:	e8 14 3b ff ff       	call   c000f88c <malloc>
c001bd78:	83 c4 0c             	add    esp,0xc
c001bd7b:	89 c3                	mov    ebx,eax
c001bd7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd82:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd85:	56                   	push   esi
c001bd86:	53                   	push   ebx
c001bd87:	e8 a2 70 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001bd8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd8f:	e8 76 72 ff ff       	call   c001300a <File::unlink()>
c001bd94:	83 c4 10             	add    esp,0x10
c001bd97:	85 db                	test   ebx,ebx
c001bd99:	74 14                	je     c001bdaf <sysCallRmdir(regs*)+0x4d>
c001bd9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd9f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bda1:	83 ec 0c             	sub    esp,0xc
c001bda4:	53                   	push   ebx
c001bda5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bda8:	83 c4 10             	add    esp,0x10
c001bdab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bdaf:	85 c0                	test   eax,eax
c001bdb1:	0f 95 c0             	setne  al
c001bdb4:	31 d2                	xor    edx,edx
c001bdb6:	0f b6 c0             	movzx  eax,al
c001bdb9:	f7 d8                	neg    eax
c001bdbb:	83 d2 00             	adc    edx,0x0
c001bdbe:	83 c4 14             	add    esp,0x14
c001bdc1:	f7 da                	neg    edx
c001bdc3:	5b                   	pop    ebx
c001bdc4:	5e                   	pop    esi
c001bdc5:	c3                   	ret    

c001bdc6 <sysCallUnlink(regs*)>:
c001bdc6:	56                   	push   esi
c001bdc7:	53                   	push   ebx
c001bdc8:	83 ec 20             	sub    esp,0x20
c001bdcb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bdcf:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bdd2:	68 14 01 00 00       	push   0x114
c001bdd7:	e8 b0 3a ff ff       	call   c000f88c <malloc>
c001bddc:	83 c4 0c             	add    esp,0xc
c001bddf:	89 c3                	mov    ebx,eax
c001bde1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bde6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bde9:	56                   	push   esi
c001bdea:	53                   	push   ebx
c001bdeb:	e8 3e 70 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001bdf0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bdf3:	e8 12 72 ff ff       	call   c001300a <File::unlink()>
c001bdf8:	83 c4 10             	add    esp,0x10
c001bdfb:	85 db                	test   ebx,ebx
c001bdfd:	74 14                	je     c001be13 <sysCallUnlink(regs*)+0x4d>
c001bdff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001be03:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be05:	83 ec 0c             	sub    esp,0xc
c001be08:	53                   	push   ebx
c001be09:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001be0c:	83 c4 10             	add    esp,0x10
c001be0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001be13:	85 c0                	test   eax,eax
c001be15:	0f 95 c0             	setne  al
c001be18:	31 d2                	xor    edx,edx
c001be1a:	0f b6 c0             	movzx  eax,al
c001be1d:	f7 d8                	neg    eax
c001be1f:	83 d2 00             	adc    edx,0x0
c001be22:	83 c4 14             	add    esp,0x14
c001be25:	f7 da                	neg    edx
c001be27:	5b                   	pop    ebx
c001be28:	5e                   	pop    esi
c001be29:	c3                   	ret    

c001be2a <sysCallGetArgv(regs*)>:
c001be2a:	83 ec 0c             	sub    esp,0xc
c001be2d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be31:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001be34:	85 c0                	test   eax,eax
c001be36:	78 2b                	js     c001be63 <sysCallGetArgv(regs*)+0x39>
c001be38:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001be3e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001be41:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001be47:	7d 1a                	jge    c001be63 <sysCallGetArgv(regs*)+0x39>
c001be49:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001be50:	85 c0                	test   eax,eax
c001be52:	74 17                	je     c001be6b <sysCallGetArgv(regs*)+0x41>
c001be54:	83 ec 08             	sub    esp,0x8
c001be57:	50                   	push   eax
c001be58:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001be5b:	e8 ac 49 fe ff       	call   c000080c <strcpy>
c001be60:	83 c4 10             	add    esp,0x10
c001be63:	31 c0                	xor    eax,eax
c001be65:	31 d2                	xor    edx,edx
c001be67:	83 c4 0c             	add    esp,0xc
c001be6a:	c3                   	ret    
c001be6b:	b8 01 00 00 00       	mov    eax,0x1
c001be70:	31 d2                	xor    edx,edx
c001be72:	83 c4 0c             	add    esp,0xc
c001be75:	c3                   	ret    

c001be76 <sysCallTTYName(regs*)>:
c001be76:	56                   	push   esi
c001be77:	53                   	push   ebx
c001be78:	53                   	push   ebx
c001be79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001be7d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001be80:	85 c0                	test   eax,eax
c001be82:	74 5f                	je     c001bee3 <sysCallTTYName(regs*)+0x6d>
c001be84:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001be87:	83 f8 02             	cmp    eax,0x2
c001be8a:	77 3e                	ja     c001beca <sysCallTTYName(regs*)+0x54>
c001be8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be91:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be94:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001be9a:	85 db                	test   ebx,ebx
c001be9c:	74 45                	je     c001bee3 <sysCallTTYName(regs*)+0x6d>
c001be9e:	83 ec 0c             	sub    esp,0xc
c001bea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bea3:	53                   	push   ebx
c001bea4:	ff 10                	call   DWORD PTR [eax]
c001bea6:	83 c4 10             	add    esp,0x10
c001bea9:	84 c0                	test   al,al
c001beab:	74 41                	je     c001beee <sysCallTTYName(regs*)+0x78>
c001bead:	83 ec 08             	sub    esp,0x8
c001beb0:	81 c3 82 00 00 00    	add    ebx,0x82
c001beb6:	53                   	push   ebx
c001beb7:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001beba:	e8 4d 49 fe ff       	call   c000080c <strcpy>
c001bebf:	83 c4 10             	add    esp,0x10
c001bec2:	31 c0                	xor    eax,eax
c001bec4:	59                   	pop    ecx
c001bec5:	31 d2                	xor    edx,edx
c001bec7:	5b                   	pop    ebx
c001bec8:	5e                   	pop    esi
c001bec9:	c3                   	ret    
c001beca:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001becf:	74 bb                	je     c001be8c <sysCallTTYName(regs*)+0x16>
c001bed1:	83 ec 0c             	sub    esp,0xc
c001bed4:	50                   	push   eax
c001bed5:	e8 99 54 ff ff       	call   c0011373 <getFromFileDescriptor(int)>
c001beda:	83 c4 10             	add    esp,0x10
c001bedd:	89 c3                	mov    ebx,eax
c001bedf:	85 db                	test   ebx,ebx
c001bee1:	75 bb                	jne    c001be9e <sysCallTTYName(regs*)+0x28>
c001bee3:	59                   	pop    ecx
c001bee4:	b8 01 00 00 00       	mov    eax,0x1
c001bee9:	31 d2                	xor    edx,edx
c001beeb:	5b                   	pop    ebx
c001beec:	5e                   	pop    esi
c001beed:	c3                   	ret    
c001beee:	59                   	pop    ecx
c001beef:	b8 02 00 00 00       	mov    eax,0x2
c001bef4:	31 d2                	xor    edx,edx
c001bef6:	5b                   	pop    ebx
c001bef7:	5e                   	pop    esi
c001bef8:	c3                   	ret    

c001bef9 <sysCallUSleep(regs*)>:
c001bef9:	83 ec 14             	sub    esp,0x14
c001befc:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bf01:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bf05:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bf0c:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bf0f:	01 ca                	add    edx,ecx
c001bf11:	52                   	push   edx
c001bf12:	50                   	push   eax
c001bf13:	e8 a3 24 00 00       	call   c001e3bb <nanoSleep(unsigned long long)>
c001bf18:	31 c0                	xor    eax,eax
c001bf1a:	31 d2                	xor    edx,edx
c001bf1c:	83 c4 1c             	add    esp,0x1c
c001bf1f:	c3                   	ret    

c001bf20 <sysCallSpawn(regs*)>:
c001bf20:	56                   	push   esi
c001bf21:	53                   	push   ebx
c001bf22:	50                   	push   eax
c001bf23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf27:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bf2a:	85 c0                	test   eax,eax
c001bf2c:	75 08                	jne    c001bf36 <sysCallSpawn(regs*)+0x16>
c001bf2e:	59                   	pop    ecx
c001bf2f:	31 c0                	xor    eax,eax
c001bf31:	31 d2                	xor    edx,edx
c001bf33:	5b                   	pop    ebx
c001bf34:	5e                   	pop    esi
c001bf35:	c3                   	ret    
c001bf36:	83 ec 08             	sub    esp,0x8
c001bf39:	50                   	push   eax
c001bf3a:	68 23 c8 02 c0       	push   0xc002c823
c001bf3f:	e8 8b 69 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001bf44:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001bf4b:	e8 3c 39 ff ff       	call   c000f88c <malloc>
c001bf50:	83 c4 10             	add    esp,0x10
c001bf53:	89 c6                	mov    esi,eax
c001bf55:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bf58:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bf5b:	85 c0                	test   eax,eax
c001bf5d:	75 32                	jne    c001bf91 <sysCallSpawn(regs*)+0x71>
c001bf5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf64:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf67:	52                   	push   edx
c001bf68:	50                   	push   eax
c001bf69:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf6c:	56                   	push   esi
c001bf6d:	e8 26 1b 00 00       	call   c001da98 <Process::Process(char const*, Process*, char**)>
c001bf72:	83 c4 10             	add    esp,0x10
c001bf75:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bf7c:	75 b0                	jne    c001bf2e <sysCallSpawn(regs*)+0xe>
c001bf7e:	83 ec 0c             	sub    esp,0xc
c001bf81:	56                   	push   esi
c001bf82:	e8 f3 1f 00 00       	call   c001df7a <Process::createUserThread()>
c001bf87:	8b 06                	mov    eax,DWORD PTR [esi]
c001bf89:	83 c4 10             	add    esp,0x10
c001bf8c:	99                   	cdq    
c001bf8d:	59                   	pop    ecx
c001bf8e:	5b                   	pop    ebx
c001bf8f:	5e                   	pop    esi
c001bf90:	c3                   	ret    
c001bf91:	31 c0                	xor    eax,eax
c001bf93:	eb d2                	jmp    c001bf67 <sysCallSpawn(regs*)+0x47>

c001bf95 <sysCallGetEnv(regs*)>:
c001bf95:	55                   	push   ebp
c001bf96:	57                   	push   edi
c001bf97:	56                   	push   esi
c001bf98:	53                   	push   ebx
c001bf99:	83 ec 28             	sub    esp,0x28
c001bf9c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001bfa0:	68 31 c8 02 c0       	push   0xc002c831
c001bfa5:	e8 25 69 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001bfaa:	5f                   	pop    edi
c001bfab:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001bfae:	5d                   	pop    ebp
c001bfaf:	53                   	push   ebx
c001bfb0:	68 5e cb 02 c0       	push   0xc002cb5e
c001bfb5:	e8 15 69 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001bfba:	58                   	pop    eax
c001bfbb:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001bfbe:	5a                   	pop    edx
c001bfbf:	57                   	push   edi
c001bfc0:	68 3a c8 02 c0       	push   0xc002c83a
c001bfc5:	e8 05 69 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001bfca:	59                   	pop    ecx
c001bfcb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfd0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bfd3:	e8 49 e2 ff ff       	call   c001a221 <Krnl::getProcessTotalEnvCount(Process*)>
c001bfd8:	5a                   	pop    edx
c001bfd9:	89 c5                	mov    ebp,eax
c001bfdb:	59                   	pop    ecx
c001bfdc:	50                   	push   eax
c001bfdd:	68 44 c8 02 c0       	push   0xc002c844
c001bfe2:	e8 e8 68 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001bfe7:	83 c4 10             	add    esp,0x10
c001bfea:	39 ef                	cmp    edi,ebp
c001bfec:	7c 15                	jl     c001c003 <sysCallGetEnv(regs*)+0x6e>
c001bfee:	85 db                	test   ebx,ebx
c001bff0:	75 0c                	jne    c001bffe <sysCallGetEnv(regs*)+0x69>
c001bff2:	83 c4 1c             	add    esp,0x1c
c001bff5:	31 c0                	xor    eax,eax
c001bff7:	5b                   	pop    ebx
c001bff8:	31 d2                	xor    edx,edx
c001bffa:	5e                   	pop    esi
c001bffb:	5f                   	pop    edi
c001bffc:	5d                   	pop    ebp
c001bffd:	c3                   	ret    
c001bffe:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c001:	eb ef                	jmp    c001bff2 <sysCallGetEnv(regs*)+0x5d>
c001c003:	83 ec 0c             	sub    esp,0xc
c001c006:	68 50 c8 02 c0       	push   0xc002c850
c001c00b:	e8 bf 68 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001c010:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c014:	83 c4 0c             	add    esp,0xc
c001c017:	57                   	push   edi
c001c018:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c01e:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c021:	50                   	push   eax
c001c022:	e8 1a e2 ff ff       	call   c001a241 <Krnl::getProcessEnvPair(Process*, int)>
c001c027:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c02b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c02f:	68 0f cc 02 c0       	push   0xc002cc0f
c001c034:	e8 96 68 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001c039:	83 c4 10             	add    esp,0x10
c001c03c:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c03f:	85 f6                	test   esi,esi
c001c041:	75 47                	jne    c001c08a <sysCallGetEnv(regs*)+0xf5>
c001c043:	83 ec 0c             	sub    esp,0xc
c001c046:	55                   	push   ebp
c001c047:	e8 20 47 fe ff       	call   c000076c <strlen>
c001c04c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c04f:	89 c3                	mov    ebx,eax
c001c051:	e8 16 47 fe ff       	call   c000076c <strlen>
c001c056:	5a                   	pop    edx
c001c057:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c05b:	59                   	pop    ecx
c001c05c:	50                   	push   eax
c001c05d:	68 53 c8 02 c0       	push   0xc002c853
c001c062:	e8 68 68 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001c067:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c06a:	e8 fd 46 fe ff       	call   c000076c <strlen>
c001c06f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c072:	89 c3                	mov    ebx,eax
c001c074:	e8 f3 46 fe ff       	call   c000076c <strlen>
c001c079:	83 c4 10             	add    esp,0x10
c001c07c:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c080:	83 c4 1c             	add    esp,0x1c
c001c083:	31 d2                	xor    edx,edx
c001c085:	5b                   	pop    ebx
c001c086:	5e                   	pop    esi
c001c087:	5f                   	pop    edi
c001c088:	5d                   	pop    ebp
c001c089:	c3                   	ret    
c001c08a:	83 ec 0c             	sub    esp,0xc
c001c08d:	68 29 cc 02 c0       	push   0xc002cc29
c001c092:	e8 38 68 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001c097:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c09a:	58                   	pop    eax
c001c09b:	5a                   	pop    edx
c001c09c:	55                   	push   ebp
c001c09d:	53                   	push   ebx
c001c09e:	e8 69 47 fe ff       	call   c000080c <strcpy>
c001c0a3:	59                   	pop    ecx
c001c0a4:	5e                   	pop    esi
c001c0a5:	68 5d c8 02 c0       	push   0xc002c85d
c001c0aa:	53                   	push   ebx
c001c0ab:	e8 9c 48 fe ff       	call   c000094c <strcat>
c001c0b0:	5d                   	pop    ebp
c001c0b1:	58                   	pop    eax
c001c0b2:	57                   	push   edi
c001c0b3:	53                   	push   ebx
c001c0b4:	e8 93 48 fe ff       	call   c000094c <strcat>
c001c0b9:	c7 04 24 43 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc43
c001c0c0:	e8 0a 68 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001c0c5:	83 c4 10             	add    esp,0x10
c001c0c8:	e9 25 ff ff ff       	jmp    c001bff2 <sysCallGetEnv(regs*)+0x5d>

c001c0cd <sysAppSettings(regs*)>:
c001c0cd:	57                   	push   edi
c001c0ce:	56                   	push   esi
c001c0cf:	56                   	push   esi
c001c0d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0d4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c0d7:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001c0dd:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c0e2:	66 3d c0 09          	cmp    ax,0x9c0
c001c0e6:	75 2e                	jne    c001c116 <sysAppSettings(regs*)+0x49>
c001c0e8:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001c0ee:	83 e0 1f             	and    eax,0x1f
c001c0f1:	3c 01                	cmp    al,0x1
c001c0f3:	74 2c                	je     c001c121 <sysAppSettings(regs*)+0x54>
c001c0f5:	3c 07                	cmp    al,0x7
c001c0f7:	0f 84 b3 00 00 00    	je     c001c1b0 <sysAppSettings(regs*)+0xe3>
c001c0fd:	84 c0                	test   al,al
c001c0ff:	0f 84 d2 00 00 00    	je     c001c1d7 <sysAppSettings(regs*)+0x10a>
c001c105:	3c 08                	cmp    al,0x8
c001c107:	74 63                	je     c001c16c <sysAppSettings(regs*)+0x9f>
c001c109:	59                   	pop    ecx
c001c10a:	0f b6 c0             	movzx  eax,al
c001c10d:	5e                   	pop    esi
c001c10e:	05 e8 03 00 00       	add    eax,0x3e8
c001c113:	5f                   	pop    edi
c001c114:	99                   	cdq    
c001c115:	c3                   	ret    
c001c116:	b8 01 00 00 00       	mov    eax,0x1
c001c11b:	59                   	pop    ecx
c001c11c:	31 d2                	xor    edx,edx
c001c11e:	5e                   	pop    esi
c001c11f:	5f                   	pop    edi
c001c120:	c3                   	ret    
c001c121:	50                   	push   eax
c001c122:	68 00 01 00 00       	push   0x100
c001c127:	6a 00                	push   0x0
c001c129:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c12e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c131:	83 c0 0c             	add    eax,0xc
c001c134:	50                   	push   eax
c001c135:	e8 16 46 fe ff       	call   c0000750 <memset>
c001c13a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c13f:	b9 ff 00 00 00       	mov    ecx,0xff
c001c144:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c147:	83 c7 0c             	add    edi,0xc
c001c14a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c14c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c151:	5a                   	pop    edx
c001c152:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c155:	59                   	pop    ecx
c001c156:	8d 50 0c             	lea    edx,[eax+0xc]
c001c159:	52                   	push   edx
c001c15a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c160:	e8 79 42 ff ff       	call   c00103de <VgaText::setTitle(char*)>
c001c165:	83 c4 10             	add    esp,0x10
c001c168:	31 c0                	xor    eax,eax
c001c16a:	eb af                	jmp    c001c11b <sysAppSettings(regs*)+0x4e>
c001c16c:	83 ec 08             	sub    esp,0x8
c001c16f:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c175:	83 e0 0f             	and    eax,0xf
c001c178:	50                   	push   eax
c001c179:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c17e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c181:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c187:	e8 42 42 ff ff       	call   c00103ce <VgaText::setTitleColour(VgaColour)>
c001c18c:	5f                   	pop    edi
c001c18d:	58                   	pop    eax
c001c18e:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c194:	c1 e8 04             	shr    eax,0x4
c001c197:	83 e0 0f             	and    eax,0xf
c001c19a:	50                   	push   eax
c001c19b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1a0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c1a9:	e8 10 42 ff ff       	call   c00103be <VgaText::setTitleTextColour(VgaColour)>
c001c1ae:	eb b5                	jmp    c001c165 <sysAppSettings(regs*)+0x98>
c001c1b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1b8:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c1be:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c1c4:	c0 e8 06             	shr    al,0x6
c001c1c7:	83 e0 01             	and    eax,0x1
c001c1ca:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c1d0:	31 c0                	xor    eax,eax
c001c1d2:	e9 44 ff ff ff       	jmp    c001c11b <sysAppSettings(regs*)+0x4e>
c001c1d7:	b8 02 00 00 00       	mov    eax,0x2
c001c1dc:	e9 3a ff ff ff       	jmp    c001c11b <sysAppSettings(regs*)+0x4e>

c001c1e1 <sysSetFatAttrib(regs*)>:
c001c1e1:	57                   	push   edi
c001c1e2:	56                   	push   esi
c001c1e3:	53                   	push   ebx
c001c1e4:	83 ec 1c             	sub    esp,0x1c
c001c1e7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c1eb:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c1ee:	68 14 01 00 00       	push   0x114
c001c1f3:	e8 94 36 ff ff       	call   c000f88c <malloc>
c001c1f8:	83 c4 0c             	add    esp,0xc
c001c1fb:	89 c3                	mov    ebx,eax
c001c1fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c202:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c205:	57                   	push   edi
c001c206:	53                   	push   ebx
c001c207:	e8 22 6c ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001c20c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c20f:	83 c4 0c             	add    esp,0xc
c001c212:	0f b6 d4             	movzx  edx,ah
c001c215:	0f b6 c0             	movzx  eax,al
c001c218:	52                   	push   edx
c001c219:	50                   	push   eax
c001c21a:	53                   	push   ebx
c001c21b:	e8 84 6e ff ff       	call   c00130a4 <File::chfatattr(unsigned char, unsigned char)>
c001c220:	83 c4 10             	add    esp,0x10
c001c223:	85 db                	test   ebx,ebx
c001c225:	74 14                	je     c001c23b <sysSetFatAttrib(regs*)+0x5a>
c001c227:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c22b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c22d:	83 ec 0c             	sub    esp,0xc
c001c230:	53                   	push   ebx
c001c231:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c234:	83 c4 10             	add    esp,0x10
c001c237:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c23b:	85 c0                	test   eax,eax
c001c23d:	0f 95 c0             	setne  al
c001c240:	31 d2                	xor    edx,edx
c001c242:	0f b6 c0             	movzx  eax,al
c001c245:	f7 d8                	neg    eax
c001c247:	83 d2 00             	adc    edx,0x0
c001c24a:	83 c4 10             	add    esp,0x10
c001c24d:	f7 da                	neg    edx
c001c24f:	5b                   	pop    ebx
c001c250:	5e                   	pop    esi
c001c251:	5f                   	pop    edi
c001c252:	c3                   	ret    

c001c253 <sysPipe(regs*)>:
c001c253:	57                   	push   edi
c001c254:	56                   	push   esi
c001c255:	53                   	push   ebx
c001c256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c25a:	83 ec 0c             	sub    esp,0xc
c001c25d:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c260:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c263:	6a 20                	push   0x20
c001c265:	e8 22 36 ff ff       	call   c000f88c <malloc>
c001c26a:	89 c3                	mov    ebx,eax
c001c26c:	58                   	pop    eax
c001c26d:	5a                   	pop    edx
c001c26e:	68 00 50 00 00       	push   0x5000
c001c273:	53                   	push   ebx
c001c274:	e8 9d 3e ff ff       	call   c0010116 <Pipe::Pipe(int)>
c001c279:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c27c:	e8 fd 4d ff ff       	call   c001107e <UnixFile::getFileDescriptor()>
c001c281:	89 07                	mov    DWORD PTR [edi],eax
c001c283:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c286:	e8 f3 4d ff ff       	call   c001107e <UnixFile::getFileDescriptor()>
c001c28b:	83 c4 10             	add    esp,0x10
c001c28e:	89 06                	mov    DWORD PTR [esi],eax
c001c290:	31 d2                	xor    edx,edx
c001c292:	5b                   	pop    ebx
c001c293:	31 c0                	xor    eax,eax
c001c295:	5e                   	pop    esi
c001c296:	5f                   	pop    edi
c001c297:	c3                   	ret    

c001c298 <sysGetUnixTime(regs*)>:
c001c298:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001c29d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c2a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c2a7:	e9 74 75 ff ff       	jmp    c0013820 <Clock::timeInSecondsLocal()>

c001c2ac <string_ends_with(char const*, char const*)>:
c001c2ac:	57                   	push   edi
c001c2ad:	56                   	push   esi
c001c2ae:	53                   	push   ebx
c001c2af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c2b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c2b7:	83 ec 0c             	sub    esp,0xc
c001c2ba:	53                   	push   ebx
c001c2bb:	e8 ac 44 fe ff       	call   c000076c <strlen>
c001c2c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c2c3:	89 c6                	mov    esi,eax
c001c2c5:	e8 a2 44 fe ff       	call   c000076c <strlen>
c001c2ca:	83 c4 10             	add    esp,0x10
c001c2cd:	39 c6                	cmp    esi,eax
c001c2cf:	7d 06                	jge    c001c2d7 <string_ends_with(char const*, char const*)+0x2b>
c001c2d1:	5b                   	pop    ebx
c001c2d2:	31 c0                	xor    eax,eax
c001c2d4:	5e                   	pop    esi
c001c2d5:	5f                   	pop    edi
c001c2d6:	c3                   	ret    
c001c2d7:	83 ec 08             	sub    esp,0x8
c001c2da:	29 c6                	sub    esi,eax
c001c2dc:	57                   	push   edi
c001c2dd:	01 f3                	add    ebx,esi
c001c2df:	53                   	push   ebx
c001c2e0:	e8 b3 45 fe ff       	call   c0000898 <strcmp>
c001c2e5:	83 c4 10             	add    esp,0x10
c001c2e8:	85 c0                	test   eax,eax
c001c2ea:	5b                   	pop    ebx
c001c2eb:	0f 94 c0             	sete   al
c001c2ee:	5e                   	pop    esi
c001c2ef:	0f b6 c0             	movzx  eax,al
c001c2f2:	5f                   	pop    edi
c001c2f3:	c3                   	ret    

c001c2f4 <sysCallOpen(regs*)>:
c001c2f4:	56                   	push   esi
c001c2f5:	53                   	push   ebx
c001c2f6:	81 ec 04 01 00 00    	sub    esp,0x104
c001c2fc:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c303:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c306:	85 c9                	test   ecx,ecx
c001c308:	0f 84 b3 00 00 00    	je     c001c3c1 <sysCallOpen(regs*)+0xcd>
c001c30e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c311:	85 c0                	test   eax,eax
c001c313:	0f 84 a8 00 00 00    	je     c001c3c1 <sysCallOpen(regs*)+0xcd>
c001c319:	52                   	push   edx
c001c31a:	68 5f c8 02 c0       	push   0xc002c85f
c001c31f:	50                   	push   eax
c001c320:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c324:	56                   	push   esi
c001c325:	e8 5a 69 ff ff       	call   c0012c84 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c32a:	89 34 24             	mov    DWORD PTR [esp],esi
c001c32d:	e8 3a 44 fe ff       	call   c000076c <strlen>
c001c332:	83 c4 10             	add    esp,0x10
c001c335:	48                   	dec    eax
c001c336:	74 1d                	je     c001c355 <sysCallOpen(regs*)+0x61>
c001c338:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c33b:	eb 0f                	jmp    c001c34c <sysCallOpen(regs*)+0x58>
c001c33d:	80 fa 3a             	cmp    dl,0x3a
c001c340:	74 0f                	je     c001c351 <sysCallOpen(regs*)+0x5d>
c001c342:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c346:	48                   	dec    eax
c001c347:	74 0c                	je     c001c355 <sysCallOpen(regs*)+0x61>
c001c349:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c34c:	80 fa 2e             	cmp    dl,0x2e
c001c34f:	75 ec                	jne    c001c33d <sysCallOpen(regs*)+0x49>
c001c351:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c355:	83 ec 08             	sub    esp,0x8
c001c358:	68 63 c8 02 c0       	push   0xc002c863
c001c35d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c360:	e8 47 ff ff ff       	call   c001c2ac <string_ends_with(char const*, char const*)>
c001c365:	83 c4 10             	add    esp,0x10
c001c368:	85 c0                	test   eax,eax
c001c36a:	75 17                	jne    c001c383 <sysCallOpen(regs*)+0x8f>
c001c36c:	83 ec 08             	sub    esp,0x8
c001c36f:	68 84 c8 02 c0       	push   0xc002c884
c001c374:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c377:	e8 30 ff ff ff       	call   c001c2ac <string_ends_with(char const*, char const*)>
c001c37c:	83 c4 10             	add    esp,0x10
c001c37f:	85 c0                	test   eax,eax
c001c381:	74 51                	je     c001c3d4 <sysCallOpen(regs*)+0xe0>
c001c383:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c386:	83 ec 08             	sub    esp,0x8
c001c389:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c38f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c396:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c399:	ff 30                	push   DWORD PTR [eax]
c001c39b:	68 68 c8 02 c0       	push   0xc002c868
c001c3a0:	e8 2a 65 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001c3a5:	c7 04 24 77 c8 02 c0 	mov    DWORD PTR [esp],0xc002c877
c001c3ac:	e8 1e 65 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001c3b1:	83 c4 10             	add    esp,0x10
c001c3b4:	81 c4 04 01 00 00    	add    esp,0x104
c001c3ba:	31 c0                	xor    eax,eax
c001c3bc:	31 d2                	xor    edx,edx
c001c3be:	5b                   	pop    ebx
c001c3bf:	5e                   	pop    esi
c001c3c0:	c3                   	ret    
c001c3c1:	81 c4 04 01 00 00    	add    esp,0x104
c001c3c7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c3cc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c3d1:	5b                   	pop    ebx
c001c3d2:	5e                   	pop    esi
c001c3d3:	c3                   	ret    
c001c3d4:	83 ec 08             	sub    esp,0x8
c001c3d7:	68 64 c8 02 c0       	push   0xc002c864
c001c3dc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3df:	e8 b4 44 fe ff       	call   c0000898 <strcmp>
c001c3e4:	83 c4 10             	add    esp,0x10
c001c3e7:	85 c0                	test   eax,eax
c001c3e9:	74 98                	je     c001c383 <sysCallOpen(regs*)+0x8f>
c001c3eb:	83 ec 08             	sub    esp,0x8
c001c3ee:	68 63 c8 02 c0       	push   0xc002c863
c001c3f3:	56                   	push   esi
c001c3f4:	e8 b3 fe ff ff       	call   c001c2ac <string_ends_with(char const*, char const*)>
c001c3f9:	83 c4 10             	add    esp,0x10
c001c3fc:	85 c0                	test   eax,eax
c001c3fe:	75 83                	jne    c001c383 <sysCallOpen(regs*)+0x8f>
c001c400:	83 ec 08             	sub    esp,0x8
c001c403:	68 89 c8 02 c0       	push   0xc002c889
c001c408:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c40b:	e8 9c fe ff ff       	call   c001c2ac <string_ends_with(char const*, char const*)>
c001c410:	83 c4 10             	add    esp,0x10
c001c413:	85 c0                	test   eax,eax
c001c415:	0f 85 d9 00 00 00    	jne    c001c4f4 <sysCallOpen(regs*)+0x200>
c001c41b:	83 ec 08             	sub    esp,0x8
c001c41e:	68 8e c8 02 c0       	push   0xc002c88e
c001c423:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c426:	e8 81 fe ff ff       	call   c001c2ac <string_ends_with(char const*, char const*)>
c001c42b:	83 c4 10             	add    esp,0x10
c001c42e:	85 c0                	test   eax,eax
c001c430:	0f 85 be 00 00 00    	jne    c001c4f4 <sysCallOpen(regs*)+0x200>
c001c436:	83 ec 08             	sub    esp,0x8
c001c439:	68 8a c8 02 c0       	push   0xc002c88a
c001c43e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c441:	e8 52 44 fe ff       	call   c0000898 <strcmp>
c001c446:	83 c4 10             	add    esp,0x10
c001c449:	85 c0                	test   eax,eax
c001c44b:	0f 84 a3 00 00 00    	je     c001c4f4 <sysCallOpen(regs*)+0x200>
c001c451:	83 ec 08             	sub    esp,0x8
c001c454:	68 89 c8 02 c0       	push   0xc002c889
c001c459:	56                   	push   esi
c001c45a:	e8 4d fe ff ff       	call   c001c2ac <string_ends_with(char const*, char const*)>
c001c45f:	83 c4 10             	add    esp,0x10
c001c462:	85 c0                	test   eax,eax
c001c464:	0f 85 8a 00 00 00    	jne    c001c4f4 <sysCallOpen(regs*)+0x200>
c001c46a:	83 ec 0c             	sub    esp,0xc
c001c46d:	68 14 01 00 00       	push   0x114
c001c472:	e8 15 34 ff ff       	call   c000f88c <malloc>
c001c477:	83 c4 0c             	add    esp,0xc
c001c47a:	89 c6                	mov    esi,eax
c001c47c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c481:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c484:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c487:	56                   	push   esi
c001c488:	e8 a1 69 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001c48d:	83 c4 10             	add    esp,0x10
c001c490:	85 f6                	test   esi,esi
c001c492:	0f 84 29 ff ff ff    	je     c001c3c1 <sysCallOpen(regs*)+0xcd>
c001c498:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c49b:	0f b6 c2             	movzx  eax,dl
c001c49e:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c4a1:	89 d0                	mov    eax,edx
c001c4a3:	83 e0 01             	and    eax,0x1
c001c4a6:	f6 c2 02             	test   dl,0x2
c001c4a9:	74 03                	je     c001c4ae <sysCallOpen(regs*)+0x1ba>
c001c4ab:	83 c8 02             	or     eax,0x2
c001c4ae:	f6 c2 04             	test   dl,0x4
c001c4b1:	74 03                	je     c001c4b6 <sysCallOpen(regs*)+0x1c2>
c001c4b3:	83 c8 04             	or     eax,0x4
c001c4b6:	f6 c2 08             	test   dl,0x8
c001c4b9:	74 03                	je     c001c4be <sysCallOpen(regs*)+0x1ca>
c001c4bb:	83 c8 0a             	or     eax,0xa
c001c4be:	83 e2 10             	and    edx,0x10
c001c4c1:	74 03                	je     c001c4c6 <sysCallOpen(regs*)+0x1d2>
c001c4c3:	83 c8 12             	or     eax,0x12
c001c4c6:	83 ec 08             	sub    esp,0x8
c001c4c9:	50                   	push   eax
c001c4ca:	56                   	push   esi
c001c4cb:	e8 c2 69 ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c001c4d0:	83 c4 10             	add    esp,0x10
c001c4d3:	85 c0                	test   eax,eax
c001c4d5:	0f 85 e6 fe ff ff    	jne    c001c3c1 <sysCallOpen(regs*)+0xcd>
c001c4db:	83 ec 0c             	sub    esp,0xc
c001c4de:	56                   	push   esi
c001c4df:	e8 9a 4b ff ff       	call   c001107e <UnixFile::getFileDescriptor()>
c001c4e4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c4e7:	89 02                	mov    DWORD PTR [edx],eax
c001c4e9:	c1 f8 1f             	sar    eax,0x1f
c001c4ec:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c4ef:	e9 bd fe ff ff       	jmp    c001c3b1 <sysCallOpen(regs*)+0xbd>
c001c4f4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4f7:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c4fd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c504:	e9 ab fe ff ff       	jmp    c001c3b4 <sysCallOpen(regs*)+0xc0>

c001c509 <Sys::loadSyscalls()>:
c001c509:	c7 05 60 1b 03 c0 f9 b5 01 c0 	mov    DWORD PTR ds:0xc0031b60,0xc001b5f9
c001c513:	c7 05 64 1b 03 c0 5e b1 01 c0 	mov    DWORD PTR ds:0xc0031b64,0xc001b15e
c001c51d:	c7 05 68 1b 03 c0 4c b3 01 c0 	mov    DWORD PTR ds:0xc0031b68,0xc001b34c
c001c527:	c7 05 6c 1b 03 c0 2f b5 01 c0 	mov    DWORD PTR ds:0xc0031b6c,0xc001b52f
c001c531:	c7 05 70 1b 03 c0 e4 b2 01 c0 	mov    DWORD PTR ds:0xc0031b70,0xc001b2e4
c001c53b:	c7 05 74 1b 03 c0 95 b1 01 c0 	mov    DWORD PTR ds:0xc0031b74,0xc001b195
c001c545:	c7 05 78 1b 03 c0 76 b1 01 c0 	mov    DWORD PTR ds:0xc0031b78,0xc001b176
c001c54f:	c7 05 7c 1b 03 c0 a1 b3 01 c0 	mov    DWORD PTR ds:0xc0031b7c,0xc001b3a1
c001c559:	c7 05 84 1b 03 c0 34 bb 01 c0 	mov    DWORD PTR ds:0xc0031b84,0xc001bb34
c001c563:	c7 05 80 1b 03 c0 f4 c2 01 c0 	mov    DWORD PTR ds:0xc0031b80,0xc001c2f4
c001c56d:	c7 05 88 1b 03 c0 bc bb 01 c0 	mov    DWORD PTR ds:0xc0031b88,0xc001bbbc
c001c577:	c7 05 8c 1b 03 c0 23 b8 01 c0 	mov    DWORD PTR ds:0xc0031b8c,0xc001b823
c001c581:	c7 05 90 1b 03 c0 3f b6 01 c0 	mov    DWORD PTR ds:0xc0031b90,0xc001b63f
c001c58b:	c7 05 94 1b 03 c0 44 b6 01 c0 	mov    DWORD PTR ds:0xc0031b94,0xc001b644
c001c595:	c7 05 98 1b 03 c0 97 bc 01 c0 	mov    DWORD PTR ds:0xc0031b98,0xc001bc97
c001c59f:	c7 05 9c 1b 03 c0 31 bc 01 c0 	mov    DWORD PTR ds:0xc0031b9c,0xc001bc31
c001c5a9:	c7 05 a0 1b 03 c0 0b b9 01 c0 	mov    DWORD PTR ds:0xc0031ba0,0xc001b90b
c001c5b3:	c7 05 a4 1b 03 c0 74 b9 01 c0 	mov    DWORD PTR ds:0xc0031ba4,0xc001b974
c001c5bd:	c7 05 a8 1b 03 c0 f1 b9 01 c0 	mov    DWORD PTR ds:0xc0031ba8,0xc001b9f1
c001c5c7:	c7 05 ac 1b 03 c0 49 b6 01 c0 	mov    DWORD PTR ds:0xc0031bac,0xc001b649
c001c5d1:	c7 05 b0 1b 03 c0 07 bd 01 c0 	mov    DWORD PTR ds:0xc0031bb0,0xc001bd07
c001c5db:	c7 05 b4 1b 03 c0 21 bd 01 c0 	mov    DWORD PTR ds:0xc0031bb4,0xc001bd21
c001c5e5:	c7 05 b8 1b 03 c0 21 bd 01 c0 	mov    DWORD PTR ds:0xc0031bb8,0xc001bd21
c001c5ef:	c7 05 bc 1b 03 c0 62 bd 01 c0 	mov    DWORD PTR ds:0xc0031bbc,0xc001bd62
c001c5f9:	c7 05 c0 1b 03 c0 c6 bd 01 c0 	mov    DWORD PTR ds:0xc0031bc0,0xc001bdc6
c001c603:	c7 05 c4 1b 03 c0 f5 b7 01 c0 	mov    DWORD PTR ds:0xc0031bc4,0xc001b7f5
c001c60d:	c7 05 c8 1b 03 c0 2a be 01 c0 	mov    DWORD PTR ds:0xc0031bc8,0xc001be2a
c001c617:	c7 05 cc 1b 03 c0 b2 b7 01 c0 	mov    DWORD PTR ds:0xc0031bcc,0xc001b7b2
c001c621:	c7 05 d0 1b 03 c0 76 be 01 c0 	mov    DWORD PTR ds:0xc0031bd0,0xc001be76
c001c62b:	c7 05 d4 1b 03 c0 b1 b8 01 c0 	mov    DWORD PTR ds:0xc0031bd4,0xc001b8b1
c001c635:	c7 05 d8 1b 03 c0 f9 be 01 c0 	mov    DWORD PTR ds:0xc0031bd8,0xc001bef9
c001c63f:	c7 05 dc 1b 03 c0 74 ba 01 c0 	mov    DWORD PTR ds:0xc0031bdc,0xc001ba74
c001c649:	c7 05 e0 1b 03 c0 20 bf 01 c0 	mov    DWORD PTR ds:0xc0031be0,0xc001bf20
c001c653:	c7 05 e4 1b 03 c0 95 bf 01 c0 	mov    DWORD PTR ds:0xc0031be4,0xc001bf95
c001c65d:	c7 05 e8 1b 03 c0 cd c0 01 c0 	mov    DWORD PTR ds:0xc0031be8,0xc001c0cd
c001c667:	c7 05 ec 1b 03 c0 53 b6 01 c0 	mov    DWORD PTR ds:0xc0031bec,0xc001b653
c001c671:	c7 05 f0 1b 03 c0 bd b6 01 c0 	mov    DWORD PTR ds:0xc0031bf0,0xc001b6bd
c001c67b:	c7 05 f4 1b 03 c0 03 b7 01 c0 	mov    DWORD PTR ds:0xc0031bf4,0xc001b703
c001c685:	c7 05 f8 1b 03 c0 e1 c1 01 c0 	mov    DWORD PTR ds:0xc0031bf8,0xc001c1e1
c001c68f:	c7 05 fc 1b 03 c0 3c bd 01 c0 	mov    DWORD PTR ds:0xc0031bfc,0xc001bd3c
c001c699:	c7 05 00 1c 03 c0 54 b7 01 c0 	mov    DWORD PTR ds:0xc0031c00,0xc001b754
c001c6a3:	c7 05 04 1c 03 c0 53 c2 01 c0 	mov    DWORD PTR ds:0xc0031c04,0xc001c253
c001c6ad:	c7 05 08 1c 03 c0 98 c2 01 c0 	mov    DWORD PTR ds:0xc0031c08,0xc001c298
c001c6b7:	c7 05 0c 1c 03 c0 3c b2 01 c0 	mov    DWORD PTR ds:0xc0031c0c,0xc001b23c
c001c6c1:	c7 05 10 1c 03 c0 bd b3 01 c0 	mov    DWORD PTR ds:0xc0031c10,0xc001b3bd
c001c6cb:	c7 05 14 1c 03 c0 e5 b4 01 c0 	mov    DWORD PTR ds:0xc0031c14,0xc001b4e5
c001c6d5:	c7 05 18 1c 03 c0 28 b1 01 c0 	mov    DWORD PTR ds:0xc0031c18,0xc001b128
c001c6df:	c7 05 1c 1c 03 c0 97 b5 01 c0 	mov    DWORD PTR ds:0xc0031c1c,0xc001b597
c001c6e9:	c7 05 20 1c 03 c0 a1 b1 01 c0 	mov    DWORD PTR ds:0xc0031c20,0xc001b1a1
c001c6f3:	c7 05 24 1c 03 c0 b8 b1 01 c0 	mov    DWORD PTR ds:0xc0031c24,0xc001b1b8
c001c6fd:	c3                   	ret    

c001c6fe <Sys::systemCall(regs*, void*)>:
c001c6fe:	53                   	push   ebx
c001c6ff:	83 ec 08             	sub    esp,0x8
c001c702:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c706:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c709:	83 f8 7f             	cmp    eax,0x7f
c001c70c:	77 16                	ja     c001c724 <Sys::systemCall(regs*, void*)+0x26>
c001c70e:	8b 14 85 60 1b 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce4a0]
c001c715:	85 d2                	test   edx,edx
c001c717:	74 0b                	je     c001c724 <Sys::systemCall(regs*, void*)+0x26>
c001c719:	83 ec 0c             	sub    esp,0xc
c001c71c:	53                   	push   ebx
c001c71d:	ff d2                	call   edx
c001c71f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c722:	eb 0d                	jmp    c001c731 <Sys::systemCall(regs*, void*)+0x33>
c001c724:	52                   	push   edx
c001c725:	52                   	push   edx
c001c726:	50                   	push   eax
c001c727:	68 93 c8 02 c0       	push   0xc002c893
c001c72c:	e8 9e 61 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001c731:	83 c4 10             	add    esp,0x10
c001c734:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c739:	31 d2                	xor    edx,edx
c001c73b:	83 c4 08             	add    esp,0x8
c001c73e:	5b                   	pop    ebx
c001c73f:	c3                   	ret    

c001c740 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c740:	55                   	push   ebp
c001c741:	57                   	push   edi
c001c742:	56                   	push   esi
c001c743:	53                   	push   ebx
c001c744:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c74a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c751:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c758:	85 c0                	test   eax,eax
c001c75a:	0f 95 c1             	setne  cl
c001c75d:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c765:	0f 94 c2             	sete   dl
c001c768:	84 d1                	test   cl,dl
c001c76a:	74 23                	je     c001c78f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c76c:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c772:	74 1b                	je     c001c78f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c774:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c77a:	89 da                	mov    edx,ebx
c001c77c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c782:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c788:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c78f:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c796:	05 ff 0f 00 00       	add    eax,0xfff
c001c79b:	83 ec 0c             	sub    esp,0xc
c001c79e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c7a2:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c7a8:	c1 e8 0c             	shr    eax,0xc
c001c7ab:	89 fe                	mov    esi,edi
c001c7ad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c7b1:	c1 ee 0c             	shr    esi,0xc
c001c7b4:	6a 01                	push   0x1
c001c7b6:	e8 0e 4d ff ff       	call   c00114c9 <Virt::allocateKernelVirtualPages(int)>
c001c7bb:	89 c5                	mov    ebp,eax
c001c7bd:	58                   	pop    eax
c001c7be:	5a                   	pop    edx
c001c7bf:	56                   	push   esi
c001c7c0:	68 17 c9 02 c0       	push   0xc002c917
c001c7c5:	e8 05 61 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001c7ca:	59                   	pop    ecx
c001c7cb:	58                   	pop    eax
c001c7cc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c7d0:	68 29 c9 02 c0       	push   0xc002c929
c001c7d5:	e8 f5 60 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001c7da:	83 c4 10             	add    esp,0x10
c001c7dd:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c7e3:	0f 86 31 01 00 00    	jbe    c001c91a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c7e9:	c1 e6 0c             	shl    esi,0xc
c001c7ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7ef:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c7f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7f6:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c7fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c800:	01 df                	add    edi,ebx
c001c802:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c805:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c809:	0f 84 08 01 00 00    	je     c001c917 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c80f:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c815:	76 05                	jbe    c001c81c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c817:	bf 00 10 00 00       	mov    edi,0x1000
c001c81c:	83 ec 0c             	sub    esp,0xc
c001c81f:	31 d2                	xor    edx,edx
c001c821:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c828:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c82a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c82e:	50                   	push   eax
c001c82f:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c833:	56                   	push   esi
c001c834:	52                   	push   edx
c001c835:	57                   	push   edi
c001c836:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c83d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c840:	83 c4 20             	add    esp,0x20
c001c843:	85 c0                	test   eax,eax
c001c845:	74 0a                	je     c001c851 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c847:	53                   	push   ebx
c001c848:	53                   	push   ebx
c001c849:	50                   	push   eax
c001c84a:	68 3b c9 02 c0       	push   0xc002c93b
c001c84f:	eb 0f                	jmp    c001c860 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c851:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c855:	74 20                	je     c001c877 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c857:	51                   	push   ecx
c001c858:	51                   	push   ecx
c001c859:	6a 00                	push   0x0
c001c85b:	68 66 c9 02 c0       	push   0xc002c966
c001c860:	e8 6a 60 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001c865:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c868:	e8 1c 51 ff ff       	call   c0011989 <Virt::freeKernelVirtualPages(unsigned long)>
c001c86d:	83 c4 10             	add    esp,0x10
c001c870:	31 c0                	xor    eax,eax
c001c872:	e9 68 01 00 00       	jmp    c001c9df <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c877:	fa                   	cli    
c001c878:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001c87e:	e8 0e 33 ff ff       	call   c000fb91 <Phys::allocatePage()>
c001c883:	6a 07                	push   0x7
c001c885:	89 c7                	mov    edi,eax
c001c887:	55                   	push   ebp
c001c888:	50                   	push   eax
c001c889:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c88e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c891:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c897:	e8 64 54 ff ff       	call   c0011d00 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c89c:	83 c4 0c             	add    esp,0xc
c001c89f:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c8a6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8ac:	6a 00                	push   0x0
c001c8ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8b3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8b6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8bc:	e8 99 52 ff ff       	call   c0011b5a <VAS::mapOtherVASIn(bool, VAS*)>
c001c8c1:	58                   	pop    eax
c001c8c2:	5a                   	pop    edx
c001c8c3:	68 07 0c 00 00       	push   0xc07
c001c8c8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c8cc:	57                   	push   edi
c001c8cd:	89 ef                	mov    edi,ebp
c001c8cf:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c8d6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8dc:	6a 00                	push   0x0
c001c8de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8e6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8ec:	e8 cb 57 ff ff       	call   c00120bc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c8f1:	b9 00 10 00 00       	mov    ecx,0x1000
c001c8f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c8f8:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001c8fd:	83 c4 20             	add    esp,0x20
c001c900:	48                   	dec    eax
c001c901:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001c906:	85 c0                	test   eax,eax
c001c908:	75 01                	jne    c001c90b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c90a:	fb                   	sti    
c001c90b:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c912:	e9 df fe ff ff       	jmp    c001c7f6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c917:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c91a:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c922:	0f 86 a9 00 00 00    	jbe    c001c9d1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c928:	fa                   	cli    
c001c929:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001c92f:	51                   	push   ecx
c001c930:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c937:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c93d:	6a 00                	push   0x0
c001c93f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c944:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c947:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c94d:	e8 08 52 ff ff       	call   c0011b5a <VAS::mapOtherVASIn(bool, VAS*)>
c001c952:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c956:	c1 e6 0c             	shl    esi,0xc
c001c959:	01 de                	add    esi,ebx
c001c95b:	83 c4 10             	add    esp,0x10
c001c95e:	39 de                	cmp    esi,ebx
c001c960:	74 61                	je     c001c9c3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c962:	e8 2a 32 ff ff       	call   c000fb91 <Phys::allocatePage()>
c001c967:	6a 07                	push   0x7
c001c969:	89 c7                	mov    edi,eax
c001c96b:	55                   	push   ebp
c001c96c:	50                   	push   eax
c001c96d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c972:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c975:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c97b:	e8 80 53 ff ff       	call   c0011d00 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c980:	58                   	pop    eax
c001c981:	5a                   	pop    edx
c001c982:	68 07 0c 00 00       	push   0xc07
c001c987:	53                   	push   ebx
c001c988:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c98e:	57                   	push   edi
c001c98f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c996:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c99c:	6a 00                	push   0x0
c001c99e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9a3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9a6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9ac:	e8 0b 57 ff ff       	call   c00120bc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c9b1:	83 c4 1c             	add    esp,0x1c
c001c9b4:	68 00 10 00 00       	push   0x1000
c001c9b9:	6a 00                	push   0x0
c001c9bb:	55                   	push   ebp
c001c9bc:	e8 8f 3d fe ff       	call   c0000750 <memset>
c001c9c1:	eb 98                	jmp    c001c95b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c9c3:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001c9c8:	48                   	dec    eax
c001c9c9:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001c9ce:	75 01                	jne    c001c9d1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c9d0:	fb                   	sti    
c001c9d1:	83 ec 0c             	sub    esp,0xc
c001c9d4:	55                   	push   ebp
c001c9d5:	e8 af 4f ff ff       	call   c0011989 <Virt::freeKernelVirtualPages(unsigned long)>
c001c9da:	83 c4 10             	add    esp,0x10
c001c9dd:	b0 01                	mov    al,0x1
c001c9df:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c9e5:	5b                   	pop    ebx
c001c9e6:	5e                   	pop    esi
c001c9e7:	5f                   	pop    edi
c001c9e8:	5d                   	pop    ebp
c001c9e9:	c3                   	ret    

c001c9ea <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c9ea:	55                   	push   ebp
c001c9eb:	57                   	push   edi
c001c9ec:	56                   	push   esi
c001c9ed:	53                   	push   ebx
c001c9ee:	83 ec 48             	sub    esp,0x48
c001c9f1:	68 14 01 00 00       	push   0x114
c001c9f6:	e8 91 2e ff ff       	call   c000f88c <malloc>
c001c9fb:	83 c4 0c             	add    esp,0xc
c001c9fe:	89 c6                	mov    esi,eax
c001ca00:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001ca04:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001ca08:	50                   	push   eax
c001ca09:	e8 20 64 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001ca0e:	58                   	pop    eax
c001ca0f:	5a                   	pop    edx
c001ca10:	6a 01                	push   0x1
c001ca12:	56                   	push   esi
c001ca13:	e8 7a 64 ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c001ca18:	83 c4 10             	add    esp,0x10
c001ca1b:	85 c0                	test   eax,eax
c001ca1d:	0f 85 47 01 00 00    	jne    c001cb6a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca23:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ca2b:	83 ec 0c             	sub    esp,0xc
c001ca2e:	6a 34                	push   0x34
c001ca30:	e8 57 2e ff ff       	call   c000f88c <malloc>
c001ca35:	89 c3                	mov    ebx,eax
c001ca37:	58                   	pop    eax
c001ca38:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca3a:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ca3e:	57                   	push   edi
c001ca3f:	53                   	push   ebx
c001ca40:	6a 00                	push   0x0
c001ca42:	6a 34                	push   0x34
c001ca44:	56                   	push   esi
c001ca45:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ca48:	83 c4 20             	add    esp,0x20
c001ca4b:	85 c0                	test   eax,eax
c001ca4d:	0f 85 17 01 00 00    	jne    c001cb6a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca53:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ca59:	0f 85 0b 01 00 00    	jne    c001cb6a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca5f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ca62:	85 c0                	test   eax,eax
c001ca64:	0f 84 00 01 00 00    	je     c001cb6a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca6a:	31 d2                	xor    edx,edx
c001ca6c:	55                   	push   ebp
c001ca6d:	52                   	push   edx
c001ca6e:	50                   	push   eax
c001ca6f:	56                   	push   esi
c001ca70:	e8 db 64 ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001ca75:	83 c4 10             	add    esp,0x10
c001ca78:	85 c0                	test   eax,eax
c001ca7a:	0f 85 ea 00 00 00    	jne    c001cb6a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca80:	83 ec 0c             	sub    esp,0xc
c001ca83:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ca86:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ca8a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ca8e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ca92:	0f af c2             	imul   eax,edx
c001ca95:	50                   	push   eax
c001ca96:	e8 f1 2d ff ff       	call   c000f88c <malloc>
c001ca9b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ca9d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001caa1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001caa4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001caa8:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001caac:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cab0:	0f af c2             	imul   eax,edx
c001cab3:	99                   	cdq    
c001cab4:	52                   	push   edx
c001cab5:	50                   	push   eax
c001cab6:	56                   	push   esi
c001cab7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001caba:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cabd:	83 c4 20             	add    esp,0x20
c001cac0:	85 c0                	test   eax,eax
c001cac2:	0f 84 a2 00 00 00    	je     c001cb6a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cac8:	31 d2                	xor    edx,edx
c001caca:	51                   	push   ecx
c001cacb:	52                   	push   edx
c001cacc:	50                   	push   eax
c001cacd:	56                   	push   esi
c001cace:	e8 7d 64 ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001cad3:	83 c4 10             	add    esp,0x10
c001cad6:	85 c0                	test   eax,eax
c001cad8:	0f 85 8c 00 00 00    	jne    c001cb6a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cade:	83 ec 0c             	sub    esp,0xc
c001cae1:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cae5:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cae9:	31 ed                	xor    ebp,ebp
c001caeb:	0f af c2             	imul   eax,edx
c001caee:	50                   	push   eax
c001caef:	e8 98 2d ff ff       	call   c000f88c <malloc>
c001caf4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001caf6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cafa:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cafd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb01:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cb05:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cb09:	0f af c2             	imul   eax,edx
c001cb0c:	99                   	cdq    
c001cb0d:	52                   	push   edx
c001cb0e:	50                   	push   eax
c001cb0f:	56                   	push   esi
c001cb10:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb13:	83 c4 20             	add    esp,0x20
c001cb16:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cb1e:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cb22:	0f 86 80 00 00 00    	jbe    c001cba8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cb28:	0f b7 fd             	movzx  edi,bp
c001cb2b:	c1 e7 05             	shl    edi,0x5
c001cb2e:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cb32:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cb35:	75 6b                	jne    c001cba2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cb37:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cb3a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb3e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cb41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb45:	52                   	push   edx
c001cb46:	31 d2                	xor    edx,edx
c001cb48:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cb4b:	52                   	push   edx
c001cb4c:	50                   	push   eax
c001cb4d:	56                   	push   esi
c001cb4e:	e8 fd 63 ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001cb53:	83 c4 10             	add    esp,0x10
c001cb56:	85 c0                	test   eax,eax
c001cb58:	74 17                	je     c001cb71 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cb5a:	83 ec 0c             	sub    esp,0xc
c001cb5d:	68 92 c9 02 c0       	push   0xc002c992
c001cb62:	e8 68 5d ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001cb67:	83 c4 10             	add    esp,0x10
c001cb6a:	31 c0                	xor    eax,eax
c001cb6c:	e9 87 00 00 00       	jmp    c001cbf8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cb71:	83 ec 0c             	sub    esp,0xc
c001cb74:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cb77:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cb7a:	50                   	push   eax
c001cb7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cb7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb83:	56                   	push   esi
c001cb84:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cb88:	e8 b3 fb ff ff       	call   c001c740 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cb8d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cb91:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cb95:	83 c4 20             	add    esp,0x20
c001cb98:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cb9c:	73 04                	jae    c001cba2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cb9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cba2:	45                   	inc    ebp
c001cba3:	e9 76 ff ff ff       	jmp    c001cb1e <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cba8:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cbac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cbb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cbb4:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cbba:	83 ec 0c             	sub    esp,0xc
c001cbbd:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cbc3:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cbc8:	05 00 10 00 00       	add    eax,0x1000
c001cbcd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cbd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbd4:	e8 c3 2c ff ff       	call   c000f89c <free>
c001cbd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbdc:	e8 bb 2c ff ff       	call   c000f89c <free>
c001cbe1:	58                   	pop    eax
c001cbe2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cbe6:	e8 b1 2c ff ff       	call   c000f89c <free>
c001cbeb:	89 34 24             	mov    DWORD PTR [esp],esi
c001cbee:	e8 fd 62 ff ff       	call   c0012ef0 <File::close()>
c001cbf3:	83 c4 10             	add    esp,0x10
c001cbf6:	b0 01                	mov    al,0x1
c001cbf8:	83 c4 3c             	add    esp,0x3c
c001cbfb:	5b                   	pop    ebx
c001cbfc:	5e                   	pop    esi
c001cbfd:	5f                   	pop    edi
c001cbfe:	5d                   	pop    ebp
c001cbff:	c3                   	ret    

c001cc00 <Thr::runtimeReferenceHelper()>:
c001cc00:	83 ec 18             	sub    esp,0x18
c001cc03:	68 9a c9 02 c0       	push   0xc002c99a
c001cc08:	e8 c2 5c ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001cc0d:	fa                   	cli    
c001cc0e:	83 c4 10             	add    esp,0x10
c001cc11:	eb fe                	jmp    c001cc11 <Thr::runtimeReferenceHelper()+0x11>

c001cc13 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cc13:	57                   	push   edi
c001cc14:	56                   	push   esi
c001cc15:	53                   	push   ebx
c001cc16:	31 db                	xor    ebx,ebx
c001cc18:	39 1d 00 25 03 c0    	cmp    DWORD PTR ds:0xc0032500,ebx
c001cc1e:	7e 3c                	jle    c001cc5c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cc20:	8b 34 9d 80 24 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcdb80]
c001cc27:	31 ff                	xor    edi,edi
c001cc29:	39 3c 9d 80 23 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcdc80],edi
c001cc30:	7e 27                	jle    c001cc59 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cc32:	50                   	push   eax
c001cc33:	50                   	push   eax
c001cc34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc38:	8b 06                	mov    eax,DWORD PTR [esi]
c001cc3a:	03 04 9d 00 24 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcdc00]
c001cc41:	50                   	push   eax
c001cc42:	e8 51 3c fe ff       	call   c0000898 <strcmp>
c001cc47:	83 c4 10             	add    esp,0x10
c001cc4a:	85 c0                	test   eax,eax
c001cc4c:	75 05                	jne    c001cc53 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cc4e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cc51:	eb 0b                	jmp    c001cc5e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cc53:	83 c6 10             	add    esi,0x10
c001cc56:	47                   	inc    edi
c001cc57:	eb d0                	jmp    c001cc29 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cc59:	43                   	inc    ebx
c001cc5a:	eb bc                	jmp    c001cc18 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cc5c:	31 c0                	xor    eax,eax
c001cc5e:	5b                   	pop    ebx
c001cc5f:	5e                   	pop    esi
c001cc60:	5f                   	pop    edi
c001cc61:	c3                   	ret    

c001cc62 <Thr::loadKernelSymbolTable(char const*)>:
c001cc62:	55                   	push   ebp
c001cc63:	57                   	push   edi
c001cc64:	56                   	push   esi
c001cc65:	53                   	push   ebx
c001cc66:	83 ec 68             	sub    esp,0x68
c001cc69:	8b 35 50 25 03 c0    	mov    esi,DWORD PTR ds:0xc0032550
c001cc6f:	68 14 01 00 00       	push   0x114
c001cc74:	e8 13 2c ff ff       	call   c000f88c <malloc>
c001cc79:	83 c4 0c             	add    esp,0xc
c001cc7c:	89 c3                	mov    ebx,eax
c001cc7e:	56                   	push   esi
c001cc7f:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cc83:	50                   	push   eax
c001cc84:	e8 a5 61 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001cc89:	5e                   	pop    esi
c001cc8a:	5f                   	pop    edi
c001cc8b:	6a 01                	push   0x1
c001cc8d:	53                   	push   ebx
c001cc8e:	e8 ff 61 ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c001cc93:	83 c4 10             	add    esp,0x10
c001cc96:	85 c0                	test   eax,eax
c001cc98:	74 0a                	je     c001cca4 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cc9a:	83 ec 0c             	sub    esp,0xc
c001cc9d:	68 bc c9 02 c0       	push   0xc002c9bc
c001cca2:	eb 34                	jmp    c001ccd8 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cca4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001ccac:	83 ec 0c             	sub    esp,0xc
c001ccaf:	6a 34                	push   0x34
c001ccb1:	e8 d6 2b ff ff       	call   c000f88c <malloc>
c001ccb6:	59                   	pop    ecx
c001ccb7:	89 c7                	mov    edi,eax
c001ccb9:	8d 74 24 34          	lea    esi,[esp+0x34]
c001ccbd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ccbf:	56                   	push   esi
c001ccc0:	57                   	push   edi
c001ccc1:	6a 00                	push   0x0
c001ccc3:	6a 34                	push   0x34
c001ccc5:	53                   	push   ebx
c001ccc6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ccc9:	83 c4 20             	add    esp,0x20
c001cccc:	85 c0                	test   eax,eax
c001ccce:	74 17                	je     c001cce7 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001ccd0:	83 ec 0c             	sub    esp,0xc
c001ccd3:	68 d3 c9 02 c0       	push   0xc002c9d3
c001ccd8:	e8 28 d6 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001ccdd:	83 c4 10             	add    esp,0x10
c001cce0:	31 c0                	xor    eax,eax
c001cce2:	e9 31 02 00 00       	jmp    c001cf18 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cce7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cced:	75 e1                	jne    c001ccd0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ccef:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ccf2:	85 c0                	test   eax,eax
c001ccf4:	74 da                	je     c001ccd0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ccf6:	52                   	push   edx
c001ccf7:	31 d2                	xor    edx,edx
c001ccf9:	52                   	push   edx
c001ccfa:	50                   	push   eax
c001ccfb:	53                   	push   ebx
c001ccfc:	e8 4f 62 ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001cd01:	83 c4 10             	add    esp,0x10
c001cd04:	85 c0                	test   eax,eax
c001cd06:	75 c8                	jne    c001ccd0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cd08:	83 ec 0c             	sub    esp,0xc
c001cd0b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd0f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd13:	31 ed                	xor    ebp,ebp
c001cd15:	0f af c2             	imul   eax,edx
c001cd18:	50                   	push   eax
c001cd19:	e8 6e 2b ff ff       	call   c000f88c <malloc>
c001cd1e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cd20:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd24:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd2b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cd2f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cd33:	0f af c2             	imul   eax,edx
c001cd36:	99                   	cdq    
c001cd37:	52                   	push   edx
c001cd38:	50                   	push   eax
c001cd39:	53                   	push   ebx
c001cd3a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd3d:	83 c4 20             	add    esp,0x20
c001cd40:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cd48:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cd50:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cd58:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cd60:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cd64:	0f 86 aa 00 00 00    	jbe    c001ce14 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cd6a:	0f b7 f5             	movzx  esi,bp
c001cd6d:	6b f6 28             	imul   esi,esi,0x28
c001cd70:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cd74:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cd77:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd7b:	50                   	push   eax
c001cd7c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cd80:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cd84:	8b 16                	mov    edx,DWORD PTR [esi]
c001cd86:	6b c0 28             	imul   eax,eax,0x28
c001cd89:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cd8d:	89 d0                	mov    eax,edx
c001cd8f:	31 d2                	xor    edx,edx
c001cd91:	52                   	push   edx
c001cd92:	50                   	push   eax
c001cd93:	53                   	push   ebx
c001cd94:	e8 b7 61 ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001cd99:	83 c4 0c             	add    esp,0xc
c001cd9c:	6a 20                	push   0x20
c001cd9e:	6a 00                	push   0x0
c001cda0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cda4:	52                   	push   edx
c001cda5:	e8 a6 39 fe ff       	call   c0000750 <memset>
c001cdaa:	58                   	pop    eax
c001cdab:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cdad:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cdb1:	51                   	push   ecx
c001cdb2:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cdb6:	52                   	push   edx
c001cdb7:	6a 00                	push   0x0
c001cdb9:	6a 1f                	push   0x1f
c001cdbb:	53                   	push   ebx
c001cdbc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdbf:	83 c4 18             	add    esp,0x18
c001cdc2:	68 ea c9 02 c0       	push   0xc002c9ea
c001cdc7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cdcb:	52                   	push   edx
c001cdcc:	e8 c7 3a fe ff       	call   c0000898 <strcmp>
c001cdd1:	83 c4 10             	add    esp,0x10
c001cdd4:	85 c0                	test   eax,eax
c001cdd6:	75 0f                	jne    c001cde7 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cdd8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cddf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cde3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cde7:	50                   	push   eax
c001cde8:	50                   	push   eax
c001cde9:	68 f2 c9 02 c0       	push   0xc002c9f2
c001cdee:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cdf2:	50                   	push   eax
c001cdf3:	e8 a0 3a fe ff       	call   c0000898 <strcmp>
c001cdf8:	83 c4 10             	add    esp,0x10
c001cdfb:	85 c0                	test   eax,eax
c001cdfd:	75 0f                	jne    c001ce0e <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cdff:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce02:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ce06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ce0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ce0e:	45                   	inc    ebp
c001ce0f:	e9 4c ff ff ff       	jmp    c001cd60 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001ce14:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ce19:	75 10                	jne    c001ce2b <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001ce1b:	83 ec 0c             	sub    esp,0xc
c001ce1e:	68 fa c9 02 c0       	push   0xc002c9fa
c001ce23:	e8 dd d4 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001ce28:	83 c4 10             	add    esp,0x10
c001ce2b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001ce30:	75 10                	jne    c001ce42 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001ce32:	83 ec 0c             	sub    esp,0xc
c001ce35:	68 fa c9 02 c0       	push   0xc002c9fa
c001ce3a:	e8 c6 d4 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001ce3f:	83 c4 10             	add    esp,0x10
c001ce42:	31 d2                	xor    edx,edx
c001ce44:	50                   	push   eax
c001ce45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce49:	52                   	push   edx
c001ce4a:	50                   	push   eax
c001ce4b:	53                   	push   ebx
c001ce4c:	e8 ff 60 ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001ce51:	5a                   	pop    edx
c001ce52:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ce56:	e8 31 2a ff ff       	call   c000f88c <malloc>
c001ce5b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce5f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ce63:	31 c9                	xor    ecx,ecx
c001ce65:	5e                   	pop    esi
c001ce66:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce68:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001ce6c:	55                   	push   ebp
c001ce6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce71:	51                   	push   ecx
c001ce72:	52                   	push   edx
c001ce73:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ce77:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ce7b:	53                   	push   ebx
c001ce7c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce7f:	83 c4 14             	add    esp,0x14
c001ce82:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ce86:	e8 01 2a ff ff       	call   c000f88c <malloc>
c001ce8b:	89 c6                	mov    esi,eax
c001ce8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce8f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce92:	56                   	push   esi
c001ce93:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ce97:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ce9b:	51                   	push   ecx
c001ce9c:	52                   	push   edx
c001ce9d:	53                   	push   ebx
c001ce9e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cea1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cea5:	8b 15 00 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032500
c001ceab:	83 c4 1c             	add    esp,0x1c
c001ceae:	c1 e8 04             	shr    eax,0x4
c001ceb1:	89 04 95 80 23 03 c0 	mov    DWORD PTR [edx*4-0x3ffcdc80],eax
c001ceb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cebc:	31 d2                	xor    edx,edx
c001cebe:	52                   	push   edx
c001cebf:	50                   	push   eax
c001cec0:	53                   	push   ebx
c001cec1:	e8 8a 60 ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001cec6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cec8:	31 d2                	xor    edx,edx
c001ceca:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cecd:	56                   	push   esi
c001cece:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ced2:	52                   	push   edx
c001ced3:	50                   	push   eax
c001ced4:	53                   	push   ebx
c001ced5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ced8:	83 c4 14             	add    esp,0x14
c001cedb:	53                   	push   ebx
c001cedc:	e8 0f 60 ff ff       	call   c0012ef0 <File::close()>
c001cee1:	5d                   	pop    ebp
c001cee2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cee6:	e8 b1 29 ff ff       	call   c000f89c <free>
c001ceeb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ceee:	e8 a9 29 ff ff       	call   c000f89c <free>
c001cef3:	a1 00 25 03 c0       	mov    eax,ds:0xc0032500
c001cef8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cefc:	8d 50 01             	lea    edx,[eax+0x1]
c001ceff:	89 0c 85 80 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb80],ecx
c001cf06:	89 34 85 00 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdc00],esi
c001cf0d:	89 15 00 25 03 c0    	mov    DWORD PTR ds:0xc0032500,edx
c001cf13:	83 c4 10             	add    esp,0x10
c001cf16:	b0 01                	mov    al,0x1
c001cf18:	83 c4 5c             	add    esp,0x5c
c001cf1b:	5b                   	pop    ebx
c001cf1c:	5e                   	pop    esi
c001cf1d:	5f                   	pop    edi
c001cf1e:	5d                   	pop    ebp
c001cf1f:	c3                   	ret    

c001cf20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cf20:	55                   	push   ebp
c001cf21:	57                   	push   edi
c001cf22:	56                   	push   esi
c001cf23:	53                   	push   ebx
c001cf24:	81 ec 68 03 00 00    	sub    esp,0x368
c001cf2a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cf31:	8b 1d 50 25 03 c0    	mov    ebx,DWORD PTR ds:0xc0032550
c001cf37:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cf3b:	68 14 01 00 00       	push   0x114
c001cf40:	e8 47 29 ff ff       	call   c000f88c <malloc>
c001cf45:	83 c4 0c             	add    esp,0xc
c001cf48:	89 c5                	mov    ebp,eax
c001cf4a:	53                   	push   ebx
c001cf4b:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cf52:	50                   	push   eax
c001cf53:	e8 d6 5e ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001cf58:	5e                   	pop    esi
c001cf59:	5f                   	pop    edi
c001cf5a:	6a 01                	push   0x1
c001cf5c:	55                   	push   ebp
c001cf5d:	e8 30 5f ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c001cf62:	83 c4 10             	add    esp,0x10
c001cf65:	85 c0                	test   eax,eax
c001cf67:	0f 85 a7 06 00 00    	jne    c001d614 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cf6d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cf75:	83 ec 0c             	sub    esp,0xc
c001cf78:	6a 34                	push   0x34
c001cf7a:	e8 0d 29 ff ff       	call   c000f88c <malloc>
c001cf7f:	5b                   	pop    ebx
c001cf80:	89 c7                	mov    edi,eax
c001cf82:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cf86:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf89:	53                   	push   ebx
c001cf8a:	57                   	push   edi
c001cf8b:	6a 00                	push   0x0
c001cf8d:	6a 34                	push   0x34
c001cf8f:	55                   	push   ebp
c001cf90:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf93:	83 c4 20             	add    esp,0x20
c001cf96:	85 c0                	test   eax,eax
c001cf98:	0f 85 76 06 00 00    	jne    c001d614 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cf9e:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cfa4:	0f 85 6a 06 00 00    	jne    c001d614 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cfaa:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cfad:	85 c0                	test   eax,eax
c001cfaf:	0f 84 5f 06 00 00    	je     c001d614 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cfb5:	31 d2                	xor    edx,edx
c001cfb7:	51                   	push   ecx
c001cfb8:	52                   	push   edx
c001cfb9:	50                   	push   eax
c001cfba:	55                   	push   ebp
c001cfbb:	e8 90 5f ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001cfc0:	83 c4 10             	add    esp,0x10
c001cfc3:	85 c0                	test   eax,eax
c001cfc5:	0f 85 49 06 00 00    	jne    c001d614 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cfcb:	83 ec 0c             	sub    esp,0xc
c001cfce:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001cfd1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cfd5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001cfd9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cfdd:	0f af c2             	imul   eax,edx
c001cfe0:	50                   	push   eax
c001cfe1:	e8 a6 28 ff ff       	call   c000f88c <malloc>
c001cfe6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cfe9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cfed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cff0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cff4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cff8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cffc:	0f af c2             	imul   eax,edx
c001cfff:	99                   	cdq    
c001d000:	52                   	push   edx
c001d001:	50                   	push   eax
c001d002:	55                   	push   ebp
c001d003:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d006:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d009:	83 c4 20             	add    esp,0x20
c001d00c:	85 c0                	test   eax,eax
c001d00e:	0f 84 00 06 00 00    	je     c001d614 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d014:	52                   	push   edx
c001d015:	31 d2                	xor    edx,edx
c001d017:	52                   	push   edx
c001d018:	50                   	push   eax
c001d019:	55                   	push   ebp
c001d01a:	e8 31 5f ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001d01f:	83 c4 10             	add    esp,0x10
c001d022:	85 c0                	test   eax,eax
c001d024:	0f 85 ea 05 00 00    	jne    c001d614 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d02a:	83 ec 0c             	sub    esp,0xc
c001d02d:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d031:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d035:	31 f6                	xor    esi,esi
c001d037:	0f af c2             	imul   eax,edx
c001d03a:	50                   	push   eax
c001d03b:	e8 4c 28 ff ff       	call   c000f88c <malloc>
c001d040:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d043:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d047:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d04a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d04e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d052:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d056:	0f af c2             	imul   eax,edx
c001d059:	99                   	cdq    
c001d05a:	52                   	push   edx
c001d05b:	50                   	push   eax
c001d05c:	55                   	push   ebp
c001d05d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d060:	83 c4 20             	add    esp,0x20
c001d063:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d067:	0f 86 8a 00 00 00    	jbe    c001d0f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d06d:	0f b7 de             	movzx  ebx,si
c001d070:	c1 e3 05             	shl    ebx,0x5
c001d073:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d077:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d07a:	75 75                	jne    c001d0f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d07c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d07f:	31 d2                	xor    edx,edx
c001d081:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d085:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d088:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d08c:	50                   	push   eax
c001d08d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d090:	52                   	push   edx
c001d091:	50                   	push   eax
c001d092:	55                   	push   ebp
c001d093:	e8 b8 5e ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001d098:	83 c4 10             	add    esp,0x10
c001d09b:	85 c0                	test   eax,eax
c001d09d:	0f 85 71 05 00 00    	jne    c001d614 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d0a3:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d0aa:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0ad:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d0b1:	31 d2                	xor    edx,edx
c001d0b3:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d0b7:	83 ec 0c             	sub    esp,0xc
c001d0ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d0be:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0c5:	50                   	push   eax
c001d0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d0ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0ce:	52                   	push   edx
c001d0cf:	50                   	push   eax
c001d0d0:	55                   	push   ebp
c001d0d1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0d4:	83 c4 1c             	add    esp,0x1c
c001d0d7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d0da:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d0dd:	50                   	push   eax
c001d0de:	6a 00                	push   0x0
c001d0e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0e4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d0e8:	50                   	push   eax
c001d0e9:	e8 62 36 fe ff       	call   c0000750 <memset>
c001d0ee:	83 c4 10             	add    esp,0x10
c001d0f1:	46                   	inc    esi
c001d0f2:	e9 6c ff ff ff       	jmp    c001d063 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d0f7:	53                   	push   ebx
c001d0f8:	31 db                	xor    ebx,ebx
c001d0fa:	68 00 01 00 00       	push   0x100
c001d0ff:	6a 00                	push   0x0
c001d101:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d105:	50                   	push   eax
c001d106:	e8 45 36 fe ff       	call   c0000750 <memset>
c001d10b:	83 c4 0c             	add    esp,0xc
c001d10e:	68 00 01 00 00       	push   0x100
c001d113:	6a 00                	push   0x0
c001d115:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d11c:	50                   	push   eax
c001d11d:	e8 2e 36 fe ff       	call   c0000750 <memset>
c001d122:	83 c4 10             	add    esp,0x10
c001d125:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d12d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d135:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d13d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d145:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d14d:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d151:	0f 86 30 01 00 00    	jbe    c001d287 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d157:	0f b7 f3             	movzx  esi,bx
c001d15a:	6b f6 28             	imul   esi,esi,0x28
c001d15d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d161:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d164:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d168:	52                   	push   edx
c001d169:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d16d:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d171:	8b 06                	mov    eax,DWORD PTR [esi]
c001d173:	6b d2 28             	imul   edx,edx,0x28
c001d176:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d17a:	31 d2                	xor    edx,edx
c001d17c:	52                   	push   edx
c001d17d:	50                   	push   eax
c001d17e:	55                   	push   ebp
c001d17f:	e8 cc 5d ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001d184:	83 c4 0c             	add    esp,0xc
c001d187:	6a 20                	push   0x20
c001d189:	6a 00                	push   0x0
c001d18b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d192:	51                   	push   ecx
c001d193:	e8 b8 35 fe ff       	call   c0000750 <memset>
c001d198:	59                   	pop    ecx
c001d199:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d19c:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d1a0:	52                   	push   edx
c001d1a1:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d1a8:	51                   	push   ecx
c001d1a9:	6a 00                	push   0x0
c001d1ab:	6a 1f                	push   0x1f
c001d1ad:	55                   	push   ebp
c001d1ae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d1b1:	83 c4 1c             	add    esp,0x1c
c001d1b4:	6a 09                	push   0x9
c001d1b6:	68 14 ca 02 c0       	push   0xc002ca14
c001d1bb:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d1c2:	51                   	push   ecx
c001d1c3:	e8 84 34 fe ff       	call   c000064c <memcmp>
c001d1c8:	83 c4 10             	add    esp,0x10
c001d1cb:	85 c0                	test   eax,eax
c001d1cd:	75 21                	jne    c001d1f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d1cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d1d7:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d1db:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d1df:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1e2:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d1e9:	89 d0                	mov    eax,edx
c001d1eb:	40                   	inc    eax
c001d1ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1f0:	50                   	push   eax
c001d1f1:	6a 09                	push   0x9
c001d1f3:	68 1e ca 02 c0       	push   0xc002ca1e
c001d1f8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1ff:	50                   	push   eax
c001d200:	e8 47 34 fe ff       	call   c000064c <memcmp>
c001d205:	83 c4 10             	add    esp,0x10
c001d208:	85 c0                	test   eax,eax
c001d20a:	75 21                	jne    c001d22d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d20c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d210:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d214:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d218:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d21c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d21f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d226:	89 d0                	mov    eax,edx
c001d228:	40                   	inc    eax
c001d229:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d22d:	50                   	push   eax
c001d22e:	50                   	push   eax
c001d22f:	68 ea c9 02 c0       	push   0xc002c9ea
c001d234:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d23b:	50                   	push   eax
c001d23c:	e8 57 36 fe ff       	call   c0000898 <strcmp>
c001d241:	83 c4 10             	add    esp,0x10
c001d244:	85 c0                	test   eax,eax
c001d246:	75 0f                	jne    c001d257 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d248:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d24b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d24f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d253:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d257:	50                   	push   eax
c001d258:	50                   	push   eax
c001d259:	68 f2 c9 02 c0       	push   0xc002c9f2
c001d25e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d265:	50                   	push   eax
c001d266:	e8 2d 36 fe ff       	call   c0000898 <strcmp>
c001d26b:	83 c4 10             	add    esp,0x10
c001d26e:	85 c0                	test   eax,eax
c001d270:	75 0f                	jne    c001d281 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d272:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d275:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d279:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d27d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d281:	43                   	inc    ebx
c001d282:	e9 c6 fe ff ff       	jmp    c001d14d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d287:	31 d2                	xor    edx,edx
c001d289:	50                   	push   eax
c001d28a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d28e:	52                   	push   edx
c001d28f:	50                   	push   eax
c001d290:	55                   	push   ebp
c001d291:	e8 ba 5c ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001d296:	58                   	pop    eax
c001d297:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d29b:	e8 ec 25 ff ff       	call   c000f88c <malloc>
c001d2a0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d2a3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d2a7:	31 d2                	xor    edx,edx
c001d2a9:	58                   	pop    eax
c001d2aa:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d2ae:	53                   	push   ebx
c001d2af:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d2b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2b7:	52                   	push   edx
c001d2b8:	50                   	push   eax
c001d2b9:	55                   	push   ebp
c001d2ba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2bd:	83 c4 14             	add    esp,0x14
c001d2c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d2c4:	e8 c3 25 ff ff       	call   c000f88c <malloc>
c001d2c9:	31 d2                	xor    edx,edx
c001d2cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d2cf:	83 c4 0c             	add    esp,0xc
c001d2d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2d6:	52                   	push   edx
c001d2d7:	50                   	push   eax
c001d2d8:	55                   	push   ebp
c001d2d9:	e8 72 5c ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001d2de:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d2e1:	31 d2                	xor    edx,edx
c001d2e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d2e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d2ea:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d2ee:	52                   	push   edx
c001d2ef:	50                   	push   eax
c001d2f0:	55                   	push   ebp
c001d2f1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2f4:	83 c4 20             	add    esp,0x20
c001d2f7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d2ff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d303:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d307:	0f 84 0b 03 00 00    	je     c001d618 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d30d:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d314:	31 d2                	xor    edx,edx
c001d316:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d31a:	c1 e8 03             	shr    eax,0x3
c001d31d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d321:	51                   	push   ecx
c001d322:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d326:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d32a:	52                   	push   edx
c001d32b:	50                   	push   eax
c001d32c:	55                   	push   ebp
c001d32d:	e8 1e 5c ff ff       	call   c0012f50 <File::seek(unsigned long long)>
c001d332:	5b                   	pop    ebx
c001d333:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d337:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d33e:	e8 49 25 ff ff       	call   c000f88c <malloc>
c001d343:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d346:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d34a:	31 d2                	xor    edx,edx
c001d34c:	5e                   	pop    esi
c001d34d:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d351:	50                   	push   eax
c001d352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d356:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d35a:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d361:	52                   	push   edx
c001d362:	50                   	push   eax
c001d363:	55                   	push   ebp
c001d364:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d367:	83 c4 20             	add    esp,0x20
c001d36a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d372:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d376:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d37a:	0f 8d 7c 02 00 00    	jge    c001d5fc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d380:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d384:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d388:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d38d:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d390:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d394:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d398:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d39c:	89 d8                	mov    eax,ebx
c001d39e:	c1 e8 08             	shr    eax,0x8
c001d3a1:	89 c6                	mov    esi,eax
c001d3a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d3a7:	c1 e6 04             	shl    esi,0x4
c001d3aa:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d3ae:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d3b1:	85 d2                	test   edx,edx
c001d3b3:	0f 85 bf 00 00 00    	jne    c001d478 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3b9:	83 ec 0c             	sub    esp,0xc
c001d3bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3c0:	03 06                	add    eax,DWORD PTR [esi]
c001d3c2:	50                   	push   eax
c001d3c3:	e8 4b f8 ff ff       	call   c001cc13 <Thr::getAddressOfKernelSymbol(char const*)>
c001d3c8:	83 c4 10             	add    esp,0x10
c001d3cb:	89 c2                	mov    edx,eax
c001d3cd:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d3d2:	85 c0                	test   eax,eax
c001d3d4:	0f 85 9e 00 00 00    	jne    c001d478 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3da:	83 ec 0c             	sub    esp,0xc
c001d3dd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d3e1:	03 06                	add    eax,DWORD PTR [esi]
c001d3e3:	50                   	push   eax
c001d3e4:	e8 56 11 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001d3e9:	83 c4 10             	add    esp,0x10
c001d3ec:	89 c2                	mov    edx,eax
c001d3ee:	85 c0                	test   eax,eax
c001d3f0:	0f 85 82 00 00 00    	jne    c001d478 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3f6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d3fa:	50                   	push   eax
c001d3fb:	50                   	push   eax
c001d3fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d400:	03 06                	add    eax,DWORD PTR [esi]
c001d402:	50                   	push   eax
c001d403:	68 28 ca 02 c0       	push   0xc002ca28
c001d408:	e8 c2 54 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001d40d:	58                   	pop    eax
c001d40e:	5a                   	pop    edx
c001d40f:	68 42 ca 02 c0       	push   0xc002ca42
c001d414:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d41b:	50                   	push   eax
c001d41c:	e8 eb 33 fe ff       	call   c000080c <strcpy>
c001d421:	59                   	pop    ecx
c001d422:	58                   	pop    eax
c001d423:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d427:	03 06                	add    eax,DWORD PTR [esi]
c001d429:	50                   	push   eax
c001d42a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d431:	50                   	push   eax
c001d432:	e8 15 35 fe ff       	call   c000094c <strcat>
c001d437:	58                   	pop    eax
c001d438:	5a                   	pop    edx
c001d439:	68 d8 ca 02 c0       	push   0xc002cad8
c001d43e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d445:	50                   	push   eax
c001d446:	e8 01 35 fe ff       	call   c000094c <strcat>
c001d44b:	83 c4 10             	add    esp,0x10
c001d44e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d453:	0f 84 5d 01 00 00    	je     c001d5b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d459:	83 ec 0c             	sub    esp,0xc
c001d45c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d463:	50                   	push   eax
c001d464:	e8 9c ce ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001d469:	83 c4 10             	add    esp,0x10
c001d46c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d470:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d474:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d478:	80 fb 01             	cmp    bl,0x1
c001d47b:	0f 85 88 00 00 00    	jne    c001d509 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d481:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d488:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d48c:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d490:	01 ce                	add    esi,ecx
c001d492:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d498:	0f 94 c0             	sete   al
c001d49b:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d4a1:	0f 94 c3             	sete   bl
c001d4a4:	09 c3                	or     ebx,eax
c001d4a6:	8b 06                	mov    eax,DWORD PTR [esi]
c001d4a8:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d4ad:	74 41                	je     c001d4f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d4af:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d4b2:	84 db                	test   bl,bl
c001d4b4:	75 15                	jne    c001d4cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d4b6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d4ba:	66 83 f8 0c          	cmp    ax,0xc
c001d4be:	76 05                	jbe    c001d4c5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d4c0:	b8 0c 00 00 00       	mov    eax,0xc
c001d4c5:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d4c9:	76 37                	jbe    c001d502 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d4cb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d4cf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4d4:	0f 84 dc 00 00 00    	je     c001d5b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d4da:	83 ec 0c             	sub    esp,0xc
c001d4dd:	68 59 ca 02 c0       	push   0xc002ca59
c001d4e2:	e8 1e ce ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001d4e7:	83 c4 10             	add    esp,0x10
c001d4ea:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d4ee:	eb 12                	jmp    c001d502 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d4f0:	01 c1                	add    ecx,eax
c001d4f2:	84 db                	test   bl,bl
c001d4f4:	75 0c                	jne    c001d502 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d4f6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d4fa:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d4fe:	77 02                	ja     c001d502 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d500:	01 d1                	add    ecx,edx
c001d502:	89 0e                	mov    DWORD PTR [esi],ecx
c001d504:	e9 ea 00 00 00       	jmp    c001d5f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d509:	80 fb 02             	cmp    bl,0x2
c001d50c:	75 7c                	jne    c001d58a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d50e:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d515:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d519:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d51d:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d523:	74 20                	je     c001d545 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d525:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d52b:	74 18                	je     c001d545 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d52d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d531:	b9 0a 00 00 00       	mov    ecx,0xa
c001d536:	66 83 f8 0e          	cmp    ax,0xe
c001d53a:	77 03                	ja     c001d53f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d53c:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d53f:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d543:	76 1f                	jbe    c001d564 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d545:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d549:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d54e:	74 66                	je     c001d5b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d550:	83 ec 0c             	sub    esp,0xc
c001d553:	68 75 ca 02 c0       	push   0xc002ca75
c001d558:	e8 a8 cd ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001d55d:	83 c4 10             	add    esp,0x10
c001d560:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d564:	8b 06                	mov    eax,DWORD PTR [esi]
c001d566:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d56b:	74 13                	je     c001d580 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d56d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d571:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d578:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d57c:	01 c8                	add    eax,ecx
c001d57e:	eb 04                	jmp    c001d584 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d580:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d584:	01 c2                	add    edx,eax
c001d586:	89 16                	mov    DWORD PTR [esi],edx
c001d588:	eb 69                	jmp    c001d5f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d58a:	0f b6 db             	movzx  ebx,bl
c001d58d:	50                   	push   eax
c001d58e:	50                   	push   eax
c001d58f:	53                   	push   ebx
c001d590:	68 91 ca 02 c0       	push   0xc002ca91
c001d595:	e8 35 53 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001d59a:	83 c4 10             	add    esp,0x10
c001d59d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5a2:	74 12                	je     c001d5b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d5a4:	83 ec 0c             	sub    esp,0xc
c001d5a7:	68 9c ca 02 c0       	push   0xc002ca9c
c001d5ac:	e8 54 cd ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001d5b1:	83 c4 10             	add    esp,0x10
c001d5b4:	eb 3d                	jmp    c001d5f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d5b6:	83 ec 0c             	sub    esp,0xc
c001d5b9:	55                   	push   ebp
c001d5ba:	e8 31 59 ff ff       	call   c0012ef0 <File::close()>
c001d5bf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d5c2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d5c5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d5c8:	59                   	pop    ecx
c001d5c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5cd:	e8 ca 22 ff ff       	call   c000f89c <free>
c001d5d2:	5b                   	pop    ebx
c001d5d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d5d7:	e8 c0 22 ff ff       	call   c000f89c <free>
c001d5dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d5df:	e8 b8 22 ff ff       	call   c000f89c <free>
c001d5e4:	5e                   	pop    esi
c001d5e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5e9:	e8 ae 22 ff ff       	call   c000f89c <free>
c001d5ee:	83 c4 10             	add    esp,0x10
c001d5f1:	eb 21                	jmp    c001d614 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d5f3:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d5f7:	e9 76 fd ff ff       	jmp    c001d372 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d5fc:	83 ec 0c             	sub    esp,0xc
c001d5ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d603:	e8 94 22 ff ff       	call   c000f89c <free>
c001d608:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d60c:	83 c4 10             	add    esp,0x10
c001d60f:	e9 eb fc ff ff       	jmp    c001d2ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d614:	31 c0                	xor    eax,eax
c001d616:	eb 33                	jmp    c001d64b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d618:	83 ec 0c             	sub    esp,0xc
c001d61b:	55                   	push   ebp
c001d61c:	e8 cf 58 ff ff       	call   c0012ef0 <File::close()>
c001d621:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d624:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d627:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d62a:	58                   	pop    eax
c001d62b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d62f:	e8 68 22 ff ff       	call   c000f89c <free>
c001d634:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d637:	e8 60 22 ff ff       	call   c000f89c <free>
c001d63c:	5a                   	pop    edx
c001d63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d641:	e8 56 22 ff ff       	call   c000f89c <free>
c001d646:	83 c4 10             	add    esp,0x10
c001d649:	b0 01                	mov    al,0x1
c001d64b:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d651:	5b                   	pop    ebx
c001d652:	5e                   	pop    esi
c001d653:	5f                   	pop    edi
c001d654:	5d                   	pop    ebp
c001d655:	c3                   	ret    

c001d656 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d656:	56                   	push   esi
c001d657:	31 d2                	xor    edx,edx
c001d659:	53                   	push   ebx
c001d65a:	8b 1d 60 1d 03 c0    	mov    ebx,DWORD PTR ds:0xc0031d60
c001d660:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d664:	39 d3                	cmp    ebx,edx
c001d666:	7e 1b                	jle    c001d683 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d668:	8b 04 95 80 1f 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffce080]
c001d66f:	39 c8                	cmp    eax,ecx
c001d671:	77 0d                	ja     c001d680 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d673:	8b 34 95 80 1d 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce280]
c001d67a:	01 c6                	add    esi,eax
c001d67c:	39 ce                	cmp    esi,ecx
c001d67e:	77 05                	ja     c001d685 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d680:	42                   	inc    edx
c001d681:	eb e1                	jmp    c001d664 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d683:	31 c0                	xor    eax,eax
c001d685:	5b                   	pop    ebx
c001d686:	5e                   	pop    esi
c001d687:	c3                   	ret    

c001d688 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d688:	53                   	push   ebx
c001d689:	31 c0                	xor    eax,eax
c001d68b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d68f:	8b 1d 60 1d 03 c0    	mov    ebx,DWORD PTR ds:0xc0031d60
c001d695:	39 c3                	cmp    ebx,eax
c001d697:	7e 22                	jle    c001d6bb <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d699:	8b 14 85 80 1f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce080]
c001d6a0:	39 ca                	cmp    edx,ecx
c001d6a2:	77 14                	ja     c001d6b8 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d6a4:	03 14 85 80 1d 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce280]
c001d6ab:	39 ca                	cmp    edx,ecx
c001d6ad:	76 09                	jbe    c001d6b8 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d6af:	8b 04 85 80 21 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcde80]
c001d6b6:	eb 05                	jmp    c001d6bd <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d6b8:	40                   	inc    eax
c001d6b9:	eb da                	jmp    c001d695 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d6bb:	31 c0                	xor    eax,eax
c001d6bd:	5b                   	pop    ebx
c001d6be:	c3                   	ret    

c001d6bf <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d6bf:	53                   	push   ebx
c001d6c0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d6c4:	53                   	push   ebx
c001d6c5:	e8 8c ff ff ff       	call   c001d656 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d6ca:	5a                   	pop    edx
c001d6cb:	31 d2                	xor    edx,edx
c001d6cd:	85 c0                	test   eax,eax
c001d6cf:	74 04                	je     c001d6d5 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d6d1:	89 da                	mov    edx,ebx
c001d6d3:	29 c2                	sub    edx,eax
c001d6d5:	89 d0                	mov    eax,edx
c001d6d7:	5b                   	pop    ebx
c001d6d8:	c3                   	ret    

c001d6d9 <Thr::loadDLL(char const*, bool)>:
c001d6d9:	55                   	push   ebp
c001d6da:	57                   	push   edi
c001d6db:	56                   	push   esi
c001d6dc:	53                   	push   ebx
c001d6dd:	81 ec 34 01 00 00    	sub    esp,0x134
c001d6e3:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d6ea:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d6f1:	56                   	push   esi
c001d6f2:	68 b4 ca 02 c0       	push   0xc002cab4
c001d6f7:	e8 d3 51 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001d6fc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d703:	e8 84 21 ff ff       	call   c000f88c <malloc>
c001d708:	83 c4 0c             	add    esp,0xc
c001d70b:	89 c3                	mov    ebx,eax
c001d70d:	ff 35 50 25 03 c0    	push   DWORD PTR ds:0xc0032550
c001d713:	56                   	push   esi
c001d714:	50                   	push   eax
c001d715:	e8 14 57 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001d71a:	83 c4 10             	add    esp,0x10
c001d71d:	85 db                	test   ebx,ebx
c001d71f:	75 3c                	jne    c001d75d <Thr::loadDLL(char const*, bool)+0x84>
c001d721:	89 f8                	mov    eax,edi
c001d723:	84 c0                	test   al,al
c001d725:	0f 84 cc 01 00 00    	je     c001d8f7 <Thr::loadDLL(char const*, bool)+0x21e>
c001d72b:	55                   	push   ebp
c001d72c:	55                   	push   ebp
c001d72d:	68 c5 ca 02 c0       	push   0xc002cac5
c001d732:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d736:	55                   	push   ebp
c001d737:	e8 d0 30 fe ff       	call   c000080c <strcpy>
c001d73c:	58                   	pop    eax
c001d73d:	5a                   	pop    edx
c001d73e:	56                   	push   esi
c001d73f:	55                   	push   ebp
c001d740:	e8 07 32 fe ff       	call   c000094c <strcat>
c001d745:	59                   	pop    ecx
c001d746:	58                   	pop    eax
c001d747:	68 d8 ca 02 c0       	push   0xc002cad8
c001d74c:	55                   	push   ebp
c001d74d:	e8 fa 31 fe ff       	call   c000094c <strcat>
c001d752:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d755:	e8 ab cb ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001d75a:	83 c4 10             	add    esp,0x10
c001d75d:	51                   	push   ecx
c001d75e:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d762:	50                   	push   eax
c001d763:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d767:	50                   	push   eax
c001d768:	53                   	push   ebx
c001d769:	e8 d0 59 ff ff       	call   c001313e <File::stat(unsigned long long*, bool*)>
c001d76e:	83 c4 10             	add    esp,0x10
c001d771:	85 db                	test   ebx,ebx
c001d773:	74 0c                	je     c001d781 <Thr::loadDLL(char const*, bool)+0xa8>
c001d775:	83 ec 0c             	sub    esp,0xc
c001d778:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d77a:	53                   	push   ebx
c001d77b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d77e:	83 c4 10             	add    esp,0x10
c001d781:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d786:	75 0a                	jne    c001d792 <Thr::loadDLL(char const*, bool)+0xb9>
c001d788:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d78c:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d790:	75 3c                	jne    c001d7ce <Thr::loadDLL(char const*, bool)+0xf5>
c001d792:	89 f8                	mov    eax,edi
c001d794:	84 c0                	test   al,al
c001d796:	0f 84 43 01 00 00    	je     c001d8df <Thr::loadDLL(char const*, bool)+0x206>
c001d79c:	51                   	push   ecx
c001d79d:	51                   	push   ecx
c001d79e:	68 c5 ca 02 c0       	push   0xc002cac5
c001d7a3:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d7a7:	53                   	push   ebx
c001d7a8:	e8 5f 30 fe ff       	call   c000080c <strcpy>
c001d7ad:	5d                   	pop    ebp
c001d7ae:	58                   	pop    eax
c001d7af:	56                   	push   esi
c001d7b0:	53                   	push   ebx
c001d7b1:	e8 96 31 fe ff       	call   c000094c <strcat>
c001d7b6:	58                   	pop    eax
c001d7b7:	5a                   	pop    edx
c001d7b8:	68 d8 ca 02 c0       	push   0xc002cad8
c001d7bd:	53                   	push   ebx
c001d7be:	e8 89 31 fe ff       	call   c000094c <strcat>
c001d7c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d7c6:	e8 3a cb ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001d7cb:	83 c4 10             	add    esp,0x10
c001d7ce:	52                   	push   edx
c001d7cf:	6a 03                	push   0x3
c001d7d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7d5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d7d9:	05 ff 0f 00 00       	add    eax,0xfff
c001d7de:	83 d2 00             	adc    edx,0x0
c001d7e1:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d7e5:	50                   	push   eax
c001d7e6:	ff 35 70 f1 02 c0    	push   DWORD PTR ds:0xc002f170
c001d7ec:	e8 11 46 ff ff       	call   c0011e02 <VAS::allocatePages(int, int)>
c001d7f1:	59                   	pop    ecx
c001d7f2:	89 c3                	mov    ebx,eax
c001d7f4:	5d                   	pop    ebp
c001d7f5:	50                   	push   eax
c001d7f6:	68 da ca 02 c0       	push   0xc002cada
c001d7fb:	e8 cf 50 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001d800:	89 34 24             	mov    DWORD PTR [esp],esi
c001d803:	e8 64 2f fe ff       	call   c000076c <strlen>
c001d808:	8b 2d 60 1d 03 c0    	mov    ebp,DWORD PTR ds:0xc0031d60
c001d80e:	40                   	inc    eax
c001d80f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d812:	e8 75 20 ff ff       	call   c000f88c <malloc>
c001d817:	89 04 ad 80 21 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcde80],eax
c001d81e:	58                   	pop    eax
c001d81f:	a1 60 1d 03 c0       	mov    eax,ds:0xc0031d60
c001d824:	5a                   	pop    edx
c001d825:	56                   	push   esi
c001d826:	ff 34 85 80 21 03 c0 	push   DWORD PTR [eax*4-0x3ffcde80]
c001d82d:	e8 da 2f fe ff       	call   c000080c <strcpy>
c001d832:	a1 60 1d 03 c0       	mov    eax,ds:0xc0031d60
c001d837:	8d 50 01             	lea    edx,[eax+0x1]
c001d83a:	89 1c 85 80 1f 03 c0 	mov    DWORD PTR [eax*4-0x3ffce080],ebx
c001d841:	89 15 60 1d 03 c0    	mov    DWORD PTR ds:0xc0031d60,edx
c001d847:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d84b:	83 c4 0c             	add    esp,0xc
c001d84e:	89 14 85 80 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce280],edx
c001d855:	6a 01                	push   0x1
c001d857:	53                   	push   ebx
c001d858:	56                   	push   esi
c001d859:	e8 c2 f6 ff ff       	call   c001cf20 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d85e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d862:	83 c4 10             	add    esp,0x10
c001d865:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d86a:	0f 85 83 00 00 00    	jne    c001d8f3 <Thr::loadDLL(char const*, bool)+0x21a>
c001d870:	89 f8                	mov    eax,edi
c001d872:	84 c0                	test   al,al
c001d874:	74 6d                	je     c001d8e3 <Thr::loadDLL(char const*, bool)+0x20a>
c001d876:	83 ec 0c             	sub    esp,0xc
c001d879:	68 e7 ca 02 c0       	push   0xc002cae7
c001d87e:	e8 82 ca ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001d883:	83 c4 10             	add    esp,0x10
c001d886:	eb 5b                	jmp    c001d8e3 <Thr::loadDLL(char const*, bool)+0x20a>
c001d888:	89 ee                	mov    esi,ebp
c001d88a:	50                   	push   eax
c001d88b:	c1 e6 0c             	shl    esi,0xc
c001d88e:	50                   	push   eax
c001d88f:	01 de                	add    esi,ebx
c001d891:	56                   	push   esi
c001d892:	ff 35 70 f1 02 c0    	push   DWORD PTR ds:0xc002f170
c001d898:	e8 cd 40 ff ff       	call   c001196a <VAS::getPageTableEntry(unsigned long)>
c001d89d:	83 c4 10             	add    esp,0x10
c001d8a0:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d8a3:	75 0c                	jne    c001d8b1 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d8a5:	83 ec 0c             	sub    esp,0xc
c001d8a8:	56                   	push   esi
c001d8a9:	e8 88 22 ff ff       	call   c000fb36 <Phys::freePage(unsigned long)>
c001d8ae:	83 c4 10             	add    esp,0x10
c001d8b1:	45                   	inc    ebp
c001d8b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8b6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d8ba:	05 ff 0f 00 00       	add    eax,0xfff
c001d8bf:	bf 00 00 00 00       	mov    edi,0x0
c001d8c4:	83 d2 00             	adc    edx,0x0
c001d8c7:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d8cb:	c1 ea 0c             	shr    edx,0xc
c001d8ce:	39 c5                	cmp    ebp,eax
c001d8d0:	89 d1                	mov    ecx,edx
c001d8d2:	89 f8                	mov    eax,edi
c001d8d4:	19 c8                	sbb    eax,ecx
c001d8d6:	72 b0                	jb     c001d888 <Thr::loadDLL(char const*, bool)+0x1af>
c001d8d8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d8dd:	75 18                	jne    c001d8f7 <Thr::loadDLL(char const*, bool)+0x21e>
c001d8df:	31 db                	xor    ebx,ebx
c001d8e1:	eb 14                	jmp    c001d8f7 <Thr::loadDLL(char const*, bool)+0x21e>
c001d8e3:	83 ec 0c             	sub    esp,0xc
c001d8e6:	68 06 cb 02 c0       	push   0xc002cb06
c001d8eb:	e8 15 ca ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001d8f0:	83 c4 10             	add    esp,0x10
c001d8f3:	31 ed                	xor    ebp,ebp
c001d8f5:	eb bb                	jmp    c001d8b2 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d8f7:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d8fd:	89 d8                	mov    eax,ebx
c001d8ff:	5b                   	pop    ebx
c001d900:	5e                   	pop    esi
c001d901:	5f                   	pop    edi
c001d902:	5d                   	pop    ebp
c001d903:	c3                   	ret    

c001d904 <Thr::executeDLL(unsigned long, void*)>:
c001d904:	56                   	push   esi
c001d905:	53                   	push   ebx
c001d906:	52                   	push   edx
c001d907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d90b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d90f:	85 db                	test   ebx,ebx
c001d911:	75 10                	jne    c001d923 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d913:	83 ec 0c             	sub    esp,0xc
c001d916:	68 22 cb 02 c0       	push   0xc002cb22
c001d91b:	e8 e5 c9 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001d920:	83 c4 10             	add    esp,0x10
c001d923:	50                   	push   eax
c001d924:	50                   	push   eax
c001d925:	53                   	push   ebx
c001d926:	68 4c cb 02 c0       	push   0xc002cb4c
c001d92b:	e8 9f 4f ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001d930:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d934:	89 d8                	mov    eax,ebx
c001d936:	83 c4 14             	add    esp,0x14
c001d939:	5b                   	pop    ebx
c001d93a:	5e                   	pop    esi
c001d93b:	ff e0                	jmp    eax
c001d93d:	90                   	nop

c001d93e <userModeEntryPoint(void*)>:
c001d93e:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001d943:	48                   	dec    eax
c001d944:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001d949:	75 01                	jne    c001d94c <userModeEntryPoint(void*)+0xe>
c001d94b:	fb                   	sti    
c001d94c:	fb                   	sti    
c001d94d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d952:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d955:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d95b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d95f:	e9 c6 29 fe ff       	jmp    c000032a <goToUsermode>

c001d964 <changeTSS>:
c001d964:	83 ec 14             	sub    esp,0x14
c001d967:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d96c:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d96f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d974:	c1 e2 15             	shl    edx,0x15
c001d977:	29 d0                	sub    eax,edx
c001d979:	50                   	push   eax
c001d97a:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001d97f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d985:	05 7c 11 00 00       	add    eax,0x117c
c001d98a:	50                   	push   eax
c001d98b:	e8 78 34 ff ff       	call   c0010e08 <TSS::setESP(unsigned long)>
c001d990:	83 c4 1c             	add    esp,0x1c
c001d993:	c3                   	ret    

c001d994 <switchToThread(ThreadControlBlock*)>:
c001d994:	57                   	push   edi
c001d995:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c001d99a:	56                   	push   esi
c001d99b:	85 c0                	test   eax,eax
c001d99d:	53                   	push   ebx
c001d99e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d9a2:	0f 85 88 00 00 00    	jne    c001da30 <switchToThread(ThreadControlBlock*)+0x9c>
c001d9a8:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d9ab:	3c ff                	cmp    al,0xff
c001d9ad:	74 7d                	je     c001da2c <switchToThread(ThreadControlBlock*)+0x98>
c001d9af:	0f b6 d0             	movzx  edx,al
c001d9b2:	b8 84 03 00 00       	mov    eax,0x384
c001d9b7:	29 d0                	sub    eax,edx
c001d9b9:	c1 e0 10             	shl    eax,0x10
c001d9bc:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d9bf:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d9c2:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c001d9c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d9cd:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d9d4:	74 4a                	je     c001da20 <switchToThread(ThreadControlBlock*)+0x8c>
c001d9d6:	0f 31                	rdtsc  
c001d9d8:	a3 68 25 03 c0       	mov    ds:0xc0032568,eax
c001d9dd:	89 c6                	mov    esi,eax
c001d9df:	89 d7                	mov    edi,edx
c001d9e1:	2b 35 58 25 03 c0    	sub    esi,DWORD PTR ds:0xc0032558
c001d9e7:	89 15 6c 25 03 c0    	mov    DWORD PTR ds:0xc003256c,edx
c001d9ed:	1b 3d 5c 25 03 c0    	sbb    edi,DWORD PTR ds:0xc003255c
c001d9f3:	89 35 60 25 03 c0    	mov    DWORD PTR ds:0xc0032560,esi
c001d9f9:	a3 58 25 03 c0       	mov    ds:0xc0032558,eax
c001d9fe:	89 3d 64 25 03 c0    	mov    DWORD PTR ds:0xc0032564,edi
c001da04:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001da0a:	89 15 5c 25 03 c0    	mov    DWORD PTR ds:0xc003255c,edx
c001da10:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001da13:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001da16:	01 c6                	add    esi,eax
c001da18:	11 d7                	adc    edi,edx
c001da1a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001da1d:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001da20:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001da24:	5b                   	pop    ebx
c001da25:	5e                   	pop    esi
c001da26:	5f                   	pop    edi
c001da27:	e9 36 29 fe ff       	jmp    c0000362 <switchToThreadASM>
c001da2c:	31 c0                	xor    eax,eax
c001da2e:	eb 8f                	jmp    c001d9bf <switchToThread(ThreadControlBlock*)+0x2b>
c001da30:	5b                   	pop    ebx
c001da31:	c7 05 20 25 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x1
c001da3b:	5e                   	pop    esi
c001da3c:	5f                   	pop    edi
c001da3d:	c3                   	ret    

c001da3e <Process::addArgs(char**)>:
c001da3e:	57                   	push   edi
c001da3f:	56                   	push   esi
c001da40:	53                   	push   ebx
c001da41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001da49:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001da53:	85 ff                	test   edi,edi
c001da55:	74 3d                	je     c001da94 <Process::addArgs(char**)+0x56>
c001da57:	8b 07                	mov    eax,DWORD PTR [edi]
c001da59:	85 c0                	test   eax,eax
c001da5b:	74 37                	je     c001da94 <Process::addArgs(char**)+0x56>
c001da5d:	31 db                	xor    ebx,ebx
c001da5f:	83 ec 0c             	sub    esp,0xc
c001da62:	50                   	push   eax
c001da63:	e8 04 2d fe ff       	call   c000076c <strlen>
c001da68:	40                   	inc    eax
c001da69:	89 04 24             	mov    DWORD PTR [esp],eax
c001da6c:	e8 1b 1e ff ff       	call   c000f88c <malloc>
c001da71:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da78:	5a                   	pop    edx
c001da79:	59                   	pop    ecx
c001da7a:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da7d:	43                   	inc    ebx
c001da7e:	50                   	push   eax
c001da7f:	e8 88 2d fe ff       	call   c000080c <strcpy>
c001da84:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da8a:	83 c4 10             	add    esp,0x10
c001da8d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da90:	85 c0                	test   eax,eax
c001da92:	75 cb                	jne    c001da5f <Process::addArgs(char**)+0x21>
c001da94:	5b                   	pop    ebx
c001da95:	5e                   	pop    esi
c001da96:	5f                   	pop    edi
c001da97:	c3                   	ret    

c001da98 <Process::Process(char const*, Process*, char**)>:
c001da98:	56                   	push   esi
c001da99:	53                   	push   ebx
c001da9a:	83 ec 14             	sub    esp,0x14
c001da9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daa1:	05 0c 02 00 00       	add    eax,0x20c
c001daa6:	bb 07 00 00 00       	mov    ebx,0x7
c001daab:	89 c6                	mov    esi,eax
c001daad:	85 db                	test   ebx,ebx
c001daaf:	78 12                	js     c001dac3 <Process::Process(char const*, Process*, char**)+0x2b>
c001dab1:	83 ec 0c             	sub    esp,0xc
c001dab4:	56                   	push   esi
c001dab5:	e8 d8 ba 00 00       	call   c0029592 <ThreadControlBlock::ThreadControlBlock()>
c001daba:	83 c4 10             	add    esp,0x10
c001dabd:	83 c6 63             	add    esi,0x63
c001dac0:	4b                   	dec    ebx
c001dac1:	eb ea                	jmp    c001daad <Process::Process(char const*, Process*, char**)+0x15>
c001dac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dac7:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dace:	83 ec 0c             	sub    esp,0xc
c001dad1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dad5:	e8 84 c6 ff ff       	call   c001a15e <Krnl::newProcessEnv(Process*)>
c001dada:	83 c4 10             	add    esp,0x10
c001dadd:	89 c2                	mov    edx,eax
c001dadf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dae3:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dae9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daed:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001daf6:	a1 90 e5 02 c0       	mov    eax,ds:0xc002e590
c001dafb:	8d 50 01             	lea    edx,[eax+0x1]
c001dafe:	89 15 90 e5 02 c0    	mov    DWORD PTR ds:0xc002e590,edx
c001db04:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db08:	89 02                	mov    DWORD PTR [edx],eax
c001db0a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001db12:	83 ec 0c             	sub    esp,0xc
c001db15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001db19:	e8 6e 1d ff ff       	call   c000f88c <malloc>
c001db1e:	83 c4 10             	add    esp,0x10
c001db21:	89 c3                	mov    ebx,eax
c001db23:	83 ec 08             	sub    esp,0x8
c001db26:	6a 00                	push   0x0
c001db28:	53                   	push   ebx
c001db29:	e8 7c 46 ff ff       	call   c00121aa <VAS::VAS(bool)>
c001db2e:	83 c4 10             	add    esp,0x10
c001db31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db35:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db3f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001db49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db4d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db51:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db5b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db61:	85 c0                	test   eax,eax
c001db63:	74 42                	je     c001dba7 <Process::Process(char const*, Process*, char**)+0x10f>
c001db65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db69:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db6f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db79:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db83:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db89:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db93:	05 0c 01 00 00       	add    eax,0x10c
c001db98:	83 ec 08             	sub    esp,0x8
c001db9b:	52                   	push   edx
c001db9c:	50                   	push   eax
c001db9d:	e8 6a 2c fe ff       	call   c000080c <strcpy>
c001dba2:	83 c4 10             	add    esp,0x10
c001dba5:	eb 63                	jmp    c001dc0a <Process::Process(char const*, Process*, char**)+0x172>
c001dba7:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001dbaf:	83 ec 0c             	sub    esp,0xc
c001dbb2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dbb6:	e8 d1 1c ff ff       	call   c000f88c <malloc>
c001dbbb:	83 c4 10             	add    esp,0x10
c001dbbe:	89 c3                	mov    ebx,eax
c001dbc0:	83 ec 08             	sub    esp,0x8
c001dbc3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbc7:	53                   	push   ebx
c001dbc8:	e8 1d 2f ff ff       	call   c0010aea <VgaText::VgaText(char const*)>
c001dbcd:	83 c4 10             	add    esp,0x10
c001dbd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbd4:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dbda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbde:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dbe4:	83 ec 0c             	sub    esp,0xc
c001dbe7:	50                   	push   eax
c001dbe8:	e8 04 26 ff ff       	call   c00101f1 <addToTerminalCycle(VgaText*)>
c001dbed:	83 c4 10             	add    esp,0x10
c001dbf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbf4:	05 0c 01 00 00       	add    eax,0x10c
c001dbf9:	83 ec 08             	sub    esp,0x8
c001dbfc:	68 6b cb 02 c0       	push   0xc002cb6b
c001dc01:	50                   	push   eax
c001dc02:	e8 05 2c fe ff       	call   c000080c <strcpy>
c001dc07:	83 c4 10             	add    esp,0x10
c001dc0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc0e:	83 c0 0c             	add    eax,0xc
c001dc11:	83 ec 08             	sub    esp,0x8
c001dc14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc18:	50                   	push   eax
c001dc19:	e8 ee 2b fe ff       	call   c000080c <strcpy>
c001dc1e:	83 c4 10             	add    esp,0x10
c001dc21:	83 ec 08             	sub    esp,0x8
c001dc24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dc28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc2c:	e8 0d fe ff ff       	call   c001da3e <Process::addArgs(char**)>
c001dc31:	83 c4 10             	add    esp,0x10
c001dc34:	83 ec 08             	sub    esp,0x8
c001dc37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc3f:	e8 a6 ed ff ff       	call   c001c9ea <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dc44:	83 c4 10             	add    esp,0x10
c001dc47:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc4b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc4f:	83 f0 01             	xor    eax,0x1
c001dc52:	88 c2                	mov    dl,al
c001dc54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc58:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dc5e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dc63:	83 ec 08             	sub    esp,0x8
c001dc66:	50                   	push   eax
c001dc67:	68 98 cc 02 c0       	push   0xc002cc98
c001dc6c:	e8 5e 4c ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001dc71:	83 c4 10             	add    esp,0x10
c001dc74:	90                   	nop
c001dc75:	83 c4 14             	add    esp,0x14
c001dc78:	5b                   	pop    ebx
c001dc79:	5e                   	pop    esi
c001dc7a:	c3                   	ret    
c001dc7b:	90                   	nop

c001dc7c <Process::Process(bool, char const*, Process*, char**)>:
c001dc7c:	56                   	push   esi
c001dc7d:	53                   	push   ebx
c001dc7e:	83 ec 24             	sub    esp,0x24
c001dc81:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc85:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc8d:	05 0c 02 00 00       	add    eax,0x20c
c001dc92:	bb 07 00 00 00       	mov    ebx,0x7
c001dc97:	89 c6                	mov    esi,eax
c001dc99:	85 db                	test   ebx,ebx
c001dc9b:	78 12                	js     c001dcaf <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dc9d:	83 ec 0c             	sub    esp,0xc
c001dca0:	56                   	push   esi
c001dca1:	e8 ec b8 00 00       	call   c0029592 <ThreadControlBlock::ThreadControlBlock()>
c001dca6:	83 c4 10             	add    esp,0x10
c001dca9:	83 c6 63             	add    esi,0x63
c001dcac:	4b                   	dec    ebx
c001dcad:	eb ea                	jmp    c001dc99 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dcaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcb3:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dcba:	83 ec 0c             	sub    esp,0xc
c001dcbd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dcc1:	e8 98 c4 ff ff       	call   c001a15e <Krnl::newProcessEnv(Process*)>
c001dcc6:	83 c4 10             	add    esp,0x10
c001dcc9:	89 c2                	mov    edx,eax
c001dccb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dccf:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dcd5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcd9:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dce2:	a1 90 e5 02 c0       	mov    eax,ds:0xc002e590
c001dce7:	8d 50 01             	lea    edx,[eax+0x1]
c001dcea:	89 15 90 e5 02 c0    	mov    DWORD PTR ds:0xc002e590,edx
c001dcf0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dcf4:	89 02                	mov    DWORD PTR [edx],eax
c001dcf6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001dcfe:	83 ec 0c             	sub    esp,0xc
c001dd01:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dd05:	e8 82 1b ff ff       	call   c000f88c <malloc>
c001dd0a:	83 c4 10             	add    esp,0x10
c001dd0d:	89 c3                	mov    ebx,eax
c001dd0f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dd14:	83 ec 08             	sub    esp,0x8
c001dd17:	50                   	push   eax
c001dd18:	53                   	push   ebx
c001dd19:	e8 8c 44 ff ff       	call   c00121aa <VAS::VAS(bool)>
c001dd1e:	83 c4 10             	add    esp,0x10
c001dd21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd25:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dd2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd2f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd3d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd41:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dd47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd4b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd51:	85 c0                	test   eax,eax
c001dd53:	74 42                	je     c001dd97 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dd55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd59:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd5f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd65:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd69:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd6f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd73:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd79:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd7f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd83:	05 0c 01 00 00       	add    eax,0x10c
c001dd88:	83 ec 08             	sub    esp,0x8
c001dd8b:	52                   	push   edx
c001dd8c:	50                   	push   eax
c001dd8d:	e8 7a 2a fe ff       	call   c000080c <strcpy>
c001dd92:	83 c4 10             	add    esp,0x10
c001dd95:	eb 63                	jmp    c001ddfa <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dd97:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001dd9f:	83 ec 0c             	sub    esp,0xc
c001dda2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dda6:	e8 e1 1a ff ff       	call   c000f88c <malloc>
c001ddab:	83 c4 10             	add    esp,0x10
c001ddae:	89 c3                	mov    ebx,eax
c001ddb0:	83 ec 08             	sub    esp,0x8
c001ddb3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ddb7:	53                   	push   ebx
c001ddb8:	e8 2d 2d ff ff       	call   c0010aea <VgaText::VgaText(char const*)>
c001ddbd:	83 c4 10             	add    esp,0x10
c001ddc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddc4:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001ddca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddce:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ddd4:	83 ec 0c             	sub    esp,0xc
c001ddd7:	50                   	push   eax
c001ddd8:	e8 14 24 ff ff       	call   c00101f1 <addToTerminalCycle(VgaText*)>
c001dddd:	83 c4 10             	add    esp,0x10
c001dde0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dde4:	05 0c 01 00 00       	add    eax,0x10c
c001dde9:	83 ec 08             	sub    esp,0x8
c001ddec:	68 6b cb 02 c0       	push   0xc002cb6b
c001ddf1:	50                   	push   eax
c001ddf2:	e8 15 2a fe ff       	call   c000080c <strcpy>
c001ddf7:	83 c4 10             	add    esp,0x10
c001ddfa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddfe:	83 c0 0c             	add    eax,0xc
c001de01:	83 ec 08             	sub    esp,0x8
c001de04:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de08:	50                   	push   eax
c001de09:	e8 fe 29 fe ff       	call   c000080c <strcpy>
c001de0e:	83 c4 10             	add    esp,0x10
c001de11:	83 ec 08             	sub    esp,0x8
c001de14:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001de18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de1c:	e8 1d fc ff ff       	call   c001da3e <Process::addArgs(char**)>
c001de21:	83 c4 10             	add    esp,0x10
c001de24:	90                   	nop
c001de25:	83 c4 24             	add    esp,0x24
c001de28:	5b                   	pop    ebx
c001de29:	5e                   	pop    esi
c001de2a:	c3                   	ret    

c001de2b <taskStartupFunction>:
c001de2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de30:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001de33:	c3                   	ret    

c001de34 <Semaphore::Semaphore(int)>:
c001de34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001de3c:	89 10                	mov    DWORD PTR [eax],edx
c001de3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de42:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001de49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de4d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001de54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de58:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001de5f:	90                   	nop
c001de60:	c3                   	ret    
c001de61:	90                   	nop

c001de62 <Mutex::Mutex()>:
c001de62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de66:	6a 01                	push   0x1
c001de68:	50                   	push   eax
c001de69:	e8 c6 ff ff ff       	call   c001de34 <Semaphore::Semaphore(int)>
c001de6e:	83 c4 08             	add    esp,0x8
c001de71:	90                   	nop
c001de72:	c3                   	ret    
c001de73:	90                   	nop

c001de74 <Process::createThread(void (*)(void*), void*, int)>:
c001de74:	55                   	push   ebp
c001de75:	31 c9                	xor    ecx,ecx
c001de77:	57                   	push   edi
c001de78:	56                   	push   esi
c001de79:	53                   	push   ebx
c001de7a:	83 ec 1c             	sub    esp,0x1c
c001de7d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001de81:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001de88:	89 f2                	mov    edx,esi
c001de8a:	0f b7 c2             	movzx  eax,dx
c001de8d:	83 e2 01             	and    edx,0x1
c001de90:	74 16                	je     c001dea8 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001de92:	d1 f8                	sar    eax,1
c001de94:	41                   	inc    ecx
c001de95:	89 c2                	mov    edx,eax
c001de97:	83 f9 10             	cmp    ecx,0x10
c001de9a:	75 ee                	jne    c001de8a <Process::createThread(void (*)(void*), void*, int)+0x16>
c001de9c:	83 c4 1c             	add    esp,0x1c
c001de9f:	31 db                	xor    ebx,ebx
c001dea1:	89 d8                	mov    eax,ebx
c001dea3:	5b                   	pop    ebx
c001dea4:	5e                   	pop    esi
c001dea5:	5f                   	pop    edi
c001dea6:	5d                   	pop    ebp
c001dea7:	c3                   	ret    
c001dea8:	b8 01 00 00 00       	mov    eax,0x1
c001dead:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001deb0:	d3 e0                	shl    eax,cl
c001deb2:	09 c6                	or     esi,eax
c001deb4:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001deb7:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001debe:	89 c6                	mov    esi,eax
c001dec0:	c1 e6 05             	shl    esi,0x5
c001dec3:	01 f0                	add    eax,esi
c001dec5:	01 d8                	add    eax,ebx
c001dec7:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001dece:	75 0a                	jne    c001deda <Process::createThread(void (*)(void*), void*, int)+0x66>
c001ded0:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001deda:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dee0:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001dee4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001dee7:	01 ca                	add    edx,ecx
c001dee9:	83 ec 08             	sub    esp,0x8
c001deec:	89 d0                	mov    eax,edx
c001deee:	c1 e0 05             	shl    eax,0x5
c001def1:	01 d0                	add    eax,edx
c001def3:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001def7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001defb:	01 d8                	add    eax,ebx
c001defd:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001df03:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001df09:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001df0f:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001df15:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001df1b:	89 cd                	mov    ebp,ecx
c001df1d:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001df21:	f7 dd                	neg    ebp
c001df23:	c1 e5 15             	shl    ebp,0x15
c001df26:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001df2c:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001df32:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001df3c:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001df42:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001df4c:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001df56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df5a:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001df61:	53                   	push   ebx
c001df62:	68 44 25 03 c0       	push   0xc0032544
c001df67:	e8 e0 b3 00 00       	call   c002934c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df6c:	89 d8                	mov    eax,ebx
c001df6e:	83 c4 10             	add    esp,0x10
c001df71:	83 c4 1c             	add    esp,0x1c
c001df74:	5b                   	pop    ebx
c001df75:	5e                   	pop    esi
c001df76:	5f                   	pop    edi
c001df77:	5d                   	pop    ebp
c001df78:	c3                   	ret    
c001df79:	90                   	nop

c001df7a <Process::createUserThread()>:
c001df7a:	83 ec 0c             	sub    esp,0xc
c001df7d:	68 80 00 00 00       	push   0x80
c001df82:	6a 00                	push   0x0
c001df84:	68 3e d9 01 c0       	push   0xc001d93e
c001df89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df8d:	e8 e2 fe ff ff       	call   c001de74 <Process::createThread(void (*)(void*), void*, int)>
c001df92:	83 c4 1c             	add    esp,0x1c
c001df95:	c3                   	ret    

c001df96 <setupMultitasking(void (*)())>:
c001df96:	56                   	push   esi
c001df97:	53                   	push   ebx
c001df98:	51                   	push   ecx
c001df99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001df9d:	eb 10                	jmp    c001dfaf <setupMultitasking(void (*)())+0x19>
c001df9f:	83 ec 0c             	sub    esp,0xc
c001dfa2:	68 44 25 03 c0       	push   0xc0032544
c001dfa7:	e8 f2 b2 00 00       	call   c002929e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dfac:	83 c4 10             	add    esp,0x10
c001dfaf:	83 ec 0c             	sub    esp,0xc
c001dfb2:	68 44 25 03 c0       	push   0xc0032544
c001dfb7:	e8 be b2 00 00       	call   c002927a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dfbc:	83 c4 10             	add    esp,0x10
c001dfbf:	84 c0                	test   al,al
c001dfc1:	74 dc                	je     c001df9f <setupMultitasking(void (*)())+0x9>
c001dfc3:	83 ec 0c             	sub    esp,0xc
c001dfc6:	68 3f 07 00 00       	push   0x73f
c001dfcb:	e8 bc 18 ff ff       	call   c000f88c <malloc>
c001dfd0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dfd7:	89 c3                	mov    ebx,eax
c001dfd9:	6a 00                	push   0x0
c001dfdb:	68 6f cb 02 c0       	push   0xc002cb6f
c001dfe0:	6a 01                	push   0x1
c001dfe2:	50                   	push   eax
c001dfe3:	e8 94 fc ff ff       	call   c001dc7c <Process::Process(bool, char const*, Process*, char**)>
c001dfe8:	83 c4 18             	add    esp,0x18
c001dfeb:	89 1d 50 25 03 c0    	mov    DWORD PTR ds:0xc0032550,ebx
c001dff1:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dff7:	68 c0 cc 02 c0       	push   0xc002ccc0
c001dffc:	e8 ce 48 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001e001:	58                   	pop    eax
c001e002:	5a                   	pop    edx
c001e003:	6a 63                	push   0x63
c001e005:	68 f4 cc 02 c0       	push   0xc002ccf4
c001e00a:	e8 c0 48 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001e00f:	59                   	pop    ecx
c001e010:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e016:	e8 d7 26 ff ff       	call   c00106f2 <setActiveTerminal(VgaText*)>
c001e01b:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e023:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e02d:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e033:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e036:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e040:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e046:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e04c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e056:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e060:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e06a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e070:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e07a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e080:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e08a:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e090:	58                   	pop    eax
c001e091:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e097:	5a                   	pop    edx
c001e098:	68 6b cb 02 c0       	push   0xc002cb6b
c001e09d:	50                   	push   eax
c001e09e:	e8 69 27 fe ff       	call   c000080c <strcpy>
c001e0a3:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e0aa:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e0ae:	83 c4 14             	add    esp,0x14
c001e0b1:	5b                   	pop    ebx
c001e0b2:	5e                   	pop    esi
c001e0b3:	e9 9c 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e0b8 <schedule()>:
c001e0b8:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c001e0bd:	85 c0                	test   eax,eax
c001e0bf:	74 0b                	je     c001e0cc <schedule()+0x14>
c001e0c1:	c7 05 20 25 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x1
c001e0cb:	c3                   	ret    
c001e0cc:	53                   	push   ebx
c001e0cd:	83 ec 14             	sub    esp,0x14
c001e0d0:	68 44 25 03 c0       	push   0xc0032544
c001e0d5:	e8 a0 b1 00 00       	call   c002927a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0da:	83 c4 10             	add    esp,0x10
c001e0dd:	84 c0                	test   al,al
c001e0df:	75 38                	jne    c001e119 <schedule()+0x61>
c001e0e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e0e6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e0e9:	4a                   	dec    edx
c001e0ea:	74 32                	je     c001e11e <schedule()+0x66>
c001e0ec:	83 ec 0c             	sub    esp,0xc
c001e0ef:	68 44 25 03 c0       	push   0xc0032544
c001e0f4:	e8 9d b1 00 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e0f9:	c7 04 24 44 25 03 c0 	mov    DWORD PTR [esp],0xc0032544
c001e100:	89 c3                	mov    ebx,eax
c001e102:	e8 97 b1 00 00       	call   c002929e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e107:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e10e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e111:	e8 7e f8 ff ff       	call   c001d994 <switchToThread(ThreadControlBlock*)>
c001e116:	83 c4 10             	add    esp,0x10
c001e119:	83 c4 08             	add    esp,0x8
c001e11c:	5b                   	pop    ebx
c001e11d:	c3                   	ret    
c001e11e:	83 ec 08             	sub    esp,0x8
c001e121:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e128:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e12e:	68 44 25 03 c0       	push   0xc0032544
c001e133:	e8 14 b2 00 00       	call   c002934c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e138:	83 c4 10             	add    esp,0x10
c001e13b:	eb af                	jmp    c001e0ec <schedule()+0x34>
c001e13d:	90                   	nop

c001e13e <Semaphore::tryAcquire()>:
c001e13e:	53                   	push   ebx
c001e13f:	83 ec 08             	sub    esp,0x8
c001e142:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e146:	fa                   	cli    
c001e147:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e14c:	8d 50 01             	lea    edx,[eax+0x1]
c001e14f:	89 15 28 25 03 c0    	mov    DWORD PTR ds:0xc0032528,edx
c001e155:	8b 15 24 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032524
c001e15b:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e15e:	89 1d 24 25 03 c0    	mov    DWORD PTR ds:0xc0032524,ebx
c001e164:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e167:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e169:	7c 2a                	jl     c001e195 <Semaphore::tryAcquire()+0x57>
c001e16b:	89 15 24 25 03 c0    	mov    DWORD PTR ds:0xc0032524,edx
c001e171:	85 d2                	test   edx,edx
c001e173:	75 0a                	jne    c001e17f <Semaphore::tryAcquire()+0x41>
c001e175:	8b 15 20 25 03 c0    	mov    edx,DWORD PTR ds:0xc0032520
c001e17b:	85 d2                	test   edx,edx
c001e17d:	75 5b                	jne    c001e1da <Semaphore::tryAcquire()+0x9c>
c001e17f:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e184:	85 c0                	test   eax,eax
c001e186:	74 07                	je     c001e18f <Semaphore::tryAcquire()+0x51>
c001e188:	31 c0                	xor    eax,eax
c001e18a:	83 c4 08             	add    esp,0x8
c001e18d:	5b                   	pop    ebx
c001e18e:	c3                   	ret    
c001e18f:	fb                   	sti    
c001e190:	83 c4 08             	add    esp,0x8
c001e193:	5b                   	pop    ebx
c001e194:	c3                   	ret    
c001e195:	43                   	inc    ebx
c001e196:	89 15 24 25 03 c0    	mov    DWORD PTR ds:0xc0032524,edx
c001e19c:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e19f:	85 d2                	test   edx,edx
c001e1a1:	75 1f                	jne    c001e1c2 <Semaphore::tryAcquire()+0x84>
c001e1a3:	8b 0d 20 25 03 c0    	mov    ecx,DWORD PTR ds:0xc0032520
c001e1a9:	85 c9                	test   ecx,ecx
c001e1ab:	74 15                	je     c001e1c2 <Semaphore::tryAcquire()+0x84>
c001e1ad:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c001e1b7:	e8 fc fe ff ff       	call   c001e0b8 <schedule()>
c001e1bc:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e1c1:	48                   	dec    eax
c001e1c2:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e1c7:	85 c0                	test   eax,eax
c001e1c9:	75 08                	jne    c001e1d3 <Semaphore::tryAcquire()+0x95>
c001e1cb:	fb                   	sti    
c001e1cc:	b0 01                	mov    al,0x1
c001e1ce:	83 c4 08             	add    esp,0x8
c001e1d1:	5b                   	pop    ebx
c001e1d2:	c3                   	ret    
c001e1d3:	b0 01                	mov    al,0x1
c001e1d5:	83 c4 08             	add    esp,0x8
c001e1d8:	5b                   	pop    ebx
c001e1d9:	c3                   	ret    
c001e1da:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c001e1e4:	e8 cf fe ff ff       	call   c001e0b8 <schedule()>
c001e1e9:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e1ee:	48                   	dec    eax
c001e1ef:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e1f4:	85 c0                	test   eax,eax
c001e1f6:	75 90                	jne    c001e188 <Semaphore::tryAcquire()+0x4a>
c001e1f8:	eb 95                	jmp    c001e18f <Semaphore::tryAcquire()+0x51>

c001e1fa <Semaphore::assertLocked(char const*)>:
c001e1fa:	83 ec 0c             	sub    esp,0xc
c001e1fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e201:	fa                   	cli    
c001e202:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001e208:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c001e20d:	8d 48 01             	lea    ecx,[eax+0x1]
c001e210:	89 0d 24 25 03 c0    	mov    DWORD PTR ds:0xc0032524,ecx
c001e216:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e218:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e21b:	7c 24                	jl     c001e241 <Semaphore::assertLocked(char const*)+0x47>
c001e21d:	a3 24 25 03 c0       	mov    ds:0xc0032524,eax
c001e222:	85 c0                	test   eax,eax
c001e224:	75 09                	jne    c001e22f <Semaphore::assertLocked(char const*)+0x35>
c001e226:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c001e22b:	85 c0                	test   eax,eax
c001e22d:	75 29                	jne    c001e258 <Semaphore::assertLocked(char const*)+0x5e>
c001e22f:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e234:	48                   	dec    eax
c001e235:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e23a:	75 01                	jne    c001e23d <Semaphore::assertLocked(char const*)+0x43>
c001e23c:	fb                   	sti    
c001e23d:	83 c4 0c             	add    esp,0xc
c001e240:	c3                   	ret    
c001e241:	83 ec 0c             	sub    esp,0xc
c001e244:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e248:	e8 b8 c0 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001e24d:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c001e252:	83 c4 10             	add    esp,0x10
c001e255:	48                   	dec    eax
c001e256:	eb c5                	jmp    c001e21d <Semaphore::assertLocked(char const*)+0x23>
c001e258:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c001e262:	e8 51 fe ff ff       	call   c001e0b8 <schedule()>
c001e267:	eb c6                	jmp    c001e22f <Semaphore::assertLocked(char const*)+0x35>

c001e269 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e269:	83 ec 14             	sub    esp,0x14
c001e26c:	ff 35 28 25 03 c0    	push   DWORD PTR ds:0xc0032528
c001e272:	68 18 cd 02 c0       	push   0xc002cd18
c001e277:	e8 53 46 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001e27c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e281:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e285:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e288:	e8 2b fe ff ff       	call   c001e0b8 <schedule()>
c001e28d:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e292:	83 c4 10             	add    esp,0x10
c001e295:	48                   	dec    eax
c001e296:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e29b:	85 c0                	test   eax,eax
c001e29d:	75 06                	jne    c001e2a5 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e29f:	fb                   	sti    
c001e2a0:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e2a5:	83 ec 08             	sub    esp,0x8
c001e2a8:	50                   	push   eax
c001e2a9:	68 4c cd 02 c0       	push   0xc002cd4c
c001e2ae:	e8 1c 46 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001e2b3:	83 c4 1c             	add    esp,0x1c
c001e2b6:	c3                   	ret    

c001e2b7 <blockTask(TaskState)>:
c001e2b7:	83 ec 0c             	sub    esp,0xc
c001e2ba:	fa                   	cli    
c001e2bb:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001e2c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e2c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2ca:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e2cd:	e8 e6 fd ff ff       	call   c001e0b8 <schedule()>
c001e2d2:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e2d7:	48                   	dec    eax
c001e2d8:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e2dd:	75 01                	jne    c001e2e0 <blockTask(TaskState)+0x29>
c001e2df:	fb                   	sti    
c001e2e0:	83 c4 0c             	add    esp,0xc
c001e2e3:	c3                   	ret    

c001e2e4 <waitTask(int, int*, int)>:
c001e2e4:	83 ec 18             	sub    esp,0x18
c001e2e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e2f0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e2f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2fc:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e2ff:	6a 07                	push   0x7
c001e301:	e8 b1 ff ff ff       	call   c001e2b7 <blockTask(TaskState)>
c001e306:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e30b:	83 c4 10             	add    esp,0x10
c001e30e:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e311:	85 d2                	test   edx,edx
c001e313:	74 0a                	je     c001e31f <waitTask(int, int*, int)+0x3b>
c001e315:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e318:	89 02                	mov    DWORD PTR [edx],eax
c001e31a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e31f:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e322:	83 c4 0c             	add    esp,0xc
c001e325:	c3                   	ret    

c001e326 <nanoSleepUntil(unsigned long long)>:
c001e326:	83 ec 0c             	sub    esp,0xc
c001e329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e32d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e331:	3b 05 70 f6 02 c0    	cmp    eax,DWORD PTR ds:0xc002f670
c001e337:	89 d1                	mov    ecx,edx
c001e339:	1b 0d 74 f6 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f674
c001e33f:	73 04                	jae    c001e345 <nanoSleepUntil(unsigned long long)+0x1f>
c001e341:	83 c4 0c             	add    esp,0xc
c001e344:	c3                   	ret    
c001e345:	fa                   	cli    
c001e346:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001e34c:	83 ec 08             	sub    esp,0x8
c001e34f:	ff 05 24 25 03 c0    	inc    DWORD PTR ds:0xc0032524
c001e355:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e35b:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e35e:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e361:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e367:	68 38 25 03 c0       	push   0xc0032538
c001e36c:	e8 db af 00 00       	call   c002934c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e371:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e378:	e8 3a ff ff ff       	call   c001e2b7 <blockTask(TaskState)>
c001e37d:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c001e382:	83 c4 10             	add    esp,0x10
c001e385:	48                   	dec    eax
c001e386:	a3 24 25 03 c0       	mov    ds:0xc0032524,eax
c001e38b:	85 c0                	test   eax,eax
c001e38d:	75 09                	jne    c001e398 <nanoSleepUntil(unsigned long long)+0x72>
c001e38f:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c001e394:	85 c0                	test   eax,eax
c001e396:	75 12                	jne    c001e3aa <nanoSleepUntil(unsigned long long)+0x84>
c001e398:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e39d:	48                   	dec    eax
c001e39e:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e3a3:	75 9c                	jne    c001e341 <nanoSleepUntil(unsigned long long)+0x1b>
c001e3a5:	fb                   	sti    
c001e3a6:	83 c4 0c             	add    esp,0xc
c001e3a9:	c3                   	ret    
c001e3aa:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c001e3b4:	e8 ff fc ff ff       	call   c001e0b8 <schedule()>
c001e3b9:	eb dd                	jmp    c001e398 <nanoSleepUntil(unsigned long long)+0x72>

c001e3bb <nanoSleep(unsigned long long)>:
c001e3bb:	a1 70 f6 02 c0       	mov    eax,ds:0xc002f670
c001e3c0:	8b 15 74 f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f674
c001e3c6:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e3ca:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e3ce:	e9 53 ff ff ff       	jmp    c001e326 <nanoSleepUntil(unsigned long long)>

c001e3d3 <sleep(unsigned long long)>:
c001e3d3:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e3db:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e3e0:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e3e4:	01 ca                	add    edx,ecx
c001e3e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e3ea:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e3ee:	eb cb                	jmp    c001e3bb <nanoSleep(unsigned long long)>

c001e3f0 <Semaphore::acquire()>:
c001e3f0:	83 ec 0c             	sub    esp,0xc
c001e3f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e3f7:	fa                   	cli    
c001e3f8:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c001e3fd:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001e403:	8d 48 01             	lea    ecx,[eax+0x1]
c001e406:	89 0d 24 25 03 c0    	mov    DWORD PTR ds:0xc0032524,ecx
c001e40c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e40f:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e411:	7d 28                	jge    c001e43b <Semaphore::acquire()+0x4b>
c001e413:	41                   	inc    ecx
c001e414:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e417:	a3 24 25 03 c0       	mov    ds:0xc0032524,eax
c001e41c:	85 c0                	test   eax,eax
c001e41e:	75 09                	jne    c001e429 <Semaphore::acquire()+0x39>
c001e420:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c001e425:	85 c0                	test   eax,eax
c001e427:	75 4e                	jne    c001e477 <Semaphore::acquire()+0x87>
c001e429:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e42e:	48                   	dec    eax
c001e42f:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e434:	75 01                	jne    c001e437 <Semaphore::acquire()+0x47>
c001e436:	fb                   	sti    
c001e437:	83 c4 0c             	add    esp,0xc
c001e43a:	c3                   	ret    
c001e43b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e440:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e447:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e44a:	85 c9                	test   ecx,ecx
c001e44c:	74 3a                	je     c001e488 <Semaphore::acquire()+0x98>
c001e44e:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e451:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e457:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e45a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e45f:	83 ec 0c             	sub    esp,0xc
c001e462:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e465:	6a 05                	push   0x5
c001e467:	e8 4b fe ff ff       	call   c001e2b7 <blockTask(TaskState)>
c001e46c:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c001e471:	83 c4 10             	add    esp,0x10
c001e474:	48                   	dec    eax
c001e475:	eb a0                	jmp    c001e417 <Semaphore::acquire()+0x27>
c001e477:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c001e481:	e8 32 fc ff ff       	call   c001e0b8 <schedule()>
c001e486:	eb a1                	jmp    c001e429 <Semaphore::acquire()+0x39>
c001e488:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e48d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e490:	eb c8                	jmp    c001e45a <Semaphore::acquire()+0x6a>

c001e492 <taskReturned>:
c001e492:	83 ec 18             	sub    esp,0x18
c001e495:	68 80 cd 02 c0       	push   0xc002cd80
c001e49a:	e8 66 be ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001e49f:	83 c4 10             	add    esp,0x10
c001e4a2:	83 ec 0c             	sub    esp,0xc
c001e4a5:	6a 02                	push   0x2
c001e4a7:	e8 0b fe ff ff       	call   c001e2b7 <blockTask(TaskState)>
c001e4ac:	fa                   	cli    
c001e4ad:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001e4b3:	e8 00 fc ff ff       	call   c001e0b8 <schedule()>
c001e4b8:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e4bd:	83 c4 10             	add    esp,0x10
c001e4c0:	48                   	dec    eax
c001e4c1:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e4c6:	85 c0                	test   eax,eax
c001e4c8:	75 d8                	jne    c001e4a2 <taskReturned+0x10>
c001e4ca:	fb                   	sti    
c001e4cb:	eb d5                	jmp    c001e4a2 <taskReturned+0x10>

c001e4cd <Thr::processFromPID(int)>:
c001e4cd:	57                   	push   edi
c001e4ce:	56                   	push   esi
c001e4cf:	53                   	push   ebx
c001e4d0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e4d4:	83 ec 0c             	sub    esp,0xc
c001e4d7:	68 76 cb 02 c0       	push   0xc002cb76
c001e4dc:	e8 ee 43 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001e4e1:	fa                   	cli    
c001e4e2:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001e4e8:	c7 04 24 44 25 03 c0 	mov    DWORD PTR [esp],0xc0032544
c001e4ef:	e8 a2 ad 00 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4f4:	83 c4 10             	add    esp,0x10
c001e4f7:	89 c7                	mov    edi,eax
c001e4f9:	eb 14                	jmp    c001e50f <Thr::processFromPID(int)+0x42>
c001e4fb:	83 ec 0c             	sub    esp,0xc
c001e4fe:	68 44 25 03 c0       	push   0xc0032544
c001e503:	e8 8e ad 00 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e508:	83 c4 10             	add    esp,0x10
c001e50b:	39 f8                	cmp    eax,edi
c001e50d:	74 49                	je     c001e558 <Thr::processFromPID(int)+0x8b>
c001e50f:	83 ec 0c             	sub    esp,0xc
c001e512:	68 44 25 03 c0       	push   0xc0032544
c001e517:	e8 7a ad 00 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e51c:	c7 04 24 44 25 03 c0 	mov    DWORD PTR [esp],0xc0032544
c001e523:	89 c3                	mov    ebx,eax
c001e525:	e8 74 ad 00 00       	call   c002929e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e52a:	58                   	pop    eax
c001e52b:	5a                   	pop    edx
c001e52c:	53                   	push   ebx
c001e52d:	68 44 25 03 c0       	push   0xc0032544
c001e532:	e8 15 ae 00 00       	call   c002934c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e537:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e53a:	83 c4 10             	add    esp,0x10
c001e53d:	39 30                	cmp    DWORD PTR [eax],esi
c001e53f:	75 ba                	jne    c001e4fb <Thr::processFromPID(int)+0x2e>
c001e541:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e546:	48                   	dec    eax
c001e547:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e54c:	74 07                	je     c001e555 <Thr::processFromPID(int)+0x88>
c001e54e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e551:	5b                   	pop    ebx
c001e552:	5e                   	pop    esi
c001e553:	5f                   	pop    edi
c001e554:	c3                   	ret    
c001e555:	fb                   	sti    
c001e556:	eb f6                	jmp    c001e54e <Thr::processFromPID(int)+0x81>
c001e558:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e55d:	48                   	dec    eax
c001e55e:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e563:	75 01                	jne    c001e566 <Thr::processFromPID(int)+0x99>
c001e565:	fb                   	sti    
c001e566:	83 ec 0c             	sub    esp,0xc
c001e569:	68 91 cb 02 c0       	push   0xc002cb91
c001e56e:	e8 5c 43 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001e573:	83 c4 10             	add    esp,0x10
c001e576:	31 c0                	xor    eax,eax
c001e578:	5b                   	pop    ebx
c001e579:	5e                   	pop    esi
c001e57a:	5f                   	pop    edi
c001e57b:	c3                   	ret    

c001e57c <unblockTask(ThreadControlBlock*)>:
c001e57c:	53                   	push   ebx
c001e57d:	83 ec 08             	sub    esp,0x8
c001e580:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e584:	fa                   	cli    
c001e585:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001e58b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e58e:	85 c0                	test   eax,eax
c001e590:	74 66                	je     c001e5f8 <unblockTask(ThreadControlBlock*)+0x7c>
c001e592:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e595:	48                   	dec    eax
c001e596:	74 31                	je     c001e5c9 <unblockTask(ThreadControlBlock*)+0x4d>
c001e598:	83 ec 0c             	sub    esp,0xc
c001e59b:	68 44 25 03 c0       	push   0xc0032544
c001e5a0:	e8 f1 ac 00 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e5a5:	83 c4 10             	add    esp,0x10
c001e5a8:	85 c0                	test   eax,eax
c001e5aa:	75 17                	jne    c001e5c3 <unblockTask(ThreadControlBlock*)+0x47>
c001e5ac:	eb 68                	jmp    c001e616 <unblockTask(ThreadControlBlock*)+0x9a>
c001e5ae:	83 ec 08             	sub    esp,0x8
c001e5b1:	50                   	push   eax
c001e5b2:	68 44 25 03 c0       	push   0xc0032544
c001e5b7:	e8 78 b0 00 00       	call   c0029634 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e5bc:	83 c4 10             	add    esp,0x10
c001e5bf:	85 c0                	test   eax,eax
c001e5c1:	74 53                	je     c001e616 <unblockTask(ThreadControlBlock*)+0x9a>
c001e5c3:	39 c3                	cmp    ebx,eax
c001e5c5:	75 e7                	jne    c001e5ae <unblockTask(ThreadControlBlock*)+0x32>
c001e5c7:	eb 1c                	jmp    c001e5e5 <unblockTask(ThreadControlBlock*)+0x69>
c001e5c9:	83 ec 0c             	sub    esp,0xc
c001e5cc:	68 70 ce 02 c0       	push   0xc002ce70
c001e5d1:	e8 f9 42 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001e5d6:	c7 04 24 fc cd 02 c0 	mov    DWORD PTR [esp],0xc002cdfc
c001e5dd:	e8 ed 42 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001e5e2:	83 c4 10             	add    esp,0x10
c001e5e5:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e5ea:	48                   	dec    eax
c001e5eb:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e5f0:	75 01                	jne    c001e5f3 <unblockTask(ThreadControlBlock*)+0x77>
c001e5f2:	fb                   	sti    
c001e5f3:	83 c4 08             	add    esp,0x8
c001e5f6:	5b                   	pop    ebx
c001e5f7:	c3                   	ret    
c001e5f8:	83 ec 0c             	sub    esp,0xc
c001e5fb:	68 b4 cd 02 c0       	push   0xc002cdb4
c001e600:	e8 ca 42 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001e605:	c7 04 24 fc cd 02 c0 	mov    DWORD PTR [esp],0xc002cdfc
c001e60c:	e8 be 42 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001e611:	83 c4 10             	add    esp,0x10
c001e614:	eb cf                	jmp    c001e5e5 <unblockTask(ThreadControlBlock*)+0x69>
c001e616:	83 ec 08             	sub    esp,0x8
c001e619:	53                   	push   ebx
c001e61a:	68 44 25 03 c0       	push   0xc0032544
c001e61f:	e8 28 ad 00 00       	call   c002934c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e624:	83 c4 10             	add    esp,0x10
c001e627:	eb bc                	jmp    c001e5e5 <unblockTask(ThreadControlBlock*)+0x69>

c001e629 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e629:	55                   	push   ebp
c001e62a:	57                   	push   edi
c001e62b:	56                   	push   esi
c001e62c:	53                   	push   ebx
c001e62d:	83 ec 1c             	sub    esp,0x1c
c001e630:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e634:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e637:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e63d:	85 ff                	test   edi,edi
c001e63f:	7e 20                	jle    c001e661 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e641:	31 f6                	xor    esi,esi
c001e643:	83 ec 0c             	sub    esp,0xc
c001e646:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e64d:	46                   	inc    esi
c001e64e:	e8 49 12 ff ff       	call   c000f89c <free>
c001e653:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e656:	83 c4 10             	add    esp,0x10
c001e659:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e65f:	7f e2                	jg     c001e643 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e661:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e66b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e670:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e673:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e676:	d3 c0                	rol    eax,cl
c001e678:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e67f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e682:	89 f7                	mov    edi,esi
c001e684:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e68c:	0f 85 74 01 00 00    	jne    c001e806 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e692:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e698:	85 ed                	test   ebp,ebp
c001e69a:	74 1b                	je     c001e6b7 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e69c:	83 ec 0c             	sub    esp,0xc
c001e69f:	55                   	push   ebp
c001e6a0:	e8 d5 b9 ff ff       	call   c001a07a <EnvVarContainer::~EnvVarContainer()>
c001e6a5:	59                   	pop    ecx
c001e6a6:	5e                   	pop    esi
c001e6a7:	6a 0c                	push   0xc
c001e6a9:	55                   	push   ebp
c001e6aa:	e8 40 41 ff ff       	call   c00127ef <operator delete(void*, unsigned long)>
c001e6af:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e6b2:	83 c4 10             	add    esp,0x10
c001e6b5:	89 f7                	mov    edi,esi
c001e6b7:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e6bd:	85 c0                	test   eax,eax
c001e6bf:	0f 84 aa 00 00 00    	je     c001e76f <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e6c5:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e6c8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e6cc:	31 c9                	xor    ecx,ecx
c001e6ce:	eb 10                	jmp    c001e6e0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e6d0:	41                   	inc    ecx
c001e6d1:	83 f9 10             	cmp    ecx,0x10
c001e6d4:	0f 84 95 00 00 00    	je     c001e76f <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e6da:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e6e0:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e6e7:	d3 fa                	sar    edx,cl
c001e6e9:	83 e2 01             	and    edx,0x1
c001e6ec:	74 e2                	je     c001e6d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e6ee:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e6f1:	01 ca                	add    edx,ecx
c001e6f3:	89 d5                	mov    ebp,edx
c001e6f5:	c1 e5 05             	shl    ebp,0x5
c001e6f8:	01 ea                	add    edx,ebp
c001e6fa:	01 d0                	add    eax,edx
c001e6fc:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e702:	83 fd 07             	cmp    ebp,0x7
c001e705:	75 c9                	jne    c001e6d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e707:	05 40 02 00 00       	add    eax,0x240
c001e70c:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e70f:	83 fd ff             	cmp    ebp,0xffffffff
c001e712:	0f 8c 08 01 00 00    	jl     c001e820 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e718:	0f 84 b9 01 00 00    	je     c001e8d7 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e71e:	85 ed                	test   ebp,ebp
c001e720:	0f 84 a0 01 00 00    	je     c001e8c6 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e726:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e728:	75 a6                	jne    c001e6d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e72a:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e730:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e734:	01 d0                	add    eax,edx
c001e736:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e73a:	83 ec 0c             	sub    esp,0xc
c001e73d:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e743:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e746:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e74c:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e753:	50                   	push   eax
c001e754:	e8 23 fe ff ff       	call   c001e57c <unblockTask(ThreadControlBlock*)>
c001e759:	83 c4 10             	add    esp,0x10
c001e75c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e75f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e763:	89 f7                	mov    edi,esi
c001e765:	41                   	inc    ecx
c001e766:	83 f9 10             	cmp    ecx,0x10
c001e769:	0f 85 6b ff ff ff    	jne    c001e6da <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e76f:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e775:	85 c0                	test   eax,eax
c001e777:	74 5d                	je     c001e7d6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e779:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e77f:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e785:	74 4f                	je     c001e7d6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e787:	83 ec 0c             	sub    esp,0xc
c001e78a:	68 44 25 03 c0       	push   0xc0032544
c001e78f:	e8 02 ab 00 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e794:	c7 04 24 44 25 03 c0 	mov    DWORD PTR [esp],0xc0032544
c001e79b:	89 c7                	mov    edi,eax
c001e79d:	e8 d8 aa 00 00       	call   c002927a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e7a2:	83 c4 10             	add    esp,0x10
c001e7a5:	84 c0                	test   al,al
c001e7a7:	0f 84 e4 00 00 00    	je     c001e891 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e7ad:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7b0:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e7b6:	85 d2                	test   edx,edx
c001e7b8:	74 0f                	je     c001e7c9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e7ba:	83 ec 0c             	sub    esp,0xc
c001e7bd:	8b 02                	mov    eax,DWORD PTR [edx]
c001e7bf:	52                   	push   edx
c001e7c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e7c3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7c6:	83 c4 10             	add    esp,0x10
c001e7c9:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e7d3:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e7d6:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e7dc:	85 db                	test   ebx,ebx
c001e7de:	74 16                	je     c001e7f6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e7e0:	83 ec 0c             	sub    esp,0xc
c001e7e3:	53                   	push   ebx
c001e7e4:	e8 9b 33 ff ff       	call   c0011b84 <VAS::~VAS()>
c001e7e9:	58                   	pop    eax
c001e7ea:	5a                   	pop    edx
c001e7eb:	6a 14                	push   0x14
c001e7ed:	53                   	push   ebx
c001e7ee:	e8 fc 3f ff ff       	call   c00127ef <operator delete(void*, unsigned long)>
c001e7f3:	83 c4 10             	add    esp,0x10
c001e7f6:	83 ec 0c             	sub    esp,0xc
c001e7f9:	68 a8 cb 02 c0       	push   0xc002cba8
c001e7fe:	e8 cc 40 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001e803:	83 c4 10             	add    esp,0x10
c001e806:	83 ec 08             	sub    esp,0x8
c001e809:	68 3f 07 00 00       	push   0x73f
c001e80e:	68 b6 cb 02 c0       	push   0xc002cbb6
c001e813:	e8 b7 40 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001e818:	83 c4 2c             	add    esp,0x2c
c001e81b:	5b                   	pop    ebx
c001e81c:	5e                   	pop    esi
c001e81d:	5f                   	pop    edi
c001e81e:	5d                   	pop    ebp
c001e81f:	c3                   	ret    
c001e820:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e824:	83 ec 0c             	sub    esp,0xc
c001e827:	68 b4 ce 02 c0       	push   0xc002ceb4
c001e82c:	e8 d4 ba ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001e831:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e834:	83 c4 10             	add    esp,0x10
c001e837:	89 f7                	mov    edi,esi
c001e839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e83d:	e9 8e fe ff ff       	jmp    c001e6d0 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e842:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e848:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e84e:	75 1c                	jne    c001e86c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e850:	83 ec 0c             	sub    esp,0xc
c001e853:	68 1c cf 02 c0       	push   0xc002cf1c
c001e858:	e8 72 40 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001e85d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e864:	e8 4e fa ff ff       	call   c001e2b7 <blockTask(TaskState)>
c001e869:	83 c4 10             	add    esp,0x10
c001e86c:	83 ec 08             	sub    esp,0x8
c001e86f:	56                   	push   esi
c001e870:	68 44 25 03 c0       	push   0xc0032544
c001e875:	e8 d2 aa 00 00       	call   c002934c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e87a:	c7 04 24 44 25 03 c0 	mov    DWORD PTR [esp],0xc0032544
c001e881:	e8 10 aa 00 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e886:	83 c4 10             	add    esp,0x10
c001e889:	39 f8                	cmp    eax,edi
c001e88b:	0f 84 1c ff ff ff    	je     c001e7ad <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e891:	83 ec 0c             	sub    esp,0xc
c001e894:	68 44 25 03 c0       	push   0xc0032544
c001e899:	e8 f8 a9 00 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e89e:	c7 04 24 44 25 03 c0 	mov    DWORD PTR [esp],0xc0032544
c001e8a5:	89 c6                	mov    esi,eax
c001e8a7:	e8 f2 a9 00 00       	call   c002929e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e8ac:	83 c4 10             	add    esp,0x10
c001e8af:	39 f3                	cmp    ebx,esi
c001e8b1:	74 b9                	je     c001e86c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e8b3:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e8b6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e8b9:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e8bf:	75 ab                	jne    c001e86c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e8c1:	e9 7c ff ff ff       	jmp    c001e842 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e8c6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e8ca:	83 ec 0c             	sub    esp,0xc
c001e8cd:	68 e8 ce 02 c0       	push   0xc002cee8
c001e8d2:	e9 55 ff ff ff       	jmp    c001e82c <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e8d7:	8b 36                	mov    esi,DWORD PTR [esi]
c001e8d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e8dd:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e8e0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e8e3:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e8e9:	01 d7                	add    edi,edx
c001e8eb:	89 f8                	mov    eax,edi
c001e8ed:	e9 44 fe ff ff       	jmp    c001e736 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e8f2 <cleanerTaskFunction(void*)>:
c001e8f2:	53                   	push   ebx
c001e8f3:	83 ec 08             	sub    esp,0x8
c001e8f6:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e8fb:	48                   	dec    eax
c001e8fc:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e901:	75 01                	jne    c001e904 <cleanerTaskFunction(void*)+0x12>
c001e903:	fb                   	sti    
c001e904:	fa                   	cli    
c001e905:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e90a:	80 3d 0c 25 03 c0 00 	cmp    BYTE PTR ds:0xc003250c,0x0
c001e911:	8d 50 01             	lea    edx,[eax+0x1]
c001e914:	89 15 28 25 03 c0    	mov    DWORD PTR ds:0xc0032528,edx
c001e91a:	0f 84 b9 00 00 00    	je     c001e9d9 <cleanerTaskFunction(void*)+0xe7>
c001e920:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e925:	85 c0                	test   eax,eax
c001e927:	75 01                	jne    c001e92a <cleanerTaskFunction(void*)+0x38>
c001e929:	fb                   	sti    
c001e92a:	c6 05 0c 25 03 c0 00 	mov    BYTE PTR ds:0xc003250c,0x0
c001e931:	fa                   	cli    
c001e932:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001e938:	ff 05 24 25 03 c0    	inc    DWORD PTR ds:0xc0032524
c001e93e:	fa                   	cli    
c001e93f:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001e945:	eb 3e                	jmp    c001e985 <cleanerTaskFunction(void*)+0x93>
c001e947:	83 ec 0c             	sub    esp,0xc
c001e94a:	68 2c 25 03 c0       	push   0xc003252c
c001e94f:	e8 42 a9 00 00       	call   c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e954:	c7 04 24 2c 25 03 c0 	mov    DWORD PTR [esp],0xc003252c
c001e95b:	89 c3                	mov    ebx,eax
c001e95d:	e8 3c a9 00 00       	call   c002929e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e962:	c7 04 24 cc cb 02 c0 	mov    DWORD PTR [esp],0xc002cbcc
c001e969:	e8 61 3f ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001e96e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e971:	e8 b3 fc ff ff       	call   c001e629 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e976:	c7 04 24 e5 cb 02 c0 	mov    DWORD PTR [esp],0xc002cbe5
c001e97d:	e8 4d 3f ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001e982:	83 c4 10             	add    esp,0x10
c001e985:	83 ec 0c             	sub    esp,0xc
c001e988:	68 2c 25 03 c0       	push   0xc003252c
c001e98d:	e8 e8 a8 00 00       	call   c002927a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e992:	83 c4 10             	add    esp,0x10
c001e995:	84 c0                	test   al,al
c001e997:	74 ae                	je     c001e947 <cleanerTaskFunction(void*)+0x55>
c001e999:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001e99e:	48                   	dec    eax
c001e99f:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001e9a4:	75 01                	jne    c001e9a7 <cleanerTaskFunction(void*)+0xb5>
c001e9a6:	fb                   	sti    
c001e9a7:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c001e9ac:	48                   	dec    eax
c001e9ad:	a3 24 25 03 c0       	mov    ds:0xc0032524,eax
c001e9b2:	0f 85 3e ff ff ff    	jne    c001e8f6 <cleanerTaskFunction(void*)+0x4>
c001e9b8:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c001e9bd:	85 c0                	test   eax,eax
c001e9bf:	0f 84 31 ff ff ff    	je     c001e8f6 <cleanerTaskFunction(void*)+0x4>
c001e9c5:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c001e9cf:	e8 e4 f6 ff ff       	call   c001e0b8 <schedule()>
c001e9d4:	e9 1d ff ff ff       	jmp    c001e8f6 <cleanerTaskFunction(void*)+0x4>
c001e9d9:	83 ec 0c             	sub    esp,0xc
c001e9dc:	6a 02                	push   0x2
c001e9de:	e8 86 f8 ff ff       	call   c001e269 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e9e3:	83 c4 10             	add    esp,0x10
c001e9e6:	e9 3f ff ff ff       	jmp    c001e92a <cleanerTaskFunction(void*)+0x38>

c001e9eb <terminateTask(int)>:
c001e9eb:	83 ec 14             	sub    esp,0x14
c001e9ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e9f6:	83 c0 0c             	add    eax,0xc
c001e9f9:	50                   	push   eax
c001e9fa:	68 44 cf 02 c0       	push   0xc002cf44
c001e9ff:	e8 cb 3e ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001ea04:	fa                   	cli    
c001ea05:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001ea0b:	ff 05 24 25 03 c0    	inc    DWORD PTR ds:0xc0032524
c001ea11:	fa                   	cli    
c001ea12:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001ea18:	c7 04 24 f8 cb 02 c0 	mov    DWORD PTR [esp],0xc002cbf8
c001ea1f:	e8 ab 3e ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001ea24:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ea28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea2d:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001ea30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea35:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ea38:	5a                   	pop    edx
c001ea39:	59                   	pop    ecx
c001ea3a:	50                   	push   eax
c001ea3b:	68 2c 25 03 c0       	push   0xc003252c
c001ea40:	e8 07 a9 00 00       	call   c002934c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ea45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea4a:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001ea51:	c7 04 24 12 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc12
c001ea58:	e8 72 3e ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001ea5d:	83 c4 10             	add    esp,0x10
c001ea60:	a1 08 25 03 c0       	mov    eax,ds:0xc0032508
c001ea65:	85 c0                	test   eax,eax
c001ea67:	0f 84 8d 00 00 00    	je     c001eafa <terminateTask(int)+0x10f>
c001ea6d:	83 ec 0c             	sub    esp,0xc
c001ea70:	68 2c cc 02 c0       	push   0xc002cc2c
c001ea75:	e8 55 3e ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001ea7a:	58                   	pop    eax
c001ea7b:	c6 05 0c 25 03 c0 01 	mov    BYTE PTR ds:0xc003250c,0x1
c001ea82:	ff 35 08 25 03 c0    	push   DWORD PTR ds:0xc0032508
c001ea88:	e8 ef fa ff ff       	call   c001e57c <unblockTask(ThreadControlBlock*)>
c001ea8d:	c7 04 24 46 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc46
c001ea94:	e8 36 3e ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001ea99:	83 c4 10             	add    esp,0x10
c001ea9c:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001eaa1:	48                   	dec    eax
c001eaa2:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001eaa7:	75 01                	jne    c001eaaa <terminateTask(int)+0xbf>
c001eaa9:	fb                   	sti    
c001eaaa:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c001eaaf:	48                   	dec    eax
c001eab0:	a3 24 25 03 c0       	mov    ds:0xc0032524,eax
c001eab5:	75 09                	jne    c001eac0 <terminateTask(int)+0xd5>
c001eab7:	83 3d 20 25 03 c0 00 	cmp    DWORD PTR ds:0xc0032520,0x0
c001eabe:	75 4c                	jne    c001eb0c <terminateTask(int)+0x121>
c001eac0:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001eac5:	48                   	dec    eax
c001eac6:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001eacb:	75 01                	jne    c001eace <terminateTask(int)+0xe3>
c001eacd:	fb                   	sti    
c001eace:	83 ec 0c             	sub    esp,0xc
c001ead1:	68 7e cc 02 c0       	push   0xc002cc7e
c001ead6:	e8 f4 3d ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001eadb:	83 c4 10             	add    esp,0x10
c001eade:	fa                   	cli    
c001eadf:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001eae5:	e8 ce f5 ff ff       	call   c001e0b8 <schedule()>
c001eaea:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001eaef:	48                   	dec    eax
c001eaf0:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001eaf5:	75 e7                	jne    c001eade <terminateTask(int)+0xf3>
c001eaf7:	fb                   	sti    
c001eaf8:	eb e4                	jmp    c001eade <terminateTask(int)+0xf3>
c001eafa:	83 ec 0c             	sub    esp,0xc
c001eafd:	68 60 cc 02 c0       	push   0xc002cc60
c001eb02:	e8 c8 3d ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001eb07:	83 c4 10             	add    esp,0x10
c001eb0a:	eb 90                	jmp    c001ea9c <terminateTask(int)+0xb1>
c001eb0c:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c001eb16:	e8 9d f5 ff ff       	call   c001e0b8 <schedule()>
c001eb1b:	eb a3                	jmp    c001eac0 <terminateTask(int)+0xd5>

c001eb1d <Thr::terminateFromIRQ(int)>:
c001eb1d:	83 ec 18             	sub    esp,0x18
c001eb20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb24:	e8 c2 fe ff ff       	call   c001e9eb <terminateTask(int)>
c001eb29:	90                   	nop

c001eb2a <Semaphore::release()>:
c001eb2a:	83 ec 0c             	sub    esp,0xc
c001eb2d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eb31:	fa                   	cli    
c001eb32:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c001eb37:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001eb3d:	8d 48 01             	lea    ecx,[eax+0x1]
c001eb40:	89 0d 24 25 03 c0    	mov    DWORD PTR ds:0xc0032524,ecx
c001eb46:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001eb49:	85 c9                	test   ecx,ecx
c001eb4b:	74 3c                	je     c001eb89 <Semaphore::release()+0x5f>
c001eb4d:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001eb50:	83 ec 0c             	sub    esp,0xc
c001eb53:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001eb56:	51                   	push   ecx
c001eb57:	e8 20 fa ff ff       	call   c001e57c <unblockTask(ThreadControlBlock*)>
c001eb5c:	a1 24 25 03 c0       	mov    eax,ds:0xc0032524
c001eb61:	83 c4 10             	add    esp,0x10
c001eb64:	48                   	dec    eax
c001eb65:	a3 24 25 03 c0       	mov    ds:0xc0032524,eax
c001eb6a:	85 c0                	test   eax,eax
c001eb6c:	75 09                	jne    c001eb77 <Semaphore::release()+0x4d>
c001eb6e:	a1 20 25 03 c0       	mov    eax,ds:0xc0032520
c001eb73:	85 c0                	test   eax,eax
c001eb75:	75 17                	jne    c001eb8e <Semaphore::release()+0x64>
c001eb77:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001eb7c:	48                   	dec    eax
c001eb7d:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001eb82:	75 01                	jne    c001eb85 <Semaphore::release()+0x5b>
c001eb84:	fb                   	sti    
c001eb85:	83 c4 0c             	add    esp,0xc
c001eb88:	c3                   	ret    
c001eb89:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001eb8c:	eb d7                	jmp    c001eb65 <Semaphore::release()+0x3b>
c001eb8e:	c7 05 20 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032520,0x0
c001eb98:	e8 1b f5 ff ff       	call   c001e0b8 <schedule()>
c001eb9d:	eb d8                	jmp    c001eb77 <Semaphore::release()+0x4d>

c001eb9f <__static_initialization_and_destruction_0(int, int)>:
c001eb9f:	83 ec 0c             	sub    esp,0xc
c001eba2:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001eba7:	0f 85 88 00 00 00    	jne    c001ec35 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ebad:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ebb5:	75 7e                	jne    c001ec35 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ebb7:	83 ec 0c             	sub    esp,0xc
c001ebba:	68 44 25 03 c0       	push   0xc0032544
c001ebbf:	e8 18 aa 00 00       	call   c00295dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ebc4:	83 c4 10             	add    esp,0x10
c001ebc7:	83 ec 04             	sub    esp,0x4
c001ebca:	68 bc dd 02 c0       	push   0xc002ddbc
c001ebcf:	68 44 25 03 c0       	push   0xc0032544
c001ebd4:	68 90 95 02 c0       	push   0xc0029590
c001ebd9:	e8 8b 3b ff ff       	call   c0012769 <__cxa_atexit>
c001ebde:	83 c4 10             	add    esp,0x10
c001ebe1:	83 ec 0c             	sub    esp,0xc
c001ebe4:	68 38 25 03 c0       	push   0xc0032538
c001ebe9:	e8 ee a9 00 00       	call   c00295dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ebee:	83 c4 10             	add    esp,0x10
c001ebf1:	83 ec 04             	sub    esp,0x4
c001ebf4:	68 bc dd 02 c0       	push   0xc002ddbc
c001ebf9:	68 38 25 03 c0       	push   0xc0032538
c001ebfe:	68 90 95 02 c0       	push   0xc0029590
c001ec03:	e8 61 3b ff ff       	call   c0012769 <__cxa_atexit>
c001ec08:	83 c4 10             	add    esp,0x10
c001ec0b:	83 ec 0c             	sub    esp,0xc
c001ec0e:	68 2c 25 03 c0       	push   0xc003252c
c001ec13:	e8 c4 a9 00 00       	call   c00295dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ec18:	83 c4 10             	add    esp,0x10
c001ec1b:	83 ec 04             	sub    esp,0x4
c001ec1e:	68 bc dd 02 c0       	push   0xc002ddbc
c001ec23:	68 2c 25 03 c0       	push   0xc003252c
c001ec28:	68 90 95 02 c0       	push   0xc0029590
c001ec2d:	e8 37 3b ff ff       	call   c0012769 <__cxa_atexit>
c001ec32:	83 c4 10             	add    esp,0x10
c001ec35:	90                   	nop
c001ec36:	83 c4 0c             	add    esp,0xc
c001ec39:	c3                   	ret    

c001ec3a <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ec3a:	83 ec 0c             	sub    esp,0xc
c001ec3d:	83 ec 08             	sub    esp,0x8
c001ec40:	68 ff ff 00 00       	push   0xffff
c001ec45:	6a 01                	push   0x1
c001ec47:	e8 53 ff ff ff       	call   c001eb9f <__static_initialization_and_destruction_0(int, int)>
c001ec4c:	83 c4 10             	add    esp,0x10
c001ec4f:	83 c4 0c             	add    esp,0xc
c001ec52:	c3                   	ret    

c001ec53 <Vm::inbv(unsigned short)>:
c001ec53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ec57:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ec5c:	75 06                	jne    c001ec64 <Vm::inbv(unsigned short)+0x11>
c001ec5e:	a0 8c 25 03 c0       	mov    al,ds:0xc003258c
c001ec63:	c3                   	ret    
c001ec64:	ec                   	in     al,dx
c001ec65:	c3                   	ret    

c001ec66 <Vm::outbv(unsigned short, unsigned char)>:
c001ec66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ec6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec6e:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ec73:	75 25                	jne    c001ec9a <Vm::outbv(unsigned short, unsigned char)+0x34>
c001ec75:	8b 0d 8c 25 03 c0    	mov    ecx,DWORD PTR ds:0xc003258c
c001ec7b:	8d 51 01             	lea    edx,[ecx+0x1]
c001ec7e:	88 81 a0 25 03 c0    	mov    BYTE PTR [ecx-0x3ffcda60],al
c001ec84:	89 15 8c 25 03 c0    	mov    DWORD PTR ds:0xc003258c,edx
c001ec8a:	83 fa 20             	cmp    edx,0x20
c001ec8d:	75 0c                	jne    c001ec9b <Vm::outbv(unsigned short, unsigned char)+0x35>
c001ec8f:	c7 05 8c 25 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003258c,0x1f
c001ec99:	c3                   	ret    
c001ec9a:	ee                   	out    dx,al
c001ec9b:	c3                   	ret    

c001ec9c <Vm::realToLinear(unsigned short, unsigned short)>:
c001ec9c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eca1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eca6:	c1 e0 04             	shl    eax,0x4
c001eca9:	01 d0                	add    eax,edx
c001ecab:	c3                   	ret    

c001ecac <Vm::getSegment(unsigned int)>:
c001ecac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecb0:	c1 e8 10             	shr    eax,0x10
c001ecb3:	c3                   	ret    

c001ecb4 <Vm::getOffset(unsigned int)>:
c001ecb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecb8:	c3                   	ret    

c001ecb9 <Vm::mainloop2()>:
c001ecb9:	83 ec 18             	sub    esp,0x18
c001ecbc:	fa                   	cli    
c001ecbd:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001ecc3:	6a 02                	push   0x2
c001ecc5:	c6 05 85 25 03 c0 01 	mov    BYTE PTR ds:0xc0032585,0x1
c001eccc:	e8 98 f5 ff ff       	call   c001e269 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ecd1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ecd6:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ecda:	52                   	push   edx
c001ecdb:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ecdf:	52                   	push   edx
c001ece0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ece4:	52                   	push   edx
c001ece5:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ece9:	50                   	push   eax
c001ecea:	e8 0b 16 fe ff       	call   c00002fa <goToVM86>
c001ecef:	83 c4 2c             	add    esp,0x2c
c001ecf2:	c3                   	ret    

c001ecf3 <Vm::mainVm8086Loop(void*)>:
c001ecf3:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001ecf8:	48                   	dec    eax
c001ecf9:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001ecfe:	75 01                	jne    c001ed01 <Vm::mainVm8086Loop(void*)+0xe>
c001ed00:	fb                   	sti    
c001ed01:	eb b6                	jmp    c001ecb9 <Vm::mainloop2()>

c001ed03 <Vm::mainloop3(unsigned long)>:
c001ed03:	83 ec 18             	sub    esp,0x18
c001ed06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ed0a:	fa                   	cli    
c001ed0b:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001ed11:	6a 02                	push   0x2
c001ed13:	c6 05 84 25 03 c0 01 	mov    BYTE PTR ds:0xc0032584,0x1
c001ed1a:	a3 80 25 03 c0       	mov    ds:0xc0032580,eax
c001ed1f:	e8 45 f5 ff ff       	call   c001e269 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ed24:	83 c4 1c             	add    esp,0x1c
c001ed27:	eb 90                	jmp    c001ecb9 <Vm::mainloop2()>

c001ed29 <Vm::initialise8086()>:
c001ed29:	83 ec 0c             	sub    esp,0xc
c001ed2c:	68 80 00 00 00       	push   0x80
c001ed31:	6a 00                	push   0x0
c001ed33:	68 f3 ec 01 c0       	push   0xc001ecf3
c001ed38:	ff 35 50 25 03 c0    	push   DWORD PTR ds:0xc0032550
c001ed3e:	e8 31 f1 ff ff       	call   c001de74 <Process::createThread(void (*)(void*), void*, int)>
c001ed43:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ed4a:	a3 88 25 03 c0       	mov    ds:0xc0032588,eax
c001ed4f:	68 00 01 00 00       	push   0x100
c001ed54:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c001ed59:	6a 00                	push   0x0
c001ed5b:	6a 00                	push   0x0
c001ed5d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ed63:	e8 8e 32 ff ff       	call   c0011ff6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ed68:	83 c4 2c             	add    esp,0x2c
c001ed6b:	c3                   	ret    

c001ed6c <Vm::finish8086()>:
c001ed6c:	53                   	push   ebx
c001ed6d:	83 ec 08             	sub    esp,0x8
c001ed70:	fa                   	cli    
c001ed71:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001ed77:	80 3d 84 25 03 c0 00 	cmp    BYTE PTR ds:0xc0032584,0x0
c001ed7e:	75 15                	jne    c001ed95 <Vm::finish8086()+0x29>
c001ed80:	e8 33 f3 ff ff       	call   c001e0b8 <schedule()>
c001ed85:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001ed8a:	48                   	dec    eax
c001ed8b:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001ed90:	75 de                	jne    c001ed70 <Vm::finish8086()+0x4>
c001ed92:	fb                   	sti    
c001ed93:	eb db                	jmp    c001ed70 <Vm::finish8086()+0x4>
c001ed95:	83 ec 0c             	sub    esp,0xc
c001ed98:	8b 1d 80 25 03 c0    	mov    ebx,DWORD PTR ds:0xc0032580
c001ed9e:	ff 35 88 25 03 c0    	push   DWORD PTR ds:0xc0032588
c001eda4:	c6 05 84 25 03 c0 00 	mov    BYTE PTR ds:0xc0032584,0x0
c001edab:	e8 cc f7 ff ff       	call   c001e57c <unblockTask(ThreadControlBlock*)>
c001edb0:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001edb5:	83 c4 10             	add    esp,0x10
c001edb8:	8d 50 ff             	lea    edx,[eax-0x1]
c001edbb:	89 15 28 25 03 c0    	mov    DWORD PTR ds:0xc0032528,edx
c001edc1:	85 d2                	test   edx,edx
c001edc3:	75 01                	jne    c001edc6 <Vm::finish8086()+0x5a>
c001edc5:	fb                   	sti    
c001edc6:	89 d8                	mov    eax,ebx
c001edc8:	83 c4 08             	add    esp,0x8
c001edcb:	5b                   	pop    ebx
c001edcc:	c3                   	ret    

c001edcd <Vm::getOutput8086(unsigned char*)>:
c001edcd:	57                   	push   edi
c001edce:	8b 0d 8c 25 03 c0    	mov    ecx,DWORD PTR ds:0xc003258c
c001edd4:	56                   	push   esi
c001edd5:	be a0 25 03 c0       	mov    esi,0xc00325a0
c001edda:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001edde:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ede0:	a1 8c 25 03 c0       	mov    eax,ds:0xc003258c
c001ede5:	5e                   	pop    esi
c001ede6:	c7 05 8c 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003258c,0x0
c001edf0:	5f                   	pop    edi
c001edf1:	c3                   	ret    

c001edf2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001edf2:	55                   	push   ebp
c001edf3:	57                   	push   edi
c001edf4:	56                   	push   esi
c001edf5:	53                   	push   ebx
c001edf6:	83 ec 2c             	sub    esp,0x2c
c001edf9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001edfd:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ee01:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001ee05:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001ee09:	fa                   	cli    
c001ee0a:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c001ee10:	0f b6 35 85 25 03 c0 	movzx  esi,BYTE PTR ds:0xc0032585
c001ee17:	89 f0                	mov    eax,esi
c001ee19:	84 c0                	test   al,al
c001ee1b:	75 1d                	jne    c001ee3a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001ee1d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ee21:	e8 92 f2 ff ff       	call   c001e0b8 <schedule()>
c001ee26:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001ee2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ee2f:	48                   	dec    eax
c001ee30:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001ee35:	75 d2                	jne    c001ee09 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ee37:	fb                   	sti    
c001ee38:	eb cf                	jmp    c001ee09 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ee3a:	a1 88 25 03 c0       	mov    eax,ds:0xc0032588
c001ee3f:	c7 05 8c 25 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003258c,0x0
c001ee49:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001ee4d:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001ee51:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001ee55:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001ee59:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ee5d:	50                   	push   eax
c001ee5e:	6a 20                	push   0x20
c001ee60:	6a 00                	push   0x0
c001ee62:	68 a0 25 03 c0       	push   0xc00325a0
c001ee67:	e8 e4 18 fe ff       	call   c0000750 <memset>
c001ee6c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ee73:	e8 14 0a ff ff       	call   c000f88c <malloc>
c001ee78:	83 c4 0c             	add    esp,0xc
c001ee7b:	89 c3                	mov    ebx,eax
c001ee7d:	ff 35 50 25 03 c0    	push   DWORD PTR ds:0xc0032550
c001ee83:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ee87:	50                   	push   eax
c001ee88:	e8 a1 3f ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c001ee8d:	83 c4 10             	add    esp,0x10
c001ee90:	85 db                	test   ebx,ebx
c001ee92:	75 0a                	jne    c001ee9e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001ee94:	83 ec 0c             	sub    esp,0xc
c001ee97:	68 63 cf 02 c0       	push   0xc002cf63
c001ee9c:	eb 3e                	jmp    c001eedc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001ee9e:	50                   	push   eax
c001ee9f:	8d 44 24 17          	lea    eax,[esp+0x17]
c001eea3:	50                   	push   eax
c001eea4:	8d 44 24 20          	lea    eax,[esp+0x20]
c001eea8:	50                   	push   eax
c001eea9:	53                   	push   ebx
c001eeaa:	e8 8f 42 ff ff       	call   c001313e <File::stat(unsigned long long*, bool*)>
c001eeaf:	83 c4 10             	add    esp,0x10
c001eeb2:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001eeb7:	74 0a                	je     c001eec3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001eeb9:	83 ec 0c             	sub    esp,0xc
c001eebc:	68 77 cf 02 c0       	push   0xc002cf77
c001eec1:	eb 19                	jmp    c001eedc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001eec3:	51                   	push   ecx
c001eec4:	51                   	push   ecx
c001eec5:	6a 01                	push   0x1
c001eec7:	53                   	push   ebx
c001eec8:	e8 c5 3f ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c001eecd:	83 c4 10             	add    esp,0x10
c001eed0:	85 c0                	test   eax,eax
c001eed2:	74 24                	je     c001eef8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001eed4:	83 ec 0c             	sub    esp,0xc
c001eed7:	68 90 cf 02 c0       	push   0xc002cf90
c001eedc:	e8 24 b4 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001eee1:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001eee6:	83 c4 10             	add    esp,0x10
c001eee9:	48                   	dec    eax
c001eeea:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001eeef:	85 c0                	test   eax,eax
c001eef1:	75 01                	jne    c001eef4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001eef3:	fb                   	sti    
c001eef4:	31 f6                	xor    esi,esi
c001eef6:	eb 58                	jmp    c001ef50 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001eef8:	0f b7 ed             	movzx  ebp,bp
c001eefb:	50                   	push   eax
c001eefc:	0f b7 ff             	movzx  edi,di
c001eeff:	50                   	push   eax
c001ef00:	55                   	push   ebp
c001ef01:	57                   	push   edi
c001ef02:	e8 95 fd ff ff       	call   c001ec9c <Vm::realToLinear(unsigned short, unsigned short)>
c001ef07:	5a                   	pop    edx
c001ef08:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ef0a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ef0e:	51                   	push   ecx
c001ef0f:	50                   	push   eax
c001ef10:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ef14:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ef18:	53                   	push   ebx
c001ef19:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ef1c:	83 c4 14             	add    esp,0x14
c001ef1f:	53                   	push   ebx
c001ef20:	e8 cb 3f ff ff       	call   c0012ef0 <File::close()>
c001ef25:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c001ef2a:	83 c4 10             	add    esp,0x10
c001ef2d:	48                   	dec    eax
c001ef2e:	c6 05 85 25 03 c0 00 	mov    BYTE PTR ds:0xc0032585,0x0
c001ef35:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c001ef3a:	85 c0                	test   eax,eax
c001ef3c:	75 01                	jne    c001ef3f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001ef3e:	fb                   	sti    
c001ef3f:	83 ec 0c             	sub    esp,0xc
c001ef42:	ff 35 88 25 03 c0    	push   DWORD PTR ds:0xc0032588
c001ef48:	e8 2f f6 ff ff       	call   c001e57c <unblockTask(ThreadControlBlock*)>
c001ef4d:	83 c4 10             	add    esp,0x10
c001ef50:	83 c4 2c             	add    esp,0x2c
c001ef53:	89 f0                	mov    eax,esi
c001ef55:	5b                   	pop    ebx
c001ef56:	5e                   	pop    esi
c001ef57:	5f                   	pop    edi
c001ef58:	5d                   	pop    ebp
c001ef59:	c3                   	ret    

c001ef5a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ef5a:	57                   	push   edi
c001ef5b:	56                   	push   esi
c001ef5c:	53                   	push   ebx
c001ef5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef65:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ef69:	83 e8 06             	sub    eax,0x6
c001ef6c:	0f b7 c0             	movzx  eax,ax
c001ef6f:	50                   	push   eax
c001ef70:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ef75:	50                   	push   eax
c001ef76:	e8 21 fd ff ff       	call   c001ec9c <Vm::realToLinear(unsigned short, unsigned short)>
c001ef7b:	5a                   	pop    edx
c001ef7c:	5e                   	pop    esi
c001ef7d:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ef80:	8d 56 fa             	lea    edx,[esi-0x6]
c001ef83:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ef89:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ef8c:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ef8f:	83 c2 02             	add    edx,0x2
c001ef92:	66 89 10             	mov    WORD PTR [eax],dx
c001ef95:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ef98:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ef9c:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ef9f:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001efa3:	89 d6                	mov    esi,edx
c001efa5:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001efab:	66 81 e6 ff fd       	and    si,0xfdff
c001efb0:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001efb4:	74 07                	je     c001efbd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001efb6:	89 d6                	mov    esi,edx
c001efb8:	66 81 ce 00 02       	or     si,0x200
c001efbd:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001efc1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001efc6:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001efca:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001efd2:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001efd5:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001efdd:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001efe0:	5b                   	pop    ebx
c001efe1:	5e                   	pop    esi
c001efe2:	5f                   	pop    edi
c001efe3:	c3                   	ret    

c001efe4 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001efe4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001efe9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001efee:	c1 e0 04             	shl    eax,0x4
c001eff1:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001eff4:	c3                   	ret    

c001eff5 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001eff5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001effa:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001efff:	c1 e0 04             	shl    eax,0x4
c001f002:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f006:	c3                   	ret    

c001f007 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f007:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f00c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f011:	c1 e0 04             	shl    eax,0x4
c001f014:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f017:	c3                   	ret    

c001f018 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f018:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f01d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f022:	c1 e0 04             	shl    eax,0x4
c001f025:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f029:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f02c:	c3                   	ret    

c001f02d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f02d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f032:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f037:	c1 e0 04             	shl    eax,0x4
c001f03a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f03e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f042:	c3                   	ret    

c001f043 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f043:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f048:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f04d:	c1 e0 04             	shl    eax,0x4
c001f050:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f054:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f057:	c3                   	ret    

c001f058 <Vm::faultHandler(regs*)>:
c001f058:	55                   	push   ebp
c001f059:	57                   	push   edi
c001f05a:	56                   	push   esi
c001f05b:	53                   	push   ebx
c001f05c:	83 ec 1c             	sub    esp,0x1c
c001f05f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f063:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001f066:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001f06a:	0f b7 f8             	movzx  edi,ax
c001f06d:	52                   	push   edx
c001f06e:	0f b7 c0             	movzx  eax,ax
c001f071:	50                   	push   eax
c001f072:	e8 25 fc ff ff       	call   c001ec9c <Vm::realToLinear(unsigned short, unsigned short)>
c001f077:	5a                   	pop    edx
c001f078:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001f07b:	59                   	pop    ecx
c001f07c:	89 c1                	mov    ecx,eax
c001f07e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f081:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f085:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f08a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f08e:	0f b7 c5             	movzx  eax,bp
c001f091:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f095:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001f099:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f09d:	e8 fa fb ff ff       	call   c001ec9c <Vm::realToLinear(unsigned short, unsigned short)>
c001f0a2:	5e                   	pop    esi
c001f0a3:	be 06 00 00 00       	mov    esi,0x6
c001f0a8:	5a                   	pop    edx
c001f0a9:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001f0ae:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001f0b3:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001f0b6:	80 fa 9d             	cmp    dl,0x9d
c001f0b9:	0f 84 2c 02 00 00    	je     c001f2eb <Vm::faultHandler(regs*)+0x293>
c001f0bf:	0f 87 91 00 00 00    	ja     c001f156 <Vm::faultHandler(regs*)+0xfe>
c001f0c5:	80 fa 66             	cmp    dl,0x66
c001f0c8:	0f 84 98 01 00 00    	je     c001f266 <Vm::faultHandler(regs*)+0x20e>
c001f0ce:	77 47                	ja     c001f117 <Vm::faultHandler(regs*)+0xbf>
c001f0d0:	80 fa 36             	cmp    dl,0x36
c001f0d3:	0f 84 80 01 00 00    	je     c001f259 <Vm::faultHandler(regs*)+0x201>
c001f0d9:	77 1a                	ja     c001f0f5 <Vm::faultHandler(regs*)+0x9d>
c001f0db:	80 fa 26             	cmp    dl,0x26
c001f0de:	0f 84 4e 01 00 00    	je     c001f232 <Vm::faultHandler(regs*)+0x1da>
c001f0e4:	80 fa 2e             	cmp    dl,0x2e
c001f0e7:	0f 85 e2 05 00 00    	jne    c001f6cf <Vm::faultHandler(regs*)+0x677>
c001f0ed:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f0f0:	31 f6                	xor    esi,esi
c001f0f2:	41                   	inc    ecx
c001f0f3:	eb be                	jmp    c001f0b3 <Vm::faultHandler(regs*)+0x5b>
c001f0f5:	80 fa 64             	cmp    dl,0x64
c001f0f8:	0f 84 41 01 00 00    	je     c001f23f <Vm::faultHandler(regs*)+0x1e7>
c001f0fe:	0f 87 48 01 00 00    	ja     c001f24c <Vm::faultHandler(regs*)+0x1f4>
c001f104:	80 fa 3e             	cmp    dl,0x3e
c001f107:	0f 85 c2 05 00 00    	jne    c001f6cf <Vm::faultHandler(regs*)+0x677>
c001f10d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f110:	be 01 00 00 00       	mov    esi,0x1
c001f115:	eb db                	jmp    c001f0f2 <Vm::faultHandler(regs*)+0x9a>
c001f117:	80 fa 6d             	cmp    dl,0x6d
c001f11a:	0f 84 ec 02 00 00    	je     c001f40c <Vm::faultHandler(regs*)+0x3b4>
c001f120:	77 17                	ja     c001f139 <Vm::faultHandler(regs*)+0xe1>
c001f122:	80 fa 67             	cmp    dl,0x67
c001f125:	0f 84 48 01 00 00    	je     c001f273 <Vm::faultHandler(regs*)+0x21b>
c001f12b:	80 fa 6c             	cmp    dl,0x6c
c001f12e:	0f 84 69 02 00 00    	je     c001f39d <Vm::faultHandler(regs*)+0x345>
c001f134:	e9 96 05 00 00       	jmp    c001f6cf <Vm::faultHandler(regs*)+0x677>
c001f139:	80 fa 6f             	cmp    dl,0x6f
c001f13c:	0f 84 f4 03 00 00    	je     c001f536 <Vm::faultHandler(regs*)+0x4de>
c001f142:	0f 82 59 03 00 00    	jb     c001f4a1 <Vm::faultHandler(regs*)+0x449>
c001f148:	80 fa 9c             	cmp    dl,0x9c
c001f14b:	0f 84 2f 01 00 00    	je     c001f280 <Vm::faultHandler(regs*)+0x228>
c001f151:	e9 79 05 00 00       	jmp    c001f6cf <Vm::faultHandler(regs*)+0x677>
c001f156:	80 fa ec             	cmp    dl,0xec
c001f159:	0f 84 14 05 00 00    	je     c001f673 <Vm::faultHandler(regs*)+0x61b>
c001f15f:	77 7b                	ja     c001f1dc <Vm::faultHandler(regs*)+0x184>
c001f161:	80 fa e4             	cmp    dl,0xe4
c001f164:	0f 84 93 04 00 00    	je     c001f5fd <Vm::faultHandler(regs*)+0x5a5>
c001f16a:	77 53                	ja     c001f1bf <Vm::faultHandler(regs*)+0x167>
c001f16c:	80 fa cd             	cmp    dl,0xcd
c001f16f:	0f 84 d9 01 00 00    	je     c001f34e <Vm::faultHandler(regs*)+0x2f6>
c001f175:	80 fa cf             	cmp    dl,0xcf
c001f178:	0f 85 51 05 00 00    	jne    c001f6cf <Vm::faultHandler(regs*)+0x677>
c001f17e:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f181:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001f184:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001f188:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001f18b:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001f18f:	81 ca 00 02 02 00    	or     edx,0x20200
c001f195:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f198:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001f19c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1a2:	66 c1 e8 09          	shr    ax,0x9
c001f1a6:	83 e0 01             	and    eax,0x1
c001f1a9:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f1ac:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f1af:	83 c0 06             	add    eax,0x6
c001f1b2:	25 ff ff 00 00       	and    eax,0xffff
c001f1b7:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f1ba:	e9 0c 05 00 00       	jmp    c001f6cb <Vm::faultHandler(regs*)+0x673>
c001f1bf:	80 fa e6             	cmp    dl,0xe6
c001f1c2:	0f 84 7f 04 00 00    	je     c001f647 <Vm::faultHandler(regs*)+0x5ef>
c001f1c8:	0f 82 4b 04 00 00    	jb     c001f619 <Vm::faultHandler(regs*)+0x5c1>
c001f1ce:	80 fa e7             	cmp    dl,0xe7
c001f1d1:	0f 84 87 04 00 00    	je     c001f65e <Vm::faultHandler(regs*)+0x606>
c001f1d7:	e9 f3 04 00 00       	jmp    c001f6cf <Vm::faultHandler(regs*)+0x677>
c001f1dc:	80 fa ef             	cmp    dl,0xef
c001f1df:	0f 84 d1 04 00 00    	je     c001f6b6 <Vm::faultHandler(regs*)+0x65e>
c001f1e5:	77 28                	ja     c001f20f <Vm::faultHandler(regs*)+0x1b7>
c001f1e7:	80 fa ed             	cmp    dl,0xed
c001f1ea:	0f 84 9f 04 00 00    	je     c001f68f <Vm::faultHandler(regs*)+0x637>
c001f1f0:	80 fa ee             	cmp    dl,0xee
c001f1f3:	0f 85 d6 04 00 00    	jne    c001f6cf <Vm::faultHandler(regs*)+0x677>
c001f1f9:	50                   	push   eax
c001f1fa:	50                   	push   eax
c001f1fb:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f1ff:	50                   	push   eax
c001f200:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f204:	50                   	push   eax
c001f205:	e8 5c fa ff ff       	call   c001ec66 <Vm::outbv(unsigned short, unsigned char)>
c001f20a:	e9 9f 04 00 00       	jmp    c001f6ae <Vm::faultHandler(regs*)+0x656>
c001f20f:	80 fa fa             	cmp    dl,0xfa
c001f212:	0f 84 69 01 00 00    	je     c001f381 <Vm::faultHandler(regs*)+0x329>
c001f218:	80 fa fb             	cmp    dl,0xfb
c001f21b:	0f 84 6e 01 00 00    	je     c001f38f <Vm::faultHandler(regs*)+0x337>
c001f221:	80 fa f3             	cmp    dl,0xf3
c001f224:	0f 85 a5 04 00 00    	jne    c001f6cf <Vm::faultHandler(regs*)+0x677>
c001f22a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f22d:	e9 c0 fe ff ff       	jmp    c001f0f2 <Vm::faultHandler(regs*)+0x9a>
c001f232:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f235:	be 02 00 00 00       	mov    esi,0x2
c001f23a:	e9 b3 fe ff ff       	jmp    c001f0f2 <Vm::faultHandler(regs*)+0x9a>
c001f23f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f242:	be 03 00 00 00       	mov    esi,0x3
c001f247:	e9 a6 fe ff ff       	jmp    c001f0f2 <Vm::faultHandler(regs*)+0x9a>
c001f24c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f24f:	be 04 00 00 00       	mov    esi,0x4
c001f254:	e9 99 fe ff ff       	jmp    c001f0f2 <Vm::faultHandler(regs*)+0x9a>
c001f259:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f25c:	be 05 00 00 00       	mov    esi,0x5
c001f261:	e9 8c fe ff ff       	jmp    c001f0f2 <Vm::faultHandler(regs*)+0x9a>
c001f266:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f269:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001f26e:	e9 7f fe ff ff       	jmp    c001f0f2 <Vm::faultHandler(regs*)+0x9a>
c001f273:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f276:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001f27b:	e9 72 fe ff ff       	jmp    c001f0f2 <Vm::faultHandler(regs*)+0x9a>
c001f280:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001f283:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f287:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f28c:	74 30                	je     c001f2be <Vm::faultHandler(regs*)+0x266>
c001f28e:	83 e9 04             	sub    ecx,0x4
c001f291:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f297:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f29d:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f2a0:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f2a3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f2a9:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f2ad:	0f 84 15 04 00 00    	je     c001f6c8 <Vm::faultHandler(regs*)+0x670>
c001f2b3:	80 ce 02             	or     dh,0x2
c001f2b6:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f2b9:	e9 0a 04 00 00       	jmp    c001f6c8 <Vm::faultHandler(regs*)+0x670>
c001f2be:	83 e9 02             	sub    ecx,0x2
c001f2c1:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f2c7:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f2ca:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f2ce:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f2d4:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f2d8:	74 05                	je     c001f2df <Vm::faultHandler(regs*)+0x287>
c001f2da:	80 ce 02             	or     dh,0x2
c001f2dd:	eb 03                	jmp    c001f2e2 <Vm::faultHandler(regs*)+0x28a>
c001f2df:	80 e6 fd             	and    dh,0xfd
c001f2e2:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f2e6:	e9 dd 03 00 00       	jmp    c001f6c8 <Vm::faultHandler(regs*)+0x670>
c001f2eb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f2f0:	74 2a                	je     c001f31c <Vm::faultHandler(regs*)+0x2c4>
c001f2f2:	8b 10                	mov    edx,DWORD PTR [eax]
c001f2f4:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f2fa:	81 ca 00 02 02 00    	or     edx,0x20200
c001f300:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f303:	8b 00                	mov    eax,DWORD PTR [eax]
c001f305:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f30b:	c1 e8 09             	shr    eax,0x9
c001f30e:	83 e0 01             	and    eax,0x1
c001f311:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f314:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f317:	83 c0 04             	add    eax,0x4
c001f31a:	eb 25                	jmp    c001f341 <Vm::faultHandler(regs*)+0x2e9>
c001f31c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f31f:	81 ca 00 02 02 00    	or     edx,0x20200
c001f325:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f328:	66 8b 00             	mov    ax,WORD PTR [eax]
c001f32b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f331:	66 c1 e8 09          	shr    ax,0x9
c001f335:	83 e0 01             	and    eax,0x1
c001f338:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f33b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f33e:	83 c0 02             	add    eax,0x2
c001f341:	25 ff ff 00 00       	and    eax,0xffff
c001f346:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f349:	e9 7a 03 00 00       	jmp    c001f6c8 <Vm::faultHandler(regs*)+0x670>
c001f34e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f352:	3c ee                	cmp    al,0xee
c001f354:	75 10                	jne    c001f366 <Vm::faultHandler(regs*)+0x30e>
c001f356:	83 ec 0c             	sub    esp,0xc
c001f359:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001f35c:	e8 a2 f9 ff ff       	call   c001ed03 <Vm::mainloop3(unsigned long)>
c001f361:	e9 4b 03 00 00       	jmp    c001f6b1 <Vm::faultHandler(regs*)+0x659>
c001f366:	83 ec 0c             	sub    esp,0xc
c001f369:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f36d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f371:	51                   	push   ecx
c001f372:	50                   	push   eax
c001f373:	53                   	push   ebx
c001f374:	e8 e1 fb ff ff       	call   c001ef5a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f379:	83 c4 20             	add    esp,0x20
c001f37c:	e9 4a 03 00 00       	jmp    c001f6cb <Vm::faultHandler(regs*)+0x673>
c001f381:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f386:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f38a:	e9 39 03 00 00       	jmp    c001f6c8 <Vm::faultHandler(regs*)+0x670>
c001f38f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f394:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f398:	e9 2b 03 00 00       	jmp    c001f6c8 <Vm::faultHandler(regs*)+0x670>
c001f39d:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f3a0:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f3a5:	74 2b                	je     c001f3d2 <Vm::faultHandler(regs*)+0x37a>
c001f3a7:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001f3ae:	76 22                	jbe    c001f3d2 <Vm::faultHandler(regs*)+0x37a>
c001f3b0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f3b4:	50                   	push   eax
c001f3b5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f3b9:	50                   	push   eax
c001f3ba:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f3be:	50                   	push   eax
c001f3bf:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f3c3:	50                   	push   eax
c001f3c4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f3c8:	50                   	push   eax
c001f3c9:	6a 6c                	push   0x6c
c001f3cb:	6a 6c                	push   0x6c
c001f3cd:	e9 b9 01 00 00       	jmp    c001f58b <Vm::faultHandler(regs*)+0x533>
c001f3d2:	83 ec 0c             	sub    esp,0xc
c001f3d5:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f3d9:	0f b7 f6             	movzx  esi,si
c001f3dc:	50                   	push   eax
c001f3dd:	e8 71 f8 ff ff       	call   c001ec53 <Vm::inbv(unsigned short)>
c001f3e2:	83 c4 0c             	add    esp,0xc
c001f3e5:	0f b6 c0             	movzx  eax,al
c001f3e8:	50                   	push   eax
c001f3e9:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001f3ed:	50                   	push   eax
c001f3ee:	56                   	push   esi
c001f3ef:	e8 24 fc ff ff       	call   c001f018 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f3f4:	83 c4 10             	add    esp,0x10
c001f3f7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f3fa:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f3fe:	74 03                	je     c001f403 <Vm::faultHandler(regs*)+0x3ab>
c001f400:	48                   	dec    eax
c001f401:	eb 01                	jmp    c001f404 <Vm::faultHandler(regs*)+0x3ac>
c001f403:	40                   	inc    eax
c001f404:	0f b7 c0             	movzx  eax,ax
c001f407:	e9 8d 00 00 00       	jmp    c001f499 <Vm::faultHandler(regs*)+0x441>
c001f40c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f40f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f412:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f417:	74 29                	je     c001f442 <Vm::faultHandler(regs*)+0x3ea>
c001f419:	3d ff ff 00 00       	cmp    eax,0xffff
c001f41e:	76 22                	jbe    c001f442 <Vm::faultHandler(regs*)+0x3ea>
c001f420:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f424:	50                   	push   eax
c001f425:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f429:	50                   	push   eax
c001f42a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f42e:	50                   	push   eax
c001f42f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f433:	50                   	push   eax
c001f434:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f438:	50                   	push   eax
c001f439:	6a 6d                	push   0x6d
c001f43b:	6a 6d                	push   0x6d
c001f43d:	e9 49 01 00 00       	jmp    c001f58b <Vm::faultHandler(regs*)+0x533>
c001f442:	0f b7 c8             	movzx  ecx,ax
c001f445:	0f b7 f6             	movzx  esi,si
c001f448:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f44b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f450:	74 20                	je     c001f472 <Vm::faultHandler(regs*)+0x41a>
c001f452:	ed                   	in     eax,dx
c001f453:	55                   	push   ebp
c001f454:	50                   	push   eax
c001f455:	51                   	push   ecx
c001f456:	56                   	push   esi
c001f457:	e8 e7 fb ff ff       	call   c001f043 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f45c:	83 c4 10             	add    esp,0x10
c001f45f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f462:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f466:	74 05                	je     c001f46d <Vm::faultHandler(regs*)+0x415>
c001f468:	83 e8 04             	sub    eax,0x4
c001f46b:	eb 27                	jmp    c001f494 <Vm::faultHandler(regs*)+0x43c>
c001f46d:	83 c0 04             	add    eax,0x4
c001f470:	eb 22                	jmp    c001f494 <Vm::faultHandler(regs*)+0x43c>
c001f472:	66 ed                	in     ax,dx
c001f474:	0f b7 c0             	movzx  eax,ax
c001f477:	57                   	push   edi
c001f478:	50                   	push   eax
c001f479:	51                   	push   ecx
c001f47a:	56                   	push   esi
c001f47b:	e8 ad fb ff ff       	call   c001f02d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f480:	83 c4 10             	add    esp,0x10
c001f483:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f486:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f48a:	74 05                	je     c001f491 <Vm::faultHandler(regs*)+0x439>
c001f48c:	83 e8 02             	sub    eax,0x2
c001f48f:	eb 03                	jmp    c001f494 <Vm::faultHandler(regs*)+0x43c>
c001f491:	83 c0 02             	add    eax,0x2
c001f494:	25 ff ff 00 00       	and    eax,0xffff
c001f499:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001f49c:	e9 27 02 00 00       	jmp    c001f6c8 <Vm::faultHandler(regs*)+0x670>
c001f4a1:	8d 46 ff             	lea    eax,[esi-0x1]
c001f4a4:	3c 05                	cmp    al,0x5
c001f4a6:	77 24                	ja     c001f4cc <Vm::faultHandler(regs*)+0x474>
c001f4a8:	0f b6 c0             	movzx  eax,al
c001f4ab:	ff 24 85 04 d0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd2ffc]
c001f4b2:	0f b7 fd             	movzx  edi,bp
c001f4b5:	eb 15                	jmp    c001f4cc <Vm::faultHandler(regs*)+0x474>
c001f4b7:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001f4bb:	eb 0f                	jmp    c001f4cc <Vm::faultHandler(regs*)+0x474>
c001f4bd:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001f4c1:	eb 09                	jmp    c001f4cc <Vm::faultHandler(regs*)+0x474>
c001f4c3:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001f4c7:	eb 03                	jmp    c001f4cc <Vm::faultHandler(regs*)+0x474>
c001f4c9:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001f4cc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f4cf:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f4d4:	74 29                	je     c001f4ff <Vm::faultHandler(regs*)+0x4a7>
c001f4d6:	3d ff ff 00 00       	cmp    eax,0xffff
c001f4db:	76 22                	jbe    c001f4ff <Vm::faultHandler(regs*)+0x4a7>
c001f4dd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f4e1:	50                   	push   eax
c001f4e2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f4e6:	50                   	push   eax
c001f4e7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f4eb:	50                   	push   eax
c001f4ec:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f4f0:	50                   	push   eax
c001f4f1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f4f5:	50                   	push   eax
c001f4f6:	6a 6e                	push   0x6e
c001f4f8:	6a 6e                	push   0x6e
c001f4fa:	e9 8c 00 00 00       	jmp    c001f58b <Vm::faultHandler(regs*)+0x533>
c001f4ff:	0f b7 c0             	movzx  eax,ax
c001f502:	52                   	push   edx
c001f503:	52                   	push   edx
c001f504:	50                   	push   eax
c001f505:	57                   	push   edi
c001f506:	e8 d9 fa ff ff       	call   c001efe4 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f50b:	59                   	pop    ecx
c001f50c:	0f b6 c0             	movzx  eax,al
c001f50f:	5e                   	pop    esi
c001f510:	50                   	push   eax
c001f511:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f515:	50                   	push   eax
c001f516:	e8 4b f7 ff ff       	call   c001ec66 <Vm::outbv(unsigned short, unsigned char)>
c001f51b:	83 c4 10             	add    esp,0x10
c001f51e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f521:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f525:	74 03                	je     c001f52a <Vm::faultHandler(regs*)+0x4d2>
c001f527:	48                   	dec    eax
c001f528:	eb 01                	jmp    c001f52b <Vm::faultHandler(regs*)+0x4d3>
c001f52a:	40                   	inc    eax
c001f52b:	0f b7 c0             	movzx  eax,ax
c001f52e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001f531:	e9 92 01 00 00       	jmp    c001f6c8 <Vm::faultHandler(regs*)+0x670>
c001f536:	8d 46 ff             	lea    eax,[esi-0x1]
c001f539:	3c 05                	cmp    al,0x5
c001f53b:	77 1f                	ja     c001f55c <Vm::faultHandler(regs*)+0x504>
c001f53d:	0f b6 c0             	movzx  eax,al
c001f540:	ff 24 85 1c d0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd2fe4]
c001f547:	89 ef                	mov    edi,ebp
c001f549:	eb 11                	jmp    c001f55c <Vm::faultHandler(regs*)+0x504>
c001f54b:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001f54e:	eb 0c                	jmp    c001f55c <Vm::faultHandler(regs*)+0x504>
c001f550:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001f553:	eb 07                	jmp    c001f55c <Vm::faultHandler(regs*)+0x504>
c001f555:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001f558:	eb 02                	jmp    c001f55c <Vm::faultHandler(regs*)+0x504>
c001f55a:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001f55c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001f55f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f564:	74 37                	je     c001f59d <Vm::faultHandler(regs*)+0x545>
c001f566:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001f56c:	76 2f                	jbe    c001f59d <Vm::faultHandler(regs*)+0x545>
c001f56e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f572:	50                   	push   eax
c001f573:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f577:	50                   	push   eax
c001f578:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f57c:	50                   	push   eax
c001f57d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f581:	50                   	push   eax
c001f582:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f586:	50                   	push   eax
c001f587:	6a 6f                	push   0x6f
c001f589:	6a 6f                	push   0x6f
c001f58b:	68 a9 cf 02 c0       	push   0xc002cfa9
c001f590:	e8 3a 33 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001f595:	83 c4 20             	add    esp,0x20
c001f598:	e9 86 01 00 00       	jmp    c001f723 <Vm::faultHandler(regs*)+0x6cb>
c001f59d:	0f b7 d7             	movzx  edx,di
c001f5a0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001f5a3:	0f b7 c6             	movzx  eax,si
c001f5a6:	81 e1 00 04 00 00    	and    ecx,0x400
c001f5ac:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001f5af:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f5b4:	74 1d                	je     c001f5d3 <Vm::faultHandler(regs*)+0x57b>
c001f5b6:	55                   	push   ebp
c001f5b7:	55                   	push   ebp
c001f5b8:	50                   	push   eax
c001f5b9:	52                   	push   edx
c001f5ba:	e8 48 fa ff ff       	call   c001f007 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f5bf:	83 c4 10             	add    esp,0x10
c001f5c2:	89 fa                	mov    edx,edi
c001f5c4:	ef                   	out    dx,eax
c001f5c5:	85 c9                	test   ecx,ecx
c001f5c7:	74 05                	je     c001f5ce <Vm::faultHandler(regs*)+0x576>
c001f5c9:	83 ee 04             	sub    esi,0x4
c001f5cc:	eb 21                	jmp    c001f5ef <Vm::faultHandler(regs*)+0x597>
c001f5ce:	83 c6 04             	add    esi,0x4
c001f5d1:	eb 1c                	jmp    c001f5ef <Vm::faultHandler(regs*)+0x597>
c001f5d3:	55                   	push   ebp
c001f5d4:	55                   	push   ebp
c001f5d5:	50                   	push   eax
c001f5d6:	52                   	push   edx
c001f5d7:	e8 19 fa ff ff       	call   c001eff5 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f5dc:	83 c4 10             	add    esp,0x10
c001f5df:	89 fa                	mov    edx,edi
c001f5e1:	66 ef                	out    dx,ax
c001f5e3:	85 c9                	test   ecx,ecx
c001f5e5:	74 05                	je     c001f5ec <Vm::faultHandler(regs*)+0x594>
c001f5e7:	83 ee 02             	sub    esi,0x2
c001f5ea:	eb 03                	jmp    c001f5ef <Vm::faultHandler(regs*)+0x597>
c001f5ec:	83 c6 02             	add    esi,0x2
c001f5ef:	81 e6 ff ff 00 00    	and    esi,0xffff
c001f5f5:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001f5f8:	e9 cb 00 00 00       	jmp    c001f6c8 <Vm::faultHandler(regs*)+0x670>
c001f5fd:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f604:	83 ec 0c             	sub    esp,0xc
c001f607:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f60b:	50                   	push   eax
c001f60c:	e8 42 f6 ff ff       	call   c001ec53 <Vm::inbv(unsigned short)>
c001f611:	0f b6 c0             	movzx  eax,al
c001f614:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f617:	eb 3f                	jmp    c001f658 <Vm::faultHandler(regs*)+0x600>
c001f619:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f61e:	74 07                	je     c001f627 <Vm::faultHandler(regs*)+0x5cf>
c001f620:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f624:	ed                   	in     eax,dx
c001f625:	eb 14                	jmp    c001f63b <Vm::faultHandler(regs*)+0x5e3>
c001f627:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001f62a:	66 31 f6             	xor    si,si
c001f62d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001f630:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f634:	66 ed                	in     ax,dx
c001f636:	0f b7 c0             	movzx  eax,ax
c001f639:	09 f0                	or     eax,esi
c001f63b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f63e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f642:	e9 84 00 00 00       	jmp    c001f6cb <Vm::faultHandler(regs*)+0x673>
c001f647:	52                   	push   edx
c001f648:	52                   	push   edx
c001f649:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f64d:	50                   	push   eax
c001f64e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f652:	50                   	push   eax
c001f653:	e8 0e f6 ff ff       	call   c001ec66 <Vm::outbv(unsigned short, unsigned char)>
c001f658:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f65c:	eb 53                	jmp    c001f6b1 <Vm::faultHandler(regs*)+0x659>
c001f65e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f661:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f665:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f66a:	74 03                	je     c001f66f <Vm::faultHandler(regs*)+0x617>
c001f66c:	ef                   	out    dx,eax
c001f66d:	eb cf                	jmp    c001f63e <Vm::faultHandler(regs*)+0x5e6>
c001f66f:	66 ef                	out    dx,ax
c001f671:	eb cb                	jmp    c001f63e <Vm::faultHandler(regs*)+0x5e6>
c001f673:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f67a:	83 ec 0c             	sub    esp,0xc
c001f67d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f681:	50                   	push   eax
c001f682:	e8 cc f5 ff ff       	call   c001ec53 <Vm::inbv(unsigned short)>
c001f687:	0f b6 c0             	movzx  eax,al
c001f68a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f68d:	eb 1f                	jmp    c001f6ae <Vm::faultHandler(regs*)+0x656>
c001f68f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f692:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f697:	74 03                	je     c001f69c <Vm::faultHandler(regs*)+0x644>
c001f699:	ed                   	in     eax,dx
c001f69a:	eb 0d                	jmp    c001f6a9 <Vm::faultHandler(regs*)+0x651>
c001f69c:	66 ed                	in     ax,dx
c001f69e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001f6a1:	0f b7 c0             	movzx  eax,ax
c001f6a4:	66 31 d2             	xor    dx,dx
c001f6a7:	09 d0                	or     eax,edx
c001f6a9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f6ac:	eb 1a                	jmp    c001f6c8 <Vm::faultHandler(regs*)+0x670>
c001f6ae:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f6b1:	83 c4 10             	add    esp,0x10
c001f6b4:	eb 15                	jmp    c001f6cb <Vm::faultHandler(regs*)+0x673>
c001f6b6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f6b9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f6bc:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f6c1:	74 03                	je     c001f6c6 <Vm::faultHandler(regs*)+0x66e>
c001f6c3:	ef                   	out    dx,eax
c001f6c4:	eb 02                	jmp    c001f6c8 <Vm::faultHandler(regs*)+0x670>
c001f6c6:	66 ef                	out    dx,ax
c001f6c8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f6cb:	b0 01                	mov    al,0x1
c001f6cd:	eb 56                	jmp    c001f725 <Vm::faultHandler(regs*)+0x6cd>
c001f6cf:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f6d3:	50                   	push   eax
c001f6d4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f6d8:	50                   	push   eax
c001f6d9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f6dd:	50                   	push   eax
c001f6de:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f6e2:	50                   	push   eax
c001f6e3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f6e7:	50                   	push   eax
c001f6e8:	52                   	push   edx
c001f6e9:	52                   	push   edx
c001f6ea:	68 d6 cf 02 c0       	push   0xc002cfd6
c001f6ef:	e8 db 31 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c001f6f4:	83 c4 20             	add    esp,0x20
c001f6f7:	83 ec 0c             	sub    esp,0xc
c001f6fa:	6a 60                	push   0x60
c001f6fc:	e8 52 f5 ff ff       	call   c001ec53 <Vm::inbv(unsigned short)>
c001f701:	83 c4 10             	add    esp,0x10
c001f704:	3c 1c                	cmp    al,0x1c
c001f706:	74 04                	je     c001f70c <Vm::faultHandler(regs*)+0x6b4>
c001f708:	3c 5a                	cmp    al,0x5a
c001f70a:	75 eb                	jne    c001f6f7 <Vm::faultHandler(regs*)+0x69f>
c001f70c:	3c 5a                	cmp    al,0x5a
c001f70e:	74 04                	je     c001f714 <Vm::faultHandler(regs*)+0x6bc>
c001f710:	3c 1c                	cmp    al,0x1c
c001f712:	75 0f                	jne    c001f723 <Vm::faultHandler(regs*)+0x6cb>
c001f714:	83 ec 0c             	sub    esp,0xc
c001f717:	6a 60                	push   0x60
c001f719:	e8 35 f5 ff ff       	call   c001ec53 <Vm::inbv(unsigned short)>
c001f71e:	83 c4 10             	add    esp,0x10
c001f721:	eb e9                	jmp    c001f70c <Vm::faultHandler(regs*)+0x6b4>
c001f723:	31 c0                	xor    eax,eax
c001f725:	83 c4 1c             	add    esp,0x1c
c001f728:	5b                   	pop    ebx
c001f729:	5e                   	pop    esi
c001f72a:	5f                   	pop    edi
c001f72b:	5d                   	pop    ebp
c001f72c:	c3                   	ret    

c001f72d <Vm::fpuInternalTo32(unsigned long long)>:
c001f72d:	57                   	push   edi
c001f72e:	56                   	push   esi
c001f72f:	53                   	push   ebx
c001f730:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f738:	89 d6                	mov    esi,edx
c001f73a:	89 d7                	mov    edi,edx
c001f73c:	89 c1                	mov    ecx,eax
c001f73e:	c1 ef 14             	shr    edi,0x14
c001f741:	89 d3                	mov    ebx,edx
c001f743:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f749:	31 d2                	xor    edx,edx
c001f74b:	89 f8                	mov    eax,edi
c001f74d:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f753:	bf ff 00 00 00       	mov    edi,0xff
c001f758:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f75d:	83 d2 ff             	adc    edx,0xffffffff
c001f760:	39 c7                	cmp    edi,eax
c001f762:	bf 00 00 00 00       	mov    edi,0x0
c001f767:	19 d7                	sbb    edi,edx
c001f769:	72 15                	jb     c001f780 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f76b:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f76f:	c1 e0 17             	shl    eax,0x17
c001f772:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f778:	09 f1                	or     ecx,esi
c001f77a:	09 c1                	or     ecx,eax
c001f77c:	89 cf                	mov    edi,ecx
c001f77e:	eb 02                	jmp    c001f782 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f780:	31 ff                	xor    edi,edi
c001f782:	89 f8                	mov    eax,edi
c001f784:	5b                   	pop    ebx
c001f785:	5e                   	pop    esi
c001f786:	5f                   	pop    edi
c001f787:	c3                   	ret    

c001f788 <Vm::fpuInternalTo64(unsigned long long)>:
c001f788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f78c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f790:	c3                   	ret    

c001f791 <Vm::fpu32ToInternal(unsigned int)>:
c001f791:	57                   	push   edi
c001f792:	31 ff                	xor    edi,edi
c001f794:	56                   	push   esi
c001f795:	53                   	push   ebx
c001f796:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f79a:	89 cb                	mov    ebx,ecx
c001f79c:	89 ce                	mov    esi,ecx
c001f79e:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f7a4:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f7aa:	c1 e9 17             	shr    ecx,0x17
c001f7ad:	89 f0                	mov    eax,esi
c001f7af:	0f b6 d1             	movzx  edx,cl
c001f7b2:	81 c2 80 03 00 00    	add    edx,0x380
c001f7b8:	89 d1                	mov    ecx,edx
c001f7ba:	89 fa                	mov    edx,edi
c001f7bc:	c1 e1 14             	shl    ecx,0x14
c001f7bf:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f7c3:	c1 e0 1d             	shl    eax,0x1d
c001f7c6:	89 d7                	mov    edi,edx
c001f7c8:	89 c6                	mov    esi,eax
c001f7ca:	89 ca                	mov    edx,ecx
c001f7cc:	89 f0                	mov    eax,esi
c001f7ce:	09 fa                	or     edx,edi
c001f7d0:	09 da                	or     edx,ebx
c001f7d2:	5b                   	pop    ebx
c001f7d3:	5e                   	pop    esi
c001f7d4:	5f                   	pop    edi
c001f7d5:	c3                   	ret    

c001f7d6 <Vm::fpu64ToInternal(unsigned long long)>:
c001f7d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f7de:	c3                   	ret    

c001f7df <Vm::fpuFloatToLong(unsigned long long)>:
c001f7df:	57                   	push   edi
c001f7e0:	31 c0                	xor    eax,eax
c001f7e2:	56                   	push   esi
c001f7e3:	31 d2                	xor    edx,edx
c001f7e5:	53                   	push   ebx
c001f7e6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f7ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f7ee:	89 d9                	mov    ecx,ebx
c001f7f0:	c1 e9 14             	shr    ecx,0x14
c001f7f3:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f7f9:	89 cf                	mov    edi,ecx
c001f7fb:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f801:	78 33                	js     c001f836 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f803:	89 d9                	mov    ecx,ebx
c001f805:	89 f0                	mov    eax,esi
c001f807:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f80d:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f813:	89 ca                	mov    edx,ecx
c001f815:	b9 34 00 00 00       	mov    ecx,0x34
c001f81a:	29 f9                	sub    ecx,edi
c001f81c:	0f ad d0             	shrd   eax,edx,cl
c001f81f:	d3 fa                	sar    edx,cl
c001f821:	f6 c1 20             	test   cl,0x20
c001f824:	74 05                	je     c001f82b <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f826:	89 d0                	mov    eax,edx
c001f828:	c1 fa 1f             	sar    edx,0x1f
c001f82b:	85 db                	test   ebx,ebx
c001f82d:	79 07                	jns    c001f836 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f82f:	f7 d8                	neg    eax
c001f831:	83 d2 00             	adc    edx,0x0
c001f834:	f7 da                	neg    edx
c001f836:	5b                   	pop    ebx
c001f837:	5e                   	pop    esi
c001f838:	5f                   	pop    edi
c001f839:	c3                   	ret    

c001f83a <Vm::fpuULongToFloat(unsigned long long)>:
c001f83a:	57                   	push   edi
c001f83b:	31 c9                	xor    ecx,ecx
c001f83d:	56                   	push   esi
c001f83e:	53                   	push   ebx
c001f83f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f843:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f847:	0f ba e7 14          	bt     edi,0x14
c001f84b:	72 07                	jb     c001f854 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f84d:	01 f6                	add    esi,esi
c001f84f:	11 ff                	adc    edi,edi
c001f851:	41                   	inc    ecx
c001f852:	eb f3                	jmp    c001f847 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f854:	89 fa                	mov    edx,edi
c001f856:	89 f0                	mov    eax,esi
c001f858:	bb 33 04 00 00       	mov    ebx,0x433
c001f85d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f863:	29 cb                	sub    ebx,ecx
c001f865:	89 d9                	mov    ecx,ebx
c001f867:	5b                   	pop    ebx
c001f868:	c1 e1 14             	shl    ecx,0x14
c001f86b:	5e                   	pop    esi
c001f86c:	09 ca                	or     edx,ecx
c001f86e:	5f                   	pop    edi
c001f86f:	c3                   	ret    

c001f870 <Vm::fpuLongToFloat(long long)>:
c001f870:	56                   	push   esi
c001f871:	31 c0                	xor    eax,eax
c001f873:	53                   	push   ebx
c001f874:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f878:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f87c:	39 c8                	cmp    eax,ecx
c001f87e:	19 d8                	sbb    eax,ebx
c001f880:	7d 04                	jge    c001f886 <Vm::fpuLongToFloat(long long)+0x16>
c001f882:	31 f6                	xor    esi,esi
c001f884:	eb 0c                	jmp    c001f892 <Vm::fpuLongToFloat(long long)+0x22>
c001f886:	f7 d9                	neg    ecx
c001f888:	be 01 00 00 00       	mov    esi,0x1
c001f88d:	83 d3 00             	adc    ebx,0x0
c001f890:	f7 db                	neg    ebx
c001f892:	31 c0                	xor    eax,eax
c001f894:	0f ba e3 14          	bt     ebx,0x14
c001f898:	72 07                	jb     c001f8a1 <Vm::fpuLongToFloat(long long)+0x31>
c001f89a:	01 c9                	add    ecx,ecx
c001f89c:	11 db                	adc    ebx,ebx
c001f89e:	40                   	inc    eax
c001f89f:	eb f3                	jmp    c001f894 <Vm::fpuLongToFloat(long long)+0x24>
c001f8a1:	ba 33 04 00 00       	mov    edx,0x433
c001f8a6:	29 c2                	sub    edx,eax
c001f8a8:	89 c8                	mov    eax,ecx
c001f8aa:	c1 e2 14             	shl    edx,0x14
c001f8ad:	89 d9                	mov    ecx,ebx
c001f8af:	89 f3                	mov    ebx,esi
c001f8b1:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f8b7:	09 ca                	or     edx,ecx
c001f8b9:	84 db                	test   bl,bl
c001f8bb:	74 06                	je     c001f8c3 <Vm::fpuLongToFloat(long long)+0x53>
c001f8bd:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f8c3:	5b                   	pop    ebx
c001f8c4:	5e                   	pop    esi
c001f8c5:	c3                   	ret    

c001f8c6 <Vm::fpuGet0()>:
c001f8c6:	31 c0                	xor    eax,eax
c001f8c8:	31 d2                	xor    edx,edx
c001f8ca:	c3                   	ret    

c001f8cb <Vm::fpuGet1()>:
c001f8cb:	b8 01 00 00 00       	mov    eax,0x1
c001f8d0:	31 d2                	xor    edx,edx
c001f8d2:	c3                   	ret    

c001f8d3 <Vm::fpuGetPi()>:
c001f8d3:	b8 03 00 00 00       	mov    eax,0x3
c001f8d8:	31 d2                	xor    edx,edx
c001f8da:	c3                   	ret    

c001f8db <Vm::fpuGetLog2E()>:
c001f8db:	83 ec 18             	sub    esp,0x18
c001f8de:	68 34 d0 02 c0       	push   0xc002d034
c001f8e3:	e8 1d aa ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001f8e8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8ed:	31 d2                	xor    edx,edx
c001f8ef:	83 c4 1c             	add    esp,0x1c
c001f8f2:	c3                   	ret    

c001f8f3 <Vm::fpuGetLogE2()>:
c001f8f3:	83 ec 18             	sub    esp,0x18
c001f8f6:	68 40 d0 02 c0       	push   0xc002d040
c001f8fb:	e8 05 aa ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001f900:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f905:	31 d2                	xor    edx,edx
c001f907:	83 c4 1c             	add    esp,0x1c
c001f90a:	c3                   	ret    

c001f90b <Vm::fpuGetLog210()>:
c001f90b:	83 ec 18             	sub    esp,0x18
c001f90e:	68 4c d0 02 c0       	push   0xc002d04c
c001f913:	e8 ed a9 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001f918:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f91d:	31 d2                	xor    edx,edx
c001f91f:	83 c4 1c             	add    esp,0x1c
c001f922:	c3                   	ret    

c001f923 <Vm::fpuGetLog102()>:
c001f923:	83 ec 18             	sub    esp,0x18
c001f926:	68 59 d0 02 c0       	push   0xc002d059
c001f92b:	e8 d5 a9 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001f930:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f935:	31 d2                	xor    edx,edx
c001f937:	83 c4 1c             	add    esp,0x1c
c001f93a:	c3                   	ret    

c001f93b <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f93b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f93f:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f943:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f947:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f94b:	0f 92 c0             	setb   al
c001f94e:	c3                   	ret    

c001f94f <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f94f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f957:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f95b:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f95f:	09 c2                	or     edx,eax
c001f961:	0f 94 c0             	sete   al
c001f964:	c3                   	ret    

c001f965 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f965:	57                   	push   edi
c001f966:	56                   	push   esi
c001f967:	53                   	push   ebx
c001f968:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f96c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f970:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f974:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f978:	57                   	push   edi
c001f979:	56                   	push   esi
c001f97a:	53                   	push   ebx
c001f97b:	51                   	push   ecx
c001f97c:	e8 ce ff ff ff       	call   c001f94f <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f981:	83 c4 10             	add    esp,0x10
c001f984:	88 c2                	mov    dl,al
c001f986:	31 c0                	xor    eax,eax
c001f988:	84 d2                	test   dl,dl
c001f98a:	75 0c                	jne    c001f998 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f98c:	57                   	push   edi
c001f98d:	56                   	push   esi
c001f98e:	53                   	push   ebx
c001f98f:	51                   	push   ecx
c001f990:	e8 a6 ff ff ff       	call   c001f93b <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f995:	83 c4 10             	add    esp,0x10
c001f998:	83 e0 01             	and    eax,0x1
c001f99b:	5b                   	pop    ebx
c001f99c:	88 c1                	mov    cl,al
c001f99e:	83 e2 01             	and    edx,0x1
c001f9a1:	a0 c1 25 03 c0       	mov    al,ds:0xc00325c1
c001f9a6:	c1 e2 06             	shl    edx,0x6
c001f9a9:	83 e0 ba             	and    eax,0xffffffba
c001f9ac:	5e                   	pop    esi
c001f9ad:	09 c8                	or     eax,ecx
c001f9af:	5f                   	pop    edi
c001f9b0:	09 d0                	or     eax,edx
c001f9b2:	a2 c1 25 03 c0       	mov    ds:0xc00325c1,al
c001f9b7:	c3                   	ret    

c001f9b8 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f9b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f9bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f9c0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f9c4:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f9c8:	c3                   	ret    

c001f9c9 <Vm::fpuAbs(unsigned long long)>:
c001f9c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9d1:	c3                   	ret    

c001f9d2 <Vm::fpuChs(unsigned long long)>:
c001f9d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9da:	f7 d8                	neg    eax
c001f9dc:	83 d2 00             	adc    edx,0x0
c001f9df:	f7 da                	neg    edx
c001f9e1:	c3                   	ret    

c001f9e2 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f9e2:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f9e6:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f9eb:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f9ef:	eb c7                	jmp    c001f9b8 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f9f1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f9f1:	53                   	push   ebx
c001f9f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f9fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f9fe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fa02:	0f af ca             	imul   ecx,edx
c001fa05:	0f af d8             	imul   ebx,eax
c001fa08:	f7 e2                	mul    edx
c001fa0a:	01 d9                	add    ecx,ebx
c001fa0c:	5b                   	pop    ebx
c001fa0d:	01 ca                	add    edx,ecx
c001fa0f:	c3                   	ret    

c001fa10 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001fa10:	83 ec 0c             	sub    esp,0xc
c001fa13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa23:	e8 cc 77 00 00       	call   c00271f4 <__udivdi3>
c001fa28:	83 c4 1c             	add    esp,0x1c
c001fa2b:	c3                   	ret    

c001fa2c <Vm::fpuSquare(unsigned long long)>:
c001fa2c:	50                   	push   eax
c001fa2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fa35:	52                   	push   edx
c001fa36:	50                   	push   eax
c001fa37:	52                   	push   edx
c001fa38:	50                   	push   eax
c001fa39:	e8 b3 ff ff ff       	call   c001f9f1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fa3e:	83 c4 14             	add    esp,0x14
c001fa41:	c3                   	ret    

c001fa42 <Vm::fpuGetReg(int)>:
c001fa42:	83 ec 0c             	sub    esp,0xc
c001fa45:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa4a:	76 10                	jbe    c001fa5c <Vm::fpuGetReg(int)+0x1a>
c001fa4c:	83 ec 0c             	sub    esp,0xc
c001fa4f:	68 66 d0 02 c0       	push   0xc002d066
c001fa54:	e8 ac a8 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001fa59:	83 c4 10             	add    esp,0x10
c001fa5c:	a0 c1 25 03 c0       	mov    al,ds:0xc00325c1
c001fa61:	b9 08 00 00 00       	mov    ecx,0x8
c001fa66:	c0 e8 03             	shr    al,0x3
c001fa69:	83 e0 07             	and    eax,0x7
c001fa6c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa70:	99                   	cdq    
c001fa71:	f7 f9                	idiv   ecx
c001fa73:	8b 04 d5 c4 25 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcda3c]
c001fa7a:	8b 14 d5 c8 25 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcda38]
c001fa81:	83 c4 0c             	add    esp,0xc
c001fa84:	c3                   	ret    

c001fa85 <Vm::fpuSetReg(int, unsigned long long)>:
c001fa85:	57                   	push   edi
c001fa86:	56                   	push   esi
c001fa87:	52                   	push   edx
c001fa88:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fa8c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fa90:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa95:	76 10                	jbe    c001faa7 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fa97:	83 ec 0c             	sub    esp,0xc
c001fa9a:	68 79 d0 02 c0       	push   0xc002d079
c001fa9f:	e8 61 a8 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c001faa4:	83 c4 10             	add    esp,0x10
c001faa7:	a0 c1 25 03 c0       	mov    al,ds:0xc00325c1
c001faac:	b9 08 00 00 00       	mov    ecx,0x8
c001fab1:	c0 e8 03             	shr    al,0x3
c001fab4:	83 e0 07             	and    eax,0x7
c001fab7:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fabb:	99                   	cdq    
c001fabc:	f7 f9                	idiv   ecx
c001fabe:	89 34 d5 c4 25 03 c0 	mov    DWORD PTR [edx*8-0x3ffcda3c],esi
c001fac5:	89 3c d5 c8 25 03 c0 	mov    DWORD PTR [edx*8-0x3ffcda38],edi
c001facc:	58                   	pop    eax
c001facd:	5e                   	pop    esi
c001face:	5f                   	pop    edi
c001facf:	c3                   	ret    

c001fad0 <Vm::fpuPush(unsigned long long)>:
c001fad0:	a0 c1 25 03 c0       	mov    al,ds:0xc00325c1
c001fad5:	c0 e8 03             	shr    al,0x3
c001fad8:	83 e0 07             	and    eax,0x7
c001fadb:	83 c0 07             	add    eax,0x7
c001fade:	88 c2                	mov    dl,al
c001fae0:	83 e0 07             	and    eax,0x7
c001fae3:	83 e2 07             	and    edx,0x7
c001fae6:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001faed:	8a 15 c1 25 03 c0    	mov    dl,BYTE PTR ds:0xc00325c1
c001faf3:	83 e2 c7             	and    edx,0xffffffc7
c001faf6:	09 ca                	or     edx,ecx
c001faf8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fafc:	88 15 c1 25 03 c0    	mov    BYTE PTR ds:0xc00325c1,dl
c001fb02:	89 0c c5 c8 25 03 c0 	mov    DWORD PTR [eax*8-0x3ffcda38],ecx
c001fb09:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fb0d:	89 14 c5 c4 25 03 c0 	mov    DWORD PTR [eax*8-0x3ffcda3c],edx
c001fb14:	a1 04 26 03 c0       	mov    eax,ds:0xc0032604
c001fb19:	83 f8 08             	cmp    eax,0x8
c001fb1c:	75 08                	jne    c001fb26 <Vm::fpuPush(unsigned long long)+0x56>
c001fb1e:	80 0d c0 25 03 c0 40 	or     BYTE PTR ds:0xc00325c0,0x40
c001fb25:	c3                   	ret    
c001fb26:	40                   	inc    eax
c001fb27:	a3 04 26 03 c0       	mov    ds:0xc0032604,eax
c001fb2c:	c3                   	ret    

c001fb2d <Vm::fpuPop()>:
c001fb2d:	8a 0d c1 25 03 c0    	mov    cl,BYTE PTR ds:0xc00325c1
c001fb33:	53                   	push   ebx
c001fb34:	c0 e9 03             	shr    cl,0x3
c001fb37:	8a 1d c1 25 03 c0    	mov    bl,BYTE PTR ds:0xc00325c1
c001fb3d:	83 e1 07             	and    ecx,0x7
c001fb40:	83 e3 c7             	and    ebx,0xffffffc7
c001fb43:	8b 04 cd c4 25 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcda3c]
c001fb4a:	8b 14 cd c8 25 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcda38]
c001fb51:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fb58:	83 e1 38             	and    ecx,0x38
c001fb5b:	09 d9                	or     ecx,ebx
c001fb5d:	88 0d c1 25 03 c0    	mov    BYTE PTR ds:0xc00325c1,cl
c001fb63:	8b 0d 04 26 03 c0    	mov    ecx,DWORD PTR ds:0xc0032604
c001fb69:	85 c9                	test   ecx,ecx
c001fb6b:	74 09                	je     c001fb76 <Vm::fpuPop()+0x49>
c001fb6d:	49                   	dec    ecx
c001fb6e:	89 0d 04 26 03 c0    	mov    DWORD PTR ds:0xc0032604,ecx
c001fb74:	eb 07                	jmp    c001fb7d <Vm::fpuPop()+0x50>
c001fb76:	80 0d c0 25 03 c0 40 	or     BYTE PTR ds:0xc00325c0,0x40
c001fb7d:	5b                   	pop    ebx
c001fb7e:	c3                   	ret    

c001fb7f <Vm::x87Handler(regs*)>:
c001fb7f:	55                   	push   ebp
c001fb80:	57                   	push   edi
c001fb81:	56                   	push   esi
c001fb82:	53                   	push   ebx
c001fb83:	83 ec 1c             	sub    esp,0x1c
c001fb86:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fb8a:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fb8f:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fb92:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fb9a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fb9e:	50                   	push   eax
c001fb9f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fba3:	50                   	push   eax
c001fba4:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fba8:	50                   	push   eax
c001fba9:	53                   	push   ebx
c001fbaa:	e8 23 9e ff ff       	call   c00199d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fbaf:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fbb2:	83 c4 10             	add    esp,0x10
c001fbb5:	89 c6                	mov    esi,eax
c001fbb7:	80 fa d9             	cmp    dl,0xd9
c001fbba:	0f 85 52 01 00 00    	jne    c001fd12 <Vm::x87Handler(regs*)+0x193>
c001fbc0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbc4:	8d 50 20             	lea    edx,[eax+0x20]
c001fbc7:	80 fa 0e             	cmp    dl,0xe
c001fbca:	0f 87 86 00 00 00    	ja     c001fc56 <Vm::x87Handler(regs*)+0xd7>
c001fbd0:	0f b6 d2             	movzx  edx,dl
c001fbd3:	ff 24 95 8c d0 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2f74]
c001fbda:	e8 e7 fc ff ff       	call   c001f8c6 <Vm::fpuGet0()>
c001fbdf:	eb 05                	jmp    c001fbe6 <Vm::x87Handler(regs*)+0x67>
c001fbe1:	e8 e5 fc ff ff       	call   c001f8cb <Vm::fpuGet1()>
c001fbe6:	57                   	push   edi
c001fbe7:	57                   	push   edi
c001fbe8:	52                   	push   edx
c001fbe9:	50                   	push   eax
c001fbea:	e8 e1 fe ff ff       	call   c001fad0 <Vm::fpuPush(unsigned long long)>
c001fbef:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fbf3:	83 c4 10             	add    esp,0x10
c001fbf6:	b0 01                	mov    al,0x1
c001fbf8:	e9 e3 09 00 00       	jmp    c00205e0 <Vm::x87Handler(regs*)+0xa61>
c001fbfd:	83 ec 0c             	sub    esp,0xc
c001fc00:	6a 00                	push   0x0
c001fc02:	e8 3b fe ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c001fc07:	59                   	pop    ecx
c001fc08:	5e                   	pop    esi
c001fc09:	52                   	push   edx
c001fc0a:	50                   	push   eax
c001fc0b:	e8 c2 fd ff ff       	call   c001f9d2 <Vm::fpuChs(unsigned long long)>
c001fc10:	eb 13                	jmp    c001fc25 <Vm::x87Handler(regs*)+0xa6>
c001fc12:	83 ec 0c             	sub    esp,0xc
c001fc15:	6a 00                	push   0x0
c001fc17:	e8 26 fe ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c001fc1c:	5f                   	pop    edi
c001fc1d:	5d                   	pop    ebp
c001fc1e:	52                   	push   edx
c001fc1f:	50                   	push   eax
c001fc20:	e8 a4 fd ff ff       	call   c001f9c9 <Vm::fpuAbs(unsigned long long)>
c001fc25:	83 c4 0c             	add    esp,0xc
c001fc28:	52                   	push   edx
c001fc29:	50                   	push   eax
c001fc2a:	6a 00                	push   0x0
c001fc2c:	e8 54 fe ff ff       	call   c001fa85 <Vm::fpuSetReg(int, unsigned long long)>
c001fc31:	eb bc                	jmp    c001fbef <Vm::x87Handler(regs*)+0x70>
c001fc33:	e8 d3 fc ff ff       	call   c001f90b <Vm::fpuGetLog210()>
c001fc38:	eb ac                	jmp    c001fbe6 <Vm::x87Handler(regs*)+0x67>
c001fc3a:	e8 9c fc ff ff       	call   c001f8db <Vm::fpuGetLog2E()>
c001fc3f:	eb a5                	jmp    c001fbe6 <Vm::x87Handler(regs*)+0x67>
c001fc41:	e8 8d fc ff ff       	call   c001f8d3 <Vm::fpuGetPi()>
c001fc46:	eb 9e                	jmp    c001fbe6 <Vm::x87Handler(regs*)+0x67>
c001fc48:	e8 d6 fc ff ff       	call   c001f923 <Vm::fpuGetLog102()>
c001fc4d:	eb 97                	jmp    c001fbe6 <Vm::x87Handler(regs*)+0x67>
c001fc4f:	e8 9f fc ff ff       	call   c001f8f3 <Vm::fpuGetLogE2()>
c001fc54:	eb 90                	jmp    c001fbe6 <Vm::x87Handler(regs*)+0x67>
c001fc56:	8d 50 40             	lea    edx,[eax+0x40]
c001fc59:	80 fa 07             	cmp    dl,0x7
c001fc5c:	77 15                	ja     c001fc73 <Vm::x87Handler(regs*)+0xf4>
c001fc5e:	83 ec 0c             	sub    esp,0xc
c001fc61:	2d c0 00 00 00       	sub    eax,0xc0
c001fc66:	50                   	push   eax
c001fc67:	e8 d6 fd ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c001fc6c:	59                   	pop    ecx
c001fc6d:	5e                   	pop    esi
c001fc6e:	e9 75 ff ff ff       	jmp    c001fbe8 <Vm::x87Handler(regs*)+0x69>
c001fc73:	8d 50 38             	lea    edx,[eax+0x38]
c001fc76:	80 fa 07             	cmp    dl,0x7
c001fc79:	77 3c                	ja     c001fcb7 <Vm::x87Handler(regs*)+0x138>
c001fc7b:	83 ec 0c             	sub    esp,0xc
c001fc7e:	2d c8 00 00 00       	sub    eax,0xc8
c001fc83:	50                   	push   eax
c001fc84:	e8 b9 fd ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c001fc89:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc90:	89 c6                	mov    esi,eax
c001fc92:	89 d7                	mov    edi,edx
c001fc94:	e8 a9 fd ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c001fc99:	83 c4 0c             	add    esp,0xc
c001fc9c:	52                   	push   edx
c001fc9d:	50                   	push   eax
c001fc9e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fca2:	2d c8 00 00 00       	sub    eax,0xc8
c001fca7:	50                   	push   eax
c001fca8:	e8 d8 fd ff ff       	call   c001fa85 <Vm::fpuSetReg(int, unsigned long long)>
c001fcad:	83 c4 0c             	add    esp,0xc
c001fcb0:	57                   	push   edi
c001fcb1:	56                   	push   esi
c001fcb2:	e9 73 ff ff ff       	jmp    c001fc2a <Vm::x87Handler(regs*)+0xab>
c001fcb7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcbb:	84 d2                	test   dl,dl
c001fcbd:	75 0f                	jne    c001fcce <Vm::x87Handler(regs*)+0x14f>
c001fcbf:	83 ec 0c             	sub    esp,0xc
c001fcc2:	ff 36                	push   DWORD PTR [esi]
c001fcc4:	e8 c8 fa ff ff       	call   c001f791 <Vm::fpu32ToInternal(unsigned int)>
c001fcc9:	e9 bf 00 00 00       	jmp    c001fd8d <Vm::x87Handler(regs*)+0x20e>
c001fcce:	80 fa 03             	cmp    dl,0x3
c001fcd1:	75 13                	jne    c001fce6 <Vm::x87Handler(regs*)+0x167>
c001fcd3:	e8 55 fe ff ff       	call   c001fb2d <Vm::fpuPop()>
c001fcd8:	55                   	push   ebp
c001fcd9:	55                   	push   ebp
c001fcda:	52                   	push   edx
c001fcdb:	50                   	push   eax
c001fcdc:	e8 4c fa ff ff       	call   c001f72d <Vm::fpuInternalTo32(unsigned long long)>
c001fce1:	e9 88 00 00 00       	jmp    c001fd6e <Vm::x87Handler(regs*)+0x1ef>
c001fce6:	80 fa 05             	cmp    dl,0x5
c001fce9:	75 0e                	jne    c001fcf9 <Vm::x87Handler(regs*)+0x17a>
c001fceb:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fcee:	66 a3 c2 25 03 c0    	mov    ds:0xc00325c2,ax
c001fcf4:	e9 df 00 00 00       	jmp    c001fdd8 <Vm::x87Handler(regs*)+0x259>
c001fcf9:	31 c0                	xor    eax,eax
c001fcfb:	80 fa 07             	cmp    dl,0x7
c001fcfe:	0f 85 dc 08 00 00    	jne    c00205e0 <Vm::x87Handler(regs*)+0xa61>
c001fd04:	66 a1 c2 25 03 c0    	mov    ax,ds:0xc00325c2
c001fd0a:	66 89 06             	mov    WORD PTR [esi],ax
c001fd0d:	e9 c6 00 00 00       	jmp    c001fdd8 <Vm::x87Handler(regs*)+0x259>
c001fd12:	80 fa d8             	cmp    dl,0xd8
c001fd15:	0f 84 c9 00 00 00    	je     c001fde4 <Vm::x87Handler(regs*)+0x265>
c001fd1b:	80 fa dc             	cmp    dl,0xdc
c001fd1e:	0f 84 0d 02 00 00    	je     c001ff31 <Vm::x87Handler(regs*)+0x3b2>
c001fd24:	80 fa de             	cmp    dl,0xde
c001fd27:	0f 84 cd 02 00 00    	je     c001fffa <Vm::x87Handler(regs*)+0x47b>
c001fd2d:	80 fa dd             	cmp    dl,0xdd
c001fd30:	0f 84 5f 04 00 00    	je     c0020195 <Vm::x87Handler(regs*)+0x616>
c001fd36:	80 fa da             	cmp    dl,0xda
c001fd39:	0f 84 24 05 00 00    	je     c0020263 <Vm::x87Handler(regs*)+0x6e4>
c001fd3f:	80 fa df             	cmp    dl,0xdf
c001fd42:	0f 84 68 05 00 00    	je     c00202b0 <Vm::x87Handler(regs*)+0x731>
c001fd48:	31 c0                	xor    eax,eax
c001fd4a:	80 fa db             	cmp    dl,0xdb
c001fd4d:	0f 85 8d 08 00 00    	jne    c00205e0 <Vm::x87Handler(regs*)+0xa61>
c001fd53:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd57:	80 fa 03             	cmp    dl,0x3
c001fd5a:	0f 85 70 06 00 00    	jne    c00203d0 <Vm::x87Handler(regs*)+0x851>
c001fd60:	e8 c8 fd ff ff       	call   c001fb2d <Vm::fpuPop()>
c001fd65:	55                   	push   ebp
c001fd66:	55                   	push   ebp
c001fd67:	52                   	push   edx
c001fd68:	50                   	push   eax
c001fd69:	e8 71 fa ff ff       	call   c001f7df <Vm::fpuFloatToLong(unsigned long long)>
c001fd6e:	83 c4 10             	add    esp,0x10
c001fd71:	89 06                	mov    DWORD PTR [esi],eax
c001fd73:	eb 63                	jmp    c001fdd8 <Vm::x87Handler(regs*)+0x259>
c001fd75:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd79:	84 d2                	test   dl,dl
c001fd7b:	0f 85 e6 05 00 00    	jne    c0020367 <Vm::x87Handler(regs*)+0x7e8>
c001fd81:	57                   	push   edi
c001fd82:	57                   	push   edi
c001fd83:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd86:	ff 36                	push   DWORD PTR [esi]
c001fd88:	e8 49 fa ff ff       	call   c001f7d6 <Vm::fpu64ToInternal(unsigned long long)>
c001fd8d:	5e                   	pop    esi
c001fd8e:	5f                   	pop    edi
c001fd8f:	52                   	push   edx
c001fd90:	50                   	push   eax
c001fd91:	e8 3a fd ff ff       	call   c001fad0 <Vm::fpuPush(unsigned long long)>
c001fd96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd9a:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd9d:	e9 51 fe ff ff       	jmp    c001fbf3 <Vm::x87Handler(regs*)+0x74>
c001fda2:	80 fa 03             	cmp    dl,0x3
c001fda5:	0f 85 d7 06 00 00    	jne    c0020482 <Vm::x87Handler(regs*)+0x903>
c001fdab:	57                   	push   edi
c001fdac:	57                   	push   edi
c001fdad:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fdb0:	ff 36                	push   DWORD PTR [esi]
c001fdb2:	e8 1f fa ff ff       	call   c001f7d6 <Vm::fpu64ToInternal(unsigned long long)>
c001fdb7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdbe:	89 c6                	mov    esi,eax
c001fdc0:	89 d7                	mov    edi,edx
c001fdc2:	e8 7b fc ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c001fdc7:	57                   	push   edi
c001fdc8:	56                   	push   esi
c001fdc9:	52                   	push   edx
c001fdca:	50                   	push   eax
c001fdcb:	e8 95 fb ff ff       	call   c001f965 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fdd0:	83 c4 20             	add    esp,0x20
c001fdd3:	e8 55 fd ff ff       	call   c001fb2d <Vm::fpuPop()>
c001fdd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fddc:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fddf:	e9 12 fe ff ff       	jmp    c001fbf6 <Vm::x87Handler(regs*)+0x77>
c001fde4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fde8:	8d 50 40             	lea    edx,[eax+0x40]
c001fdeb:	80 fa 07             	cmp    dl,0x7
c001fdee:	77 29                	ja     c001fe19 <Vm::x87Handler(regs*)+0x29a>
c001fdf0:	83 ec 0c             	sub    esp,0xc
c001fdf3:	2d c0 00 00 00       	sub    eax,0xc0
c001fdf8:	50                   	push   eax
c001fdf9:	e8 44 fc ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c001fdfe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe05:	89 c6                	mov    esi,eax
c001fe07:	89 d7                	mov    edi,edx
c001fe09:	e8 34 fc ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c001fe0e:	57                   	push   edi
c001fe0f:	56                   	push   esi
c001fe10:	52                   	push   edx
c001fe11:	50                   	push   eax
c001fe12:	e8 a1 fb ff ff       	call   c001f9b8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fe17:	eb 2f                	jmp    c001fe48 <Vm::x87Handler(regs*)+0x2c9>
c001fe19:	8d 50 38             	lea    edx,[eax+0x38]
c001fe1c:	80 fa 07             	cmp    dl,0x7
c001fe1f:	77 2f                	ja     c001fe50 <Vm::x87Handler(regs*)+0x2d1>
c001fe21:	83 ec 0c             	sub    esp,0xc
c001fe24:	2d c8 00 00 00       	sub    eax,0xc8
c001fe29:	50                   	push   eax
c001fe2a:	e8 13 fc ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c001fe2f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe36:	89 c6                	mov    esi,eax
c001fe38:	89 d7                	mov    edi,edx
c001fe3a:	e8 03 fc ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c001fe3f:	57                   	push   edi
c001fe40:	56                   	push   esi
c001fe41:	52                   	push   edx
c001fe42:	50                   	push   eax
c001fe43:	e8 a9 fb ff ff       	call   c001f9f1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fe48:	83 c4 1c             	add    esp,0x1c
c001fe4b:	e9 d8 fd ff ff       	jmp    c001fc28 <Vm::x87Handler(regs*)+0xa9>
c001fe50:	8d 50 30             	lea    edx,[eax+0x30]
c001fe53:	80 fa 07             	cmp    dl,0x7
c001fe56:	77 0d                	ja     c001fe65 <Vm::x87Handler(regs*)+0x2e6>
c001fe58:	83 ec 0c             	sub    esp,0xc
c001fe5b:	2d d0 00 00 00       	sub    eax,0xd0
c001fe60:	e9 99 03 00 00       	jmp    c00201fe <Vm::x87Handler(regs*)+0x67f>
c001fe65:	8d 50 28             	lea    edx,[eax+0x28]
c001fe68:	80 fa 07             	cmp    dl,0x7
c001fe6b:	77 0d                	ja     c001fe7a <Vm::x87Handler(regs*)+0x2fb>
c001fe6d:	83 ec 0c             	sub    esp,0xc
c001fe70:	2d d8 00 00 00       	sub    eax,0xd8
c001fe75:	e9 c0 03 00 00       	jmp    c002023a <Vm::x87Handler(regs*)+0x6bb>
c001fe7a:	8d 50 20             	lea    edx,[eax+0x20]
c001fe7d:	80 fa 07             	cmp    dl,0x7
c001fe80:	77 1b                	ja     c001fe9d <Vm::x87Handler(regs*)+0x31e>
c001fe82:	83 ec 0c             	sub    esp,0xc
c001fe85:	2d e0 00 00 00       	sub    eax,0xe0
c001fe8a:	50                   	push   eax
c001fe8b:	e8 b2 fb ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c001fe90:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe97:	89 c6                	mov    esi,eax
c001fe99:	89 d7                	mov    edi,edx
c001fe9b:	eb 22                	jmp    c001febf <Vm::x87Handler(regs*)+0x340>
c001fe9d:	8d 50 18             	lea    edx,[eax+0x18]
c001fea0:	80 fa 07             	cmp    dl,0x7
c001fea3:	77 2d                	ja     c001fed2 <Vm::x87Handler(regs*)+0x353>
c001fea5:	83 ec 0c             	sub    esp,0xc
c001fea8:	6a 00                	push   0x0
c001feaa:	e8 93 fb ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c001feaf:	89 c6                	mov    esi,eax
c001feb1:	89 d7                	mov    edi,edx
c001feb3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feb7:	2d e8 00 00 00       	sub    eax,0xe8
c001febc:	89 04 24             	mov    DWORD PTR [esp],eax
c001febf:	e8 7e fb ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c001fec4:	57                   	push   edi
c001fec5:	56                   	push   esi
c001fec6:	52                   	push   edx
c001fec7:	50                   	push   eax
c001fec8:	e8 15 fb ff ff       	call   c001f9e2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fecd:	e9 76 ff ff ff       	jmp    c001fe48 <Vm::x87Handler(regs*)+0x2c9>
c001fed2:	8d 50 10             	lea    edx,[eax+0x10]
c001fed5:	80 fa 07             	cmp    dl,0x7
c001fed8:	77 1b                	ja     c001fef5 <Vm::x87Handler(regs*)+0x376>
c001feda:	83 ec 0c             	sub    esp,0xc
c001fedd:	2d f0 00 00 00       	sub    eax,0xf0
c001fee2:	50                   	push   eax
c001fee3:	e8 5a fb ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c001fee8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001feef:	89 c6                	mov    esi,eax
c001fef1:	89 d7                	mov    edi,edx
c001fef3:	eb 22                	jmp    c001ff17 <Vm::x87Handler(regs*)+0x398>
c001fef5:	3c f7                	cmp    al,0xf7
c001fef7:	0f 86 d1 03 00 00    	jbe    c00202ce <Vm::x87Handler(regs*)+0x74f>
c001fefd:	83 ec 0c             	sub    esp,0xc
c001ff00:	6a 00                	push   0x0
c001ff02:	e8 3b fb ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c001ff07:	89 c6                	mov    esi,eax
c001ff09:	89 d7                	mov    edi,edx
c001ff0b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff0f:	2d f8 00 00 00       	sub    eax,0xf8
c001ff14:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff17:	e8 26 fb ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c001ff1c:	57                   	push   edi
c001ff1d:	56                   	push   esi
c001ff1e:	52                   	push   edx
c001ff1f:	50                   	push   eax
c001ff20:	e8 eb fa ff ff       	call   c001fa10 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ff25:	83 c4 1c             	add    esp,0x1c
c001ff28:	52                   	push   edx
c001ff29:	50                   	push   eax
c001ff2a:	6a 00                	push   0x0
c001ff2c:	e9 51 02 00 00       	jmp    c0020182 <Vm::x87Handler(regs*)+0x603>
c001ff31:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff35:	8d 50 40             	lea    edx,[eax+0x40]
c001ff38:	80 fa 07             	cmp    dl,0x7
c001ff3b:	77 37                	ja     c001ff74 <Vm::x87Handler(regs*)+0x3f5>
c001ff3d:	83 ec 0c             	sub    esp,0xc
c001ff40:	2d c0 00 00 00       	sub    eax,0xc0
c001ff45:	50                   	push   eax
c001ff46:	e8 f7 fa ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c001ff4b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff52:	89 c6                	mov    esi,eax
c001ff54:	89 d7                	mov    edi,edx
c001ff56:	e8 e7 fa ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c001ff5b:	57                   	push   edi
c001ff5c:	56                   	push   esi
c001ff5d:	52                   	push   edx
c001ff5e:	50                   	push   eax
c001ff5f:	e8 54 fa ff ff       	call   c001f9b8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff64:	83 c4 1c             	add    esp,0x1c
c001ff67:	52                   	push   edx
c001ff68:	50                   	push   eax
c001ff69:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff6d:	2d c0 00 00 00       	sub    eax,0xc0
c001ff72:	eb 3d                	jmp    c001ffb1 <Vm::x87Handler(regs*)+0x432>
c001ff74:	8d 50 38             	lea    edx,[eax+0x38]
c001ff77:	80 fa 07             	cmp    dl,0x7
c001ff7a:	77 3b                	ja     c001ffb7 <Vm::x87Handler(regs*)+0x438>
c001ff7c:	83 ec 0c             	sub    esp,0xc
c001ff7f:	2d c8 00 00 00       	sub    eax,0xc8
c001ff84:	50                   	push   eax
c001ff85:	e8 b8 fa ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c001ff8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff91:	89 c6                	mov    esi,eax
c001ff93:	89 d7                	mov    edi,edx
c001ff95:	e8 a8 fa ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c001ff9a:	57                   	push   edi
c001ff9b:	56                   	push   esi
c001ff9c:	52                   	push   edx
c001ff9d:	50                   	push   eax
c001ff9e:	e8 4e fa ff ff       	call   c001f9f1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ffa3:	83 c4 1c             	add    esp,0x1c
c001ffa6:	52                   	push   edx
c001ffa7:	50                   	push   eax
c001ffa8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffac:	2d c8 00 00 00       	sub    eax,0xc8
c001ffb1:	50                   	push   eax
c001ffb2:	e9 75 fc ff ff       	jmp    c001fc2c <Vm::x87Handler(regs*)+0xad>
c001ffb7:	83 c0 18             	add    eax,0x18
c001ffba:	3c 07                	cmp    al,0x7
c001ffbc:	0f 87 3b 04 00 00    	ja     c00203fd <Vm::x87Handler(regs*)+0x87e>
c001ffc2:	83 ec 0c             	sub    esp,0xc
c001ffc5:	6a 00                	push   0x0
c001ffc7:	e8 76 fa ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c001ffcc:	89 c6                	mov    esi,eax
c001ffce:	89 d7                	mov    edi,edx
c001ffd0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffd4:	2d e8 00 00 00       	sub    eax,0xe8
c001ffd9:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffdc:	e8 61 fa ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c001ffe1:	57                   	push   edi
c001ffe2:	56                   	push   esi
c001ffe3:	52                   	push   edx
c001ffe4:	50                   	push   eax
c001ffe5:	e8 f8 f9 ff ff       	call   c001f9e2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffea:	83 c4 1c             	add    esp,0x1c
c001ffed:	52                   	push   edx
c001ffee:	50                   	push   eax
c001ffef:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fff3:	2d e8 00 00 00       	sub    eax,0xe8
c001fff8:	eb b7                	jmp    c001ffb1 <Vm::x87Handler(regs*)+0x432>
c001fffa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fffe:	8d 50 40             	lea    edx,[eax+0x40]
c0020001:	80 fa 07             	cmp    dl,0x7
c0020004:	77 3a                	ja     c0020040 <Vm::x87Handler(regs*)+0x4c1>
c0020006:	83 ec 0c             	sub    esp,0xc
c0020009:	2d c0 00 00 00       	sub    eax,0xc0
c002000e:	50                   	push   eax
c002000f:	e8 2e fa ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c0020014:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002001b:	89 c6                	mov    esi,eax
c002001d:	89 d7                	mov    edi,edx
c002001f:	e8 1e fa ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c0020024:	57                   	push   edi
c0020025:	56                   	push   esi
c0020026:	52                   	push   edx
c0020027:	50                   	push   eax
c0020028:	e8 8b f9 ff ff       	call   c001f9b8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002002d:	83 c4 1c             	add    esp,0x1c
c0020030:	52                   	push   edx
c0020031:	50                   	push   eax
c0020032:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020036:	2d c0 00 00 00       	sub    eax,0xc0
c002003b:	e9 9e 01 00 00       	jmp    c00201de <Vm::x87Handler(regs*)+0x65f>
c0020040:	8d 50 20             	lea    edx,[eax+0x20]
c0020043:	80 fa 07             	cmp    dl,0x7
c0020046:	77 3a                	ja     c0020082 <Vm::x87Handler(regs*)+0x503>
c0020048:	83 ec 0c             	sub    esp,0xc
c002004b:	2d e0 00 00 00       	sub    eax,0xe0
c0020050:	50                   	push   eax
c0020051:	e8 ec f9 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c0020056:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002005d:	89 c6                	mov    esi,eax
c002005f:	89 d7                	mov    edi,edx
c0020061:	e8 dc f9 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c0020066:	57                   	push   edi
c0020067:	56                   	push   esi
c0020068:	52                   	push   edx
c0020069:	50                   	push   eax
c002006a:	e8 73 f9 ff ff       	call   c001f9e2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002006f:	83 c4 1c             	add    esp,0x1c
c0020072:	52                   	push   edx
c0020073:	50                   	push   eax
c0020074:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020078:	2d e0 00 00 00       	sub    eax,0xe0
c002007d:	e9 5c 01 00 00       	jmp    c00201de <Vm::x87Handler(regs*)+0x65f>
c0020082:	8d 50 18             	lea    edx,[eax+0x18]
c0020085:	80 fa 07             	cmp    dl,0x7
c0020088:	77 3b                	ja     c00200c5 <Vm::x87Handler(regs*)+0x546>
c002008a:	83 ec 0c             	sub    esp,0xc
c002008d:	6a 00                	push   0x0
c002008f:	e8 ae f9 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c0020094:	89 c6                	mov    esi,eax
c0020096:	89 d7                	mov    edi,edx
c0020098:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002009c:	2d e8 00 00 00       	sub    eax,0xe8
c00200a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00200a4:	e8 99 f9 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c00200a9:	57                   	push   edi
c00200aa:	56                   	push   esi
c00200ab:	52                   	push   edx
c00200ac:	50                   	push   eax
c00200ad:	e8 30 f9 ff ff       	call   c001f9e2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00200b2:	83 c4 1c             	add    esp,0x1c
c00200b5:	52                   	push   edx
c00200b6:	50                   	push   eax
c00200b7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200bb:	2d e8 00 00 00       	sub    eax,0xe8
c00200c0:	e9 19 01 00 00       	jmp    c00201de <Vm::x87Handler(regs*)+0x65f>
c00200c5:	8d 50 38             	lea    edx,[eax+0x38]
c00200c8:	80 fa 07             	cmp    dl,0x7
c00200cb:	77 37                	ja     c0020104 <Vm::x87Handler(regs*)+0x585>
c00200cd:	83 ec 0c             	sub    esp,0xc
c00200d0:	2d c8 00 00 00       	sub    eax,0xc8
c00200d5:	50                   	push   eax
c00200d6:	e8 67 f9 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c00200db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200e2:	89 c6                	mov    esi,eax
c00200e4:	89 d7                	mov    edi,edx
c00200e6:	e8 57 f9 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c00200eb:	57                   	push   edi
c00200ec:	56                   	push   esi
c00200ed:	52                   	push   edx
c00200ee:	50                   	push   eax
c00200ef:	e8 fd f8 ff ff       	call   c001f9f1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00200f4:	83 c4 1c             	add    esp,0x1c
c00200f7:	52                   	push   edx
c00200f8:	50                   	push   eax
c00200f9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200fd:	2d c8 00 00 00       	sub    eax,0xc8
c0020102:	eb 7d                	jmp    c0020181 <Vm::x87Handler(regs*)+0x602>
c0020104:	3c f7                	cmp    al,0xf7
c0020106:	76 38                	jbe    c0020140 <Vm::x87Handler(regs*)+0x5c1>
c0020108:	83 ec 0c             	sub    esp,0xc
c002010b:	6a 00                	push   0x0
c002010d:	e8 30 f9 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c0020112:	89 c6                	mov    esi,eax
c0020114:	89 d7                	mov    edi,edx
c0020116:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002011a:	2d f8 00 00 00       	sub    eax,0xf8
c002011f:	89 04 24             	mov    DWORD PTR [esp],eax
c0020122:	e8 1b f9 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c0020127:	57                   	push   edi
c0020128:	56                   	push   esi
c0020129:	52                   	push   edx
c002012a:	50                   	push   eax
c002012b:	e8 e0 f8 ff ff       	call   c001fa10 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020130:	83 c4 1c             	add    esp,0x1c
c0020133:	52                   	push   edx
c0020134:	50                   	push   eax
c0020135:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020139:	2d f8 00 00 00       	sub    eax,0xf8
c002013e:	eb 41                	jmp    c0020181 <Vm::x87Handler(regs*)+0x602>
c0020140:	8d 50 10             	lea    edx,[eax+0x10]
c0020143:	80 fa 07             	cmp    dl,0x7
c0020146:	0f 87 5a 01 00 00    	ja     c00202a6 <Vm::x87Handler(regs*)+0x727>
c002014c:	83 ec 0c             	sub    esp,0xc
c002014f:	2d f0 00 00 00       	sub    eax,0xf0
c0020154:	50                   	push   eax
c0020155:	e8 e8 f8 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c002015a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020161:	89 c6                	mov    esi,eax
c0020163:	89 d7                	mov    edi,edx
c0020165:	e8 d8 f8 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c002016a:	57                   	push   edi
c002016b:	56                   	push   esi
c002016c:	52                   	push   edx
c002016d:	50                   	push   eax
c002016e:	e8 9d f8 ff ff       	call   c001fa10 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020173:	83 c4 1c             	add    esp,0x1c
c0020176:	52                   	push   edx
c0020177:	50                   	push   eax
c0020178:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002017c:	2d f0 00 00 00       	sub    eax,0xf0
c0020181:	50                   	push   eax
c0020182:	e8 fe f8 ff ff       	call   c001fa85 <Vm::fpuSetReg(int, unsigned long long)>
c0020187:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002018b:	e8 9d f9 ff ff       	call   c001fb2d <Vm::fpuPop()>
c0020190:	e9 5e fa ff ff       	jmp    c001fbf3 <Vm::x87Handler(regs*)+0x74>
c0020195:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020199:	8d 50 30             	lea    edx,[eax+0x30]
c002019c:	80 fa 07             	cmp    dl,0x7
c002019f:	77 1d                	ja     c00201be <Vm::x87Handler(regs*)+0x63f>
c00201a1:	83 ec 0c             	sub    esp,0xc
c00201a4:	6a 00                	push   0x0
c00201a6:	e8 97 f8 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c00201ab:	83 c4 0c             	add    esp,0xc
c00201ae:	52                   	push   edx
c00201af:	50                   	push   eax
c00201b0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201b4:	2d d0 00 00 00       	sub    eax,0xd0
c00201b9:	e9 f3 fd ff ff       	jmp    c001ffb1 <Vm::x87Handler(regs*)+0x432>
c00201be:	8d 50 28             	lea    edx,[eax+0x28]
c00201c1:	80 fa 07             	cmp    dl,0x7
c00201c4:	77 28                	ja     c00201ee <Vm::x87Handler(regs*)+0x66f>
c00201c6:	83 ec 0c             	sub    esp,0xc
c00201c9:	6a 00                	push   0x0
c00201cb:	e8 72 f8 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c00201d0:	83 c4 0c             	add    esp,0xc
c00201d3:	52                   	push   edx
c00201d4:	50                   	push   eax
c00201d5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201d9:	2d d8 00 00 00       	sub    eax,0xd8
c00201de:	50                   	push   eax
c00201df:	e8 a1 f8 ff ff       	call   c001fa85 <Vm::fpuSetReg(int, unsigned long long)>
c00201e4:	e8 44 f9 ff ff       	call   c001fb2d <Vm::fpuPop()>
c00201e9:	e9 01 fa ff ff       	jmp    c001fbef <Vm::x87Handler(regs*)+0x70>
c00201ee:	8d 50 20             	lea    edx,[eax+0x20]
c00201f1:	80 fa 07             	cmp    dl,0x7
c00201f4:	77 30                	ja     c0020226 <Vm::x87Handler(regs*)+0x6a7>
c00201f6:	83 ec 0c             	sub    esp,0xc
c00201f9:	2d e0 00 00 00       	sub    eax,0xe0
c00201fe:	50                   	push   eax
c00201ff:	e8 3e f8 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c0020204:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002020b:	89 c6                	mov    esi,eax
c002020d:	89 d7                	mov    edi,edx
c002020f:	e8 2e f8 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c0020214:	57                   	push   edi
c0020215:	56                   	push   esi
c0020216:	52                   	push   edx
c0020217:	50                   	push   eax
c0020218:	e8 48 f7 ff ff       	call   c001f965 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002021d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020221:	e9 54 02 00 00       	jmp    c002047a <Vm::x87Handler(regs*)+0x8fb>
c0020226:	8d 50 18             	lea    edx,[eax+0x18]
c0020229:	80 fa 07             	cmp    dl,0x7
c002022c:	0f 87 43 fb ff ff    	ja     c001fd75 <Vm::x87Handler(regs*)+0x1f6>
c0020232:	83 ec 0c             	sub    esp,0xc
c0020235:	2d e8 00 00 00       	sub    eax,0xe8
c002023a:	50                   	push   eax
c002023b:	e8 02 f8 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c0020240:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020247:	89 c6                	mov    esi,eax
c0020249:	89 d7                	mov    edi,edx
c002024b:	e8 f2 f7 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c0020250:	57                   	push   edi
c0020251:	56                   	push   esi
c0020252:	52                   	push   edx
c0020253:	50                   	push   eax
c0020254:	e8 0c f7 ff ff       	call   c001f965 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020259:	83 c4 20             	add    esp,0x20
c002025c:	e8 cc f8 ff ff       	call   c001fb2d <Vm::fpuPop()>
c0020261:	eb 62                	jmp    c00202c5 <Vm::x87Handler(regs*)+0x746>
c0020263:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020267:	0f 85 0f 01 00 00    	jne    c002037c <Vm::x87Handler(regs*)+0x7fd>
c002026d:	83 ec 0c             	sub    esp,0xc
c0020270:	6a 01                	push   0x1
c0020272:	e8 cb f7 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c0020277:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002027e:	89 c6                	mov    esi,eax
c0020280:	89 d7                	mov    edi,edx
c0020282:	e8 bb f7 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c0020287:	57                   	push   edi
c0020288:	56                   	push   esi
c0020289:	52                   	push   edx
c002028a:	50                   	push   eax
c002028b:	e8 d5 f6 ff ff       	call   c001f965 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020290:	83 c4 20             	add    esp,0x20
c0020293:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020297:	e8 91 f8 ff ff       	call   c001fb2d <Vm::fpuPop()>
c002029c:	e8 8c f8 ff ff       	call   c001fb2d <Vm::fpuPop()>
c00202a1:	e9 50 f9 ff ff       	jmp    c001fbf6 <Vm::x87Handler(regs*)+0x77>
c00202a6:	3c d9                	cmp    al,0xd9
c00202a8:	0f 85 b5 02 00 00    	jne    c0020563 <Vm::x87Handler(regs*)+0x9e4>
c00202ae:	eb bd                	jmp    c002026d <Vm::x87Handler(regs*)+0x6ee>
c00202b0:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c00202b4:	0f 85 ea 02 00 00    	jne    c00205a4 <Vm::x87Handler(regs*)+0xa25>
c00202ba:	0f b7 05 c0 25 03 c0 	movzx  eax,WORD PTR ds:0xc00325c0
c00202c1:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c00202c5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00202c9:	e9 28 f9 ff ff       	jmp    c001fbf6 <Vm::x87Handler(regs*)+0x77>
c00202ce:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202d2:	84 d2                	test   dl,dl
c00202d4:	75 0f                	jne    c00202e5 <Vm::x87Handler(regs*)+0x766>
c00202d6:	83 ec 0c             	sub    esp,0xc
c00202d9:	ff 36                	push   DWORD PTR [esi]
c00202db:	e8 b1 f4 ff ff       	call   c001f791 <Vm::fpu32ToInternal(unsigned int)>
c00202e0:	e9 2c 01 00 00       	jmp    c0020411 <Vm::x87Handler(regs*)+0x892>
c00202e5:	80 fa 01             	cmp    dl,0x1
c00202e8:	75 0f                	jne    c00202f9 <Vm::x87Handler(regs*)+0x77a>
c00202ea:	83 ec 0c             	sub    esp,0xc
c00202ed:	ff 36                	push   DWORD PTR [esi]
c00202ef:	e8 9d f4 ff ff       	call   c001f791 <Vm::fpu32ToInternal(unsigned int)>
c00202f4:	e9 81 02 00 00       	jmp    c002057a <Vm::x87Handler(regs*)+0x9fb>
c00202f9:	80 fa 04             	cmp    dl,0x4
c00202fc:	75 0f                	jne    c002030d <Vm::x87Handler(regs*)+0x78e>
c00202fe:	83 ec 0c             	sub    esp,0xc
c0020301:	ff 36                	push   DWORD PTR [esi]
c0020303:	e8 89 f4 ff ff       	call   c001f791 <Vm::fpu32ToInternal(unsigned int)>
c0020308:	e9 86 01 00 00       	jmp    c0020493 <Vm::x87Handler(regs*)+0x914>
c002030d:	80 fa 05             	cmp    dl,0x5
c0020310:	75 1b                	jne    c002032d <Vm::x87Handler(regs*)+0x7ae>
c0020312:	83 ec 0c             	sub    esp,0xc
c0020315:	6a 00                	push   0x0
c0020317:	e8 26 f7 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c002031c:	89 c7                	mov    edi,eax
c002031e:	89 d5                	mov    ebp,edx
c0020320:	58                   	pop    eax
c0020321:	ff 36                	push   DWORD PTR [esi]
c0020323:	e8 69 f4 ff ff       	call   c001f791 <Vm::fpu32ToInternal(unsigned int)>
c0020328:	e9 a3 01 00 00       	jmp    c00204d0 <Vm::x87Handler(regs*)+0x951>
c002032d:	80 fa 06             	cmp    dl,0x6
c0020330:	75 0f                	jne    c0020341 <Vm::x87Handler(regs*)+0x7c2>
c0020332:	83 ec 0c             	sub    esp,0xc
c0020335:	ff 36                	push   DWORD PTR [esi]
c0020337:	e8 55 f4 ff ff       	call   c001f791 <Vm::fpu32ToInternal(unsigned int)>
c002033c:	e9 ae 01 00 00       	jmp    c00204ef <Vm::x87Handler(regs*)+0x970>
c0020341:	31 c0                	xor    eax,eax
c0020343:	80 fa 07             	cmp    dl,0x7
c0020346:	0f 85 94 02 00 00    	jne    c00205e0 <Vm::x87Handler(regs*)+0xa61>
c002034c:	83 ec 0c             	sub    esp,0xc
c002034f:	6a 00                	push   0x0
c0020351:	e8 ec f6 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c0020356:	89 c7                	mov    edi,eax
c0020358:	89 d5                	mov    ebp,edx
c002035a:	58                   	pop    eax
c002035b:	ff 36                	push   DWORD PTR [esi]
c002035d:	e8 2f f4 ff ff       	call   c001f791 <Vm::fpu32ToInternal(unsigned int)>
c0020362:	e9 cb 01 00 00       	jmp    c0020532 <Vm::x87Handler(regs*)+0x9b3>
c0020367:	80 fa 03             	cmp    dl,0x3
c002036a:	0f 85 d3 01 00 00    	jne    c0020543 <Vm::x87Handler(regs*)+0x9c4>
c0020370:	e8 b8 f7 ff ff       	call   c001fb2d <Vm::fpuPop()>
c0020375:	51                   	push   ecx
c0020376:	51                   	push   ecx
c0020377:	e9 de 01 00 00       	jmp    c002055a <Vm::x87Handler(regs*)+0x9db>
c002037c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020380:	80 fa 01             	cmp    dl,0x1
c0020383:	75 09                	jne    c002038e <Vm::x87Handler(regs*)+0x80f>
c0020385:	57                   	push   edi
c0020386:	57                   	push   edi
c0020387:	8b 06                	mov    eax,DWORD PTR [esi]
c0020389:	e9 e3 01 00 00       	jmp    c0020571 <Vm::x87Handler(regs*)+0x9f2>
c002038e:	80 fa 04             	cmp    dl,0x4
c0020391:	75 12                	jne    c00203a5 <Vm::x87Handler(regs*)+0x826>
c0020393:	31 d2                	xor    edx,edx
c0020395:	51                   	push   ecx
c0020396:	51                   	push   ecx
c0020397:	8b 06                	mov    eax,DWORD PTR [esi]
c0020399:	52                   	push   edx
c002039a:	50                   	push   eax
c002039b:	e8 d0 f4 ff ff       	call   c001f870 <Vm::fpuLongToFloat(long long)>
c00203a0:	e9 ee 00 00 00       	jmp    c0020493 <Vm::x87Handler(regs*)+0x914>
c00203a5:	31 c0                	xor    eax,eax
c00203a7:	80 fa 07             	cmp    dl,0x7
c00203aa:	0f 85 30 02 00 00    	jne    c00205e0 <Vm::x87Handler(regs*)+0xa61>
c00203b0:	83 ec 0c             	sub    esp,0xc
c00203b3:	6a 00                	push   0x0
c00203b5:	e8 88 f6 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c00203ba:	89 c7                	mov    edi,eax
c00203bc:	89 d5                	mov    ebp,edx
c00203be:	58                   	pop    eax
c00203bf:	8b 06                	mov    eax,DWORD PTR [esi]
c00203c1:	5a                   	pop    edx
c00203c2:	31 d2                	xor    edx,edx
c00203c4:	52                   	push   edx
c00203c5:	50                   	push   eax
c00203c6:	e8 a5 f4 ff ff       	call   c001f870 <Vm::fpuLongToFloat(long long)>
c00203cb:	e9 62 01 00 00       	jmp    c0020532 <Vm::x87Handler(regs*)+0x9b3>
c00203d0:	84 d2                	test   dl,dl
c00203d2:	75 0d                	jne    c00203e1 <Vm::x87Handler(regs*)+0x862>
c00203d4:	31 d2                	xor    edx,edx
c00203d6:	55                   	push   ebp
c00203d7:	55                   	push   ebp
c00203d8:	8b 06                	mov    eax,DWORD PTR [esi]
c00203da:	52                   	push   edx
c00203db:	50                   	push   eax
c00203dc:	e9 d3 01 00 00       	jmp    c00205b4 <Vm::x87Handler(regs*)+0xa35>
c00203e1:	31 c0                	xor    eax,eax
c00203e3:	80 fa 02             	cmp    dl,0x2
c00203e6:	0f 85 f4 01 00 00    	jne    c00205e0 <Vm::x87Handler(regs*)+0xa61>
c00203ec:	83 ec 0c             	sub    esp,0xc
c00203ef:	6a 00                	push   0x0
c00203f1:	e8 4c f6 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c00203f6:	59                   	pop    ecx
c00203f7:	5f                   	pop    edi
c00203f8:	e9 6a f9 ff ff       	jmp    c001fd67 <Vm::x87Handler(regs*)+0x1e8>
c00203fd:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020401:	84 d2                	test   dl,dl
c0020403:	75 2a                	jne    c002042f <Vm::x87Handler(regs*)+0x8b0>
c0020405:	50                   	push   eax
c0020406:	50                   	push   eax
c0020407:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002040a:	ff 36                	push   DWORD PTR [esi]
c002040c:	e8 c5 f3 ff ff       	call   c001f7d6 <Vm::fpu64ToInternal(unsigned long long)>
c0020411:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020418:	89 c6                	mov    esi,eax
c002041a:	89 d7                	mov    edi,edx
c002041c:	e8 21 f6 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c0020421:	57                   	push   edi
c0020422:	56                   	push   esi
c0020423:	52                   	push   edx
c0020424:	50                   	push   eax
c0020425:	e8 8e f5 ff ff       	call   c001f9b8 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002042a:	e9 64 01 00 00       	jmp    c0020593 <Vm::x87Handler(regs*)+0xa14>
c002042f:	80 fa 01             	cmp    dl,0x1
c0020432:	75 11                	jne    c0020445 <Vm::x87Handler(regs*)+0x8c6>
c0020434:	50                   	push   eax
c0020435:	50                   	push   eax
c0020436:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020439:	ff 36                	push   DWORD PTR [esi]
c002043b:	e8 96 f3 ff ff       	call   c001f7d6 <Vm::fpu64ToInternal(unsigned long long)>
c0020440:	e9 35 01 00 00       	jmp    c002057a <Vm::x87Handler(regs*)+0x9fb>
c0020445:	80 fa 02             	cmp    dl,0x2
c0020448:	0f 85 54 f9 ff ff    	jne    c001fda2 <Vm::x87Handler(regs*)+0x223>
c002044e:	55                   	push   ebp
c002044f:	55                   	push   ebp
c0020450:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020453:	ff 36                	push   DWORD PTR [esi]
c0020455:	e8 7c f3 ff ff       	call   c001f7d6 <Vm::fpu64ToInternal(unsigned long long)>
c002045a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020461:	89 c6                	mov    esi,eax
c0020463:	89 d7                	mov    edi,edx
c0020465:	e8 d8 f5 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c002046a:	57                   	push   edi
c002046b:	56                   	push   esi
c002046c:	52                   	push   edx
c002046d:	50                   	push   eax
c002046e:	e8 f2 f4 ff ff       	call   c001f965 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020473:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020477:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002047a:	83 c4 20             	add    esp,0x20
c002047d:	e9 74 f7 ff ff       	jmp    c001fbf6 <Vm::x87Handler(regs*)+0x77>
c0020482:	80 fa 04             	cmp    dl,0x4
c0020485:	75 2a                	jne    c00204b1 <Vm::x87Handler(regs*)+0x932>
c0020487:	51                   	push   ecx
c0020488:	51                   	push   ecx
c0020489:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002048c:	ff 36                	push   DWORD PTR [esi]
c002048e:	e8 43 f3 ff ff       	call   c001f7d6 <Vm::fpu64ToInternal(unsigned long long)>
c0020493:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002049a:	89 c6                	mov    esi,eax
c002049c:	89 d7                	mov    edi,edx
c002049e:	e8 9f f5 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c00204a3:	57                   	push   edi
c00204a4:	56                   	push   esi
c00204a5:	52                   	push   edx
c00204a6:	50                   	push   eax
c00204a7:	e8 36 f5 ff ff       	call   c001f9e2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00204ac:	e9 e2 00 00 00       	jmp    c0020593 <Vm::x87Handler(regs*)+0xa14>
c00204b1:	80 fa 05             	cmp    dl,0x5
c00204b4:	75 28                	jne    c00204de <Vm::x87Handler(regs*)+0x95f>
c00204b6:	83 ec 0c             	sub    esp,0xc
c00204b9:	6a 00                	push   0x0
c00204bb:	e8 82 f5 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c00204c0:	89 c7                	mov    edi,eax
c00204c2:	89 d5                	mov    ebp,edx
c00204c4:	58                   	pop    eax
c00204c5:	5a                   	pop    edx
c00204c6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204c9:	ff 36                	push   DWORD PTR [esi]
c00204cb:	e8 06 f3 ff ff       	call   c001f7d6 <Vm::fpu64ToInternal(unsigned long long)>
c00204d0:	83 c4 10             	add    esp,0x10
c00204d3:	55                   	push   ebp
c00204d4:	57                   	push   edi
c00204d5:	52                   	push   edx
c00204d6:	50                   	push   eax
c00204d7:	e8 06 f5 ff ff       	call   c001f9e2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00204dc:	eb 60                	jmp    c002053e <Vm::x87Handler(regs*)+0x9bf>
c00204de:	80 fa 06             	cmp    dl,0x6
c00204e1:	75 2a                	jne    c002050d <Vm::x87Handler(regs*)+0x98e>
c00204e3:	51                   	push   ecx
c00204e4:	51                   	push   ecx
c00204e5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204e8:	ff 36                	push   DWORD PTR [esi]
c00204ea:	e8 e7 f2 ff ff       	call   c001f7d6 <Vm::fpu64ToInternal(unsigned long long)>
c00204ef:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204f6:	89 c6                	mov    esi,eax
c00204f8:	89 d7                	mov    edi,edx
c00204fa:	e8 43 f5 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c00204ff:	57                   	push   edi
c0020500:	56                   	push   esi
c0020501:	52                   	push   edx
c0020502:	50                   	push   eax
c0020503:	e8 08 f5 ff ff       	call   c001fa10 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020508:	e9 86 00 00 00       	jmp    c0020593 <Vm::x87Handler(regs*)+0xa14>
c002050d:	31 c0                	xor    eax,eax
c002050f:	80 fa 07             	cmp    dl,0x7
c0020512:	0f 85 c8 00 00 00    	jne    c00205e0 <Vm::x87Handler(regs*)+0xa61>
c0020518:	83 ec 0c             	sub    esp,0xc
c002051b:	6a 00                	push   0x0
c002051d:	e8 20 f5 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c0020522:	89 c7                	mov    edi,eax
c0020524:	89 d5                	mov    ebp,edx
c0020526:	58                   	pop    eax
c0020527:	5a                   	pop    edx
c0020528:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002052b:	ff 36                	push   DWORD PTR [esi]
c002052d:	e8 a4 f2 ff ff       	call   c001f7d6 <Vm::fpu64ToInternal(unsigned long long)>
c0020532:	83 c4 10             	add    esp,0x10
c0020535:	55                   	push   ebp
c0020536:	57                   	push   edi
c0020537:	52                   	push   edx
c0020538:	50                   	push   eax
c0020539:	e8 d2 f4 ff ff       	call   c001fa10 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002053e:	83 c4 0c             	add    esp,0xc
c0020541:	eb 53                	jmp    c0020596 <Vm::x87Handler(regs*)+0xa17>
c0020543:	31 c0                	xor    eax,eax
c0020545:	80 fa 02             	cmp    dl,0x2
c0020548:	0f 85 92 00 00 00    	jne    c00205e0 <Vm::x87Handler(regs*)+0xa61>
c002054e:	83 ec 0c             	sub    esp,0xc
c0020551:	6a 00                	push   0x0
c0020553:	e8 ea f4 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c0020558:	59                   	pop    ecx
c0020559:	5f                   	pop    edi
c002055a:	52                   	push   edx
c002055b:	50                   	push   eax
c002055c:	e8 27 f2 ff ff       	call   c001f788 <Vm::fpuInternalTo64(unsigned long long)>
c0020561:	eb 70                	jmp    c00205d3 <Vm::x87Handler(regs*)+0xa54>
c0020563:	31 c0                	xor    eax,eax
c0020565:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c002056a:	75 74                	jne    c00205e0 <Vm::x87Handler(regs*)+0xa61>
c002056c:	50                   	push   eax
c002056d:	50                   	push   eax
c002056e:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020571:	31 d2                	xor    edx,edx
c0020573:	52                   	push   edx
c0020574:	50                   	push   eax
c0020575:	e8 f6 f2 ff ff       	call   c001f870 <Vm::fpuLongToFloat(long long)>
c002057a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020581:	89 c6                	mov    esi,eax
c0020583:	89 d7                	mov    edi,edx
c0020585:	e8 b8 f4 ff ff       	call   c001fa42 <Vm::fpuGetReg(int)>
c002058a:	57                   	push   edi
c002058b:	56                   	push   esi
c002058c:	52                   	push   edx
c002058d:	50                   	push   eax
c002058e:	e8 5e f4 ff ff       	call   c001f9f1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020593:	83 c4 1c             	add    esp,0x1c
c0020596:	52                   	push   edx
c0020597:	50                   	push   eax
c0020598:	6a 00                	push   0x0
c002059a:	e8 e6 f4 ff ff       	call   c001fa85 <Vm::fpuSetReg(int, unsigned long long)>
c002059f:	e9 f2 f7 ff ff       	jmp    c001fd96 <Vm::x87Handler(regs*)+0x217>
c00205a4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00205a8:	80 fa 05             	cmp    dl,0x5
c00205ab:	75 11                	jne    c00205be <Vm::x87Handler(regs*)+0xa3f>
c00205ad:	55                   	push   ebp
c00205ae:	55                   	push   ebp
c00205af:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00205b2:	ff 36                	push   DWORD PTR [esi]
c00205b4:	e8 81 f2 ff ff       	call   c001f83a <Vm::fpuULongToFloat(unsigned long long)>
c00205b9:	e9 cf f7 ff ff       	jmp    c001fd8d <Vm::x87Handler(regs*)+0x20e>
c00205be:	31 c0                	xor    eax,eax
c00205c0:	80 fa 07             	cmp    dl,0x7
c00205c3:	75 1b                	jne    c00205e0 <Vm::x87Handler(regs*)+0xa61>
c00205c5:	e8 63 f5 ff ff       	call   c001fb2d <Vm::fpuPop()>
c00205ca:	51                   	push   ecx
c00205cb:	51                   	push   ecx
c00205cc:	52                   	push   edx
c00205cd:	50                   	push   eax
c00205ce:	e8 0c f2 ff ff       	call   c001f7df <Vm::fpuFloatToLong(unsigned long long)>
c00205d3:	83 c4 10             	add    esp,0x10
c00205d6:	89 06                	mov    DWORD PTR [esi],eax
c00205d8:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00205db:	e9 f8 f7 ff ff       	jmp    c001fdd8 <Vm::x87Handler(regs*)+0x259>
c00205e0:	83 c4 1c             	add    esp,0x1c
c00205e3:	5b                   	pop    ebx
c00205e4:	5e                   	pop    esi
c00205e5:	5f                   	pop    edi
c00205e6:	5d                   	pop    ebp
c00205e7:	c3                   	ret    

c00205e8 <__static_initialization_and_destruction_0(int, int)>:
c00205e8:	83 ec 0c             	sub    esp,0xc
c00205eb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00205f0:	75 1a                	jne    c002060c <__static_initialization_and_destruction_0(int, int)+0x24>
c00205f2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00205fa:	75 10                	jne    c002060c <__static_initialization_and_destruction_0(int, int)+0x24>
c00205fc:	83 ec 0c             	sub    esp,0xc
c00205ff:	68 c0 25 03 c0       	push   0xc00325c0
c0020604:	e8 33 90 00 00       	call   c002963c <Vm::_FPUState::_FPUState()>
c0020609:	83 c4 10             	add    esp,0x10
c002060c:	90                   	nop
c002060d:	83 c4 0c             	add    esp,0xc
c0020610:	c3                   	ret    

c0020611 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020611:	83 ec 0c             	sub    esp,0xc
c0020614:	83 ec 08             	sub    esp,0x8
c0020617:	68 ff ff 00 00       	push   0xffff
c002061c:	6a 01                	push   0x1
c002061e:	e8 c5 ff ff ff       	call   c00205e8 <__static_initialization_and_destruction_0(int, int)>
c0020623:	83 c4 10             	add    esp,0x10
c0020626:	83 c4 0c             	add    esp,0xc
c0020629:	c3                   	ret    

c002062a <FAT::getName()>:
c002062a:	b8 c8 d0 02 c0       	mov    eax,0xc002d0c8
c002062f:	c3                   	ret    

c0020630 <FAT::tell(void*, unsigned long long*)>:
c0020630:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020635:	75 06                	jne    c002063d <FAT::tell(void*, unsigned long long*)+0xd>
c0020637:	b8 04 00 00 00       	mov    eax,0x4
c002063c:	c3                   	ret    
c002063d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020642:	75 06                	jne    c002064a <FAT::tell(void*, unsigned long long*)+0x1a>
c0020644:	b8 04 00 00 00       	mov    eax,0x4
c0020649:	c3                   	ret    
c002064a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002064e:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020651:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020654:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020658:	89 01                	mov    DWORD PTR [ecx],eax
c002065a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002065d:	b8 00 00 00 00       	mov    eax,0x0
c0020662:	c3                   	ret    
c0020663:	90                   	nop

c0020664 <FAT::stat(void*, unsigned long long*)>:
c0020664:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020669:	75 06                	jne    c0020671 <FAT::stat(void*, unsigned long long*)+0xd>
c002066b:	b8 04 00 00 00       	mov    eax,0x4
c0020670:	c3                   	ret    
c0020671:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020676:	75 06                	jne    c002067e <FAT::stat(void*, unsigned long long*)+0x1a>
c0020678:	b8 04 00 00 00       	mov    eax,0x4
c002067d:	c3                   	ret    
c002067e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020682:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020685:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020688:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002068c:	89 01                	mov    DWORD PTR [ecx],eax
c002068e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020691:	b8 00 00 00 00       	mov    eax,0x0
c0020696:	c3                   	ret    
c0020697:	90                   	nop

c0020698 <FAT::~FAT()>:
c0020698:	83 ec 0c             	sub    esp,0xc
c002069b:	ba 58 d1 02 c0       	mov    edx,0xc002d158
c00206a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206a4:	89 10                	mov    DWORD PTR [eax],edx
c00206a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206aa:	83 ec 0c             	sub    esp,0xc
c00206ad:	50                   	push   eax
c00206ae:	e8 4b 25 ff ff       	call   c0012bfe <Filesystem::~Filesystem()>
c00206b3:	83 c4 10             	add    esp,0x10
c00206b6:	90                   	nop
c00206b7:	83 c4 0c             	add    esp,0xc
c00206ba:	c3                   	ret    
c00206bb:	90                   	nop

c00206bc <FAT::~FAT()>:
c00206bc:	83 ec 0c             	sub    esp,0xc
c00206bf:	83 ec 0c             	sub    esp,0xc
c00206c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206c6:	e8 cd ff ff ff       	call   c0020698 <FAT::~FAT()>
c00206cb:	83 c4 10             	add    esp,0x10
c00206ce:	83 ec 08             	sub    esp,0x8
c00206d1:	6a 08                	push   0x8
c00206d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206d7:	e8 13 21 ff ff       	call   c00127ef <operator delete(void*, unsigned long)>
c00206dc:	83 c4 10             	add    esp,0x10
c00206df:	83 c4 0c             	add    esp,0xc
c00206e2:	c3                   	ret    
c00206e3:	90                   	nop

c00206e4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00206e4:	83 ec 1c             	sub    esp,0x1c
c00206e7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00206ee:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00206f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206f7:	8b 04 85 40 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9c0]
c00206fe:	83 f8 ff             	cmp    eax,0xffffffff
c0020701:	75 34                	jne    c0020737 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020703:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020707:	88 c2                	mov    dl,al
c0020709:	a1 20 26 03 c0       	mov    eax,ds:0xc0032620
c002070e:	01 d0                	add    eax,edx
c0020710:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020714:	8b 15 20 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032620
c002071a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002071e:	89 14 85 40 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9c0],edx
c0020725:	a1 20 26 03 c0       	mov    eax,ds:0xc0032620
c002072a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002072e:	89 14 85 c0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd940],edx
c0020735:	eb 17                	jmp    c002074e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020737:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002073b:	88 c2                	mov    dl,al
c002073d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020741:	8b 04 85 40 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9c0]
c0020748:	01 d0                	add    eax,edx
c002074a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002074e:	83 ec 04             	sub    esp,0x4
c0020751:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020755:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020759:	8d 44 24 15          	lea    eax,[esp+0x15]
c002075d:	50                   	push   eax
c002075e:	e8 9b 65 fe ff       	call   c0006cfe <f_getlabel>
c0020763:	83 c4 10             	add    esp,0x10
c0020766:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002076a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002076f:	75 07                	jne    c0020778 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020771:	b8 00 00 00 00       	mov    eax,0x0
c0020776:	eb 05                	jmp    c002077d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020778:	b8 01 00 00 00       	mov    eax,0x1
c002077d:	83 c4 1c             	add    esp,0x1c
c0020780:	c3                   	ret    
c0020781:	90                   	nop

c0020782 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020782:	57                   	push   edi
c0020783:	83 ec 58             	sub    esp,0x58
c0020786:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002078e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020792:	b9 0f 00 00 00       	mov    ecx,0xf
c0020797:	b8 00 00 00 00       	mov    eax,0x0
c002079c:	fc                   	cld    
c002079d:	89 d7                	mov    edi,edx
c002079f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00207a1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00207a5:	8b 04 85 40 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9c0]
c00207ac:	83 f8 ff             	cmp    eax,0xffffffff
c00207af:	75 34                	jne    c00207e5 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00207b1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00207b5:	88 c2                	mov    dl,al
c00207b7:	a1 20 26 03 c0       	mov    eax,ds:0xc0032620
c00207bc:	01 d0                	add    eax,edx
c00207be:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207c2:	8b 15 20 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032620
c00207c8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00207cc:	89 14 85 40 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9c0],edx
c00207d3:	a1 20 26 03 c0       	mov    eax,ds:0xc0032620
c00207d8:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00207dc:	89 14 85 c0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd940],edx
c00207e3:	eb 17                	jmp    c00207fc <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c00207e5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00207e9:	88 c2                	mov    dl,al
c00207eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00207ef:	8b 04 85 40 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9c0]
c00207f6:	01 d0                	add    eax,edx
c00207f8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207fc:	83 ec 08             	sub    esp,0x8
c00207ff:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020803:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020807:	50                   	push   eax
c0020808:	e8 3f 01 fe ff       	call   c000094c <strcat>
c002080d:	83 c4 10             	add    esp,0x10
c0020810:	83 ec 0c             	sub    esp,0xc
c0020813:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020817:	50                   	push   eax
c0020818:	e8 cf 66 fe ff       	call   c0006eec <f_setlabel>
c002081d:	83 c4 10             	add    esp,0x10
c0020820:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020824:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020829:	75 07                	jne    c0020832 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c002082b:	b8 00 00 00 00       	mov    eax,0x0
c0020830:	eb 05                	jmp    c0020837 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020832:	b8 01 00 00 00       	mov    eax,0x1
c0020837:	83 c4 58             	add    esp,0x58
c002083a:	5f                   	pop    edi
c002083b:	c3                   	ret    

c002083c <FAT::format(LogicalDisk*, int, char const*, int)>:
c002083c:	83 ec 2c             	sub    esp,0x2c
c002083f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020847:	83 ec 08             	sub    esp,0x8
c002084a:	68 ec d0 02 c0       	push   0xc002d0ec
c002084f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020853:	e8 40 00 fe ff       	call   c0000898 <strcmp>
c0020858:	83 c4 10             	add    esp,0x10
c002085b:	85 c0                	test   eax,eax
c002085d:	0f 94 c0             	sete   al
c0020860:	84 c0                	test   al,al
c0020862:	74 0d                	je     c0020871 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020864:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002086c:	e9 a6 00 00 00       	jmp    c0020917 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020871:	83 ec 08             	sub    esp,0x8
c0020874:	68 de d0 02 c0       	push   0xc002d0de
c0020879:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002087d:	e8 16 00 fe ff       	call   c0000898 <strcmp>
c0020882:	83 c4 10             	add    esp,0x10
c0020885:	85 c0                	test   eax,eax
c0020887:	0f 94 c0             	sete   al
c002088a:	84 c0                	test   al,al
c002088c:	74 0a                	je     c0020898 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002088e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020896:	eb 7f                	jmp    c0020917 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020898:	83 ec 08             	sub    esp,0x8
c002089b:	68 e4 d0 02 c0       	push   0xc002d0e4
c00208a0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208a4:	e8 ef ff fd ff       	call   c0000898 <strcmp>
c00208a9:	83 c4 10             	add    esp,0x10
c00208ac:	85 c0                	test   eax,eax
c00208ae:	0f 94 c0             	sete   al
c00208b1:	84 c0                	test   al,al
c00208b3:	74 0a                	je     c00208bf <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00208b5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00208bd:	eb 58                	jmp    c0020917 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208bf:	83 ec 08             	sub    esp,0x8
c00208c2:	68 ac 9d 02 c0       	push   0xc0029dac
c00208c7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208cb:	e8 c8 ff fd ff       	call   c0000898 <strcmp>
c00208d0:	83 c4 10             	add    esp,0x10
c00208d3:	85 c0                	test   eax,eax
c00208d5:	0f 94 c0             	sete   al
c00208d8:	84 c0                	test   al,al
c00208da:	74 0a                	je     c00208e6 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00208dc:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00208e4:	eb 31                	jmp    c0020917 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208e6:	83 ec 08             	sub    esp,0x8
c00208e9:	68 ea d0 02 c0       	push   0xc002d0ea
c00208ee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00208f2:	e8 a1 ff fd ff       	call   c0000898 <strcmp>
c00208f7:	83 c4 10             	add    esp,0x10
c00208fa:	85 c0                	test   eax,eax
c00208fc:	0f 94 c0             	sete   al
c00208ff:	84 c0                	test   al,al
c0020901:	74 0a                	je     c002090d <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020903:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c002090b:	eb 0a                	jmp    c0020917 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002090d:	b8 08 00 00 00       	mov    eax,0x8
c0020912:	e9 04 01 00 00       	jmp    c0020a1b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020917:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002091e:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020923:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020927:	8b 04 85 40 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9c0]
c002092e:	83 f8 ff             	cmp    eax,0xffffffff
c0020931:	75 34                	jne    c0020967 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020933:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020937:	88 c2                	mov    dl,al
c0020939:	a1 20 26 03 c0       	mov    eax,ds:0xc0032620
c002093e:	01 d0                	add    eax,edx
c0020940:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020944:	8b 15 20 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032620
c002094a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002094e:	89 14 85 40 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9c0],edx
c0020955:	a1 20 26 03 c0       	mov    eax,ds:0xc0032620
c002095a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002095e:	89 14 85 c0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd940],edx
c0020965:	eb 17                	jmp    c002097e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020967:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002096b:	88 c2                	mov    dl,al
c002096d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020971:	8b 04 85 40 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9c0]
c0020978:	01 d0                	add    eax,edx
c002097a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002097e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020982:	88 04 24             	mov    BYTE PTR [esp],al
c0020985:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020989:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002098d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020995:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c002099a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00209a2:	83 ec 0c             	sub    esp,0xc
c00209a5:	68 00 20 00 00       	push   0x2000
c00209aa:	e8 dd ee fe ff       	call   c000f88c <malloc>
c00209af:	83 c4 10             	add    esp,0x10
c00209b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00209b6:	68 00 20 00 00       	push   0x2000
c00209bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209bf:	8d 44 24 08          	lea    eax,[esp+0x8]
c00209c3:	50                   	push   eax
c00209c4:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00209c8:	50                   	push   eax
c00209c9:	e8 69 69 fe ff       	call   c0007337 <f_mkfs>
c00209ce:	83 c4 10             	add    esp,0x10
c00209d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00209d5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00209da:	75 07                	jne    c00209e3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00209dc:	b8 00 00 00 00       	mov    eax,0x0
c00209e1:	eb 38                	jmp    c0020a1b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209e3:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00209e8:	75 17                	jne    c0020a01 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c00209ea:	83 ec 0c             	sub    esp,0xc
c00209ed:	68 28 d1 02 c0       	push   0xc002d128
c00209f2:	e8 d8 1e ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00209f7:	83 c4 10             	add    esp,0x10
c00209fa:	b8 09 00 00 00       	mov    eax,0x9
c00209ff:	eb 1a                	jmp    c0020a1b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020a01:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020a05:	83 ec 08             	sub    esp,0x8
c0020a08:	50                   	push   eax
c0020a09:	68 f0 d0 02 c0       	push   0xc002d0f0
c0020a0e:	e8 bc 1e ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0020a13:	83 c4 10             	add    esp,0x10
c0020a16:	b8 01 00 00 00       	mov    eax,0x1
c0020a1b:	83 c4 2c             	add    esp,0x2c
c0020a1e:	c3                   	ret    
c0020a1f:	90                   	nop

c0020a20 <FAT::tryMount(LogicalDisk*, int)>:
c0020a20:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020a26:	a1 20 26 03 c0       	mov    eax,ds:0xc0032620
c0020a2b:	83 f8 14             	cmp    eax,0x14
c0020a2e:	75 17                	jne    c0020a47 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020a30:	83 ec 0c             	sub    esp,0xc
c0020a33:	68 02 d1 02 c0       	push   0xc002d102
c0020a38:	e8 c8 98 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c0020a3d:	83 c4 10             	add    esp,0x10
c0020a40:	b0 00                	mov    al,0x0
c0020a42:	e9 d7 01 00 00       	jmp    c0020c1e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a47:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020a4e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020a54:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020a5a:	3d 00 02 00 00       	cmp    eax,0x200
c0020a5f:	74 07                	je     c0020a68 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020a61:	b0 00                	mov    al,0x0
c0020a63:	e9 b6 01 00 00       	jmp    c0020c1e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a68:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020a70:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a77:	8b 04 85 40 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9c0]
c0020a7e:	83 f8 ff             	cmp    eax,0xffffffff
c0020a81:	74 07                	je     c0020a8a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020a83:	b0 01                	mov    al,0x1
c0020a85:	e9 94 01 00 00       	jmp    c0020c1e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a8a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020a94:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020a9c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020aa3:	88 c2                	mov    dl,al
c0020aa5:	a1 20 26 03 c0       	mov    eax,ds:0xc0032620
c0020aaa:	01 d0                	add    eax,edx
c0020aac:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020ab3:	8b 15 20 26 03 c0    	mov    edx,DWORD PTR ds:0xc0032620
c0020ab9:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020ac0:	89 14 85 40 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd9c0],edx
c0020ac7:	a1 20 26 03 c0       	mov    eax,ds:0xc0032620
c0020acc:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020ad3:	89 14 85 c0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd940],edx
c0020ada:	83 ec 0c             	sub    esp,0xc
c0020add:	68 54 02 00 00       	push   0x254
c0020ae2:	e8 a5 ed fe ff       	call   c000f88c <malloc>
c0020ae7:	83 c4 10             	add    esp,0x10
c0020aea:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020af1:	83 ec 04             	sub    esp,0x4
c0020af4:	6a 00                	push   0x0
c0020af6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020afd:	50                   	push   eax
c0020afe:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b05:	e8 eb 43 fe ff       	call   c0004ef5 <f_mount>
c0020b0a:	83 c4 10             	add    esp,0x10
c0020b0d:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b14:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020b1c:	74 19                	je     c0020b37 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020b1e:	83 ec 0c             	sub    esp,0xc
c0020b21:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b28:	e8 7f ed fe ff       	call   c000f8ac <rfree>
c0020b2d:	83 c4 10             	add    esp,0x10
c0020b30:	b0 00                	mov    al,0x0
c0020b32:	e9 e7 00 00 00       	jmp    c0020c1e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020b37:	83 ec 04             	sub    esp,0x4
c0020b3a:	68 00 01 00 00       	push   0x100
c0020b3f:	6a 00                	push   0x0
c0020b41:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b48:	50                   	push   eax
c0020b49:	e8 02 fc fd ff       	call   c0000750 <memset>
c0020b4e:	83 c4 10             	add    esp,0x10
c0020b51:	83 ec 08             	sub    esp,0x8
c0020b54:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b5b:	50                   	push   eax
c0020b5c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b63:	50                   	push   eax
c0020b64:	e8 e3 fd fd ff       	call   c000094c <strcat>
c0020b69:	83 c4 10             	add    esp,0x10
c0020b6c:	83 ec 08             	sub    esp,0x8
c0020b6f:	68 10 d1 02 c0       	push   0xc002d110
c0020b74:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b7b:	50                   	push   eax
c0020b7c:	e8 cb fd fd ff       	call   c000094c <strcat>
c0020b81:	83 c4 10             	add    esp,0x10
c0020b84:	83 ec 04             	sub    esp,0x4
c0020b87:	6a 01                	push   0x1
c0020b89:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020b90:	50                   	push   eax
c0020b91:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b95:	50                   	push   eax
c0020b96:	e8 bc 43 fe ff       	call   c0004f57 <f_open>
c0020b9b:	83 c4 10             	add    esp,0x10
c0020b9e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020ba5:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020bac:	85 c0                	test   eax,eax
c0020bae:	74 0a                	je     c0020bba <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020bb0:	78 2d                	js     c0020bdf <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020bb2:	83 e8 04             	sub    eax,0x4
c0020bb5:	83 f8 01             	cmp    eax,0x1
c0020bb8:	77 25                	ja     c0020bdf <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020bba:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020bc2:	83 ec 0c             	sub    esp,0xc
c0020bc5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020bc9:	50                   	push   eax
c0020bca:	e8 da 4e fe ff       	call   c0005aa9 <f_close>
c0020bcf:	83 c4 10             	add    esp,0x10
c0020bd2:	90                   	nop
c0020bd3:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020bdb:	74 3a                	je     c0020c17 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020bdd:	eb 2d                	jmp    c0020c0c <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020bdf:	83 ec 0c             	sub    esp,0xc
c0020be2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020be9:	e8 be ec fe ff       	call   c000f8ac <rfree>
c0020bee:	83 c4 10             	add    esp,0x10
c0020bf1:	83 ec 04             	sub    esp,0x4
c0020bf4:	6a 00                	push   0x0
c0020bf6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020bfd:	50                   	push   eax
c0020bfe:	6a 00                	push   0x0
c0020c00:	e8 f0 42 fe ff       	call   c0004ef5 <f_mount>
c0020c05:	83 c4 10             	add    esp,0x10
c0020c08:	b0 00                	mov    al,0x0
c0020c0a:	eb 12                	jmp    c0020c1e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020c0c:	a1 20 26 03 c0       	mov    eax,ds:0xc0032620
c0020c11:	40                   	inc    eax
c0020c12:	a3 20 26 03 c0       	mov    ds:0xc0032620,eax
c0020c17:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020c1e:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020c24:	c3                   	ret    
c0020c25:	90                   	nop

c0020c26 <FAT::getFileFirstSector(char const*)>:
c0020c26:	53                   	push   ebx
c0020c27:	83 ec 28             	sub    esp,0x28
c0020c2a:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020c32:	83 ec 0c             	sub    esp,0xc
c0020c35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c39:	e8 4e ec fe ff       	call   c000f88c <malloc>
c0020c3e:	83 c4 10             	add    esp,0x10
c0020c41:	89 c3                	mov    ebx,eax
c0020c43:	a1 50 25 03 c0       	mov    eax,ds:0xc0032550
c0020c48:	83 ec 04             	sub    esp,0x4
c0020c4b:	50                   	push   eax
c0020c4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020c50:	53                   	push   ebx
c0020c51:	e8 d8 21 ff ff       	call   c0012e2e <File::File(char const*, Process*)>
c0020c56:	83 c4 10             	add    esp,0x10
c0020c59:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020c5d:	83 ec 08             	sub    esp,0x8
c0020c60:	6a 01                	push   0x1
c0020c62:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020c66:	e8 27 22 ff ff       	call   c0012e92 <File::open(FileOpenMode)>
c0020c6b:	83 c4 10             	add    esp,0x10
c0020c6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c74:	83 c0 0c             	add    eax,0xc
c0020c77:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c79:	83 ec 0c             	sub    esp,0xc
c0020c7c:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020c80:	52                   	push   edx
c0020c81:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020c85:	52                   	push   edx
c0020c86:	6a 00                	push   0x0
c0020c88:	6a 04                	push   0x4
c0020c8a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020c8e:	ff d0                	call   eax
c0020c90:	83 c4 20             	add    esp,0x20
c0020c93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c97:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020c9d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020ca1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020ca5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020ca8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020cab:	83 ec 04             	sub    esp,0x4
c0020cae:	52                   	push   edx
c0020caf:	50                   	push   eax
c0020cb0:	68 1b d1 02 c0       	push   0xc002d11b
c0020cb5:	e8 15 1c ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0020cba:	83 c4 10             	add    esp,0x10
c0020cbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020cc1:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020cc4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020cc7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020ccb:	83 ec 0c             	sub    esp,0xc
c0020cce:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020cd2:	e8 19 22 ff ff       	call   c0012ef0 <File::close()>
c0020cd7:	83 c4 10             	add    esp,0x10
c0020cda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020cde:	ba 00 00 00 00       	mov    edx,0x0
c0020ce3:	83 c4 28             	add    esp,0x28
c0020ce6:	5b                   	pop    ebx
c0020ce7:	c3                   	ret    

c0020ce8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020ce8:	57                   	push   edi
c0020ce9:	56                   	push   esi
c0020cea:	53                   	push   ebx
c0020ceb:	81 ec 50 02 00 00    	sub    esp,0x250
c0020cf1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020cf9:	74 0a                	je     c0020d05 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020cfb:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0020d03:	75 0a                	jne    c0020d0f <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0020d05:	b8 04 00 00 00       	mov    eax,0x4
c0020d0a:	e9 29 01 00 00       	jmp    c0020e38 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020d0f:	83 ec 08             	sub    esp,0x8
c0020d12:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020d19:	50                   	push   eax
c0020d1a:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020d21:	e8 8d 53 fe ff       	call   c00060b3 <f_readdir>
c0020d26:	83 c4 10             	add    esp,0x10
c0020d29:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020d30:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020d37:	83 ec 0c             	sub    esp,0xc
c0020d3a:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020d41:	83 c0 1a             	add    eax,0x1a
c0020d44:	50                   	push   eax
c0020d45:	e8 22 fa fd ff       	call   c000076c <strlen>
c0020d4a:	83 c4 10             	add    esp,0x10
c0020d4d:	ba 00 00 00 00       	mov    edx,0x0
c0020d52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d56:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020d5a:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020d61:	0f b6 c0             	movzx  eax,al
c0020d64:	83 e0 10             	and    eax,0x10
c0020d67:	74 07                	je     c0020d70 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020d69:	b8 02 00 00 00       	mov    eax,0x2
c0020d6e:	eb 05                	jmp    c0020d75 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020d70:	b8 01 00 00 00       	mov    eax,0x1
c0020d75:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020d79:	83 ec 08             	sub    esp,0x8
c0020d7c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020d83:	83 c0 1a             	add    eax,0x1a
c0020d86:	50                   	push   eax
c0020d87:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020d8b:	83 c0 10             	add    eax,0x10
c0020d8e:	50                   	push   eax
c0020d8f:	e8 78 fa fd ff       	call   c000080c <strcpy>
c0020d94:	83 c4 10             	add    esp,0x10
c0020d97:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020d9e:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020da5:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020da9:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020db0:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020db7:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020dbe:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020dc5:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020dcc:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020dd3:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020dda:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020de1:	89 c6                	mov    esi,eax
c0020de3:	89 d7                	mov    edi,edx
c0020de5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020de7:	89 c8                	mov    eax,ecx
c0020de9:	89 fa                	mov    edx,edi
c0020deb:	89 f3                	mov    ebx,esi
c0020ded:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020df4:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020dfb:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020e02:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020e09:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020e0f:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020e16:	84 c0                	test   al,al
c0020e18:	75 07                	jne    c0020e21 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020e1a:	b8 07 00 00 00       	mov    eax,0x7
c0020e1f:	eb 17                	jmp    c0020e38 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020e21:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020e28:	85 c0                	test   eax,eax
c0020e2a:	75 07                	jne    c0020e33 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020e2c:	b8 00 00 00 00       	mov    eax,0x0
c0020e31:	eb 05                	jmp    c0020e38 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020e33:	b8 01 00 00 00       	mov    eax,0x1
c0020e38:	81 c4 50 02 00 00    	add    esp,0x250
c0020e3e:	5b                   	pop    ebx
c0020e3f:	5e                   	pop    esi
c0020e40:	5f                   	pop    edi
c0020e41:	c3                   	ret    

c0020e42 <FAT::read(void*, unsigned long, void*, int*)>:
c0020e42:	83 ec 1c             	sub    esp,0x1c
c0020e45:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020e4a:	74 07                	je     c0020e53 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020e4c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020e51:	75 07                	jne    c0020e5a <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020e53:	b8 04 00 00 00       	mov    eax,0x4
c0020e58:	eb 3d                	jmp    c0020e97 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020e5a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020e5e:	50                   	push   eax
c0020e5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020e63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020e67:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e6b:	e8 23 45 fe ff       	call   c0005393 <f_read>
c0020e70:	83 c4 10             	add    esp,0x10
c0020e73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e7b:	89 c2                	mov    edx,eax
c0020e7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020e81:	89 10                	mov    DWORD PTR [eax],edx
c0020e83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e87:	85 c0                	test   eax,eax
c0020e89:	75 07                	jne    c0020e92 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020e8b:	b8 00 00 00 00       	mov    eax,0x0
c0020e90:	eb 05                	jmp    c0020e97 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020e92:	b8 01 00 00 00       	mov    eax,0x1
c0020e97:	83 c4 1c             	add    esp,0x1c
c0020e9a:	c3                   	ret    
c0020e9b:	90                   	nop

c0020e9c <FAT::write(void*, unsigned long, void*, int*)>:
c0020e9c:	83 ec 1c             	sub    esp,0x1c
c0020e9f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ea4:	74 07                	je     c0020ead <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020ea6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020eab:	75 07                	jne    c0020eb4 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020ead:	b8 04 00 00 00       	mov    eax,0x4
c0020eb2:	eb 3d                	jmp    c0020ef1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020eb4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020eb8:	50                   	push   eax
c0020eb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020ebd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020ec1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ec5:	e8 49 47 fe ff       	call   c0005613 <f_write>
c0020eca:	83 c4 10             	add    esp,0x10
c0020ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ed1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ed5:	89 c2                	mov    edx,eax
c0020ed7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020edb:	89 10                	mov    DWORD PTR [eax],edx
c0020edd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ee1:	85 c0                	test   eax,eax
c0020ee3:	75 07                	jne    c0020eec <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020ee5:	b8 00 00 00 00       	mov    eax,0x0
c0020eea:	eb 05                	jmp    c0020ef1 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020eec:	b8 01 00 00 00       	mov    eax,0x1
c0020ef1:	83 c4 1c             	add    esp,0x1c
c0020ef4:	c3                   	ret    
c0020ef5:	90                   	nop

c0020ef6 <FAT::close(void*)>:
c0020ef6:	83 ec 1c             	sub    esp,0x1c
c0020ef9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020efe:	75 07                	jne    c0020f07 <FAT::close(void*)+0x11>
c0020f00:	b8 04 00 00 00       	mov    eax,0x4
c0020f05:	eb 36                	jmp    c0020f3d <FAT::close(void*)+0x47>
c0020f07:	83 ec 0c             	sub    esp,0xc
c0020f0a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f0e:	e8 96 4b fe ff       	call   c0005aa9 <f_close>
c0020f13:	83 c4 10             	add    esp,0x10
c0020f16:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f1a:	83 ec 0c             	sub    esp,0xc
c0020f1d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f21:	e8 76 e9 fe ff       	call   c000f89c <free>
c0020f26:	83 c4 10             	add    esp,0x10
c0020f29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f2d:	85 c0                	test   eax,eax
c0020f2f:	75 07                	jne    c0020f38 <FAT::close(void*)+0x42>
c0020f31:	b8 00 00 00 00       	mov    eax,0x0
c0020f36:	eb 05                	jmp    c0020f3d <FAT::close(void*)+0x47>
c0020f38:	b8 01 00 00 00       	mov    eax,0x1
c0020f3d:	83 c4 1c             	add    esp,0x1c
c0020f40:	c3                   	ret    
c0020f41:	90                   	nop

c0020f42 <FAT::closeDir(void*)>:
c0020f42:	83 ec 1c             	sub    esp,0x1c
c0020f45:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020f4a:	75 07                	jne    c0020f53 <FAT::closeDir(void*)+0x11>
c0020f4c:	b8 04 00 00 00       	mov    eax,0x4
c0020f51:	eb 36                	jmp    c0020f89 <FAT::closeDir(void*)+0x47>
c0020f53:	83 ec 0c             	sub    esp,0xc
c0020f56:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f5a:	e8 32 51 fe ff       	call   c0006091 <f_closedir>
c0020f5f:	83 c4 10             	add    esp,0x10
c0020f62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f66:	83 ec 0c             	sub    esp,0xc
c0020f69:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f6d:	e8 2a e9 fe ff       	call   c000f89c <free>
c0020f72:	83 c4 10             	add    esp,0x10
c0020f75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f79:	85 c0                	test   eax,eax
c0020f7b:	75 07                	jne    c0020f84 <FAT::closeDir(void*)+0x42>
c0020f7d:	b8 00 00 00 00       	mov    eax,0x0
c0020f82:	eb 05                	jmp    c0020f89 <FAT::closeDir(void*)+0x47>
c0020f84:	b8 01 00 00 00       	mov    eax,0x1
c0020f89:	83 c4 1c             	add    esp,0x1c
c0020f8c:	c3                   	ret    
c0020f8d:	90                   	nop

c0020f8e <FAT::seek(void*, unsigned long long)>:
c0020f8e:	83 ec 2c             	sub    esp,0x2c
c0020f91:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020f99:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020f9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020fa1:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020fa6:	75 07                	jne    c0020faf <FAT::seek(void*, unsigned long long)+0x21>
c0020fa8:	b8 04 00 00 00       	mov    eax,0x4
c0020fad:	eb 2f                	jmp    c0020fde <FAT::seek(void*, unsigned long long)+0x50>
c0020faf:	83 ec 04             	sub    esp,0x4
c0020fb2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020fb6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020fba:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020fbe:	e8 15 4b fe ff       	call   c0005ad8 <f_lseek>
c0020fc3:	83 c4 10             	add    esp,0x10
c0020fc6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020fca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020fce:	85 c0                	test   eax,eax
c0020fd0:	75 07                	jne    c0020fd9 <FAT::seek(void*, unsigned long long)+0x4b>
c0020fd2:	b8 00 00 00 00       	mov    eax,0x0
c0020fd7:	eb 05                	jmp    c0020fde <FAT::seek(void*, unsigned long long)+0x50>
c0020fd9:	b8 01 00 00 00       	mov    eax,0x1
c0020fde:	83 c4 2c             	add    esp,0x2c
c0020fe1:	c3                   	ret    

c0020fe2 <fatWrapperReadDisk>:
c0020fe2:	83 ec 1c             	sub    esp,0x1c
c0020fe5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020fe9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020fed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020ff1:	89 04 24             	mov    DWORD PTR [esp],eax
c0020ff4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020ff8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020ffc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021001:	8b 04 85 00 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0a00]
c0021008:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002100c:	83 ec 0c             	sub    esp,0xc
c002100f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021013:	52                   	push   edx
c0021014:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021018:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002101c:	50                   	push   eax
c002101d:	e8 2a 52 ff ff       	call   c001624c <LogicalDisk::read(unsigned long long, int, void*)>
c0021022:	83 c4 20             	add    esp,0x20
c0021025:	83 c4 1c             	add    esp,0x1c
c0021028:	c3                   	ret    

c0021029 <fatWrapperWriteDisk>:
c0021029:	83 ec 1c             	sub    esp,0x1c
c002102c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021030:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021034:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021038:	89 04 24             	mov    DWORD PTR [esp],eax
c002103b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002103f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021043:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021048:	8b 04 85 00 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0a00]
c002104f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021053:	83 ec 0c             	sub    esp,0xc
c0021056:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002105a:	52                   	push   edx
c002105b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002105f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021063:	50                   	push   eax
c0021064:	e8 4f 52 ff ff       	call   c00162b8 <LogicalDisk::write(unsigned long long, int, void*)>
c0021069:	83 c4 20             	add    esp,0x20
c002106c:	83 c4 1c             	add    esp,0x1c
c002106f:	c3                   	ret    

c0021070 <fatWrapperIoctl>:
c0021070:	53                   	push   ebx
c0021071:	83 ec 28             	sub    esp,0x28
c0021074:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021078:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002107c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021080:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021084:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0021089:	75 31                	jne    c00210bc <fatWrapperIoctl+0x4c>
c002108b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002108f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021093:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021098:	8b 04 85 00 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0a00]
c002109f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00210a5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00210ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00210af:	66 89 02             	mov    WORD PTR [edx],ax
c00210b2:	b8 00 00 00 00       	mov    eax,0x0
c00210b7:	e9 b2 00 00 00       	jmp    c002116e <fatWrapperIoctl+0xfe>
c00210bc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00210c1:	75 6a                	jne    c002112d <fatWrapperIoctl+0xbd>
c00210c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00210c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00210cb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00210d0:	8b 04 85 00 f6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0a00]
c00210d7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00210dd:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00210e3:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00210e9:	89 c8                	mov    eax,ecx
c00210eb:	89 da                	mov    edx,ebx
c00210ed:	0f a4 c2 0a          	shld   edx,eax,0xa
c00210f1:	c1 e0 0a             	shl    eax,0xa
c00210f4:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00210f9:	8b 0c 8d 00 f6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0a00]
c0021100:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0021106:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c002110c:	89 cb                	mov    ebx,ecx
c002110e:	c1 fb 1f             	sar    ebx,0x1f
c0021111:	53                   	push   ebx
c0021112:	51                   	push   ecx
c0021113:	52                   	push   edx
c0021114:	50                   	push   eax
c0021115:	e8 da 60 00 00       	call   c00271f4 <__udivdi3>
c002111a:	83 c4 10             	add    esp,0x10
c002111d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021121:	89 01                	mov    DWORD PTR [ecx],eax
c0021123:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021126:	b8 00 00 00 00       	mov    eax,0x0
c002112b:	eb 41                	jmp    c002116e <fatWrapperIoctl+0xfe>
c002112d:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0021132:	75 07                	jne    c002113b <fatWrapperIoctl+0xcb>
c0021134:	b8 00 00 00 00       	mov    eax,0x0
c0021139:	eb 33                	jmp    c002116e <fatWrapperIoctl+0xfe>
c002113b:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0021140:	75 19                	jne    c002115b <fatWrapperIoctl+0xeb>
c0021142:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021146:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002114a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002114e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021154:	b8 00 00 00 00       	mov    eax,0x0
c0021159:	eb 13                	jmp    c002116e <fatWrapperIoctl+0xfe>
c002115b:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0021160:	75 07                	jne    c0021169 <fatWrapperIoctl+0xf9>
c0021162:	b8 00 00 00 00       	mov    eax,0x0
c0021167:	eb 05                	jmp    c002116e <fatWrapperIoctl+0xfe>
c0021169:	b8 04 00 00 00       	mov    eax,0x4
c002116e:	83 c4 28             	add    esp,0x28
c0021171:	5b                   	pop    ebx
c0021172:	c3                   	ret    
c0021173:	90                   	nop

c0021174 <FAT::FAT()>:
c0021174:	83 ec 1c             	sub    esp,0x1c
c0021177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002117b:	83 ec 0c             	sub    esp,0xc
c002117e:	50                   	push   eax
c002117f:	e8 56 1a ff ff       	call   c0012bda <Filesystem::Filesystem()>
c0021184:	83 c4 10             	add    esp,0x10
c0021187:	ba 58 d1 02 c0       	mov    edx,0xc002d158
c002118c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021190:	89 10                	mov    DWORD PTR [eax],edx
c0021192:	c7 05 20 26 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032620,0x0
c002119c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00211a4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00211a9:	7f 15                	jg     c00211c0 <FAT::FAT()+0x4c>
c00211ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00211af:	c7 04 85 40 26 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcd9c0],0xffffffff
c00211ba:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00211be:	eb e4                	jmp    c00211a4 <FAT::FAT()+0x30>
c00211c0:	90                   	nop
c00211c1:	83 c4 1c             	add    esp,0x1c
c00211c4:	c3                   	ret    
c00211c5:	90                   	nop

c00211c6 <FAT::fixFilepath(char*)>:
c00211c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211ca:	8a 00                	mov    al,BYTE PTR [eax]
c00211cc:	3c 40                	cmp    al,0x40
c00211ce:	7e 2c                	jle    c00211fc <FAT::fixFilepath(char*)+0x36>
c00211d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211d4:	8a 00                	mov    al,BYTE PTR [eax]
c00211d6:	83 e8 41             	sub    eax,0x41
c00211d9:	88 c2                	mov    dl,al
c00211db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211df:	88 10                	mov    BYTE PTR [eax],dl
c00211e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211e5:	8a 00                	mov    al,BYTE PTR [eax]
c00211e7:	0f be c0             	movsx  eax,al
c00211ea:	8b 04 85 40 26 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd9c0]
c00211f1:	83 c0 30             	add    eax,0x30
c00211f4:	88 c2                	mov    dl,al
c00211f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211fa:	88 10                	mov    BYTE PTR [eax],dl
c00211fc:	90                   	nop
c00211fd:	c3                   	ret    

c00211fe <FAT::open(char const*, void**, FileOpenMode)>:
c00211fe:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021204:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002120c:	74 0a                	je     c0021218 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c002120e:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021216:	75 0a                	jne    c0021222 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0021218:	b8 04 00 00 00       	mov    eax,0x4
c002121d:	e9 fd 00 00 00       	jmp    c002131f <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021222:	83 ec 08             	sub    esp,0x8
c0021225:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002122c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021230:	50                   	push   eax
c0021231:	e8 d6 f5 fd ff       	call   c000080c <strcpy>
c0021236:	83 c4 10             	add    esp,0x10
c0021239:	83 ec 08             	sub    esp,0x8
c002123c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021240:	50                   	push   eax
c0021241:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021248:	e8 79 ff ff ff       	call   c00211c6 <FAT::fixFilepath(char*)>
c002124d:	83 c4 10             	add    esp,0x10
c0021250:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021258:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002125f:	83 e0 01             	and    eax,0x1
c0021262:	74 08                	je     c002126c <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021264:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c002126c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021273:	83 e0 04             	and    eax,0x4
c0021276:	74 10                	je     c0021288 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021278:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021280:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021288:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002128f:	83 e0 02             	and    eax,0x2
c0021292:	74 08                	je     c002129c <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021294:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002129c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00212a3:	83 e0 08             	and    eax,0x8
c00212a6:	74 08                	je     c00212b0 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00212a8:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00212b0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00212b7:	83 e0 10             	and    eax,0x10
c00212ba:	74 08                	je     c00212c4 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00212bc:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00212c4:	83 ec 0c             	sub    esp,0xc
c00212c7:	68 50 02 00 00       	push   0x250
c00212cc:	e8 bb e5 fe ff       	call   c000f88c <malloc>
c00212d1:	83 c4 10             	add    esp,0x10
c00212d4:	89 c2                	mov    edx,eax
c00212d6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00212dd:	89 10                	mov    DWORD PTR [eax],edx
c00212df:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00212e7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00212ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00212f0:	83 ec 04             	sub    esp,0x4
c00212f3:	52                   	push   edx
c00212f4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00212f8:	52                   	push   edx
c00212f9:	50                   	push   eax
c00212fa:	e8 58 3c fe ff       	call   c0004f57 <f_open>
c00212ff:	83 c4 10             	add    esp,0x10
c0021302:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021309:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021311:	74 07                	je     c002131a <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021313:	b8 01 00 00 00       	mov    eax,0x1
c0021318:	eb 05                	jmp    c002131f <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002131a:	b8 00 00 00 00       	mov    eax,0x0
c002131f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021325:	c3                   	ret    

c0021326 <FAT::openDir(char const*, void**)>:
c0021326:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002132c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021334:	74 0a                	je     c0021340 <FAT::openDir(char const*, void**)+0x1a>
c0021336:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002133e:	75 07                	jne    c0021347 <FAT::openDir(char const*, void**)+0x21>
c0021340:	b8 04 00 00 00       	mov    eax,0x4
c0021345:	eb 7d                	jmp    c00213c4 <FAT::openDir(char const*, void**)+0x9e>
c0021347:	83 ec 08             	sub    esp,0x8
c002134a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021351:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021355:	50                   	push   eax
c0021356:	e8 b1 f4 fd ff       	call   c000080c <strcpy>
c002135b:	83 c4 10             	add    esp,0x10
c002135e:	83 ec 08             	sub    esp,0x8
c0021361:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021365:	50                   	push   eax
c0021366:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002136d:	e8 54 fe ff ff       	call   c00211c6 <FAT::fixFilepath(char*)>
c0021372:	83 c4 10             	add    esp,0x10
c0021375:	83 ec 0c             	sub    esp,0xc
c0021378:	6a 4c                	push   0x4c
c002137a:	e8 0d e5 fe ff       	call   c000f88c <malloc>
c002137f:	83 c4 10             	add    esp,0x10
c0021382:	89 c2                	mov    edx,eax
c0021384:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002138b:	89 10                	mov    DWORD PTR [eax],edx
c002138d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021394:	8b 00                	mov    eax,DWORD PTR [eax]
c0021396:	83 ec 08             	sub    esp,0x8
c0021399:	8d 54 24 14          	lea    edx,[esp+0x14]
c002139d:	52                   	push   edx
c002139e:	50                   	push   eax
c002139f:	e8 eb 4b fe ff       	call   c0005f8f <f_opendir>
c00213a4:	83 c4 10             	add    esp,0x10
c00213a7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00213ae:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00213b6:	74 07                	je     c00213bf <FAT::openDir(char const*, void**)+0x99>
c00213b8:	b8 01 00 00 00       	mov    eax,0x1
c00213bd:	eb 05                	jmp    c00213c4 <FAT::openDir(char const*, void**)+0x9e>
c00213bf:	b8 00 00 00 00       	mov    eax,0x0
c00213c4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00213ca:	c3                   	ret    
c00213cb:	90                   	nop

c00213cc <FAT::stat(char const*, unsigned long long*, bool*)>:
c00213cc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00213d2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00213da:	75 0a                	jne    c00213e6 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00213dc:	b8 04 00 00 00       	mov    eax,0x4
c00213e1:	e9 c9 00 00 00       	jmp    c00214af <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00213e6:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00213ee:	75 0a                	jne    c00213fa <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00213f0:	b8 04 00 00 00       	mov    eax,0x4
c00213f5:	e9 b5 00 00 00       	jmp    c00214af <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00213fa:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021402:	75 0a                	jne    c002140e <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021404:	b8 04 00 00 00       	mov    eax,0x4
c0021409:	e9 a1 00 00 00       	jmp    c00214af <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002140e:	83 ec 08             	sub    esp,0x8
c0021411:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021418:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c002141f:	50                   	push   eax
c0021420:	e8 e7 f3 fd ff       	call   c000080c <strcpy>
c0021425:	83 c4 10             	add    esp,0x10
c0021428:	83 ec 08             	sub    esp,0x8
c002142b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021432:	50                   	push   eax
c0021433:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002143a:	e8 87 fd ff ff       	call   c00211c6 <FAT::fixFilepath(char*)>
c002143f:	83 c4 10             	add    esp,0x10
c0021442:	83 ec 08             	sub    esp,0x8
c0021445:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021449:	50                   	push   eax
c002144a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021451:	50                   	push   eax
c0021452:	e8 f7 4c fe ff       	call   c000614e <f_stat>
c0021457:	83 c4 10             	add    esp,0x10
c002145a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021461:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021468:	85 c0                	test   eax,eax
c002146a:	74 07                	je     c0021473 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c002146c:	83 f8 04             	cmp    eax,0x4
c002146f:	74 32                	je     c00214a3 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021471:	eb 37                	jmp    c00214aa <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021473:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021477:	0f b6 c0             	movzx  eax,al
c002147a:	83 e0 10             	and    eax,0x10
c002147d:	0f 95 c2             	setne  dl
c0021480:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021487:	88 10                	mov    BYTE PTR [eax],dl
c0021489:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002148c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021490:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021497:	89 01                	mov    DWORD PTR [ecx],eax
c0021499:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002149c:	b8 00 00 00 00       	mov    eax,0x0
c00214a1:	eb 0c                	jmp    c00214af <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00214a3:	b8 02 00 00 00       	mov    eax,0x2
c00214a8:	eb 05                	jmp    c00214af <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00214aa:	b8 01 00 00 00       	mov    eax,0x1
c00214af:	81 c4 2c 02 00 00    	add    esp,0x22c
c00214b5:	c3                   	ret    

c00214b6 <FAT::unlink(char const*)>:
c00214b6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00214bc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00214c4:	75 07                	jne    c00214cd <FAT::unlink(char const*)+0x17>
c00214c6:	b8 04 00 00 00       	mov    eax,0x4
c00214cb:	eb 5c                	jmp    c0021529 <FAT::unlink(char const*)+0x73>
c00214cd:	83 ec 08             	sub    esp,0x8
c00214d0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00214d7:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214db:	50                   	push   eax
c00214dc:	e8 2b f3 fd ff       	call   c000080c <strcpy>
c00214e1:	83 c4 10             	add    esp,0x10
c00214e4:	83 ec 08             	sub    esp,0x8
c00214e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00214eb:	50                   	push   eax
c00214ec:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00214f3:	e8 ce fc ff ff       	call   c00211c6 <FAT::fixFilepath(char*)>
c00214f8:	83 c4 10             	add    esp,0x10
c00214fb:	83 ec 0c             	sub    esp,0xc
c00214fe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021502:	50                   	push   eax
c0021503:	e8 98 4f fe ff       	call   c00064a0 <f_unlink>
c0021508:	83 c4 10             	add    esp,0x10
c002150b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021512:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021519:	85 c0                	test   eax,eax
c002151b:	75 07                	jne    c0021524 <FAT::unlink(char const*)+0x6e>
c002151d:	b8 00 00 00 00       	mov    eax,0x0
c0021522:	eb 05                	jmp    c0021529 <FAT::unlink(char const*)+0x73>
c0021524:	b8 01 00 00 00       	mov    eax,0x1
c0021529:	81 c4 1c 01 00 00    	add    esp,0x11c
c002152f:	c3                   	ret    

c0021530 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021530:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021536:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c002153d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021544:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021548:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002154c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021554:	75 0a                	jne    c0021560 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021556:	b8 04 00 00 00       	mov    eax,0x4
c002155b:	e9 1c 01 00 00       	jmp    c002167c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021560:	83 ec 08             	sub    esp,0x8
c0021563:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c002156a:	8d 44 24 24          	lea    eax,[esp+0x24]
c002156e:	50                   	push   eax
c002156f:	e8 98 f2 fd ff       	call   c000080c <strcpy>
c0021574:	83 c4 10             	add    esp,0x10
c0021577:	83 ec 08             	sub    esp,0x8
c002157a:	8d 44 24 20          	lea    eax,[esp+0x20]
c002157e:	50                   	push   eax
c002157f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021586:	e8 3b fc ff ff       	call   c00211c6 <FAT::fixFilepath(char*)>
c002158b:	83 c4 10             	add    esp,0x10
c002158e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021596:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c002159e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00215a3:	83 e0 01             	and    eax,0x1
c00215a6:	74 08                	je     c00215b0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c00215a8:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00215b0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00215b5:	83 e0 02             	and    eax,0x2
c00215b8:	74 08                	je     c00215c2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c00215ba:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c00215c2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00215c7:	83 e0 04             	and    eax,0x4
c00215ca:	74 08                	je     c00215d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c00215cc:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00215d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00215d9:	83 e0 08             	and    eax,0x8
c00215dc:	74 08                	je     c00215e6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c00215de:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00215e6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00215eb:	83 e0 01             	and    eax,0x1
c00215ee:	74 08                	je     c00215f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c00215f0:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00215f8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00215fd:	83 e0 02             	and    eax,0x2
c0021600:	74 08                	je     c002160a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021602:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002160a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002160f:	83 e0 04             	and    eax,0x4
c0021612:	74 08                	je     c002161c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021614:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c002161c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021621:	83 e0 08             	and    eax,0x8
c0021624:	74 08                	je     c002162e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021626:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c002162e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021635:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c002163c:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021644:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002164c:	83 ec 04             	sub    esp,0x4
c002164f:	52                   	push   edx
c0021650:	50                   	push   eax
c0021651:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021655:	50                   	push   eax
c0021656:	e8 e7 54 fe ff       	call   c0006b42 <f_chmod>
c002165b:	83 c4 10             	add    esp,0x10
c002165e:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021665:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002166c:	85 c0                	test   eax,eax
c002166e:	75 07                	jne    c0021677 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021670:	b8 00 00 00 00       	mov    eax,0x0
c0021675:	eb 05                	jmp    c002167c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021677:	b8 01 00 00 00       	mov    eax,0x1
c002167c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021682:	c3                   	ret    
c0021683:	90                   	nop

c0021684 <FAT::rename(char const*, char const*)>:
c0021684:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002168a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021692:	74 0a                	je     c002169e <FAT::rename(char const*, char const*)+0x1a>
c0021694:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c002169c:	75 0a                	jne    c00216a8 <FAT::rename(char const*, char const*)+0x24>
c002169e:	b8 04 00 00 00       	mov    eax,0x4
c00216a3:	e9 98 00 00 00       	jmp    c0021740 <FAT::rename(char const*, char const*)+0xbc>
c00216a8:	83 ec 08             	sub    esp,0x8
c00216ab:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00216b2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00216b9:	50                   	push   eax
c00216ba:	e8 4d f1 fd ff       	call   c000080c <strcpy>
c00216bf:	83 c4 10             	add    esp,0x10
c00216c2:	83 ec 08             	sub    esp,0x8
c00216c5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00216cc:	50                   	push   eax
c00216cd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00216d4:	e8 ed fa ff ff       	call   c00211c6 <FAT::fixFilepath(char*)>
c00216d9:	83 c4 10             	add    esp,0x10
c00216dc:	83 ec 08             	sub    esp,0x8
c00216df:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00216e6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00216ea:	50                   	push   eax
c00216eb:	e8 1c f1 fd ff       	call   c000080c <strcpy>
c00216f0:	83 c4 10             	add    esp,0x10
c00216f3:	83 ec 08             	sub    esp,0x8
c00216f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00216fa:	50                   	push   eax
c00216fb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021702:	e8 bf fa ff ff       	call   c00211c6 <FAT::fixFilepath(char*)>
c0021707:	83 c4 10             	add    esp,0x10
c002170a:	83 ec 08             	sub    esp,0x8
c002170d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021711:	50                   	push   eax
c0021712:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021719:	50                   	push   eax
c002171a:	e8 30 51 fe ff       	call   c000684f <f_rename>
c002171f:	83 c4 10             	add    esp,0x10
c0021722:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021729:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021730:	85 c0                	test   eax,eax
c0021732:	75 07                	jne    c002173b <FAT::rename(char const*, char const*)+0xb7>
c0021734:	b8 00 00 00 00       	mov    eax,0x0
c0021739:	eb 05                	jmp    c0021740 <FAT::rename(char const*, char const*)+0xbc>
c002173b:	b8 01 00 00 00       	mov    eax,0x1
c0021740:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021746:	c3                   	ret    
c0021747:	90                   	nop

c0021748 <FAT::mkdir(char const*)>:
c0021748:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002174e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021756:	75 07                	jne    c002175f <FAT::mkdir(char const*)+0x17>
c0021758:	b8 04 00 00 00       	mov    eax,0x4
c002175d:	eb 5c                	jmp    c00217bb <FAT::mkdir(char const*)+0x73>
c002175f:	83 ec 08             	sub    esp,0x8
c0021762:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021769:	8d 44 24 18          	lea    eax,[esp+0x18]
c002176d:	50                   	push   eax
c002176e:	e8 99 f0 fd ff       	call   c000080c <strcpy>
c0021773:	83 c4 10             	add    esp,0x10
c0021776:	83 ec 08             	sub    esp,0x8
c0021779:	8d 44 24 14          	lea    eax,[esp+0x14]
c002177d:	50                   	push   eax
c002177e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021785:	e8 3c fa ff ff       	call   c00211c6 <FAT::fixFilepath(char*)>
c002178a:	83 c4 10             	add    esp,0x10
c002178d:	83 ec 0c             	sub    esp,0xc
c0021790:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021794:	50                   	push   eax
c0021795:	e8 89 4e fe ff       	call   c0006623 <f_mkdir>
c002179a:	83 c4 10             	add    esp,0x10
c002179d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00217a4:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00217ab:	85 c0                	test   eax,eax
c00217ad:	75 07                	jne    c00217b6 <FAT::mkdir(char const*)+0x6e>
c00217af:	b8 00 00 00 00       	mov    eax,0x0
c00217b4:	eb 05                	jmp    c00217bb <FAT::mkdir(char const*)+0x73>
c00217b6:	b8 01 00 00 00       	mov    eax,0x1
c00217bb:	81 c4 1c 01 00 00    	add    esp,0x11c
c00217c1:	c3                   	ret    

c00217c2 <FAT::exists(char const*)>:
c00217c2:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00217c8:	83 ec 08             	sub    esp,0x8
c00217cb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00217d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00217d6:	50                   	push   eax
c00217d7:	e8 30 f0 fd ff       	call   c000080c <strcpy>
c00217dc:	83 c4 10             	add    esp,0x10
c00217df:	83 ec 08             	sub    esp,0x8
c00217e2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00217e6:	50                   	push   eax
c00217e7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00217ee:	e8 d3 f9 ff ff       	call   c00211c6 <FAT::fixFilepath(char*)>
c00217f3:	83 c4 10             	add    esp,0x10
c00217f6:	83 ec 08             	sub    esp,0x8
c00217f9:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021800:	50                   	push   eax
c0021801:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021805:	50                   	push   eax
c0021806:	e8 43 49 fe ff       	call   c000614e <f_stat>
c002180b:	83 c4 10             	add    esp,0x10
c002180e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021815:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002181c:	85 c0                	test   eax,eax
c002181e:	75 04                	jne    c0021824 <FAT::exists(char const*)+0x62>
c0021820:	b0 01                	mov    al,0x1
c0021822:	eb 02                	jmp    c0021826 <FAT::exists(char const*)+0x64>
c0021824:	b0 00                	mov    al,0x0
c0021826:	81 c4 2c 02 00 00    	add    esp,0x22c
c002182c:	c3                   	ret    
c002182d:	90                   	nop

c002182e <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c002182e:	b8 08 00 00 00       	mov    eax,0x8
c0021833:	c3                   	ret    

c0021834 <ISO9660::seek(void*, unsigned long long)>:
c0021834:	53                   	push   ebx
c0021835:	b8 04 00 00 00       	mov    eax,0x4
c002183a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002183e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021842:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021846:	85 d2                	test   edx,edx
c0021848:	74 17                	je     c0021861 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002184a:	89 c8                	mov    eax,ecx
c002184c:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c002184f:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021852:	b8 01 00 00 00       	mov    eax,0x1
c0021857:	73 08                	jae    c0021861 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021859:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002185c:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002185f:	31 c0                	xor    eax,eax
c0021861:	5b                   	pop    ebx
c0021862:	c3                   	ret    
c0021863:	90                   	nop

c0021864 <ISO9660::tell(void*, unsigned long long*)>:
c0021864:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021868:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002186c:	85 d2                	test   edx,edx
c002186e:	74 12                	je     c0021882 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021870:	85 c0                	test   eax,eax
c0021872:	74 0e                	je     c0021882 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021874:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021877:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002187a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002187d:	89 10                	mov    DWORD PTR [eax],edx
c002187f:	31 c0                	xor    eax,eax
c0021881:	c3                   	ret    
c0021882:	b8 04 00 00 00       	mov    eax,0x4
c0021887:	c3                   	ret    

c0021888 <ISO9660::getName()>:
c0021888:	b8 b8 d1 02 c0       	mov    eax,0xc002d1b8
c002188d:	c3                   	ret    

c002188e <ISO9660::stat(void*, unsigned long long*)>:
c002188e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021892:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021896:	85 d2                	test   edx,edx
c0021898:	74 12                	je     c00218ac <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002189a:	85 c0                	test   eax,eax
c002189c:	74 0e                	je     c00218ac <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002189e:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00218a1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00218a4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00218a7:	89 10                	mov    DWORD PTR [eax],edx
c00218a9:	31 c0                	xor    eax,eax
c00218ab:	c3                   	ret    
c00218ac:	b8 04 00 00 00       	mov    eax,0x4
c00218b1:	c3                   	ret    

c00218b2 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00218b2:	b8 01 00 00 00       	mov    eax,0x1
c00218b7:	c3                   	ret    

c00218b8 <ISO9660::unlink(char const*)>:
c00218b8:	b8 01 00 00 00       	mov    eax,0x1
c00218bd:	c3                   	ret    

c00218be <ISO9660::write(void*, unsigned long, void*, int*)>:
c00218be:	b8 01 00 00 00       	mov    eax,0x1
c00218c3:	c3                   	ret    

c00218c4 <ISO9660::rename(char const*, char const*)>:
c00218c4:	b8 01 00 00 00       	mov    eax,0x1
c00218c9:	c3                   	ret    

c00218ca <ISO9660::mkdir(char const*)>:
c00218ca:	b8 01 00 00 00       	mov    eax,0x1
c00218cf:	c3                   	ret    

c00218d0 <ISO9660::close(void*)>:
c00218d0:	83 ec 0c             	sub    esp,0xc
c00218d3:	b8 04 00 00 00       	mov    eax,0x4
c00218d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00218dc:	85 d2                	test   edx,edx
c00218de:	74 0e                	je     c00218ee <ISO9660::close(void*)+0x1e>
c00218e0:	83 ec 0c             	sub    esp,0xc
c00218e3:	52                   	push   edx
c00218e4:	e8 b3 df fe ff       	call   c000f89c <free>
c00218e9:	83 c4 10             	add    esp,0x10
c00218ec:	31 c0                	xor    eax,eax
c00218ee:	83 c4 0c             	add    esp,0xc
c00218f1:	c3                   	ret    

c00218f2 <ISO9660::closeDir(void*)>:
c00218f2:	83 ec 0c             	sub    esp,0xc
c00218f5:	b8 04 00 00 00       	mov    eax,0x4
c00218fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00218fe:	85 d2                	test   edx,edx
c0021900:	74 0e                	je     c0021910 <ISO9660::closeDir(void*)+0x1e>
c0021902:	83 ec 0c             	sub    esp,0xc
c0021905:	52                   	push   edx
c0021906:	e8 91 df fe ff       	call   c000f89c <free>
c002190b:	83 c4 10             	add    esp,0x10
c002190e:	31 c0                	xor    eax,eax
c0021910:	83 c4 0c             	add    esp,0xc
c0021913:	c3                   	ret    

c0021914 <ISO9660::~ISO9660()>:
c0021914:	83 ec 0c             	sub    esp,0xc
c0021917:	ba 1c d2 02 c0       	mov    edx,0xc002d21c
c002191c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021920:	89 10                	mov    DWORD PTR [eax],edx
c0021922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021926:	83 ec 0c             	sub    esp,0xc
c0021929:	50                   	push   eax
c002192a:	e8 cf 12 ff ff       	call   c0012bfe <Filesystem::~Filesystem()>
c002192f:	83 c4 10             	add    esp,0x10
c0021932:	90                   	nop
c0021933:	83 c4 0c             	add    esp,0xc
c0021936:	c3                   	ret    
c0021937:	90                   	nop

c0021938 <ISO9660::~ISO9660()>:
c0021938:	83 ec 0c             	sub    esp,0xc
c002193b:	83 ec 0c             	sub    esp,0xc
c002193e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021942:	e8 cd ff ff ff       	call   c0021914 <ISO9660::~ISO9660()>
c0021947:	83 c4 10             	add    esp,0x10
c002194a:	83 ec 08             	sub    esp,0x8
c002194d:	6a 08                	push   0x8
c002194f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021953:	e8 97 0e ff ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0021958:	83 c4 10             	add    esp,0x10
c002195b:	83 c4 0c             	add    esp,0xc
c002195e:	c3                   	ret    

c002195f <__memmem(unsigned char*, int, unsigned char*, int)>:
c002195f:	55                   	push   ebp
c0021960:	31 c9                	xor    ecx,ecx
c0021962:	57                   	push   edi
c0021963:	56                   	push   esi
c0021964:	53                   	push   ebx
c0021965:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021969:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002196d:	89 eb                	mov    ebx,ebp
c002196f:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021973:	39 ce                	cmp    esi,ecx
c0021975:	7e 17                	jle    c002198e <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021977:	31 d2                	xor    edx,edx
c0021979:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002197d:	7d 13                	jge    c0021992 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002197f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021983:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021986:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021989:	75 0d                	jne    c0021998 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002198b:	42                   	inc    edx
c002198c:	eb eb                	jmp    c0021979 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c002198e:	31 c0                	xor    eax,eax
c0021990:	eb 0a                	jmp    c002199c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021992:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021996:	eb 04                	jmp    c002199c <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021998:	41                   	inc    ecx
c0021999:	43                   	inc    ebx
c002199a:	eb d7                	jmp    c0021973 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c002199c:	5b                   	pop    ebx
c002199d:	5e                   	pop    esi
c002199e:	5f                   	pop    edi
c002199f:	5d                   	pop    ebp
c00219a0:	c3                   	ret    

c00219a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00219a1:	57                   	push   edi
c00219a2:	56                   	push   esi
c00219a3:	53                   	push   ebx
c00219a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00219ac:	39 0d 20 27 03 c0    	cmp    DWORD PTR ds:0xc0032720,ecx
c00219b2:	75 08                	jne    c00219bc <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c00219b4:	38 05 94 e5 02 c0    	cmp    BYTE PTR ds:0xc002e594,al
c00219ba:	74 2b                	je     c00219e7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c00219bc:	83 ec 0c             	sub    esp,0xc
c00219bf:	a2 94 e5 02 c0       	mov    ds:0xc002e594,al
c00219c4:	68 40 27 03 c0       	push   0xc0032740
c00219c9:	0f be c0             	movsx  eax,al
c00219cc:	6a 01                	push   0x1
c00219ce:	89 0d 20 27 03 c0    	mov    DWORD PTR ds:0xc0032720,ecx
c00219d4:	31 db                	xor    ebx,ebx
c00219d6:	53                   	push   ebx
c00219d7:	51                   	push   ecx
c00219d8:	ff 34 85 fc f4 02 c0 	push   DWORD PTR [eax*4-0x3ffd0b04]
c00219df:	e8 68 48 ff ff       	call   c001624c <LogicalDisk::read(unsigned long long, int, void*)>
c00219e4:	83 c4 20             	add    esp,0x20
c00219e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00219eb:	be 40 27 03 c0       	mov    esi,0xc0032740
c00219f0:	b9 00 08 00 00       	mov    ecx,0x800
c00219f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00219f7:	5b                   	pop    ebx
c00219f8:	5e                   	pop    esi
c00219f9:	5f                   	pop    edi
c00219fa:	c3                   	ret    
c00219fb:	90                   	nop

c00219fc <ISO9660::tryMount(LogicalDisk*, int)>:
c00219fc:	81 ec 10 08 00 00    	sub    esp,0x810
c0021a02:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021a09:	83 c0 41             	add    eax,0x41
c0021a0c:	0f be c0             	movsx  eax,al
c0021a0f:	50                   	push   eax
c0021a10:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021a14:	50                   	push   eax
c0021a15:	6a 10                	push   0x10
c0021a17:	e8 85 ff ff ff       	call   c00219a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a1c:	83 c4 10             	add    esp,0x10
c0021a1f:	31 c0                	xor    eax,eax
c0021a21:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021a26:	75 1d                	jne    c0021a45 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a28:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021a2d:	75 16                	jne    c0021a45 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a2f:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021a34:	75 0f                	jne    c0021a45 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a36:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021a3b:	75 08                	jne    c0021a45 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021a3d:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021a42:	0f 94 c0             	sete   al
c0021a45:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021a4b:	c3                   	ret    

c0021a4c <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021a4c:	55                   	push   ebp
c0021a4d:	57                   	push   edi
c0021a4e:	56                   	push   esi
c0021a4f:	53                   	push   ebx
c0021a50:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021a56:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021a5d:	85 ed                	test   ebp,ebp
c0021a5f:	0f 84 da 01 00 00    	je     c0021c3f <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021a65:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021a6d:	0f 84 cc 01 00 00    	je     c0021c3f <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021a73:	b8 01 00 00 00       	mov    eax,0x1
c0021a78:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021a7c:	0f 85 c2 01 00 00    	jne    c0021c44 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021a82:	31 d2                	xor    edx,edx
c0021a84:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021a8b:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021a8e:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021a91:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021a94:	89 04 24             	mov    DWORD PTR [esp],eax
c0021a97:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021a9b:	01 c8                	add    eax,ecx
c0021a9d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021aa0:	11 da                	adc    edx,ebx
c0021aa2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021aa6:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021aaa:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021aae:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021ab2:	19 d7                	sbb    edi,edx
c0021ab4:	72 11                	jb     c0021ac7 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021ab6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021ab9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021abd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021ac1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021ac5:	eb 0c                	jmp    c0021ad3 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021ac7:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021acb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021acf:	29 ce                	sub    esi,ecx
c0021ad1:	19 df                	sbb    edi,ebx
c0021ad3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021ad6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021ad9:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021add:	c1 e0 0b             	shl    eax,0xb
c0021ae0:	01 c8                	add    eax,ecx
c0021ae2:	11 da                	adc    edx,ebx
c0021ae4:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ae7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021aeb:	51                   	push   ecx
c0021aec:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021af0:	50                   	push   eax
c0021af1:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021af5:	53                   	push   ebx
c0021af6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021afa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021afe:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021b02:	50                   	push   eax
c0021b03:	e8 99 fe ff ff       	call   c00219a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b08:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021b0b:	b8 00 08 00 00       	mov    eax,0x800
c0021b10:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021b16:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0021b1a:	29 d0                	sub    eax,edx
c0021b1c:	83 c4 10             	add    esp,0x10
c0021b1f:	89 f9                	mov    ecx,edi
c0021b21:	39 c6                	cmp    esi,eax
c0021b23:	83 d9 00             	sbb    ecx,0x0
c0021b26:	7d 1b                	jge    c0021b43 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021b28:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021b2d:	75 12                	jne    c0021b41 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0021b2f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021b36:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021b3c:	e9 fa 00 00 00       	jmp    c0021c3b <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021b41:	89 f0                	mov    eax,esi
c0021b43:	01 d3                	add    ebx,edx
c0021b45:	31 d2                	xor    edx,edx
c0021b47:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021b4b:	39 c2                	cmp    edx,eax
c0021b4d:	7d 14                	jge    c0021b63 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021b4f:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021b56:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021b5a:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021b5d:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021b60:	42                   	inc    edx
c0021b61:	eb e8                	jmp    c0021b4b <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021b63:	89 c2                	mov    edx,eax
c0021b65:	85 c0                	test   eax,eax
c0021b67:	79 02                	jns    c0021b6b <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021b69:	31 d2                	xor    edx,edx
c0021b6b:	01 c2                	add    edx,eax
c0021b6d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021b70:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021b77:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021b7b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021b7f:	99                   	cdq    
c0021b80:	01 c1                	add    ecx,eax
c0021b82:	11 d3                	adc    ebx,edx
c0021b84:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021b88:	29 c6                	sub    esi,eax
c0021b8a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021b8e:	19 d7                	sbb    edi,edx
c0021b90:	89 34 24             	mov    DWORD PTR [esp],esi
c0021b93:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021b97:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021b9c:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021b9f:	b8 00 00 00 00       	mov    eax,0x0
c0021ba4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021ba8:	7d 43                	jge    c0021bed <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021baa:	52                   	push   edx
c0021bab:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021baf:	50                   	push   eax
c0021bb0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021bb4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021bb8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021bbc:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021bc0:	50                   	push   eax
c0021bc1:	e8 db fd ff ff       	call   c00219a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021bc6:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021bce:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021bd3:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021bdb:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021be3:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021be8:	83 c4 10             	add    esp,0x10
c0021beb:	eb aa                	jmp    c0021b97 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0021bed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bf1:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021bf4:	74 2a                	je     c0021c20 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021bf6:	50                   	push   eax
c0021bf7:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021bfb:	50                   	push   eax
c0021bfc:	8d 74 24 28          	lea    esi,[esp+0x28]
c0021c00:	56                   	push   esi
c0021c01:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021c05:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021c09:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021c0d:	51                   	push   ecx
c0021c0e:	e8 8e fd ff ff       	call   c00219a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c13:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021c17:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021c1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021c1d:	83 c4 10             	add    esp,0x10
c0021c20:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021c27:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021c2b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021c2f:	89 18                	mov    DWORD PTR [eax],ebx
c0021c31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021c35:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021c38:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021c3b:	31 c0                	xor    eax,eax
c0021c3d:	eb 05                	jmp    c0021c44 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021c3f:	b8 04 00 00 00       	mov    eax,0x4
c0021c44:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021c4a:	5b                   	pop    ebx
c0021c4b:	5e                   	pop    esi
c0021c4c:	5f                   	pop    edi
c0021c4d:	5d                   	pop    ebp
c0021c4e:	c3                   	ret    
c0021c4f:	90                   	nop

c0021c50 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021c50:	55                   	push   ebp
c0021c51:	57                   	push   edi
c0021c52:	56                   	push   esi
c0021c53:	53                   	push   ebx
c0021c54:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021c5a:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021c61:	85 ed                	test   ebp,ebp
c0021c63:	0f 84 51 02 00 00    	je     c0021eba <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021c69:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021c71:	0f 84 43 02 00 00    	je     c0021eba <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021c77:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021c7a:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021c7d:	75 0a                	jne    c0021c89 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021c7f:	b8 07 00 00 00       	mov    eax,0x7
c0021c84:	e9 36 02 00 00       	jmp    c0021ebf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021c89:	50                   	push   eax
c0021c8a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021c8e:	50                   	push   eax
c0021c8f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021c96:	53                   	push   ebx
c0021c97:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021c9a:	c1 e0 0b             	shl    eax,0xb
c0021c9d:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021ca0:	c1 e8 0b             	shr    eax,0xb
c0021ca3:	50                   	push   eax
c0021ca4:	e8 f8 fc ff ff       	call   c00219a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ca9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021cac:	83 c4 10             	add    esp,0x10
c0021caf:	89 c1                	mov    ecx,eax
c0021cb1:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021cb4:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021cba:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021cbd:	84 db                	test   bl,bl
c0021cbf:	0f 85 8b 00 00 00    	jne    c0021d50 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021cc5:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021ccb:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021cce:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021cd4:	29 c6                	sub    esi,eax
c0021cd6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021cda:	89 f3                	mov    ebx,esi
c0021cdc:	89 f1                	mov    ecx,esi
c0021cde:	c1 fb 1f             	sar    ebx,0x1f
c0021ce1:	01 f0                	add    eax,esi
c0021ce3:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021ce6:	11 da                	adc    edx,ebx
c0021ce8:	89 04 24             	mov    DWORD PTR [esp],eax
c0021ceb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021cef:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021cf2:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021cf5:	89 d8                	mov    eax,ebx
c0021cf7:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021cfb:	ba 00 00 00 00       	mov    edx,0x0
c0021d00:	19 f8                	sbb    eax,edi
c0021d02:	b8 00 00 00 00       	mov    eax,0x0
c0021d07:	73 08                	jae    c0021d11 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021d09:	89 f0                	mov    eax,esi
c0021d0b:	89 fa                	mov    edx,edi
c0021d0d:	29 c8                	sub    eax,ecx
c0021d0f:	19 da                	sbb    edx,ebx
c0021d11:	89 d7                	mov    edi,edx
c0021d13:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021d16:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021d19:	09 c7                	or     edi,eax
c0021d1b:	0f 84 5e ff ff ff    	je     c0021c7f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021d21:	57                   	push   edi
c0021d22:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021d26:	50                   	push   eax
c0021d27:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021d2e:	53                   	push   ebx
c0021d2f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021d32:	c1 e0 0b             	shl    eax,0xb
c0021d35:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021d39:	c1 e8 0b             	shr    eax,0xb
c0021d3c:	50                   	push   eax
c0021d3d:	e8 5f fc ff ff       	call   c00219a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d42:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021d45:	83 c4 10             	add    esp,0x10
c0021d48:	25 ff 07 00 00       	and    eax,0x7ff
c0021d4d:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021d50:	31 ff                	xor    edi,edi
c0021d52:	56                   	push   esi
c0021d53:	6a 28                	push   0x28
c0021d55:	6a 00                	push   0x0
c0021d57:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021d5b:	50                   	push   eax
c0021d5c:	e8 ef e9 fd ff       	call   c0000750 <memset>
c0021d61:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021d64:	25 ff 07 00 00       	and    eax,0x7ff
c0021d69:	89 c6                	mov    esi,eax
c0021d6b:	83 c6 21             	add    esi,0x21
c0021d6e:	83 d7 00             	adc    edi,0x0
c0021d71:	83 c4 10             	add    esp,0x10
c0021d74:	31 c9                	xor    ecx,ecx
c0021d76:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021d7d:	83 f9 28             	cmp    ecx,0x28
c0021d80:	88 04 24             	mov    BYTE PTR [esp],al
c0021d83:	0f 94 c2             	sete   dl
c0021d86:	88 d0                	mov    al,dl
c0021d88:	ba ff 07 00 00       	mov    edx,0x7ff
c0021d8d:	39 f2                	cmp    edx,esi
c0021d8f:	ba 00 00 00 00       	mov    edx,0x0
c0021d94:	19 fa                	sbb    edx,edi
c0021d96:	0f 92 c2             	setb   dl
c0021d99:	09 c2                	or     edx,eax
c0021d9b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021d9f:	0f 94 c0             	sete   al
c0021da2:	08 d0                	or     al,dl
c0021da4:	75 16                	jne    c0021dbc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021da6:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021daa:	74 10                	je     c0021dbc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021dac:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021daf:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021db3:	41                   	inc    ecx
c0021db4:	83 c6 01             	add    esi,0x1
c0021db7:	83 d7 00             	adc    edi,0x0
c0021dba:	eb ba                	jmp    c0021d76 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021dbc:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021dc3:	83 ec 0c             	sub    esp,0xc
c0021dc6:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021dca:	56                   	push   esi
c0021dcb:	e8 9c e9 fd ff       	call   c000076c <strlen>
c0021dd0:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021dd7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021ddb:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021de3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021de6:	5a                   	pop    edx
c0021de7:	25 ff 07 00 00       	and    eax,0x7ff
c0021dec:	59                   	pop    ecx
c0021ded:	01 f8                	add    eax,edi
c0021def:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021df5:	83 e0 02             	and    eax,0x2
c0021df8:	3c 01                	cmp    al,0x1
c0021dfa:	19 c0                	sbb    eax,eax
c0021dfc:	83 c0 02             	add    eax,0x2
c0021dff:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021e03:	56                   	push   esi
c0021e04:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021e08:	50                   	push   eax
c0021e09:	e8 fe e9 fd ff       	call   c000080c <strcpy>
c0021e0e:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021e12:	83 c4 10             	add    esp,0x10
c0021e15:	84 c0                	test   al,al
c0021e17:	75 21                	jne    c0021e3a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021e19:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021e21:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021e29:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021e31:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021e38:	eb 28                	jmp    c0021e62 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021e3a:	fe c8                	dec    al
c0021e3c:	75 24                	jne    c0021e62 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021e3e:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021e46:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021e4e:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021e56:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021e5d:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021e62:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021e66:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021e6d:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021e74:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021e76:	0f b6 f3             	movzx  esi,bl
c0021e79:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021e80:	31 db                	xor    ebx,ebx
c0021e82:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021e88:	89 df                	mov    edi,ebx
c0021e8a:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021e8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e90:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021e93:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021e96:	39 c6                	cmp    esi,eax
c0021e98:	19 d7                	sbb    edi,edx
c0021e9a:	72 10                	jb     c0021eac <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021e9c:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021ea3:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021eaa:	eb 0a                	jmp    c0021eb6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021eac:	29 f0                	sub    eax,esi
c0021eae:	19 da                	sbb    edx,ebx
c0021eb0:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021eb3:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021eb6:	31 c0                	xor    eax,eax
c0021eb8:	eb 05                	jmp    c0021ebf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021eba:	b8 04 00 00 00       	mov    eax,0x4
c0021ebf:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021ec5:	5b                   	pop    ebx
c0021ec6:	5e                   	pop    esi
c0021ec7:	5f                   	pop    edi
c0021ec8:	5d                   	pop    ebp
c0021ec9:	c3                   	ret    

c0021eca <readRoot(unsigned int*, unsigned int*, char)>:
c0021eca:	57                   	push   edi
c0021ecb:	56                   	push   esi
c0021ecc:	81 ec 38 08 00 00    	sub    esp,0x838
c0021ed2:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021eda:	50                   	push   eax
c0021edb:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021edf:	50                   	push   eax
c0021ee0:	6a 10                	push   0x10
c0021ee2:	e8 ba fa ff ff       	call   c00219a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ee7:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021eee:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021ef2:	b9 22 00 00 00       	mov    ecx,0x22
c0021ef7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021ef9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021f00:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021f04:	89 10                	mov    DWORD PTR [eax],edx
c0021f06:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021f0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021f11:	89 10                	mov    DWORD PTR [eax],edx
c0021f13:	81 c4 44 08 00 00    	add    esp,0x844
c0021f19:	b0 01                	mov    al,0x1
c0021f1b:	5e                   	pop    esi
c0021f1c:	5f                   	pop    edi
c0021f1d:	c3                   	ret    

c0021f1e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021f1e:	55                   	push   ebp
c0021f1f:	57                   	push   edi
c0021f20:	56                   	push   esi
c0021f21:	53                   	push   ebx
c0021f22:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021f28:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021f2f:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021f36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021f3a:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021f3e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021f42:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021f46:	75 03                	jne    c0021f4b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021f48:	83 c3 02             	add    ebx,0x2
c0021f4b:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021f4e:	75 03                	jne    c0021f53 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021f50:	43                   	inc    ebx
c0021f51:	eb f8                	jmp    c0021f4b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021f53:	51                   	push   ecx
c0021f54:	68 00 01 00 00       	push   0x100
c0021f59:	6a 00                	push   0x0
c0021f5b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f5f:	50                   	push   eax
c0021f60:	e8 eb e7 fd ff       	call   c0000750 <memset>
c0021f65:	83 c4 10             	add    esp,0x10
c0021f68:	31 d2                	xor    edx,edx
c0021f6a:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021f6d:	84 c0                	test   al,al
c0021f6f:	74 21                	je     c0021f92 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021f71:	3c 2f                	cmp    al,0x2f
c0021f73:	75 0b                	jne    c0021f80 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021f75:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021f79:	bd 01 00 00 00       	mov    ebp,0x1
c0021f7e:	eb 14                	jmp    c0021f94 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021f80:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021f83:	80 f9 19             	cmp    cl,0x19
c0021f86:	77 03                	ja     c0021f8b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f88:	83 e8 20             	sub    eax,0x20
c0021f8b:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021f8f:	42                   	inc    edx
c0021f90:	eb d8                	jmp    c0021f6a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021f92:	31 ed                	xor    ebp,ebp
c0021f94:	83 ec 0c             	sub    esp,0xc
c0021f97:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021f9e:	e8 e9 d8 fe ff       	call   c000f88c <malloc>
c0021fa3:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021faa:	89 c6                	mov    esi,eax
c0021fac:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021fb2:	c1 ef 0b             	shr    edi,0xb
c0021fb5:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021fbc:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021fc0:	83 c4 10             	add    esp,0x10
c0021fc3:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021fc8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021fcc:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021fd3:	74 28                	je     c0021ffd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021fd5:	52                   	push   edx
c0021fd6:	57                   	push   edi
c0021fd7:	50                   	push   eax
c0021fd8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021fdc:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021fe3:	e8 b9 f9 ff ff       	call   c00219a1 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021fe8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021fec:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021ff3:	05 00 08 00 00       	add    eax,0x800
c0021ff8:	83 c4 10             	add    esp,0x10
c0021ffb:	eb cb                	jmp    c0021fc8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021ffd:	83 ec 0c             	sub    esp,0xc
c0022000:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0022004:	57                   	push   edi
c0022005:	e8 62 e7 fd ff       	call   c000076c <strlen>
c002200a:	50                   	push   eax
c002200b:	57                   	push   edi
c002200c:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0022013:	56                   	push   esi
c0022014:	e8 46 f9 ff ff       	call   c002195f <__memmem(unsigned char*, int, unsigned char*, int)>
c0022019:	83 c4 20             	add    esp,0x20
c002201c:	85 c0                	test   eax,eax
c002201e:	75 13                	jne    c0022033 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0022020:	83 ec 0c             	sub    esp,0xc
c0022023:	56                   	push   esi
c0022024:	e8 73 d8 fe ff       	call   c000f89c <free>
c0022029:	83 c4 10             	add    esp,0x10
c002202c:	31 c0                	xor    eax,eax
c002202e:	e9 b3 00 00 00       	jmp    c00220e6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022033:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0022037:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c002203b:	c1 e7 08             	shl    edi,0x8
c002203e:	c1 e2 10             	shl    edx,0x10
c0022041:	09 d7                	or     edi,edx
c0022043:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0022047:	09 d7                	or     edi,edx
c0022049:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c002204d:	c1 e2 18             	shl    edx,0x18
c0022050:	09 d7                	or     edi,edx
c0022052:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0022056:	89 d1                	mov    ecx,edx
c0022058:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c002205c:	c1 e1 08             	shl    ecx,0x8
c002205f:	c1 e2 10             	shl    edx,0x10
c0022062:	09 ca                	or     edx,ecx
c0022064:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0022068:	09 ca                	or     edx,ecx
c002206a:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002206e:	c1 e1 18             	shl    ecx,0x18
c0022071:	09 ca                	or     edx,ecx
c0022073:	89 e9                	mov    ecx,ebp
c0022075:	84 c9                	test   cl,cl
c0022077:	74 3c                	je     c00220b5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0022079:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002207d:	83 ec 0c             	sub    esp,0xc
c0022080:	56                   	push   esi
c0022081:	e8 16 d8 fe ff       	call   c000f89c <free>
c0022086:	83 c4 0c             	add    esp,0xc
c0022089:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022090:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0022095:	50                   	push   eax
c0022096:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002209d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00220a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00220a8:	52                   	push   edx
c00220a9:	57                   	push   edi
c00220aa:	53                   	push   ebx
c00220ab:	e8 6e fe ff ff       	call   c0021f1e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00220b0:	83 c4 20             	add    esp,0x20
c00220b3:	eb 31                	jmp    c00220e6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00220b5:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00220b8:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00220bf:	d0 e8                	shr    al,1
c00220c1:	89 3b                	mov    DWORD PTR [ebx],edi
c00220c3:	83 e0 01             	and    eax,0x1
c00220c6:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00220cd:	83 ec 0c             	sub    esp,0xc
c00220d0:	89 13                	mov    DWORD PTR [ebx],edx
c00220d2:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00220d9:	89 03                	mov    DWORD PTR [ebx],eax
c00220db:	56                   	push   esi
c00220dc:	e8 bb d7 fe ff       	call   c000f89c <free>
c00220e1:	83 c4 10             	add    esp,0x10
c00220e4:	b0 01                	mov    al,0x1
c00220e6:	81 c4 1c 01 00 00    	add    esp,0x11c
c00220ec:	5b                   	pop    ebx
c00220ed:	5e                   	pop    esi
c00220ee:	5f                   	pop    edi
c00220ef:	5d                   	pop    ebp
c00220f0:	c3                   	ret    

c00220f1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c00220f1:	55                   	push   ebp
c00220f2:	57                   	push   edi
c00220f3:	56                   	push   esi
c00220f4:	53                   	push   ebx
c00220f5:	83 ec 20             	sub    esp,0x20
c00220f8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00220fc:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0022100:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0022104:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002210c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022114:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0022119:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c002211f:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0022125:	57                   	push   edi
c0022126:	8d 44 24 14          	lea    eax,[esp+0x14]
c002212a:	50                   	push   eax
c002212b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002212f:	50                   	push   eax
c0022130:	e8 95 fd ff ff       	call   c0021eca <readRoot(unsigned int*, unsigned int*, char)>
c0022135:	5a                   	pop    edx
c0022136:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002213a:	e8 2d e6 fd ff       	call   c000076c <strlen>
c002213f:	83 c4 10             	add    esp,0x10
c0022142:	83 f8 03             	cmp    eax,0x3
c0022145:	77 17                	ja     c002215e <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022147:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002214b:	89 03                	mov    DWORD PTR [ebx],eax
c002214d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022151:	89 06                	mov    DWORD PTR [esi],eax
c0022153:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c002215a:	b0 01                	mov    al,0x1
c002215c:	eb 19                	jmp    c0022177 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002215e:	50                   	push   eax
c002215f:	55                   	push   ebp
c0022160:	57                   	push   edi
c0022161:	56                   	push   esi
c0022162:	53                   	push   ebx
c0022163:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022167:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002216b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002216f:	e8 aa fd ff ff       	call   c0021f1e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022174:	83 c4 20             	add    esp,0x20
c0022177:	83 c4 1c             	add    esp,0x1c
c002217a:	5b                   	pop    ebx
c002217b:	5e                   	pop    esi
c002217c:	5f                   	pop    edi
c002217d:	5d                   	pop    ebp
c002217e:	c3                   	ret    
c002217f:	90                   	nop

c0022180 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0022180:	57                   	push   edi
c0022181:	56                   	push   esi
c0022182:	53                   	push   ebx
c0022183:	83 ec 10             	sub    esp,0x10
c0022186:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002218a:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002218e:	85 ff                	test   edi,edi
c0022190:	0f 84 9d 00 00 00    	je     c0022233 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022196:	85 f6                	test   esi,esi
c0022198:	0f 84 95 00 00 00    	je     c0022233 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002219e:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00221a3:	74 17                	je     c00221bc <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c00221a5:	83 ec 0c             	sub    esp,0xc
c00221a8:	68 d3 d1 02 c0       	push   0xc002d1d3
c00221ad:	e8 1d 07 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00221b2:	83 c4 10             	add    esp,0x10
c00221b5:	b8 03 00 00 00       	mov    eax,0x3
c00221ba:	eb 7c                	jmp    c0022238 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00221bc:	83 ec 0c             	sub    esp,0xc
c00221bf:	6a 1c                	push   0x1c
c00221c1:	e8 c6 d6 fe ff       	call   c000f88c <malloc>
c00221c6:	89 07                	mov    DWORD PTR [edi],eax
c00221c8:	89 c3                	mov    ebx,eax
c00221ca:	58                   	pop    eax
c00221cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00221cf:	50                   	push   eax
c00221d0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00221d3:	50                   	push   eax
c00221d4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221d8:	50                   	push   eax
c00221d9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221dd:	50                   	push   eax
c00221de:	56                   	push   esi
c00221df:	e8 0d ff ff ff       	call   c00220f1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00221e4:	83 c4 20             	add    esp,0x20
c00221e7:	84 c0                	test   al,al
c00221e9:	74 07                	je     c00221f2 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c00221eb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00221f0:	74 0b                	je     c00221fd <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00221f2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00221f6:	b8 01 00 00 00       	mov    eax,0x1
c00221fb:	eb 3b                	jmp    c0022238 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00221fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022201:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022205:	89 03                	mov    DWORD PTR [ebx],eax
c0022207:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002220e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022212:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022219:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022220:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022223:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002222a:	8a 06                	mov    al,BYTE PTR [esi]
c002222c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002222f:	31 c0                	xor    eax,eax
c0022231:	eb 05                	jmp    c0022238 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022233:	b8 04 00 00 00       	mov    eax,0x4
c0022238:	83 c4 10             	add    esp,0x10
c002223b:	5b                   	pop    ebx
c002223c:	5e                   	pop    esi
c002223d:	5f                   	pop    edi
c002223e:	c3                   	ret    
c002223f:	90                   	nop

c0022240 <ISO9660::exists(char const*)>:
c0022240:	83 ec 28             	sub    esp,0x28
c0022243:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022247:	8d 54 24 18          	lea    edx,[esp+0x18]
c002224b:	52                   	push   edx
c002224c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c002224f:	52                   	push   edx
c0022250:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022254:	52                   	push   edx
c0022255:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022259:	52                   	push   edx
c002225a:	50                   	push   eax
c002225b:	e8 91 fe ff ff       	call   c00220f1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022260:	83 c4 3c             	add    esp,0x3c
c0022263:	c3                   	ret    

c0022264 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022264:	56                   	push   esi
c0022265:	53                   	push   ebx
c0022266:	83 ec 14             	sub    esp,0x14
c0022269:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002226d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022271:	85 db                	test   ebx,ebx
c0022273:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022277:	0f 94 c2             	sete   dl
c002227a:	85 f6                	test   esi,esi
c002227c:	0f 94 c0             	sete   al
c002227f:	08 c2                	or     dl,al
c0022281:	75 68                	jne    c00222eb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022283:	85 c9                	test   ecx,ecx
c0022285:	74 64                	je     c00222eb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022287:	83 ec 0c             	sub    esp,0xc
c002228a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002228d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022291:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022297:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002229e:	50                   	push   eax
c002229f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00222a2:	50                   	push   eax
c00222a3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00222a7:	50                   	push   eax
c00222a8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00222ac:	50                   	push   eax
c00222ad:	51                   	push   ecx
c00222ae:	e8 3e fe ff ff       	call   c00220f1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00222b3:	83 c4 20             	add    esp,0x20
c00222b6:	ba 01 00 00 00       	mov    edx,0x1
c00222bb:	84 c0                	test   al,al
c00222bd:	74 31                	je     c00222f0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00222bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222c3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00222ca:	89 03                	mov    DWORD PTR [ebx],eax
c00222cc:	ba 00 00 00 00       	mov    edx,0x0
c00222d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00222d5:	85 c0                	test   eax,eax
c00222d7:	0f 95 06             	setne  BYTE PTR [esi]
c00222da:	74 14                	je     c00222f0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00222dc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00222e2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00222e9:	eb 05                	jmp    c00222f0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00222eb:	ba 04 00 00 00       	mov    edx,0x4
c00222f0:	83 c4 14             	add    esp,0x14
c00222f3:	89 d0                	mov    eax,edx
c00222f5:	5b                   	pop    ebx
c00222f6:	5e                   	pop    esi
c00222f7:	c3                   	ret    

c00222f8 <ISO9660::openDir(char const*, void**)>:
c00222f8:	57                   	push   edi
c00222f9:	56                   	push   esi
c00222fa:	53                   	push   ebx
c00222fb:	83 ec 10             	sub    esp,0x10
c00222fe:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022302:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022306:	85 ff                	test   edi,edi
c0022308:	0f 84 95 00 00 00    	je     c00223a3 <ISO9660::openDir(char const*, void**)+0xab>
c002230e:	85 f6                	test   esi,esi
c0022310:	0f 84 8d 00 00 00    	je     c00223a3 <ISO9660::openDir(char const*, void**)+0xab>
c0022316:	83 ec 0c             	sub    esp,0xc
c0022319:	6a 1c                	push   0x1c
c002231b:	e8 6c d5 fe ff       	call   c000f88c <malloc>
c0022320:	89 07                	mov    DWORD PTR [edi],eax
c0022322:	89 c3                	mov    ebx,eax
c0022324:	59                   	pop    ecx
c0022325:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022329:	50                   	push   eax
c002232a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002232d:	50                   	push   eax
c002232e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022332:	50                   	push   eax
c0022333:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022337:	50                   	push   eax
c0022338:	56                   	push   esi
c0022339:	e8 b3 fd ff ff       	call   c00220f1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002233e:	83 c4 20             	add    esp,0x20
c0022341:	84 c0                	test   al,al
c0022343:	74 07                	je     c002234c <ISO9660::openDir(char const*, void**)+0x54>
c0022345:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002234a:	75 21                	jne    c002236d <ISO9660::openDir(char const*, void**)+0x75>
c002234c:	0f b6 c0             	movzx  eax,al
c002234f:	52                   	push   edx
c0022350:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022354:	50                   	push   eax
c0022355:	68 f9 d1 02 c0       	push   0xc002d1f9
c002235a:	e8 70 05 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c002235f:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022363:	83 c4 10             	add    esp,0x10
c0022366:	b8 01 00 00 00       	mov    eax,0x1
c002236b:	eb 3b                	jmp    c00223a8 <ISO9660::openDir(char const*, void**)+0xb0>
c002236d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022371:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022375:	89 03                	mov    DWORD PTR [ebx],eax
c0022377:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002237e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022382:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022389:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022390:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022393:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002239a:	8a 06                	mov    al,BYTE PTR [esi]
c002239c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002239f:	31 c0                	xor    eax,eax
c00223a1:	eb 05                	jmp    c00223a8 <ISO9660::openDir(char const*, void**)+0xb0>
c00223a3:	b8 04 00 00 00       	mov    eax,0x4
c00223a8:	83 c4 10             	add    esp,0x10
c00223ab:	5b                   	pop    ebx
c00223ac:	5e                   	pop    esi
c00223ad:	5f                   	pop    edi
c00223ae:	c3                   	ret    
c00223af:	90                   	nop

c00223b0 <ISO9660::ISO9660()>:
c00223b0:	83 ec 0c             	sub    esp,0xc
c00223b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223b7:	83 ec 0c             	sub    esp,0xc
c00223ba:	50                   	push   eax
c00223bb:	e8 1a 08 ff ff       	call   c0012bda <Filesystem::Filesystem()>
c00223c0:	83 c4 10             	add    esp,0x10
c00223c3:	ba 1c d2 02 c0       	mov    edx,0xc002d21c
c00223c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223cc:	89 10                	mov    DWORD PTR [eax],edx
c00223ce:	90                   	nop
c00223cf:	83 c4 0c             	add    esp,0xc
c00223d2:	c3                   	ret    
c00223d3:	90                   	nop

c00223d4 <SoundChannel::SoundChannel(int, int, int, int)>:
c00223d4:	83 ec 1c             	sub    esp,0x1c
c00223d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223db:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00223df:	89 10                	mov    DWORD PTR [eax],edx
c00223e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00223e9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00223ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223f0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00223f4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00223f7:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00223fc:	75 23                	jne    c0022421 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c00223fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022402:	8b 10                	mov    edx,DWORD PTR [eax]
c0022404:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022408:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002240b:	0f af c2             	imul   eax,edx
c002240e:	85 c0                	test   eax,eax
c0022410:	79 03                	jns    c0022415 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0022412:	83 c0 03             	add    eax,0x3
c0022415:	c1 f8 02             	sar    eax,0x2
c0022418:	05 a0 0f 00 00       	add    eax,0xfa0
c002241d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022421:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022425:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022429:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002242c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022430:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022437:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002243b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022442:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022446:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022449:	c1 e0 02             	shl    eax,0x2
c002244c:	83 ec 0c             	sub    esp,0xc
c002244f:	50                   	push   eax
c0022450:	e8 37 d4 fe ff       	call   c000f88c <malloc>
c0022455:	83 c4 10             	add    esp,0x10
c0022458:	89 c2                	mov    edx,eax
c002245a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002245e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022461:	83 ec 04             	sub    esp,0x4
c0022464:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022468:	50                   	push   eax
c0022469:	6a 01                	push   0x1
c002246b:	6a 04                	push   0x4
c002246d:	e8 f3 66 fe ff       	call   c0008b65 <src_new>
c0022472:	83 c4 10             	add    esp,0x10
c0022475:	89 c2                	mov    edx,eax
c0022477:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002247b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002247e:	83 ec 0c             	sub    esp,0xc
c0022481:	68 7c d2 02 c0       	push   0xc002d27c
c0022486:	e8 44 04 ff ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c002248b:	83 c4 10             	add    esp,0x10
c002248e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022492:	85 c0                	test   eax,eax
c0022494:	74 10                	je     c00224a6 <SoundChannel::SoundChannel(int, int, int, int)+0xd2>
c0022496:	83 ec 0c             	sub    esp,0xc
c0022499:	68 92 d2 02 c0       	push   0xc002d292
c002249e:	e8 62 7e ff ff       	call   c001a305 <Krnl::panic(char const*)>
c00224a3:	83 c4 10             	add    esp,0x10
c00224a6:	a0 40 33 03 c0       	mov    al,ds:0xc0033340
c00224ab:	83 f0 01             	xor    eax,0x1
c00224ae:	84 c0                	test   al,al
c00224b0:	74 57                	je     c0022509 <SoundChannel::SoundChannel(int, int, int, int)+0x135>
c00224b2:	a1 ac d2 02 c0       	mov    eax,ds:0xc002d2ac
c00224b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00224bb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00224c3:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00224cb:	7f 35                	jg     c0022502 <SoundChannel::SoundChannel(int, int, int, int)+0x12e>
c00224cd:	83 ec 0c             	sub    esp,0xc
c00224d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00224d4:	e8 46 56 00 00       	call   c0027b1f <__floatsisf>
c00224d9:	83 c4 10             	add    esp,0x10
c00224dc:	8b 15 ac d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d2ac
c00224e2:	83 ec 08             	sub    esp,0x8
c00224e5:	52                   	push   edx
c00224e6:	50                   	push   eax
c00224e7:	e8 45 52 00 00       	call   c0027731 <__mulsf3>
c00224ec:	83 c4 10             	add    esp,0x10
c00224ef:	89 c2                	mov    edx,eax
c00224f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224f5:	89 14 85 40 2f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd0c0],edx
c00224fc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022500:	eb c1                	jmp    c00224c3 <SoundChannel::SoundChannel(int, int, int, int)+0xef>
c0022502:	c6 05 40 33 03 c0 01 	mov    BYTE PTR ds:0xc0033340,0x1
c0022509:	90                   	nop
c002250a:	83 c4 1c             	add    esp,0x1c
c002250d:	c3                   	ret    

c002250e <SoundChannel::~SoundChannel()>:
c002250e:	83 ec 0c             	sub    esp,0xc
c0022511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022515:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022518:	83 ec 0c             	sub    esp,0xc
c002251b:	50                   	push   eax
c002251c:	e8 7b d3 fe ff       	call   c000f89c <free>
c0022521:	83 c4 10             	add    esp,0x10
c0022524:	90                   	nop
c0022525:	83 c4 0c             	add    esp,0xc
c0022528:	c3                   	ret    
c0022529:	90                   	nop

c002252a <SoundChannel::getSampleRate()>:
c002252a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002252e:	8b 00                	mov    eax,DWORD PTR [eax]
c0022530:	c3                   	ret    
c0022531:	90                   	nop

c0022532 <SoundChannel::getBits()>:
c0022532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022536:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022539:	c3                   	ret    

c002253a <SoundChannel::getBufferUsed()>:
c002253a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002253e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022541:	c3                   	ret    

c0022542 <SoundChannel::getBufferSize()>:
c0022542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022546:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022549:	c3                   	ret    

c002254a <SoundChannel::unbuffer(float*, int, int)>:
c002254a:	56                   	push   esi
c002254b:	53                   	push   ebx
c002254c:	83 ec 40             	sub    esp,0x40
c002254f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022553:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022556:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002255a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002255d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022561:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022565:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022569:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002256d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022571:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022575:	e8 a5 55 00 00       	call   c0027b1f <__floatsisf>
c002257a:	5a                   	pop    edx
c002257b:	89 c6                	mov    esi,eax
c002257d:	ff 33                	push   DWORD PTR [ebx]
c002257f:	e8 9b 55 00 00       	call   c0027b1f <__floatsisf>
c0022584:	59                   	pop    ecx
c0022585:	5a                   	pop    edx
c0022586:	50                   	push   eax
c0022587:	56                   	push   esi
c0022588:	e8 67 53 00 00       	call   c00278f4 <__divsf3>
c002258d:	89 04 24             	mov    DWORD PTR [esp],eax
c0022590:	e8 5a 68 00 00       	call   c0028def <__extendsfdf2>
c0022595:	59                   	pop    ecx
c0022596:	5e                   	pop    esi
c0022597:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002259b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002259f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00225a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00225ab:	50                   	push   eax
c00225ac:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00225af:	e8 a6 61 fe ff       	call   c000875a <src_process>
c00225b4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00225b8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00225bb:	83 c4 0c             	add    esp,0xc
c00225be:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00225c1:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00225c4:	29 d0                	sub    eax,edx
c00225c6:	c1 e0 02             	shl    eax,0x2
c00225c9:	50                   	push   eax
c00225ca:	8d 04 91             	lea    eax,[ecx+edx*4]
c00225cd:	50                   	push   eax
c00225ce:	51                   	push   ecx
c00225cf:	e8 b4 e0 fd ff       	call   c0000688 <memmove>
c00225d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00225d8:	83 c4 44             	add    esp,0x44
c00225db:	5b                   	pop    ebx
c00225dc:	5e                   	pop    esi
c00225dd:	c3                   	ret    

c00225de <SoundChannel::buffer16(short*, int)>:
c00225de:	55                   	push   ebp
c00225df:	57                   	push   edi
c00225e0:	56                   	push   esi
c00225e1:	53                   	push   ebx
c00225e2:	83 ec 1c             	sub    esp,0x1c
c00225e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00225e9:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c00225ec:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c00225ef:	0f 84 d2 00 00 00    	je     c00226c7 <SoundChannel::buffer16(short*, int)+0xe9>
c00225f5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00225f9:	85 ed                	test   ebp,ebp
c00225fb:	0f 8e c6 00 00 00    	jle    c00226c7 <SoundChannel::buffer16(short*, int)+0xe9>
c0022601:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022605:	bd 00 00 00 38       	mov    ebp,0x38000000
c002260a:	83 ec 0c             	sub    esp,0xc
c002260d:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0022610:	50                   	push   eax
c0022611:	e8 09 55 00 00       	call   c0027b1f <__floatsisf>
c0022616:	59                   	pop    ecx
c0022617:	8d 4e 01             	lea    ecx,[esi+0x1]
c002261a:	5f                   	pop    edi
c002261b:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c002261e:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022621:	55                   	push   ebp
c0022622:	50                   	push   eax
c0022623:	e8 09 51 00 00       	call   c0027731 <__mulsf3>
c0022628:	83 c4 10             	add    esp,0x10
c002262b:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c002262e:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0022631:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0022634:	0f 84 99 00 00 00    	je     c00226d3 <SoundChannel::buffer16(short*, int)+0xf5>
c002263a:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c002263f:	74 78                	je     c00226b9 <SoundChannel::buffer16(short*, int)+0xdb>
c0022641:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022645:	83 ec 0c             	sub    esp,0xc
c0022648:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c002264c:	50                   	push   eax
c002264d:	e8 cd 54 00 00       	call   c0027b1f <__floatsisf>
c0022652:	5f                   	pop    edi
c0022653:	8d 4e 01             	lea    ecx,[esi+0x1]
c0022656:	5a                   	pop    edx
c0022657:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c002265a:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c002265d:	55                   	push   ebp
c002265e:	50                   	push   eax
c002265f:	e8 cd 50 00 00       	call   c0027731 <__mulsf3>
c0022664:	83 c4 10             	add    esp,0x10
c0022667:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c002266a:	be 02 00 00 00       	mov    esi,0x2
c002266f:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0022672:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022675:	74 46                	je     c00226bd <SoundChannel::buffer16(short*, int)+0xdf>
c0022677:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c002267b:	eb 36                	jmp    c00226b3 <SoundChannel::buffer16(short*, int)+0xd5>
c002267d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0022681:	83 ec 0c             	sub    esp,0xc
c0022684:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0022688:	46                   	inc    esi
c0022689:	50                   	push   eax
c002268a:	e8 90 54 00 00       	call   c0027b1f <__floatsisf>
c002268f:	5a                   	pop    edx
c0022690:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0022693:	59                   	pop    ecx
c0022694:	8d 4f 01             	lea    ecx,[edi+0x1]
c0022697:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c002269a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002269e:	50                   	push   eax
c002269f:	e8 8d 50 00 00       	call   c0027731 <__mulsf3>
c00226a4:	83 c4 10             	add    esp,0x10
c00226a7:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c00226ab:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c00226ae:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c00226b1:	74 0a                	je     c00226bd <SoundChannel::buffer16(short*, int)+0xdf>
c00226b3:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c00226b7:	75 c4                	jne    c002267d <SoundChannel::buffer16(short*, int)+0x9f>
c00226b9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00226bd:	83 c4 1c             	add    esp,0x1c
c00226c0:	89 f0                	mov    eax,esi
c00226c2:	5b                   	pop    ebx
c00226c3:	5e                   	pop    esi
c00226c4:	5f                   	pop    edi
c00226c5:	5d                   	pop    ebp
c00226c6:	c3                   	ret    
c00226c7:	83 c4 1c             	add    esp,0x1c
c00226ca:	31 f6                	xor    esi,esi
c00226cc:	5b                   	pop    ebx
c00226cd:	89 f0                	mov    eax,esi
c00226cf:	5e                   	pop    esi
c00226d0:	5f                   	pop    edi
c00226d1:	5d                   	pop    ebp
c00226d2:	c3                   	ret    
c00226d3:	be 01 00 00 00       	mov    esi,0x1
c00226d8:	eb e3                	jmp    c00226bd <SoundChannel::buffer16(short*, int)+0xdf>

c00226da <SoundChannel::buffer8(unsigned char*, int)>:
c00226da:	55                   	push   ebp
c00226db:	57                   	push   edi
c00226dc:	56                   	push   esi
c00226dd:	53                   	push   ebx
c00226de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00226e2:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00226e6:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00226e9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00226ed:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00226f0:	74 7a                	je     c002276c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00226f2:	85 ff                	test   edi,edi
c00226f4:	7e 76                	jle    c002276c <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00226f6:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00226fa:	8d 70 01             	lea    esi,[eax+0x1]
c00226fd:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022700:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022703:	8b 1c 9d 40 2f 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd0c0]
c002270a:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002270d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022710:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022713:	74 5e                	je     c0022773 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022715:	83 ff 01             	cmp    edi,0x1
c0022718:	74 4b                	je     c0022765 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002271a:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002271e:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022721:	8d 70 01             	lea    esi,[eax+0x1]
c0022724:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022727:	8b 1c 9d 40 2f 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd0c0]
c002272e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022731:	b8 02 00 00 00       	mov    eax,0x2
c0022736:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022739:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002273c:	75 23                	jne    c0022761 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002273e:	eb 27                	jmp    c0022767 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022740:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022745:	8d 71 01             	lea    esi,[ecx+0x1]
c0022748:	40                   	inc    eax
c0022749:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002274c:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002274f:	8b 1c 9d 40 2f 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd0c0]
c0022756:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022759:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002275c:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002275f:	74 06                	je     c0022767 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022761:	39 c7                	cmp    edi,eax
c0022763:	75 db                	jne    c0022740 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022765:	89 f8                	mov    eax,edi
c0022767:	5b                   	pop    ebx
c0022768:	5e                   	pop    esi
c0022769:	5f                   	pop    edi
c002276a:	5d                   	pop    ebp
c002276b:	c3                   	ret    
c002276c:	5b                   	pop    ebx
c002276d:	31 c0                	xor    eax,eax
c002276f:	5e                   	pop    esi
c0022770:	5f                   	pop    edi
c0022771:	5d                   	pop    ebp
c0022772:	c3                   	ret    
c0022773:	b8 01 00 00 00       	mov    eax,0x1
c0022778:	eb ed                	jmp    c0022767 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002277a <SoundDevice::SoundDevice(char const*)>:
c002277a:	83 ec 1c             	sub    esp,0x1c
c002277d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022781:	83 ec 08             	sub    esp,0x8
c0022784:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022788:	50                   	push   eax
c0022789:	e8 7e 17 ff ff       	call   c0013f0c <Device::Device(char const*)>
c002278e:	83 c4 10             	add    esp,0x10
c0022791:	ba ac d3 02 c0       	mov    edx,0xc002d3ac
c0022796:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002279a:	89 10                	mov    DWORD PTR [eax],edx
c002279c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227a0:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00227aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227ae:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00227b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00227c0:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00227c5:	7f 19                	jg     c00227e0 <SoundDevice::SoundDevice(char const*)+0x66>
c00227c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00227cf:	83 c2 54             	add    edx,0x54
c00227d2:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00227da:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00227de:	eb e0                	jmp    c00227c0 <SoundDevice::SoundDevice(char const*)+0x46>
c00227e0:	90                   	nop
c00227e1:	83 c4 1c             	add    esp,0x1c
c00227e4:	c3                   	ret    
c00227e5:	90                   	nop

c00227e6 <SoundDevice::~SoundDevice()>:
c00227e6:	53                   	push   ebx
c00227e7:	83 ec 18             	sub    esp,0x18
c00227ea:	ba ac d3 02 c0       	mov    edx,0xc002d3ac
c00227ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227f3:	89 10                	mov    DWORD PTR [eax],edx
c00227f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00227fd:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022802:	7f 46                	jg     c002284a <SoundDevice::~SoundDevice()+0x64>
c0022804:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022808:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002280c:	83 c2 54             	add    edx,0x54
c002280f:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022813:	85 c0                	test   eax,eax
c0022815:	74 2d                	je     c0022844 <SoundDevice::~SoundDevice()+0x5e>
c0022817:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002281f:	83 c2 54             	add    edx,0x54
c0022822:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022826:	85 db                	test   ebx,ebx
c0022828:	74 1a                	je     c0022844 <SoundDevice::~SoundDevice()+0x5e>
c002282a:	83 ec 0c             	sub    esp,0xc
c002282d:	53                   	push   ebx
c002282e:	e8 db fc ff ff       	call   c002250e <SoundChannel::~SoundChannel()>
c0022833:	83 c4 10             	add    esp,0x10
c0022836:	83 ec 08             	sub    esp,0x8
c0022839:	6a 2c                	push   0x2c
c002283b:	53                   	push   ebx
c002283c:	e8 ae ff fe ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0022841:	83 c4 10             	add    esp,0x10
c0022844:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022848:	eb b3                	jmp    c00227fd <SoundDevice::~SoundDevice()+0x17>
c002284a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002284e:	83 ec 0c             	sub    esp,0xc
c0022851:	50                   	push   eax
c0022852:	e8 7f 13 ff ff       	call   c0013bd6 <Device::~Device()>
c0022857:	83 c4 10             	add    esp,0x10
c002285a:	90                   	nop
c002285b:	83 c4 18             	add    esp,0x18
c002285e:	5b                   	pop    ebx
c002285f:	c3                   	ret    

c0022860 <SoundDevice::~SoundDevice()>:
c0022860:	83 ec 0c             	sub    esp,0xc
c0022863:	83 ec 0c             	sub    esp,0xc
c0022866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002286a:	e8 77 ff ff ff       	call   c00227e6 <SoundDevice::~SoundDevice()>
c002286f:	83 c4 10             	add    esp,0x10
c0022872:	83 ec 08             	sub    esp,0x8
c0022875:	68 e4 01 00 00       	push   0x1e4
c002287a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002287e:	e8 6c ff fe ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0022883:	83 c4 10             	add    esp,0x10
c0022886:	83 c4 0c             	add    esp,0xc
c0022889:	c3                   	ret    

c002288a <SoundDevice::getFreeChannelNum()>:
c002288a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002288e:	31 c0                	xor    eax,eax
c0022890:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022898:	74 09                	je     c00228a3 <SoundDevice::getFreeChannelNum()+0x19>
c002289a:	40                   	inc    eax
c002289b:	83 f8 20             	cmp    eax,0x20
c002289e:	75 f0                	jne    c0022890 <SoundDevice::getFreeChannelNum()+0x6>
c00228a0:	83 c8 ff             	or     eax,0xffffffff
c00228a3:	c3                   	ret    

c00228a4 <SoundDevice::addChannel(SoundChannel*)>:
c00228a4:	56                   	push   esi
c00228a5:	53                   	push   ebx
c00228a6:	51                   	push   ecx
c00228a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00228ab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00228af:	53                   	push   ebx
c00228b0:	e8 d5 ff ff ff       	call   c002288a <SoundDevice::getFreeChannelNum()>
c00228b5:	5a                   	pop    edx
c00228b6:	83 f8 ff             	cmp    eax,0xffffffff
c00228b9:	74 51                	je     c002290c <SoundDevice::addChannel(SoundChannel*)+0x68>
c00228bb:	85 f6                	test   esi,esi
c00228bd:	74 4d                	je     c002290c <SoundDevice::addChannel(SoundChannel*)+0x68>
c00228bf:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00228c6:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00228cd:	75 30                	jne    c00228ff <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00228cf:	83 ec 0c             	sub    esp,0xc
c00228d2:	56                   	push   esi
c00228d3:	e8 52 fc ff ff       	call   c002252a <SoundChannel::getSampleRate()>
c00228d8:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c00228de:	89 34 24             	mov    DWORD PTR [esp],esi
c00228e1:	e8 4c fc ff ff       	call   c0022532 <SoundChannel::getBits()>
c00228e6:	83 c4 0c             	add    esp,0xc
c00228e9:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00228ef:	8b 13                	mov    edx,DWORD PTR [ebx]
c00228f1:	50                   	push   eax
c00228f2:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00228f8:	53                   	push   ebx
c00228f9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00228fc:	83 c4 10             	add    esp,0x10
c00228ff:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022905:	b8 01 00 00 00       	mov    eax,0x1
c002290a:	eb 03                	jmp    c002290f <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002290c:	83 c8 ff             	or     eax,0xffffffff
c002290f:	5a                   	pop    edx
c0022910:	5b                   	pop    ebx
c0022911:	5e                   	pop    esi
c0022912:	c3                   	ret    
c0022913:	90                   	nop

c0022914 <SoundDevice::removeChannel(int)>:
c0022914:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022918:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002291c:	83 fa 1f             	cmp    edx,0x1f
c002291f:	77 23                	ja     c0022944 <SoundDevice::removeChannel(int)+0x30>
c0022921:	8d 14 90             	lea    edx,[eax+edx*4]
c0022924:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002292b:	74 17                	je     c0022944 <SoundDevice::removeChannel(int)+0x30>
c002292d:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022937:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002293d:	75 05                	jne    c0022944 <SoundDevice::removeChannel(int)+0x30>
c002293f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022941:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c0022944:	c3                   	ret    
c0022945:	90                   	nop

c0022946 <SoundDevice::floatTo16(float*, short*, int)>:
c0022946:	57                   	push   edi
c0022947:	56                   	push   esi
c0022948:	53                   	push   ebx
c0022949:	31 db                	xor    ebx,ebx
c002294b:	83 ec 10             	sub    esp,0x10
c002294e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022952:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022956:	0f 8d d0 00 00 00    	jge    c0022a2c <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c002295c:	83 ec 0c             	sub    esp,0xc
c002295f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022963:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022966:	e8 84 64 00 00       	call   c0028def <__extendsfdf2>
c002296b:	83 c4 10             	add    esp,0x10
c002296e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022972:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022976:	68 00 00 f0 3f       	push   0x3ff00000
c002297b:	6a 00                	push   0x0
c002297d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022981:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022985:	e8 f1 53 00 00       	call   c0027d7b <__adddf3>
c002298a:	83 c4 10             	add    esp,0x10
c002298d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022991:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022995:	68 00 00 e0 3f       	push   0x3fe00000
c002299a:	6a 00                	push   0x0
c002299c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229a4:	e8 4f 5a 00 00       	call   c00283f8 <__muldf3>
c00229a9:	83 c4 10             	add    esp,0x10
c00229ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00229b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00229b4:	68 c0 ff df 40       	push   0x40dfffc0
c00229b9:	6a 00                	push   0x0
c00229bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229c3:	e8 30 5a 00 00       	call   c00283f8 <__muldf3>
c00229c8:	59                   	pop    ecx
c00229c9:	5f                   	pop    edi
c00229ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00229ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00229d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00229da:	e8 ec 62 00 00       	call   c0028ccb <__truncdfsf2>
c00229df:	5a                   	pop    edx
c00229e0:	89 c7                	mov    edi,eax
c00229e2:	59                   	pop    ecx
c00229e3:	68 00 fe ff 46       	push   0x46fffe00
c00229e8:	50                   	push   eax
c00229e9:	e8 87 53 00 00       	call   c0027d75 <__gesf2>
c00229ee:	83 c4 10             	add    esp,0x10
c00229f1:	85 c0                	test   eax,eax
c00229f3:	78 08                	js     c00229fd <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c00229f5:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c00229fb:	eb 29                	jmp    c0022a26 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00229fd:	50                   	push   eax
c00229fe:	50                   	push   eax
c00229ff:	6a 00                	push   0x0
c0022a01:	57                   	push   edi
c0022a02:	e8 72 53 00 00       	call   c0027d79 <__lesf2>
c0022a07:	83 c4 10             	add    esp,0x10
c0022a0a:	85 c0                	test   eax,eax
c0022a0c:	7f 08                	jg     c0022a16 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022a0e:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c0022a14:	eb 10                	jmp    c0022a26 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022a16:	83 ec 0c             	sub    esp,0xc
c0022a19:	57                   	push   edi
c0022a1a:	e8 6d 64 00 00       	call   c0028e8c <lrintf>
c0022a1f:	83 c4 10             	add    esp,0x10
c0022a22:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0022a26:	43                   	inc    ebx
c0022a27:	e9 26 ff ff ff       	jmp    c0022952 <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0022a2c:	83 c4 10             	add    esp,0x10
c0022a2f:	5b                   	pop    ebx
c0022a30:	5e                   	pop    esi
c0022a31:	5f                   	pop    edi
c0022a32:	c3                   	ret    
c0022a33:	90                   	nop

c0022a34 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022a34:	57                   	push   edi
c0022a35:	56                   	push   esi
c0022a36:	53                   	push   ebx
c0022a37:	31 db                	xor    ebx,ebx
c0022a39:	83 ec 10             	sub    esp,0x10
c0022a3c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022a40:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022a44:	0f 8d cb 00 00 00    	jge    c0022b15 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022a4a:	83 ec 0c             	sub    esp,0xc
c0022a4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022a51:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022a54:	e8 96 63 00 00       	call   c0028def <__extendsfdf2>
c0022a59:	83 c4 10             	add    esp,0x10
c0022a5c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a64:	68 00 00 f0 3f       	push   0x3ff00000
c0022a69:	6a 00                	push   0x0
c0022a6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a73:	e8 03 53 00 00       	call   c0027d7b <__adddf3>
c0022a78:	83 c4 10             	add    esp,0x10
c0022a7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a83:	68 00 00 e0 3f       	push   0x3fe00000
c0022a88:	6a 00                	push   0x0
c0022a8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a92:	e8 61 59 00 00       	call   c00283f8 <__muldf3>
c0022a97:	83 c4 10             	add    esp,0x10
c0022a9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022aa2:	68 00 00 60 40       	push   0x40600000
c0022aa7:	6a 00                	push   0x0
c0022aa9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022aad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ab1:	e8 42 59 00 00       	call   c00283f8 <__muldf3>
c0022ab6:	59                   	pop    ecx
c0022ab7:	5f                   	pop    edi
c0022ab8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022abc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022ac0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ac4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022ac8:	e8 fe 61 00 00       	call   c0028ccb <__truncdfsf2>
c0022acd:	5a                   	pop    edx
c0022ace:	89 c7                	mov    edi,eax
c0022ad0:	59                   	pop    ecx
c0022ad1:	68 00 00 fe 42       	push   0x42fe0000
c0022ad6:	50                   	push   eax
c0022ad7:	e8 99 52 00 00       	call   c0027d75 <__gesf2>
c0022adc:	83 c4 10             	add    esp,0x10
c0022adf:	85 c0                	test   eax,eax
c0022ae1:	78 06                	js     c0022ae9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022ae3:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022ae7:	eb 26                	jmp    c0022b0f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022ae9:	50                   	push   eax
c0022aea:	50                   	push   eax
c0022aeb:	6a 00                	push   0x0
c0022aed:	57                   	push   edi
c0022aee:	e8 86 52 00 00       	call   c0027d79 <__lesf2>
c0022af3:	83 c4 10             	add    esp,0x10
c0022af6:	85 c0                	test   eax,eax
c0022af8:	7f 06                	jg     c0022b00 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022afa:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022afe:	eb 0f                	jmp    c0022b0f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022b00:	83 ec 0c             	sub    esp,0xc
c0022b03:	57                   	push   edi
c0022b04:	e8 83 63 00 00       	call   c0028e8c <lrintf>
c0022b09:	83 c4 10             	add    esp,0x10
c0022b0c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022b0f:	43                   	inc    ebx
c0022b10:	e9 2b ff ff ff       	jmp    c0022a40 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022b15:	83 c4 10             	add    esp,0x10
c0022b18:	5b                   	pop    ebx
c0022b19:	5e                   	pop    esi
c0022b1a:	5f                   	pop    edi
c0022b1b:	c3                   	ret    

c0022b1c <SoundDevice::getAudio(int, float*, float*)>:
c0022b1c:	55                   	push   ebp
c0022b1d:	57                   	push   edi
c0022b1e:	56                   	push   esi
c0022b1f:	53                   	push   ebx
c0022b20:	83 ec 28             	sub    esp,0x28
c0022b23:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022b27:	68 b0 d2 02 c0       	push   0xc002d2b0
c0022b2c:	e8 9e fd fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0022b31:	59                   	pop    ecx
c0022b32:	5e                   	pop    esi
c0022b33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022b37:	68 c7 d2 02 c0       	push   0xc002d2c7
c0022b3c:	e8 8e fd fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0022b41:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022b45:	83 c4 0c             	add    esp,0xc
c0022b48:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
c0022b4f:	56                   	push   esi
c0022b50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b54:	68 e9 d2 02 c0       	push   0xc002d2e9
c0022b59:	e8 71 fd fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0022b5e:	83 c4 0c             	add    esp,0xc
c0022b61:	56                   	push   esi
c0022b62:	31 f6                	xor    esi,esi
c0022b64:	6a 00                	push   0x0
c0022b66:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022b6a:	e8 e1 db fd ff       	call   c0000750 <memset>
c0022b6f:	83 c4 10             	add    esp,0x10
c0022b72:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022b7a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022b82:	8b 84 b3 5c 01 00 00 	mov    eax,DWORD PTR [ebx+esi*4+0x15c]
c0022b89:	85 c0                	test   eax,eax
c0022b8b:	0f 84 d7 00 00 00    	je     c0022c68 <SoundDevice::getAudio(int, float*, float*)+0x14c>
c0022b91:	83 ec 0c             	sub    esp,0xc
c0022b94:	50                   	push   eax
c0022b95:	e8 a8 f9 ff ff       	call   c0022542 <SoundChannel::getBufferSize()>
c0022b9a:	5f                   	pop    edi
c0022b9b:	5d                   	pop    ebp
c0022b9c:	50                   	push   eax
c0022b9d:	68 0d d3 02 c0       	push   0xc002d30d
c0022ba2:	e8 28 fd fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0022ba7:	58                   	pop    eax
c0022ba8:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022baf:	e8 86 f9 ff ff       	call   c002253a <SoundChannel::getBufferUsed()>
c0022bb4:	5a                   	pop    edx
c0022bb5:	59                   	pop    ecx
c0022bb6:	50                   	push   eax
c0022bb7:	68 20 d3 02 c0       	push   0xc002d320
c0022bbc:	e8 0e fd fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0022bc1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022bc5:	99                   	cdq    
c0022bc6:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022bcc:	50                   	push   eax
c0022bcd:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022bd3:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022bd7:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022bde:	e8 67 f9 ff ff       	call   c002254a <SoundChannel::unbuffer(float*, int, int)>
c0022be3:	83 c4 14             	add    esp,0x14
c0022be6:	89 c5                	mov    ebp,eax
c0022be8:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022bef:	e8 46 f9 ff ff       	call   c002253a <SoundChannel::getBufferUsed()>
c0022bf4:	5f                   	pop    edi
c0022bf5:	5a                   	pop    edx
c0022bf6:	50                   	push   eax
c0022bf7:	68 38 d3 02 c0       	push   0xc002d338
c0022bfc:	e8 ce fc fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0022c01:	56                   	push   esi
c0022c02:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022c06:	99                   	cdq    
c0022c07:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022c0d:	50                   	push   eax
c0022c0e:	55                   	push   ebp
c0022c0f:	68 50 d3 02 c0       	push   0xc002d350
c0022c14:	e8 b6 fc fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0022c19:	83 c4 20             	add    esp,0x20
c0022c1c:	31 c0                	xor    eax,eax
c0022c1e:	39 e8                	cmp    eax,ebp
c0022c20:	7d 1e                	jge    c0022c40 <SoundDevice::getAudio(int, float*, float*)+0x124>
c0022c22:	8b 93 58 01 00 00    	mov    edx,DWORD PTR [ebx+0x158]
c0022c28:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022c2c:	0f af d0             	imul   edx,eax
c0022c2f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c0022c32:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
c0022c36:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022c3a:	40                   	inc    eax
c0022c3b:	89 0c 97             	mov    DWORD PTR [edi+edx*4],ecx
c0022c3e:	eb de                	jmp    c0022c1e <SoundDevice::getAudio(int, float*, float*)+0x102>
c0022c40:	50                   	push   eax
c0022c41:	50                   	push   eax
c0022c42:	55                   	push   ebp
c0022c43:	68 7d d3 02 c0       	push   0xc002d37d
c0022c48:	e8 82 fc fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0022c4d:	01 6c 24 18          	add    DWORD PTR [esp+0x18],ebp
c0022c51:	5a                   	pop    edx
c0022c52:	59                   	pop    ecx
c0022c53:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022c57:	68 8e d3 02 c0       	push   0xc002d38e
c0022c5c:	e8 6e fc fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0022c61:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0022c65:	83 c4 10             	add    esp,0x10
c0022c68:	46                   	inc    esi
c0022c69:	83 fe 20             	cmp    esi,0x20
c0022c6c:	0f 85 10 ff ff ff    	jne    c0022b82 <SoundDevice::getAudio(int, float*, float*)+0x66>
c0022c72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022c76:	83 c4 1c             	add    esp,0x1c
c0022c79:	5b                   	pop    ebx
c0022c7a:	5e                   	pop    esi
c0022c7b:	5f                   	pop    edi
c0022c7c:	5d                   	pop    ebp
c0022c7d:	c3                   	ret    

c0022c7e <PCI::open(int, int, void*)>:
c0022c7e:	83 ec 18             	sub    esp,0x18
c0022c81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022c89:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022c8f:	8b 10                	mov    edx,DWORD PTR [eax]
c0022c91:	50                   	push   eax
c0022c92:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022c95:	31 c0                	xor    eax,eax
c0022c97:	83 c4 1c             	add    esp,0x1c
c0022c9a:	c3                   	ret    
c0022c9b:	90                   	nop

c0022c9c <PCI::close(int, int, void*)>:
c0022c9c:	31 c0                	xor    eax,eax
c0022c9e:	c3                   	ret    
c0022c9f:	90                   	nop

c0022ca0 <PCI::PCI()>:
c0022ca0:	83 ec 0c             	sub    esp,0xc
c0022ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ca7:	83 ec 08             	sub    esp,0x8
c0022caa:	68 dc d3 02 c0       	push   0xc002d3dc
c0022caf:	50                   	push   eax
c0022cb0:	e8 bb 08 ff ff       	call   c0013570 <Bus::Bus(char const*)>
c0022cb5:	83 c4 10             	add    esp,0x10
c0022cb8:	ba f0 d4 02 c0       	mov    edx,0xc002d4f0
c0022cbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cc1:	89 10                	mov    DWORD PTR [eax],edx
c0022cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cc7:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cd5:	a3 44 33 03 c0       	mov    ds:0xc0033344,eax
c0022cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cde:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022ce4:	0f b6 d0             	movzx  edx,al
c0022ce7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ceb:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022cf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cf6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022cfc:	0f b6 d0             	movzx  edx,al
c0022cff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d03:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d0c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022d12:	8d 50 01             	lea    edx,[eax+0x1]
c0022d15:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022d19:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022d1f:	0f b6 d0             	movzx  edx,al
c0022d22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d26:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022d2a:	83 c9 c0             	or     ecx,0xffffffc0
c0022d2d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022d31:	90                   	nop
c0022d32:	83 c4 0c             	add    esp,0xc
c0022d35:	c3                   	ret    

c0022d36 <PCI::readBAR8(unsigned int, int)>:
c0022d36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022d3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d3e:	f6 c2 01             	test   dl,0x1
c0022d41:	74 07                	je     c0022d4a <PCI::readBAR8(unsigned int, int)+0x14>
c0022d43:	83 e2 fc             	and    edx,0xfffffffc
c0022d46:	01 c2                	add    edx,eax
c0022d48:	ec                   	in     al,dx
c0022d49:	c3                   	ret    
c0022d4a:	83 e2 f0             	and    edx,0xfffffff0
c0022d4d:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022d50:	c3                   	ret    
c0022d51:	90                   	nop

c0022d52 <PCI::readBAR16(unsigned int, int)>:
c0022d52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022d56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d5a:	f6 c2 01             	test   dl,0x1
c0022d5d:	74 08                	je     c0022d67 <PCI::readBAR16(unsigned int, int)+0x15>
c0022d5f:	83 e2 fc             	and    edx,0xfffffffc
c0022d62:	01 c2                	add    edx,eax
c0022d64:	66 ed                	in     ax,dx
c0022d66:	c3                   	ret    
c0022d67:	83 e2 f0             	and    edx,0xfffffff0
c0022d6a:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022d6e:	c3                   	ret    
c0022d6f:	90                   	nop

c0022d70 <PCI::readBAR32(unsigned int, int)>:
c0022d70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022d74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d78:	f6 c2 01             	test   dl,0x1
c0022d7b:	74 07                	je     c0022d84 <PCI::readBAR32(unsigned int, int)+0x14>
c0022d7d:	83 e2 fc             	and    edx,0xfffffffc
c0022d80:	01 c2                	add    edx,eax
c0022d82:	ed                   	in     eax,dx
c0022d83:	c3                   	ret    
c0022d84:	83 e2 f0             	and    edx,0xfffffff0
c0022d87:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022d8a:	c3                   	ret    
c0022d8b:	90                   	nop

c0022d8c <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022d8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022d90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022d98:	f6 c2 01             	test   dl,0x1
c0022d9b:	74 07                	je     c0022da4 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022d9d:	83 e2 fc             	and    edx,0xfffffffc
c0022da0:	01 ca                	add    edx,ecx
c0022da2:	ee                   	out    dx,al
c0022da3:	c3                   	ret    
c0022da4:	83 e2 f0             	and    edx,0xfffffff0
c0022da7:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022daa:	c3                   	ret    
c0022dab:	90                   	nop

c0022dac <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022dac:	57                   	push   edi
c0022dad:	56                   	push   esi
c0022dae:	53                   	push   ebx
c0022daf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022db3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022db7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022dbb:	f6 c2 01             	test   dl,0x1
c0022dbe:	74 24                	je     c0022de4 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x38>
c0022dc0:	89 d3                	mov    ebx,edx
c0022dc2:	83 e3 fc             	and    ebx,0xfffffffc
c0022dc5:	50                   	push   eax
c0022dc6:	0f b7 c7             	movzx  eax,di
c0022dc9:	50                   	push   eax
c0022dca:	8d 04 33             	lea    eax,[ebx+esi*1]
c0022dcd:	50                   	push   eax
c0022dce:	68 e4 d3 02 c0       	push   0xc002d3e4
c0022dd3:	e8 f7 fa fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0022dd8:	8d 14 33             	lea    edx,[ebx+esi*1]
c0022ddb:	89 f8                	mov    eax,edi
c0022ddd:	66 ef                	out    dx,ax
c0022ddf:	83 c4 10             	add    esp,0x10
c0022de2:	eb 07                	jmp    c0022deb <PCI::writeBAR16(unsigned int, unsigned short, int)+0x3f>
c0022de4:	83 e2 f0             	and    edx,0xfffffff0
c0022de7:	66 89 3c 32          	mov    WORD PTR [edx+esi*1],di
c0022deb:	5b                   	pop    ebx
c0022dec:	5e                   	pop    esi
c0022ded:	5f                   	pop    edi
c0022dee:	c3                   	ret    
c0022def:	90                   	nop

c0022df0 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022df0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022df4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022df8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022dfc:	f6 c2 01             	test   dl,0x1
c0022dff:	74 07                	je     c0022e08 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022e01:	83 e2 fc             	and    edx,0xfffffffc
c0022e04:	01 ca                	add    edx,ecx
c0022e06:	ef                   	out    dx,eax
c0022e07:	c3                   	ret    
c0022e08:	83 e2 f0             	and    edx,0xfffffff0
c0022e0b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022e0e:	c3                   	ret    
c0022e0f:	90                   	nop

c0022e10 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022e10:	55                   	push   ebp
c0022e11:	57                   	push   edi
c0022e12:	56                   	push   esi
c0022e13:	53                   	push   ebx
c0022e14:	83 ec 0c             	sub    esp,0xc
c0022e17:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022e1b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022e1f:	89 f0                	mov    eax,esi
c0022e21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022e25:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022e29:	3c 07                	cmp    al,0x7
c0022e2b:	76 10                	jbe    c0022e3d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0022e2d:	83 ec 0c             	sub    esp,0xc
c0022e30:	68 fb d3 02 c0       	push   0xc002d3fb
c0022e35:	e8 cb 74 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c0022e3a:	83 c4 10             	add    esp,0x10
c0022e3d:	80 fb 0f             	cmp    bl,0xf
c0022e40:	76 10                	jbe    c0022e52 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022e42:	83 ec 0c             	sub    esp,0xc
c0022e45:	68 2b d4 02 c0       	push   0xc002d42b
c0022e4a:	e8 b6 74 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c0022e4f:	83 c4 10             	add    esp,0x10
c0022e52:	8d 04 36             	lea    eax,[esi+esi*1]
c0022e55:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022e5a:	83 c8 f0             	or     eax,0xfffffff0
c0022e5d:	ee                   	out    dx,al
c0022e5e:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022e63:	89 e8                	mov    eax,ebp
c0022e65:	ee                   	out    dx,al
c0022e66:	83 c4 0c             	add    esp,0xc
c0022e69:	89 d8                	mov    eax,ebx
c0022e6b:	66 81 e7 fc 00       	and    di,0xfc
c0022e70:	5b                   	pop    ebx
c0022e71:	c1 e0 08             	shl    eax,0x8
c0022e74:	5e                   	pop    esi
c0022e75:	09 f8                	or     eax,edi
c0022e77:	5f                   	pop    edi
c0022e78:	66 0d 00 c0          	or     ax,0xc000
c0022e7c:	5d                   	pop    ebp
c0022e7d:	c3                   	ret    

c0022e7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022e7e:	57                   	push   edi
c0022e7f:	56                   	push   esi
c0022e80:	53                   	push   ebx
c0022e81:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022e85:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022e89:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022e8f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022e93:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022e97:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022e9b:	83 ff 01             	cmp    edi,0x1
c0022e9e:	75 3e                	jne    c0022ede <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022ea0:	89 de                	mov    esi,ebx
c0022ea2:	0f b6 c0             	movzx  eax,al
c0022ea5:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022eab:	c1 e0 10             	shl    eax,0x10
c0022eae:	0f b6 c9             	movzx  ecx,cl
c0022eb1:	09 f0                	or     eax,esi
c0022eb3:	c1 e1 08             	shl    ecx,0x8
c0022eb6:	0f b6 d2             	movzx  edx,dl
c0022eb9:	09 c8                	or     eax,ecx
c0022ebb:	c1 e2 0b             	shl    edx,0xb
c0022ebe:	09 d0                	or     eax,edx
c0022ec0:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022ec5:	0d 00 00 00 80       	or     eax,0x80000000
c0022eca:	ef                   	out    dx,eax
c0022ecb:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022ed0:	ed                   	in     eax,dx
c0022ed1:	83 e3 02             	and    ebx,0x2
c0022ed4:	0f b6 cb             	movzx  ecx,bl
c0022ed7:	c1 e1 03             	shl    ecx,0x3
c0022eda:	d3 e8                	shr    eax,cl
c0022edc:	eb 43                	jmp    c0022f21 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022ede:	83 ff 02             	cmp    edi,0x2
c0022ee1:	75 2c                	jne    c0022f0f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022ee3:	83 ec 0c             	sub    esp,0xc
c0022ee6:	0f b6 c9             	movzx  ecx,cl
c0022ee9:	0f b6 d2             	movzx  edx,dl
c0022eec:	0f b6 fb             	movzx  edi,bl
c0022eef:	0f b6 c0             	movzx  eax,al
c0022ef2:	57                   	push   edi
c0022ef3:	51                   	push   ecx
c0022ef4:	52                   	push   edx
c0022ef5:	50                   	push   eax
c0022ef6:	56                   	push   esi
c0022ef7:	e8 14 ff ff ff       	call   c0022e10 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022efc:	89 c2                	mov    edx,eax
c0022efe:	ed                   	in     eax,dx
c0022eff:	83 e3 02             	and    ebx,0x2
c0022f02:	83 c4 20             	add    esp,0x20
c0022f05:	0f b6 cb             	movzx  ecx,bl
c0022f08:	c1 e1 03             	shl    ecx,0x3
c0022f0b:	d3 e8                	shr    eax,cl
c0022f0d:	eb 12                	jmp    c0022f21 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022f0f:	83 ec 0c             	sub    esp,0xc
c0022f12:	68 5b d4 02 c0       	push   0xc002d45b
c0022f17:	e8 e9 73 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c0022f1c:	83 c4 10             	add    esp,0x10
c0022f1f:	31 c0                	xor    eax,eax
c0022f21:	5b                   	pop    ebx
c0022f22:	5e                   	pop    esi
c0022f23:	5f                   	pop    edi
c0022f24:	c3                   	ret    
c0022f25:	90                   	nop

c0022f26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022f26:	83 ec 18             	sub    esp,0x18
c0022f29:	6a 00                	push   0x0
c0022f2b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f30:	50                   	push   eax
c0022f31:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f36:	50                   	push   eax
c0022f37:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f3c:	50                   	push   eax
c0022f3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f41:	e8 38 ff ff ff       	call   c0022e7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f46:	83 c4 2c             	add    esp,0x2c
c0022f49:	c3                   	ret    

c0022f4a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022f4a:	83 ec 18             	sub    esp,0x18
c0022f4d:	6a 0e                	push   0xe
c0022f4f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f54:	50                   	push   eax
c0022f55:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f5a:	50                   	push   eax
c0022f5b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f60:	50                   	push   eax
c0022f61:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f65:	e8 14 ff ff ff       	call   c0022e7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f6a:	83 c4 2c             	add    esp,0x2c
c0022f6d:	0f b6 c0             	movzx  eax,al
c0022f70:	c3                   	ret    
c0022f71:	90                   	nop

c0022f72 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022f72:	55                   	push   ebp
c0022f73:	57                   	push   edi
c0022f74:	56                   	push   esi
c0022f75:	53                   	push   ebx
c0022f76:	83 ec 18             	sub    esp,0x18
c0022f79:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022f7e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022f83:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022f88:	6a 0a                	push   0xa
c0022f8a:	56                   	push   esi
c0022f8b:	55                   	push   ebp
c0022f8c:	57                   	push   edi
c0022f8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022f91:	e8 e8 fe ff ff       	call   c0022e7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f96:	83 c4 14             	add    esp,0x14
c0022f99:	89 c3                	mov    ebx,eax
c0022f9b:	6a 0a                	push   0xa
c0022f9d:	0f b6 db             	movzx  ebx,bl
c0022fa0:	56                   	push   esi
c0022fa1:	55                   	push   ebp
c0022fa2:	57                   	push   edi
c0022fa3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022fa7:	e8 d2 fe ff ff       	call   c0022e7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022fac:	83 c4 2c             	add    esp,0x2c
c0022faf:	25 00 ff 00 00       	and    eax,0xff00
c0022fb4:	09 d8                	or     eax,ebx
c0022fb6:	5b                   	pop    ebx
c0022fb7:	5e                   	pop    esi
c0022fb8:	5f                   	pop    edi
c0022fb9:	5d                   	pop    ebp
c0022fba:	c3                   	ret    
c0022fbb:	90                   	nop

c0022fbc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022fbc:	83 ec 18             	sub    esp,0x18
c0022fbf:	6a 08                	push   0x8
c0022fc1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fc6:	50                   	push   eax
c0022fc7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fcc:	50                   	push   eax
c0022fcd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fd2:	50                   	push   eax
c0022fd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022fd7:	e8 a2 fe ff ff       	call   c0022e7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022fdc:	83 c4 2c             	add    esp,0x2c
c0022fdf:	0f b6 c4             	movzx  eax,ah
c0022fe2:	c3                   	ret    
c0022fe3:	90                   	nop

c0022fe4 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022fe4:	83 ec 18             	sub    esp,0x18
c0022fe7:	6a 08                	push   0x8
c0022fe9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fee:	50                   	push   eax
c0022fef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ff4:	50                   	push   eax
c0022ff5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ffa:	50                   	push   eax
c0022ffb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022fff:	e8 7a fe ff ff       	call   c0022e7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023004:	83 c4 2c             	add    esp,0x2c
c0023007:	c3                   	ret    

c0023008 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0023008:	83 ec 18             	sub    esp,0x18
c002300b:	6a 3c                	push   0x3c
c002300d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023012:	50                   	push   eax
c0023013:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023018:	50                   	push   eax
c0023019:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002301e:	50                   	push   eax
c002301f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023023:	e8 56 fe ff ff       	call   c0022e7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023028:	83 c4 2c             	add    esp,0x2c
c002302b:	c3                   	ret    

c002302c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002302c:	83 ec 18             	sub    esp,0x18
c002302f:	6a 18                	push   0x18
c0023031:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023036:	50                   	push   eax
c0023037:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002303c:	50                   	push   eax
c002303d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023042:	50                   	push   eax
c0023043:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023047:	e8 32 fe ff ff       	call   c0022e7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002304c:	83 c4 2c             	add    esp,0x2c
c002304f:	0f b6 c4             	movzx  eax,ah
c0023052:	c3                   	ret    
c0023053:	90                   	nop

c0023054 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0023054:	55                   	push   ebp
c0023055:	57                   	push   edi
c0023056:	56                   	push   esi
c0023057:	53                   	push   ebx
c0023058:	83 ec 28             	sub    esp,0x28
c002305b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002305f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0023064:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0023069:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002306e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0023075:	8d 43 12             	lea    eax,[ebx+0x12]
c0023078:	83 c3 10             	add    ebx,0x10
c002307b:	0f b6 c0             	movzx  eax,al
c002307e:	0f b6 db             	movzx  ebx,bl
c0023081:	50                   	push   eax
c0023082:	51                   	push   ecx
c0023083:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0023087:	57                   	push   edi
c0023088:	55                   	push   ebp
c0023089:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002308d:	e8 ec fd ff ff       	call   c0022e7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023092:	83 c4 14             	add    esp,0x14
c0023095:	89 c6                	mov    esi,eax
c0023097:	53                   	push   ebx
c0023098:	c1 e6 10             	shl    esi,0x10
c002309b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002309f:	51                   	push   ecx
c00230a0:	57                   	push   edi
c00230a1:	55                   	push   ebp
c00230a2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00230a6:	e8 d3 fd ff ff       	call   c0022e7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00230ab:	83 c4 3c             	add    esp,0x3c
c00230ae:	0f b7 c0             	movzx  eax,ax
c00230b1:	5b                   	pop    ebx
c00230b2:	09 f0                	or     eax,esi
c00230b4:	5e                   	pop    esi
c00230b5:	5f                   	pop    edi
c00230b6:	5d                   	pop    ebp
c00230b7:	c3                   	ret    

c00230b8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00230b8:	55                   	push   ebp
c00230b9:	57                   	push   edi
c00230ba:	56                   	push   esi
c00230bb:	53                   	push   ebx
c00230bc:	83 ec 0c             	sub    esp,0xc
c00230bf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00230c3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00230c7:	89 f5                	mov    ebp,esi
c00230c9:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00230cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00230d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00230d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00230db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00230df:	83 f9 01             	cmp    ecx,0x1
c00230e2:	75 5d                	jne    c0023141 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00230e4:	0f b6 c8             	movzx  ecx,al
c00230e7:	0f b6 d2             	movzx  edx,dl
c00230ea:	c1 e1 10             	shl    ecx,0x10
c00230ed:	c1 e2 0b             	shl    edx,0xb
c00230f0:	89 f0                	mov    eax,esi
c00230f2:	25 fc 00 00 00       	and    eax,0xfc
c00230f7:	09 c1                	or     ecx,eax
c00230f9:	89 e8                	mov    eax,ebp
c00230fb:	0f b6 c0             	movzx  eax,al
c00230fe:	c1 e0 08             	shl    eax,0x8
c0023101:	09 c1                	or     ecx,eax
c0023103:	09 d1                	or     ecx,edx
c0023105:	ba f8 0c 00 00       	mov    edx,0xcf8
c002310a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0023110:	89 c8                	mov    eax,ecx
c0023112:	ef                   	out    dx,eax
c0023113:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023118:	ed                   	in     eax,dx
c0023119:	0f b7 db             	movzx  ebx,bx
c002311c:	83 e6 02             	and    esi,0x2
c002311f:	74 0a                	je     c002312b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0023121:	0f b7 d0             	movzx  edx,ax
c0023124:	c1 e3 10             	shl    ebx,0x10
c0023127:	09 d3                	or     ebx,edx
c0023129:	eb 05                	jmp    c0023130 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c002312b:	66 31 c0             	xor    ax,ax
c002312e:	09 c3                	or     ebx,eax
c0023130:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023135:	89 c8                	mov    eax,ecx
c0023137:	ef                   	out    dx,eax
c0023138:	ba fc 0c 00 00       	mov    edx,0xcfc
c002313d:	89 d8                	mov    eax,ebx
c002313f:	eb 41                	jmp    c0023182 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0023141:	83 f9 02             	cmp    ecx,0x2
c0023144:	75 45                	jne    c002318b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0023146:	83 ec 0c             	sub    esp,0xc
c0023149:	0f b6 d2             	movzx  edx,dl
c002314c:	89 f1                	mov    ecx,esi
c002314e:	0f b6 c0             	movzx  eax,al
c0023151:	0f b6 f1             	movzx  esi,cl
c0023154:	89 e9                	mov    ecx,ebp
c0023156:	56                   	push   esi
c0023157:	0f b6 c9             	movzx  ecx,cl
c002315a:	51                   	push   ecx
c002315b:	52                   	push   edx
c002315c:	50                   	push   eax
c002315d:	57                   	push   edi
c002315e:	e8 ad fc ff ff       	call   c0022e10 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023163:	89 c2                	mov    edx,eax
c0023165:	ed                   	in     eax,dx
c0023166:	83 c4 20             	add    esp,0x20
c0023169:	0f b7 db             	movzx  ebx,bx
c002316c:	f6 c2 02             	test   dl,0x2
c002316f:	74 0c                	je     c002317d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0023171:	0f b7 c8             	movzx  ecx,ax
c0023174:	89 d8                	mov    eax,ebx
c0023176:	c1 e0 10             	shl    eax,0x10
c0023179:	09 c8                	or     eax,ecx
c002317b:	eb 05                	jmp    c0023182 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002317d:	66 31 c0             	xor    ax,ax
c0023180:	09 d8                	or     eax,ebx
c0023182:	ef                   	out    dx,eax
c0023183:	83 c4 0c             	add    esp,0xc
c0023186:	5b                   	pop    ebx
c0023187:	5e                   	pop    esi
c0023188:	5f                   	pop    edi
c0023189:	5d                   	pop    ebp
c002318a:	c3                   	ret    
c002318b:	c7 44 24 20 5b d4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002d45b
c0023193:	83 c4 0c             	add    esp,0xc
c0023196:	5b                   	pop    ebx
c0023197:	5e                   	pop    esi
c0023198:	5f                   	pop    edi
c0023199:	5d                   	pop    ebp
c002319a:	e9 66 71 ff ff       	jmp    c001a305 <Krnl::panic(char const*)>
c002319f:	90                   	nop

c00231a0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00231a0:	55                   	push   ebp
c00231a1:	57                   	push   edi
c00231a2:	56                   	push   esi
c00231a3:	53                   	push   ebx
c00231a4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00231aa:	80 3d 50 33 03 c0 00 	cmp    BYTE PTR ds:0xc0033350,0x0
c00231b1:	0f 85 96 00 00 00    	jne    c002324d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xad>
c00231b7:	83 ec 0c             	sub    esp,0xc
c00231ba:	68 14 01 00 00       	push   0x114
c00231bf:	e8 c8 c6 fe ff       	call   c000f88c <malloc>
c00231c4:	83 c4 0c             	add    esp,0xc
c00231c7:	89 c3                	mov    ebx,eax
c00231c9:	ff 35 50 25 03 c0    	push   DWORD PTR ds:0xc0032550
c00231cf:	68 61 d4 02 c0       	push   0xc002d461
c00231d4:	50                   	push   eax
c00231d5:	e8 54 fc fe ff       	call   c0012e2e <File::File(char const*, Process*)>
c00231da:	5a                   	pop    edx
c00231db:	59                   	pop    ecx
c00231dc:	6a 01                	push   0x1
c00231de:	53                   	push   ebx
c00231df:	e8 ae fc fe ff       	call   c0012e92 <File::open(FileOpenMode)>
c00231e4:	83 c4 0c             	add    esp,0xc
c00231e7:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c00231eb:	50                   	push   eax
c00231ec:	8d 44 24 28          	lea    eax,[esp+0x28]
c00231f0:	50                   	push   eax
c00231f1:	53                   	push   ebx
c00231f2:	e8 47 ff fe ff       	call   c001313e <File::stat(unsigned long long*, bool*)>
c00231f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00231fb:	40                   	inc    eax
c00231fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00231ff:	e8 88 c6 fe ff       	call   c000f88c <malloc>
c0023204:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023208:	a3 4c 33 03 c0       	mov    ds:0xc003334c,eax
c002320d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0023211:	5e                   	pop    esi
c0023212:	8b 13                	mov    edx,DWORD PTR [ebx]
c0023214:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0023218:	51                   	push   ecx
c0023219:	50                   	push   eax
c002321a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002321e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0023222:	53                   	push   ebx
c0023223:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0023226:	83 c4 14             	add    esp,0x14
c0023229:	53                   	push   ebx
c002322a:	e8 c1 fc fe ff       	call   c0012ef0 <File::close()>
c002322f:	5f                   	pop    edi
c0023230:	5d                   	pop    ebp
c0023231:	ff 35 4c 33 03 c0    	push   DWORD PTR ds:0xc003334c
c0023237:	68 7a d4 02 c0       	push   0xc002d47a
c002323c:	e8 8e f6 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0023241:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023245:	83 c4 10             	add    esp,0x10
c0023248:	a3 48 33 03 c0       	mov    ds:0xc0033348,eax
c002324d:	a1 48 33 03 c0       	mov    eax,ds:0xc0033348
c0023252:	8b 15 4c 33 03 c0    	mov    edx,DWORD PTR ds:0xc003334c
c0023258:	89 04 24             	mov    DWORD PTR [esp],eax
c002325b:	31 ff                	xor    edi,edi
c002325d:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0023265:	31 f6                	xor    esi,esi
c0023267:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c002326c:	31 db                	xor    ebx,ebx
c002326e:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0023276:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c002327b:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0023282:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0023286:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c002328d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0023291:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0023294:	0f 8e 6b 01 00 00    	jle    c0023405 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c002329a:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c002329d:	d4 40                	aam    0x40
c002329f:	d5 39                	aad    0x39
c00232a1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00232a5:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c00232a9:	d4 40                	aam    0x40
c00232ab:	d5 39                	aad    0x39
c00232ad:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00232b1:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c00232b5:	d4 40                	aam    0x40
c00232b7:	d5 39                	aad    0x39
c00232b9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00232bd:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c00232c1:	d4 40                	aam    0x40
c00232c3:	d5 39                	aad    0x39
c00232c5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00232c9:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c00232cd:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00232d1:	3c 56                	cmp    al,0x56
c00232d3:	74 45                	je     c002331a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x17a>
c00232d5:	d4 40                	aam    0x40
c00232d7:	d5 39                	aad    0x39
c00232d9:	8d 48 d0             	lea    ecx,[eax-0x30]
c00232dc:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c00232e0:	0f b6 c9             	movzx  ecx,cl
c00232e3:	c1 e1 04             	shl    ecx,0x4
c00232e6:	d4 40                	aam    0x40
c00232e8:	d5 39                	aad    0x39
c00232ea:	8d 58 d0             	lea    ebx,[eax-0x30]
c00232ed:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c00232f1:	0f b6 db             	movzx  ebx,bl
c00232f4:	09 cb                	or     ebx,ecx
c00232f6:	c1 e3 04             	shl    ebx,0x4
c00232f9:	d4 40                	aam    0x40
c00232fb:	d5 39                	aad    0x39
c00232fd:	8d 48 d0             	lea    ecx,[eax-0x30]
c0023300:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0023304:	0f b6 c9             	movzx  ecx,cl
c0023307:	09 cb                	or     ebx,ecx
c0023309:	c1 e3 04             	shl    ebx,0x4
c002330c:	89 d9                	mov    ecx,ebx
c002330e:	d4 40                	aam    0x40
c0023310:	d5 39                	aad    0x39
c0023312:	8d 58 d0             	lea    ebx,[eax-0x30]
c0023315:	0f b6 db             	movzx  ebx,bl
c0023318:	09 cb                	or     ebx,ecx
c002331a:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c002331e:	80 f9 44             	cmp    cl,0x44
c0023321:	74 47                	je     c002336a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ca>
c0023323:	88 c8                	mov    al,cl
c0023325:	d4 40                	aam    0x40
c0023327:	d5 39                	aad    0x39
c0023329:	83 e8 30             	sub    eax,0x30
c002332c:	0f b6 e8             	movzx  ebp,al
c002332f:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0023333:	c1 e5 04             	shl    ebp,0x4
c0023336:	d4 40                	aam    0x40
c0023338:	d5 39                	aad    0x39
c002333a:	83 e8 30             	sub    eax,0x30
c002333d:	0f b6 f0             	movzx  esi,al
c0023340:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0023344:	09 ee                	or     esi,ebp
c0023346:	c1 e6 04             	shl    esi,0x4
c0023349:	d4 40                	aam    0x40
c002334b:	d5 39                	aad    0x39
c002334d:	83 e8 30             	sub    eax,0x30
c0023350:	0f b6 e8             	movzx  ebp,al
c0023353:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0023357:	09 ee                	or     esi,ebp
c0023359:	c1 e6 04             	shl    esi,0x4
c002335c:	89 f5                	mov    ebp,esi
c002335e:	d4 40                	aam    0x40
c0023360:	d5 39                	aad    0x39
c0023362:	83 e8 30             	sub    eax,0x30
c0023365:	0f b6 f0             	movzx  esi,al
c0023368:	09 ee                	or     esi,ebp
c002336a:	83 c7 10             	add    edi,0x10
c002336d:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0023371:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0023374:	3c 0a                	cmp    al,0xa
c0023376:	74 09                	je     c0023381 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e1>
c0023378:	45                   	inc    ebp
c0023379:	39 3c 24             	cmp    DWORD PTR [esp],edi
c002337c:	75 16                	jne    c0023394 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f4>
c002337e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0023381:	3c 0a                	cmp    al,0xa
c0023383:	0f 94 c0             	sete   al
c0023386:	0f b6 c0             	movzx  eax,al
c0023389:	01 c7                	add    edi,eax
c002338b:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0023390:	75 0c                	jne    c002339e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1fe>
c0023392:	eb 15                	jmp    c00233a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c0023394:	47                   	inc    edi
c0023395:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0023398:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c002339c:	eb d3                	jmp    c0023371 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1d1>
c002339e:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c00233a3:	0f 85 e8 fe ff ff    	jne    c0023291 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00233a9:	80 f9 44             	cmp    cl,0x44
c00233ac:	74 0b                	je     c00233b9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x219>
c00233ae:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c00233b3:	0f 85 d8 fe ff ff    	jne    c0023291 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00233b9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00233bd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00233c1:	c1 e1 04             	shl    ecx,0x4
c00233c4:	83 e8 30             	sub    eax,0x30
c00233c7:	09 c8                	or     eax,ecx
c00233c9:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c00233cd:	0f 85 be fe ff ff    	jne    c0023291 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00233d3:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c00233d7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00233db:	c1 e1 04             	shl    ecx,0x4
c00233de:	83 e8 30             	sub    eax,0x30
c00233e1:	09 c8                	or     eax,ecx
c00233e3:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c00233e7:	0f 85 a4 fe ff ff    	jne    c0023291 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c00233ed:	50                   	push   eax
c00233ee:	50                   	push   eax
c00233ef:	8d 44 24 28          	lea    eax,[esp+0x28]
c00233f3:	50                   	push   eax
c00233f4:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c00233fb:	e8 0c d4 fd ff       	call   c000080c <strcpy>
c0023400:	83 c4 10             	add    esp,0x10
c0023403:	eb 15                	jmp    c002341a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x27a>
c0023405:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c002340c:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0023417:	c6 00 00             	mov    BYTE PTR [eax],0x0
c002341a:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0023421:	81 c4 2c 01 00 00    	add    esp,0x12c
c0023427:	5b                   	pop    ebx
c0023428:	5e                   	pop    esi
c0023429:	5f                   	pop    edi
c002342a:	5d                   	pop    ebp
c002342b:	c3                   	ret    

c002342c <PCI::checkBus(unsigned char)>:
c002342c:	56                   	push   esi
c002342d:	53                   	push   ebx
c002342e:	31 db                	xor    ebx,ebx
c0023430:	51                   	push   ecx
c0023431:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023436:	52                   	push   edx
c0023437:	53                   	push   ebx
c0023438:	43                   	inc    ebx
c0023439:	56                   	push   esi
c002343a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002343e:	e8 37 03 00 00       	call   c002377a <PCI::checkDevice(unsigned char, unsigned char)>
c0023443:	83 c4 10             	add    esp,0x10
c0023446:	83 fb 20             	cmp    ebx,0x20
c0023449:	75 eb                	jne    c0023436 <PCI::checkBus(unsigned char)+0xa>
c002344b:	58                   	pop    eax
c002344c:	5b                   	pop    ebx
c002344d:	5e                   	pop    esi
c002344e:	c3                   	ret    
c002344f:	90                   	nop

c0023450 <PCI::foundDevice(PCIDeviceInfo)>:
c0023450:	55                   	push   ebp
c0023451:	57                   	push   edi
c0023452:	56                   	push   esi
c0023453:	53                   	push   ebx
c0023454:	83 ec 1c             	sub    esp,0x1c
c0023457:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002345b:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0023461:	0f 84 52 01 00 00    	je     c00235b9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0023467:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002346b:	66 81 f9 06 04       	cmp    cx,0x406
c0023470:	75 2c                	jne    c002349e <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0023472:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0023477:	50                   	push   eax
c0023478:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002347d:	50                   	push   eax
c002347e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0023483:	50                   	push   eax
c0023484:	56                   	push   esi
c0023485:	e8 a2 fb ff ff       	call   c002302c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002348a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002348e:	0f b6 c0             	movzx  eax,al
c0023491:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0023495:	83 c4 2c             	add    esp,0x2c
c0023498:	5b                   	pop    ebx
c0023499:	5e                   	pop    esi
c002349a:	5f                   	pop    edi
c002349b:	5d                   	pop    ebp
c002349c:	eb 8e                	jmp    c002342c <PCI::checkBus(unsigned char)>
c002349e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00234a2:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00234a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00234ac:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00234b0:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00234b4:	88 d3                	mov    bl,dl
c00234b6:	85 c0                	test   eax,eax
c00234b8:	74 33                	je     c00234ed <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00234ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00234bd:	85 d2                	test   edx,edx
c00234bf:	74 28                	je     c00234e9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00234c1:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c00234c7:	31 ef                	xor    edi,ebp
c00234c9:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c00234cf:	75 18                	jne    c00234e9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00234d1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00234d5:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c00234db:	75 0c                	jne    c00234e9 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c00234dd:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c00234e3:	0f 84 d0 00 00 00    	je     c00235b9 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00234e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00234eb:	eb c9                	jmp    c00234b6 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c00234ed:	66 81 f9 01 06       	cmp    cx,0x601
c00234f2:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00234f6:	75 19                	jne    c0023511 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00234f8:	83 ec 0c             	sub    esp,0xc
c00234fb:	68 64 01 00 00       	push   0x164
c0023500:	e8 87 c3 fe ff       	call   c000f88c <malloc>
c0023505:	89 c5                	mov    ebp,eax
c0023507:	89 04 24             	mov    DWORD PTR [esp],eax
c002350a:	e8 a1 0f 00 00       	call   c00244b0 <SATABus::SATABus()>
c002350f:	eb 1e                	jmp    c002352f <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0023511:	66 81 f9 01 01       	cmp    cx,0x101
c0023516:	75 60                	jne    c0023578 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0023518:	83 ec 0c             	sub    esp,0xc
c002351b:	68 70 02 00 00       	push   0x270
c0023520:	e8 67 c3 fe ff       	call   c000f88c <malloc>
c0023525:	89 c5                	mov    ebp,eax
c0023527:	89 04 24             	mov    DWORD PTR [esp],eax
c002352a:	e8 0f 03 00 00       	call   c002383e <IDE::IDE()>
c002352f:	58                   	pop    eax
c0023530:	5a                   	pop    edx
c0023531:	55                   	push   ebp
c0023532:	56                   	push   esi
c0023533:	e8 d0 07 ff ff       	call   c0013d08 <Device::addChild(Device*)>
c0023538:	83 ec 1c             	sub    esp,0x1c
c002353b:	b9 09 00 00 00       	mov    ecx,0x9
c0023540:	fc                   	cld    
c0023541:	89 e7                	mov    edi,esp
c0023543:	89 de                	mov    esi,ebx
c0023545:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023547:	55                   	push   ebp
c0023548:	e8 cd 06 ff ff       	call   c0013c1a <Device::preOpenPCI(PCIDeviceInfo)>
c002354d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023550:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0023554:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002355c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0023564:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002356c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002356f:	83 c4 4c             	add    esp,0x4c
c0023572:	5b                   	pop    ebx
c0023573:	5e                   	pop    esi
c0023574:	5f                   	pop    edi
c0023575:	5d                   	pop    ebp
c0023576:	ff e0                	jmp    eax
c0023578:	83 ec 0c             	sub    esp,0xc
c002357b:	68 58 01 00 00       	push   0x158
c0023580:	e8 07 c3 fe ff       	call   c000f88c <malloc>
c0023585:	89 c5                	mov    ebp,eax
c0023587:	58                   	pop    eax
c0023588:	5a                   	pop    edx
c0023589:	68 8c d4 02 c0       	push   0xc002d48c
c002358e:	55                   	push   ebp
c002358f:	e8 7e 0a ff ff       	call   c0014012 <DriverlessDevice::DriverlessDevice(char const*)>
c0023594:	59                   	pop    ecx
c0023595:	5f                   	pop    edi
c0023596:	55                   	push   ebp
c0023597:	56                   	push   esi
c0023598:	e8 6b 07 ff ff       	call   c0013d08 <Device::addChild(Device*)>
c002359d:	b9 09 00 00 00       	mov    ecx,0x9
c00235a2:	fc                   	cld    
c00235a3:	89 df                	mov    edi,ebx
c00235a5:	89 de                	mov    esi,ebx
c00235a7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00235a9:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00235ad:	83 c4 2c             	add    esp,0x2c
c00235b0:	5b                   	pop    ebx
c00235b1:	5e                   	pop    esi
c00235b2:	5f                   	pop    edi
c00235b3:	5d                   	pop    ebp
c00235b4:	e9 61 06 ff ff       	jmp    c0013c1a <Device::preOpenPCI(PCIDeviceInfo)>
c00235b9:	83 c4 1c             	add    esp,0x1c
c00235bc:	5b                   	pop    ebx
c00235bd:	5e                   	pop    esi
c00235be:	5f                   	pop    edi
c00235bf:	5d                   	pop    ebp
c00235c0:	c3                   	ret    
c00235c1:	90                   	nop

c00235c2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c00235c2:	55                   	push   ebp
c00235c3:	57                   	push   edi
c00235c4:	56                   	push   esi
c00235c5:	53                   	push   ebx
c00235c6:	83 ec 68             	sub    esp,0x68
c00235c9:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c00235cd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00235d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00235d8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00235df:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c00235e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00235e8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00235ef:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00235f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00235f8:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c00235fd:	6a 0c                	push   0xc
c00235ff:	57                   	push   edi
c0023600:	53                   	push   ebx
c0023601:	56                   	push   esi
c0023602:	55                   	push   ebp
c0023603:	e8 76 f8 ff ff       	call   c0022e7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023608:	83 c4 20             	add    esp,0x20
c002360b:	57                   	push   edi
c002360c:	53                   	push   ebx
c002360d:	56                   	push   esi
c002360e:	55                   	push   ebp
c002360f:	e8 5e f9 ff ff       	call   c0022f72 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0023614:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0023619:	57                   	push   edi
c002361a:	53                   	push   ebx
c002361b:	56                   	push   esi
c002361c:	55                   	push   ebp
c002361d:	e8 e6 f9 ff ff       	call   c0023008 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0023622:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0023626:	83 c4 14             	add    esp,0x14
c0023629:	6a 3c                	push   0x3c
c002362b:	57                   	push   edi
c002362c:	53                   	push   ebx
c002362d:	56                   	push   esi
c002362e:	55                   	push   ebp
c002362f:	e8 4a f8 ff ff       	call   c0022e7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023634:	0f b6 c4             	movzx  eax,ah
c0023637:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002363b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002363f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0023643:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0023648:	83 c4 20             	add    esp,0x20
c002364b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0023651:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0023658:	74 7c                	je     c00236d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c002365a:	31 c0                	xor    eax,eax
c002365c:	8b 15 08 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f008
c0023662:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023668:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c002366e:	7e 66                	jle    c00236d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0023670:	8d 14 c2             	lea    edx,[edx+eax*8]
c0023673:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c002367a:	39 cb                	cmp    ebx,ecx
c002367c:	75 55                	jne    c00236d3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c002367e:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0023685:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0023689:	75 48                	jne    c00236d3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c002368b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002368f:	83 ec 0c             	sub    esp,0xc
c0023692:	68 a6 d4 02 c0       	push   0xc002d4a6
c0023697:	e8 33 f2 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c002369c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00236a0:	8b 15 08 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f008
c00236a6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00236aa:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00236b0:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c00236b8:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c00236bc:	52                   	push   edx
c00236bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00236c1:	53                   	push   ebx
c00236c2:	68 cb d4 02 c0       	push   0xc002d4cb
c00236c7:	e8 03 f2 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00236cc:	83 c4 20             	add    esp,0x20
c00236cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00236d3:	40                   	inc    eax
c00236d4:	eb 86                	jmp    c002365c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c00236d6:	31 d2                	xor    edx,edx
c00236d8:	83 ec 0c             	sub    esp,0xc
c00236db:	57                   	push   edi
c00236dc:	53                   	push   ebx
c00236dd:	56                   	push   esi
c00236de:	52                   	push   edx
c00236df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00236e3:	55                   	push   ebp
c00236e4:	e8 6b f9 ff ff       	call   c0023054 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c00236e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00236ed:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c00236f1:	42                   	inc    edx
c00236f2:	83 c4 20             	add    esp,0x20
c00236f5:	83 fa 06             	cmp    edx,0x6
c00236f8:	75 de                	jne    c00236d8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c00236fa:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00236ff:	83 ec 0c             	sub    esp,0xc
c0023702:	86 e0                	xchg   al,ah
c0023704:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0023709:	6a 02                	push   0x2
c002370b:	57                   	push   edi
c002370c:	53                   	push   ebx
c002370d:	56                   	push   esi
c002370e:	55                   	push   ebp
c002370f:	e8 6a f7 ff ff       	call   c0022e7e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023714:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0023719:	83 c4 20             	add    esp,0x20
c002371c:	57                   	push   edi
c002371d:	53                   	push   ebx
c002371e:	56                   	push   esi
c002371f:	55                   	push   ebp
c0023720:	e8 97 f8 ff ff       	call   c0022fbc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0023725:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023729:	57                   	push   edi
c002372a:	53                   	push   ebx
c002372b:	56                   	push   esi
c002372c:	55                   	push   ebp
c002372d:	e8 f4 f7 ff ff       	call   c0022f26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023732:	b9 09 00 00 00       	mov    ecx,0x9
c0023737:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c002373c:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0023740:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0023744:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0023748:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c002374c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0023750:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0023754:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0023758:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c002375c:	83 ec 0c             	sub    esp,0xc
c002375f:	fc                   	cld    
c0023760:	89 e7                	mov    edi,esp
c0023762:	8d 74 24 58          	lea    esi,[esp+0x58]
c0023766:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023768:	55                   	push   ebp
c0023769:	e8 e2 fc ff ff       	call   c0023450 <PCI::foundDevice(PCIDeviceInfo)>
c002376e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0023774:	5b                   	pop    ebx
c0023775:	5e                   	pop    esi
c0023776:	5f                   	pop    edi
c0023777:	5d                   	pop    ebp
c0023778:	c3                   	ret    
c0023779:	90                   	nop

c002377a <PCI::checkDevice(unsigned char, unsigned char)>:
c002377a:	55                   	push   ebp
c002377b:	57                   	push   edi
c002377c:	56                   	push   esi
c002377d:	53                   	push   ebx
c002377e:	83 ec 0c             	sub    esp,0xc
c0023781:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0023785:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002378a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002378f:	6a 00                	push   0x0
c0023791:	56                   	push   esi
c0023792:	57                   	push   edi
c0023793:	55                   	push   ebp
c0023794:	e8 8d f7 ff ff       	call   c0022f26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023799:	6a 00                	push   0x0
c002379b:	56                   	push   esi
c002379c:	57                   	push   edi
c002379d:	55                   	push   ebp
c002379e:	e8 1f fe ff ff       	call   c00235c2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00237a3:	83 c4 20             	add    esp,0x20
c00237a6:	6a 00                	push   0x0
c00237a8:	56                   	push   esi
c00237a9:	57                   	push   edi
c00237aa:	55                   	push   ebp
c00237ab:	e8 9a f7 ff ff       	call   c0022f4a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00237b0:	83 c4 10             	add    esp,0x10
c00237b3:	84 c0                	test   al,al
c00237b5:	79 27                	jns    c00237de <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00237b7:	bb 01 00 00 00       	mov    ebx,0x1
c00237bc:	53                   	push   ebx
c00237bd:	56                   	push   esi
c00237be:	57                   	push   edi
c00237bf:	55                   	push   ebp
c00237c0:	e8 61 f7 ff ff       	call   c0022f26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00237c5:	83 c4 10             	add    esp,0x10
c00237c8:	66 40                	inc    ax
c00237ca:	74 0c                	je     c00237d8 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00237cc:	53                   	push   ebx
c00237cd:	56                   	push   esi
c00237ce:	57                   	push   edi
c00237cf:	55                   	push   ebp
c00237d0:	e8 ed fd ff ff       	call   c00235c2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00237d5:	83 c4 10             	add    esp,0x10
c00237d8:	43                   	inc    ebx
c00237d9:	83 fb 08             	cmp    ebx,0x8
c00237dc:	75 de                	jne    c00237bc <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c00237de:	83 c4 0c             	add    esp,0xc
c00237e1:	5b                   	pop    ebx
c00237e2:	5e                   	pop    esi
c00237e3:	5f                   	pop    edi
c00237e4:	5d                   	pop    ebp
c00237e5:	c3                   	ret    

c00237e6 <PCI::detect()>:
c00237e6:	56                   	push   esi
c00237e7:	53                   	push   ebx
c00237e8:	53                   	push   ebx
c00237e9:	31 db                	xor    ebx,ebx
c00237eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00237ef:	6a 00                	push   0x0
c00237f1:	6a 00                	push   0x0
c00237f3:	6a 00                	push   0x0
c00237f5:	56                   	push   esi
c00237f6:	e8 4f f7 ff ff       	call   c0022f4a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00237fb:	83 c4 10             	add    esp,0x10
c00237fe:	a8 80                	test   al,0x80
c0023800:	75 21                	jne    c0023823 <PCI::detect()+0x3d>
c0023802:	51                   	push   ecx
c0023803:	51                   	push   ecx
c0023804:	6a 00                	push   0x0
c0023806:	56                   	push   esi
c0023807:	e8 20 fc ff ff       	call   c002342c <PCI::checkBus(unsigned char)>
c002380c:	83 c4 10             	add    esp,0x10
c002380f:	eb 24                	jmp    c0023835 <PCI::detect()+0x4f>
c0023811:	52                   	push   edx
c0023812:	52                   	push   edx
c0023813:	53                   	push   ebx
c0023814:	43                   	inc    ebx
c0023815:	56                   	push   esi
c0023816:	e8 11 fc ff ff       	call   c002342c <PCI::checkBus(unsigned char)>
c002381b:	83 c4 10             	add    esp,0x10
c002381e:	83 fb 08             	cmp    ebx,0x8
c0023821:	74 12                	je     c0023835 <PCI::detect()+0x4f>
c0023823:	53                   	push   ebx
c0023824:	6a 00                	push   0x0
c0023826:	6a 00                	push   0x0
c0023828:	56                   	push   esi
c0023829:	e8 f8 f6 ff ff       	call   c0022f26 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002382e:	83 c4 10             	add    esp,0x10
c0023831:	66 40                	inc    ax
c0023833:	74 dc                	je     c0023811 <PCI::detect()+0x2b>
c0023835:	58                   	pop    eax
c0023836:	5b                   	pop    ebx
c0023837:	5e                   	pop    esi
c0023838:	c3                   	ret    
c0023839:	90                   	nop

c002383a <IDE::close(int, int, void*)>:
c002383a:	83 c8 ff             	or     eax,0xffffffff
c002383d:	c3                   	ret    

c002383e <IDE::IDE()>:
c002383e:	83 ec 0c             	sub    esp,0xc
c0023841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023845:	83 ec 08             	sub    esp,0x8
c0023848:	68 14 d5 02 c0       	push   0xc002d514
c002384d:	50                   	push   eax
c002384e:	e8 63 08 ff ff       	call   c00140b6 <HardDiskController::HardDiskController(char const*)>
c0023853:	83 c4 10             	add    esp,0x10
c0023856:	ba 54 d7 02 c0       	mov    edx,0xc002d754
c002385b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002385f:	89 10                	mov    DWORD PTR [eax],edx
c0023861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023865:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002386c:	90                   	nop
c002386d:	83 c4 0c             	add    esp,0xc
c0023870:	c3                   	ret    
c0023871:	90                   	nop

c0023872 <IDE::prepareInterrupt(unsigned char)>:
c0023872:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023877:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002387b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023883:	c3                   	ret    

c0023884 <selectDrive(unsigned char, unsigned char)>:
c0023884:	c3                   	ret    
c0023885:	90                   	nop

c0023886 <IDE::getBase(unsigned char)>:
c0023886:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002388b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002388f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023897:	c3                   	ret    

c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023898:	55                   	push   ebp
c0023899:	57                   	push   edi
c002389a:	56                   	push   esi
c002389b:	53                   	push   ebx
c002389c:	83 ec 1c             	sub    esp,0x1c
c002389f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00238a3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00238a7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00238aa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00238ae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00238b2:	80 f9 03             	cmp    cl,0x3
c00238b5:	77 51                	ja     c0023908 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00238b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00238bb:	0f b6 f2             	movzx  esi,dl
c00238be:	0f b6 db             	movzx  ebx,bl
c00238c1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00238c4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00238c8:	83 ca 80             	or     edx,0xffffff80
c00238cb:	0f b6 d2             	movzx  edx,dl
c00238ce:	52                   	push   edx
c00238cf:	6a 0c                	push   0xc
c00238d1:	56                   	push   esi
c00238d2:	57                   	push   edi
c00238d3:	e8 c0 ff ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238d8:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00238dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00238e1:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00238e5:	ee                   	out    dx,al
c00238e6:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00238eb:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00238ef:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00238f3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00238f7:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00238ff:	83 c4 2c             	add    esp,0x2c
c0023902:	5b                   	pop    ebx
c0023903:	5e                   	pop    esi
c0023904:	5f                   	pop    edi
c0023905:	5d                   	pop    ebp
c0023906:	eb 90                	jmp    c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023908:	80 fb 07             	cmp    bl,0x7
c002390b:	77 12                	ja     c002391f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002390d:	0f b6 d2             	movzx  edx,dl
c0023910:	0f b6 db             	movzx  ebx,bl
c0023913:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c002391b:	89 da                	mov    edx,ebx
c002391d:	eb 2f                	jmp    c002394e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002391f:	80 fb 0d             	cmp    bl,0xd
c0023922:	77 13                	ja     c0023937 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023924:	0f b6 d2             	movzx  edx,dl
c0023927:	0f b6 db             	movzx  ebx,bl
c002392a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023931:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023935:	eb 17                	jmp    c002394e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023937:	80 fb 15             	cmp    bl,0x15
c002393a:	77 13                	ja     c002394f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002393c:	0f b6 d2             	movzx  edx,dl
c002393f:	0f b6 db             	movzx  ebx,bl
c0023942:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c002394a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002394e:	ee                   	out    dx,al
c002394f:	83 c4 1c             	add    esp,0x1c
c0023952:	5b                   	pop    ebx
c0023953:	5e                   	pop    esi
c0023954:	5f                   	pop    edi
c0023955:	5d                   	pop    ebp
c0023956:	c3                   	ret    
c0023957:	90                   	nop

c0023958 <IDE::read(unsigned char, unsigned char)>:
c0023958:	55                   	push   ebp
c0023959:	57                   	push   edi
c002395a:	56                   	push   esi
c002395b:	53                   	push   ebx
c002395c:	83 ec 1c             	sub    esp,0x1c
c002395f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023963:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023967:	8d 43 f8             	lea    eax,[ebx-0x8]
c002396a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002396e:	3c 03                	cmp    al,0x3
c0023970:	77 43                	ja     c00239b5 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023972:	0f b6 f2             	movzx  esi,dl
c0023975:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023978:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c002397c:	83 c8 80             	or     eax,0xffffff80
c002397f:	0f b6 c0             	movzx  eax,al
c0023982:	50                   	push   eax
c0023983:	6a 0c                	push   0xc
c0023985:	56                   	push   esi
c0023986:	57                   	push   edi
c0023987:	e8 0c ff ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002398c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023991:	0f b6 c3             	movzx  eax,bl
c0023994:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023998:	ec                   	in     al,dx
c0023999:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002399d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00239a2:	52                   	push   edx
c00239a3:	6a 0c                	push   0xc
c00239a5:	56                   	push   esi
c00239a6:	57                   	push   edi
c00239a7:	e8 ec fe ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00239ac:	83 c4 20             	add    esp,0x20
c00239af:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00239b3:	eb 49                	jmp    c00239fe <IDE::read(unsigned char, unsigned char)+0xa6>
c00239b5:	80 fb 07             	cmp    bl,0x7
c00239b8:	77 12                	ja     c00239cc <IDE::read(unsigned char, unsigned char)+0x74>
c00239ba:	0f b6 d2             	movzx  edx,dl
c00239bd:	0f b6 c3             	movzx  eax,bl
c00239c0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00239c8:	89 c2                	mov    edx,eax
c00239ca:	eb 31                	jmp    c00239fd <IDE::read(unsigned char, unsigned char)+0xa5>
c00239cc:	80 fb 0d             	cmp    bl,0xd
c00239cf:	77 13                	ja     c00239e4 <IDE::read(unsigned char, unsigned char)+0x8c>
c00239d1:	0f b6 d2             	movzx  edx,dl
c00239d4:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00239db:	0f b6 d3             	movzx  edx,bl
c00239de:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00239e2:	eb 19                	jmp    c00239fd <IDE::read(unsigned char, unsigned char)+0xa5>
c00239e4:	31 c0                	xor    eax,eax
c00239e6:	80 fb 15             	cmp    bl,0x15
c00239e9:	77 13                	ja     c00239fe <IDE::read(unsigned char, unsigned char)+0xa6>
c00239eb:	0f b6 d2             	movzx  edx,dl
c00239ee:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00239f6:	0f b6 d3             	movzx  edx,bl
c00239f9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00239fd:	ec                   	in     al,dx
c00239fe:	83 c4 1c             	add    esp,0x1c
c0023a01:	5b                   	pop    ebx
c0023a02:	5e                   	pop    esi
c0023a03:	5f                   	pop    edi
c0023a04:	5d                   	pop    ebp
c0023a05:	c3                   	ret    

c0023a06 <IDE::waitInterrupt(unsigned char)>:
c0023a06:	55                   	push   ebp
c0023a07:	57                   	push   edi
c0023a08:	56                   	push   esi
c0023a09:	53                   	push   ebx
c0023a0a:	31 db                	xor    ebx,ebx
c0023a0c:	83 ec 0c             	sub    esp,0xc
c0023a0f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023a13:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023a18:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023a20:	89 e8                	mov    eax,ebp
c0023a22:	84 c0                	test   al,al
c0023a24:	75 34                	jne    c0023a5a <IDE::waitInterrupt(unsigned char)+0x54>
c0023a26:	52                   	push   edx
c0023a27:	6a 0c                	push   0xc
c0023a29:	56                   	push   esi
c0023a2a:	57                   	push   edi
c0023a2b:	e8 28 ff ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c0023a30:	83 c4 10             	add    esp,0x10
c0023a33:	a8 01                	test   al,0x1
c0023a35:	75 2b                	jne    c0023a62 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023a37:	f6 c3 04             	test   bl,0x4
c0023a3a:	75 16                	jne    c0023a52 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023a3c:	83 fb 32             	cmp    ebx,0x32
c0023a3f:	7e 11                	jle    c0023a52 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023a41:	50                   	push   eax
c0023a42:	50                   	push   eax
c0023a43:	6a 00                	push   0x0
c0023a45:	68 80 96 98 00       	push   0x989680
c0023a4a:	e8 6c a9 ff ff       	call   c001e3bb <nanoSleep(unsigned long long)>
c0023a4f:	83 c4 10             	add    esp,0x10
c0023a52:	83 fb 3c             	cmp    ebx,0x3c
c0023a55:	74 0b                	je     c0023a62 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023a57:	43                   	inc    ebx
c0023a58:	eb be                	jmp    c0023a18 <IDE::waitInterrupt(unsigned char)+0x12>
c0023a5a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023a62:	83 c4 0c             	add    esp,0xc
c0023a65:	89 e8                	mov    eax,ebp
c0023a67:	5b                   	pop    ebx
c0023a68:	5e                   	pop    esi
c0023a69:	5f                   	pop    edi
c0023a6a:	5d                   	pop    ebp
c0023a6b:	c3                   	ret    

c0023a6c <ideChannel0IRQHandler(regs*, void*)>:
c0023a6c:	83 ec 10             	sub    esp,0x10
c0023a6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a73:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023a7a:	6a 07                	push   0x7
c0023a7c:	6a 00                	push   0x0
c0023a7e:	50                   	push   eax
c0023a7f:	e8 d4 fe ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c0023a84:	83 c4 1c             	add    esp,0x1c
c0023a87:	c3                   	ret    

c0023a88 <ideChannel1IRQHandler(regs*, void*)>:
c0023a88:	83 ec 10             	sub    esp,0x10
c0023a8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a8f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023a96:	6a 07                	push   0x7
c0023a98:	6a 01                	push   0x1
c0023a9a:	50                   	push   eax
c0023a9b:	e8 b8 fe ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c0023aa0:	83 c4 1c             	add    esp,0x1c
c0023aa3:	c3                   	ret    

c0023aa4 <IDE::enableIRQs(unsigned char, bool)>:
c0023aa4:	57                   	push   edi
c0023aa5:	56                   	push   esi
c0023aa6:	be 04 00 00 00       	mov    esi,0x4
c0023aab:	53                   	push   ebx
c0023aac:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023ab1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023ab5:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023aba:	0f 94 c0             	sete   al
c0023abd:	d1 e0                	shl    eax,1
c0023abf:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023ac6:	0f b6 c0             	movzx  eax,al
c0023ac9:	50                   	push   eax
c0023aca:	6a 0c                	push   0xc
c0023acc:	57                   	push   edi
c0023acd:	53                   	push   ebx
c0023ace:	e8 c5 fd ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ad3:	83 c4 10             	add    esp,0x10
c0023ad6:	50                   	push   eax
c0023ad7:	6a 0c                	push   0xc
c0023ad9:	57                   	push   edi
c0023ada:	53                   	push   ebx
c0023adb:	e8 78 fe ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c0023ae0:	83 c4 10             	add    esp,0x10
c0023ae3:	4e                   	dec    esi
c0023ae4:	75 f0                	jne    c0023ad6 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023ae6:	5b                   	pop    ebx
c0023ae7:	5e                   	pop    esi
c0023ae8:	5f                   	pop    edi
c0023ae9:	c3                   	ret    

c0023aea <IDE::open(int, int, void*)>:
c0023aea:	55                   	push   ebp
c0023aeb:	57                   	push   edi
c0023aec:	56                   	push   esi
c0023aed:	53                   	push   ebx
c0023aee:	83 ec 1c             	sub    esp,0x1c
c0023af1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023af5:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023afe:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023b07:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023b0e:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023b15:	0f 85 b0 02 00 00    	jne    c0023dcb <IDE::open(int, int, void*)+0x2e1>
c0023b1b:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023b21:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023b25:	83 e0 7f             	and    eax,0x7f
c0023b28:	3c 05                	cmp    al,0x5
c0023b2a:	74 04                	je     c0023b30 <IDE::open(int, int, void*)+0x46>
c0023b2c:	3c 0f                	cmp    al,0xf
c0023b2e:	75 32                	jne    c0023b62 <IDE::open(int, int, void*)+0x78>
c0023b30:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023b36:	83 e0 fc             	and    eax,0xfffffffc
c0023b39:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023b40:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023b46:	83 e0 fc             	and    eax,0xfffffffc
c0023b49:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023b50:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023b56:	83 e0 fc             	and    eax,0xfffffffc
c0023b59:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023b60:	eb 14                	jmp    c0023b76 <IDE::open(int, int, void*)+0x8c>
c0023b62:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023b6c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023b76:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023b7d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023b84:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023b88:	89 c6                	mov    esi,eax
c0023b8a:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023b8f:	c1 e6 10             	shl    esi,0x10
c0023b92:	89 e8                	mov    eax,ebp
c0023b94:	89 fa                	mov    edx,edi
c0023b96:	c1 e0 0b             	shl    eax,0xb
c0023b99:	09 f0                	or     eax,esi
c0023b9b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023ba2:	c1 e6 08             	shl    esi,0x8
c0023ba5:	09 c6                	or     esi,eax
c0023ba7:	89 f0                	mov    eax,esi
c0023ba9:	0d 08 00 00 80       	or     eax,0x80000008
c0023bae:	ef                   	out    dx,eax
c0023baf:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023bb4:	89 ca                	mov    edx,ecx
c0023bb6:	ed                   	in     eax,dx
c0023bb7:	c1 e8 10             	shr    eax,0x10
c0023bba:	3d ff ff 00 00       	cmp    eax,0xffff
c0023bbf:	0f 84 f5 00 00 00    	je     c0023cba <IDE::open(int, int, void*)+0x1d0>
c0023bc5:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023bcb:	89 fa                	mov    edx,edi
c0023bcd:	89 f0                	mov    eax,esi
c0023bcf:	ef                   	out    dx,eax
c0023bd0:	b0 fe                	mov    al,0xfe
c0023bd2:	89 ca                	mov    edx,ecx
c0023bd4:	ee                   	out    dx,al
c0023bd5:	89 f0                	mov    eax,esi
c0023bd7:	89 fa                	mov    edx,edi
c0023bd9:	ef                   	out    dx,eax
c0023bda:	89 ca                	mov    edx,ecx
c0023bdc:	ed                   	in     eax,dx
c0023bdd:	3c fe                	cmp    al,0xfe
c0023bdf:	0f 85 a9 00 00 00    	jne    c0023c8e <IDE::open(int, int, void*)+0x1a4>
c0023be5:	8b 15 08 f0 02 c0    	mov    edx,DWORD PTR ds:0xc002f008
c0023beb:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023bf2:	74 33                	je     c0023c27 <IDE::open(int, int, void*)+0x13d>
c0023bf4:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023bfa:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023bfe:	40                   	inc    eax
c0023bff:	83 ec 0c             	sub    esp,0xc
c0023c02:	0f b6 c0             	movzx  eax,al
c0023c05:	50                   	push   eax
c0023c06:	55                   	push   ebp
c0023c07:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023c0b:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023c11:	51                   	push   ecx
c0023c12:	e8 a1 41 ff ff       	call   c0017db8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023c17:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023c1c:	83 c4 1c             	add    esp,0x1c
c0023c1f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023c25:	eb 0a                	jmp    c0023c31 <IDE::open(int, int, void*)+0x147>
c0023c27:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023c31:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023c38:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023c3f:	c1 e1 10             	shl    ecx,0x10
c0023c42:	c1 e0 08             	shl    eax,0x8
c0023c45:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023c4a:	09 c1                	or     ecx,eax
c0023c4c:	89 fa                	mov    edx,edi
c0023c4e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023c55:	c1 e0 0b             	shl    eax,0xb
c0023c58:	09 c1                	or     ecx,eax
c0023c5a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023c60:	89 c8                	mov    eax,ecx
c0023c62:	ef                   	out    dx,eax
c0023c63:	be fc 0c 00 00       	mov    esi,0xcfc
c0023c68:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023c6e:	89 f2                	mov    edx,esi
c0023c70:	ee                   	out    dx,al
c0023c71:	89 c8                	mov    eax,ecx
c0023c73:	89 fa                	mov    edx,edi
c0023c75:	ef                   	out    dx,eax
c0023c76:	89 f2                	mov    edx,esi
c0023c78:	ed                   	in     eax,dx
c0023c79:	0f b6 c0             	movzx  eax,al
c0023c7c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023c82:	74 46                	je     c0023cca <IDE::open(int, int, void*)+0x1e0>
c0023c84:	83 ec 0c             	sub    esp,0xc
c0023c87:	68 2c d5 02 c0       	push   0xc002d52c
c0023c8c:	eb 34                	jmp    c0023cc2 <IDE::open(int, int, void*)+0x1d8>
c0023c8e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023c97:	75 17                	jne    c0023cb0 <IDE::open(int, int, void*)+0x1c6>
c0023c99:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023c9e:	74 07                	je     c0023ca7 <IDE::open(int, int, void*)+0x1bd>
c0023ca0:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023ca5:	75 09                	jne    c0023cb0 <IDE::open(int, int, void*)+0x1c6>
c0023ca7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023cae:	eb 1a                	jmp    c0023cca <IDE::open(int, int, void*)+0x1e0>
c0023cb0:	83 ec 0c             	sub    esp,0xc
c0023cb3:	68 34 d5 02 c0       	push   0xc002d534
c0023cb8:	eb 08                	jmp    c0023cc2 <IDE::open(int, int, void*)+0x1d8>
c0023cba:	83 ec 0c             	sub    esp,0xc
c0023cbd:	68 65 d5 02 c0       	push   0xc002d565
c0023cc2:	e8 3e 66 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c0023cc7:	83 c4 10             	add    esp,0x10
c0023cca:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023cd1:	79 1a                	jns    c0023ced <IDE::open(int, int, void*)+0x203>
c0023cd3:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023cd9:	83 e0 fc             	and    eax,0xfffffffc
c0023cdc:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023ce3:	83 c0 08             	add    eax,0x8
c0023ce6:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023ced:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023cf3:	89 c2                	mov    edx,eax
c0023cf5:	83 e2 0f             	and    edx,0xf
c0023cf8:	66 83 fa 08          	cmp    dx,0x8
c0023cfc:	75 0a                	jne    c0023d08 <IDE::open(int, int, void*)+0x21e>
c0023cfe:	83 e8 02             	sub    eax,0x2
c0023d01:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023d08:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023d0e:	89 c2                	mov    edx,eax
c0023d10:	83 e2 0f             	and    edx,0xf
c0023d13:	66 83 fa 08          	cmp    dx,0x8
c0023d17:	75 0a                	jne    c0023d23 <IDE::open(int, int, void*)+0x239>
c0023d19:	83 e8 02             	sub    eax,0x2
c0023d1c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023d23:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023d2a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023d31:	89 d0                	mov    eax,edx
c0023d33:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023d36:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023d3a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023d3e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023d41:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023d46:	0f b6 c9             	movzx  ecx,cl
c0023d49:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023d50:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023d53:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023d57:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023d5b:	8d 50 02             	lea    edx,[eax+0x2]
c0023d5e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023d63:	0f b6 d2             	movzx  edx,dl
c0023d66:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023d6c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023d6f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023d73:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023d77:	8d 48 03             	lea    ecx,[eax+0x3]
c0023d7a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023d7f:	0f b6 c9             	movzx  ecx,cl
c0023d82:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023d88:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023d8b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023d8f:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023d93:	8d 50 04             	lea    edx,[eax+0x4]
c0023d96:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023d9c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023da1:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023da8:	66 85 f6             	test   si,si
c0023dab:	74 3e                	je     c0023deb <IDE::open(int, int, void*)+0x301>
c0023dad:	0f b6 d2             	movzx  edx,dl
c0023db0:	83 c0 05             	add    eax,0x5
c0023db3:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023db6:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023dba:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023dbe:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023dc4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023dc9:	eb 20                	jmp    c0023deb <IDE::open(int, int, void*)+0x301>
c0023dcb:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023dd5:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023ddf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023de6:	e9 02 ff ff ff       	jmp    c0023ced <IDE::open(int, int, void*)+0x203>
c0023deb:	52                   	push   edx
c0023dec:	52                   	push   edx
c0023ded:	6a 00                	push   0x0
c0023def:	53                   	push   ebx
c0023df0:	e8 7d fa ff ff       	call   c0023872 <IDE::prepareInterrupt(unsigned char)>
c0023df5:	59                   	pop    ecx
c0023df6:	5e                   	pop    esi
c0023df7:	6a 01                	push   0x1
c0023df9:	53                   	push   ebx
c0023dfa:	e8 73 fa ff ff       	call   c0023872 <IDE::prepareInterrupt(unsigned char)>
c0023dff:	83 c4 0c             	add    esp,0xc
c0023e02:	6a 00                	push   0x0
c0023e04:	6a 00                	push   0x0
c0023e06:	53                   	push   ebx
c0023e07:	e8 98 fc ff ff       	call   c0023aa4 <IDE::enableIRQs(unsigned char, bool)>
c0023e0c:	83 c4 0c             	add    esp,0xc
c0023e0f:	6a 00                	push   0x0
c0023e11:	6a 01                	push   0x1
c0023e13:	53                   	push   ebx
c0023e14:	e8 8b fc ff ff       	call   c0023aa4 <IDE::enableIRQs(unsigned char, bool)>
c0023e19:	83 c4 10             	add    esp,0x10
c0023e1c:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023e23:	74 40                	je     c0023e65 <IDE::open(int, int, void*)+0x37b>
c0023e25:	83 ec 0c             	sub    esp,0xc
c0023e28:	68 8f d5 02 c0       	push   0xc002d58f
c0023e2d:	e8 9d ea fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0023e32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023e35:	6a 01                	push   0x1
c0023e37:	68 6c 3a 02 c0       	push   0xc0023a6c
c0023e3c:	6a 0e                	push   0xe
c0023e3e:	53                   	push   ebx
c0023e3f:	e8 3c fe fe ff       	call   c0013c80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e44:	83 c4 14             	add    esp,0x14
c0023e47:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023e4d:	53                   	push   ebx
c0023e4e:	6a 01                	push   0x1
c0023e50:	68 88 3a 02 c0       	push   0xc0023a88
c0023e55:	6a 0f                	push   0xf
c0023e57:	53                   	push   ebx
c0023e58:	e8 23 fe fe ff       	call   c0013c80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e5d:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023e63:	eb 4a                	jmp    c0023eaf <IDE::open(int, int, void*)+0x3c5>
c0023e65:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023e6f:	50                   	push   eax
c0023e70:	6a 0f                	push   0xf
c0023e72:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023e78:	68 ab d5 02 c0       	push   0xc002d5ab
c0023e7d:	e8 4d ea fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0023e82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023e85:	6a 00                	push   0x0
c0023e87:	68 6c 3a 02 c0       	push   0xc0023a6c
c0023e8c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023e92:	53                   	push   ebx
c0023e93:	e8 e8 fd fe ff       	call   c0013c80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e98:	83 c4 14             	add    esp,0x14
c0023e9b:	53                   	push   ebx
c0023e9c:	6a 00                	push   0x0
c0023e9e:	68 88 3a 02 c0       	push   0xc0023a88
c0023ea3:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023ea9:	53                   	push   ebx
c0023eaa:	e8 d1 fd fe ff       	call   c0013c80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023eaf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023eb1:	83 c4 20             	add    esp,0x20
c0023eb4:	83 ec 0c             	sub    esp,0xc
c0023eb7:	53                   	push   ebx
c0023eb8:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023ebb:	83 c4 0c             	add    esp,0xc
c0023ebe:	6a 07                	push   0x7
c0023ec0:	6a 00                	push   0x0
c0023ec2:	53                   	push   ebx
c0023ec3:	e8 90 fa ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c0023ec8:	83 c4 0c             	add    esp,0xc
c0023ecb:	6a 07                	push   0x7
c0023ecd:	6a 01                	push   0x1
c0023ecf:	53                   	push   ebx
c0023ed0:	e8 83 fa ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c0023ed5:	83 c4 0c             	add    esp,0xc
c0023ed8:	6a 01                	push   0x1
c0023eda:	6a 00                	push   0x0
c0023edc:	53                   	push   ebx
c0023edd:	e8 c2 fb ff ff       	call   c0023aa4 <IDE::enableIRQs(unsigned char, bool)>
c0023ee2:	83 c4 0c             	add    esp,0xc
c0023ee5:	6a 01                	push   0x1
c0023ee7:	6a 01                	push   0x1
c0023ee9:	53                   	push   ebx
c0023eea:	e8 b5 fb ff ff       	call   c0023aa4 <IDE::enableIRQs(unsigned char, bool)>
c0023eef:	83 c4 2c             	add    esp,0x2c
c0023ef2:	31 c0                	xor    eax,eax
c0023ef4:	5b                   	pop    ebx
c0023ef5:	5e                   	pop    esi
c0023ef6:	5f                   	pop    edi
c0023ef7:	5d                   	pop    ebp
c0023ef8:	c3                   	ret    
c0023ef9:	90                   	nop

c0023efa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023efa:	55                   	push   ebp
c0023efb:	57                   	push   edi
c0023efc:	56                   	push   esi
c0023efd:	53                   	push   ebx
c0023efe:	83 ec 1c             	sub    esp,0x1c
c0023f01:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023f05:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023f09:	8d 50 f8             	lea    edx,[eax-0x8]
c0023f0c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023f10:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023f14:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023f18:	80 fa 03             	cmp    dl,0x3
c0023f1b:	77 5d                	ja     c0023f7a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023f1d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023f21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023f25:	0f b6 db             	movzx  ebx,bl
c0023f28:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023f2b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023f2f:	83 ca 80             	or     edx,0xffffff80
c0023f32:	0f b6 d2             	movzx  edx,dl
c0023f35:	52                   	push   edx
c0023f36:	6a 0c                	push   0xc
c0023f38:	53                   	push   ebx
c0023f39:	56                   	push   esi
c0023f3a:	e8 59 f9 ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f3f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023f44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023f48:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023f4c:	0f b6 c0             	movzx  eax,al
c0023f4f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023f53:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023f55:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023f5a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023f5e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023f62:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023f66:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023f6e:	83 c4 2c             	add    esp,0x2c
c0023f71:	5b                   	pop    ebx
c0023f72:	5e                   	pop    esi
c0023f73:	5f                   	pop    edi
c0023f74:	5d                   	pop    ebp
c0023f75:	e9 1e f9 ff ff       	jmp    c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f7a:	3c 07                	cmp    al,0x7
c0023f7c:	77 10                	ja     c0023f8e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023f7e:	0f b6 db             	movzx  ebx,bl
c0023f81:	0f b6 d0             	movzx  edx,al
c0023f84:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023f8c:	eb 2d                	jmp    c0023fbb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023f8e:	3c 0d                	cmp    al,0xd
c0023f90:	77 13                	ja     c0023fa5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023f92:	0f b6 db             	movzx  ebx,bl
c0023f95:	0f b6 c0             	movzx  eax,al
c0023f98:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023f9f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023fa3:	eb 16                	jmp    c0023fbb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023fa5:	3c 15                	cmp    al,0x15
c0023fa7:	77 14                	ja     c0023fbd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023fa9:	0f b6 db             	movzx  ebx,bl
c0023fac:	0f b6 c0             	movzx  eax,al
c0023faf:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023fb7:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023fbb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023fbd:	83 c4 1c             	add    esp,0x1c
c0023fc0:	5b                   	pop    ebx
c0023fc1:	5e                   	pop    esi
c0023fc2:	5f                   	pop    edi
c0023fc3:	5d                   	pop    ebp
c0023fc4:	c3                   	ret    
c0023fc5:	90                   	nop

c0023fc6 <IDE::detect()>:
c0023fc6:	55                   	push   ebp
c0023fc7:	57                   	push   edi
c0023fc8:	56                   	push   esi
c0023fc9:	53                   	push   ebx
c0023fca:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023fd0:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023fd7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023fde:	0f 85 be 02 00 00    	jne    c00242a2 <IDE::detect()+0x2dc>
c0023fe4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023feb:	31 f6                	xor    esi,esi
c0023fed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023ff5:	31 ed                	xor    ebp,ebp
c0023ff7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023ffb:	c1 e0 06             	shl    eax,0x6
c0023ffe:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0024006:	89 e8                	mov    eax,ebp
c0024008:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002400c:	c1 e0 04             	shl    eax,0x4
c002400f:	83 c8 a0             	or     eax,0xffffffa0
c0024012:	0f b6 c0             	movzx  eax,al
c0024015:	50                   	push   eax
c0024016:	6a 06                	push   0x6
c0024018:	56                   	push   esi
c0024019:	53                   	push   ebx
c002401a:	e8 79 f8 ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002401f:	83 c4 0c             	add    esp,0xc
c0024022:	6a 0c                	push   0xc
c0024024:	56                   	push   esi
c0024025:	53                   	push   ebx
c0024026:	e8 2d f9 ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c002402b:	83 c4 0c             	add    esp,0xc
c002402e:	6a 0c                	push   0xc
c0024030:	56                   	push   esi
c0024031:	53                   	push   ebx
c0024032:	e8 21 f9 ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c0024037:	83 c4 0c             	add    esp,0xc
c002403a:	6a 0c                	push   0xc
c002403c:	56                   	push   esi
c002403d:	53                   	push   ebx
c002403e:	e8 15 f9 ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c0024043:	83 c4 0c             	add    esp,0xc
c0024046:	6a 0c                	push   0xc
c0024048:	56                   	push   esi
c0024049:	53                   	push   ebx
c002404a:	e8 09 f9 ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c002404f:	68 ec 00 00 00       	push   0xec
c0024054:	6a 07                	push   0x7
c0024056:	56                   	push   esi
c0024057:	53                   	push   ebx
c0024058:	e8 3b f8 ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002405d:	83 c4 1c             	add    esp,0x1c
c0024060:	6a 0c                	push   0xc
c0024062:	56                   	push   esi
c0024063:	53                   	push   ebx
c0024064:	e8 ef f8 ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c0024069:	83 c4 0c             	add    esp,0xc
c002406c:	6a 0c                	push   0xc
c002406e:	56                   	push   esi
c002406f:	53                   	push   ebx
c0024070:	e8 e3 f8 ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c0024075:	83 c4 0c             	add    esp,0xc
c0024078:	6a 0c                	push   0xc
c002407a:	56                   	push   esi
c002407b:	53                   	push   ebx
c002407c:	e8 d7 f8 ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c0024081:	83 c4 0c             	add    esp,0xc
c0024084:	6a 0c                	push   0xc
c0024086:	56                   	push   esi
c0024087:	53                   	push   ebx
c0024088:	e8 cb f8 ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c002408d:	83 c4 0c             	add    esp,0xc
c0024090:	6a 0c                	push   0xc
c0024092:	56                   	push   esi
c0024093:	53                   	push   ebx
c0024094:	e8 bf f8 ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c0024099:	83 c4 10             	add    esp,0x10
c002409c:	84 c0                	test   al,al
c002409e:	0f 84 8b 01 00 00    	je     c002422f <IDE::detect()+0x269>
c00240a4:	31 ff                	xor    edi,edi
c00240a6:	50                   	push   eax
c00240a7:	6a 0c                	push   0xc
c00240a9:	56                   	push   esi
c00240aa:	53                   	push   ebx
c00240ab:	e8 a8 f8 ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c00240b0:	83 c4 10             	add    esp,0x10
c00240b3:	a8 01                	test   al,0x1
c00240b5:	0f 85 8e 01 00 00    	jne    c0024249 <IDE::detect()+0x283>
c00240bb:	84 c0                	test   al,al
c00240bd:	78 04                	js     c00240c3 <IDE::detect()+0xfd>
c00240bf:	a8 08                	test   al,0x8
c00240c1:	75 27                	jne    c00240ea <IDE::detect()+0x124>
c00240c3:	47                   	inc    edi
c00240c4:	81 ff 17 01 00 00    	cmp    edi,0x117
c00240ca:	7e da                	jle    c00240a6 <IDE::detect()+0xe0>
c00240cc:	50                   	push   eax
c00240cd:	50                   	push   eax
c00240ce:	6a 00                	push   0x0
c00240d0:	68 40 4b 4c 00       	push   0x4c4b40
c00240d5:	e8 e1 a2 ff ff       	call   c001e3bb <nanoSleep(unsigned long long)>
c00240da:	83 c4 10             	add    esp,0x10
c00240dd:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00240e3:	75 c1                	jne    c00240a6 <IDE::detect()+0xe0>
c00240e5:	e9 5f 01 00 00       	jmp    c0024249 <IDE::detect()+0x283>
c00240ea:	31 c9                	xor    ecx,ecx
c00240ec:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00240f0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00240f4:	83 ec 0c             	sub    esp,0xc
c00240f7:	68 80 00 00 00       	push   0x80
c00240fc:	57                   	push   edi
c00240fd:	6a 00                	push   0x0
c00240ff:	56                   	push   esi
c0024100:	53                   	push   ebx
c0024101:	e8 f4 fd ff ff       	call   c0023efa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0024106:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002410b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002410f:	89 d1                	mov    ecx,edx
c0024111:	c1 e0 06             	shl    eax,0x6
c0024114:	01 d8                	add    eax,ebx
c0024116:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002411d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0024124:	89 f2                	mov    edx,esi
c0024126:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002412c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0024130:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0024136:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002413a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0024141:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0024149:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0024150:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0024158:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002415e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0024165:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002416b:	8d 54 24 58          	lea    edx,[esp+0x58]
c002416f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0024173:	83 c4 20             	add    esp,0x20
c0024176:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0024179:	83 c0 02             	add    eax,0x2
c002417c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0024182:	83 c7 02             	add    edi,0x2
c0024185:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0024188:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002418e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0024192:	75 e2                	jne    c0024176 <IDE::detect()+0x1b0>
c0024194:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024198:	c1 e0 06             	shl    eax,0x6
c002419b:	01 d8                	add    eax,ebx
c002419d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00241a3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00241aa:	66 c1 ea 09          	shr    dx,0x9
c00241ae:	83 e2 01             	and    edx,0x1
c00241b1:	84 c9                	test   cl,cl
c00241b3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00241b9:	75 2f                	jne    c00241ea <IDE::detect()+0x224>
c00241bb:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00241c1:	85 c0                	test   eax,eax
c00241c3:	74 66                	je     c002422b <IDE::detect()+0x265>
c00241c5:	50                   	push   eax
c00241c6:	55                   	push   ebp
c00241c7:	56                   	push   esi
c00241c8:	68 c7 d5 02 c0       	push   0xc002d5c7
c00241cd:	e8 fd e6 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00241d2:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00241d9:	e8 ae b6 fe ff       	call   c000f88c <malloc>
c00241de:	89 c7                	mov    edi,eax
c00241e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00241e3:	e8 78 06 00 00       	call   c0024860 <ATA::ATA()>
c00241e8:	eb 28                	jmp    c0024212 <IDE::detect()+0x24c>
c00241ea:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00241f0:	55                   	push   ebp
c00241f1:	56                   	push   esi
c00241f2:	68 f6 d5 02 c0       	push   0xc002d5f6
c00241f7:	e8 d3 e6 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00241fc:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024203:	e8 84 b6 fe ff       	call   c000f88c <malloc>
c0024208:	89 c7                	mov    edi,eax
c002420a:	89 04 24             	mov    DWORD PTR [esp],eax
c002420d:	e8 56 0c 00 00       	call   c0024e68 <ATAPI::ATAPI()>
c0024212:	5a                   	pop    edx
c0024213:	59                   	pop    ecx
c0024214:	57                   	push   edi
c0024215:	53                   	push   ebx
c0024216:	e8 ed fa fe ff       	call   c0013d08 <Device::addChild(Device*)>
c002421b:	8b 07                	mov    eax,DWORD PTR [edi]
c002421d:	53                   	push   ebx
c002421e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024222:	6a 00                	push   0x0
c0024224:	57                   	push   edi
c0024225:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024228:	83 c4 20             	add    esp,0x20
c002422b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002422f:	4d                   	dec    ebp
c0024230:	74 0a                	je     c002423c <IDE::detect()+0x276>
c0024232:	bd 01 00 00 00       	mov    ebp,0x1
c0024237:	e9 bb fd ff ff       	jmp    c0023ff7 <IDE::detect()+0x31>
c002423c:	4e                   	dec    esi
c002423d:	74 63                	je     c00242a2 <IDE::detect()+0x2dc>
c002423f:	be 01 00 00 00       	mov    esi,0x1
c0024244:	e9 ac fd ff ff       	jmp    c0023ff5 <IDE::detect()+0x2f>
c0024249:	50                   	push   eax
c002424a:	6a 04                	push   0x4
c002424c:	56                   	push   esi
c002424d:	53                   	push   ebx
c002424e:	e8 05 f7 ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c0024253:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0024257:	83 c4 0c             	add    esp,0xc
c002425a:	6a 05                	push   0x5
c002425c:	56                   	push   esi
c002425d:	53                   	push   ebx
c002425e:	e8 f5 f6 ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c0024263:	83 c4 10             	add    esp,0x10
c0024266:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c002426a:	80 fa 14             	cmp    dl,0x14
c002426d:	75 04                	jne    c0024273 <IDE::detect()+0x2ad>
c002426f:	3c eb                	cmp    al,0xeb
c0024271:	eb 07                	jmp    c002427a <IDE::detect()+0x2b4>
c0024273:	3c 96                	cmp    al,0x96
c0024275:	75 b8                	jne    c002422f <IDE::detect()+0x269>
c0024277:	80 fa 69             	cmp    dl,0x69
c002427a:	75 b3                	jne    c002422f <IDE::detect()+0x269>
c002427c:	68 a1 00 00 00       	push   0xa1
c0024281:	6a 07                	push   0x7
c0024283:	56                   	push   esi
c0024284:	53                   	push   ebx
c0024285:	e8 0e f6 ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002428a:	5f                   	pop    edi
c002428b:	58                   	pop    eax
c002428c:	6a 00                	push   0x0
c002428e:	68 40 42 0f 00       	push   0xf4240
c0024293:	e8 23 a1 ff ff       	call   c001e3bb <nanoSleep(unsigned long long)>
c0024298:	83 c4 10             	add    esp,0x10
c002429b:	b1 01                	mov    cl,0x1
c002429d:	e9 4a fe ff ff       	jmp    c00240ec <IDE::detect()+0x126>
c00242a2:	81 c4 1c 02 00 00    	add    esp,0x21c
c00242a8:	5b                   	pop    ebx
c00242a9:	5e                   	pop    esi
c00242aa:	5f                   	pop    edi
c00242ab:	5d                   	pop    ebp
c00242ac:	c3                   	ret    
c00242ad:	90                   	nop

c00242ae <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00242ae:	55                   	push   ebp
c00242af:	57                   	push   edi
c00242b0:	56                   	push   esi
c00242b1:	53                   	push   ebx
c00242b2:	83 ec 1c             	sub    esp,0x1c
c00242b5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00242b9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00242bd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00242c1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00242c5:	88 c3                	mov    bl,al
c00242c7:	84 c0                	test   al,al
c00242c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00242cd:	0f 84 67 01 00 00    	je     c002443a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00242d3:	83 ec 0c             	sub    esp,0xc
c00242d6:	68 27 d6 02 c0       	push   0xc002d627
c00242db:	e8 ef e5 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00242e0:	83 c4 10             	add    esp,0x10
c00242e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00242e7:	3c 01                	cmp    al,0x1
c00242e9:	75 17                	jne    c0024302 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00242eb:	83 ec 0c             	sub    esp,0xc
c00242ee:	b3 13                	mov    bl,0x13
c00242f0:	68 33 d6 02 c0       	push   0xc002d633
c00242f5:	e8 d5 e5 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00242fa:	83 c4 10             	add    esp,0x10
c00242fd:	e9 25 01 00 00       	jmp    c0024427 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024302:	3c 02                	cmp    al,0x2
c0024304:	0f 85 ef 00 00 00    	jne    c00243f9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c002430a:	d1 e6                	shl    esi,1
c002430c:	09 ee                	or     esi,ebp
c002430e:	52                   	push   edx
c002430f:	89 f0                	mov    eax,esi
c0024311:	6a 01                	push   0x1
c0024313:	0f b6 f0             	movzx  esi,al
c0024316:	c1 e6 06             	shl    esi,0x6
c0024319:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0024321:	50                   	push   eax
c0024322:	57                   	push   edi
c0024323:	e8 30 f6 ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c0024328:	83 c4 10             	add    esp,0x10
c002432b:	89 c6                	mov    esi,eax
c002432d:	a8 01                	test   al,0x1
c002432f:	74 12                	je     c0024343 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0024331:	83 ec 0c             	sub    esp,0xc
c0024334:	b3 07                	mov    bl,0x7
c0024336:	68 48 d6 02 c0       	push   0xc002d648
c002433b:	e8 8f e5 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0024340:	83 c4 10             	add    esp,0x10
c0024343:	f7 c6 02 00 00 00    	test   esi,0x2
c0024349:	74 12                	je     c002435d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c002434b:	83 ec 0c             	sub    esp,0xc
c002434e:	b3 03                	mov    bl,0x3
c0024350:	68 66 d6 02 c0       	push   0xc002d666
c0024355:	e8 75 e5 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c002435a:	83 c4 10             	add    esp,0x10
c002435d:	f7 c6 04 00 00 00    	test   esi,0x4
c0024363:	74 12                	je     c0024377 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0024365:	83 ec 0c             	sub    esp,0xc
c0024368:	b3 14                	mov    bl,0x14
c002436a:	68 86 d6 02 c0       	push   0xc002d686
c002436f:	e8 5b e5 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0024374:	83 c4 10             	add    esp,0x10
c0024377:	f7 c6 08 00 00 00    	test   esi,0x8
c002437d:	74 12                	je     c0024391 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c002437f:	83 ec 0c             	sub    esp,0xc
c0024382:	b3 03                	mov    bl,0x3
c0024384:	68 66 d6 02 c0       	push   0xc002d666
c0024389:	e8 41 e5 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c002438e:	83 c4 10             	add    esp,0x10
c0024391:	f7 c6 10 00 00 00    	test   esi,0x10
c0024397:	74 12                	je     c00243ab <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0024399:	83 ec 0c             	sub    esp,0xc
c002439c:	b3 15                	mov    bl,0x15
c002439e:	68 9e d6 02 c0       	push   0xc002d69e
c00243a3:	e8 27 e5 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00243a8:	83 c4 10             	add    esp,0x10
c00243ab:	f7 c6 20 00 00 00    	test   esi,0x20
c00243b1:	74 12                	je     c00243c5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00243b3:	83 ec 0c             	sub    esp,0xc
c00243b6:	b3 03                	mov    bl,0x3
c00243b8:	68 66 d6 02 c0       	push   0xc002d666
c00243bd:	e8 0d e5 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00243c2:	83 c4 10             	add    esp,0x10
c00243c5:	f7 c6 40 00 00 00    	test   esi,0x40
c00243cb:	74 12                	je     c00243df <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c00243cd:	83 ec 0c             	sub    esp,0xc
c00243d0:	b3 16                	mov    bl,0x16
c00243d2:	68 b8 d6 02 c0       	push   0xc002d6b8
c00243d7:	e8 f3 e4 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00243dc:	83 c4 10             	add    esp,0x10
c00243df:	89 f0                	mov    eax,esi
c00243e1:	84 c0                	test   al,al
c00243e3:	79 42                	jns    c0024427 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00243e5:	83 ec 0c             	sub    esp,0xc
c00243e8:	b3 0d                	mov    bl,0xd
c00243ea:	68 d9 d6 02 c0       	push   0xc002d6d9
c00243ef:	e8 db e4 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00243f4:	83 c4 10             	add    esp,0x10
c00243f7:	eb 2e                	jmp    c0024427 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00243f9:	3c 03                	cmp    al,0x3
c00243fb:	75 14                	jne    c0024411 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c00243fd:	83 ec 0c             	sub    esp,0xc
c0024400:	b3 17                	mov    bl,0x17
c0024402:	68 ed d6 02 c0       	push   0xc002d6ed
c0024407:	e8 c3 e4 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c002440c:	83 c4 10             	add    esp,0x10
c002440f:	eb 16                	jmp    c0024427 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024411:	3c 04                	cmp    al,0x4
c0024413:	75 12                	jne    c0024427 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024415:	83 ec 0c             	sub    esp,0xc
c0024418:	b3 08                	mov    bl,0x8
c002441a:	68 03 d7 02 c0       	push   0xc002d703
c002441f:	e8 ab e4 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0024424:	83 c4 10             	add    esp,0x10
c0024427:	50                   	push   eax
c0024428:	50                   	push   eax
c0024429:	0f b6 c3             	movzx  eax,bl
c002442c:	50                   	push   eax
c002442d:	68 1b d7 02 c0       	push   0xc002d71b
c0024432:	e8 98 e4 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0024437:	83 c4 10             	add    esp,0x10
c002443a:	83 c4 1c             	add    esp,0x1c
c002443d:	88 d8                	mov    al,bl
c002443f:	5b                   	pop    ebx
c0024440:	5e                   	pop    esi
c0024441:	5f                   	pop    edi
c0024442:	5d                   	pop    ebp
c0024443:	c3                   	ret    

c0024444 <IDE::polling(unsigned char, unsigned int)>:
c0024444:	57                   	push   edi
c0024445:	56                   	push   esi
c0024446:	53                   	push   ebx
c0024447:	bb 04 00 00 00       	mov    ebx,0x4
c002444c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0024450:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0024455:	52                   	push   edx
c0024456:	6a 0c                	push   0xc
c0024458:	56                   	push   esi
c0024459:	57                   	push   edi
c002445a:	e8 f9 f4 ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c002445f:	83 c4 10             	add    esp,0x10
c0024462:	4b                   	dec    ebx
c0024463:	75 f0                	jne    c0024455 <IDE::polling(unsigned char, unsigned int)+0x11>
c0024465:	bb a0 86 01 00       	mov    ebx,0x186a0
c002446a:	50                   	push   eax
c002446b:	6a 0c                	push   0xc
c002446d:	56                   	push   esi
c002446e:	57                   	push   edi
c002446f:	e8 e4 f4 ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c0024474:	83 c4 10             	add    esp,0x10
c0024477:	a8 01                	test   al,0x1
c0024479:	74 12                	je     c002448d <IDE::polling(unsigned char, unsigned int)+0x49>
c002447b:	83 ec 0c             	sub    esp,0xc
c002447e:	68 35 d7 02 c0       	push   0xc002d735
c0024483:	e8 47 e4 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0024488:	83 c4 10             	add    esp,0x10
c002448b:	eb 17                	jmp    c00244a4 <IDE::polling(unsigned char, unsigned int)+0x60>
c002448d:	a8 20                	test   al,0x20
c002448f:	75 0f                	jne    c00244a0 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0024491:	4b                   	dec    ebx
c0024492:	74 10                	je     c00244a4 <IDE::polling(unsigned char, unsigned int)+0x60>
c0024494:	84 c0                	test   al,al
c0024496:	78 d2                	js     c002446a <IDE::polling(unsigned char, unsigned int)+0x26>
c0024498:	a8 08                	test   al,0x8
c002449a:	74 ce                	je     c002446a <IDE::polling(unsigned char, unsigned int)+0x26>
c002449c:	31 c0                	xor    eax,eax
c002449e:	eb 06                	jmp    c00244a6 <IDE::polling(unsigned char, unsigned int)+0x62>
c00244a0:	b0 01                	mov    al,0x1
c00244a2:	eb 02                	jmp    c00244a6 <IDE::polling(unsigned char, unsigned int)+0x62>
c00244a4:	b0 02                	mov    al,0x2
c00244a6:	5b                   	pop    ebx
c00244a7:	5e                   	pop    esi
c00244a8:	5f                   	pop    edi
c00244a9:	c3                   	ret    

c00244aa <SATABus::close(int, int, void*)>:
c00244aa:	31 c0                	xor    eax,eax
c00244ac:	c3                   	ret    
c00244ad:	90                   	nop

c00244ae <SATABus::detect()>:
c00244ae:	c3                   	ret    
c00244af:	90                   	nop

c00244b0 <SATABus::SATABus()>:
c00244b0:	83 ec 0c             	sub    esp,0xc
c00244b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244b7:	83 ec 08             	sub    esp,0x8
c00244ba:	68 78 d7 02 c0       	push   0xc002d778
c00244bf:	50                   	push   eax
c00244c0:	e8 f1 fb fe ff       	call   c00140b6 <HardDiskController::HardDiskController(char const*)>
c00244c5:	83 c4 10             	add    esp,0x10
c00244c8:	ba 34 d8 02 c0       	mov    edx,0xc002d834
c00244cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244d1:	89 10                	mov    DWORD PTR [eax],edx
c00244d3:	83 ec 0c             	sub    esp,0xc
c00244d6:	6a 50                	push   0x50
c00244d8:	e8 69 b7 fe ff       	call   c000fc46 <Phys::allocateContiguousPages(int)>
c00244dd:	83 c4 10             	add    esp,0x10
c00244e0:	89 c2                	mov    edx,eax
c00244e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244e6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00244ec:	83 ec 0c             	sub    esp,0xc
c00244ef:	6a 50                	push   0x50
c00244f1:	e8 d3 cf fe ff       	call   c00114c9 <Virt::allocateKernelVirtualPages(int)>
c00244f6:	83 c4 10             	add    esp,0x10
c00244f9:	89 c2                	mov    edx,eax
c00244fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244ff:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024505:	a1 70 f1 02 c0       	mov    eax,ds:0xc002f170
c002450a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002450e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0024514:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024518:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002451e:	83 ec 0c             	sub    esp,0xc
c0024521:	6a 03                	push   0x3
c0024523:	6a 50                	push   0x50
c0024525:	51                   	push   ecx
c0024526:	52                   	push   edx
c0024527:	50                   	push   eax
c0024528:	e8 c9 da fe ff       	call   c0011ff6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002452d:	83 c4 20             	add    esp,0x20
c0024530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024534:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c002453a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002453e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024544:	83 ec 04             	sub    esp,0x4
c0024547:	52                   	push   edx
c0024548:	50                   	push   eax
c0024549:	68 9c d7 02 c0       	push   0xc002d79c
c002454e:	e8 7c e3 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0024553:	83 c4 10             	add    esp,0x10
c0024556:	90                   	nop
c0024557:	83 c4 0c             	add    esp,0xc
c002455a:	c3                   	ret    
c002455b:	90                   	nop

c002455c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002455c:	83 ec 0c             	sub    esp,0xc
c002455f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024563:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0024566:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0024569:	09 c2                	or     edx,eax
c002456b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002456f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024575:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024577:	31 c0                	xor    eax,eax
c0024579:	c1 e9 08             	shr    ecx,0x8
c002457c:	83 e1 0f             	and    ecx,0xf
c002457f:	39 c8                	cmp    eax,ecx
c0024581:	74 0a                	je     c002458d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0024583:	f6 c2 01             	test   dl,0x1
c0024586:	74 18                	je     c00245a0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0024588:	d1 ea                	shr    edx,1
c002458a:	40                   	inc    eax
c002458b:	eb f2                	jmp    c002457f <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c002458d:	83 ec 0c             	sub    esp,0xc
c0024590:	68 c0 d7 02 c0       	push   0xc002d7c0
c0024595:	e8 6b 5d ff ff       	call   c001a305 <Krnl::panic(char const*)>
c002459a:	83 c4 10             	add    esp,0x10
c002459d:	83 c8 ff             	or     eax,0xffffffff
c00245a0:	83 c4 0c             	add    esp,0xc
c00245a3:	c3                   	ret    

c00245a4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00245a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00245a8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00245ab:	89 c2                	mov    edx,eax
c00245ad:	c1 ea 08             	shr    edx,0x8
c00245b0:	83 e2 0f             	and    edx,0xf
c00245b3:	fe ca                	dec    dl
c00245b5:	75 31                	jne    c00245e8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00245b7:	83 e0 0f             	and    eax,0xf
c00245ba:	3c 03                	cmp    al,0x3
c00245bc:	75 2a                	jne    c00245e8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c00245be:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c00245c1:	b8 02 00 00 00       	mov    eax,0x2
c00245c6:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c00245cc:	74 1c                	je     c00245ea <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00245ce:	b8 04 00 00 00       	mov    eax,0x4
c00245d3:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00245d9:	74 0f                	je     c00245ea <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00245db:	31 c0                	xor    eax,eax
c00245dd:	83 fa 03             	cmp    edx,0x3
c00245e0:	0f 94 c0             	sete   al
c00245e3:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00245e7:	c3                   	ret    
c00245e8:	31 c0                	xor    eax,eax
c00245ea:	c3                   	ret    
c00245eb:	90                   	nop

c00245ec <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00245ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00245f0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00245f3:	0f ba e2 0f          	bt     edx,0xf
c00245f7:	72 f7                	jb     c00245f0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00245f9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00245fc:	83 ca 10             	or     edx,0x10
c00245ff:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024602:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024605:	83 ca 01             	or     edx,0x1
c0024608:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002460b:	c3                   	ret    

c002460c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002460c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024610:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024613:	83 e2 fe             	and    edx,0xfffffffe
c0024616:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024619:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002461c:	83 e2 ef             	and    edx,0xffffffef
c002461f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024622:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024625:	0f ba e2 0e          	bt     edx,0xe
c0024629:	72 f7                	jb     c0024622 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002462b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002462e:	0f ba e2 0f          	bt     edx,0xf
c0024632:	72 ee                	jb     c0024622 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024634:	c3                   	ret    
c0024635:	90                   	nop

c0024636 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0024636:	55                   	push   ebp
c0024637:	57                   	push   edi
c0024638:	56                   	push   esi
c0024639:	53                   	push   ebx
c002463a:	83 ec 1c             	sub    esp,0x1c
c002463d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024641:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024645:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024649:	53                   	push   ebx
c002464a:	89 fd                	mov    ebp,edi
c002464c:	56                   	push   esi
c002464d:	c1 e5 0a             	shl    ebp,0xa
c0024650:	e8 b7 ff ff ff       	call   c002460c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0024655:	83 ec 0c             	sub    esp,0xc
c0024658:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002465e:	01 e8                	add    eax,ebp
c0024660:	89 03                	mov    DWORD PTR [ebx],eax
c0024662:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024664:	68 00 04 00 00       	push   0x400
c0024669:	6a 00                	push   0x0
c002466b:	50                   	push   eax
c002466c:	e8 df c0 fd ff       	call   c0000750 <memset>
c0024671:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0024677:	89 fa                	mov    edx,edi
c0024679:	01 e8                	add    eax,ebp
c002467b:	c1 e7 0d             	shl    edi,0xd
c002467e:	89 03                	mov    DWORD PTR [ebx],eax
c0024680:	c1 e2 08             	shl    edx,0x8
c0024683:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002468a:	81 c2 00 80 00 00    	add    edx,0x8000
c0024690:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024694:	89 d0                	mov    eax,edx
c0024696:	83 c4 1c             	add    esp,0x1c
c0024699:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002469f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00246a2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00246a5:	68 00 01 00 00       	push   0x100
c00246aa:	6a 00                	push   0x0
c00246ac:	50                   	push   eax
c00246ad:	e8 9e c0 fd ff       	call   c0000750 <memset>
c00246b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00246b6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c00246bc:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c00246c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00246c6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00246c9:	83 c4 10             	add    esp,0x10
c00246cc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00246d3:	31 ff                	xor    edi,edi
c00246d5:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00246db:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00246e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00246e5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00246eb:	83 c5 20             	add    ebp,0x20
c00246ee:	01 f8                	add    eax,edi
c00246f0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00246f3:	52                   	push   edx
c00246f4:	68 00 01 00 00       	push   0x100
c00246f9:	6a 00                	push   0x0
c00246fb:	50                   	push   eax
c00246fc:	e8 4f c0 fd ff       	call   c0000750 <memset>
c0024701:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024705:	83 c4 10             	add    esp,0x10
c0024708:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002470e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024715:	01 f8                	add    eax,edi
c0024717:	81 c7 00 01 00 00    	add    edi,0x100
c002471d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024720:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0024726:	75 b3                	jne    c00246db <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024728:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c002472c:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0024730:	83 c4 1c             	add    esp,0x1c
c0024733:	5b                   	pop    ebx
c0024734:	5e                   	pop    esi
c0024735:	5f                   	pop    edi
c0024736:	5d                   	pop    ebp
c0024737:	e9 b0 fe ff ff       	jmp    c00245ec <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c002473c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002473c:	55                   	push   ebp
c002473d:	57                   	push   edi
c002473e:	56                   	push   esi
c002473f:	53                   	push   ebx
c0024740:	31 db                	xor    ebx,ebx
c0024742:	83 ec 0c             	sub    esp,0xc
c0024745:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024749:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002474d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0024750:	f7 c7 01 00 00 00    	test   edi,0x1
c0024756:	0f 84 aa 00 00 00    	je     c0024806 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c002475c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024760:	89 d8                	mov    eax,ebx
c0024762:	c1 e0 07             	shl    eax,0x7
c0024765:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c002476c:	55                   	push   ebp
c002476d:	56                   	push   esi
c002476e:	e8 31 fe ff ff       	call   c00245a4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0024773:	5a                   	pop    edx
c0024774:	83 f8 01             	cmp    eax,0x1
c0024777:	59                   	pop    ecx
c0024778:	75 30                	jne    c00247aa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c002477a:	50                   	push   eax
c002477b:	50                   	push   eax
c002477c:	53                   	push   ebx
c002477d:	68 e5 d7 02 c0       	push   0xc002d7e5
c0024782:	e8 48 e1 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0024787:	83 c4 0c             	add    esp,0xc
c002478a:	53                   	push   ebx
c002478b:	55                   	push   ebp
c002478c:	56                   	push   esi
c002478d:	e8 a4 fe ff ff       	call   c0024636 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024792:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024799:	e8 ee b0 fe ff       	call   c000f88c <malloc>
c002479e:	89 c5                	mov    ebp,eax
c00247a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00247a3:	e8 24 0d 00 00       	call   c00254cc <SATA::SATA()>
c00247a8:	eb 33                	jmp    c00247dd <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c00247aa:	83 f8 04             	cmp    eax,0x4
c00247ad:	75 47                	jne    c00247f6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c00247af:	50                   	push   eax
c00247b0:	50                   	push   eax
c00247b1:	53                   	push   ebx
c00247b2:	68 fc d7 02 c0       	push   0xc002d7fc
c00247b7:	e8 13 e1 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00247bc:	83 c4 0c             	add    esp,0xc
c00247bf:	53                   	push   ebx
c00247c0:	55                   	push   ebp
c00247c1:	56                   	push   esi
c00247c2:	e8 6f fe ff ff       	call   c0024636 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00247c7:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00247ce:	e8 b9 b0 fe ff       	call   c000f88c <malloc>
c00247d3:	89 c5                	mov    ebp,eax
c00247d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00247d8:	e8 65 10 00 00       	call   c0025842 <SATAPI::SATAPI()>
c00247dd:	5a                   	pop    edx
c00247de:	59                   	pop    ecx
c00247df:	55                   	push   ebp
c00247e0:	56                   	push   esi
c00247e1:	e8 22 f5 fe ff       	call   c0013d08 <Device::addChild(Device*)>
c00247e6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00247e9:	56                   	push   esi
c00247ea:	6a 00                	push   0x0
c00247ec:	53                   	push   ebx
c00247ed:	55                   	push   ebp
c00247ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00247f1:	83 c4 20             	add    esp,0x20
c00247f4:	eb 10                	jmp    c0024806 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00247f6:	50                   	push   eax
c00247f7:	50                   	push   eax
c00247f8:	53                   	push   ebx
c00247f9:	68 15 d8 02 c0       	push   0xc002d815
c00247fe:	e8 cc e0 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0024803:	83 c4 10             	add    esp,0x10
c0024806:	d1 ef                	shr    edi,1
c0024808:	43                   	inc    ebx
c0024809:	83 fb 20             	cmp    ebx,0x20
c002480c:	0f 85 3e ff ff ff    	jne    c0024750 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024812:	83 c4 0c             	add    esp,0xc
c0024815:	5b                   	pop    ebx
c0024816:	5e                   	pop    esi
c0024817:	5f                   	pop    edi
c0024818:	5d                   	pop    ebp
c0024819:	c3                   	ret    

c002481a <SATABus::open(int, int, void*)>:
c002481a:	83 ec 14             	sub    esp,0x14
c002481d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024821:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024827:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002482d:	52                   	push   edx
c002482e:	50                   	push   eax
c002482f:	e8 08 ff ff ff       	call   c002473c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024834:	31 c0                	xor    eax,eax
c0024836:	83 c4 1c             	add    esp,0x1c
c0024839:	c3                   	ret    

c002483a <ATA::close(int, int, void*)>:
c002483a:	83 ec 0c             	sub    esp,0xc
c002483d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024841:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024847:	85 c0                	test   eax,eax
c0024849:	74 0c                	je     c0024857 <ATA::close(int, int, void*)+0x1d>
c002484b:	83 ec 0c             	sub    esp,0xc
c002484e:	8b 10                	mov    edx,DWORD PTR [eax]
c0024850:	50                   	push   eax
c0024851:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024854:	83 c4 10             	add    esp,0x10
c0024857:	31 c0                	xor    eax,eax
c0024859:	83 c4 0c             	add    esp,0xc
c002485c:	c3                   	ret    
c002485d:	90                   	nop

c002485e <ATA::powerSaving(PowerSavingLevel)>:
c002485e:	c3                   	ret    
c002485f:	90                   	nop

c0024860 <ATA::ATA()>:
c0024860:	83 ec 0c             	sub    esp,0xc
c0024863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024867:	83 ec 04             	sub    esp,0x4
c002486a:	68 00 02 00 00       	push   0x200
c002486f:	68 fd d8 02 c0       	push   0xc002d8fd
c0024874:	50                   	push   eax
c0024875:	e8 d4 f8 fe ff       	call   c001414e <PhysicalDisk::PhysicalDisk(char const*, int)>
c002487a:	83 c4 10             	add    esp,0x10
c002487d:	ba 80 d8 02 c0       	mov    edx,0xc002d880
c0024882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024886:	89 10                	mov    DWORD PTR [eax],edx
c0024888:	90                   	nop
c0024889:	83 c4 0c             	add    esp,0xc
c002488c:	c3                   	ret    
c002488d:	90                   	nop

c002488e <ATA::flush(bool)>:
c002488e:	53                   	push   ebx
c002488f:	83 ec 08             	sub    esp,0x8
c0024892:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024897:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002489b:	19 c0                	sbb    eax,eax
c002489d:	83 e0 fd             	and    eax,0xfffffffd
c00248a0:	05 ea 00 00 00       	add    eax,0xea
c00248a5:	50                   	push   eax
c00248a6:	6a 07                	push   0x7
c00248a8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00248af:	50                   	push   eax
c00248b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00248b6:	e8 dd ef ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00248bb:	83 c4 0c             	add    esp,0xc
c00248be:	6a 00                	push   0x0
c00248c0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00248c7:	50                   	push   eax
c00248c8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00248ce:	e8 71 fb ff ff       	call   c0024444 <IDE::polling(unsigned char, unsigned int)>
c00248d3:	83 c4 18             	add    esp,0x18
c00248d6:	5b                   	pop    ebx
c00248d7:	c3                   	ret    

c00248d8 <ATA::readyForCommand()>:
c00248d8:	56                   	push   esi
c00248d9:	53                   	push   ebx
c00248da:	31 db                	xor    ebx,ebx
c00248dc:	50                   	push   eax
c00248dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00248e1:	50                   	push   eax
c00248e2:	6a 0c                	push   0xc
c00248e4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00248eb:	50                   	push   eax
c00248ec:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00248f2:	e8 61 f0 ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c00248f7:	83 c4 10             	add    esp,0x10
c00248fa:	a8 88                	test   al,0x88
c00248fc:	74 23                	je     c0024921 <ATA::readyForCommand()+0x49>
c00248fe:	43                   	inc    ebx
c00248ff:	83 fb 63             	cmp    ebx,0x63
c0024902:	7e dd                	jle    c00248e1 <ATA::readyForCommand()+0x9>
c0024904:	51                   	push   ecx
c0024905:	51                   	push   ecx
c0024906:	6a 00                	push   0x0
c0024908:	68 40 42 0f 00       	push   0xf4240
c002490d:	e8 a9 9a ff ff       	call   c001e3bb <nanoSleep(unsigned long long)>
c0024912:	83 c4 10             	add    esp,0x10
c0024915:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002491b:	75 c4                	jne    c00248e1 <ATA::readyForCommand()+0x9>
c002491d:	31 c0                	xor    eax,eax
c002491f:	eb 02                	jmp    c0024923 <ATA::readyForCommand()+0x4b>
c0024921:	b0 01                	mov    al,0x1
c0024923:	5a                   	pop    edx
c0024924:	5b                   	pop    ebx
c0024925:	5e                   	pop    esi
c0024926:	c3                   	ret    
c0024927:	90                   	nop

c0024928 <ATA::access(unsigned long long, int, void*, bool)>:
c0024928:	55                   	push   ebp
c0024929:	57                   	push   edi
c002492a:	56                   	push   esi
c002492b:	53                   	push   ebx
c002492c:	83 ec 2c             	sub    esp,0x2c
c002492f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024933:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024937:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002493b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002493f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024943:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024947:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002494b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024951:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024955:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002495b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002495f:	c1 e0 06             	shl    eax,0x6
c0024962:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002496a:	74 5d                	je     c00249c9 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002496c:	89 fa                	mov    edx,edi
c002496e:	89 f0                	mov    eax,esi
c0024970:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024974:	c1 ea 1c             	shr    edx,0x1c
c0024977:	89 d1                	mov    ecx,edx
c0024979:	09 c1                	or     ecx,eax
c002497b:	74 25                	je     c00249a2 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002497d:	31 ed                	xor    ebp,ebp
c002497f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024986:	89 fa                	mov    edx,edi
c0024988:	89 f0                	mov    eax,esi
c002498a:	0f ad d0             	shrd   eax,edx,cl
c002498d:	d3 ea                	shr    edx,cl
c002498f:	f6 c1 20             	test   cl,0x20
c0024992:	74 02                	je     c0024996 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024994:	89 d0                	mov    eax,edx
c0024996:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002499a:	45                   	inc    ebp
c002499b:	83 fd 06             	cmp    ebp,0x6
c002499e:	75 df                	jne    c002497f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00249a0:	eb 76                	jmp    c0024a18 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00249a2:	89 f0                	mov    eax,esi
c00249a4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00249a9:	89 fa                	mov    edx,edi
c00249ab:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00249b2:	0f ac d0 10          	shrd   eax,edx,0x10
c00249b6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00249bb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00249bf:	c1 ee 18             	shr    esi,0x18
c00249c2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00249c7:	eb 56                	jmp    c0024a1f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00249c9:	6a 00                	push   0x0
c00249cb:	6a 3f                	push   0x3f
c00249cd:	57                   	push   edi
c00249ce:	56                   	push   esi
c00249cf:	e8 20 29 00 00       	call   c00272f4 <__umoddi3>
c00249d4:	83 c4 10             	add    esp,0x10
c00249d7:	40                   	inc    eax
c00249d8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00249dc:	6a 00                	push   0x0
c00249de:	68 f0 03 00 00       	push   0x3f0
c00249e3:	57                   	push   edi
c00249e4:	56                   	push   esi
c00249e5:	e8 0a 28 00 00       	call   c00271f4 <__udivdi3>
c00249ea:	83 c4 10             	add    esp,0x10
c00249ed:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00249f2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00249f9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00249fe:	6a 00                	push   0x0
c0024a00:	6a 3f                	push   0x3f
c0024a02:	57                   	push   edi
c0024a03:	56                   	push   esi
c0024a04:	e8 eb 27 00 00       	call   c00271f4 <__udivdi3>
c0024a09:	83 c4 10             	add    esp,0x10
c0024a0c:	89 c6                	mov    esi,eax
c0024a0e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024a13:	83 e6 0f             	and    esi,0xf
c0024a16:	eb 07                	jmp    c0024a1f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024a18:	31 f6                	xor    esi,esi
c0024a1a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024a1f:	bf 01 00 00 00       	mov    edi,0x1
c0024a24:	50                   	push   eax
c0024a25:	6a 00                	push   0x0
c0024a27:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a2e:	50                   	push   eax
c0024a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024a33:	e8 6c f0 ff ff       	call   c0023aa4 <IDE::enableIRQs(unsigned char, bool)>
c0024a38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a3b:	e8 98 fe ff ff       	call   c00248d8 <ATA::readyForCommand()>
c0024a40:	83 c4 10             	add    esp,0x10
c0024a43:	84 c0                	test   al,al
c0024a45:	0f 84 5a 02 00 00    	je     c0024ca5 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024a4b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024a51:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024a57:	c1 e0 04             	shl    eax,0x4
c0024a5a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024a61:	09 c6                	or     esi,eax
c0024a63:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024a68:	75 05                	jne    c0024a6f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024a6a:	83 ce a0             	or     esi,0xffffffa0
c0024a6d:	eb 03                	jmp    c0024a72 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024a6f:	83 ce e0             	or     esi,0xffffffe0
c0024a72:	89 f0                	mov    eax,esi
c0024a74:	0f b6 f0             	movzx  esi,al
c0024a77:	56                   	push   esi
c0024a78:	6a 06                	push   0x6
c0024a7a:	51                   	push   ecx
c0024a7b:	52                   	push   edx
c0024a7c:	e8 17 ee ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a81:	83 c4 10             	add    esp,0x10
c0024a84:	6a 00                	push   0x0
c0024a86:	6a 01                	push   0x1
c0024a88:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a8f:	50                   	push   eax
c0024a90:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a96:	e8 fd ed ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a9b:	83 c4 10             	add    esp,0x10
c0024a9e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024aa3:	75 6e                	jne    c0024b13 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024aa5:	6a 00                	push   0x0
c0024aa7:	6a 08                	push   0x8
c0024aa9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ab0:	50                   	push   eax
c0024ab1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ab7:	e8 dc ed ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024abc:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024ac1:	50                   	push   eax
c0024ac2:	6a 09                	push   0x9
c0024ac4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024acb:	50                   	push   eax
c0024acc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ad2:	e8 c1 ed ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ad7:	83 c4 20             	add    esp,0x20
c0024ada:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024adf:	50                   	push   eax
c0024ae0:	6a 0a                	push   0xa
c0024ae2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ae9:	50                   	push   eax
c0024aea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024af0:	e8 a3 ed ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024af5:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024afa:	50                   	push   eax
c0024afb:	6a 0b                	push   0xb
c0024afd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b04:	50                   	push   eax
c0024b05:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b0b:	e8 88 ed ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b10:	83 c4 20             	add    esp,0x20
c0024b13:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024b18:	50                   	push   eax
c0024b19:	6a 02                	push   0x2
c0024b1b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b22:	50                   	push   eax
c0024b23:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b29:	e8 6a ed ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b2e:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024b33:	50                   	push   eax
c0024b34:	6a 03                	push   0x3
c0024b36:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b3d:	50                   	push   eax
c0024b3e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b44:	e8 4f ed ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b49:	83 c4 20             	add    esp,0x20
c0024b4c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024b51:	50                   	push   eax
c0024b52:	6a 04                	push   0x4
c0024b54:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b5b:	50                   	push   eax
c0024b5c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b62:	e8 31 ed ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b67:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024b6c:	50                   	push   eax
c0024b6d:	6a 05                	push   0x5
c0024b6f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b76:	50                   	push   eax
c0024b77:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b7d:	e8 16 ed ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b82:	83 c4 20             	add    esp,0x20
c0024b85:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024b8a:	0f 94 c0             	sete   al
c0024b8d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024b92:	74 09                	je     c0024b9d <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024b94:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024b9b:	eb 07                	jmp    c0024ba4 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024b9d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024ba4:	0f b6 c0             	movzx  eax,al
c0024ba7:	50                   	push   eax
c0024ba8:	6a 07                	push   0x7
c0024baa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bb1:	50                   	push   eax
c0024bb2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bb8:	e8 db ec ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024bbd:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024bc1:	83 c4 10             	add    esp,0x10
c0024bc4:	85 f6                	test   esi,esi
c0024bc6:	0f 84 ba 00 00 00    	je     c0024c86 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024bcc:	50                   	push   eax
c0024bcd:	6a 01                	push   0x1
c0024bcf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024bd6:	50                   	push   eax
c0024bd7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bdd:	e8 62 f8 ff ff       	call   c0024444 <IDE::polling(unsigned char, unsigned int)>
c0024be2:	83 c4 10             	add    esp,0x10
c0024be5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024beb:	84 c0                	test   al,al
c0024bed:	74 2c                	je     c0024c1b <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024bef:	0f b6 f8             	movzx  edi,al
c0024bf2:	0f b6 d2             	movzx  edx,dl
c0024bf5:	57                   	push   edi
c0024bf6:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024bfd:	50                   	push   eax
c0024bfe:	52                   	push   edx
c0024bff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c05:	e8 a4 f6 ff ff       	call   c00242ae <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024c0a:	c7 04 24 58 d8 02 c0 	mov    DWORD PTR [esp],0xc002d858
c0024c11:	e8 b9 dc fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0024c16:	e9 87 00 00 00       	jmp    c0024ca2 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024c1b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024c20:	74 33                	je     c0024c55 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024c22:	31 ed                	xor    ebp,ebp
c0024c24:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024c28:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024c2c:	50                   	push   eax
c0024c2d:	50                   	push   eax
c0024c2e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c35:	50                   	push   eax
c0024c36:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c3c:	e8 45 ec ff ff       	call   c0023886 <IDE::getBase(unsigned char)>
c0024c41:	89 c2                	mov    edx,eax
c0024c43:	89 f8                	mov    eax,edi
c0024c45:	66 ef                	out    dx,ax
c0024c47:	45                   	inc    ebp
c0024c48:	83 c4 10             	add    esp,0x10
c0024c4b:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024c51:	75 d1                	jne    c0024c24 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024c53:	eb 23                	jmp    c0024c78 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024c55:	0f b6 d2             	movzx  edx,dl
c0024c58:	51                   	push   ecx
c0024c59:	51                   	push   ecx
c0024c5a:	52                   	push   edx
c0024c5b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c61:	e8 20 ec ff ff       	call   c0023886 <IDE::getBase(unsigned char)>
c0024c66:	b9 00 01 00 00       	mov    ecx,0x100
c0024c6b:	89 c2                	mov    edx,eax
c0024c6d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024c71:	fc                   	cld    
c0024c72:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024c75:	83 c4 10             	add    esp,0x10
c0024c78:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024c80:	4e                   	dec    esi
c0024c81:	e9 3e ff ff ff       	jmp    c0024bc4 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024c86:	31 ff                	xor    edi,edi
c0024c88:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024c8d:	74 16                	je     c0024ca5 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024c8f:	50                   	push   eax
c0024c90:	50                   	push   eax
c0024c91:	31 c0                	xor    eax,eax
c0024c93:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024c98:	0f 94 c0             	sete   al
c0024c9b:	50                   	push   eax
c0024c9c:	53                   	push   ebx
c0024c9d:	e8 ec fb ff ff       	call   c002488e <ATA::flush(bool)>
c0024ca2:	83 c4 10             	add    esp,0x10
c0024ca5:	83 c4 2c             	add    esp,0x2c
c0024ca8:	89 f8                	mov    eax,edi
c0024caa:	5b                   	pop    ebx
c0024cab:	5e                   	pop    esi
c0024cac:	5f                   	pop    edi
c0024cad:	5d                   	pop    ebp
c0024cae:	c3                   	ret    
c0024caf:	90                   	nop

c0024cb0 <ATA::read(unsigned long long, int, void*)>:
c0024cb0:	57                   	push   edi
c0024cb1:	b8 04 00 00 00       	mov    eax,0x4
c0024cb6:	56                   	push   esi
c0024cb7:	53                   	push   ebx
c0024cb8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024cbc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024cc0:	8d 7a ff             	lea    edi,[edx-0x1]
c0024cc3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024cc7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024ccb:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024cd1:	77 25                	ja     c0024cf8 <ATA::read(unsigned long long, int, void*)+0x48>
c0024cd3:	b8 06 00 00 00       	mov    eax,0x6
c0024cd8:	85 f6                	test   esi,esi
c0024cda:	74 1c                	je     c0024cf8 <ATA::read(unsigned long long, int, void*)+0x48>
c0024cdc:	50                   	push   eax
c0024cdd:	50                   	push   eax
c0024cde:	6a 00                	push   0x0
c0024ce0:	56                   	push   esi
c0024ce1:	52                   	push   edx
c0024ce2:	53                   	push   ebx
c0024ce3:	51                   	push   ecx
c0024ce4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024ce8:	e8 3b fc ff ff       	call   c0024928 <ATA::access(unsigned long long, int, void*, bool)>
c0024ced:	83 c4 20             	add    esp,0x20
c0024cf0:	85 c0                	test   eax,eax
c0024cf2:	0f 95 c0             	setne  al
c0024cf5:	0f b6 c0             	movzx  eax,al
c0024cf8:	5b                   	pop    ebx
c0024cf9:	5e                   	pop    esi
c0024cfa:	5f                   	pop    edi
c0024cfb:	c3                   	ret    

c0024cfc <ATA::write(unsigned long long, int, void*)>:
c0024cfc:	57                   	push   edi
c0024cfd:	b8 04 00 00 00       	mov    eax,0x4
c0024d02:	56                   	push   esi
c0024d03:	53                   	push   ebx
c0024d04:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d08:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024d0c:	8d 7a ff             	lea    edi,[edx-0x1]
c0024d0f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024d13:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024d17:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024d1d:	77 25                	ja     c0024d44 <ATA::write(unsigned long long, int, void*)+0x48>
c0024d1f:	b8 06 00 00 00       	mov    eax,0x6
c0024d24:	85 f6                	test   esi,esi
c0024d26:	74 1c                	je     c0024d44 <ATA::write(unsigned long long, int, void*)+0x48>
c0024d28:	50                   	push   eax
c0024d29:	50                   	push   eax
c0024d2a:	6a 01                	push   0x1
c0024d2c:	56                   	push   esi
c0024d2d:	52                   	push   edx
c0024d2e:	53                   	push   ebx
c0024d2f:	51                   	push   ecx
c0024d30:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024d34:	e8 ef fb ff ff       	call   c0024928 <ATA::access(unsigned long long, int, void*, bool)>
c0024d39:	83 c4 20             	add    esp,0x20
c0024d3c:	85 c0                	test   eax,eax
c0024d3e:	0f 95 c0             	setne  al
c0024d41:	0f b6 c0             	movzx  eax,al
c0024d44:	5b                   	pop    ebx
c0024d45:	5e                   	pop    esi
c0024d46:	5f                   	pop    edi
c0024d47:	c3                   	ret    

c0024d48 <ATA::detectCHS()>:
c0024d48:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024d4c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024d52:	c1 e0 06             	shl    eax,0x6
c0024d55:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024d5b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024d65:	c7 44 24 04 63 d8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d863
c0024d6d:	e9 93 55 ff ff       	jmp    c001a305 <Krnl::panic(char const*)>

c0024d72 <ATA::open(int, int, void*)>:
c0024d72:	53                   	push   ebx
c0024d73:	83 ec 08             	sub    esp,0x8
c0024d76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024d7a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d7e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024d82:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024d88:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024d8e:	c1 e0 06             	shl    eax,0x6
c0024d91:	01 d0                	add    eax,edx
c0024d93:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024d9a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024da0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024da7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024db1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024db7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024dbe:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024dc5:	75 0c                	jne    c0024dd3 <ATA::open(int, int, void*)+0x61>
c0024dc7:	83 ec 0c             	sub    esp,0xc
c0024dca:	53                   	push   ebx
c0024dcb:	e8 78 ff ff ff       	call   c0024d48 <ATA::detectCHS()>
c0024dd0:	83 c4 10             	add    esp,0x10
c0024dd3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024dd9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024ddf:	c1 e0 06             	shl    eax,0x6
c0024de2:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024de9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024df3:	d1 e8                	shr    eax,1
c0024df5:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024dfb:	6a 04                	push   0x4
c0024dfd:	6a 0c                	push   0xc
c0024dff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e06:	50                   	push   eax
c0024e07:	52                   	push   edx
c0024e08:	e8 8b ea ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e0d:	90                   	nop
c0024e0e:	90                   	nop
c0024e0f:	6a 00                	push   0x0
c0024e11:	6a 0c                	push   0xc
c0024e13:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e1a:	50                   	push   eax
c0024e1b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e21:	e8 72 ea ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e26:	83 c4 14             	add    esp,0x14
c0024e29:	53                   	push   ebx
c0024e2a:	e8 87 f3 fe ff       	call   c00141b6 <PhysicalDisk::startCache()>
c0024e2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024e32:	e8 39 16 ff ff       	call   c0016470 <createPartitionsForDisk(PhysicalDisk*)>
c0024e37:	31 c0                	xor    eax,eax
c0024e39:	83 c4 18             	add    esp,0x18
c0024e3c:	5b                   	pop    ebx
c0024e3d:	c3                   	ret    

c0024e3e <ATAPI::write(unsigned long long, int, void*)>:
c0024e3e:	b8 03 00 00 00       	mov    eax,0x3
c0024e43:	c3                   	ret    

c0024e44 <ATAPI::close(int, int, void*)>:
c0024e44:	83 ec 0c             	sub    esp,0xc
c0024e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e4b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024e51:	85 c0                	test   eax,eax
c0024e53:	74 0c                	je     c0024e61 <ATAPI::close(int, int, void*)+0x1d>
c0024e55:	83 ec 0c             	sub    esp,0xc
c0024e58:	8b 10                	mov    edx,DWORD PTR [eax]
c0024e5a:	50                   	push   eax
c0024e5b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024e5e:	83 c4 10             	add    esp,0x10
c0024e61:	31 c0                	xor    eax,eax
c0024e63:	83 c4 0c             	add    esp,0xc
c0024e66:	c3                   	ret    
c0024e67:	90                   	nop

c0024e68 <ATAPI::ATAPI()>:
c0024e68:	83 ec 0c             	sub    esp,0xc
c0024e6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e6f:	83 ec 04             	sub    esp,0x4
c0024e72:	68 00 08 00 00       	push   0x800
c0024e77:	68 9d d9 02 c0       	push   0xc002d99d
c0024e7c:	50                   	push   eax
c0024e7d:	e8 cc f2 fe ff       	call   c001414e <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024e82:	83 c4 10             	add    esp,0x10
c0024e85:	ba b8 d8 02 c0       	mov    edx,0xc002d8b8
c0024e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e8e:	89 10                	mov    DWORD PTR [eax],edx
c0024e90:	90                   	nop
c0024e91:	83 c4 0c             	add    esp,0xc
c0024e94:	c3                   	ret    
c0024e95:	90                   	nop

c0024e96 <ATAPI::readyForCommand()>:
c0024e96:	56                   	push   esi
c0024e97:	53                   	push   ebx
c0024e98:	31 db                	xor    ebx,ebx
c0024e9a:	50                   	push   eax
c0024e9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024e9f:	50                   	push   eax
c0024ea0:	6a 0c                	push   0xc
c0024ea2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024ea9:	50                   	push   eax
c0024eaa:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024eb0:	e8 a3 ea ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c0024eb5:	83 c4 10             	add    esp,0x10
c0024eb8:	a8 88                	test   al,0x88
c0024eba:	74 23                	je     c0024edf <ATAPI::readyForCommand()+0x49>
c0024ebc:	43                   	inc    ebx
c0024ebd:	83 fb 63             	cmp    ebx,0x63
c0024ec0:	7e dd                	jle    c0024e9f <ATAPI::readyForCommand()+0x9>
c0024ec2:	51                   	push   ecx
c0024ec3:	51                   	push   ecx
c0024ec4:	6a 00                	push   0x0
c0024ec6:	68 40 42 0f 00       	push   0xf4240
c0024ecb:	e8 eb 94 ff ff       	call   c001e3bb <nanoSleep(unsigned long long)>
c0024ed0:	83 c4 10             	add    esp,0x10
c0024ed3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024ed9:	75 c4                	jne    c0024e9f <ATAPI::readyForCommand()+0x9>
c0024edb:	31 c0                	xor    eax,eax
c0024edd:	eb 02                	jmp    c0024ee1 <ATAPI::readyForCommand()+0x4b>
c0024edf:	b0 01                	mov    al,0x1
c0024ee1:	5a                   	pop    edx
c0024ee2:	5b                   	pop    ebx
c0024ee3:	5e                   	pop    esi
c0024ee4:	c3                   	ret    
c0024ee5:	90                   	nop

c0024ee6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024ee6:	55                   	push   ebp
c0024ee7:	57                   	push   edi
c0024ee8:	56                   	push   esi
c0024ee9:	53                   	push   ebx
c0024eea:	83 ec 20             	sub    esp,0x20
c0024eed:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024ef1:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024ef5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024ef9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024efd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024f01:	6a 01                	push   0x1
c0024f03:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f0a:	50                   	push   eax
c0024f0b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f11:	e8 8e eb ff ff       	call   c0023aa4 <IDE::enableIRQs(unsigned char, bool)>
c0024f16:	5e                   	pop    esi
c0024f17:	58                   	pop    eax
c0024f18:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f1f:	50                   	push   eax
c0024f20:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f26:	e8 47 e9 ff ff       	call   c0023872 <IDE::prepareInterrupt(unsigned char)>
c0024f2b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024f2e:	e8 63 ff ff ff       	call   c0024e96 <ATAPI::readyForCommand()>
c0024f33:	83 c4 10             	add    esp,0x10
c0024f36:	84 c0                	test   al,al
c0024f38:	75 0a                	jne    c0024f44 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024f3a:	bb 01 00 00 00       	mov    ebx,0x1
c0024f3f:	e9 57 02 00 00       	jmp    c002519b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024f44:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024f4a:	c1 e0 04             	shl    eax,0x4
c0024f4d:	0f b6 c0             	movzx  eax,al
c0024f50:	50                   	push   eax
c0024f51:	6a 06                	push   0x6
c0024f53:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f5a:	50                   	push   eax
c0024f5b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f61:	e8 32 e9 ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f66:	6a 00                	push   0x0
c0024f68:	6a 01                	push   0x1
c0024f6a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f71:	50                   	push   eax
c0024f72:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f78:	e8 1b e9 ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f7d:	83 c4 20             	add    esp,0x20
c0024f80:	0f b6 c3             	movzx  eax,bl
c0024f83:	0f b6 df             	movzx  ebx,bh
c0024f86:	50                   	push   eax
c0024f87:	6a 04                	push   0x4
c0024f89:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f90:	50                   	push   eax
c0024f91:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f97:	e8 fc e8 ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f9c:	53                   	push   ebx
c0024f9d:	6a 05                	push   0x5
c0024f9f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fa6:	50                   	push   eax
c0024fa7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fad:	e8 e6 e8 ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024fb2:	83 c4 20             	add    esp,0x20
c0024fb5:	68 a0 00 00 00       	push   0xa0
c0024fba:	6a 07                	push   0x7
c0024fbc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fc3:	50                   	push   eax
c0024fc4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fca:	e8 c9 e8 ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024fcf:	83 c4 0c             	add    esp,0xc
c0024fd2:	6a 01                	push   0x1
c0024fd4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024fdb:	50                   	push   eax
c0024fdc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fe2:	e8 5d f4 ff ff       	call   c0024444 <IDE::polling(unsigned char, unsigned int)>
c0024fe7:	83 c4 10             	add    esp,0x10
c0024fea:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024ff0:	84 c0                	test   al,al
c0024ff2:	74 23                	je     c0025017 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024ff4:	0f b6 d8             	movzx  ebx,al
c0024ff7:	0f b6 d2             	movzx  edx,dl
c0024ffa:	53                   	push   ebx
c0024ffb:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0025002:	50                   	push   eax
c0025003:	52                   	push   edx
c0025004:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002500a:	e8 9f f2 ff ff       	call   c00242ae <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002500f:	83 c4 10             	add    esp,0x10
c0025012:	e9 84 01 00 00       	jmp    c002519b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025017:	0f b6 d2             	movzx  edx,dl
c002501a:	53                   	push   ebx
c002501b:	53                   	push   ebx
c002501c:	52                   	push   edx
c002501d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025023:	e8 5e e8 ff ff       	call   c0023886 <IDE::getBase(unsigned char)>
c0025028:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002502c:	b9 06 00 00 00       	mov    ecx,0x6
c0025031:	89 c2                	mov    edx,eax
c0025033:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0025036:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002503a:	83 c4 10             	add    esp,0x10
c002503d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025043:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002504a:	85 db                	test   ebx,ebx
c002504c:	0f 84 ec 00 00 00    	je     c002513e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0025052:	51                   	push   ecx
c0025053:	51                   	push   ecx
c0025054:	52                   	push   edx
c0025055:	50                   	push   eax
c0025056:	e8 ab e9 ff ff       	call   c0023a06 <IDE::waitInterrupt(unsigned char)>
c002505b:	83 c4 10             	add    esp,0x10
c002505e:	84 c0                	test   al,al
c0025060:	0f 84 d4 fe ff ff    	je     c0024f3a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025066:	56                   	push   esi
c0025067:	56                   	push   esi
c0025068:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002506f:	50                   	push   eax
c0025070:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025076:	e8 f7 e7 ff ff       	call   c0023872 <IDE::prepareInterrupt(unsigned char)>
c002507b:	83 c4 0c             	add    esp,0xc
c002507e:	6a 04                	push   0x4
c0025080:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025087:	50                   	push   eax
c0025088:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002508e:	e8 c5 e8 ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c0025093:	83 c4 0c             	add    esp,0xc
c0025096:	89 c6                	mov    esi,eax
c0025098:	6a 05                	push   0x5
c002509a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250a1:	50                   	push   eax
c00250a2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250a8:	e8 ab e8 ff ff       	call   c0023958 <IDE::read(unsigned char, unsigned char)>
c00250ad:	89 f1                	mov    ecx,esi
c00250af:	0f b6 c0             	movzx  eax,al
c00250b2:	0f b6 f1             	movzx  esi,cl
c00250b5:	c1 e0 08             	shl    eax,0x8
c00250b8:	09 c6                	or     esi,eax
c00250ba:	d1 fe                	sar    esi,1
c00250bc:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00250c0:	83 c4 10             	add    esp,0x10
c00250c3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00250c8:	74 41                	je     c002510b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00250ca:	31 c9                	xor    ecx,ecx
c00250cc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00250d2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00250d9:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00250dd:	75 0a                	jne    c00250e9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00250df:	01 c9                	add    ecx,ecx
c00250e1:	01 cd                	add    ebp,ecx
c00250e3:	4b                   	dec    ebx
c00250e4:	e9 54 ff ff ff       	jmp    c002503d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00250e9:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00250ee:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00250f2:	51                   	push   ecx
c00250f3:	51                   	push   ecx
c00250f4:	52                   	push   edx
c00250f5:	50                   	push   eax
c00250f6:	e8 8b e7 ff ff       	call   c0023886 <IDE::getBase(unsigned char)>
c00250fb:	89 c2                	mov    edx,eax
c00250fd:	89 f0                	mov    eax,esi
c00250ff:	66 ef                	out    dx,ax
c0025101:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0025105:	83 c4 10             	add    esp,0x10
c0025108:	41                   	inc    ecx
c0025109:	eb c1                	jmp    c00250cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002510b:	31 f6                	xor    esi,esi
c002510d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025113:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002511a:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002511e:	75 06                	jne    c0025126 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0025120:	01 f6                	add    esi,esi
c0025122:	01 f5                	add    ebp,esi
c0025124:	eb bd                	jmp    c00250e3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0025126:	51                   	push   ecx
c0025127:	51                   	push   ecx
c0025128:	52                   	push   edx
c0025129:	50                   	push   eax
c002512a:	e8 57 e7 ff ff       	call   c0023886 <IDE::getBase(unsigned char)>
c002512f:	89 c2                	mov    edx,eax
c0025131:	66 ed                	in     ax,dx
c0025133:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0025138:	83 c4 10             	add    esp,0x10
c002513b:	46                   	inc    esi
c002513c:	eb cf                	jmp    c002510d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002513e:	51                   	push   ecx
c002513f:	51                   	push   ecx
c0025140:	52                   	push   edx
c0025141:	50                   	push   eax
c0025142:	e8 bf e8 ff ff       	call   c0023a06 <IDE::waitInterrupt(unsigned char)>
c0025147:	83 c4 10             	add    esp,0x10
c002514a:	84 c0                	test   al,al
c002514c:	0f 84 e8 fd ff ff    	je     c0024f3a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025152:	bb a0 86 01 00       	mov    ebx,0x186a0
c0025157:	52                   	push   edx
c0025158:	52                   	push   edx
c0025159:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025160:	50                   	push   eax
c0025161:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025167:	e8 06 e7 ff ff       	call   c0023872 <IDE::prepareInterrupt(unsigned char)>
c002516c:	83 c4 10             	add    esp,0x10
c002516f:	50                   	push   eax
c0025170:	50                   	push   eax
c0025171:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025178:	50                   	push   eax
c0025179:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002517f:	e8 02 e7 ff ff       	call   c0023886 <IDE::getBase(unsigned char)>
c0025184:	8d 50 07             	lea    edx,[eax+0x7]
c0025187:	ec                   	in     al,dx
c0025188:	83 c4 10             	add    esp,0x10
c002518b:	a8 88                	test   al,0x88
c002518d:	74 0a                	je     c0025199 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002518f:	4b                   	dec    ebx
c0025190:	75 dd                	jne    c002516f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0025192:	bb 02 00 00 00       	mov    ebx,0x2
c0025197:	eb 02                	jmp    c002519b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025199:	31 db                	xor    ebx,ebx
c002519b:	83 c4 1c             	add    esp,0x1c
c002519e:	89 d8                	mov    eax,ebx
c00251a0:	5b                   	pop    ebx
c00251a1:	5e                   	pop    esi
c00251a2:	5f                   	pop    edi
c00251a3:	5d                   	pop    ebp
c00251a4:	c3                   	ret    
c00251a5:	90                   	nop

c00251a6 <ATAPI::diskRemoved()>:
c00251a6:	83 ec 18             	sub    esp,0x18
c00251a9:	68 a9 d9 02 c0       	push   0xc002d9a9
c00251ae:	e8 1c d7 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00251b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00251b7:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00251be:	83 c4 1c             	add    esp,0x1c
c00251c1:	c3                   	ret    

c00251c2 <ATAPI::eject()>:
c00251c2:	57                   	push   edi
c00251c3:	b9 03 00 00 00       	mov    ecx,0x3
c00251c8:	53                   	push   ebx
c00251c9:	83 ec 14             	sub    esp,0x14
c00251cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00251d0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00251d4:	fc                   	cld    
c00251d5:	31 c0                	xor    eax,eax
c00251d7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00251d9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00251de:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00251e3:	50                   	push   eax
c00251e4:	50                   	push   eax
c00251e5:	6a 00                	push   0x0
c00251e7:	6a 00                	push   0x0
c00251e9:	6a 00                	push   0x0
c00251eb:	6a 02                	push   0x2
c00251ed:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00251f1:	50                   	push   eax
c00251f2:	53                   	push   ebx
c00251f3:	e8 ee fc ff ff       	call   c0024ee6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00251f8:	83 c4 14             	add    esp,0x14
c00251fb:	53                   	push   ebx
c00251fc:	e8 a5 ff ff ff       	call   c00251a6 <ATAPI::diskRemoved()>
c0025201:	83 c4 24             	add    esp,0x24
c0025204:	31 c0                	xor    eax,eax
c0025206:	5b                   	pop    ebx
c0025207:	5f                   	pop    edi
c0025208:	c3                   	ret    
c0025209:	90                   	nop

c002520a <ATAPI::diskInserted()>:
c002520a:	53                   	push   ebx
c002520b:	83 ec 14             	sub    esp,0x14
c002520e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025212:	68 c0 d9 02 c0       	push   0xc002d9c0
c0025217:	e8 b3 d6 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c002521c:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0025223:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025226:	e8 8b ef fe ff       	call   c00141b6 <PhysicalDisk::startCache()>
c002522b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002522f:	83 c4 18             	add    esp,0x18
c0025232:	5b                   	pop    ebx
c0025233:	e9 38 12 ff ff       	jmp    c0016470 <createPartitionsForDisk(PhysicalDisk*)>

c0025238 <ATAPI::detectMedia()>:
c0025238:	56                   	push   esi
c0025239:	53                   	push   ebx
c002523a:	83 ec 28             	sub    esp,0x28
c002523d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025241:	6a 0c                	push   0xc
c0025243:	6a 00                	push   0x0
c0025245:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025249:	56                   	push   esi
c002524a:	e8 01 b5 fd ff       	call   c0000750 <memset>
c002524f:	58                   	pop    eax
c0025250:	5a                   	pop    edx
c0025251:	6a 00                	push   0x0
c0025253:	6a 00                	push   0x0
c0025255:	6a 00                	push   0x0
c0025257:	6a 00                	push   0x0
c0025259:	56                   	push   esi
c002525a:	53                   	push   ebx
c002525b:	e8 86 fc ff ff       	call   c0024ee6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025260:	83 c4 1c             	add    esp,0x1c
c0025263:	6a 0c                	push   0xc
c0025265:	6a 00                	push   0x0
c0025267:	56                   	push   esi
c0025268:	e8 e3 b4 fd ff       	call   c0000750 <memset>
c002526d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025272:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025277:	59                   	pop    ecx
c0025278:	58                   	pop    eax
c0025279:	6a 01                	push   0x1
c002527b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002527f:	50                   	push   eax
c0025280:	6a 00                	push   0x0
c0025282:	6a 12                	push   0x12
c0025284:	56                   	push   esi
c0025285:	53                   	push   ebx
c0025286:	e8 5b fc ff ff       	call   c0024ee6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002528b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002528f:	83 c4 20             	add    esp,0x20
c0025292:	83 e0 7f             	and    eax,0x7f
c0025295:	3c 70                	cmp    al,0x70
c0025297:	74 15                	je     c00252ae <ATAPI::detectMedia()+0x76>
c0025299:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00252a0:	75 0c                	jne    c00252ae <ATAPI::detectMedia()+0x76>
c00252a2:	83 ec 0c             	sub    esp,0xc
c00252a5:	53                   	push   ebx
c00252a6:	e8 5f ff ff ff       	call   c002520a <ATAPI::diskInserted()>
c00252ab:	83 c4 10             	add    esp,0x10
c00252ae:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00252b2:	83 e0 0f             	and    eax,0xf
c00252b5:	3c 02                	cmp    al,0x2
c00252b7:	75 1b                	jne    c00252d4 <ATAPI::detectMedia()+0x9c>
c00252b9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00252be:	75 2d                	jne    c00252ed <ATAPI::detectMedia()+0xb5>
c00252c0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00252c7:	74 24                	je     c00252ed <ATAPI::detectMedia()+0xb5>
c00252c9:	83 ec 0c             	sub    esp,0xc
c00252cc:	53                   	push   ebx
c00252cd:	e8 d4 fe ff ff       	call   c00251a6 <ATAPI::diskRemoved()>
c00252d2:	eb 16                	jmp    c00252ea <ATAPI::detectMedia()+0xb2>
c00252d4:	84 c0                	test   al,al
c00252d6:	75 15                	jne    c00252ed <ATAPI::detectMedia()+0xb5>
c00252d8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00252df:	75 0c                	jne    c00252ed <ATAPI::detectMedia()+0xb5>
c00252e1:	83 ec 0c             	sub    esp,0xc
c00252e4:	53                   	push   ebx
c00252e5:	e8 20 ff ff ff       	call   c002520a <ATAPI::diskInserted()>
c00252ea:	83 c4 10             	add    esp,0x10
c00252ed:	83 c4 24             	add    esp,0x24
c00252f0:	5b                   	pop    ebx
c00252f1:	5e                   	pop    esi
c00252f2:	c3                   	ret    
c00252f3:	90                   	nop

c00252f4 <ATAPI::open(int, int, void*)>:
c00252f4:	53                   	push   ebx
c00252f5:	83 ec 08             	sub    esp,0x8
c00252f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00252fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025300:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025304:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002530a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0025310:	c1 e0 06             	shl    eax,0x6
c0025313:	01 d0                	add    eax,edx
c0025315:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002531c:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0025322:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0025329:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025333:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025339:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025340:	6a 04                	push   0x4
c0025342:	6a 0c                	push   0xc
c0025344:	51                   	push   ecx
c0025345:	52                   	push   edx
c0025346:	e8 4d e5 ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002534b:	90                   	nop
c002534c:	90                   	nop
c002534d:	6a 00                	push   0x0
c002534f:	6a 0c                	push   0xc
c0025351:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025358:	50                   	push   eax
c0025359:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002535f:	e8 34 e5 ff ff       	call   c0023898 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025364:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002536b:	83 c4 14             	add    esp,0x14
c002536e:	53                   	push   ebx
c002536f:	e8 c4 fe ff ff       	call   c0025238 <ATAPI::detectMedia()>
c0025374:	31 c0                	xor    eax,eax
c0025376:	83 c4 18             	add    esp,0x18
c0025379:	5b                   	pop    ebx
c002537a:	c3                   	ret    
c002537b:	90                   	nop

c002537c <ATAPI::read(unsigned long long, int, void*)>:
c002537c:	55                   	push   ebp
c002537d:	57                   	push   edi
c002537e:	56                   	push   esi
c002537f:	53                   	push   ebx
c0025380:	83 ec 1c             	sub    esp,0x1c
c0025383:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0025387:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002538b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002538f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0025396:	74 41                	je     c00253d9 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0025398:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002539c:	b9 03 00 00 00       	mov    ecx,0x3
c00253a1:	fc                   	cld    
c00253a2:	31 c0                	xor    eax,eax
c00253a4:	86 fb                	xchg   bl,bh
c00253a6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00253a8:	c1 c3 10             	rol    ebx,0x10
c00253ab:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00253b0:	89 e8                	mov    eax,ebp
c00253b2:	86 fb                	xchg   bl,bh
c00253b4:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00253b8:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00253bc:	50                   	push   eax
c00253bd:	50                   	push   eax
c00253be:	55                   	push   ebp
c00253bf:	c1 e5 0b             	shl    ebp,0xb
c00253c2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00253c6:	6a 00                	push   0x0
c00253c8:	55                   	push   ebp
c00253c9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00253cd:	50                   	push   eax
c00253ce:	56                   	push   esi
c00253cf:	e8 12 fb ff ff       	call   c0024ee6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00253d4:	83 c4 20             	add    esp,0x20
c00253d7:	eb 1a                	jmp    c00253f3 <ATAPI::read(unsigned long long, int, void*)+0x77>
c00253d9:	83 ec 0c             	sub    esp,0xc
c00253dc:	56                   	push   esi
c00253dd:	e8 56 fe ff ff       	call   c0025238 <ATAPI::detectMedia()>
c00253e2:	83 c4 10             	add    esp,0x10
c00253e5:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00253ec:	75 aa                	jne    c0025398 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00253ee:	b8 02 00 00 00       	mov    eax,0x2
c00253f3:	83 c4 1c             	add    esp,0x1c
c00253f6:	5b                   	pop    ebx
c00253f7:	5e                   	pop    esi
c00253f8:	5f                   	pop    edi
c00253f9:	5d                   	pop    ebp
c00253fa:	c3                   	ret    
c00253fb:	90                   	nop

c00253fc <SATA::close(int, int, void*)>:
c00253fc:	83 ec 0c             	sub    esp,0xc
c00253ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025403:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025409:	85 c0                	test   eax,eax
c002540b:	74 0c                	je     c0025419 <SATA::close(int, int, void*)+0x1d>
c002540d:	83 ec 0c             	sub    esp,0xc
c0025410:	8b 10                	mov    edx,DWORD PTR [eax]
c0025412:	50                   	push   eax
c0025413:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025416:	83 c4 10             	add    esp,0x10
c0025419:	31 c0                	xor    eax,eax
c002541b:	83 c4 0c             	add    esp,0xc
c002541e:	c3                   	ret    
c002541f:	90                   	nop

c0025420 <SATA::powerSaving(PowerSavingLevel)>:
c0025420:	c3                   	ret    
c0025421:	90                   	nop

c0025422 <SATA::open(int, int, void*)>:
c0025422:	56                   	push   esi
c0025423:	53                   	push   ebx
c0025424:	50                   	push   eax
c0025425:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025429:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002542d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0025437:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002543d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025447:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002544b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025455:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002545b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0025462:	e8 2a a7 fe ff       	call   c000fb91 <Phys::allocatePage()>
c0025467:	89 c6                	mov    esi,eax
c0025469:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002546f:	81 c6 00 10 00 00    	add    esi,0x1000
c0025475:	e8 17 a7 fe ff       	call   c000fb91 <Phys::allocatePage()>
c002547a:	39 c6                	cmp    esi,eax
c002547c:	74 10                	je     c002548e <SATA::open(int, int, void*)+0x6c>
c002547e:	83 ec 0c             	sub    esp,0xc
c0025481:	68 e8 d8 02 c0       	push   0xc002d8e8
c0025486:	e8 7a 4e ff ff       	call   c001a305 <Krnl::panic(char const*)>
c002548b:	83 c4 10             	add    esp,0x10
c002548e:	83 ec 0c             	sub    esp,0xc
c0025491:	6a 02                	push   0x2
c0025493:	e8 31 c0 fe ff       	call   c00114c9 <Virt::allocateKernelVirtualPages(int)>
c0025498:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002549e:	6a 03                	push   0x3
c00254a0:	50                   	push   eax
c00254a1:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00254a7:	ff 35 70 f1 02 c0    	push   DWORD PTR ds:0xc002f170
c00254ad:	e8 4e c8 fe ff       	call   c0011d00 <VAS::mapPage(unsigned long, unsigned long, int)>
c00254b2:	83 c4 14             	add    esp,0x14
c00254b5:	53                   	push   ebx
c00254b6:	e8 fb ec fe ff       	call   c00141b6 <PhysicalDisk::startCache()>
c00254bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00254be:	e8 ad 0f ff ff       	call   c0016470 <createPartitionsForDisk(PhysicalDisk*)>
c00254c3:	83 c4 14             	add    esp,0x14
c00254c6:	31 c0                	xor    eax,eax
c00254c8:	5b                   	pop    ebx
c00254c9:	5e                   	pop    esi
c00254ca:	c3                   	ret    
c00254cb:	90                   	nop

c00254cc <SATA::SATA()>:
c00254cc:	83 ec 0c             	sub    esp,0xc
c00254cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254d3:	83 ec 04             	sub    esp,0x4
c00254d6:	68 00 02 00 00       	push   0x200
c00254db:	68 fc d8 02 c0       	push   0xc002d8fc
c00254e0:	50                   	push   eax
c00254e1:	e8 68 ec fe ff       	call   c001414e <PhysicalDisk::PhysicalDisk(char const*, int)>
c00254e6:	83 c4 10             	add    esp,0x10
c00254e9:	ba 6c d9 02 c0       	mov    edx,0xc002d96c
c00254ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254f2:	89 10                	mov    DWORD PTR [eax],edx
c00254f4:	90                   	nop
c00254f5:	83 c4 0c             	add    esp,0xc
c00254f8:	c3                   	ret    
c00254f9:	90                   	nop

c00254fa <SATA::access(unsigned long long, int, void*, bool)>:
c00254fa:	55                   	push   ebp
c00254fb:	57                   	push   edi
c00254fc:	56                   	push   esi
c00254fd:	53                   	push   ebx
c00254fe:	83 ec 2c             	sub    esp,0x2c
c0025501:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025505:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0025509:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002550d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025511:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0025515:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002551a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002551e:	7e 10                	jle    c0025530 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0025520:	83 ec 0c             	sub    esp,0xc
c0025523:	68 0c d9 02 c0       	push   0xc002d90c
c0025528:	e8 d8 4d ff ff       	call   c001a305 <Krnl::panic(char const*)>
c002552d:	83 c4 10             	add    esp,0x10
c0025530:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0025536:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002553c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025542:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025546:	89 d0                	mov    eax,edx
c0025548:	c1 e0 07             	shl    eax,0x7
c002554b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002554f:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025559:	51                   	push   ecx
c002555a:	8d 42 02             	lea    eax,[edx+0x2]
c002555d:	51                   	push   ecx
c002555e:	c1 e0 07             	shl    eax,0x7
c0025561:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025565:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025569:	50                   	push   eax
c002556a:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0025570:	e8 e7 ef ff ff       	call   c002455c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025575:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025579:	83 c4 10             	add    esp,0x10
c002557c:	b8 01 00 00 00       	mov    eax,0x1
c0025581:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025586:	0f 84 cb 01 00 00    	je     c0025757 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002558c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025590:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025594:	c1 e0 09             	shl    eax,0x9
c0025597:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002559c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00255a0:	74 0e                	je     c00255b0 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c00255a2:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c00255a8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00255ac:	89 c1                	mov    ecx,eax
c00255ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00255b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00255b4:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00255ba:	8d 42 02             	lea    eax,[edx+0x2]
c00255bd:	c1 e0 07             	shl    eax,0x7
c00255c0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00255c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00255c6:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00255cc:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00255d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00255d6:	c1 e1 05             	shl    ecx,0x5
c00255d9:	01 c8                	add    eax,ecx
c00255db:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00255df:	83 e1 01             	and    ecx,0x1
c00255e2:	89 ce                	mov    esi,ecx
c00255e4:	8a 08                	mov    cl,BYTE PTR [eax]
c00255e6:	c1 e6 06             	shl    esi,0x6
c00255e9:	83 e1 bf             	and    ecx,0xffffffbf
c00255ec:	09 f1                	or     ecx,esi
c00255ee:	88 08                	mov    BYTE PTR [eax],cl
c00255f0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00255f2:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00255f8:	81 c9 05 00 01 00    	or     ecx,0x10005
c00255fe:	89 08                	mov    DWORD PTR [eax],ecx
c0025600:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025606:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002560c:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0025612:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0025615:	50                   	push   eax
c0025616:	68 90 00 00 00       	push   0x90
c002561b:	6a 00                	push   0x0
c002561d:	56                   	push   esi
c002561e:	e8 2d b1 fd ff       	call   c0000750 <memset>
c0025623:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0025629:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c002562d:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0025633:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0025637:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002563b:	83 c4 10             	add    esp,0x10
c002563e:	48                   	dec    eax
c002563f:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025644:	89 c1                	mov    ecx,eax
c0025646:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002564c:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025651:	09 c8                	or     eax,ecx
c0025653:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0025659:	66 8b 06             	mov    ax,WORD PTR [esi]
c002565c:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0025663:	66 25 00 7f          	and    ax,0x7f00
c0025667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002566b:	66 0d 27 80          	or     ax,0x8027
c002566f:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0025674:	66 89 06             	mov    WORD PTR [esi],ax
c0025677:	19 c0                	sbb    eax,eax
c0025679:	83 e0 f0             	and    eax,0xfffffff0
c002567c:	83 c0 35             	add    eax,0x35
c002567f:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0025682:	89 e8                	mov    eax,ebp
c0025684:	c1 e8 10             	shr    eax,0x10
c0025687:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002568a:	89 e8                	mov    eax,ebp
c002568c:	c1 e8 18             	shr    eax,0x18
c002568f:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0025692:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0025696:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0025699:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002569d:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00256a0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00256a4:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00256a8:	89 d6                	mov    esi,edx
c00256aa:	31 c0                	xor    eax,eax
c00256ac:	c1 e6 07             	shl    esi,0x7
c00256af:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00256b3:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c00256b9:	80 e1 88             	and    cl,0x88
c00256bc:	74 0a                	je     c00256c8 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c00256be:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00256c3:	74 0a                	je     c00256cf <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c00256c5:	40                   	inc    eax
c00256c6:	eb eb                	jmp    c00256b3 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c00256c8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00256cd:	75 0a                	jne    c00256d9 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c00256cf:	83 ec 0c             	sub    esp,0xc
c00256d2:	68 45 d9 02 c0       	push   0xc002d945
c00256d7:	eb 56                	jmp    c002572f <SATA::access(unsigned long long, int, void*, bool)+0x235>
c00256d9:	b8 01 00 00 00       	mov    eax,0x1
c00256de:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00256e2:	c1 e2 07             	shl    edx,0x7
c00256e5:	d3 e0                	shl    eax,cl
c00256e7:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00256eb:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c00256f1:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c00256f7:	85 c8                	test   eax,ecx
c00256f9:	74 20                	je     c002571b <SATA::access(unsigned long long, int, void*, bool)+0x221>
c00256fb:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0025701:	0f ba e1 1e          	bt     ecx,0x1e
c0025705:	73 ea                	jae    c00256f1 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0025707:	83 ec 0c             	sub    esp,0xc
c002570a:	68 53 d9 02 c0       	push   0xc002d953
c002570f:	e8 f1 4b ff ff       	call   c001a305 <Krnl::panic(char const*)>
c0025714:	83 c4 10             	add    esp,0x10
c0025717:	31 c0                	xor    eax,eax
c0025719:	eb 3c                	jmp    c0025757 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002571b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0025721:	0f ba e0 1e          	bt     eax,0x1e
c0025725:	73 17                	jae    c002573e <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0025727:	83 ec 0c             	sub    esp,0xc
c002572a:	68 53 d9 02 c0       	push   0xc002d953
c002572f:	e8 d1 4b ff ff       	call   c001a305 <Krnl::panic(char const*)>
c0025734:	83 c4 10             	add    esp,0x10
c0025737:	b8 01 00 00 00       	mov    eax,0x1
c002573c:	eb 19                	jmp    c0025757 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c002573e:	31 c0                	xor    eax,eax
c0025740:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025745:	75 10                	jne    c0025757 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025747:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002574d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0025751:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025755:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025757:	83 c4 2c             	add    esp,0x2c
c002575a:	5b                   	pop    ebx
c002575b:	5e                   	pop    esi
c002575c:	5f                   	pop    edi
c002575d:	5d                   	pop    ebp
c002575e:	c3                   	ret    
c002575f:	90                   	nop

c0025760 <SATA::read(unsigned long long, int, void*)>:
c0025760:	57                   	push   edi
c0025761:	b8 04 00 00 00       	mov    eax,0x4
c0025766:	56                   	push   esi
c0025767:	53                   	push   ebx
c0025768:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002576c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025770:	8d 7a ff             	lea    edi,[edx-0x1]
c0025773:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025777:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002577b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0025781:	77 25                	ja     c00257a8 <SATA::read(unsigned long long, int, void*)+0x48>
c0025783:	b8 06 00 00 00       	mov    eax,0x6
c0025788:	85 f6                	test   esi,esi
c002578a:	74 1c                	je     c00257a8 <SATA::read(unsigned long long, int, void*)+0x48>
c002578c:	50                   	push   eax
c002578d:	50                   	push   eax
c002578e:	6a 00                	push   0x0
c0025790:	56                   	push   esi
c0025791:	52                   	push   edx
c0025792:	53                   	push   ebx
c0025793:	51                   	push   ecx
c0025794:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025798:	e8 5d fd ff ff       	call   c00254fa <SATA::access(unsigned long long, int, void*, bool)>
c002579d:	83 c4 20             	add    esp,0x20
c00257a0:	85 c0                	test   eax,eax
c00257a2:	0f 95 c0             	setne  al
c00257a5:	0f b6 c0             	movzx  eax,al
c00257a8:	5b                   	pop    ebx
c00257a9:	5e                   	pop    esi
c00257aa:	5f                   	pop    edi
c00257ab:	c3                   	ret    

c00257ac <SATA::write(unsigned long long, int, void*)>:
c00257ac:	55                   	push   ebp
c00257ad:	b8 04 00 00 00       	mov    eax,0x4
c00257b2:	57                   	push   edi
c00257b3:	56                   	push   esi
c00257b4:	53                   	push   ebx
c00257b5:	83 ec 0c             	sub    esp,0xc
c00257b8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00257bc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00257c0:	8d 73 ff             	lea    esi,[ebx-0x1]
c00257c3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00257c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00257cb:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00257d1:	77 3d                	ja     c0025810 <SATA::write(unsigned long long, int, void*)+0x64>
c00257d3:	b8 06 00 00 00       	mov    eax,0x6
c00257d8:	85 ed                	test   ebp,ebp
c00257da:	74 34                	je     c0025810 <SATA::write(unsigned long long, int, void*)+0x64>
c00257dc:	c1 e3 09             	shl    ebx,0x9
c00257df:	01 eb                	add    ebx,ebp
c00257e1:	89 d6                	mov    esi,edx
c00257e3:	89 cf                	mov    edi,ecx
c00257e5:	83 c6 01             	add    esi,0x1
c00257e8:	83 d7 00             	adc    edi,0x0
c00257eb:	50                   	push   eax
c00257ec:	50                   	push   eax
c00257ed:	6a 01                	push   0x1
c00257ef:	55                   	push   ebp
c00257f0:	81 c5 00 02 00 00    	add    ebp,0x200
c00257f6:	6a 01                	push   0x1
c00257f8:	51                   	push   ecx
c00257f9:	52                   	push   edx
c00257fa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00257fe:	e8 f7 fc ff ff       	call   c00254fa <SATA::access(unsigned long long, int, void*, bool)>
c0025803:	83 c4 20             	add    esp,0x20
c0025806:	89 f2                	mov    edx,esi
c0025808:	89 f9                	mov    ecx,edi
c002580a:	39 dd                	cmp    ebp,ebx
c002580c:	75 d3                	jne    c00257e1 <SATA::write(unsigned long long, int, void*)+0x35>
c002580e:	31 c0                	xor    eax,eax
c0025810:	83 c4 0c             	add    esp,0xc
c0025813:	5b                   	pop    ebx
c0025814:	5e                   	pop    esi
c0025815:	5f                   	pop    edi
c0025816:	5d                   	pop    ebp
c0025817:	c3                   	ret    

c0025818 <SATAPI::write(unsigned long long, int, void*)>:
c0025818:	b8 03 00 00 00       	mov    eax,0x3
c002581d:	c3                   	ret    

c002581e <SATAPI::close(int, int, void*)>:
c002581e:	83 ec 0c             	sub    esp,0xc
c0025821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025825:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002582b:	85 c0                	test   eax,eax
c002582d:	74 0c                	je     c002583b <SATAPI::close(int, int, void*)+0x1d>
c002582f:	83 ec 0c             	sub    esp,0xc
c0025832:	8b 10                	mov    edx,DWORD PTR [eax]
c0025834:	50                   	push   eax
c0025835:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025838:	83 c4 10             	add    esp,0x10
c002583b:	31 c0                	xor    eax,eax
c002583d:	83 c4 0c             	add    esp,0xc
c0025840:	c3                   	ret    
c0025841:	90                   	nop

c0025842 <SATAPI::SATAPI()>:
c0025842:	83 ec 0c             	sub    esp,0xc
c0025845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025849:	83 ec 04             	sub    esp,0x4
c002584c:	68 00 08 00 00       	push   0x800
c0025851:	68 9c d9 02 c0       	push   0xc002d99c
c0025856:	50                   	push   eax
c0025857:	e8 f2 e8 fe ff       	call   c001414e <PhysicalDisk::PhysicalDisk(char const*, int)>
c002585c:	83 c4 10             	add    esp,0x10
c002585f:	ba 48 da 02 c0       	mov    edx,0xc002da48
c0025864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025868:	89 10                	mov    DWORD PTR [eax],edx
c002586a:	90                   	nop
c002586b:	83 c4 0c             	add    esp,0xc
c002586e:	c3                   	ret    
c002586f:	90                   	nop

c0025870 <SATAPI::diskRemoved()>:
c0025870:	83 ec 18             	sub    esp,0x18
c0025873:	68 a8 d9 02 c0       	push   0xc002d9a8
c0025878:	e8 52 d0 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c002587d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025881:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025888:	83 c4 1c             	add    esp,0x1c
c002588b:	c3                   	ret    

c002588c <SATAPI::diskInserted()>:
c002588c:	53                   	push   ebx
c002588d:	83 ec 14             	sub    esp,0x14
c0025890:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025894:	68 bf d9 02 c0       	push   0xc002d9bf
c0025899:	e8 31 d0 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c002589e:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c00258a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00258a8:	e8 09 e9 fe ff       	call   c00141b6 <PhysicalDisk::startCache()>
c00258ad:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00258b1:	83 c4 18             	add    esp,0x18
c00258b4:	5b                   	pop    ebx
c00258b5:	e9 b6 0b ff ff       	jmp    c0016470 <createPartitionsForDisk(PhysicalDisk*)>

c00258ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00258ba:	55                   	push   ebp
c00258bb:	57                   	push   edi
c00258bc:	56                   	push   esi
c00258bd:	53                   	push   ebx
c00258be:	83 ec 34             	sub    esp,0x34
c00258c1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00258c5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00258c9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00258cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00258d1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00258d5:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00258db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00258e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00258e5:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00258eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00258ef:	c1 e0 07             	shl    eax,0x7
c00258f2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00258f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00258fa:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025904:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025908:	8d 58 02             	lea    ebx,[eax+0x2]
c002590b:	c1 e3 07             	shl    ebx,0x7
c002590e:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0025912:	53                   	push   ebx
c0025913:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025919:	e8 3e ec ff ff       	call   c002455c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002591e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025922:	83 c4 10             	add    esp,0x10
c0025925:	b8 01 00 00 00       	mov    eax,0x1
c002592a:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002592f:	0f 84 85 01 00 00    	je     c0025aba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025935:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002593b:	8b 03                	mov    eax,DWORD PTR [ebx]
c002593d:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025943:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025949:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002594d:	c1 e1 05             	shl    ecx,0x5
c0025950:	01 c8                	add    eax,ecx
c0025952:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025954:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002595a:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025960:	89 08                	mov    DWORD PTR [eax],ecx
c0025962:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025968:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002596e:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025974:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025977:	8d 7b 40             	lea    edi,[ebx+0x40]
c002597a:	50                   	push   eax
c002597b:	68 90 00 00 00       	push   0x90
c0025980:	6a 00                	push   0x0
c0025982:	53                   	push   ebx
c0025983:	e8 c8 ad fd ff       	call   c0000750 <memset>
c0025988:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002598c:	b9 0c 00 00 00       	mov    ecx,0xc
c0025991:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025993:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025999:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002599d:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00259a3:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00259a7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00259ab:	48                   	dec    eax
c00259ac:	25 ff ff 3f 00       	and    eax,0x3fffff
c00259b1:	89 c1                	mov    ecx,eax
c00259b3:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00259b9:	25 00 00 c0 ff       	and    eax,0xffc00000
c00259be:	09 c8                	or     eax,ecx
c00259c0:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00259c6:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00259c9:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00259d0:	66 25 00 7f          	and    ax,0x7f00
c00259d4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00259d8:	66 0d 27 80          	or     ax,0x8027
c00259dc:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00259e0:	66 89 03             	mov    WORD PTR [ebx],ax
c00259e3:	89 d0                	mov    eax,edx
c00259e5:	c1 ea 18             	shr    edx,0x18
c00259e8:	c1 e8 10             	shr    eax,0x10
c00259eb:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00259ee:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00259f1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00259f5:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00259f8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00259fc:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00259ff:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0025a03:	83 c4 10             	add    esp,0x10
c0025a06:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025a0a:	31 c0                	xor    eax,eax
c0025a0c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025a10:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0025a16:	80 e2 88             	and    dl,0x88
c0025a19:	74 0a                	je     c0025a25 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025a1b:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025a20:	74 0a                	je     c0025a2c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025a22:	40                   	inc    eax
c0025a23:	eb eb                	jmp    c0025a10 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025a25:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025a2a:	75 0f                	jne    c0025a3b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025a2c:	83 ec 0c             	sub    esp,0xc
c0025a2f:	68 45 d9 02 c0       	push   0xc002d945
c0025a34:	e8 cc 48 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c0025a39:	eb 3f                	jmp    c0025a7a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025a3b:	ba 01 00 00 00       	mov    edx,0x1
c0025a40:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025a48:	d3 e2                	shl    edx,cl
c0025a4a:	c1 e0 07             	shl    eax,0x7
c0025a4d:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025a53:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025a57:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025a5d:	85 ca                	test   edx,ecx
c0025a5f:	74 23                	je     c0025a84 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025a61:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025a67:	0f ba e1 1e          	bt     ecx,0x1e
c0025a6b:	73 ea                	jae    c0025a57 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025a6d:	83 ec 0c             	sub    esp,0xc
c0025a70:	68 d7 d9 02 c0       	push   0xc002d9d7
c0025a75:	e8 55 ce fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0025a7a:	83 c4 10             	add    esp,0x10
c0025a7d:	b8 01 00 00 00       	mov    eax,0x1
c0025a82:	eb 36                	jmp    c0025aba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025a84:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025a8a:	0f ba e0 1e          	bt     eax,0x1e
c0025a8e:	73 0a                	jae    c0025a9a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025a90:	83 ec 0c             	sub    esp,0xc
c0025a93:	68 ea d9 02 c0       	push   0xc002d9ea
c0025a98:	eb db                	jmp    c0025a75 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025a9a:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025a9f:	74 17                	je     c0025ab8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025aa1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025aa6:	74 10                	je     c0025ab8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025aa8:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025aae:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025ab2:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025ab6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025ab8:	31 c0                	xor    eax,eax
c0025aba:	83 c4 2c             	add    esp,0x2c
c0025abd:	5b                   	pop    ebx
c0025abe:	5e                   	pop    esi
c0025abf:	5f                   	pop    edi
c0025ac0:	5d                   	pop    ebp
c0025ac1:	c3                   	ret    

c0025ac2 <SATAPI::eject()>:
c0025ac2:	57                   	push   edi
c0025ac3:	b9 03 00 00 00       	mov    ecx,0x3
c0025ac8:	53                   	push   ebx
c0025ac9:	83 ec 14             	sub    esp,0x14
c0025acc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025ad0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025ad4:	fc                   	cld    
c0025ad5:	31 c0                	xor    eax,eax
c0025ad7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025ad9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025ade:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025ae3:	50                   	push   eax
c0025ae4:	6a 00                	push   0x0
c0025ae6:	6a 00                	push   0x0
c0025ae8:	6a 00                	push   0x0
c0025aea:	6a 00                	push   0x0
c0025aec:	6a 02                	push   0x2
c0025aee:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025af2:	50                   	push   eax
c0025af3:	53                   	push   ebx
c0025af4:	e8 c1 fd ff ff       	call   c00258ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025af9:	83 c4 14             	add    esp,0x14
c0025afc:	53                   	push   ebx
c0025afd:	e8 6e fd ff ff       	call   c0025870 <SATAPI::diskRemoved()>
c0025b02:	83 c4 24             	add    esp,0x24
c0025b05:	31 c0                	xor    eax,eax
c0025b07:	5b                   	pop    ebx
c0025b08:	5f                   	pop    edi
c0025b09:	c3                   	ret    

c0025b0a <SATAPI::detectMedia()>:
c0025b0a:	56                   	push   esi
c0025b0b:	53                   	push   ebx
c0025b0c:	83 ec 28             	sub    esp,0x28
c0025b0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025b13:	6a 0c                	push   0xc
c0025b15:	6a 00                	push   0x0
c0025b17:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025b1b:	56                   	push   esi
c0025b1c:	e8 2f ac fd ff       	call   c0000750 <memset>
c0025b21:	83 c4 0c             	add    esp,0xc
c0025b24:	6a 00                	push   0x0
c0025b26:	6a 00                	push   0x0
c0025b28:	6a 00                	push   0x0
c0025b2a:	6a 00                	push   0x0
c0025b2c:	6a 00                	push   0x0
c0025b2e:	56                   	push   esi
c0025b2f:	53                   	push   ebx
c0025b30:	e8 85 fd ff ff       	call   c00258ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b35:	83 c4 1c             	add    esp,0x1c
c0025b38:	6a 0c                	push   0xc
c0025b3a:	6a 00                	push   0x0
c0025b3c:	56                   	push   esi
c0025b3d:	e8 0e ac fd ff       	call   c0000750 <memset>
c0025b42:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025b47:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025b4c:	83 c4 0c             	add    esp,0xc
c0025b4f:	6a 01                	push   0x1
c0025b51:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025b55:	50                   	push   eax
c0025b56:	6a 00                	push   0x0
c0025b58:	6a 00                	push   0x0
c0025b5a:	6a 12                	push   0x12
c0025b5c:	56                   	push   esi
c0025b5d:	53                   	push   ebx
c0025b5e:	e8 57 fd ff ff       	call   c00258ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b63:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025b67:	83 c4 20             	add    esp,0x20
c0025b6a:	83 e0 7f             	and    eax,0x7f
c0025b6d:	3c 70                	cmp    al,0x70
c0025b6f:	74 15                	je     c0025b86 <SATAPI::detectMedia()+0x7c>
c0025b71:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b78:	75 0c                	jne    c0025b86 <SATAPI::detectMedia()+0x7c>
c0025b7a:	83 ec 0c             	sub    esp,0xc
c0025b7d:	53                   	push   ebx
c0025b7e:	e8 09 fd ff ff       	call   c002588c <SATAPI::diskInserted()>
c0025b83:	83 c4 10             	add    esp,0x10
c0025b86:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025b8a:	83 e0 0f             	and    eax,0xf
c0025b8d:	3c 02                	cmp    al,0x2
c0025b8f:	75 1b                	jne    c0025bac <SATAPI::detectMedia()+0xa2>
c0025b91:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025b96:	75 2d                	jne    c0025bc5 <SATAPI::detectMedia()+0xbb>
c0025b98:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b9f:	74 24                	je     c0025bc5 <SATAPI::detectMedia()+0xbb>
c0025ba1:	83 ec 0c             	sub    esp,0xc
c0025ba4:	53                   	push   ebx
c0025ba5:	e8 c6 fc ff ff       	call   c0025870 <SATAPI::diskRemoved()>
c0025baa:	eb 16                	jmp    c0025bc2 <SATAPI::detectMedia()+0xb8>
c0025bac:	84 c0                	test   al,al
c0025bae:	75 15                	jne    c0025bc5 <SATAPI::detectMedia()+0xbb>
c0025bb0:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025bb7:	75 0c                	jne    c0025bc5 <SATAPI::detectMedia()+0xbb>
c0025bb9:	83 ec 0c             	sub    esp,0xc
c0025bbc:	53                   	push   ebx
c0025bbd:	e8 ca fc ff ff       	call   c002588c <SATAPI::diskInserted()>
c0025bc2:	83 c4 10             	add    esp,0x10
c0025bc5:	83 c4 24             	add    esp,0x24
c0025bc8:	5b                   	pop    ebx
c0025bc9:	5e                   	pop    esi
c0025bca:	c3                   	ret    
c0025bcb:	90                   	nop

c0025bcc <SATAPI::open(int, int, void*)>:
c0025bcc:	56                   	push   esi
c0025bcd:	53                   	push   ebx
c0025bce:	50                   	push   eax
c0025bcf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025bd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025bd7:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025be1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025be7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025bf1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025bf5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025bff:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025c05:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025c0c:	e8 80 9f fe ff       	call   c000fb91 <Phys::allocatePage()>
c0025c11:	89 c6                	mov    esi,eax
c0025c13:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025c19:	81 c6 00 10 00 00    	add    esi,0x1000
c0025c1f:	e8 6d 9f fe ff       	call   c000fb91 <Phys::allocatePage()>
c0025c24:	39 c6                	cmp    esi,eax
c0025c26:	74 10                	je     c0025c38 <SATAPI::open(int, int, void*)+0x6c>
c0025c28:	83 ec 0c             	sub    esp,0xc
c0025c2b:	68 ff d9 02 c0       	push   0xc002d9ff
c0025c30:	e8 d0 46 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c0025c35:	83 c4 10             	add    esp,0x10
c0025c38:	83 ec 0c             	sub    esp,0xc
c0025c3b:	6a 02                	push   0x2
c0025c3d:	e8 87 b8 fe ff       	call   c00114c9 <Virt::allocateKernelVirtualPages(int)>
c0025c42:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025c48:	6a 03                	push   0x3
c0025c4a:	50                   	push   eax
c0025c4b:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025c51:	ff 35 70 f1 02 c0    	push   DWORD PTR ds:0xc002f170
c0025c57:	e8 a4 c0 fe ff       	call   c0011d00 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025c5c:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025c63:	83 c4 14             	add    esp,0x14
c0025c66:	53                   	push   ebx
c0025c67:	e8 9e fe ff ff       	call   c0025b0a <SATAPI::detectMedia()>
c0025c6c:	83 c4 14             	add    esp,0x14
c0025c6f:	31 c0                	xor    eax,eax
c0025c71:	5b                   	pop    ebx
c0025c72:	5e                   	pop    esi
c0025c73:	c3                   	ret    

c0025c74 <SATAPI::read(unsigned long long, int, void*)>:
c0025c74:	55                   	push   ebp
c0025c75:	57                   	push   edi
c0025c76:	56                   	push   esi
c0025c77:	53                   	push   ebx
c0025c78:	83 ec 1c             	sub    esp,0x1c
c0025c7b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025c7f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025c83:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025c87:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025c8e:	74 19                	je     c0025ca9 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025c90:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025c95:	7e 2e                	jle    c0025cc5 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025c97:	83 ec 0c             	sub    esp,0xc
c0025c9a:	68 15 da 02 c0       	push   0xc002da15
c0025c9f:	e8 61 46 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c0025ca4:	83 c4 10             	add    esp,0x10
c0025ca7:	eb 1c                	jmp    c0025cc5 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025ca9:	83 ec 0c             	sub    esp,0xc
c0025cac:	55                   	push   ebp
c0025cad:	e8 58 fe ff ff       	call   c0025b0a <SATAPI::detectMedia()>
c0025cb2:	83 c4 10             	add    esp,0x10
c0025cb5:	b8 02 00 00 00       	mov    eax,0x2
c0025cba:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025cc1:	75 cd                	jne    c0025c90 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025cc3:	eb 49                	jmp    c0025d0e <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025cc5:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025cc9:	b9 03 00 00 00       	mov    ecx,0x3
c0025cce:	fc                   	cld    
c0025ccf:	31 c0                	xor    eax,eax
c0025cd1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025cd3:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025cd8:	89 d8                	mov    eax,ebx
c0025cda:	86 e0                	xchg   al,ah
c0025cdc:	c1 c0 10             	rol    eax,0x10
c0025cdf:	86 e0                	xchg   al,ah
c0025ce1:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025ce5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025ce9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025ced:	50                   	push   eax
c0025cee:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025cf2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025cf6:	56                   	push   esi
c0025cf7:	53                   	push   ebx
c0025cf8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025cfc:	c1 e0 0b             	shl    eax,0xb
c0025cff:	50                   	push   eax
c0025d00:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025d04:	50                   	push   eax
c0025d05:	55                   	push   ebp
c0025d06:	e8 af fb ff ff       	call   c00258ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025d0b:	83 c4 20             	add    esp,0x20
c0025d0e:	83 c4 1c             	add    esp,0x1c
c0025d11:	5b                   	pop    ebx
c0025d12:	5e                   	pop    esi
c0025d13:	5f                   	pop    edi
c0025d14:	5d                   	pop    ebp
c0025d15:	c3                   	ret    

c0025d16 <AVX::open(int, int, void*)>:
c0025d16:	83 ec 0c             	sub    esp,0xc
c0025d19:	e8 3a 11 00 00       	call   c0026e58 <avxInit>
c0025d1e:	b8 00 00 00 00       	mov    eax,0x0
c0025d23:	83 c4 0c             	add    esp,0xc
c0025d26:	c3                   	ret    
c0025d27:	90                   	nop

c0025d28 <AVX::close(int, int, void*)>:
c0025d28:	83 ec 0c             	sub    esp,0xc
c0025d2b:	e8 29 11 00 00       	call   c0026e59 <avxClose>
c0025d30:	b8 00 00 00 00       	mov    eax,0x0
c0025d35:	83 c4 0c             	add    esp,0xc
c0025d38:	c3                   	ret    
c0025d39:	90                   	nop

c0025d3a <AVX::available()>:
c0025d3a:	83 ec 0c             	sub    esp,0xc
c0025d3d:	e8 0e 11 00 00       	call   c0026e50 <avxDetect>
c0025d42:	85 c0                	test   eax,eax
c0025d44:	0f 95 c0             	setne  al
c0025d47:	83 c4 0c             	add    esp,0xc
c0025d4a:	c3                   	ret    
c0025d4b:	90                   	nop

c0025d4c <AVX::save(void*)>:
c0025d4c:	83 ec 0c             	sub    esp,0xc
c0025d4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d53:	83 ec 0c             	sub    esp,0xc
c0025d56:	50                   	push   eax
c0025d57:	e8 fa 10 00 00       	call   c0026e56 <avxSave>
c0025d5c:	83 c4 10             	add    esp,0x10
c0025d5f:	90                   	nop
c0025d60:	83 c4 0c             	add    esp,0xc
c0025d63:	c3                   	ret    

c0025d64 <AVX::load(void*)>:
c0025d64:	83 ec 0c             	sub    esp,0xc
c0025d67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d6b:	83 ec 0c             	sub    esp,0xc
c0025d6e:	50                   	push   eax
c0025d6f:	e8 e3 10 00 00       	call   c0026e57 <avxLoad>
c0025d74:	83 c4 10             	add    esp,0x10
c0025d77:	90                   	nop
c0025d78:	83 c4 0c             	add    esp,0xc
c0025d7b:	c3                   	ret    

c0025d7c <AVX::AVX()>:
c0025d7c:	83 ec 0c             	sub    esp,0xc
c0025d7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d83:	83 ec 08             	sub    esp,0x8
c0025d86:	68 78 da 02 c0       	push   0xc002da78
c0025d8b:	50                   	push   eax
c0025d8c:	e8 9b e4 fe ff       	call   c001422c <FPU::FPU(char const*)>
c0025d91:	83 c4 10             	add    esp,0x10
c0025d94:	ba 88 da 02 c0       	mov    edx,0xc002da88
c0025d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d9d:	89 10                	mov    DWORD PTR [eax],edx
c0025d9f:	90                   	nop
c0025da0:	83 c4 0c             	add    esp,0xc
c0025da3:	c3                   	ret    

c0025da4 <MMX::available()>:
c0025da4:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0025da9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025daf:	83 e0 20             	and    eax,0x20
c0025db2:	84 c0                	test   al,al
c0025db4:	0f 95 c0             	setne  al
c0025db7:	c3                   	ret    

c0025db8 <MMX::open(int, int, void*)>:
c0025db8:	83 ec 0c             	sub    esp,0xc
c0025dbb:	e8 22 11 00 00       	call   c0026ee2 <x87Init>
c0025dc0:	b8 00 00 00 00       	mov    eax,0x0
c0025dc5:	83 c4 0c             	add    esp,0xc
c0025dc8:	c3                   	ret    
c0025dc9:	90                   	nop

c0025dca <MMX::close(int, int, void*)>:
c0025dca:	83 ec 0c             	sub    esp,0xc
c0025dcd:	e8 2a 11 00 00       	call   c0026efc <x87Close>
c0025dd2:	b8 00 00 00 00       	mov    eax,0x0
c0025dd7:	83 c4 0c             	add    esp,0xc
c0025dda:	c3                   	ret    
c0025ddb:	90                   	nop

c0025ddc <MMX::save(void*)>:
c0025ddc:	83 ec 0c             	sub    esp,0xc
c0025ddf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025de3:	83 ec 0c             	sub    esp,0xc
c0025de6:	50                   	push   eax
c0025de7:	e8 e5 10 00 00       	call   c0026ed1 <x87Save>
c0025dec:	83 c4 10             	add    esp,0x10
c0025def:	90                   	nop
c0025df0:	83 c4 0c             	add    esp,0xc
c0025df3:	c3                   	ret    

c0025df4 <MMX::load(void*)>:
c0025df4:	83 ec 0c             	sub    esp,0xc
c0025df7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025dfb:	83 ec 0c             	sub    esp,0xc
c0025dfe:	50                   	push   eax
c0025dff:	e8 d6 10 00 00       	call   c0026eda <x87Load>
c0025e04:	83 c4 10             	add    esp,0x10
c0025e07:	90                   	nop
c0025e08:	83 c4 0c             	add    esp,0xc
c0025e0b:	c3                   	ret    

c0025e0c <MMX::MMX()>:
c0025e0c:	83 ec 0c             	sub    esp,0xc
c0025e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e13:	83 ec 08             	sub    esp,0x8
c0025e16:	68 b8 da 02 c0       	push   0xc002dab8
c0025e1b:	50                   	push   eax
c0025e1c:	e8 0b e4 fe ff       	call   c001422c <FPU::FPU(char const*)>
c0025e21:	83 c4 10             	add    esp,0x10
c0025e24:	ba c8 da 02 c0       	mov    edx,0xc002dac8
c0025e29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e2d:	89 10                	mov    DWORD PTR [eax],edx
c0025e2f:	90                   	nop
c0025e30:	83 c4 0c             	add    esp,0xc
c0025e33:	c3                   	ret    

c0025e34 <SSE::open(int, int, void*)>:
c0025e34:	83 ec 0c             	sub    esp,0xc
c0025e37:	e8 58 10 00 00       	call   c0026e94 <sseInit>
c0025e3c:	b8 00 00 00 00       	mov    eax,0x0
c0025e41:	83 c4 0c             	add    esp,0xc
c0025e44:	c3                   	ret    
c0025e45:	90                   	nop

c0025e46 <SSE::close(int, int, void*)>:
c0025e46:	83 ec 0c             	sub    esp,0xc
c0025e49:	e8 56 10 00 00       	call   c0026ea4 <sseClose>
c0025e4e:	b8 00 00 00 00       	mov    eax,0x0
c0025e53:	83 c4 0c             	add    esp,0xc
c0025e56:	c3                   	ret    
c0025e57:	90                   	nop

c0025e58 <SSE::available()>:
c0025e58:	83 ec 1c             	sub    esp,0x1c
c0025e5b:	e8 10 10 00 00       	call   c0026e70 <absolutelyNoChanceInHell>
c0025e60:	85 c0                	test   eax,eax
c0025e62:	0f 95 c0             	setne  al
c0025e65:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025e69:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025e6d:	83 c4 1c             	add    esp,0x1c
c0025e70:	c3                   	ret    
c0025e71:	90                   	nop

c0025e72 <SSE::save(void*)>:
c0025e72:	83 ec 0c             	sub    esp,0xc
c0025e75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e79:	83 ec 0c             	sub    esp,0xc
c0025e7c:	50                   	push   eax
c0025e7d:	e8 06 10 00 00       	call   c0026e88 <sseSave>
c0025e82:	83 c4 10             	add    esp,0x10
c0025e85:	90                   	nop
c0025e86:	83 c4 0c             	add    esp,0xc
c0025e89:	c3                   	ret    

c0025e8a <SSE::load(void*)>:
c0025e8a:	83 ec 0c             	sub    esp,0xc
c0025e8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e91:	83 ec 0c             	sub    esp,0xc
c0025e94:	50                   	push   eax
c0025e95:	e8 f4 0f 00 00       	call   c0026e8e <sseLoad>
c0025e9a:	83 c4 10             	add    esp,0x10
c0025e9d:	90                   	nop
c0025e9e:	83 c4 0c             	add    esp,0xc
c0025ea1:	c3                   	ret    

c0025ea2 <SSE::SSE()>:
c0025ea2:	83 ec 0c             	sub    esp,0xc
c0025ea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ea9:	83 ec 08             	sub    esp,0x8
c0025eac:	68 f8 da 02 c0       	push   0xc002daf8
c0025eb1:	50                   	push   eax
c0025eb2:	e8 75 e3 fe ff       	call   c001422c <FPU::FPU(char const*)>
c0025eb7:	83 c4 10             	add    esp,0x10
c0025eba:	ba 08 db 02 c0       	mov    edx,0xc002db08
c0025ebf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ec3:	89 10                	mov    DWORD PTR [eax],edx
c0025ec5:	90                   	nop
c0025ec6:	83 c4 0c             	add    esp,0xc
c0025ec9:	c3                   	ret    

c0025eca <x87::open(int, int, void*)>:
c0025eca:	83 ec 0c             	sub    esp,0xc
c0025ecd:	e8 10 10 00 00       	call   c0026ee2 <x87Init>
c0025ed2:	b8 00 00 00 00       	mov    eax,0x0
c0025ed7:	83 c4 0c             	add    esp,0xc
c0025eda:	c3                   	ret    
c0025edb:	90                   	nop

c0025edc <x87::close(int, int, void*)>:
c0025edc:	83 ec 0c             	sub    esp,0xc
c0025edf:	e8 18 10 00 00       	call   c0026efc <x87Close>
c0025ee4:	b8 00 00 00 00       	mov    eax,0x0
c0025ee9:	83 c4 0c             	add    esp,0xc
c0025eec:	c3                   	ret    
c0025eed:	90                   	nop

c0025eee <x87::available()>:
c0025eee:	83 ec 0c             	sub    esp,0xc
c0025ef1:	e8 c0 0f 00 00       	call   c0026eb6 <x87Detect>
c0025ef6:	85 c0                	test   eax,eax
c0025ef8:	0f 95 c0             	setne  al
c0025efb:	83 c4 0c             	add    esp,0xc
c0025efe:	c3                   	ret    
c0025eff:	90                   	nop

c0025f00 <x87::save(void*)>:
c0025f00:	83 ec 0c             	sub    esp,0xc
c0025f03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f07:	83 ec 0c             	sub    esp,0xc
c0025f0a:	50                   	push   eax
c0025f0b:	e8 c1 0f 00 00       	call   c0026ed1 <x87Save>
c0025f10:	83 c4 10             	add    esp,0x10
c0025f13:	90                   	nop
c0025f14:	83 c4 0c             	add    esp,0xc
c0025f17:	c3                   	ret    

c0025f18 <x87::load(void*)>:
c0025f18:	83 ec 0c             	sub    esp,0xc
c0025f1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f1f:	83 ec 0c             	sub    esp,0xc
c0025f22:	50                   	push   eax
c0025f23:	e8 b2 0f 00 00       	call   c0026eda <x87Load>
c0025f28:	83 c4 10             	add    esp,0x10
c0025f2b:	90                   	nop
c0025f2c:	83 c4 0c             	add    esp,0xc
c0025f2f:	c3                   	ret    

c0025f30 <x87::x87()>:
c0025f30:	83 ec 0c             	sub    esp,0xc
c0025f33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f37:	83 ec 08             	sub    esp,0x8
c0025f3a:	68 38 db 02 c0       	push   0xc002db38
c0025f3f:	50                   	push   eax
c0025f40:	e8 e7 e2 fe ff       	call   c001422c <FPU::FPU(char const*)>
c0025f45:	83 c4 10             	add    esp,0x10
c0025f48:	ba 48 db 02 c0       	mov    edx,0xc002db48
c0025f4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f51:	89 10                	mov    DWORD PTR [eax],edx
c0025f53:	90                   	nop
c0025f54:	83 c4 0c             	add    esp,0xc
c0025f57:	c3                   	ret    

c0025f58 <APIC::disable()>:
c0025f58:	90                   	nop
c0025f59:	c3                   	ret    

c0025f5a <APIC::close(int, int, void*)>:
c0025f5a:	55                   	push   ebp
c0025f5b:	89 e5                	mov    ebp,esp
c0025f5d:	83 ec 08             	sub    esp,0x8
c0025f60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f63:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f65:	83 c0 3c             	add    eax,0x3c
c0025f68:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f6a:	83 ec 0c             	sub    esp,0xc
c0025f6d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f70:	ff d0                	call   eax
c0025f72:	83 c4 10             	add    esp,0x10
c0025f75:	b8 00 00 00 00       	mov    eax,0x0
c0025f7a:	c9                   	leave  
c0025f7b:	c3                   	ret    

c0025f7c <IOAPIC::close(int, int, void*)>:
c0025f7c:	b8 00 00 00 00       	mov    eax,0x0
c0025f81:	c3                   	ret    

c0025f82 <APIC::io_wait()>:
c0025f82:	eb 00                	jmp    c0025f84 <APIC::io_wait()+0x2>
c0025f84:	eb 00                	jmp    c0025f86 <APIC::io_wait()+0x4>
c0025f86:	90                   	nop
c0025f87:	c3                   	ret    

c0025f88 <APIC::getBase()>:
c0025f88:	55                   	push   ebp
c0025f89:	89 e5                	mov    ebp,esp
c0025f8b:	83 ec 18             	sub    esp,0x18
c0025f8e:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0025f93:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025f99:	83 e0 08             	and    eax,0x8
c0025f9c:	84 c0                	test   al,al
c0025f9e:	75 07                	jne    c0025fa7 <APIC::getBase()+0x1f>
c0025fa0:	b8 00 00 00 00       	mov    eax,0x0
c0025fa5:	eb 21                	jmp    c0025fc8 <APIC::getBase()+0x40>
c0025fa7:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0025fac:	83 ec 08             	sub    esp,0x8
c0025faf:	6a 1b                	push   0x1b
c0025fb1:	50                   	push   eax
c0025fb2:	e8 7b 8e fe ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0025fb7:	83 c4 10             	add    esp,0x10
c0025fba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025fbd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025fc0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025fc3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025fc8:	c9                   	leave  
c0025fc9:	c3                   	ret    

c0025fca <APIC::eoi(unsigned char)>:
c0025fca:	55                   	push   ebp
c0025fcb:	89 e5                	mov    ebp,esp
c0025fcd:	83 ec 28             	sub    esp,0x28
c0025fd0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025fd3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025fd6:	83 ec 0c             	sub    esp,0xc
c0025fd9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fdc:	e8 a7 ff ff ff       	call   c0025f88 <APIC::getBase()>
c0025fe1:	83 c4 10             	add    esp,0x10
c0025fe4:	05 b0 00 00 00       	add    eax,0xb0
c0025fe9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025fec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025fef:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025ff5:	90                   	nop
c0025ff6:	c9                   	leave  
c0025ff7:	c3                   	ret    

c0025ff8 <APIC::open(int, int, void*)>:
c0025ff8:	55                   	push   ebp
c0025ff9:	89 e5                	mov    ebp,esp
c0025ffb:	57                   	push   edi
c0025ffc:	56                   	push   esi
c0025ffd:	53                   	push   ebx
c0025ffe:	83 ec 2c             	sub    esp,0x2c
c0026001:	83 ec 0c             	sub    esp,0xc
c0026004:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026007:	e8 7c ff ff ff       	call   c0025f88 <APIC::getBase()>
c002600c:	83 c4 10             	add    esp,0x10
c002600f:	89 c2                	mov    edx,eax
c0026011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026014:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002601a:	0f b6 f8             	movzx  edi,al
c002601d:	89 d0                	mov    eax,edx
c002601f:	ba 00 00 00 00       	mov    edx,0x0
c0026024:	89 c1                	mov    ecx,eax
c0026026:	80 e5 ff             	and    ch,0xff
c0026029:	89 cb                	mov    ebx,ecx
c002602b:	0f b6 f2             	movzx  esi,dl
c002602e:	89 d8                	mov    eax,ebx
c0026030:	89 f2                	mov    edx,esi
c0026032:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026035:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026038:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002603c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026040:	83 e0 00             	and    eax,0x0
c0026043:	09 d0                	or     eax,edx
c0026045:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026049:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002604c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026052:	8d 50 01             	lea    edx,[eax+0x1]
c0026055:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026058:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002605e:	0f b6 d0             	movzx  edx,al
c0026061:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026064:	83 c2 08             	add    edx,0x8
c0026067:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002606b:	0f b6 c9             	movzx  ecx,cl
c002606e:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026074:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026078:	83 ec 0c             	sub    esp,0xc
c002607b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002607e:	e8 05 ff ff ff       	call   c0025f88 <APIC::getBase()>
c0026083:	83 c4 10             	add    esp,0x10
c0026086:	05 f0 00 00 00       	add    eax,0xf0
c002608b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002608e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026091:	8b 00                	mov    eax,DWORD PTR [eax]
c0026093:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026096:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002609d:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00260a4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00260a7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00260aa:	89 10                	mov    DWORD PTR [eax],edx
c00260ac:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00260b3:	a1 d0 18 03 c0       	mov    eax,ds:0xc00318d0
c00260b8:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00260bb:	7d 7c                	jge    c0026139 <APIC::open(int, int, void*)+0x141>
c00260bd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00260c0:	8b 04 85 e0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce720]
c00260c7:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00260ca:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00260cd:	8b 04 85 e0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce720]
c00260d4:	c1 e8 08             	shr    eax,0x8
c00260d7:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00260db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00260de:	8b 04 85 e0 18 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce720]
c00260e5:	c1 e8 18             	shr    eax,0x18
c00260e8:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00260eb:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00260ef:	75 40                	jne    c0026131 <APIC::open(int, int, void*)+0x139>
c00260f1:	83 ec 0c             	sub    esp,0xc
c00260f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260f7:	e8 8c fe ff ff       	call   c0025f88 <APIC::getBase()>
c00260fc:	83 c4 10             	add    esp,0x10
c00260ff:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0026103:	75 07                	jne    c002610c <APIC::open(int, int, void*)+0x114>
c0026105:	ba 60 03 00 00       	mov    edx,0x360
c002610a:	eb 05                	jmp    c0026111 <APIC::open(int, int, void*)+0x119>
c002610c:	ba 50 03 00 00       	mov    edx,0x350
c0026111:	01 d0                	add    eax,edx
c0026113:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026116:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026119:	8b 00                	mov    eax,DWORD PTR [eax]
c002611b:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002611e:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0026125:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0026129:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002612c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002612f:	89 10                	mov    DWORD PTR [eax],edx
c0026131:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0026134:	e9 7a ff ff ff       	jmp    c00260b3 <APIC::open(int, int, void*)+0xbb>
c0026139:	b8 00 00 00 00       	mov    eax,0x0
c002613e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026141:	5b                   	pop    ebx
c0026142:	5e                   	pop    esi
c0026143:	5f                   	pop    edi
c0026144:	5d                   	pop    ebp
c0026145:	c3                   	ret    

c0026146 <IOAPIC::IOAPIC()>:
c0026146:	83 ec 0c             	sub    esp,0xc
c0026149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002614d:	83 ec 08             	sub    esp,0x8
c0026150:	68 78 db 02 c0       	push   0xc002db78
c0026155:	50                   	push   eax
c0026156:	e8 b1 dd fe ff       	call   c0013f0c <Device::Device(char const*)>
c002615b:	83 c4 10             	add    esp,0x10
c002615e:	ba a0 dc 02 c0       	mov    edx,0xc002dca0
c0026163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026167:	89 10                	mov    DWORD PTR [eax],edx
c0026169:	90                   	nop
c002616a:	83 c4 0c             	add    esp,0xc
c002616d:	c3                   	ret    

c002616e <APIC::APIC()>:
c002616e:	53                   	push   ebx
c002616f:	83 ec 18             	sub    esp,0x18
c0026172:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026176:	83 ec 08             	sub    esp,0x8
c0026179:	68 80 db 02 c0       	push   0xc002db80
c002617e:	50                   	push   eax
c002617f:	e8 02 e5 fe ff       	call   c0014686 <InterruptController::InterruptController(char const*)>
c0026184:	83 c4 10             	add    esp,0x10
c0026187:	ba 58 dc 02 c0       	mov    edx,0xc002dc58
c002618c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026190:	89 10                	mov    DWORD PTR [eax],edx
c0026192:	a0 a0 33 03 c0       	mov    al,ds:0xc00333a0
c0026197:	83 f0 01             	xor    eax,0x1
c002619a:	84 c0                	test   al,al
c002619c:	0f 84 a1 00 00 00    	je     c0026243 <APIC::APIC()+0xd5>
c00261a2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00261a7:	a0 80 19 03 c0       	mov    al,ds:0xc0031980
c00261ac:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00261b0:	0f 83 86 00 00 00    	jae    c002623c <APIC::APIC()+0xce>
c00261b6:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00261be:	83 ec 0c             	sub    esp,0xc
c00261c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00261c5:	e8 c2 96 fe ff       	call   c000f88c <malloc>
c00261ca:	83 c4 10             	add    esp,0x10
c00261cd:	89 c3                	mov    ebx,eax
c00261cf:	83 ec 0c             	sub    esp,0xc
c00261d2:	53                   	push   ebx
c00261d3:	e8 6e ff ff ff       	call   c0026146 <IOAPIC::IOAPIC()>
c00261d8:	83 c4 10             	add    esp,0x10
c00261db:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00261df:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00261e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00261e8:	89 14 85 80 33 03 c0 	mov    DWORD PTR [eax*4-0x3ffccc80],edx
c00261ef:	a1 60 33 03 c0       	mov    eax,ds:0xc0033360
c00261f4:	40                   	inc    eax
c00261f5:	a3 60 33 03 c0       	mov    ds:0xc0033360,eax
c00261fa:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c00261ff:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0026205:	83 ec 08             	sub    esp,0x8
c0026208:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002620c:	50                   	push   eax
c002620d:	e8 f6 da fe ff       	call   c0013d08 <Device::addChild(Device*)>
c0026212:	83 c4 10             	add    esp,0x10
c0026215:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026219:	8b 00                	mov    eax,DWORD PTR [eax]
c002621b:	83 c0 08             	add    eax,0x8
c002621e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026220:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0026225:	6a 00                	push   0x0
c0026227:	6a 00                	push   0x0
c0026229:	52                   	push   edx
c002622a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002622e:	ff d0                	call   eax
c0026230:	83 c4 10             	add    esp,0x10
c0026233:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0026237:	e9 6b ff ff ff       	jmp    c00261a7 <APIC::APIC()+0x39>
c002623c:	c6 05 a0 33 03 c0 01 	mov    BYTE PTR ds:0xc00333a0,0x1
c0026243:	90                   	nop
c0026244:	83 c4 18             	add    esp,0x18
c0026247:	5b                   	pop    ebx
c0026248:	c3                   	ret    
c0026249:	90                   	nop

c002624a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002624a:	55                   	push   ebp
c002624b:	89 e5                	mov    ebp,esp
c002624d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026250:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026256:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026259:	72 1d                	jb     c0026278 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002625b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002625e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0026264:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026267:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002626d:	01 d0                	add    eax,edx
c002626f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026272:	73 04                	jae    c0026278 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026274:	b0 01                	mov    al,0x1
c0026276:	eb 02                	jmp    c002627a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0026278:	b0 00                	mov    al,0x0
c002627a:	5d                   	pop    ebp
c002627b:	c3                   	ret    

c002627c <IOAPIC::read(int)>:
c002627c:	55                   	push   ebp
c002627d:	89 e5                	mov    ebp,esp
c002627f:	83 ec 10             	sub    esp,0x10
c0026282:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026285:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002628b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002628e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026291:	0f b6 d0             	movzx  edx,al
c0026294:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026297:	89 10                	mov    DWORD PTR [eax],edx
c0026299:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002629c:	83 c0 10             	add    eax,0x10
c002629f:	8b 00                	mov    eax,DWORD PTR [eax]
c00262a1:	c9                   	leave  
c00262a2:	c3                   	ret    
c00262a3:	90                   	nop

c00262a4 <IOAPIC::open(int, int, void*)>:
c00262a4:	55                   	push   ebp
c00262a5:	89 e5                	mov    ebp,esp
c00262a7:	57                   	push   edi
c00262a8:	56                   	push   esi
c00262a9:	53                   	push   ebx
c00262aa:	83 ec 0c             	sub    esp,0xc
c00262ad:	83 ec 0c             	sub    esp,0xc
c00262b0:	68 ab db 02 c0       	push   0xc002dbab
c00262b5:	e8 15 c6 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c00262ba:	83 c4 10             	add    esp,0x10
c00262bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262c0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00262c3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00262c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262cc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00262d2:	8b 14 85 c0 19 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce640]
c00262d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262dc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00262e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262e5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00262eb:	8b 14 85 40 1a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce5c0]
c00262f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262f5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00262fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262fe:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0026304:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026307:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002630d:	0f b6 f8             	movzx  edi,al
c0026310:	89 d0                	mov    eax,edx
c0026312:	ba 00 00 00 00       	mov    edx,0x0
c0026317:	89 c1                	mov    ecx,eax
c0026319:	80 e5 ff             	and    ch,0xff
c002631c:	89 cb                	mov    ebx,ecx
c002631e:	0f b6 f2             	movzx  esi,dl
c0026321:	89 d8                	mov    eax,ebx
c0026323:	89 f2                	mov    edx,esi
c0026325:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026328:	8d 5f 08             	lea    ebx,[edi+0x8]
c002632b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002632f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026333:	83 e0 00             	and    eax,0x0
c0026336:	09 d0                	or     eax,edx
c0026338:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002633c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002633f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026345:	8d 50 01             	lea    edx,[eax+0x1]
c0026348:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002634b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026351:	0f b6 d0             	movzx  edx,al
c0026354:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026357:	83 c2 08             	add    edx,0x8
c002635a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002635e:	0f b6 c9             	movzx  ecx,cl
c0026361:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0026367:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002636b:	83 ec 08             	sub    esp,0x8
c002636e:	6a 01                	push   0x1
c0026370:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026373:	e8 04 ff ff ff       	call   c002627c <IOAPIC::read(int)>
c0026378:	83 c4 10             	add    esp,0x10
c002637b:	c1 f8 10             	sar    eax,0x10
c002637e:	0f b6 c0             	movzx  eax,al
c0026381:	8d 50 01             	lea    edx,[eax+0x1]
c0026384:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026387:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002638d:	b8 00 00 00 00       	mov    eax,0x0
c0026392:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026395:	5b                   	pop    ebx
c0026396:	5e                   	pop    esi
c0026397:	5f                   	pop    edi
c0026398:	5d                   	pop    ebp
c0026399:	c3                   	ret    

c002639a <IOAPIC::write(int, int)>:
c002639a:	55                   	push   ebp
c002639b:	89 e5                	mov    ebp,esp
c002639d:	83 ec 10             	sub    esp,0x10
c00263a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00263a3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00263a9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00263ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263af:	0f b6 d0             	movzx  edx,al
c00263b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00263b5:	89 10                	mov    DWORD PTR [eax],edx
c00263b7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00263ba:	8d 50 10             	lea    edx,[eax+0x10]
c00263bd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00263c0:	89 02                	mov    DWORD PTR [edx],eax
c00263c2:	90                   	nop
c00263c3:	c9                   	leave  
c00263c4:	c3                   	ret    
c00263c5:	90                   	nop

c00263c6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00263c6:	55                   	push   ebp
c00263c7:	89 e5                	mov    ebp,esp
c00263c9:	53                   	push   ebx
c00263ca:	83 ec 2c             	sub    esp,0x2c
c00263cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263d0:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00263d3:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00263d6:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00263d9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00263dc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00263df:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00263e2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00263e5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00263e8:	88 d8                	mov    al,bl
c00263ea:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00263ed:	88 c8                	mov    al,cl
c00263ef:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00263f2:	88 d0                	mov    al,dl
c00263f4:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00263f7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00263fb:	83 c0 08             	add    eax,0x8
c00263fe:	01 c0                	add    eax,eax
c0026400:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026403:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026407:	83 c0 08             	add    eax,0x8
c002640a:	01 c0                	add    eax,eax
c002640c:	40                   	inc    eax
c002640d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026410:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026413:	50                   	push   eax
c0026414:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026417:	e8 60 fe ff ff       	call   c002627c <IOAPIC::read(int)>
c002641c:	83 c4 08             	add    esp,0x8
c002641f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026422:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0026429:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002642c:	c1 e0 18             	shl    eax,0x18
c002642f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0026432:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026435:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026438:	52                   	push   edx
c0026439:	50                   	push   eax
c002643a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002643d:	e8 58 ff ff ff       	call   c002639a <IOAPIC::write(int, int)>
c0026442:	83 c4 0c             	add    esp,0xc
c0026445:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026448:	50                   	push   eax
c0026449:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002644c:	e8 2b fe ff ff       	call   c002627c <IOAPIC::read(int)>
c0026451:	83 c4 08             	add    esp,0x8
c0026454:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026457:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002645e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0026465:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002646c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026470:	74 09                	je     c002647b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0026472:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0026479:	eb 07                	jmp    c0026482 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002647b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0026482:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0026486:	74 09                	je     c0026491 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0026488:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002648f:	eb 07                	jmp    c0026498 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0026491:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0026498:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002649f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00264a3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00264a6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00264a9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00264ac:	52                   	push   edx
c00264ad:	50                   	push   eax
c00264ae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00264b1:	e8 e4 fe ff ff       	call   c002639a <IOAPIC::write(int, int)>
c00264b6:	83 c4 0c             	add    esp,0xc
c00264b9:	90                   	nop
c00264ba:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00264bd:	c9                   	leave  
c00264be:	c3                   	ret    
c00264bf:	90                   	nop

c00264c0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00264c0:	55                   	push   ebp
c00264c1:	89 e5                	mov    ebp,esp
c00264c3:	57                   	push   edi
c00264c4:	56                   	push   esi
c00264c5:	53                   	push   ebx
c00264c6:	83 ec 2c             	sub    esp,0x2c
c00264c9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00264cc:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00264cf:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00264d3:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00264d7:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00264db:	74 5a                	je     c0026537 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00264dd:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00264e1:	7f 44                	jg     c0026527 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00264e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264e6:	05 60 e2 02 c0       	add    eax,0xc002e260
c00264eb:	8a 00                	mov    al,BYTE PTR [eax]
c00264ed:	0f b6 c0             	movzx  eax,al
c00264f0:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00264f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264f6:	66 8b 84 00 60 19 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce6a0]
c00264fe:	0f b7 c0             	movzx  eax,ax
c0026501:	83 e0 02             	and    eax,0x2
c0026504:	85 c0                	test   eax,eax
c0026506:	74 04                	je     c002650c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0026508:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002650c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002650f:	66 8b 84 00 60 19 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce6a0]
c0026517:	0f b7 c0             	movzx  eax,ax
c002651a:	83 e0 08             	and    eax,0x8
c002651d:	85 c0                	test   eax,eax
c002651f:	74 16                	je     c0026537 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026521:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026525:	eb 10                	jmp    c0026537 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026527:	83 ec 0c             	sub    esp,0xc
c002652a:	68 bc db 02 c0       	push   0xc002dbbc
c002652f:	e8 d1 3d ff ff       	call   c001a305 <Krnl::panic(char const*)>
c0026534:	83 c4 10             	add    esp,0x10
c0026537:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002653b:	a1 60 33 03 c0       	mov    eax,ds:0xc0033360
c0026540:	83 ec 08             	sub    esp,0x8
c0026543:	50                   	push   eax
c0026544:	68 f4 db 02 c0       	push   0xc002dbf4
c0026549:	e8 81 c3 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c002654e:	83 c4 10             	add    esp,0x10
c0026551:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0026558:	a1 60 33 03 c0       	mov    eax,ds:0xc0033360
c002655d:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0026560:	7d 67                	jge    c00265c9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026562:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026565:	8b 04 85 80 33 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffccc80]
c002656c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002656f:	83 ec 08             	sub    esp,0x8
c0026572:	52                   	push   edx
c0026573:	50                   	push   eax
c0026574:	e8 d1 fc ff ff       	call   c002624a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0026579:	83 c4 10             	add    esp,0x10
c002657c:	84 c0                	test   al,al
c002657e:	74 44                	je     c00265c4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0026580:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026583:	8b 1c 85 80 33 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffccc80]
c002658a:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002658e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026591:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0026595:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026598:	83 c0 20             	add    eax,0x20
c002659b:	0f b6 f0             	movzx  esi,al
c002659e:	b8 00 00 00 00       	mov    eax,0x0
c00265a3:	99                   	cdq    
c00265a4:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00265a7:	0f b6 c9             	movzx  ecx,cl
c00265aa:	83 ec 04             	sub    esp,0x4
c00265ad:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00265b0:	57                   	push   edi
c00265b1:	56                   	push   esi
c00265b2:	52                   	push   edx
c00265b3:	50                   	push   eax
c00265b4:	51                   	push   ecx
c00265b5:	53                   	push   ebx
c00265b6:	e8 0b fe ff ff       	call   c00263c6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00265bb:	83 c4 20             	add    esp,0x20
c00265be:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00265c2:	eb 05                	jmp    c00265c9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00265c4:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00265c7:	eb 8f                	jmp    c0026558 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00265c9:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00265cc:	83 f0 01             	xor    eax,0x1
c00265cf:	84 c0                	test   al,al
c00265d1:	74 10                	je     c00265e3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00265d3:	83 ec 0c             	sub    esp,0xc
c00265d6:	68 0b dc 02 c0       	push   0xc002dc0b
c00265db:	e8 25 3d ff ff       	call   c001a305 <Krnl::panic(char const*)>
c00265e0:	83 c4 10             	add    esp,0x10
c00265e3:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00265e7:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00265ee:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00265f2:	7f 65                	jg     c0026659 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00265f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265f7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00265fa:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026601:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026604:	01 ca                	add    edx,ecx
c0026606:	83 c2 54             	add    edx,0x54
c0026609:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002660d:	85 c0                	test   eax,eax
c002660f:	75 43                	jne    c0026654 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0026611:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026614:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026617:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002661e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026621:	01 ca                	add    edx,ecx
c0026623:	8d 4a 54             	lea    ecx,[edx+0x54]
c0026626:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0026629:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002662d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026630:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026633:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002663a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002663d:	01 ca                	add    edx,ecx
c002663f:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0026645:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0026648:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002664c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002664f:	83 e8 20             	sub    eax,0x20
c0026652:	eb 1a                	jmp    c002666e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0026654:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0026657:	eb 95                	jmp    c00265ee <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026659:	83 ec 0c             	sub    esp,0xc
c002665c:	68 18 dc 02 c0       	push   0xc002dc18
c0026661:	e8 9f 3c ff ff       	call   c001a305 <Krnl::panic(char const*)>
c0026666:	83 c4 10             	add    esp,0x10
c0026669:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002666e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026671:	5b                   	pop    ebx
c0026672:	5e                   	pop    esi
c0026673:	5f                   	pop    edi
c0026674:	5d                   	pop    ebp
c0026675:	c3                   	ret    

c0026676 <PIC::disable()>:
c0026676:	55                   	push   ebp
c0026677:	89 e5                	mov    ebp,esp
c0026679:	83 ec 10             	sub    esp,0x10
c002667c:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0026682:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0026686:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026689:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002668d:	ee                   	out    dx,al
c002668e:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0026694:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026698:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002669b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002669f:	ee                   	out    dx,al
c00266a0:	90                   	nop
c00266a1:	c9                   	leave  
c00266a2:	c3                   	ret    
c00266a3:	90                   	nop

c00266a4 <PIC::close(int, int, void*)>:
c00266a4:	55                   	push   ebp
c00266a5:	89 e5                	mov    ebp,esp
c00266a7:	83 ec 08             	sub    esp,0x8
c00266aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00266af:	83 c0 3c             	add    eax,0x3c
c00266b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00266b4:	83 ec 0c             	sub    esp,0xc
c00266b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00266ba:	ff d0                	call   eax
c00266bc:	83 c4 10             	add    esp,0x10
c00266bf:	b8 00 00 00 00       	mov    eax,0x0
c00266c4:	c9                   	leave  
c00266c5:	c3                   	ret    

c00266c6 <PIC::PIC()>:
c00266c6:	83 ec 0c             	sub    esp,0xc
c00266c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266cd:	83 ec 08             	sub    esp,0x8
c00266d0:	68 c4 dc 02 c0       	push   0xc002dcc4
c00266d5:	50                   	push   eax
c00266d6:	e8 ab df fe ff       	call   c0014686 <InterruptController::InterruptController(char const*)>
c00266db:	83 c4 10             	add    esp,0x10
c00266de:	ba f0 dc 02 c0       	mov    edx,0xc002dcf0
c00266e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266e7:	89 10                	mov    DWORD PTR [eax],edx
c00266e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266ed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266f3:	0f b6 d0             	movzx  edx,al
c00266f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266fa:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0026701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026705:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002670b:	0f b6 d0             	movzx  edx,al
c002670e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026712:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002671b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026721:	8d 50 01             	lea    edx,[eax+0x1]
c0026724:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026728:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002672e:	0f b6 d0             	movzx  edx,al
c0026731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026735:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026739:	83 e1 3f             	and    ecx,0x3f
c002673c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026744:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002674a:	0f b6 d0             	movzx  edx,al
c002674d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026751:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002675c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026762:	0f b6 d0             	movzx  edx,al
c0026765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026769:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002676e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026772:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026778:	8d 50 01             	lea    edx,[eax+0x1]
c002677b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002677f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026785:	0f b6 d0             	movzx  edx,al
c0026788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002678c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026790:	83 e1 3f             	and    ecx,0x3f
c0026793:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026797:	90                   	nop
c0026798:	83 c4 0c             	add    esp,0xc
c002679b:	c3                   	ret    

c002679c <PIC::ioWait()>:
c002679c:	eb 00                	jmp    c002679e <PIC::ioWait()+0x2>
c002679e:	eb 00                	jmp    c00267a0 <PIC::ioWait()+0x4>
c00267a0:	90                   	nop
c00267a1:	c3                   	ret    

c00267a2 <PIC::getIRQReg(int)>:
c00267a2:	55                   	push   ebp
c00267a3:	89 e5                	mov    ebp,esp
c00267a5:	83 ec 10             	sub    esp,0x10
c00267a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267ab:	0f b6 c0             	movzx  eax,al
c00267ae:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00267b4:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00267b7:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00267ba:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00267be:	ee                   	out    dx,al
c00267bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267c2:	0f b6 c0             	movzx  eax,al
c00267c5:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00267cb:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00267ce:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00267d1:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00267d5:	ee                   	out    dx,al
c00267d6:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00267dc:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00267e0:	89 c2                	mov    edx,eax
c00267e2:	ec                   	in     al,dx
c00267e3:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00267e6:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00267e9:	0f b6 c0             	movzx  eax,al
c00267ec:	c1 e0 08             	shl    eax,0x8
c00267ef:	89 c1                	mov    ecx,eax
c00267f1:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00267f7:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00267fb:	89 c2                	mov    edx,eax
c00267fd:	ec                   	in     al,dx
c00267fe:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026801:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026804:	0f b6 c0             	movzx  eax,al
c0026807:	09 c8                	or     eax,ecx
c0026809:	c9                   	leave  
c002680a:	c3                   	ret    
c002680b:	90                   	nop

c002680c <PIC::eoi(unsigned char)>:
c002680c:	55                   	push   ebp
c002680d:	89 e5                	mov    ebp,esp
c002680f:	83 ec 14             	sub    esp,0x14
c0026812:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026815:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026818:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002681c:	75 1e                	jne    c002683c <PIC::eoi(unsigned char)+0x30>
c002681e:	6a 0b                	push   0xb
c0026820:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026823:	e8 7a ff ff ff       	call   c00267a2 <PIC::getIRQReg(int)>
c0026828:	83 c4 08             	add    esp,0x8
c002682b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002682f:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026833:	25 80 00 00 00       	and    eax,0x80
c0026838:	85 c0                	test   eax,eax
c002683a:	74 5f                	je     c002689b <PIC::eoi(unsigned char)+0x8f>
c002683c:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026840:	75 2d                	jne    c002686f <PIC::eoi(unsigned char)+0x63>
c0026842:	6a 0b                	push   0xb
c0026844:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026847:	e8 56 ff ff ff       	call   c00267a2 <PIC::getIRQReg(int)>
c002684c:	83 c4 08             	add    esp,0x8
c002684f:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026853:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026856:	66 85 c0             	test   ax,ax
c0026859:	78 14                	js     c002686f <PIC::eoi(unsigned char)+0x63>
c002685b:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026861:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026865:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026868:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002686c:	ee                   	out    dx,al
c002686d:	eb 2d                	jmp    c002689c <PIC::eoi(unsigned char)+0x90>
c002686f:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026873:	76 12                	jbe    c0026887 <PIC::eoi(unsigned char)+0x7b>
c0026875:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c002687b:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002687f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026882:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026886:	ee                   	out    dx,al
c0026887:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002688d:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026891:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026894:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026898:	ee                   	out    dx,al
c0026899:	eb 01                	jmp    c002689c <PIC::eoi(unsigned char)+0x90>
c002689b:	90                   	nop
c002689c:	c9                   	leave  
c002689d:	c3                   	ret    

c002689e <PIC::remap()>:
c002689e:	55                   	push   ebp
c002689f:	89 e5                	mov    ebp,esp
c00268a1:	83 ec 48             	sub    esp,0x48
c00268a4:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00268ab:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c00268b2:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c00268b8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c00268bb:	89 c2                	mov    edx,eax
c00268bd:	ec                   	in     al,dx
c00268be:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c00268c1:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c00268c4:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00268c7:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c00268cd:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c00268d0:	89 c2                	mov    edx,eax
c00268d2:	ec                   	in     al,dx
c00268d3:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00268d6:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00268d9:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00268dc:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00268e2:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00268e6:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00268e9:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00268ec:	ee                   	out    dx,al
c00268ed:	83 ec 0c             	sub    esp,0xc
c00268f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268f3:	e8 a4 fe ff ff       	call   c002679c <PIC::ioWait()>
c00268f8:	83 c4 10             	add    esp,0x10
c00268fb:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026901:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026905:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026908:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002690b:	ee                   	out    dx,al
c002690c:	83 ec 0c             	sub    esp,0xc
c002690f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026912:	e8 85 fe ff ff       	call   c002679c <PIC::ioWait()>
c0026917:	83 c4 10             	add    esp,0x10
c002691a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002691d:	0f b6 c0             	movzx  eax,al
c0026920:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026926:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026929:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002692c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002692f:	ee                   	out    dx,al
c0026930:	83 ec 0c             	sub    esp,0xc
c0026933:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026936:	e8 61 fe ff ff       	call   c002679c <PIC::ioWait()>
c002693b:	83 c4 10             	add    esp,0x10
c002693e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026941:	0f b6 c0             	movzx  eax,al
c0026944:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c002694a:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002694d:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026950:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026953:	ee                   	out    dx,al
c0026954:	83 ec 0c             	sub    esp,0xc
c0026957:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002695a:	e8 3d fe ff ff       	call   c002679c <PIC::ioWait()>
c002695f:	83 c4 10             	add    esp,0x10
c0026962:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026968:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c002696c:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c002696f:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026972:	ee                   	out    dx,al
c0026973:	83 ec 0c             	sub    esp,0xc
c0026976:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026979:	e8 1e fe ff ff       	call   c002679c <PIC::ioWait()>
c002697e:	83 c4 10             	add    esp,0x10
c0026981:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026987:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c002698b:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002698e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026991:	ee                   	out    dx,al
c0026992:	83 ec 0c             	sub    esp,0xc
c0026995:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026998:	e8 ff fd ff ff       	call   c002679c <PIC::ioWait()>
c002699d:	83 c4 10             	add    esp,0x10
c00269a0:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00269a6:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00269aa:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00269ad:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00269b0:	ee                   	out    dx,al
c00269b1:	83 ec 0c             	sub    esp,0xc
c00269b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269b7:	e8 e0 fd ff ff       	call   c002679c <PIC::ioWait()>
c00269bc:	83 c4 10             	add    esp,0x10
c00269bf:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c00269c5:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c00269c9:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c00269cc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00269cf:	ee                   	out    dx,al
c00269d0:	83 ec 0c             	sub    esp,0xc
c00269d3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269d6:	e8 c1 fd ff ff       	call   c002679c <PIC::ioWait()>
c00269db:	83 c4 10             	add    esp,0x10
c00269de:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00269e2:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00269e8:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00269eb:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00269ee:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00269f1:	ee                   	out    dx,al
c00269f2:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00269f6:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00269fc:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00269ff:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026a02:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026a05:	ee                   	out    dx,al
c0026a06:	90                   	nop
c0026a07:	c9                   	leave  
c0026a08:	c3                   	ret    
c0026a09:	90                   	nop

c0026a0a <PIC::open(int, int, void*)>:
c0026a0a:	55                   	push   ebp
c0026a0b:	89 e5                	mov    ebp,esp
c0026a0d:	83 ec 18             	sub    esp,0x18
c0026a10:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026a16:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026a1a:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026a1d:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026a21:	ee                   	out    dx,al
c0026a22:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026a28:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026a2c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026a2f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026a33:	ee                   	out    dx,al
c0026a34:	83 ec 0c             	sub    esp,0xc
c0026a37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a3a:	e8 5f fe ff ff       	call   c002689e <PIC::remap()>
c0026a3f:	83 c4 10             	add    esp,0x10
c0026a42:	b8 00 00 00 00       	mov    eax,0x0
c0026a47:	c9                   	leave  
c0026a48:	c3                   	ret    
c0026a49:	90                   	nop

c0026a4a <APICTimer::close(int, int, void*)>:
c0026a4a:	b8 00 00 00 00       	mov    eax,0x0
c0026a4f:	c3                   	ret    

c0026a50 <apicTimerHandler(regs*, void*)>:
c0026a50:	83 ec 0c             	sub    esp,0xc
c0026a53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026a57:	8b 00                	mov    eax,DWORD PTR [eax]
c0026a59:	99                   	cdq    
c0026a5a:	52                   	push   edx
c0026a5b:	50                   	push   eax
c0026a5c:	6a 00                	push   0x0
c0026a5e:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026a63:	e8 8c 07 00 00       	call   c00271f4 <__udivdi3>
c0026a68:	83 c4 10             	add    esp,0x10
c0026a6b:	83 ec 08             	sub    esp,0x8
c0026a6e:	52                   	push   edx
c0026a6f:	50                   	push   eax
c0026a70:	e8 a0 fd fe ff       	call   c0016815 <timerHandler(unsigned long long)>
c0026a75:	83 c4 10             	add    esp,0x10
c0026a78:	90                   	nop
c0026a79:	83 c4 0c             	add    esp,0xc
c0026a7c:	c3                   	ret    
c0026a7d:	90                   	nop

c0026a7e <APICTimer::write(int)>:
c0026a7e:	53                   	push   ebx
c0026a7f:	83 ec 28             	sub    esp,0x28
c0026a82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026a86:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026a8a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026a90:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0026a95:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026a9b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026aa1:	83 ec 0c             	sub    esp,0xc
c0026aa4:	50                   	push   eax
c0026aa5:	e8 de f4 ff ff       	call   c0025f88 <APIC::getBase()>
c0026aaa:	83 c4 10             	add    esp,0x10
c0026aad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026ab1:	a1 70 f6 02 c0       	mov    eax,ds:0xc002f670
c0026ab6:	8b 15 74 f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f674
c0026abc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026ac0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026ac4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026ac8:	05 e0 03 00 00       	add    eax,0x3e0
c0026acd:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026ad3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026ad7:	05 80 03 00 00       	add    eax,0x380
c0026adc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026ae2:	fb                   	sti    
c0026ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ae7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026aeb:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026af0:	83 d2 00             	adc    edx,0x0
c0026af3:	89 c1                	mov    ecx,eax
c0026af5:	89 d3                	mov    ebx,edx
c0026af7:	a1 70 f6 02 c0       	mov    eax,ds:0xc002f670
c0026afc:	8b 15 74 f6 02 c0    	mov    edx,DWORD PTR ds:0xc002f674
c0026b02:	39 c8                	cmp    eax,ecx
c0026b04:	89 d0                	mov    eax,edx
c0026b06:	19 d8                	sbb    eax,ebx
c0026b08:	73 02                	jae    c0026b0c <APICTimer::write(int)+0x8e>
c0026b0a:	eb d7                	jmp    c0026ae3 <APICTimer::write(int)+0x65>
c0026b0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b10:	05 20 03 00 00       	add    eax,0x320
c0026b15:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026b1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b1f:	05 90 03 00 00       	add    eax,0x390
c0026b24:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b26:	f7 d0                	not    eax
c0026b28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026b2c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026b34:	ba 00 00 00 00       	mov    edx,0x0
c0026b39:	f7 f3                	div    ebx
c0026b3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026b43:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026b49:	0d 00 00 02 00       	or     eax,0x20000
c0026b4e:	89 c2                	mov    edx,eax
c0026b50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b54:	05 20 03 00 00       	add    eax,0x320
c0026b59:	89 10                	mov    DWORD PTR [eax],edx
c0026b5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b5f:	05 e0 03 00 00       	add    eax,0x3e0
c0026b64:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026b6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b6e:	05 80 03 00 00       	add    eax,0x380
c0026b73:	89 c2                	mov    edx,eax
c0026b75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026b79:	89 02                	mov    DWORD PTR [edx],eax
c0026b7b:	90                   	nop
c0026b7c:	83 c4 28             	add    esp,0x28
c0026b7f:	5b                   	pop    ebx
c0026b80:	c3                   	ret    
c0026b81:	90                   	nop

c0026b82 <APICTimer::open(int, int, void*)>:
c0026b82:	57                   	push   edi
c0026b83:	56                   	push   esi
c0026b84:	53                   	push   ebx
c0026b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b89:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b8b:	83 c0 24             	add    eax,0x24
c0026b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b90:	83 ec 08             	sub    esp,0x8
c0026b93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b9b:	ff d0                	call   eax
c0026b9d:	83 c4 10             	add    esp,0x10
c0026ba0:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0026ba5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026bab:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026bb1:	83 ec 0c             	sub    esp,0xc
c0026bb4:	50                   	push   eax
c0026bb5:	e8 ce f3 ff ff       	call   c0025f88 <APIC::getBase()>
c0026bba:	83 c4 10             	add    esp,0x10
c0026bbd:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bc7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026bcd:	0f b6 f8             	movzx  edi,al
c0026bd0:	89 d0                	mov    eax,edx
c0026bd2:	ba 00 00 00 00       	mov    edx,0x0
c0026bd7:	89 c1                	mov    ecx,eax
c0026bd9:	80 e5 ff             	and    ch,0xff
c0026bdc:	89 cb                	mov    ebx,ecx
c0026bde:	0f b6 f2             	movzx  esi,dl
c0026be1:	89 d8                	mov    eax,ebx
c0026be3:	89 f2                	mov    edx,esi
c0026be5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026be9:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026bec:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026bf0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026bf4:	83 e0 00             	and    eax,0x0
c0026bf7:	09 d0                	or     eax,edx
c0026bf9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026bfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c01:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026c07:	8d 50 01             	lea    edx,[eax+0x1]
c0026c0a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026c0e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026c14:	0f b6 d0             	movzx  edx,al
c0026c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c1b:	83 c2 08             	add    edx,0x8
c0026c1e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026c22:	0f b6 c9             	movzx  ecx,cl
c0026c25:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026c2b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c33:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026c37:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026c3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c41:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026c45:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026c4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026c4f:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026c55:	83 ec 0c             	sub    esp,0xc
c0026c58:	51                   	push   ecx
c0026c59:	6a 01                	push   0x1
c0026c5b:	68 50 6a 02 c0       	push   0xc0026a50
c0026c60:	52                   	push   edx
c0026c61:	50                   	push   eax
c0026c62:	e8 19 d0 fe ff       	call   c0013c80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026c67:	83 c4 20             	add    esp,0x20
c0026c6a:	89 c2                	mov    edx,eax
c0026c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c70:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026c76:	b8 00 00 00 00       	mov    eax,0x0
c0026c7b:	5b                   	pop    ebx
c0026c7c:	5e                   	pop    esi
c0026c7d:	5f                   	pop    edi
c0026c7e:	c3                   	ret    
c0026c7f:	90                   	nop

c0026c80 <APICTimer::APICTimer()>:
c0026c80:	83 ec 0c             	sub    esp,0xc
c0026c83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c87:	83 ec 08             	sub    esp,0x8
c0026c8a:	68 30 dd 02 c0       	push   0xc002dd30
c0026c8f:	50                   	push   eax
c0026c90:	e8 f1 fa fe ff       	call   c0016786 <Timer::Timer(char const*)>
c0026c95:	83 c4 10             	add    esp,0x10
c0026c98:	ba 44 dd 02 c0       	mov    edx,0xc002dd44
c0026c9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ca1:	89 10                	mov    DWORD PTR [eax],edx
c0026ca3:	90                   	nop
c0026ca4:	83 c4 0c             	add    esp,0xc
c0026ca7:	c3                   	ret    

c0026ca8 <PIT::write(int)>:
c0026ca8:	83 ec 10             	sub    esp,0x10
c0026cab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026caf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026cb3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026cb9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026cbd:	a3 a4 33 03 c0       	mov    ds:0xc00333a4,eax
c0026cc2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026cc7:	99                   	cdq    
c0026cc8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026ccc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026cd0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026cd7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026cdc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026ce0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026ce5:	ee                   	out    dx,al
c0026ce6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026cea:	0f b6 c0             	movzx  eax,al
c0026ced:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026cf4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026cf8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026cfc:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026d01:	ee                   	out    dx,al
c0026d02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026d06:	c1 f8 08             	sar    eax,0x8
c0026d09:	0f b6 c0             	movzx  eax,al
c0026d0c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026d13:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026d17:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026d1b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026d20:	ee                   	out    dx,al
c0026d21:	90                   	nop
c0026d22:	83 c4 10             	add    esp,0x10
c0026d25:	c3                   	ret    

c0026d26 <pitHandler(regs*, void*)>:
c0026d26:	83 ec 0c             	sub    esp,0xc
c0026d29:	a1 a4 33 03 c0       	mov    eax,ds:0xc00333a4
c0026d2e:	99                   	cdq    
c0026d2f:	52                   	push   edx
c0026d30:	50                   	push   eax
c0026d31:	6a 00                	push   0x0
c0026d33:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026d38:	e8 b7 04 00 00       	call   c00271f4 <__udivdi3>
c0026d3d:	83 c4 10             	add    esp,0x10
c0026d40:	83 ec 08             	sub    esp,0x8
c0026d43:	52                   	push   edx
c0026d44:	50                   	push   eax
c0026d45:	e8 cb fa fe ff       	call   c0016815 <timerHandler(unsigned long long)>
c0026d4a:	83 c4 10             	add    esp,0x10
c0026d4d:	90                   	nop
c0026d4e:	83 c4 0c             	add    esp,0xc
c0026d51:	c3                   	ret    

c0026d52 <PIT::open(int, int, void*)>:
c0026d52:	83 ec 0c             	sub    esp,0xc
c0026d55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d59:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d5b:	83 c0 24             	add    eax,0x24
c0026d5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d60:	83 ec 08             	sub    esp,0x8
c0026d63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d6b:	ff d0                	call   eax
c0026d6d:	83 c4 10             	add    esp,0x10
c0026d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d74:	83 ec 0c             	sub    esp,0xc
c0026d77:	6a 00                	push   0x0
c0026d79:	6a 01                	push   0x1
c0026d7b:	68 26 6d 02 c0       	push   0xc0026d26
c0026d80:	6a 00                	push   0x0
c0026d82:	50                   	push   eax
c0026d83:	e8 f8 ce fe ff       	call   c0013c80 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026d88:	83 c4 20             	add    esp,0x20
c0026d8b:	89 c2                	mov    edx,eax
c0026d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d91:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026d97:	b8 00 00 00 00       	mov    eax,0x0
c0026d9c:	83 c4 0c             	add    esp,0xc
c0026d9f:	c3                   	ret    

c0026da0 <PIT::close(int, int, void*)>:
c0026da0:	83 ec 0c             	sub    esp,0xc
c0026da3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026da7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026db1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026db5:	6a 01                	push   0x1
c0026db7:	68 26 6d 02 c0       	push   0xc0026d26
c0026dbc:	6a 00                	push   0x0
c0026dbe:	50                   	push   eax
c0026dbf:	e8 06 cf fe ff       	call   c0013cca <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026dc4:	83 c4 10             	add    esp,0x10
c0026dc7:	b8 00 00 00 00       	mov    eax,0x0
c0026dcc:	83 c4 0c             	add    esp,0xc
c0026dcf:	c3                   	ret    

c0026dd0 <PIT::PIT()>:
c0026dd0:	83 ec 0c             	sub    esp,0xc
c0026dd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dd7:	83 ec 08             	sub    esp,0x8
c0026dda:	68 6c dd 02 c0       	push   0xc002dd6c
c0026ddf:	50                   	push   eax
c0026de0:	e8 a1 f9 fe ff       	call   c0016786 <Timer::Timer(char const*)>
c0026de5:	83 c4 10             	add    esp,0x10
c0026de8:	ba 94 dd 02 c0       	mov    edx,0xc002dd94
c0026ded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026df1:	89 10                	mov    DWORD PTR [eax],edx
c0026df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026df7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026dfd:	0f b6 d0             	movzx  edx,al
c0026e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e04:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e0f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026e15:	0f b6 d0             	movzx  edx,al
c0026e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e1c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e25:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026e2b:	8d 50 01             	lea    edx,[eax+0x1]
c0026e2e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026e32:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026e38:	0f b6 d0             	movzx  edx,al
c0026e3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e3f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026e43:	83 e1 3f             	and    ecx,0x3f
c0026e46:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026e4a:	90                   	nop
c0026e4b:	83 c4 0c             	add    esp,0xc
c0026e4e:	c3                   	ret    
c0026e4f:	90                   	nop

c0026e50 <avxDetect>:
c0026e50:	b8 00 00 00 00       	mov    eax,0x0
c0026e55:	c3                   	ret    

c0026e56 <avxSave>:
c0026e56:	c3                   	ret    

c0026e57 <avxLoad>:
c0026e57:	c3                   	ret    

c0026e58 <avxInit>:
c0026e58:	c3                   	ret    

c0026e59 <avxClose>:
c0026e59:	c3                   	ret    

c0026e5a <wouldSheSayYes>:
c0026e5a:	c3                   	ret    
c0026e5b:	49                   	dec    ecx
c0026e5c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026e60:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026e64:	75 20                	jne    c0026e86 <sseDetect.noSSE+0x1>
c0026e66:	4e                   	dec    esi
c0026e67:	79 61                	jns    c0026eca <x87Detect+0x14>
c0026e69:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026e6e:	66 90                	xchg   ax,ax

c0026e70 <absolutelyNoChanceInHell>:
c0026e70:	b8 01 00 00 00       	mov    eax,0x1
c0026e75:	0f a2                	cpuid  
c0026e77:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026e7d:	74 06                	je     c0026e85 <sseDetect.noSSE>
c0026e7f:	b8 01 00 00 00       	mov    eax,0x1
c0026e84:	c3                   	ret    

c0026e85 <sseDetect.noSSE>:
c0026e85:	31 c0                	xor    eax,eax
c0026e87:	c3                   	ret    

c0026e88 <sseSave>:
c0026e88:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026e8d:	c3                   	ret    

c0026e8e <sseLoad>:
c0026e8e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026e93:	c3                   	ret    

c0026e94 <sseInit>:
c0026e94:	e8 49 00 00 00       	call   c0026ee2 <x87Init>
c0026e99:	0f 20 e0             	mov    eax,cr4
c0026e9c:	66 0d 00 06          	or     ax,0x600
c0026ea0:	0f 22 e0             	mov    cr4,eax
c0026ea3:	c3                   	ret    

c0026ea4 <sseClose>:
c0026ea4:	c3                   	ret    
c0026ea5:	66 90                	xchg   ax,ax
c0026ea7:	66 90                	xchg   ax,ax
c0026ea9:	66 90                	xchg   ax,ax
c0026eab:	66 90                	xchg   ax,ax
c0026ead:	66 90                	xchg   ax,ax
c0026eaf:	90                   	nop

c0026eb0 <value_37F>:
c0026eb0:	7f 03                	jg     c0026eb5 <value_37A+0x1>

c0026eb2 <value_37E>:
c0026eb2:	7e 03                	jle    c0026eb7 <x87Detect+0x1>

c0026eb4 <value_37A>:
c0026eb4:	7a 03                	jp     c0026eb9 <x87Detect+0x3>

c0026eb6 <x87Detect>:
c0026eb6:	b8 01 00 00 00       	mov    eax,0x1
c0026ebb:	0f a2                	cpuid  
c0026ebd:	f7 c2 01 00 00 00    	test   edx,0x1
c0026ec3:	74 06                	je     c0026ecb <x87Detect.nox87>
c0026ec5:	b8 01 00 00 00       	mov    eax,0x1
c0026eca:	c3                   	ret    

c0026ecb <x87Detect.nox87>:
c0026ecb:	b8 00 00 00 00       	mov    eax,0x0
c0026ed0:	c3                   	ret    

c0026ed1 <x87Save>:
c0026ed1:	55                   	push   ebp
c0026ed2:	89 e5                	mov    ebp,esp
c0026ed4:	9b dd 75 08          	fsave  [ebp+0x8]
c0026ed8:	c9                   	leave  
c0026ed9:	c3                   	ret    

c0026eda <x87Load>:
c0026eda:	55                   	push   ebp
c0026edb:	89 e5                	mov    ebp,esp
c0026edd:	dd 65 08             	frstor [ebp+0x8]
c0026ee0:	c9                   	leave  
c0026ee1:	c3                   	ret    

c0026ee2 <x87Init>:
c0026ee2:	9b db e3             	finit  
c0026ee5:	0f 20 c0             	mov    eax,cr0
c0026ee8:	66 25 fb ff          	and    ax,0xfffb
c0026eec:	66 0d 22 00          	or     ax,0x22
c0026ef0:	0f 22 c0             	mov    cr0,eax
c0026ef3:	0f 06                	clts   
c0026ef5:	d9 2d b4 6e 02 c0    	fldcw  WORD PTR ds:0xc0026eb4
c0026efb:	c3                   	ret    

c0026efc <x87Close>:
c0026efc:	c3                   	ret    
c0026efd:	66 90                	xchg   ax,ax
c0026eff:	90                   	nop

c0026f00 <__do_global_ctors_aux>:
c0026f00:	a1 38 9b 02 c0       	mov    eax,ds:0xc0029b38
c0026f05:	83 f8 ff             	cmp    eax,0xffffffff
c0026f08:	74 1a                	je     c0026f24 <__do_global_ctors_aux+0x24>
c0026f0a:	55                   	push   ebp
c0026f0b:	89 e5                	mov    ebp,esp
c0026f0d:	53                   	push   ebx
c0026f0e:	52                   	push   edx
c0026f0f:	bb 38 9b 02 c0       	mov    ebx,0xc0029b38
c0026f14:	ff d0                	call   eax
c0026f16:	83 eb 04             	sub    ebx,0x4
c0026f19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026f1b:	83 f8 ff             	cmp    eax,0xffffffff
c0026f1e:	75 f4                	jne    c0026f14 <__do_global_ctors_aux+0x14>
c0026f20:	58                   	pop    eax
c0026f21:	5b                   	pop    ebx
c0026f22:	5d                   	pop    ebp
c0026f23:	c3                   	ret    
c0026f24:	c3                   	ret    
c0026f25:	66 90                	xchg   ax,ax
c0026f27:	90                   	nop

c0026f28 <__divdi3>:
c0026f28:	55                   	push   ebp
c0026f29:	57                   	push   edi
c0026f2a:	56                   	push   esi
c0026f2b:	53                   	push   ebx
c0026f2c:	83 ec 1c             	sub    esp,0x1c
c0026f2f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026f33:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026f37:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026f3a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026f3e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026f42:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026f46:	85 db                	test   ebx,ebx
c0026f48:	0f 88 8e 00 00 00    	js     c0026fdc <__divdi3+0xb4>
c0026f4e:	89 dd                	mov    ebp,ebx
c0026f50:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026f58:	89 d3                	mov    ebx,edx
c0026f5a:	85 d2                	test   edx,edx
c0026f5c:	79 0d                	jns    c0026f6b <__divdi3+0x43>
c0026f5e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026f62:	f7 d8                	neg    eax
c0026f64:	83 d2 00             	adc    edx,0x0
c0026f67:	f7 da                	neg    edx
c0026f69:	89 d3                	mov    ebx,edx
c0026f6b:	89 c7                	mov    edi,eax
c0026f6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026f70:	85 db                	test   ebx,ebx
c0026f72:	75 48                	jne    c0026fbc <__divdi3+0x94>
c0026f74:	39 ef                	cmp    edi,ebp
c0026f76:	76 24                	jbe    c0026f9c <__divdi3+0x74>
c0026f78:	89 ea                	mov    edx,ebp
c0026f7a:	f7 f7                	div    edi
c0026f7c:	89 c1                	mov    ecx,eax
c0026f7e:	31 f6                	xor    esi,esi
c0026f80:	89 c8                	mov    eax,ecx
c0026f82:	89 f2                	mov    edx,esi
c0026f84:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026f88:	85 c9                	test   ecx,ecx
c0026f8a:	74 07                	je     c0026f93 <__divdi3+0x6b>
c0026f8c:	f7 d8                	neg    eax
c0026f8e:	83 d2 00             	adc    edx,0x0
c0026f91:	f7 da                	neg    edx
c0026f93:	83 c4 1c             	add    esp,0x1c
c0026f96:	5b                   	pop    ebx
c0026f97:	5e                   	pop    esi
c0026f98:	5f                   	pop    edi
c0026f99:	5d                   	pop    ebp
c0026f9a:	c3                   	ret    
c0026f9b:	90                   	nop
c0026f9c:	85 ff                	test   edi,edi
c0026f9e:	75 0b                	jne    c0026fab <__divdi3+0x83>
c0026fa0:	b8 01 00 00 00       	mov    eax,0x1
c0026fa5:	31 d2                	xor    edx,edx
c0026fa7:	f7 f3                	div    ebx
c0026fa9:	89 c7                	mov    edi,eax
c0026fab:	31 d2                	xor    edx,edx
c0026fad:	89 e8                	mov    eax,ebp
c0026faf:	f7 f7                	div    edi
c0026fb1:	89 c6                	mov    esi,eax
c0026fb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026fb6:	f7 f7                	div    edi
c0026fb8:	89 c1                	mov    ecx,eax
c0026fba:	eb c4                	jmp    c0026f80 <__divdi3+0x58>
c0026fbc:	39 eb                	cmp    ebx,ebp
c0026fbe:	77 3c                	ja     c0026ffc <__divdi3+0xd4>
c0026fc0:	0f bd f3             	bsr    esi,ebx
c0026fc3:	83 f6 1f             	xor    esi,0x1f
c0026fc6:	75 40                	jne    c0027008 <__divdi3+0xe0>
c0026fc8:	39 eb                	cmp    ebx,ebp
c0026fca:	72 09                	jb     c0026fd5 <__divdi3+0xad>
c0026fcc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026fcf:	0f 87 97 00 00 00    	ja     c002706c <__divdi3+0x144>
c0026fd5:	b9 01 00 00 00       	mov    ecx,0x1
c0026fda:	eb a4                	jmp    c0026f80 <__divdi3+0x58>
c0026fdc:	f7 d9                	neg    ecx
c0026fde:	83 d3 00             	adc    ebx,0x0
c0026fe1:	f7 db                	neg    ebx
c0026fe3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026fe6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026fea:	89 dd                	mov    ebp,ebx
c0026fec:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026ff4:	e9 5f ff ff ff       	jmp    c0026f58 <__divdi3+0x30>
c0026ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0026ffc:	31 f6                	xor    esi,esi
c0026ffe:	31 c9                	xor    ecx,ecx
c0027000:	e9 7b ff ff ff       	jmp    c0026f80 <__divdi3+0x58>
c0027005:	8d 76 00             	lea    esi,[esi+0x0]
c0027008:	b8 20 00 00 00       	mov    eax,0x20
c002700d:	29 f0                	sub    eax,esi
c002700f:	89 f1                	mov    ecx,esi
c0027011:	d3 e3                	shl    ebx,cl
c0027013:	89 fa                	mov    edx,edi
c0027015:	88 c1                	mov    cl,al
c0027017:	d3 ea                	shr    edx,cl
c0027019:	09 da                	or     edx,ebx
c002701b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002701f:	89 f1                	mov    ecx,esi
c0027021:	d3 e7                	shl    edi,cl
c0027023:	89 eb                	mov    ebx,ebp
c0027025:	88 c1                	mov    cl,al
c0027027:	d3 eb                	shr    ebx,cl
c0027029:	89 f1                	mov    ecx,esi
c002702b:	d3 e5                	shl    ebp,cl
c002702d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0027030:	88 c1                	mov    cl,al
c0027032:	d3 ea                	shr    edx,cl
c0027034:	09 d5                	or     ebp,edx
c0027036:	89 e8                	mov    eax,ebp
c0027038:	89 da                	mov    edx,ebx
c002703a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002703e:	89 d3                	mov    ebx,edx
c0027040:	89 c5                	mov    ebp,eax
c0027042:	f7 e7                	mul    edi
c0027044:	39 d3                	cmp    ebx,edx
c0027046:	72 18                	jb     c0027060 <__divdi3+0x138>
c0027048:	74 0a                	je     c0027054 <__divdi3+0x12c>
c002704a:	89 e9                	mov    ecx,ebp
c002704c:	31 f6                	xor    esi,esi
c002704e:	e9 2d ff ff ff       	jmp    c0026f80 <__divdi3+0x58>
c0027053:	90                   	nop
c0027054:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0027057:	89 f1                	mov    ecx,esi
c0027059:	d3 e7                	shl    edi,cl
c002705b:	39 c7                	cmp    edi,eax
c002705d:	73 eb                	jae    c002704a <__divdi3+0x122>
c002705f:	90                   	nop
c0027060:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0027063:	31 f6                	xor    esi,esi
c0027065:	e9 16 ff ff ff       	jmp    c0026f80 <__divdi3+0x58>
c002706a:	66 90                	xchg   ax,ax
c002706c:	31 c9                	xor    ecx,ecx
c002706e:	e9 0d ff ff ff       	jmp    c0026f80 <__divdi3+0x58>
c0027073:	90                   	nop

c0027074 <__moddi3>:
c0027074:	55                   	push   ebp
c0027075:	57                   	push   edi
c0027076:	56                   	push   esi
c0027077:	53                   	push   ebx
c0027078:	83 ec 2c             	sub    esp,0x2c
c002707b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002707f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0027083:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027087:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002708b:	85 db                	test   ebx,ebx
c002708d:	0f 88 85 00 00 00    	js     c0027118 <__moddi3+0xa4>
c0027093:	89 de                	mov    esi,ebx
c0027095:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002709d:	89 d7                	mov    edi,edx
c002709f:	85 d2                	test   edx,edx
c00270a1:	79 09                	jns    c00270ac <__moddi3+0x38>
c00270a3:	f7 d8                	neg    eax
c00270a5:	83 d2 00             	adc    edx,0x0
c00270a8:	f7 da                	neg    edx
c00270aa:	89 d7                	mov    edi,edx
c00270ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00270b0:	89 cd                	mov    ebp,ecx
c00270b2:	85 ff                	test   edi,edi
c00270b4:	75 52                	jne    c0027108 <__moddi3+0x94>
c00270b6:	89 c3                	mov    ebx,eax
c00270b8:	39 f0                	cmp    eax,esi
c00270ba:	76 24                	jbe    c00270e0 <__moddi3+0x6c>
c00270bc:	89 c8                	mov    eax,ecx
c00270be:	89 f2                	mov    edx,esi
c00270c0:	f7 f3                	div    ebx
c00270c2:	89 d6                	mov    esi,edx
c00270c4:	89 f0                	mov    eax,esi
c00270c6:	31 d2                	xor    edx,edx
c00270c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00270cc:	85 c9                	test   ecx,ecx
c00270ce:	74 07                	je     c00270d7 <__moddi3+0x63>
c00270d0:	f7 d8                	neg    eax
c00270d2:	83 d2 00             	adc    edx,0x0
c00270d5:	f7 da                	neg    edx
c00270d7:	83 c4 2c             	add    esp,0x2c
c00270da:	5b                   	pop    ebx
c00270db:	5e                   	pop    esi
c00270dc:	5f                   	pop    edi
c00270dd:	5d                   	pop    ebp
c00270de:	c3                   	ret    
c00270df:	90                   	nop
c00270e0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00270e4:	85 db                	test   ebx,ebx
c00270e6:	75 0d                	jne    c00270f5 <__moddi3+0x81>
c00270e8:	b8 01 00 00 00       	mov    eax,0x1
c00270ed:	31 d2                	xor    edx,edx
c00270ef:	f7 f7                	div    edi
c00270f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00270f5:	89 f0                	mov    eax,esi
c00270f7:	31 d2                	xor    edx,edx
c00270f9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00270fd:	f7 f7                	div    edi
c00270ff:	89 e8                	mov    eax,ebp
c0027101:	f7 f7                	div    edi
c0027103:	89 d6                	mov    esi,edx
c0027105:	eb bd                	jmp    c00270c4 <__moddi3+0x50>
c0027107:	90                   	nop
c0027108:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002710c:	39 f7                	cmp    edi,esi
c002710e:	76 20                	jbe    c0027130 <__moddi3+0xbc>
c0027110:	89 c8                	mov    eax,ecx
c0027112:	89 f2                	mov    edx,esi
c0027114:	eb b2                	jmp    c00270c8 <__moddi3+0x54>
c0027116:	66 90                	xchg   ax,ax
c0027118:	f7 d9                	neg    ecx
c002711a:	83 d3 00             	adc    ebx,0x0
c002711d:	f7 db                	neg    ebx
c002711f:	89 de                	mov    esi,ebx
c0027121:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0027129:	e9 6f ff ff ff       	jmp    c002709d <__moddi3+0x29>
c002712e:	66 90                	xchg   ax,ax
c0027130:	0f bd c7             	bsr    eax,edi
c0027133:	83 f0 1f             	xor    eax,0x1f
c0027136:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002713a:	75 24                	jne    c0027160 <__moddi3+0xec>
c002713c:	39 f7                	cmp    edi,esi
c002713e:	72 06                	jb     c0027146 <__moddi3+0xd2>
c0027140:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0027144:	77 0c                	ja     c0027152 <__moddi3+0xde>
c0027146:	89 e9                	mov    ecx,ebp
c0027148:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002714c:	19 fe                	sbb    esi,edi
c002714e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0027152:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027156:	89 f2                	mov    edx,esi
c0027158:	e9 6b ff ff ff       	jmp    c00270c8 <__moddi3+0x54>
c002715d:	8d 76 00             	lea    esi,[esi+0x0]
c0027160:	b8 20 00 00 00       	mov    eax,0x20
c0027165:	89 c2                	mov    edx,eax
c0027167:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002716b:	29 da                	sub    edx,ebx
c002716d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0027171:	88 d9                	mov    cl,bl
c0027173:	d3 e7                	shl    edi,cl
c0027175:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027179:	88 d1                	mov    cl,dl
c002717b:	d3 e8                	shr    eax,cl
c002717d:	09 c7                	or     edi,eax
c002717f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0027183:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0027187:	89 d8                	mov    eax,ebx
c0027189:	88 d9                	mov    cl,bl
c002718b:	d3 e7                	shl    edi,cl
c002718d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027191:	89 f3                	mov    ebx,esi
c0027193:	88 d1                	mov    cl,dl
c0027195:	d3 eb                	shr    ebx,cl
c0027197:	89 c7                	mov    edi,eax
c0027199:	88 c1                	mov    cl,al
c002719b:	d3 e6                	shl    esi,cl
c002719d:	89 e8                	mov    eax,ebp
c002719f:	88 d1                	mov    cl,dl
c00271a1:	d3 e8                	shr    eax,cl
c00271a3:	09 f0                	or     eax,esi
c00271a5:	89 f9                	mov    ecx,edi
c00271a7:	d3 e5                	shl    ebp,cl
c00271a9:	89 da                	mov    edx,ebx
c00271ab:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00271af:	89 d3                	mov    ebx,edx
c00271b1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00271b5:	89 c6                	mov    esi,eax
c00271b7:	89 d1                	mov    ecx,edx
c00271b9:	39 d3                	cmp    ebx,edx
c00271bb:	72 27                	jb     c00271e4 <__moddi3+0x170>
c00271bd:	74 21                	je     c00271e0 <__moddi3+0x16c>
c00271bf:	29 f5                	sub    ebp,esi
c00271c1:	19 cb                	sbb    ebx,ecx
c00271c3:	89 de                	mov    esi,ebx
c00271c5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00271c9:	d3 e6                	shl    esi,cl
c00271cb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00271cf:	89 f9                	mov    ecx,edi
c00271d1:	d3 ed                	shr    ebp,cl
c00271d3:	09 ee                	or     esi,ebp
c00271d5:	89 f0                	mov    eax,esi
c00271d7:	d3 eb                	shr    ebx,cl
c00271d9:	89 da                	mov    edx,ebx
c00271db:	e9 e8 fe ff ff       	jmp    c00270c8 <__moddi3+0x54>
c00271e0:	39 c5                	cmp    ebp,eax
c00271e2:	73 db                	jae    c00271bf <__moddi3+0x14b>
c00271e4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00271e8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00271ec:	89 d1                	mov    ecx,edx
c00271ee:	89 c6                	mov    esi,eax
c00271f0:	eb cd                	jmp    c00271bf <__moddi3+0x14b>
c00271f2:	66 90                	xchg   ax,ax

c00271f4 <__udivdi3>:
c00271f4:	55                   	push   ebp
c00271f5:	57                   	push   edi
c00271f6:	56                   	push   esi
c00271f7:	53                   	push   ebx
c00271f8:	83 ec 1c             	sub    esp,0x1c
c00271fb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00271ff:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0027203:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027207:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002720b:	85 d2                	test   edx,edx
c002720d:	75 41                	jne    c0027250 <__udivdi3+0x5c>
c002720f:	39 f7                	cmp    edi,esi
c0027211:	76 15                	jbe    c0027228 <__udivdi3+0x34>
c0027213:	89 e8                	mov    eax,ebp
c0027215:	89 f2                	mov    edx,esi
c0027217:	f7 f7                	div    edi
c0027219:	31 db                	xor    ebx,ebx
c002721b:	89 da                	mov    edx,ebx
c002721d:	83 c4 1c             	add    esp,0x1c
c0027220:	5b                   	pop    ebx
c0027221:	5e                   	pop    esi
c0027222:	5f                   	pop    edi
c0027223:	5d                   	pop    ebp
c0027224:	c3                   	ret    
c0027225:	8d 76 00             	lea    esi,[esi+0x0]
c0027228:	89 f9                	mov    ecx,edi
c002722a:	85 ff                	test   edi,edi
c002722c:	75 0b                	jne    c0027239 <__udivdi3+0x45>
c002722e:	b8 01 00 00 00       	mov    eax,0x1
c0027233:	31 d2                	xor    edx,edx
c0027235:	f7 f7                	div    edi
c0027237:	89 c1                	mov    ecx,eax
c0027239:	31 d2                	xor    edx,edx
c002723b:	89 f0                	mov    eax,esi
c002723d:	f7 f1                	div    ecx
c002723f:	89 c3                	mov    ebx,eax
c0027241:	89 e8                	mov    eax,ebp
c0027243:	f7 f1                	div    ecx
c0027245:	89 da                	mov    edx,ebx
c0027247:	83 c4 1c             	add    esp,0x1c
c002724a:	5b                   	pop    ebx
c002724b:	5e                   	pop    esi
c002724c:	5f                   	pop    edi
c002724d:	5d                   	pop    ebp
c002724e:	c3                   	ret    
c002724f:	90                   	nop
c0027250:	39 f2                	cmp    edx,esi
c0027252:	77 1c                	ja     c0027270 <__udivdi3+0x7c>
c0027254:	0f bd da             	bsr    ebx,edx
c0027257:	83 f3 1f             	xor    ebx,0x1f
c002725a:	75 24                	jne    c0027280 <__udivdi3+0x8c>
c002725c:	39 f2                	cmp    edx,esi
c002725e:	72 08                	jb     c0027268 <__udivdi3+0x74>
c0027260:	39 ef                	cmp    edi,ebp
c0027262:	0f 87 84 00 00 00    	ja     c00272ec <__udivdi3+0xf8>
c0027268:	b8 01 00 00 00       	mov    eax,0x1
c002726d:	eb ac                	jmp    c002721b <__udivdi3+0x27>
c002726f:	90                   	nop
c0027270:	31 db                	xor    ebx,ebx
c0027272:	31 c0                	xor    eax,eax
c0027274:	89 da                	mov    edx,ebx
c0027276:	83 c4 1c             	add    esp,0x1c
c0027279:	5b                   	pop    ebx
c002727a:	5e                   	pop    esi
c002727b:	5f                   	pop    edi
c002727c:	5d                   	pop    ebp
c002727d:	c3                   	ret    
c002727e:	66 90                	xchg   ax,ax
c0027280:	b8 20 00 00 00       	mov    eax,0x20
c0027285:	29 d8                	sub    eax,ebx
c0027287:	88 d9                	mov    cl,bl
c0027289:	d3 e2                	shl    edx,cl
c002728b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002728f:	89 fa                	mov    edx,edi
c0027291:	88 c1                	mov    cl,al
c0027293:	d3 ea                	shr    edx,cl
c0027295:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027299:	09 d1                	or     ecx,edx
c002729b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002729f:	88 d9                	mov    cl,bl
c00272a1:	d3 e7                	shl    edi,cl
c00272a3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00272a7:	89 f7                	mov    edi,esi
c00272a9:	88 c1                	mov    cl,al
c00272ab:	d3 ef                	shr    edi,cl
c00272ad:	88 d9                	mov    cl,bl
c00272af:	d3 e6                	shl    esi,cl
c00272b1:	89 ea                	mov    edx,ebp
c00272b3:	88 c1                	mov    cl,al
c00272b5:	d3 ea                	shr    edx,cl
c00272b7:	09 d6                	or     esi,edx
c00272b9:	89 f0                	mov    eax,esi
c00272bb:	89 fa                	mov    edx,edi
c00272bd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00272c1:	89 d7                	mov    edi,edx
c00272c3:	89 c6                	mov    esi,eax
c00272c5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00272c9:	39 d7                	cmp    edi,edx
c00272cb:	72 13                	jb     c00272e0 <__udivdi3+0xec>
c00272cd:	74 09                	je     c00272d8 <__udivdi3+0xe4>
c00272cf:	89 f0                	mov    eax,esi
c00272d1:	31 db                	xor    ebx,ebx
c00272d3:	e9 43 ff ff ff       	jmp    c002721b <__udivdi3+0x27>
c00272d8:	88 d9                	mov    cl,bl
c00272da:	d3 e5                	shl    ebp,cl
c00272dc:	39 c5                	cmp    ebp,eax
c00272de:	73 ef                	jae    c00272cf <__udivdi3+0xdb>
c00272e0:	8d 46 ff             	lea    eax,[esi-0x1]
c00272e3:	31 db                	xor    ebx,ebx
c00272e5:	e9 31 ff ff ff       	jmp    c002721b <__udivdi3+0x27>
c00272ea:	66 90                	xchg   ax,ax
c00272ec:	31 c0                	xor    eax,eax
c00272ee:	e9 28 ff ff ff       	jmp    c002721b <__udivdi3+0x27>
c00272f3:	90                   	nop

c00272f4 <__umoddi3>:
c00272f4:	55                   	push   ebp
c00272f5:	57                   	push   edi
c00272f6:	56                   	push   esi
c00272f7:	53                   	push   ebx
c00272f8:	83 ec 1c             	sub    esp,0x1c
c00272fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00272ff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027303:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027307:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002730b:	89 da                	mov    edx,ebx
c002730d:	85 c0                	test   eax,eax
c002730f:	75 37                	jne    c0027348 <__umoddi3+0x54>
c0027311:	39 df                	cmp    edi,ebx
c0027313:	76 13                	jbe    c0027328 <__umoddi3+0x34>
c0027315:	89 f0                	mov    eax,esi
c0027317:	f7 f7                	div    edi
c0027319:	89 d0                	mov    eax,edx
c002731b:	31 d2                	xor    edx,edx
c002731d:	83 c4 1c             	add    esp,0x1c
c0027320:	5b                   	pop    ebx
c0027321:	5e                   	pop    esi
c0027322:	5f                   	pop    edi
c0027323:	5d                   	pop    ebp
c0027324:	c3                   	ret    
c0027325:	8d 76 00             	lea    esi,[esi+0x0]
c0027328:	89 fd                	mov    ebp,edi
c002732a:	85 ff                	test   edi,edi
c002732c:	75 0b                	jne    c0027339 <__umoddi3+0x45>
c002732e:	b8 01 00 00 00       	mov    eax,0x1
c0027333:	31 d2                	xor    edx,edx
c0027335:	f7 f7                	div    edi
c0027337:	89 c5                	mov    ebp,eax
c0027339:	89 d8                	mov    eax,ebx
c002733b:	31 d2                	xor    edx,edx
c002733d:	f7 f5                	div    ebp
c002733f:	89 f0                	mov    eax,esi
c0027341:	f7 f5                	div    ebp
c0027343:	89 d0                	mov    eax,edx
c0027345:	eb d4                	jmp    c002731b <__umoddi3+0x27>
c0027347:	90                   	nop
c0027348:	89 f1                	mov    ecx,esi
c002734a:	39 d8                	cmp    eax,ebx
c002734c:	76 0a                	jbe    c0027358 <__umoddi3+0x64>
c002734e:	89 f0                	mov    eax,esi
c0027350:	83 c4 1c             	add    esp,0x1c
c0027353:	5b                   	pop    ebx
c0027354:	5e                   	pop    esi
c0027355:	5f                   	pop    edi
c0027356:	5d                   	pop    ebp
c0027357:	c3                   	ret    
c0027358:	0f bd e8             	bsr    ebp,eax
c002735b:	83 f5 1f             	xor    ebp,0x1f
c002735e:	75 1c                	jne    c002737c <__umoddi3+0x88>
c0027360:	39 d8                	cmp    eax,ebx
c0027362:	72 04                	jb     c0027368 <__umoddi3+0x74>
c0027364:	39 f7                	cmp    edi,esi
c0027366:	77 08                	ja     c0027370 <__umoddi3+0x7c>
c0027368:	89 da                	mov    edx,ebx
c002736a:	29 fe                	sub    esi,edi
c002736c:	19 c2                	sbb    edx,eax
c002736e:	89 f1                	mov    ecx,esi
c0027370:	89 c8                	mov    eax,ecx
c0027372:	83 c4 1c             	add    esp,0x1c
c0027375:	5b                   	pop    ebx
c0027376:	5e                   	pop    esi
c0027377:	5f                   	pop    edi
c0027378:	5d                   	pop    ebp
c0027379:	c3                   	ret    
c002737a:	66 90                	xchg   ax,ax
c002737c:	ba 20 00 00 00       	mov    edx,0x20
c0027381:	29 ea                	sub    edx,ebp
c0027383:	89 e9                	mov    ecx,ebp
c0027385:	d3 e0                	shl    eax,cl
c0027387:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002738b:	89 f8                	mov    eax,edi
c002738d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027391:	88 d1                	mov    cl,dl
c0027393:	d3 e8                	shr    eax,cl
c0027395:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027399:	09 c1                	or     ecx,eax
c002739b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002739f:	89 e9                	mov    ecx,ebp
c00273a1:	d3 e7                	shl    edi,cl
c00273a3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00273a7:	89 d8                	mov    eax,ebx
c00273a9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00273ad:	88 d1                	mov    cl,dl
c00273af:	d3 e8                	shr    eax,cl
c00273b1:	89 c7                	mov    edi,eax
c00273b3:	89 e9                	mov    ecx,ebp
c00273b5:	d3 e3                	shl    ebx,cl
c00273b7:	89 f0                	mov    eax,esi
c00273b9:	88 d1                	mov    cl,dl
c00273bb:	d3 e8                	shr    eax,cl
c00273bd:	09 d8                	or     eax,ebx
c00273bf:	89 e9                	mov    ecx,ebp
c00273c1:	d3 e6                	shl    esi,cl
c00273c3:	89 f3                	mov    ebx,esi
c00273c5:	89 fa                	mov    edx,edi
c00273c7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00273cb:	89 d1                	mov    ecx,edx
c00273cd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00273d1:	89 c6                	mov    esi,eax
c00273d3:	89 d7                	mov    edi,edx
c00273d5:	39 d1                	cmp    ecx,edx
c00273d7:	72 27                	jb     c0027400 <__umoddi3+0x10c>
c00273d9:	74 21                	je     c00273fc <__umoddi3+0x108>
c00273db:	89 ca                	mov    edx,ecx
c00273dd:	29 f3                	sub    ebx,esi
c00273df:	19 fa                	sbb    edx,edi
c00273e1:	89 d0                	mov    eax,edx
c00273e3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00273e7:	d3 e0                	shl    eax,cl
c00273e9:	89 e9                	mov    ecx,ebp
c00273eb:	d3 eb                	shr    ebx,cl
c00273ed:	09 d8                	or     eax,ebx
c00273ef:	d3 ea                	shr    edx,cl
c00273f1:	83 c4 1c             	add    esp,0x1c
c00273f4:	5b                   	pop    ebx
c00273f5:	5e                   	pop    esi
c00273f6:	5f                   	pop    edi
c00273f7:	5d                   	pop    ebp
c00273f8:	c3                   	ret    
c00273f9:	8d 76 00             	lea    esi,[esi+0x0]
c00273fc:	39 c3                	cmp    ebx,eax
c00273fe:	73 db                	jae    c00273db <__umoddi3+0xe7>
c0027400:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027404:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0027408:	89 d7                	mov    edi,edx
c002740a:	89 c6                	mov    esi,eax
c002740c:	eb cd                	jmp    c00273db <__umoddi3+0xe7>

c002740e <__addsf3>:
c002740e:	55                   	push   ebp
c002740f:	89 e5                	mov    ebp,esp
c0027411:	57                   	push   edi
c0027412:	56                   	push   esi
c0027413:	53                   	push   ebx
c0027414:	83 ec 08             	sub    esp,0x8
c0027417:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002741a:	89 fa                	mov    edx,edi
c002741c:	89 f8                	mov    eax,edi
c002741e:	c1 f8 17             	sar    eax,0x17
c0027421:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027424:	c1 e2 08             	shl    edx,0x8
c0027427:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002742d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027430:	89 de                	mov    esi,ebx
c0027432:	c1 fe 17             	sar    esi,0x17
c0027435:	c1 e3 08             	shl    ebx,0x8
c0027438:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002743e:	31 f0                	xor    eax,esi
c0027440:	0f 88 3b 01 00 00    	js     c0027581 <__addsf3+0x173>
c0027446:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0027449:	29 f1                	sub    ecx,esi
c002744b:	85 c9                	test   ecx,ecx
c002744d:	7e 54                	jle    c00274a3 <__addsf3+0x95>
c002744f:	89 f0                	mov    eax,esi
c0027451:	84 c0                	test   al,al
c0027453:	75 10                	jne    c0027465 <__addsf3+0x57>
c0027455:	85 db                	test   ebx,ebx
c0027457:	0f 84 aa 02 00 00    	je     c0027707 <__addsf3+0x2f9>
c002745d:	49                   	dec    ecx
c002745e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027461:	74 38                	je     c002749b <__addsf3+0x8d>
c0027463:	eb 13                	jmp    c0027478 <__addsf3+0x6a>
c0027465:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027468:	f7 d0                	not    eax
c002746a:	84 c0                	test   al,al
c002746c:	0f 84 95 02 00 00    	je     c0027707 <__addsf3+0x2f9>
c0027472:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027478:	83 f9 1f             	cmp    ecx,0x1f
c002747b:	0f 8f 86 02 00 00    	jg     c0027707 <__addsf3+0x2f9>
c0027481:	89 de                	mov    esi,ebx
c0027483:	d3 ee                	shr    esi,cl
c0027485:	b8 20 00 00 00       	mov    eax,0x20
c002748a:	29 c8                	sub    eax,ecx
c002748c:	89 c1                	mov    ecx,eax
c002748e:	d3 e3                	shl    ebx,cl
c0027490:	31 c0                	xor    eax,eax
c0027492:	85 db                	test   ebx,ebx
c0027494:	0f 95 c0             	setne  al
c0027497:	09 f0                	or     eax,esi
c0027499:	01 d0                	add    eax,edx
c002749b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002749e:	e9 b6 00 00 00       	jmp    c0027559 <__addsf3+0x14b>
c00274a3:	74 5c                	je     c0027501 <__addsf3+0xf3>
c00274a5:	89 f1                	mov    ecx,esi
c00274a7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00274aa:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00274ad:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00274b1:	75 14                	jne    c00274c7 <__addsf3+0xb9>
c00274b3:	85 d2                	test   edx,edx
c00274b5:	0f 84 4c 02 00 00    	je     c0027707 <__addsf3+0x2f9>
c00274bb:	49                   	dec    ecx
c00274bc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00274bf:	0f 84 94 00 00 00    	je     c0027559 <__addsf3+0x14b>
c00274c5:	eb 12                	jmp    c00274d9 <__addsf3+0xcb>
c00274c7:	89 f0                	mov    eax,esi
c00274c9:	f7 d0                	not    eax
c00274cb:	84 c0                	test   al,al
c00274cd:	0f 84 34 02 00 00    	je     c0027707 <__addsf3+0x2f9>
c00274d3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00274d9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00274dc:	83 f9 1f             	cmp    ecx,0x1f
c00274df:	0f 8f 22 02 00 00    	jg     c0027707 <__addsf3+0x2f9>
c00274e5:	89 d7                	mov    edi,edx
c00274e7:	d3 ef                	shr    edi,cl
c00274e9:	b8 20 00 00 00       	mov    eax,0x20
c00274ee:	29 c8                	sub    eax,ecx
c00274f0:	89 c1                	mov    ecx,eax
c00274f2:	d3 e2                	shl    edx,cl
c00274f4:	31 c0                	xor    eax,eax
c00274f6:	85 d2                	test   edx,edx
c00274f8:	0f 95 c0             	setne  al
c00274fb:	09 f8                	or     eax,edi
c00274fd:	01 d8                	add    eax,ebx
c00274ff:	eb 58                	jmp    c0027559 <__addsf3+0x14b>
c0027501:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027504:	8d 70 01             	lea    esi,[eax+0x1]
c0027507:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002750d:	75 32                	jne    c0027541 <__addsf3+0x133>
c002750f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027513:	75 1f                	jne    c0027534 <__addsf3+0x126>
c0027515:	85 d2                	test   edx,edx
c0027517:	0f 84 e0 01 00 00    	je     c00276fd <__addsf3+0x2ef>
c002751d:	85 db                	test   ebx,ebx
c002751f:	0f 84 e2 01 00 00    	je     c0027707 <__addsf3+0x2f9>
c0027525:	89 d0                	mov    eax,edx
c0027527:	01 d8                	add    eax,ebx
c0027529:	0f 89 a9 01 00 00    	jns    c00276d8 <__addsf3+0x2ca>
c002752f:	e9 9d 01 00 00       	jmp    c00276d1 <__addsf3+0x2c3>
c0027534:	85 d2                	test   edx,edx
c0027536:	0f 85 cb 01 00 00    	jne    c0027707 <__addsf3+0x2f9>
c002753c:	e9 bc 01 00 00       	jmp    c00276fd <__addsf3+0x2ef>
c0027541:	31 c0                	xor    eax,eax
c0027543:	89 f1                	mov    ecx,esi
c0027545:	f7 d1                	not    ecx
c0027547:	84 c9                	test   cl,cl
c0027549:	0f 84 90 01 00 00    	je     c00276df <__addsf3+0x2d1>
c002754f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027552:	d1 e8                	shr    eax,1
c0027554:	e9 86 01 00 00       	jmp    c00276df <__addsf3+0x2d1>
c0027559:	85 c0                	test   eax,eax
c002755b:	0f 89 7e 01 00 00    	jns    c00276df <__addsf3+0x2d1>
c0027561:	46                   	inc    esi
c0027562:	89 f2                	mov    edx,esi
c0027564:	f7 d2                	not    edx
c0027566:	84 d2                	test   dl,dl
c0027568:	0f 84 6f 01 00 00    	je     c00276dd <__addsf3+0x2cf>
c002756e:	89 c2                	mov    edx,eax
c0027570:	83 e2 01             	and    edx,0x1
c0027573:	d1 e8                	shr    eax,1
c0027575:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002757a:	09 d0                	or     eax,edx
c002757c:	e9 5e 01 00 00       	jmp    c00276df <__addsf3+0x2d1>
c0027581:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027585:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027588:	89 f0                	mov    eax,esi
c002758a:	0f b6 c0             	movzx  eax,al
c002758d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027590:	29 c1                	sub    ecx,eax
c0027592:	85 c9                	test   ecx,ecx
c0027594:	7e 55                	jle    c00275eb <__addsf3+0x1dd>
c0027596:	85 c0                	test   eax,eax
c0027598:	75 11                	jne    c00275ab <__addsf3+0x19d>
c002759a:	85 db                	test   ebx,ebx
c002759c:	0f 84 65 01 00 00    	je     c0027707 <__addsf3+0x2f9>
c00275a2:	49                   	dec    ecx
c00275a3:	75 19                	jne    c00275be <__addsf3+0x1b0>
c00275a5:	89 d0                	mov    eax,edx
c00275a7:	29 d8                	sub    eax,ebx
c00275a9:	eb 38                	jmp    c00275e3 <__addsf3+0x1d5>
c00275ab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00275ae:	f7 d0                	not    eax
c00275b0:	84 c0                	test   al,al
c00275b2:	0f 84 4f 01 00 00    	je     c0027707 <__addsf3+0x2f9>
c00275b8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00275be:	83 f9 1f             	cmp    ecx,0x1f
c00275c1:	0f 8f 40 01 00 00    	jg     c0027707 <__addsf3+0x2f9>
c00275c7:	89 de                	mov    esi,ebx
c00275c9:	d3 ee                	shr    esi,cl
c00275cb:	b8 20 00 00 00       	mov    eax,0x20
c00275d0:	29 c8                	sub    eax,ecx
c00275d2:	89 c1                	mov    ecx,eax
c00275d4:	d3 e3                	shl    ebx,cl
c00275d6:	31 c0                	xor    eax,eax
c00275d8:	85 db                	test   ebx,ebx
c00275da:	0f 95 c0             	setne  al
c00275dd:	09 f0                	or     eax,esi
c00275df:	29 c2                	sub    edx,eax
c00275e1:	89 d0                	mov    eax,edx
c00275e3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00275e6:	e9 af 00 00 00       	jmp    c002769a <__addsf3+0x28c>
c00275eb:	74 5c                	je     c0027649 <__addsf3+0x23b>
c00275ed:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00275f0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00275f3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00275f7:	75 14                	jne    c002760d <__addsf3+0x1ff>
c00275f9:	85 d2                	test   edx,edx
c00275fb:	0f 84 06 01 00 00    	je     c0027707 <__addsf3+0x2f9>
c0027601:	48                   	dec    eax
c0027602:	75 1b                	jne    c002761f <__addsf3+0x211>
c0027604:	89 d8                	mov    eax,ebx
c0027606:	29 d0                	sub    eax,edx
c0027608:	e9 8d 00 00 00       	jmp    c002769a <__addsf3+0x28c>
c002760d:	89 f1                	mov    ecx,esi
c002760f:	f7 d1                	not    ecx
c0027611:	84 c9                	test   cl,cl
c0027613:	0f 84 ee 00 00 00    	je     c0027707 <__addsf3+0x2f9>
c0027619:	81 ca 00 00 00 80    	or     edx,0x80000000
c002761f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027622:	83 f8 1f             	cmp    eax,0x1f
c0027625:	0f 8f dc 00 00 00    	jg     c0027707 <__addsf3+0x2f9>
c002762b:	89 d7                	mov    edi,edx
c002762d:	88 c1                	mov    cl,al
c002762f:	d3 ef                	shr    edi,cl
c0027631:	b9 20 00 00 00       	mov    ecx,0x20
c0027636:	29 c1                	sub    ecx,eax
c0027638:	d3 e2                	shl    edx,cl
c002763a:	31 c0                	xor    eax,eax
c002763c:	85 d2                	test   edx,edx
c002763e:	0f 95 c0             	setne  al
c0027641:	09 f8                	or     eax,edi
c0027643:	29 c3                	sub    ebx,eax
c0027645:	89 d8                	mov    eax,ebx
c0027647:	eb 51                	jmp    c002769a <__addsf3+0x28c>
c0027649:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002764c:	40                   	inc    eax
c002764d:	a8 fe                	test   al,0xfe
c002764f:	75 3d                	jne    c002768e <__addsf3+0x280>
c0027651:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027655:	0f 85 a7 00 00 00    	jne    c0027702 <__addsf3+0x2f4>
c002765b:	85 d2                	test   edx,edx
c002765d:	75 12                	jne    c0027671 <__addsf3+0x263>
c002765f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027662:	85 db                	test   ebx,ebx
c0027664:	0f 85 9d 00 00 00    	jne    c0027707 <__addsf3+0x2f9>
c002766a:	31 ff                	xor    edi,edi
c002766c:	e9 96 00 00 00       	jmp    c0027707 <__addsf3+0x2f9>
c0027671:	85 db                	test   ebx,ebx
c0027673:	0f 84 8e 00 00 00    	je     c0027707 <__addsf3+0x2f9>
c0027679:	89 d0                	mov    eax,edx
c002767b:	29 d8                	sub    eax,ebx
c002767d:	79 06                	jns    c0027685 <__addsf3+0x277>
c002767f:	89 d8                	mov    eax,ebx
c0027681:	29 d0                	sub    eax,edx
c0027683:	eb 5a                	jmp    c00276df <__addsf3+0x2d1>
c0027685:	bf 00 00 00 00       	mov    edi,0x0
c002768a:	74 7b                	je     c0027707 <__addsf3+0x2f9>
c002768c:	eb 4a                	jmp    c00276d8 <__addsf3+0x2ca>
c002768e:	89 d0                	mov    eax,edx
c0027690:	29 d8                	sub    eax,ebx
c0027692:	79 12                	jns    c00276a6 <__addsf3+0x298>
c0027694:	89 d8                	mov    eax,ebx
c0027696:	29 d0                	sub    eax,edx
c0027698:	eb 09                	jmp    c00276a3 <__addsf3+0x295>
c002769a:	85 c0                	test   eax,eax
c002769c:	79 41                	jns    c00276df <__addsf3+0x2d1>
c002769e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276a3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c00276a6:	31 f6                	xor    esi,esi
c00276a8:	85 c0                	test   eax,eax
c00276aa:	74 33                	je     c00276df <__addsf3+0x2d1>
c00276ac:	0f bd c8             	bsr    ecx,eax
c00276af:	83 f1 1f             	xor    ecx,0x1f
c00276b2:	d3 e0                	shl    eax,cl
c00276b4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00276b8:	39 ca                	cmp    edx,ecx
c00276ba:	7f 10                	jg     c00276cc <__addsf3+0x2be>
c00276bc:	29 d1                	sub    ecx,edx
c00276be:	41                   	inc    ecx
c00276bf:	d3 e8                	shr    eax,cl
c00276c1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276c4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c00276ca:	eb 13                	jmp    c00276df <__addsf3+0x2d1>
c00276cc:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276cf:	29 ce                	sub    esi,ecx
c00276d1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276d6:	eb 07                	jmp    c00276df <__addsf3+0x2d1>
c00276d8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276db:	eb 02                	jmp    c00276df <__addsf3+0x2d1>
c00276dd:	31 c0                	xor    eax,eax
c00276df:	89 c2                	mov    edx,eax
c00276e1:	c1 ea 08             	shr    edx,0x8
c00276e4:	a8 7f                	test   al,0x7f
c00276e6:	0f 95 c1             	setne  cl
c00276e9:	09 d1                	or     ecx,edx
c00276eb:	83 e1 01             	and    ecx,0x1
c00276ee:	c1 e8 07             	shr    eax,0x7
c00276f1:	21 c8                	and    eax,ecx
c00276f3:	c1 e6 17             	shl    esi,0x17
c00276f6:	09 d6                	or     esi,edx
c00276f8:	8d 3c 30             	lea    edi,[eax+esi*1]
c00276fb:	eb 0a                	jmp    c0027707 <__addsf3+0x2f9>
c00276fd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027700:	eb 05                	jmp    c0027707 <__addsf3+0x2f9>
c0027702:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027707:	89 f8                	mov    eax,edi
c0027709:	5a                   	pop    edx
c002770a:	59                   	pop    ecx
c002770b:	5b                   	pop    ebx
c002770c:	5e                   	pop    esi
c002770d:	5f                   	pop    edi
c002770e:	5d                   	pop    ebp
c002770f:	c3                   	ret    

c0027710 <__subsf3>:
c0027710:	55                   	push   ebp
c0027711:	89 e5                	mov    ebp,esp
c0027713:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027716:	05 00 00 00 80       	add    eax,0x80000000
c002771b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002771e:	5d                   	pop    ebp
c002771f:	e9 ea fc ff ff       	jmp    c002740e <__addsf3>

c0027724 <__negsf2>:
c0027724:	55                   	push   ebp
c0027725:	89 e5                	mov    ebp,esp
c0027727:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002772a:	05 00 00 00 80       	add    eax,0x80000000
c002772f:	5d                   	pop    ebp
c0027730:	c3                   	ret    

c0027731 <__mulsf3>:
c0027731:	55                   	push   ebp
c0027732:	89 e5                	mov    ebp,esp
c0027734:	57                   	push   edi
c0027735:	56                   	push   esi
c0027736:	53                   	push   ebx
c0027737:	83 ec 1c             	sub    esp,0x1c
c002773a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002773d:	89 f0                	mov    eax,esi
c002773f:	89 f1                	mov    ecx,esi
c0027741:	c1 f9 17             	sar    ecx,0x17
c0027744:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027747:	c1 e0 08             	shl    eax,0x8
c002774a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002774f:	89 c1                	mov    ecx,eax
c0027751:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027754:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027757:	89 c7                	mov    edi,eax
c0027759:	c1 ff 17             	sar    edi,0x17
c002775c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027760:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027763:	89 f8                	mov    eax,edi
c0027765:	0f b6 c0             	movzx  eax,al
c0027768:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002776b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002776f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027772:	42                   	inc    edx
c0027773:	80 e2 fe             	and    dl,0xfe
c0027776:	75 7b                	jne    c00277f3 <__mulsf3+0xc2>
c0027778:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002777c:	74 54                	je     c00277d2 <__mulsf3+0xa1>
c002777e:	85 c9                	test   ecx,ecx
c0027780:	0f 85 64 01 00 00    	jne    c00278ea <__mulsf3+0x1b9>
c0027786:	8d 57 01             	lea    edx,[edi+0x1]
c0027789:	80 e2 fe             	and    dl,0xfe
c002778c:	75 1f                	jne    c00277ad <__mulsf3+0x7c>
c002778e:	85 c0                	test   eax,eax
c0027790:	b8 00 00 00 00       	mov    eax,0x0
c0027795:	74 29                	je     c00277c0 <__mulsf3+0x8f>
c0027797:	53                   	push   ebx
c0027798:	53                   	push   ebx
c0027799:	50                   	push   eax
c002779a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002779d:	e8 96 05 00 00       	call   c0027d38 <__nesf2>
c00277a2:	83 c4 10             	add    esp,0x10
c00277a5:	85 c0                	test   eax,eax
c00277a7:	0f 85 3a 01 00 00    	jne    c00278e7 <__mulsf3+0x1b6>
c00277ad:	85 ff                	test   edi,edi
c00277af:	0f 89 35 01 00 00    	jns    c00278ea <__mulsf3+0x1b9>
c00277b5:	81 c6 00 00 00 80    	add    esi,0x80000000
c00277bb:	e9 2a 01 00 00       	jmp    c00278ea <__mulsf3+0x1b9>
c00277c0:	51                   	push   ecx
c00277c1:	51                   	push   ecx
c00277c2:	50                   	push   eax
c00277c3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277c6:	e8 6d 05 00 00       	call   c0027d38 <__nesf2>
c00277cb:	83 c4 10             	add    esp,0x10
c00277ce:	85 c0                	test   eax,eax
c00277d0:	eb 15                	jmp    c00277e7 <__mulsf3+0xb6>
c00277d2:	85 c9                	test   ecx,ecx
c00277d4:	74 0b                	je     c00277e1 <__mulsf3+0xb0>
c00277d6:	8d 53 ff             	lea    edx,[ebx-0x1]
c00277d9:	01 c9                	add    ecx,ecx
c00277db:	78 16                	js     c00277f3 <__mulsf3+0xc2>
c00277dd:	89 d3                	mov    ebx,edx
c00277df:	eb f5                	jmp    c00277d6 <__mulsf3+0xa5>
c00277e1:	89 f8                	mov    eax,edi
c00277e3:	f7 d0                	not    eax
c00277e5:	84 c0                	test   al,al
c00277e7:	75 c4                	jne    c00277ad <__mulsf3+0x7c>
c00277e9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00277ee:	e9 f7 00 00 00       	jmp    c00278ea <__mulsf3+0x1b9>
c00277f3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00277f6:	c1 e6 08             	shl    esi,0x8
c00277f9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00277ff:	8d 57 01             	lea    edx,[edi+0x1]
c0027802:	80 e2 fe             	and    dl,0xfe
c0027805:	75 63                	jne    c002786a <__mulsf3+0x139>
c0027807:	85 c0                	test   eax,eax
c0027809:	74 2f                	je     c002783a <__mulsf3+0x109>
c002780b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c002780f:	0f 89 d2 00 00 00    	jns    c00278e7 <__mulsf3+0x1b6>
c0027815:	52                   	push   edx
c0027816:	52                   	push   edx
c0027817:	6a 00                	push   0x0
c0027819:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002781c:	e8 dc 04 00 00       	call   c0027cfd <__eqsf2>
c0027821:	83 c4 10             	add    esp,0x10
c0027824:	85 c0                	test   eax,eax
c0027826:	0f 85 bb 00 00 00    	jne    c00278e7 <__mulsf3+0x1b6>
c002782c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002782f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027835:	e9 b0 00 00 00       	jmp    c00278ea <__mulsf3+0x1b9>
c002783a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002783d:	50                   	push   eax
c002783e:	50                   	push   eax
c002783f:	6a 00                	push   0x0
c0027841:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027844:	e8 b4 04 00 00       	call   c0027cfd <__eqsf2>
c0027849:	83 c4 10             	add    esp,0x10
c002784c:	85 c0                	test   eax,eax
c002784e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027851:	75 0c                	jne    c002785f <__mulsf3+0x12e>
c0027853:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027857:	0f 89 8a 00 00 00    	jns    c00278e7 <__mulsf3+0x1b6>
c002785d:	eb cd                	jmp    c002782c <__mulsf3+0xfb>
c002785f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027862:	01 f6                	add    esi,esi
c0027864:	78 04                	js     c002786a <__mulsf3+0x139>
c0027866:	89 c3                	mov    ebx,eax
c0027868:	eb f5                	jmp    c002785f <__mulsf3+0x12e>
c002786a:	89 c8                	mov    eax,ecx
c002786c:	0d 00 00 00 80       	or     eax,0x80000000
c0027871:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027877:	f7 e6                	mul    esi
c0027879:	85 c0                	test   eax,eax
c002787b:	0f 95 c0             	setne  al
c002787e:	0f b6 c0             	movzx  eax,al
c0027881:	09 c2                	or     edx,eax
c0027883:	78 03                	js     c0027888 <__mulsf3+0x157>
c0027885:	01 d2                	add    edx,edx
c0027887:	4b                   	dec    ebx
c0027888:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002788e:	7f 22                	jg     c00278b2 <__mulsf3+0x181>
c0027890:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027896:	85 db                	test   ebx,ebx
c0027898:	7f 23                	jg     c00278bd <__mulsf3+0x18c>
c002789a:	83 fb e9             	cmp    ebx,0xffffffe9
c002789d:	7c 1a                	jl     c00278b9 <__mulsf3+0x188>
c002789f:	81 ca 00 00 00 80    	or     edx,0x80000000
c00278a5:	b9 01 00 00 00       	mov    ecx,0x1
c00278aa:	29 d9                	sub    ecx,ebx
c00278ac:	d3 ea                	shr    edx,cl
c00278ae:	31 db                	xor    ebx,ebx
c00278b0:	eb 0b                	jmp    c00278bd <__mulsf3+0x18c>
c00278b2:	bb ff 00 00 00       	mov    ebx,0xff
c00278b7:	eb 02                	jmp    c00278bb <__mulsf3+0x18a>
c00278b9:	31 db                	xor    ebx,ebx
c00278bb:	31 d2                	xor    edx,edx
c00278bd:	89 d0                	mov    eax,edx
c00278bf:	c1 e8 08             	shr    eax,0x8
c00278c2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c00278c5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c00278cb:	09 fb                	or     ebx,edi
c00278cd:	c1 e3 17             	shl    ebx,0x17
c00278d0:	09 c3                	or     ebx,eax
c00278d2:	f6 c2 7f             	test   dl,0x7f
c00278d5:	0f 95 c1             	setne  cl
c00278d8:	09 c8                	or     eax,ecx
c00278da:	83 e0 01             	and    eax,0x1
c00278dd:	c1 ea 07             	shr    edx,0x7
c00278e0:	21 c2                	and    edx,eax
c00278e2:	8d 34 13             	lea    esi,[ebx+edx*1]
c00278e5:	eb 03                	jmp    c00278ea <__mulsf3+0x1b9>
c00278e7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00278ea:	89 f0                	mov    eax,esi
c00278ec:	8d 65 f4             	lea    esp,[ebp-0xc]
c00278ef:	5b                   	pop    ebx
c00278f0:	5e                   	pop    esi
c00278f1:	5f                   	pop    edi
c00278f2:	5d                   	pop    ebp
c00278f3:	c3                   	ret    

c00278f4 <__divsf3>:
c00278f4:	55                   	push   ebp
c00278f5:	89 e5                	mov    ebp,esp
c00278f7:	57                   	push   edi
c00278f8:	56                   	push   esi
c00278f9:	53                   	push   ebx
c00278fa:	83 ec 1c             	sub    esp,0x1c
c00278fd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027900:	89 d8                	mov    eax,ebx
c0027902:	89 d9                	mov    ecx,ebx
c0027904:	c1 f9 17             	sar    ecx,0x17
c0027907:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002790a:	c1 e0 08             	shl    eax,0x8
c002790d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027912:	89 c1                	mov    ecx,eax
c0027914:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027917:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002791a:	89 c7                	mov    edi,eax
c002791c:	c1 ff 17             	sar    edi,0x17
c002791f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027923:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027926:	89 f8                	mov    eax,edi
c0027928:	0f b6 c0             	movzx  eax,al
c002792b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002792e:	29 c6                	sub    esi,eax
c0027930:	83 c6 7f             	add    esi,0x7f
c0027933:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027936:	42                   	inc    edx
c0027937:	80 e2 fe             	and    dl,0xfe
c002793a:	0f 85 9c 00 00 00    	jne    c00279dc <__divsf3+0xe8>
c0027940:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027944:	74 33                	je     c0027979 <__divsf3+0x85>
c0027946:	85 c9                	test   ecx,ecx
c0027948:	0f 85 c7 01 00 00    	jne    c0027b15 <__divsf3+0x221>
c002794e:	8d 57 01             	lea    edx,[edi+0x1]
c0027951:	80 e2 fe             	and    dl,0xfe
c0027954:	75 2f                	jne    c0027985 <__divsf3+0x91>
c0027956:	85 c0                	test   eax,eax
c0027958:	74 2b                	je     c0027985 <__divsf3+0x91>
c002795a:	51                   	push   ecx
c002795b:	51                   	push   ecx
c002795c:	6a 00                	push   0x0
c002795e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027961:	e8 d2 03 00 00       	call   c0027d38 <__nesf2>
c0027966:	83 c4 10             	add    esp,0x10
c0027969:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002796c:	85 c0                	test   eax,eax
c002796e:	0f 85 a1 01 00 00    	jne    c0027b15 <__divsf3+0x221>
c0027974:	e9 92 01 00 00       	jmp    c0027b0b <__divsf3+0x217>
c0027979:	85 c9                	test   ecx,ecx
c002797b:	75 1b                	jne    c0027998 <__divsf3+0xa4>
c002797d:	8d 57 01             	lea    edx,[edi+0x1]
c0027980:	80 e2 fe             	and    dl,0xfe
c0027983:	74 1e                	je     c00279a3 <__divsf3+0xaf>
c0027985:	85 ff                	test   edi,edi
c0027987:	0f 89 88 01 00 00    	jns    c0027b15 <__divsf3+0x221>
c002798d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027993:	e9 7d 01 00 00       	jmp    c0027b15 <__divsf3+0x221>
c0027998:	8d 56 ff             	lea    edx,[esi-0x1]
c002799b:	01 c9                	add    ecx,ecx
c002799d:	78 3d                	js     c00279dc <__divsf3+0xe8>
c002799f:	89 d6                	mov    esi,edx
c00279a1:	eb f5                	jmp    c0027998 <__divsf3+0xa4>
c00279a3:	85 c0                	test   eax,eax
c00279a5:	b8 00 00 00 00       	mov    eax,0x0
c00279aa:	74 18                	je     c00279c4 <__divsf3+0xd0>
c00279ac:	52                   	push   edx
c00279ad:	52                   	push   edx
c00279ae:	50                   	push   eax
c00279af:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279b2:	e8 81 03 00 00       	call   c0027d38 <__nesf2>
c00279b7:	83 c4 10             	add    esp,0x10
c00279ba:	85 c0                	test   eax,eax
c00279bc:	0f 85 50 01 00 00    	jne    c0027b12 <__divsf3+0x21e>
c00279c2:	eb c1                	jmp    c0027985 <__divsf3+0x91>
c00279c4:	56                   	push   esi
c00279c5:	56                   	push   esi
c00279c6:	50                   	push   eax
c00279c7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279ca:	e8 69 03 00 00       	call   c0027d38 <__nesf2>
c00279cf:	83 c4 10             	add    esp,0x10
c00279d2:	85 c0                	test   eax,eax
c00279d4:	0f 84 31 01 00 00    	je     c0027b0b <__divsf3+0x217>
c00279da:	eb a9                	jmp    c0027985 <__divsf3+0x91>
c00279dc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00279df:	c1 e3 08             	shl    ebx,0x8
c00279e2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00279e8:	8d 57 01             	lea    edx,[edi+0x1]
c00279eb:	80 e2 fe             	and    dl,0xfe
c00279ee:	75 71                	jne    c0027a61 <__divsf3+0x16d>
c00279f0:	85 c0                	test   eax,eax
c00279f2:	ba 00 00 00 00       	mov    edx,0x0
c00279f7:	74 2f                	je     c0027a28 <__divsf3+0x134>
c00279f9:	51                   	push   ecx
c00279fa:	51                   	push   ecx
c00279fb:	52                   	push   edx
c00279fc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279ff:	e8 f9 02 00 00       	call   c0027cfd <__eqsf2>
c0027a04:	83 c4 10             	add    esp,0x10
c0027a07:	85 c0                	test   eax,eax
c0027a09:	0f 85 03 01 00 00    	jne    c0027b12 <__divsf3+0x21e>
c0027a0f:	31 d2                	xor    edx,edx
c0027a11:	89 d3                	mov    ebx,edx
c0027a13:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027a16:	31 f8                	xor    eax,edi
c0027a18:	0f 89 f7 00 00 00    	jns    c0027b15 <__divsf3+0x221>
c0027a1e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027a23:	e9 ed 00 00 00       	jmp    c0027b15 <__divsf3+0x221>
c0027a28:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027a2b:	50                   	push   eax
c0027a2c:	50                   	push   eax
c0027a2d:	52                   	push   edx
c0027a2e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a31:	e8 c7 02 00 00       	call   c0027cfd <__eqsf2>
c0027a36:	83 c4 10             	add    esp,0x10
c0027a39:	85 c0                	test   eax,eax
c0027a3b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027a3e:	75 16                	jne    c0027a56 <__divsf3+0x162>
c0027a40:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a43:	31 fb                	xor    ebx,edi
c0027a45:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027a4b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027a51:	e9 bf 00 00 00       	jmp    c0027b15 <__divsf3+0x221>
c0027a56:	8d 46 01             	lea    eax,[esi+0x1]
c0027a59:	01 db                	add    ebx,ebx
c0027a5b:	78 04                	js     c0027a61 <__divsf3+0x16d>
c0027a5d:	89 c6                	mov    esi,eax
c0027a5f:	eb f5                	jmp    c0027a56 <__divsf3+0x162>
c0027a61:	89 c8                	mov    eax,ecx
c0027a63:	0d 00 00 00 80       	or     eax,0x80000000
c0027a68:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027a6e:	31 d2                	xor    edx,edx
c0027a70:	39 d8                	cmp    eax,ebx
c0027a72:	72 07                	jb     c0027a7b <__divsf3+0x187>
c0027a74:	29 d8                	sub    eax,ebx
c0027a76:	ba 01 00 00 00       	mov    edx,0x1
c0027a7b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027a82:	01 d2                	add    edx,edx
c0027a84:	89 c1                	mov    ecx,eax
c0027a86:	01 c0                	add    eax,eax
c0027a88:	85 c9                	test   ecx,ecx
c0027a8a:	78 04                	js     c0027a90 <__divsf3+0x19c>
c0027a8c:	39 c3                	cmp    ebx,eax
c0027a8e:	77 05                	ja     c0027a95 <__divsf3+0x1a1>
c0027a90:	29 d8                	sub    eax,ebx
c0027a92:	83 ca 01             	or     edx,0x1
c0027a95:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027a98:	75 e8                	jne    c0027a82 <__divsf3+0x18e>
c0027a9a:	85 c0                	test   eax,eax
c0027a9c:	0f 95 c0             	setne  al
c0027a9f:	0f b6 c0             	movzx  eax,al
c0027aa2:	c1 e2 06             	shl    edx,0x6
c0027aa5:	09 c2                	or     edx,eax
c0027aa7:	78 03                	js     c0027aac <__divsf3+0x1b8>
c0027aa9:	01 d2                	add    edx,edx
c0027aab:	4e                   	dec    esi
c0027aac:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027ab2:	7f 22                	jg     c0027ad6 <__divsf3+0x1e2>
c0027ab4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027aba:	85 f6                	test   esi,esi
c0027abc:	7f 23                	jg     c0027ae1 <__divsf3+0x1ed>
c0027abe:	83 fe e9             	cmp    esi,0xffffffe9
c0027ac1:	7c 1a                	jl     c0027add <__divsf3+0x1e9>
c0027ac3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027ac9:	b9 01 00 00 00       	mov    ecx,0x1
c0027ace:	29 f1                	sub    ecx,esi
c0027ad0:	d3 ea                	shr    edx,cl
c0027ad2:	31 f6                	xor    esi,esi
c0027ad4:	eb 0b                	jmp    c0027ae1 <__divsf3+0x1ed>
c0027ad6:	be ff 00 00 00       	mov    esi,0xff
c0027adb:	eb 02                	jmp    c0027adf <__divsf3+0x1eb>
c0027add:	31 f6                	xor    esi,esi
c0027adf:	31 d2                	xor    edx,edx
c0027ae1:	89 d0                	mov    eax,edx
c0027ae3:	c1 e8 08             	shr    eax,0x8
c0027ae6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027ae9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027aef:	09 fe                	or     esi,edi
c0027af1:	c1 e6 17             	shl    esi,0x17
c0027af4:	09 c6                	or     esi,eax
c0027af6:	f6 c2 7f             	test   dl,0x7f
c0027af9:	0f 95 c1             	setne  cl
c0027afc:	09 c8                	or     eax,ecx
c0027afe:	83 e0 01             	and    eax,0x1
c0027b01:	c1 ea 07             	shr    edx,0x7
c0027b04:	21 c2                	and    edx,eax
c0027b06:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027b09:	eb 0a                	jmp    c0027b15 <__divsf3+0x221>
c0027b0b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027b10:	eb 03                	jmp    c0027b15 <__divsf3+0x221>
c0027b12:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027b15:	89 d8                	mov    eax,ebx
c0027b17:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027b1a:	5b                   	pop    ebx
c0027b1b:	5e                   	pop    esi
c0027b1c:	5f                   	pop    edi
c0027b1d:	5d                   	pop    ebp
c0027b1e:	c3                   	ret    

c0027b1f <__floatsisf>:
c0027b1f:	55                   	push   ebp
c0027b20:	89 e5                	mov    ebp,esp
c0027b22:	53                   	push   ebx
c0027b23:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b26:	85 d2                	test   edx,edx
c0027b28:	7e 2b                	jle    c0027b55 <__floatsisf+0x36>
c0027b2a:	0f bd ca             	bsr    ecx,edx
c0027b2d:	83 f1 1f             	xor    ecx,0x1f
c0027b30:	d3 e2                	shl    edx,cl
c0027b32:	89 d0                	mov    eax,edx
c0027b34:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b39:	89 c3                	mov    ebx,eax
c0027b3b:	c1 eb 08             	shr    ebx,0x8
c0027b3e:	80 e2 7f             	and    dl,0x7f
c0027b41:	0f 95 c2             	setne  dl
c0027b44:	09 da                	or     edx,ebx
c0027b46:	83 e2 01             	and    edx,0x1
c0027b49:	c1 e8 07             	shr    eax,0x7
c0027b4c:	21 c2                	and    edx,eax
c0027b4e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027b53:	eb 32                	jmp    c0027b87 <__floatsisf+0x68>
c0027b55:	b8 00 00 00 00       	mov    eax,0x0
c0027b5a:	74 34                	je     c0027b90 <__floatsisf+0x71>
c0027b5c:	f7 da                	neg    edx
c0027b5e:	0f bd ca             	bsr    ecx,edx
c0027b61:	83 f1 1f             	xor    ecx,0x1f
c0027b64:	d3 e2                	shl    edx,cl
c0027b66:	89 d0                	mov    eax,edx
c0027b68:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b6d:	89 c3                	mov    ebx,eax
c0027b6f:	c1 eb 08             	shr    ebx,0x8
c0027b72:	80 e2 7f             	and    dl,0x7f
c0027b75:	0f 95 c2             	setne  dl
c0027b78:	09 da                	or     edx,ebx
c0027b7a:	83 e2 01             	and    edx,0x1
c0027b7d:	c1 e8 07             	shr    eax,0x7
c0027b80:	21 c2                	and    edx,eax
c0027b82:	b8 9e 01 00 00       	mov    eax,0x19e
c0027b87:	29 c8                	sub    eax,ecx
c0027b89:	c1 e0 17             	shl    eax,0x17
c0027b8c:	09 d8                	or     eax,ebx
c0027b8e:	01 d0                	add    eax,edx
c0027b90:	5b                   	pop    ebx
c0027b91:	5d                   	pop    ebp
c0027b92:	c3                   	ret    

c0027b93 <__floatunsisf>:
c0027b93:	55                   	push   ebp
c0027b94:	89 e5                	mov    ebp,esp
c0027b96:	53                   	push   ebx
c0027b97:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b9a:	31 c0                	xor    eax,eax
c0027b9c:	85 d2                	test   edx,edx
c0027b9e:	74 32                	je     c0027bd2 <__floatunsisf+0x3f>
c0027ba0:	0f bd ca             	bsr    ecx,edx
c0027ba3:	83 f1 1f             	xor    ecx,0x1f
c0027ba6:	d3 e2                	shl    edx,cl
c0027ba8:	89 d0                	mov    eax,edx
c0027baa:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027baf:	89 c3                	mov    ebx,eax
c0027bb1:	c1 eb 08             	shr    ebx,0x8
c0027bb4:	80 e2 7f             	and    dl,0x7f
c0027bb7:	0f 95 c2             	setne  dl
c0027bba:	09 da                	or     edx,ebx
c0027bbc:	83 e2 01             	and    edx,0x1
c0027bbf:	c1 e8 07             	shr    eax,0x7
c0027bc2:	21 c2                	and    edx,eax
c0027bc4:	b8 9e 00 00 00       	mov    eax,0x9e
c0027bc9:	29 c8                	sub    eax,ecx
c0027bcb:	c1 e0 17             	shl    eax,0x17
c0027bce:	09 d8                	or     eax,ebx
c0027bd0:	01 d0                	add    eax,edx
c0027bd2:	5b                   	pop    ebx
c0027bd3:	5d                   	pop    ebp
c0027bd4:	c3                   	ret    

c0027bd5 <__fixsfsi>:
c0027bd5:	55                   	push   ebp
c0027bd6:	89 e5                	mov    ebp,esp
c0027bd8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027bdb:	89 d1                	mov    ecx,edx
c0027bdd:	c1 e1 08             	shl    ecx,0x8
c0027be0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027be6:	c1 fa 17             	sar    edx,0x17
c0027be9:	78 1c                	js     c0027c07 <__fixsfsi+0x32>
c0027beb:	83 ea 7f             	sub    edx,0x7f
c0027bee:	31 c0                	xor    eax,eax
c0027bf0:	83 fa 1e             	cmp    edx,0x1e
c0027bf3:	77 40                	ja     c0027c35 <__fixsfsi+0x60>
c0027bf5:	89 c8                	mov    eax,ecx
c0027bf7:	0d 00 00 00 80       	or     eax,0x80000000
c0027bfc:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c01:	29 d1                	sub    ecx,edx
c0027c03:	d3 e8                	shr    eax,cl
c0027c05:	eb 2e                	jmp    c0027c35 <__fixsfsi+0x60>
c0027c07:	31 c0                	xor    eax,eax
c0027c09:	81 c2 81 00 00 00    	add    edx,0x81
c0027c0f:	78 24                	js     c0027c35 <__fixsfsi+0x60>
c0027c11:	83 fa 1e             	cmp    edx,0x1e
c0027c14:	7e 09                	jle    c0027c1f <__fixsfsi+0x4a>
c0027c16:	83 fa 1f             	cmp    edx,0x1f
c0027c19:	75 18                	jne    c0027c33 <__fixsfsi+0x5e>
c0027c1b:	85 c9                	test   ecx,ecx
c0027c1d:	75 14                	jne    c0027c33 <__fixsfsi+0x5e>
c0027c1f:	89 c8                	mov    eax,ecx
c0027c21:	0d 00 00 00 80       	or     eax,0x80000000
c0027c26:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c2b:	29 d1                	sub    ecx,edx
c0027c2d:	d3 e8                	shr    eax,cl
c0027c2f:	f7 d8                	neg    eax
c0027c31:	eb 02                	jmp    c0027c35 <__fixsfsi+0x60>
c0027c33:	31 c0                	xor    eax,eax
c0027c35:	5d                   	pop    ebp
c0027c36:	c3                   	ret    

c0027c37 <__fixunssfsi>:
c0027c37:	55                   	push   ebp
c0027c38:	89 e5                	mov    ebp,esp
c0027c3a:	53                   	push   ebx
c0027c3b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027c3e:	89 d3                	mov    ebx,edx
c0027c40:	c1 fb 17             	sar    ebx,0x17
c0027c43:	83 eb 7f             	sub    ebx,0x7f
c0027c46:	31 c0                	xor    eax,eax
c0027c48:	83 fb 1f             	cmp    ebx,0x1f
c0027c4b:	77 18                	ja     c0027c65 <__fixunssfsi+0x2e>
c0027c4d:	89 d0                	mov    eax,edx
c0027c4f:	c1 e0 08             	shl    eax,0x8
c0027c52:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027c57:	0d 00 00 00 80       	or     eax,0x80000000
c0027c5c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c61:	29 d9                	sub    ecx,ebx
c0027c63:	d3 e8                	shr    eax,cl
c0027c65:	5b                   	pop    ebx
c0027c66:	5d                   	pop    ebp
c0027c67:	c3                   	ret    

c0027c68 <__cmpsf2>:
c0027c68:	55                   	push   ebp
c0027c69:	89 e5                	mov    ebp,esp
c0027c6b:	57                   	push   edi
c0027c6c:	56                   	push   esi
c0027c6d:	53                   	push   ebx
c0027c6e:	83 ec 24             	sub    esp,0x24
c0027c71:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027c77:	e8 4f 10 00 00       	call   c0028ccb <__truncdfsf2>
c0027c7c:	5a                   	pop    edx
c0027c7d:	59                   	pop    ecx
c0027c7e:	89 c3                	mov    ebx,eax
c0027c80:	c1 e8 17             	shr    eax,0x17
c0027c83:	0f b6 f0             	movzx  esi,al
c0027c86:	89 d8                	mov    eax,ebx
c0027c88:	c1 e8 1f             	shr    eax,0x1f
c0027c8b:	31 c6                	xor    esi,eax
c0027c8d:	c1 e3 08             	shl    ebx,0x8
c0027c90:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027c93:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027c96:	e8 30 10 00 00       	call   c0028ccb <__truncdfsf2>
c0027c9b:	83 c4 10             	add    esp,0x10
c0027c9e:	89 c1                	mov    ecx,eax
c0027ca0:	c1 e9 17             	shr    ecx,0x17
c0027ca3:	0f b6 c9             	movzx  ecx,cl
c0027ca6:	89 c7                	mov    edi,eax
c0027ca8:	c1 ef 1f             	shr    edi,0x1f
c0027cab:	89 ca                	mov    edx,ecx
c0027cad:	31 fa                	xor    edx,edi
c0027caf:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027cb2:	c1 e0 08             	shl    eax,0x8
c0027cb5:	89 c2                	mov    edx,eax
c0027cb7:	89 d8                	mov    eax,ebx
c0027cb9:	09 d0                	or     eax,edx
c0027cbb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027cc0:	09 f0                	or     eax,esi
c0027cc2:	75 08                	jne    c0027ccc <__cmpsf2+0x64>
c0027cc4:	31 c0                	xor    eax,eax
c0027cc6:	39 f9                	cmp    ecx,edi
c0027cc8:	75 0c                	jne    c0027cd6 <__cmpsf2+0x6e>
c0027cca:	eb 29                	jmp    c0027cf5 <__cmpsf2+0x8d>
c0027ccc:	b8 01 00 00 00       	mov    eax,0x1
c0027cd1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027cd4:	7f 1f                	jg     c0027cf5 <__cmpsf2+0x8d>
c0027cd6:	83 c8 ff             	or     eax,0xffffffff
c0027cd9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027cdc:	7c 17                	jl     c0027cf5 <__cmpsf2+0x8d>
c0027cde:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027ce4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027cea:	b8 01 00 00 00       	mov    eax,0x1
c0027cef:	39 d3                	cmp    ebx,edx
c0027cf1:	77 02                	ja     c0027cf5 <__cmpsf2+0x8d>
c0027cf3:	19 c0                	sbb    eax,eax
c0027cf5:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027cf8:	5b                   	pop    ebx
c0027cf9:	5e                   	pop    esi
c0027cfa:	5f                   	pop    edi
c0027cfb:	5d                   	pop    ebp
c0027cfc:	c3                   	ret    

c0027cfd <__eqsf2>:
c0027cfd:	55                   	push   ebp
c0027cfe:	89 e5                	mov    ebp,esp
c0027d00:	83 ec 24             	sub    esp,0x24
c0027d03:	6a 01                	push   0x1
c0027d05:	83 ec 0c             	sub    esp,0xc
c0027d08:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d0b:	e8 df 10 00 00       	call   c0028def <__extendsfdf2>
c0027d10:	83 c4 10             	add    esp,0x10
c0027d13:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d16:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d19:	52                   	push   edx
c0027d1a:	50                   	push   eax
c0027d1b:	50                   	push   eax
c0027d1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d1f:	e8 cb 10 00 00       	call   c0028def <__extendsfdf2>
c0027d24:	59                   	pop    ecx
c0027d25:	59                   	pop    ecx
c0027d26:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d29:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d2c:	52                   	push   edx
c0027d2d:	50                   	push   eax
c0027d2e:	e8 35 ff ff ff       	call   c0027c68 <__cmpsf2>
c0027d33:	83 c4 20             	add    esp,0x20
c0027d36:	c9                   	leave  
c0027d37:	c3                   	ret    

c0027d38 <__nesf2>:
c0027d38:	eb c3                	jmp    c0027cfd <__eqsf2>

c0027d3a <__gtsf2>:
c0027d3a:	55                   	push   ebp
c0027d3b:	89 e5                	mov    ebp,esp
c0027d3d:	83 ec 24             	sub    esp,0x24
c0027d40:	6a ff                	push   0xffffffff
c0027d42:	83 ec 0c             	sub    esp,0xc
c0027d45:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d48:	e8 a2 10 00 00       	call   c0028def <__extendsfdf2>
c0027d4d:	83 c4 10             	add    esp,0x10
c0027d50:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d53:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d56:	52                   	push   edx
c0027d57:	50                   	push   eax
c0027d58:	50                   	push   eax
c0027d59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d5c:	e8 8e 10 00 00       	call   c0028def <__extendsfdf2>
c0027d61:	59                   	pop    ecx
c0027d62:	59                   	pop    ecx
c0027d63:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d66:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d69:	52                   	push   edx
c0027d6a:	50                   	push   eax
c0027d6b:	e8 f8 fe ff ff       	call   c0027c68 <__cmpsf2>
c0027d70:	83 c4 20             	add    esp,0x20
c0027d73:	c9                   	leave  
c0027d74:	c3                   	ret    

c0027d75 <__gesf2>:
c0027d75:	eb c3                	jmp    c0027d3a <__gtsf2>

c0027d77 <__ltsf2>:
c0027d77:	eb 84                	jmp    c0027cfd <__eqsf2>

c0027d79 <__lesf2>:
c0027d79:	eb 82                	jmp    c0027cfd <__eqsf2>

c0027d7b <__adddf3>:
c0027d7b:	55                   	push   ebp
c0027d7c:	89 e5                	mov    ebp,esp
c0027d7e:	57                   	push   edi
c0027d7f:	56                   	push   esi
c0027d80:	53                   	push   ebx
c0027d81:	83 ec 24             	sub    esp,0x24
c0027d84:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027d87:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027d8a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027d8d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027d90:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027d93:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027d96:	89 c8                	mov    eax,ecx
c0027d98:	89 ce                	mov    esi,ecx
c0027d9a:	c1 fe 14             	sar    esi,0x14
c0027d9d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027da0:	89 fb                	mov    ebx,edi
c0027da2:	89 fa                	mov    edx,edi
c0027da4:	c1 e2 0b             	shl    edx,0xb
c0027da7:	c1 e0 0b             	shl    eax,0xb
c0027daa:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027daf:	c1 eb 15             	shr    ebx,0x15
c0027db2:	09 d8                	or     eax,ebx
c0027db4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027db7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027dba:	c1 fe 14             	sar    esi,0x14
c0027dbd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027dc0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027dc3:	89 f3                	mov    ebx,esi
c0027dc5:	c1 e3 0b             	shl    ebx,0xb
c0027dc8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027dcb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027dce:	c1 e3 0b             	shl    ebx,0xb
c0027dd1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027dd7:	c1 ee 15             	shr    esi,0x15
c0027dda:	09 f3                	or     ebx,esi
c0027ddc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027ddf:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027de2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027de5:	0f 88 5f 02 00 00    	js     c002804a <__adddf3+0x2cf>
c0027deb:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027dee:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027df1:	85 db                	test   ebx,ebx
c0027df3:	0f 8e c7 00 00 00    	jle    c0027ec0 <__adddf3+0x145>
c0027df9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027e00:	75 1a                	jne    c0027e1c <__adddf3+0xa1>
c0027e02:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027e05:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027e08:	0f 84 b2 05 00 00    	je     c00283c0 <__adddf3+0x645>
c0027e0e:	4b                   	dec    ebx
c0027e0f:	75 23                	jne    c0027e34 <__adddf3+0xb9>
c0027e11:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027e14:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027e17:	e9 99 00 00 00       	jmp    c0027eb5 <__adddf3+0x13a>
c0027e1c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027e1f:	f7 d6                	not    esi
c0027e21:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027e27:	0f 84 93 05 00 00    	je     c00283c0 <__adddf3+0x645>
c0027e2d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027e34:	83 fb 1f             	cmp    ebx,0x1f
c0027e37:	7e 42                	jle    c0027e7b <__adddf3+0x100>
c0027e39:	83 fb 3f             	cmp    ebx,0x3f
c0027e3c:	0f 8f 7e 05 00 00    	jg     c00283c0 <__adddf3+0x645>
c0027e42:	83 e3 1f             	and    ebx,0x1f
c0027e45:	89 d9                	mov    ecx,ebx
c0027e47:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027e4a:	d3 ef                	shr    edi,cl
c0027e4c:	31 db                	xor    ebx,ebx
c0027e4e:	85 c9                	test   ecx,ecx
c0027e50:	74 15                	je     c0027e67 <__adddf3+0xec>
c0027e52:	be 20 00 00 00       	mov    esi,0x20
c0027e57:	29 ce                	sub    esi,ecx
c0027e59:	89 f1                	mov    ecx,esi
c0027e5b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e5e:	d3 e6                	shl    esi,cl
c0027e60:	31 db                	xor    ebx,ebx
c0027e62:	85 f6                	test   esi,esi
c0027e64:	0f 95 c3             	setne  bl
c0027e67:	31 c9                	xor    ecx,ecx
c0027e69:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027e6d:	0f 95 c1             	setne  cl
c0027e70:	09 cf                	or     edi,ecx
c0027e72:	09 fb                	or     ebx,edi
c0027e74:	01 da                	add    edx,ebx
c0027e76:	83 d0 00             	adc    eax,0x0
c0027e79:	eb 3a                	jmp    c0027eb5 <__adddf3+0x13a>
c0027e7b:	bf 20 00 00 00       	mov    edi,0x20
c0027e80:	29 df                	sub    edi,ebx
c0027e82:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027e85:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e88:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027e8b:	d3 e6                	shl    esi,cl
c0027e8d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027e90:	88 d9                	mov    cl,bl
c0027e92:	d3 ef                	shr    edi,cl
c0027e94:	09 fe                	or     esi,edi
c0027e96:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027e99:	88 d9                	mov    cl,bl
c0027e9b:	d3 ef                	shr    edi,cl
c0027e9d:	89 fb                	mov    ebx,edi
c0027e9f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027ea2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027ea5:	d3 e7                	shl    edi,cl
c0027ea7:	85 ff                	test   edi,edi
c0027ea9:	0f 95 c1             	setne  cl
c0027eac:	0f b6 c9             	movzx  ecx,cl
c0027eaf:	09 ce                	or     esi,ecx
c0027eb1:	01 f2                	add    edx,esi
c0027eb3:	11 d8                	adc    eax,ebx
c0027eb5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027eb8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027ebb:	e9 52 01 00 00       	jmp    c0028012 <__adddf3+0x297>
c0027ec0:	0f 84 d5 00 00 00    	je     c0027f9b <__adddf3+0x220>
c0027ec6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027ec9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027ecc:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ecf:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ed2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027ed9:	75 20                	jne    c0027efb <__adddf3+0x180>
c0027edb:	89 d6                	mov    esi,edx
c0027edd:	09 c6                	or     esi,eax
c0027edf:	0f 84 db 04 00 00    	je     c00283c0 <__adddf3+0x645>
c0027ee5:	4b                   	dec    ebx
c0027ee6:	75 29                	jne    c0027f11 <__adddf3+0x196>
c0027ee8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027eeb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027eee:	01 d1                	add    ecx,edx
c0027ef0:	11 c6                	adc    esi,eax
c0027ef2:	89 f0                	mov    eax,esi
c0027ef4:	89 ca                	mov    edx,ecx
c0027ef6:	e9 17 01 00 00       	jmp    c0028012 <__adddf3+0x297>
c0027efb:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027efe:	f7 d6                	not    esi
c0027f00:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027f06:	0f 84 b4 04 00 00    	je     c00283c0 <__adddf3+0x645>
c0027f0c:	0d 00 00 00 80       	or     eax,0x80000000
c0027f11:	83 fb 1f             	cmp    ebx,0x1f
c0027f14:	7e 48                	jle    c0027f5e <__adddf3+0x1e3>
c0027f16:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027f19:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027f1c:	83 fb 3f             	cmp    ebx,0x3f
c0027f1f:	0f 8f 9b 04 00 00    	jg     c00283c0 <__adddf3+0x645>
c0027f25:	83 e3 1f             	and    ebx,0x1f
c0027f28:	89 d9                	mov    ecx,ebx
c0027f2a:	89 c7                	mov    edi,eax
c0027f2c:	d3 ef                	shr    edi,cl
c0027f2e:	31 db                	xor    ebx,ebx
c0027f30:	85 c9                	test   ecx,ecx
c0027f32:	74 12                	je     c0027f46 <__adddf3+0x1cb>
c0027f34:	be 20 00 00 00       	mov    esi,0x20
c0027f39:	29 ce                	sub    esi,ecx
c0027f3b:	89 f1                	mov    ecx,esi
c0027f3d:	d3 e0                	shl    eax,cl
c0027f3f:	31 db                	xor    ebx,ebx
c0027f41:	85 c0                	test   eax,eax
c0027f43:	0f 95 c3             	setne  bl
c0027f46:	31 c0                	xor    eax,eax
c0027f48:	85 d2                	test   edx,edx
c0027f4a:	0f 95 c0             	setne  al
c0027f4d:	09 c7                	or     edi,eax
c0027f4f:	09 fb                	or     ebx,edi
c0027f51:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f54:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f57:	01 da                	add    edx,ebx
c0027f59:	83 d6 00             	adc    esi,0x0
c0027f5c:	eb 39                	jmp    c0027f97 <__adddf3+0x21c>
c0027f5e:	be 20 00 00 00       	mov    esi,0x20
c0027f63:	29 de                	sub    esi,ebx
c0027f65:	89 c7                	mov    edi,eax
c0027f67:	89 f1                	mov    ecx,esi
c0027f69:	d3 e7                	shl    edi,cl
c0027f6b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027f6e:	89 d7                	mov    edi,edx
c0027f70:	88 d9                	mov    cl,bl
c0027f72:	d3 ef                	shr    edi,cl
c0027f74:	89 f9                	mov    ecx,edi
c0027f76:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f79:	09 cf                	or     edi,ecx
c0027f7b:	88 d9                	mov    cl,bl
c0027f7d:	d3 e8                	shr    eax,cl
c0027f7f:	89 f1                	mov    ecx,esi
c0027f81:	d3 e2                	shl    edx,cl
c0027f83:	85 d2                	test   edx,edx
c0027f85:	0f 95 c2             	setne  dl
c0027f88:	0f b6 d2             	movzx  edx,dl
c0027f8b:	09 d7                	or     edi,edx
c0027f8d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f90:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f93:	01 fa                	add    edx,edi
c0027f95:	11 c6                	adc    esi,eax
c0027f97:	89 f0                	mov    eax,esi
c0027f99:	eb 77                	jmp    c0028012 <__adddf3+0x297>
c0027f9b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027f9e:	46                   	inc    esi
c0027f9f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027fa2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027fa8:	75 41                	jne    c0027feb <__adddf3+0x270>
c0027faa:	89 d3                	mov    ebx,edx
c0027fac:	09 c3                	or     ebx,eax
c0027fae:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027fb5:	75 27                	jne    c0027fde <__adddf3+0x263>
c0027fb7:	85 db                	test   ebx,ebx
c0027fb9:	0f 84 fb 03 00 00    	je     c00283ba <__adddf3+0x63f>
c0027fbf:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027fc2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027fc5:	0f 84 f5 03 00 00    	je     c00283c0 <__adddf3+0x645>
c0027fcb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027fce:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027fd1:	85 c0                	test   eax,eax
c0027fd3:	0f 89 91 03 00 00    	jns    c002836a <__adddf3+0x5ef>
c0027fd9:	e9 85 03 00 00       	jmp    c0028363 <__adddf3+0x5e8>
c0027fde:	85 db                	test   ebx,ebx
c0027fe0:	0f 85 da 03 00 00    	jne    c00283c0 <__adddf3+0x645>
c0027fe6:	e9 cf 03 00 00       	jmp    c00283ba <__adddf3+0x63f>
c0027feb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027fee:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027ff1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027ff4:	f7 d1                	not    ecx
c0027ff6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027ffc:	0f 84 70 03 00 00    	je     c0028372 <__adddf3+0x5f7>
c0028002:	d1 ea                	shr    edx,1
c0028004:	89 c1                	mov    ecx,eax
c0028006:	c1 e1 1f             	shl    ecx,0x1f
c0028009:	09 ca                	or     edx,ecx
c002800b:	d1 e8                	shr    eax,1
c002800d:	e9 6f 03 00 00       	jmp    c0028381 <__adddf3+0x606>
c0028012:	85 c0                	test   eax,eax
c0028014:	0f 89 67 03 00 00    	jns    c0028381 <__adddf3+0x606>
c002801a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002801d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028020:	f7 d1                	not    ecx
c0028022:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0028028:	0f 84 44 03 00 00    	je     c0028372 <__adddf3+0x5f7>
c002802e:	89 d1                	mov    ecx,edx
c0028030:	d1 e9                	shr    ecx,1
c0028032:	83 e2 01             	and    edx,0x1
c0028035:	09 ca                	or     edx,ecx
c0028037:	89 c1                	mov    ecx,eax
c0028039:	c1 e1 1f             	shl    ecx,0x1f
c002803c:	09 ca                	or     edx,ecx
c002803e:	d1 e8                	shr    eax,1
c0028040:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0028045:	e9 37 03 00 00       	jmp    c0028381 <__adddf3+0x606>
c002804a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002804d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028053:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0028056:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028059:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002805f:	29 de                	sub    esi,ebx
c0028061:	85 f6                	test   esi,esi
c0028063:	0f 8e bd 00 00 00    	jle    c0028126 <__adddf3+0x3ab>
c0028069:	85 db                	test   ebx,ebx
c002806b:	75 17                	jne    c0028084 <__adddf3+0x309>
c002806d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028070:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028073:	0f 84 47 03 00 00    	je     c00283c0 <__adddf3+0x645>
c0028079:	4e                   	dec    esi
c002807a:	75 20                	jne    c002809c <__adddf3+0x321>
c002807c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002807f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0028082:	eb 5b                	jmp    c00280df <__adddf3+0x364>
c0028084:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028087:	f7 d3                	not    ebx
c0028089:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002808f:	0f 84 2b 03 00 00    	je     c00283c0 <__adddf3+0x645>
c0028095:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002809c:	83 fe 1f             	cmp    esi,0x1f
c002809f:	7e 49                	jle    c00280ea <__adddf3+0x36f>
c00280a1:	83 fe 3f             	cmp    esi,0x3f
c00280a4:	0f 8f 16 03 00 00    	jg     c00283c0 <__adddf3+0x645>
c00280aa:	83 e6 1f             	and    esi,0x1f
c00280ad:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00280b0:	89 f1                	mov    ecx,esi
c00280b2:	d3 ef                	shr    edi,cl
c00280b4:	31 db                	xor    ebx,ebx
c00280b6:	85 f6                	test   esi,esi
c00280b8:	74 13                	je     c00280cd <__adddf3+0x352>
c00280ba:	b9 20 00 00 00       	mov    ecx,0x20
c00280bf:	29 f1                	sub    ecx,esi
c00280c1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280c4:	d3 e6                	shl    esi,cl
c00280c6:	31 db                	xor    ebx,ebx
c00280c8:	85 f6                	test   esi,esi
c00280ca:	0f 95 c3             	setne  bl
c00280cd:	31 c9                	xor    ecx,ecx
c00280cf:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00280d3:	0f 95 c1             	setne  cl
c00280d6:	09 cf                	or     edi,ecx
c00280d8:	09 fb                	or     ebx,edi
c00280da:	29 da                	sub    edx,ebx
c00280dc:	83 d8 00             	sbb    eax,0x0
c00280df:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00280e2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280e5:	e9 aa 01 00 00       	jmp    c0028294 <__adddf3+0x519>
c00280ea:	bf 20 00 00 00       	mov    edi,0x20
c00280ef:	29 f7                	sub    edi,esi
c00280f1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280f4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280f7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00280fa:	d3 e3                	shl    ebx,cl
c00280fc:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00280ff:	89 f1                	mov    ecx,esi
c0028101:	d3 ef                	shr    edi,cl
c0028103:	09 fb                	or     ebx,edi
c0028105:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028108:	89 f1                	mov    ecx,esi
c002810a:	d3 ef                	shr    edi,cl
c002810c:	89 fe                	mov    esi,edi
c002810e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028111:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028114:	d3 e7                	shl    edi,cl
c0028116:	85 ff                	test   edi,edi
c0028118:	0f 95 c1             	setne  cl
c002811b:	0f b6 c9             	movzx  ecx,cl
c002811e:	09 cb                	or     ebx,ecx
c0028120:	29 da                	sub    edx,ebx
c0028122:	19 f0                	sbb    eax,esi
c0028124:	eb b9                	jmp    c00280df <__adddf3+0x364>
c0028126:	0f 84 cd 00 00 00    	je     c00281f9 <__adddf3+0x47e>
c002812c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002812f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028132:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028135:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028139:	75 1b                	jne    c0028156 <__adddf3+0x3db>
c002813b:	89 d6                	mov    esi,edx
c002813d:	09 c6                	or     esi,eax
c002813f:	0f 84 7b 02 00 00    	je     c00283c0 <__adddf3+0x645>
c0028145:	4b                   	dec    ebx
c0028146:	75 24                	jne    c002816c <__adddf3+0x3f1>
c0028148:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002814b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002814e:	29 d1                	sub    ecx,edx
c0028150:	19 c6                	sbb    esi,eax
c0028152:	89 ca                	mov    edx,ecx
c0028154:	eb 61                	jmp    c00281b7 <__adddf3+0x43c>
c0028156:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028159:	f7 d6                	not    esi
c002815b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028161:	0f 84 59 02 00 00    	je     c00283c0 <__adddf3+0x645>
c0028167:	0d 00 00 00 80       	or     eax,0x80000000
c002816c:	83 fb 1f             	cmp    ebx,0x1f
c002816f:	7e 4d                	jle    c00281be <__adddf3+0x443>
c0028171:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028174:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028177:	83 fb 3f             	cmp    ebx,0x3f
c002817a:	0f 8f 40 02 00 00    	jg     c00283c0 <__adddf3+0x645>
c0028180:	83 e3 1f             	and    ebx,0x1f
c0028183:	89 d9                	mov    ecx,ebx
c0028185:	89 c7                	mov    edi,eax
c0028187:	d3 ef                	shr    edi,cl
c0028189:	31 db                	xor    ebx,ebx
c002818b:	85 c9                	test   ecx,ecx
c002818d:	74 12                	je     c00281a1 <__adddf3+0x426>
c002818f:	be 20 00 00 00       	mov    esi,0x20
c0028194:	29 ce                	sub    esi,ecx
c0028196:	89 f1                	mov    ecx,esi
c0028198:	d3 e0                	shl    eax,cl
c002819a:	31 db                	xor    ebx,ebx
c002819c:	85 c0                	test   eax,eax
c002819e:	0f 95 c3             	setne  bl
c00281a1:	31 c0                	xor    eax,eax
c00281a3:	85 d2                	test   edx,edx
c00281a5:	0f 95 c0             	setne  al
c00281a8:	09 c7                	or     edi,eax
c00281aa:	09 fb                	or     ebx,edi
c00281ac:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281af:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00281b2:	29 da                	sub    edx,ebx
c00281b4:	83 de 00             	sbb    esi,0x0
c00281b7:	89 f0                	mov    eax,esi
c00281b9:	e9 d6 00 00 00       	jmp    c0028294 <__adddf3+0x519>
c00281be:	be 20 00 00 00       	mov    esi,0x20
c00281c3:	29 de                	sub    esi,ebx
c00281c5:	89 c7                	mov    edi,eax
c00281c7:	89 f1                	mov    ecx,esi
c00281c9:	d3 e7                	shl    edi,cl
c00281cb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00281ce:	89 d7                	mov    edi,edx
c00281d0:	88 d9                	mov    cl,bl
c00281d2:	d3 ef                	shr    edi,cl
c00281d4:	89 f9                	mov    ecx,edi
c00281d6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00281d9:	09 cf                	or     edi,ecx
c00281db:	88 d9                	mov    cl,bl
c00281dd:	d3 e8                	shr    eax,cl
c00281df:	89 f1                	mov    ecx,esi
c00281e1:	d3 e2                	shl    edx,cl
c00281e3:	85 d2                	test   edx,edx
c00281e5:	0f 95 c2             	setne  dl
c00281e8:	0f b6 d2             	movzx  edx,dl
c00281eb:	09 d7                	or     edi,edx
c00281ed:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281f0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00281f3:	29 fa                	sub    edx,edi
c00281f5:	19 c6                	sbb    esi,eax
c00281f7:	eb be                	jmp    c00281b7 <__adddf3+0x43c>
c00281f9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00281fc:	8d 5e 01             	lea    ebx,[esi+0x1]
c00281ff:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0028205:	75 6a                	jne    c0028271 <__adddf3+0x4f6>
c0028207:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002820b:	75 58                	jne    c0028265 <__adddf3+0x4ea>
c002820d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028210:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028213:	89 d6                	mov    esi,edx
c0028215:	09 c6                	or     esi,eax
c0028217:	75 17                	jne    c0028230 <__adddf3+0x4b5>
c0028219:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002821c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002821f:	85 db                	test   ebx,ebx
c0028221:	0f 85 99 01 00 00    	jne    c00283c0 <__adddf3+0x645>
c0028227:	31 ff                	xor    edi,edi
c0028229:	31 c9                	xor    ecx,ecx
c002822b:	e9 90 01 00 00       	jmp    c00283c0 <__adddf3+0x645>
c0028230:	85 db                	test   ebx,ebx
c0028232:	0f 84 88 01 00 00    	je     c00283c0 <__adddf3+0x645>
c0028238:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002823b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002823e:	85 c0                	test   eax,eax
c0028240:	79 10                	jns    c0028252 <__adddf3+0x4d7>
c0028242:	31 c9                	xor    ecx,ecx
c0028244:	f7 da                	neg    edx
c0028246:	0f 95 c1             	setne  cl
c0028249:	01 c8                	add    eax,ecx
c002824b:	f7 d8                	neg    eax
c002824d:	e9 2f 01 00 00       	jmp    c0028381 <__adddf3+0x606>
c0028252:	31 ff                	xor    edi,edi
c0028254:	31 c9                	xor    ecx,ecx
c0028256:	89 c3                	mov    ebx,eax
c0028258:	09 d3                	or     ebx,edx
c002825a:	0f 84 60 01 00 00    	je     c00283c0 <__adddf3+0x645>
c0028260:	e9 05 01 00 00       	jmp    c002836a <__adddf3+0x5ef>
c0028265:	31 ff                	xor    edi,edi
c0028267:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002826c:	e9 4f 01 00 00       	jmp    c00283c0 <__adddf3+0x645>
c0028271:	89 c1                	mov    ecx,eax
c0028273:	89 d0                	mov    eax,edx
c0028275:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0028278:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002827b:	89 ca                	mov    edx,ecx
c002827d:	85 c9                	test   ecx,ecx
c002827f:	79 2c                	jns    c00282ad <__adddf3+0x532>
c0028281:	31 c9                	xor    ecx,ecx
c0028283:	f7 d8                	neg    eax
c0028285:	0f 95 c1             	setne  cl
c0028288:	01 ca                	add    edx,ecx
c002828a:	f7 da                	neg    edx
c002828c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002828f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0028292:	eb 19                	jmp    c00282ad <__adddf3+0x532>
c0028294:	85 c0                	test   eax,eax
c0028296:	0f 89 e5 00 00 00    	jns    c0028381 <__adddf3+0x606>
c002829c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00282a1:	89 c1                	mov    ecx,eax
c00282a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00282a6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00282a9:	89 d0                	mov    eax,edx
c00282ab:	89 ca                	mov    edx,ecx
c00282ad:	85 d2                	test   edx,edx
c00282af:	74 59                	je     c002830a <__adddf3+0x58f>
c00282b1:	0f bd da             	bsr    ebx,edx
c00282b4:	83 f3 1f             	xor    ebx,0x1f
c00282b7:	88 d9                	mov    cl,bl
c00282b9:	d3 e2                	shl    edx,cl
c00282bb:	bf 20 00 00 00       	mov    edi,0x20
c00282c0:	89 f9                	mov    ecx,edi
c00282c2:	29 d9                	sub    ecx,ebx
c00282c4:	89 c6                	mov    esi,eax
c00282c6:	d3 ee                	shr    esi,cl
c00282c8:	09 d6                	or     esi,edx
c00282ca:	88 d9                	mov    cl,bl
c00282cc:	d3 e0                	shl    eax,cl
c00282ce:	89 c2                	mov    edx,eax
c00282d0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00282d3:	25 ff 07 00 00       	and    eax,0x7ff
c00282d8:	39 d8                	cmp    eax,ebx
c00282da:	7f 22                	jg     c00282fe <__adddf3+0x583>
c00282dc:	29 c3                	sub    ebx,eax
c00282de:	43                   	inc    ebx
c00282df:	88 d9                	mov    cl,bl
c00282e1:	d3 ea                	shr    edx,cl
c00282e3:	29 df                	sub    edi,ebx
c00282e5:	89 f9                	mov    ecx,edi
c00282e7:	89 f0                	mov    eax,esi
c00282e9:	d3 e0                	shl    eax,cl
c00282eb:	09 c2                	or     edx,eax
c00282ed:	89 f0                	mov    eax,esi
c00282ef:	88 d9                	mov    cl,bl
c00282f1:	d3 e8                	shr    eax,cl
c00282f3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00282f6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00282fc:	eb 6f                	jmp    c002836d <__adddf3+0x5f2>
c00282fe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028301:	29 d8                	sub    eax,ebx
c0028303:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028306:	89 f0                	mov    eax,esi
c0028308:	eb 59                	jmp    c0028363 <__adddf3+0x5e8>
c002830a:	85 c0                	test   eax,eax
c002830c:	74 6a                	je     c0028378 <__adddf3+0x5fd>
c002830e:	0f bd c8             	bsr    ecx,eax
c0028311:	83 f1 1f             	xor    ecx,0x1f
c0028314:	d3 e0                	shl    eax,cl
c0028316:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028319:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002831f:	83 c1 20             	add    ecx,0x20
c0028322:	39 cb                	cmp    ebx,ecx
c0028324:	7f 35                	jg     c002835b <__adddf3+0x5e0>
c0028326:	29 d9                	sub    ecx,ebx
c0028328:	8d 71 01             	lea    esi,[ecx+0x1]
c002832b:	83 fe 1f             	cmp    esi,0x1f
c002832e:	7e 09                	jle    c0028339 <__adddf3+0x5be>
c0028330:	83 e9 1f             	sub    ecx,0x1f
c0028333:	d3 e8                	shr    eax,cl
c0028335:	89 c3                	mov    ebx,eax
c0028337:	eb 11                	jmp    c002834a <__adddf3+0x5cf>
c0028339:	b9 20 00 00 00       	mov    ecx,0x20
c002833e:	29 f1                	sub    ecx,esi
c0028340:	89 c3                	mov    ebx,eax
c0028342:	d3 e3                	shl    ebx,cl
c0028344:	89 f1                	mov    ecx,esi
c0028346:	d3 e8                	shr    eax,cl
c0028348:	89 c2                	mov    edx,eax
c002834a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002834d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028352:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028355:	89 d0                	mov    eax,edx
c0028357:	89 da                	mov    edx,ebx
c0028359:	eb 26                	jmp    c0028381 <__adddf3+0x606>
c002835b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002835e:	29 cf                	sub    edi,ecx
c0028360:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028363:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028368:	eb 17                	jmp    c0028381 <__adddf3+0x606>
c002836a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002836d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028370:	eb 0f                	jmp    c0028381 <__adddf3+0x606>
c0028372:	31 d2                	xor    edx,edx
c0028374:	31 c0                	xor    eax,eax
c0028376:	eb 09                	jmp    c0028381 <__adddf3+0x606>
c0028378:	89 c2                	mov    edx,eax
c002837a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0028381:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028384:	c1 e1 14             	shl    ecx,0x14
c0028387:	89 c3                	mov    ebx,eax
c0028389:	c1 eb 0b             	shr    ebx,0xb
c002838c:	09 d9                	or     ecx,ebx
c002838e:	89 d3                	mov    ebx,edx
c0028390:	c1 eb 0b             	shr    ebx,0xb
c0028393:	c1 e0 15             	shl    eax,0x15
c0028396:	09 d8                	or     eax,ebx
c0028398:	89 c7                	mov    edi,eax
c002839a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00283a0:	0f 95 c0             	setne  al
c00283a3:	89 c6                	mov    esi,eax
c00283a5:	09 f3                	or     ebx,esi
c00283a7:	83 e3 01             	and    ebx,0x1
c00283aa:	c1 ea 0a             	shr    edx,0xa
c00283ad:	21 da                	and    edx,ebx
c00283af:	89 f8                	mov    eax,edi
c00283b1:	01 d0                	add    eax,edx
c00283b3:	83 d1 00             	adc    ecx,0x0
c00283b6:	89 c7                	mov    edi,eax
c00283b8:	eb 06                	jmp    c00283c0 <__adddf3+0x645>
c00283ba:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00283bd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00283c0:	89 f8                	mov    eax,edi
c00283c2:	89 ca                	mov    edx,ecx
c00283c4:	83 c4 24             	add    esp,0x24
c00283c7:	5b                   	pop    ebx
c00283c8:	5e                   	pop    esi
c00283c9:	5f                   	pop    edi
c00283ca:	5d                   	pop    ebp
c00283cb:	c3                   	ret    

c00283cc <__subdf3>:
c00283cc:	55                   	push   ebp
c00283cd:	89 e5                	mov    ebp,esp
c00283cf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00283d2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00283d5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00283db:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00283de:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00283e1:	5d                   	pop    ebp
c00283e2:	e9 94 f9 ff ff       	jmp    c0027d7b <__adddf3>

c00283e7 <__negdf2>:
c00283e7:	55                   	push   ebp
c00283e8:	89 e5                	mov    ebp,esp
c00283ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00283ed:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00283f0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00283f6:	5d                   	pop    ebp
c00283f7:	c3                   	ret    

c00283f8 <__muldf3>:
c00283f8:	55                   	push   ebp
c00283f9:	89 e5                	mov    ebp,esp
c00283fb:	57                   	push   edi
c00283fc:	56                   	push   esi
c00283fd:	53                   	push   ebx
c00283fe:	83 ec 24             	sub    esp,0x24
c0028401:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028404:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0028407:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002840a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002840d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028410:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0028413:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028416:	89 c8                	mov    eax,ecx
c0028418:	c1 f8 14             	sar    eax,0x14
c002841b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002841e:	89 f8                	mov    eax,edi
c0028420:	89 fb                	mov    ebx,edi
c0028422:	c1 e3 0b             	shl    ebx,0xb
c0028425:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0028428:	c1 e1 0b             	shl    ecx,0xb
c002842b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028431:	c1 e8 15             	shr    eax,0x15
c0028434:	09 c1                	or     ecx,eax
c0028436:	89 d6                	mov    esi,edx
c0028438:	89 d0                	mov    eax,edx
c002843a:	c1 f8 14             	sar    eax,0x14
c002843d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0028440:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0028443:	89 c3                	mov    ebx,eax
c0028445:	c1 e3 0b             	shl    ebx,0xb
c0028448:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002844b:	c1 e6 0b             	shl    esi,0xb
c002844e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028454:	c1 e8 15             	shr    eax,0x15
c0028457:	09 c6                	or     esi,eax
c0028459:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002845c:	25 ff 07 00 00       	and    eax,0x7ff
c0028461:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028464:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028467:	25 ff 07 00 00       	and    eax,0x7ff
c002846c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002846f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028472:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028475:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002847c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002847f:	40                   	inc    eax
c0028480:	a9 fe 07 00 00       	test   eax,0x7fe
c0028485:	0f 85 8d 00 00 00    	jne    c0028518 <__muldf3+0x120>
c002848b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002848e:	09 c8                	or     eax,ecx
c0028490:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028494:	74 44                	je     c00284da <__muldf3+0xe2>
c0028496:	85 c0                	test   eax,eax
c0028498:	0f 85 31 02 00 00    	jne    c00286cf <__muldf3+0x2d7>
c002849e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00284a1:	40                   	inc    eax
c00284a2:	a9 fe 07 00 00       	test   eax,0x7fe
c00284a7:	75 13                	jne    c00284bc <__muldf3+0xc4>
c00284a9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00284ac:	09 f1                	or     ecx,esi
c00284ae:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00284b2:	74 22                	je     c00284d6 <__muldf3+0xde>
c00284b4:	85 c9                	test   ecx,ecx
c00284b6:	0f 85 0d 02 00 00    	jne    c00286c9 <__muldf3+0x2d1>
c00284bc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00284c0:	0f 89 09 02 00 00    	jns    c00286cf <__muldf3+0x2d7>
c00284c6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00284c9:	05 00 00 00 80       	add    eax,0x80000000
c00284ce:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00284d1:	e9 f9 01 00 00       	jmp    c00286cf <__muldf3+0x2d7>
c00284d6:	85 c9                	test   ecx,ecx
c00284d8:	eb 2e                	jmp    c0028508 <__muldf3+0x110>
c00284da:	85 c0                	test   eax,eax
c00284dc:	74 20                	je     c00284fe <__muldf3+0x106>
c00284de:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00284e1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00284e4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00284e7:	c1 ef 1f             	shr    edi,0x1f
c00284ea:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00284ed:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00284f0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00284f3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00284f6:	09 f9                	or     ecx,edi
c00284f8:	78 1e                	js     c0028518 <__muldf3+0x120>
c00284fa:	89 c3                	mov    ebx,eax
c00284fc:	eb e0                	jmp    c00284de <__muldf3+0xe6>
c00284fe:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028501:	f7 d0                	not    eax
c0028503:	a9 ff 07 00 00       	test   eax,0x7ff
c0028508:	75 b2                	jne    c00284bc <__muldf3+0xc4>
c002850a:	31 ff                	xor    edi,edi
c002850c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0028513:	e9 b7 01 00 00       	jmp    c00286cf <__muldf3+0x2d7>
c0028518:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002851b:	40                   	inc    eax
c002851c:	a9 fe 07 00 00       	test   eax,0x7fe
c0028521:	75 57                	jne    c002857a <__muldf3+0x182>
c0028523:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0028526:	09 f0                	or     eax,esi
c0028528:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002852c:	74 23                	je     c0028551 <__muldf3+0x159>
c002852e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028532:	0f 89 91 01 00 00    	jns    c00286c9 <__muldf3+0x2d1>
c0028538:	85 c0                	test   eax,eax
c002853a:	0f 85 89 01 00 00    	jne    c00286c9 <__muldf3+0x2d1>
c0028540:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028543:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028549:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002854c:	e9 7e 01 00 00       	jmp    c00286cf <__muldf3+0x2d7>
c0028551:	85 c0                	test   eax,eax
c0028553:	75 0c                	jne    c0028561 <__muldf3+0x169>
c0028555:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028559:	0f 89 6a 01 00 00    	jns    c00286c9 <__muldf3+0x2d1>
c002855f:	eb df                	jmp    c0028540 <__muldf3+0x148>
c0028561:	01 f6                	add    esi,esi
c0028563:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028566:	c1 ea 1f             	shr    edx,0x1f
c0028569:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002856c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002856f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028572:	09 d6                	or     esi,edx
c0028574:	78 04                	js     c002857a <__muldf3+0x182>
c0028576:	89 c3                	mov    ebx,eax
c0028578:	eb e7                	jmp    c0028561 <__muldf3+0x169>
c002857a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028580:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028586:	89 c8                	mov    eax,ecx
c0028588:	f7 e6                	mul    esi
c002858a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002858d:	89 c7                	mov    edi,eax
c002858f:	89 c8                	mov    eax,ecx
c0028591:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028594:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028597:	89 c1                	mov    ecx,eax
c0028599:	89 f0                	mov    eax,esi
c002859b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002859e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00285a1:	89 c6                	mov    esi,eax
c00285a3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00285a6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00285a9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00285ac:	31 c0                	xor    eax,eax
c00285ae:	01 f1                	add    ecx,esi
c00285b0:	0f 92 c0             	setb   al
c00285b3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00285b6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00285b9:	83 d6 00             	adc    esi,0x0
c00285bc:	01 c7                	add    edi,eax
c00285be:	83 d6 00             	adc    esi,0x0
c00285c1:	01 ca                	add    edx,ecx
c00285c3:	0f 92 c1             	setb   cl
c00285c6:	0f b6 c9             	movzx  ecx,cl
c00285c9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00285cc:	83 d6 00             	adc    esi,0x0
c00285cf:	01 cf                	add    edi,ecx
c00285d1:	83 d6 00             	adc    esi,0x0
c00285d4:	31 c9                	xor    ecx,ecx
c00285d6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00285d9:	0f 95 c1             	setne  cl
c00285dc:	09 cf                	or     edi,ecx
c00285de:	85 f6                	test   esi,esi
c00285e0:	78 0c                	js     c00285ee <__muldf3+0x1f6>
c00285e2:	01 f6                	add    esi,esi
c00285e4:	89 f8                	mov    eax,edi
c00285e6:	c1 e8 1f             	shr    eax,0x1f
c00285e9:	09 c6                	or     esi,eax
c00285eb:	01 ff                	add    edi,edi
c00285ed:	4b                   	dec    ebx
c00285ee:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00285f4:	0f 8f 85 00 00 00    	jg     c002867f <__muldf3+0x287>
c00285fa:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0028600:	85 db                	test   ebx,ebx
c0028602:	0f 8f 84 00 00 00    	jg     c002868c <__muldf3+0x294>
c0028608:	83 fb cc             	cmp    ebx,0xffffffcc
c002860b:	7c 79                	jl     c0028686 <__muldf3+0x28e>
c002860d:	ba 01 00 00 00       	mov    edx,0x1
c0028612:	29 da                	sub    edx,ebx
c0028614:	81 ce 00 00 00 80    	or     esi,0x80000000
c002861a:	83 fa 1f             	cmp    edx,0x1f
c002861d:	7e 30                	jle    c002864f <__muldf3+0x257>
c002861f:	83 fa 20             	cmp    edx,0x20
c0028622:	75 0b                	jne    c002862f <__muldf3+0x237>
c0028624:	31 c0                	xor    eax,eax
c0028626:	85 ff                	test   edi,edi
c0028628:	0f 95 c0             	setne  al
c002862b:	89 c7                	mov    edi,eax
c002862d:	eb 1a                	jmp    c0028649 <__muldf3+0x251>
c002862f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028632:	89 f0                	mov    eax,esi
c0028634:	d3 e0                	shl    eax,cl
c0028636:	09 f8                	or     eax,edi
c0028638:	0f 95 c0             	setne  al
c002863b:	0f b6 c0             	movzx  eax,al
c002863e:	89 c7                	mov    edi,eax
c0028640:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028645:	29 d9                	sub    ecx,ebx
c0028647:	d3 ee                	shr    esi,cl
c0028649:	09 f7                	or     edi,esi
c002864b:	31 db                	xor    ebx,ebx
c002864d:	eb 3b                	jmp    c002868a <__muldf3+0x292>
c002864f:	83 c3 1f             	add    ebx,0x1f
c0028652:	89 f0                	mov    eax,esi
c0028654:	88 d9                	mov    cl,bl
c0028656:	d3 e0                	shl    eax,cl
c0028658:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002865b:	89 f8                	mov    eax,edi
c002865d:	88 d1                	mov    cl,dl
c002865f:	d3 e8                	shr    eax,cl
c0028661:	89 c1                	mov    ecx,eax
c0028663:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028666:	09 c8                	or     eax,ecx
c0028668:	88 d9                	mov    cl,bl
c002866a:	d3 e7                	shl    edi,cl
c002866c:	31 db                	xor    ebx,ebx
c002866e:	85 ff                	test   edi,edi
c0028670:	0f 95 c3             	setne  bl
c0028673:	89 df                	mov    edi,ebx
c0028675:	09 c7                	or     edi,eax
c0028677:	88 d1                	mov    cl,dl
c0028679:	d3 ee                	shr    esi,cl
c002867b:	31 db                	xor    ebx,ebx
c002867d:	eb 0d                	jmp    c002868c <__muldf3+0x294>
c002867f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028684:	eb 02                	jmp    c0028688 <__muldf3+0x290>
c0028686:	31 db                	xor    ebx,ebx
c0028688:	31 ff                	xor    edi,edi
c002868a:	31 f6                	xor    esi,esi
c002868c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002868f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028692:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028697:	09 c3                	or     ebx,eax
c0028699:	c1 e3 14             	shl    ebx,0x14
c002869c:	89 f0                	mov    eax,esi
c002869e:	c1 e8 0b             	shr    eax,0xb
c00286a1:	09 c3                	or     ebx,eax
c00286a3:	89 f8                	mov    eax,edi
c00286a5:	c1 e8 0b             	shr    eax,0xb
c00286a8:	c1 e6 15             	shl    esi,0x15
c00286ab:	09 c6                	or     esi,eax
c00286ad:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00286b3:	0f 95 c1             	setne  cl
c00286b6:	09 c8                	or     eax,ecx
c00286b8:	83 e0 01             	and    eax,0x1
c00286bb:	c1 ef 0a             	shr    edi,0xa
c00286be:	21 c7                	and    edi,eax
c00286c0:	01 f7                	add    edi,esi
c00286c2:	83 d3 00             	adc    ebx,0x0
c00286c5:	89 da                	mov    edx,ebx
c00286c7:	eb 03                	jmp    c00286cc <__muldf3+0x2d4>
c00286c9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00286cc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00286cf:	89 f8                	mov    eax,edi
c00286d1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00286d4:	83 c4 24             	add    esp,0x24
c00286d7:	5b                   	pop    ebx
c00286d8:	5e                   	pop    esi
c00286d9:	5f                   	pop    edi
c00286da:	5d                   	pop    ebp
c00286db:	c3                   	ret    

c00286dc <__divdf3>:
c00286dc:	55                   	push   ebp
c00286dd:	89 e5                	mov    ebp,esp
c00286df:	57                   	push   edi
c00286e0:	56                   	push   esi
c00286e1:	53                   	push   ebx
c00286e2:	83 ec 2c             	sub    esp,0x2c
c00286e5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00286e8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00286eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00286ee:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00286f1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00286f4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00286f7:	89 ce                	mov    esi,ecx
c00286f9:	89 c8                	mov    eax,ecx
c00286fb:	c1 f8 14             	sar    eax,0x14
c00286fe:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028701:	89 f8                	mov    eax,edi
c0028703:	89 fb                	mov    ebx,edi
c0028705:	c1 e3 0b             	shl    ebx,0xb
c0028708:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002870b:	c1 e6 0b             	shl    esi,0xb
c002870e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028714:	c1 e8 15             	shr    eax,0x15
c0028717:	09 c6                	or     esi,eax
c0028719:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c002871c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002871f:	89 c2                	mov    edx,eax
c0028721:	c1 fa 14             	sar    edx,0x14
c0028724:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028727:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002872a:	89 de                	mov    esi,ebx
c002872c:	c1 e6 0b             	shl    esi,0xb
c002872f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028732:	c1 e0 0b             	shl    eax,0xb
c0028735:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002873a:	c1 eb 15             	shr    ebx,0x15
c002873d:	09 d8                	or     eax,ebx
c002873f:	89 c2                	mov    edx,eax
c0028741:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028744:	25 ff 07 00 00       	and    eax,0x7ff
c0028749:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002874c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002874f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028755:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028758:	29 d8                	sub    eax,ebx
c002875a:	05 ff 03 00 00       	add    eax,0x3ff
c002875f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028762:	46                   	inc    esi
c0028763:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028769:	0f 85 a5 00 00 00    	jne    c0028814 <__divdf3+0x138>
c002876f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028772:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028775:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028779:	74 2a                	je     c00287a5 <__divdf3+0xc9>
c002877b:	85 f6                	test   esi,esi
c002877d:	0f 85 cc 02 00 00    	jne    c0028a4f <__divdf3+0x373>
c0028783:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028786:	40                   	inc    eax
c0028787:	a9 fe 07 00 00       	test   eax,0x7fe
c002878c:	75 26                	jne    c00287b4 <__divdf3+0xd8>
c002878e:	85 db                	test   ebx,ebx
c0028790:	74 22                	je     c00287b4 <__divdf3+0xd8>
c0028792:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028795:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028798:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002879b:	09 d0                	or     eax,edx
c002879d:	0f 85 ac 02 00 00    	jne    c0028a4f <__divdf3+0x373>
c00287a3:	eb 63                	jmp    c0028808 <__divdf3+0x12c>
c00287a5:	85 f6                	test   esi,esi
c00287a7:	75 22                	jne    c00287cb <__divdf3+0xef>
c00287a9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00287ac:	40                   	inc    eax
c00287ad:	a9 fe 07 00 00       	test   eax,0x7fe
c00287b2:	74 36                	je     c00287ea <__divdf3+0x10e>
c00287b4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00287b8:	0f 89 91 02 00 00    	jns    c0028a4f <__divdf3+0x373>
c00287be:	89 f8                	mov    eax,edi
c00287c0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00287c6:	e9 80 02 00 00       	jmp    c0028a4b <__divdf3+0x36f>
c00287cb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00287ce:	01 f6                	add    esi,esi
c00287d0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00287d3:	c1 ef 1f             	shr    edi,0x1f
c00287d6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00287d9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00287dc:	8d 48 ff             	lea    ecx,[eax-0x1]
c00287df:	09 f7                	or     edi,esi
c00287e1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00287e4:	78 2e                	js     c0028814 <__divdf3+0x138>
c00287e6:	89 c8                	mov    eax,ecx
c00287e8:	eb e1                	jmp    c00287cb <__divdf3+0xef>
c00287ea:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00287ed:	09 d0                	or     eax,edx
c00287ef:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00287f3:	74 0f                	je     c0028804 <__divdf3+0x128>
c00287f5:	85 c0                	test   eax,eax
c00287f7:	74 bb                	je     c00287b4 <__divdf3+0xd8>
c00287f9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00287fc:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00287ff:	e9 4b 02 00 00       	jmp    c0028a4f <__divdf3+0x373>
c0028804:	85 c0                	test   eax,eax
c0028806:	75 ac                	jne    c00287b4 <__divdf3+0xd8>
c0028808:	31 ff                	xor    edi,edi
c002880a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002880f:	e9 3b 02 00 00       	jmp    c0028a4f <__divdf3+0x373>
c0028814:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028817:	8d 4f 01             	lea    ecx,[edi+0x1]
c002881a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028820:	75 6b                	jne    c002888d <__divdf3+0x1b1>
c0028822:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028825:	09 d6                	or     esi,edx
c0028827:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002882b:	74 28                	je     c0028855 <__divdf3+0x179>
c002882d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028830:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028833:	85 f6                	test   esi,esi
c0028835:	0f 85 14 02 00 00    	jne    c0028a4f <__divdf3+0x373>
c002883b:	31 ff                	xor    edi,edi
c002883d:	31 c9                	xor    ecx,ecx
c002883f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028842:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028845:	0f 89 04 02 00 00    	jns    c0028a4f <__divdf3+0x373>
c002884b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028850:	e9 fa 01 00 00       	jmp    c0028a4f <__divdf3+0x373>
c0028855:	85 f6                	test   esi,esi
c0028857:	75 1b                	jne    c0028874 <__divdf3+0x198>
c0028859:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002885c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002885f:	25 00 00 00 80       	and    eax,0x80000000
c0028864:	31 c9                	xor    ecx,ecx
c0028866:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002886b:	89 cf                	mov    edi,ecx
c002886d:	89 c1                	mov    ecx,eax
c002886f:	e9 db 01 00 00       	jmp    c0028a4f <__divdf3+0x373>
c0028874:	01 d2                	add    edx,edx
c0028876:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028879:	c1 eb 1f             	shr    ebx,0x1f
c002887c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002887f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028882:	8d 48 01             	lea    ecx,[eax+0x1]
c0028885:	09 da                	or     edx,ebx
c0028887:	78 04                	js     c002888d <__divdf3+0x1b1>
c0028889:	89 c8                	mov    eax,ecx
c002888b:	eb e7                	jmp    c0028874 <__divdf3+0x198>
c002888d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028890:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028896:	81 ca 00 00 00 80    	or     edx,0x80000000
c002889c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002889f:	39 d6                	cmp    esi,edx
c00288a1:	77 0d                	ja     c00288b0 <__divdf3+0x1d4>
c00288a3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00288a6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c00288a9:	72 1b                	jb     c00288c6 <__divdf3+0x1ea>
c00288ab:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c00288ae:	75 16                	jne    c00288c6 <__divdf3+0x1ea>
c00288b0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00288b3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00288b6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c00288b9:	83 de 00             	sbb    esi,0x0
c00288bc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c00288bf:	ba 01 00 00 00       	mov    edx,0x1
c00288c4:	eb 02                	jmp    c00288c8 <__divdf3+0x1ec>
c00288c6:	31 d2                	xor    edx,edx
c00288c8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c00288cf:	31 ff                	xor    edi,edi
c00288d1:	01 ff                	add    edi,edi
c00288d3:	89 d1                	mov    ecx,edx
c00288d5:	c1 e9 1f             	shr    ecx,0x1f
c00288d8:	09 cf                	or     edi,ecx
c00288da:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00288dd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00288e0:	89 da                	mov    edx,ebx
c00288e2:	89 f3                	mov    ebx,esi
c00288e4:	8d 34 36             	lea    esi,[esi+esi*1]
c00288e7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00288ea:	c1 e9 1f             	shr    ecx,0x1f
c00288ed:	09 ce                	or     esi,ecx
c00288ef:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00288f2:	01 c9                	add    ecx,ecx
c00288f4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00288f7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00288fa:	85 db                	test   ebx,ebx
c00288fc:	78 29                	js     c0028927 <__divdf3+0x24b>
c00288fe:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028901:	72 07                	jb     c002890a <__divdf3+0x22e>
c0028903:	75 3c                	jne    c0028941 <__divdf3+0x265>
c0028905:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028908:	77 37                	ja     c0028941 <__divdf3+0x265>
c002890a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002890d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028910:	31 d2                	xor    edx,edx
c0028912:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028915:	0f 97 c2             	seta   dl
c0028918:	29 d6                	sub    esi,edx
c002891a:	89 d9                	mov    ecx,ebx
c002891c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c002891f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028922:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028925:	eb 17                	jmp    c002893e <__divdf3+0x262>
c0028927:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002892a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002892d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028930:	0f 97 c1             	seta   cl
c0028933:	0f b6 c9             	movzx  ecx,cl
c0028936:	29 ce                	sub    esi,ecx
c0028938:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c002893b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c002893e:	83 ca 01             	or     edx,0x1
c0028941:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028944:	75 8b                	jne    c00288d1 <__divdf3+0x1f5>
c0028946:	c1 e7 09             	shl    edi,0x9
c0028949:	89 d1                	mov    ecx,edx
c002894b:	c1 e9 17             	shr    ecx,0x17
c002894e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028951:	09 f3                	or     ebx,esi
c0028953:	0f 95 c3             	setne  bl
c0028956:	0f b6 db             	movzx  ebx,bl
c0028959:	c1 e2 09             	shl    edx,0x9
c002895c:	09 d3                	or     ebx,edx
c002895e:	89 ca                	mov    edx,ecx
c0028960:	09 fa                	or     edx,edi
c0028962:	78 0c                	js     c0028970 <__divdf3+0x294>
c0028964:	01 d2                	add    edx,edx
c0028966:	89 d9                	mov    ecx,ebx
c0028968:	c1 e9 1f             	shr    ecx,0x1f
c002896b:	09 ca                	or     edx,ecx
c002896d:	01 db                	add    ebx,ebx
c002896f:	48                   	dec    eax
c0028970:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028975:	0f 8f 83 00 00 00    	jg     c00289fe <__divdf3+0x322>
c002897b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028981:	85 c0                	test   eax,eax
c0028983:	0f 8f 82 00 00 00    	jg     c0028a0b <__divdf3+0x32f>
c0028989:	83 f8 cc             	cmp    eax,0xffffffcc
c002898c:	7c 77                	jl     c0028a05 <__divdf3+0x329>
c002898e:	be 01 00 00 00       	mov    esi,0x1
c0028993:	29 c6                	sub    esi,eax
c0028995:	81 ca 00 00 00 80    	or     edx,0x80000000
c002899b:	83 fe 1f             	cmp    esi,0x1f
c002899e:	7e 2f                	jle    c00289cf <__divdf3+0x2f3>
c00289a0:	83 fe 20             	cmp    esi,0x20
c00289a3:	75 0a                	jne    c00289af <__divdf3+0x2d3>
c00289a5:	85 db                	test   ebx,ebx
c00289a7:	0f 95 c3             	setne  bl
c00289aa:	0f b6 db             	movzx  ebx,bl
c00289ad:	eb 1a                	jmp    c00289c9 <__divdf3+0x2ed>
c00289af:	8d 48 3f             	lea    ecx,[eax+0x3f]
c00289b2:	89 d7                	mov    edi,edx
c00289b4:	d3 e7                	shl    edi,cl
c00289b6:	89 f9                	mov    ecx,edi
c00289b8:	09 d9                	or     ecx,ebx
c00289ba:	0f 95 c3             	setne  bl
c00289bd:	0f b6 db             	movzx  ebx,bl
c00289c0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00289c5:	29 c1                	sub    ecx,eax
c00289c7:	d3 ea                	shr    edx,cl
c00289c9:	09 d3                	or     ebx,edx
c00289cb:	31 c0                	xor    eax,eax
c00289cd:	eb 3a                	jmp    c0028a09 <__divdf3+0x32d>
c00289cf:	83 c0 1f             	add    eax,0x1f
c00289d2:	89 d7                	mov    edi,edx
c00289d4:	88 c1                	mov    cl,al
c00289d6:	d3 e7                	shl    edi,cl
c00289d8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00289db:	89 df                	mov    edi,ebx
c00289dd:	89 f1                	mov    ecx,esi
c00289df:	d3 ef                	shr    edi,cl
c00289e1:	89 f9                	mov    ecx,edi
c00289e3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00289e6:	09 cf                	or     edi,ecx
c00289e8:	88 c1                	mov    cl,al
c00289ea:	d3 e3                	shl    ebx,cl
c00289ec:	85 db                	test   ebx,ebx
c00289ee:	0f 95 c3             	setne  bl
c00289f1:	0f b6 db             	movzx  ebx,bl
c00289f4:	09 fb                	or     ebx,edi
c00289f6:	89 f1                	mov    ecx,esi
c00289f8:	d3 ea                	shr    edx,cl
c00289fa:	31 c0                	xor    eax,eax
c00289fc:	eb 0d                	jmp    c0028a0b <__divdf3+0x32f>
c00289fe:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028a03:	eb 02                	jmp    c0028a07 <__divdf3+0x32b>
c0028a05:	31 c0                	xor    eax,eax
c0028a07:	31 db                	xor    ebx,ebx
c0028a09:	31 d2                	xor    edx,edx
c0028a0b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028a0e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028a11:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028a17:	09 c8                	or     eax,ecx
c0028a19:	c1 e0 14             	shl    eax,0x14
c0028a1c:	89 d1                	mov    ecx,edx
c0028a1e:	c1 e9 0b             	shr    ecx,0xb
c0028a21:	09 c8                	or     eax,ecx
c0028a23:	89 c6                	mov    esi,eax
c0028a25:	89 d9                	mov    ecx,ebx
c0028a27:	c1 e9 0b             	shr    ecx,0xb
c0028a2a:	c1 e2 15             	shl    edx,0x15
c0028a2d:	09 ca                	or     edx,ecx
c0028a2f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028a35:	0f 95 c0             	setne  al
c0028a38:	09 c1                	or     ecx,eax
c0028a3a:	83 e1 01             	and    ecx,0x1
c0028a3d:	c1 eb 0a             	shr    ebx,0xa
c0028a40:	21 cb                	and    ebx,ecx
c0028a42:	01 d3                	add    ebx,edx
c0028a44:	89 d8                	mov    eax,ebx
c0028a46:	83 d6 00             	adc    esi,0x0
c0028a49:	89 f2                	mov    edx,esi
c0028a4b:	89 c7                	mov    edi,eax
c0028a4d:	89 d1                	mov    ecx,edx
c0028a4f:	89 f8                	mov    eax,edi
c0028a51:	89 ca                	mov    edx,ecx
c0028a53:	83 c4 2c             	add    esp,0x2c
c0028a56:	5b                   	pop    ebx
c0028a57:	5e                   	pop    esi
c0028a58:	5f                   	pop    edi
c0028a59:	5d                   	pop    ebp
c0028a5a:	c3                   	ret    

c0028a5b <__floatsidf>:
c0028a5b:	55                   	push   ebp
c0028a5c:	89 e5                	mov    ebp,esp
c0028a5e:	56                   	push   esi
c0028a5f:	53                   	push   ebx
c0028a60:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028a63:	85 db                	test   ebx,ebx
c0028a65:	7e 15                	jle    c0028a7c <__floatsidf+0x21>
c0028a67:	0f bd cb             	bsr    ecx,ebx
c0028a6a:	83 f1 1f             	xor    ecx,0x1f
c0028a6d:	d3 e3                	shl    ebx,cl
c0028a6f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a75:	b8 1e 04 00 00       	mov    eax,0x41e
c0028a7a:	eb 21                	jmp    c0028a9d <__floatsidf+0x42>
c0028a7c:	b8 00 00 00 00       	mov    eax,0x0
c0028a81:	ba 00 00 00 00       	mov    edx,0x0
c0028a86:	74 2a                	je     c0028ab2 <__floatsidf+0x57>
c0028a88:	f7 db                	neg    ebx
c0028a8a:	0f bd cb             	bsr    ecx,ebx
c0028a8d:	83 f1 1f             	xor    ecx,0x1f
c0028a90:	d3 e3                	shl    ebx,cl
c0028a92:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a98:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028a9d:	29 c8                	sub    eax,ecx
c0028a9f:	c1 e0 14             	shl    eax,0x14
c0028aa2:	89 c1                	mov    ecx,eax
c0028aa4:	89 de                	mov    esi,ebx
c0028aa6:	c1 ee 0b             	shr    esi,0xb
c0028aa9:	09 f1                	or     ecx,esi
c0028aab:	89 ca                	mov    edx,ecx
c0028aad:	c1 e3 15             	shl    ebx,0x15
c0028ab0:	89 d8                	mov    eax,ebx
c0028ab2:	5b                   	pop    ebx
c0028ab3:	5e                   	pop    esi
c0028ab4:	5d                   	pop    ebp
c0028ab5:	c3                   	ret    

c0028ab6 <__floatunsidf>:
c0028ab6:	55                   	push   ebp
c0028ab7:	89 e5                	mov    ebp,esp
c0028ab9:	56                   	push   esi
c0028aba:	53                   	push   ebx
c0028abb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028abe:	85 db                	test   ebx,ebx
c0028ac0:	74 2a                	je     c0028aec <__floatunsidf+0x36>
c0028ac2:	0f bd cb             	bsr    ecx,ebx
c0028ac5:	83 f1 1f             	xor    ecx,0x1f
c0028ac8:	d3 e3                	shl    ebx,cl
c0028aca:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028ad0:	b8 1e 04 00 00       	mov    eax,0x41e
c0028ad5:	29 c8                	sub    eax,ecx
c0028ad7:	c1 e0 14             	shl    eax,0x14
c0028ada:	89 c1                	mov    ecx,eax
c0028adc:	89 de                	mov    esi,ebx
c0028ade:	c1 ee 0b             	shr    esi,0xb
c0028ae1:	09 f1                	or     ecx,esi
c0028ae3:	89 ca                	mov    edx,ecx
c0028ae5:	c1 e3 15             	shl    ebx,0x15
c0028ae8:	89 d8                	mov    eax,ebx
c0028aea:	eb 04                	jmp    c0028af0 <__floatunsidf+0x3a>
c0028aec:	31 c0                	xor    eax,eax
c0028aee:	31 d2                	xor    edx,edx
c0028af0:	5b                   	pop    ebx
c0028af1:	5e                   	pop    esi
c0028af2:	5d                   	pop    ebp
c0028af3:	c3                   	ret    

c0028af4 <__fixdfsi>:
c0028af4:	55                   	push   ebp
c0028af5:	89 e5                	mov    ebp,esp
c0028af7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028afa:	89 d1                	mov    ecx,edx
c0028afc:	c1 e1 0b             	shl    ecx,0xb
c0028aff:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028b05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028b08:	c1 e8 15             	shr    eax,0x15
c0028b0b:	09 c1                	or     ecx,eax
c0028b0d:	c1 fa 14             	sar    edx,0x14
c0028b10:	78 1f                	js     c0028b31 <__fixdfsi+0x3d>
c0028b12:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028b18:	31 c0                	xor    eax,eax
c0028b1a:	83 fa 1e             	cmp    edx,0x1e
c0028b1d:	77 40                	ja     c0028b5f <__fixdfsi+0x6b>
c0028b1f:	89 c8                	mov    eax,ecx
c0028b21:	0d 00 00 00 80       	or     eax,0x80000000
c0028b26:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b2b:	29 d1                	sub    ecx,edx
c0028b2d:	d3 e8                	shr    eax,cl
c0028b2f:	eb 2e                	jmp    c0028b5f <__fixdfsi+0x6b>
c0028b31:	31 c0                	xor    eax,eax
c0028b33:	81 c2 01 04 00 00    	add    edx,0x401
c0028b39:	78 24                	js     c0028b5f <__fixdfsi+0x6b>
c0028b3b:	83 fa 1e             	cmp    edx,0x1e
c0028b3e:	7e 09                	jle    c0028b49 <__fixdfsi+0x55>
c0028b40:	83 fa 1f             	cmp    edx,0x1f
c0028b43:	75 18                	jne    c0028b5d <__fixdfsi+0x69>
c0028b45:	85 c9                	test   ecx,ecx
c0028b47:	75 14                	jne    c0028b5d <__fixdfsi+0x69>
c0028b49:	89 c8                	mov    eax,ecx
c0028b4b:	0d 00 00 00 80       	or     eax,0x80000000
c0028b50:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b55:	29 d1                	sub    ecx,edx
c0028b57:	d3 e8                	shr    eax,cl
c0028b59:	f7 d8                	neg    eax
c0028b5b:	eb 02                	jmp    c0028b5f <__fixdfsi+0x6b>
c0028b5d:	31 c0                	xor    eax,eax
c0028b5f:	5d                   	pop    ebp
c0028b60:	c3                   	ret    

c0028b61 <__fixunsdfsi>:
c0028b61:	55                   	push   ebp
c0028b62:	89 e5                	mov    ebp,esp
c0028b64:	53                   	push   ebx
c0028b65:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028b68:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028b6b:	89 d3                	mov    ebx,edx
c0028b6d:	c1 fb 14             	sar    ebx,0x14
c0028b70:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028b76:	31 c0                	xor    eax,eax
c0028b78:	83 fb 1f             	cmp    ebx,0x1f
c0028b7b:	77 1d                	ja     c0028b9a <__fixunsdfsi+0x39>
c0028b7d:	89 d0                	mov    eax,edx
c0028b7f:	c1 e0 0b             	shl    eax,0xb
c0028b82:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028b87:	c1 e9 15             	shr    ecx,0x15
c0028b8a:	09 c8                	or     eax,ecx
c0028b8c:	0d 00 00 00 80       	or     eax,0x80000000
c0028b91:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b96:	29 d9                	sub    ecx,ebx
c0028b98:	d3 e8                	shr    eax,cl
c0028b9a:	5b                   	pop    ebx
c0028b9b:	5d                   	pop    ebp
c0028b9c:	c3                   	ret    

c0028b9d <__cmpdf2>:
c0028b9d:	55                   	push   ebp
c0028b9e:	89 e5                	mov    ebp,esp
c0028ba0:	57                   	push   edi
c0028ba1:	56                   	push   esi
c0028ba2:	53                   	push   ebx
c0028ba3:	83 ec 0c             	sub    esp,0xc
c0028ba6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028ba9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028bac:	89 ca                	mov    edx,ecx
c0028bae:	c1 ea 14             	shr    edx,0x14
c0028bb1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028bb7:	89 cb                	mov    ebx,ecx
c0028bb9:	c1 fb 1f             	sar    ebx,0x1f
c0028bbc:	31 da                	xor    edx,ebx
c0028bbe:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028bc1:	89 df                	mov    edi,ebx
c0028bc3:	c1 e7 0b             	shl    edi,0xb
c0028bc6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028bc9:	c1 e1 0b             	shl    ecx,0xb
c0028bcc:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028bd2:	c1 eb 15             	shr    ebx,0x15
c0028bd5:	09 d9                	or     ecx,ebx
c0028bd7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028bda:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028bdd:	89 ce                	mov    esi,ecx
c0028bdf:	c1 ee 14             	shr    esi,0x14
c0028be2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028be8:	89 cb                	mov    ebx,ecx
c0028bea:	c1 fb 1f             	sar    ebx,0x1f
c0028bed:	31 de                	xor    esi,ebx
c0028bef:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028bf2:	89 df                	mov    edi,ebx
c0028bf4:	c1 e7 0b             	shl    edi,0xb
c0028bf7:	c1 e1 0b             	shl    ecx,0xb
c0028bfa:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028c00:	c1 eb 15             	shr    ebx,0x15
c0028c03:	09 d9                	or     ecx,ebx
c0028c05:	89 d3                	mov    ebx,edx
c0028c07:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028c0d:	43                   	inc    ebx
c0028c0e:	83 fb 01             	cmp    ebx,0x1
c0028c11:	77 08                	ja     c0028c1b <__cmpdf2+0x7e>
c0028c13:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028c16:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028c19:	75 68                	jne    c0028c83 <__cmpdf2+0xe6>
c0028c1b:	89 f3                	mov    ebx,esi
c0028c1d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028c23:	43                   	inc    ebx
c0028c24:	83 fb 01             	cmp    ebx,0x1
c0028c27:	77 06                	ja     c0028c2f <__cmpdf2+0x92>
c0028c29:	89 fb                	mov    ebx,edi
c0028c2b:	09 cb                	or     ebx,ecx
c0028c2d:	75 54                	jne    c0028c83 <__cmpdf2+0xe6>
c0028c2f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028c32:	09 f8                	or     eax,edi
c0028c34:	09 c8                	or     eax,ecx
c0028c36:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028c39:	75 12                	jne    c0028c4d <__cmpdf2+0xb0>
c0028c3b:	8d 42 01             	lea    eax,[edx+0x1]
c0028c3e:	83 f8 01             	cmp    eax,0x1
c0028c41:	77 0a                	ja     c0028c4d <__cmpdf2+0xb0>
c0028c43:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028c46:	31 c0                	xor    eax,eax
c0028c48:	83 fb 01             	cmp    ebx,0x1
c0028c4b:	76 36                	jbe    c0028c83 <__cmpdf2+0xe6>
c0028c4d:	b8 01 00 00 00       	mov    eax,0x1
c0028c52:	39 f2                	cmp    edx,esi
c0028c54:	7f 2d                	jg     c0028c83 <__cmpdf2+0xe6>
c0028c56:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028c5b:	7c 26                	jl     c0028c83 <__cmpdf2+0xe6>
c0028c5d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028c60:	77 07                	ja     c0028c69 <__cmpdf2+0xcc>
c0028c62:	72 16                	jb     c0028c7a <__cmpdf2+0xdd>
c0028c64:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028c67:	76 0a                	jbe    c0028c73 <__cmpdf2+0xd6>
c0028c69:	89 d0                	mov    eax,edx
c0028c6b:	c1 f8 1f             	sar    eax,0x1f
c0028c6e:	83 c8 01             	or     eax,0x1
c0028c71:	eb 10                	jmp    c0028c83 <__cmpdf2+0xe6>
c0028c73:	b8 00 00 00 00       	mov    eax,0x0
c0028c78:	73 09                	jae    c0028c83 <__cmpdf2+0xe6>
c0028c7a:	89 d0                	mov    eax,edx
c0028c7c:	c1 f8 1f             	sar    eax,0x1f
c0028c7f:	83 e0 02             	and    eax,0x2
c0028c82:	48                   	dec    eax
c0028c83:	83 c4 0c             	add    esp,0xc
c0028c86:	5b                   	pop    ebx
c0028c87:	5e                   	pop    esi
c0028c88:	5f                   	pop    edi
c0028c89:	5d                   	pop    ebp
c0028c8a:	c3                   	ret    

c0028c8b <__eqdf2>:
c0028c8b:	55                   	push   ebp
c0028c8c:	89 e5                	mov    ebp,esp
c0028c8e:	50                   	push   eax
c0028c8f:	6a 01                	push   0x1
c0028c91:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028c94:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028c97:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028c9a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028c9d:	e8 fb fe ff ff       	call   c0028b9d <__cmpdf2>
c0028ca2:	83 c4 18             	add    esp,0x18
c0028ca5:	c9                   	leave  
c0028ca6:	c3                   	ret    

c0028ca7 <__nedf2>:
c0028ca7:	eb e2                	jmp    c0028c8b <__eqdf2>

c0028ca9 <__gtdf2>:
c0028ca9:	55                   	push   ebp
c0028caa:	89 e5                	mov    ebp,esp
c0028cac:	50                   	push   eax
c0028cad:	6a ff                	push   0xffffffff
c0028caf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028cb2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028cb5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028cb8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028cbb:	e8 dd fe ff ff       	call   c0028b9d <__cmpdf2>
c0028cc0:	83 c4 18             	add    esp,0x18
c0028cc3:	c9                   	leave  
c0028cc4:	c3                   	ret    

c0028cc5 <__gedf2>:
c0028cc5:	eb e2                	jmp    c0028ca9 <__gtdf2>

c0028cc7 <__ltdf2>:
c0028cc7:	eb c2                	jmp    c0028c8b <__eqdf2>

c0028cc9 <__ledf2>:
c0028cc9:	eb c0                	jmp    c0028c8b <__eqdf2>

c0028ccb <__truncdfsf2>:
c0028ccb:	55                   	push   ebp
c0028ccc:	89 e5                	mov    ebp,esp
c0028cce:	57                   	push   edi
c0028ccf:	56                   	push   esi
c0028cd0:	53                   	push   ebx
c0028cd1:	83 ec 0c             	sub    esp,0xc
c0028cd4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028cd7:	89 d1                	mov    ecx,edx
c0028cd9:	c1 f9 14             	sar    ecx,0x14
c0028cdc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028cdf:	89 df                	mov    edi,ebx
c0028ce1:	c1 e7 0b             	shl    edi,0xb
c0028ce4:	89 d0                	mov    eax,edx
c0028ce6:	c1 e0 0b             	shl    eax,0xb
c0028ce9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028cee:	c1 eb 15             	shr    ebx,0x15
c0028cf1:	09 d8                	or     eax,ebx
c0028cf3:	89 cb                	mov    ebx,ecx
c0028cf5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028cfb:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028d01:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028d07:	0f 86 9e 00 00 00    	jbe    c0028dab <__truncdfsf2+0xe0>
c0028d0d:	85 db                	test   ebx,ebx
c0028d0f:	75 0a                	jne    c0028d1b <__truncdfsf2+0x50>
c0028d11:	c1 fa 17             	sar    edx,0x17
c0028d14:	30 d2                	xor    dl,dl
c0028d16:	e9 84 00 00 00       	jmp    c0028d9f <__truncdfsf2+0xd4>
c0028d1b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028d21:	83 fe 83             	cmp    esi,0xffffff83
c0028d24:	7d 4b                	jge    c0028d71 <__truncdfsf2+0xa6>
c0028d26:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028d2b:	29 f1                	sub    ecx,esi
c0028d2d:	83 f9 1f             	cmp    ecx,0x1f
c0028d30:	7f 6b                	jg     c0028d9d <__truncdfsf2+0xd2>
c0028d32:	0d 00 00 00 80       	or     eax,0x80000000
c0028d37:	89 c3                	mov    ebx,eax
c0028d39:	d3 eb                	shr    ebx,cl
c0028d3b:	be 01 00 00 00       	mov    esi,0x1
c0028d40:	d3 e6                	shl    esi,cl
c0028d42:	4e                   	dec    esi
c0028d43:	21 f0                	and    eax,esi
c0028d45:	09 f8                	or     eax,edi
c0028d47:	0f 95 c0             	setne  al
c0028d4a:	0f b6 c0             	movzx  eax,al
c0028d4d:	09 c3                	or     ebx,eax
c0028d4f:	89 d9                	mov    ecx,ebx
c0028d51:	c1 e9 08             	shr    ecx,0x8
c0028d54:	f6 c3 7f             	test   bl,0x7f
c0028d57:	0f 95 c0             	setne  al
c0028d5a:	09 c8                	or     eax,ecx
c0028d5c:	83 e0 01             	and    eax,0x1
c0028d5f:	c1 eb 07             	shr    ebx,0x7
c0028d62:	21 c3                	and    ebx,eax
c0028d64:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028d6a:	09 d1                	or     ecx,edx
c0028d6c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028d6f:	eb 76                	jmp    c0028de7 <__truncdfsf2+0x11c>
c0028d71:	83 c6 80             	add    esi,0xffffff80
c0028d74:	7e 1d                	jle    c0028d93 <__truncdfsf2+0xc8>
c0028d76:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028d7c:	75 0b                	jne    c0028d89 <__truncdfsf2+0xbe>
c0028d7e:	09 f8                	or     eax,edi
c0028d80:	74 09                	je     c0028d8b <__truncdfsf2+0xc0>
c0028d82:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028d87:	eb 02                	jmp    c0028d8b <__truncdfsf2+0xc0>
c0028d89:	31 c0                	xor    eax,eax
c0028d8b:	c1 fa 17             	sar    edx,0x17
c0028d8e:	80 ca ff             	or     dl,0xff
c0028d91:	eb 0e                	jmp    c0028da1 <__truncdfsf2+0xd6>
c0028d93:	c1 fa 1f             	sar    edx,0x1f
c0028d96:	c1 e2 08             	shl    edx,0x8
c0028d99:	09 ca                	or     edx,ecx
c0028d9b:	eb 04                	jmp    c0028da1 <__truncdfsf2+0xd6>
c0028d9d:	31 d2                	xor    edx,edx
c0028d9f:	31 c0                	xor    eax,eax
c0028da1:	c1 e2 17             	shl    edx,0x17
c0028da4:	c1 e8 08             	shr    eax,0x8
c0028da7:	09 d0                	or     eax,edx
c0028da9:	eb 3c                	jmp    c0028de7 <__truncdfsf2+0x11c>
c0028dab:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028db1:	89 ca                	mov    edx,ecx
c0028db3:	c1 fa 0b             	sar    edx,0xb
c0028db6:	c1 e2 08             	shl    edx,0x8
c0028db9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028dbc:	31 db                	xor    ebx,ebx
c0028dbe:	85 ff                	test   edi,edi
c0028dc0:	0f 95 c3             	setne  bl
c0028dc3:	09 d8                	or     eax,ebx
c0028dc5:	89 c3                	mov    ebx,eax
c0028dc7:	c1 eb 08             	shr    ebx,0x8
c0028dca:	a8 7f                	test   al,0x7f
c0028dcc:	0f 95 c2             	setne  dl
c0028dcf:	89 d6                	mov    esi,edx
c0028dd1:	09 de                	or     esi,ebx
c0028dd3:	83 e6 01             	and    esi,0x1
c0028dd6:	c1 e8 07             	shr    eax,0x7
c0028dd9:	21 f0                	and    eax,esi
c0028ddb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028dde:	09 ca                	or     edx,ecx
c0028de0:	c1 e2 17             	shl    edx,0x17
c0028de3:	09 da                	or     edx,ebx
c0028de5:	01 d0                	add    eax,edx
c0028de7:	83 c4 0c             	add    esp,0xc
c0028dea:	5b                   	pop    ebx
c0028deb:	5e                   	pop    esi
c0028dec:	5f                   	pop    edi
c0028ded:	5d                   	pop    ebp
c0028dee:	c3                   	ret    

c0028def <__extendsfdf2>:
c0028def:	55                   	push   ebp
c0028df0:	89 e5                	mov    ebp,esp
c0028df2:	57                   	push   edi
c0028df3:	56                   	push   esi
c0028df4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028df7:	89 d1                	mov    ecx,edx
c0028df9:	c1 f9 17             	sar    ecx,0x17
c0028dfc:	c1 e2 08             	shl    edx,0x8
c0028dff:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028e05:	89 c8                	mov    eax,ecx
c0028e07:	80 e4 f8             	and    ah,0xf8
c0028e0a:	8d 71 01             	lea    esi,[ecx+0x1]
c0028e0d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028e13:	75 27                	jne    c0028e3c <__extendsfdf2+0x4d>
c0028e15:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028e1b:	75 18                	jne    c0028e35 <__extendsfdf2+0x46>
c0028e1d:	85 d2                	test   edx,edx
c0028e1f:	74 20                	je     c0028e41 <__extendsfdf2+0x52>
c0028e21:	41                   	inc    ecx
c0028e22:	01 d2                	add    edx,edx
c0028e24:	79 fb                	jns    c0028e21 <__extendsfdf2+0x32>
c0028e26:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028e2c:	29 c8                	sub    eax,ecx
c0028e2e:	05 81 03 00 00       	add    eax,0x381
c0028e33:	eb 0c                	jmp    c0028e41 <__extendsfdf2+0x52>
c0028e35:	05 00 07 00 00       	add    eax,0x700
c0028e3a:	eb 05                	jmp    c0028e41 <__extendsfdf2+0x52>
c0028e3c:	05 80 03 00 00       	add    eax,0x380
c0028e41:	c1 e0 14             	shl    eax,0x14
c0028e44:	89 c1                	mov    ecx,eax
c0028e46:	89 d0                	mov    eax,edx
c0028e48:	c1 e8 0b             	shr    eax,0xb
c0028e4b:	09 c1                	or     ecx,eax
c0028e4d:	c1 e2 15             	shl    edx,0x15
c0028e50:	89 d0                	mov    eax,edx
c0028e52:	89 ca                	mov    edx,ecx
c0028e54:	5e                   	pop    esi
c0028e55:	5f                   	pop    edi
c0028e56:	5d                   	pop    ebp
c0028e57:	c3                   	ret    
c0028e58:	66 90                	xchg   ax,ax
c0028e5a:	66 90                	xchg   ax,ax
c0028e5c:	66 90                	xchg   ax,ax
c0028e5e:	66 90                	xchg   ax,ax

c0028e60 <fabs>:
c0028e60:	83 ec 0c             	sub    esp,0xc
c0028e63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e67:	89 04 24             	mov    DWORD PTR [esp],eax
c0028e6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028e6e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028e73:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028e77:	dd 04 24             	fld    QWORD PTR [esp]
c0028e7a:	83 c4 0c             	add    esp,0xc
c0028e7d:	c3                   	ret    
c0028e7e:	66 90                	xchg   ax,ax

c0028e80 <lrint>:
c0028e80:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028e84:	83 ec 04             	sub    esp,0x4
c0028e87:	db 1c 24             	fistp  DWORD PTR [esp]
c0028e8a:	58                   	pop    eax
c0028e8b:	c3                   	ret    

c0028e8c <lrintf>:
c0028e8c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028e90:	83 ec 04             	sub    esp,0x4
c0028e93:	db 1c 24             	fistp  DWORD PTR [esp]
c0028e96:	58                   	pop    eax
c0028e97:	c3                   	ret    

Disassembly of section .init:

c0028e98 <_init>:
c0028e98:	55                   	push   ebp
c0028e99:	89 e5                	mov    ebp,esp
c0028e9b:	e8 78 72 fd ff       	call   c0000118 <frame_dummy>
c0028ea0:	e8 5b e0 ff ff       	call   c0026f00 <__do_global_ctors_aux>
c0028ea5:	5d                   	pop    ebp
c0028ea6:	c3                   	ret    

Disassembly of section .fini:

c0028ea7 <_fini>:
c0028ea7:	55                   	push   ebp
c0028ea8:	89 e5                	mov    ebp,esp
c0028eaa:	e8 f9 71 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028eaf:	5d                   	pop    ebp
c0028eb0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028eb2 <Computer::~Computer()>:
c0028eb2:	83 ec 0c             	sub    esp,0xc
c0028eb5:	ba e8 aa 02 c0       	mov    edx,0xc002aae8
c0028eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ebe:	89 10                	mov    DWORD PTR [eax],edx
c0028ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ec4:	83 ec 0c             	sub    esp,0xc
c0028ec7:	50                   	push   eax
c0028ec8:	e8 09 ad fe ff       	call   c0013bd6 <Device::~Device()>
c0028ecd:	83 c4 10             	add    esp,0x10
c0028ed0:	90                   	nop
c0028ed1:	83 c4 0c             	add    esp,0xc
c0028ed4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028ed6 <Computer::~Computer()>:
c0028ed6:	83 ec 0c             	sub    esp,0xc
c0028ed9:	83 ec 0c             	sub    esp,0xc
c0028edc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee0:	e8 cd ff ff ff       	call   c0028eb2 <Computer::~Computer()>
c0028ee5:	83 c4 10             	add    esp,0x10
c0028ee8:	83 ec 08             	sub    esp,0x8
c0028eeb:	68 ec 01 00 00       	push   0x1ec
c0028ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ef4:	e8 f6 98 fe ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0028ef9:	83 c4 10             	add    esp,0x10
c0028efc:	83 c4 0c             	add    esp,0xc
c0028eff:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028f00 <idleCommon()>:
c0028f00:	83 ec 0c             	sub    esp,0xc
c0028f03:	fa                   	cli    
c0028f04:	ff 05 28 25 03 c0    	inc    DWORD PTR ds:0xc0032528
c0028f0a:	e8 a9 51 ff ff       	call   c001e0b8 <schedule()>
c0028f0f:	a1 28 25 03 c0       	mov    eax,ds:0xc0032528
c0028f14:	48                   	dec    eax
c0028f15:	a3 28 25 03 c0       	mov    ds:0xc0032528,eax
c0028f1a:	75 01                	jne    c0028f1d <idleCommon()+0x1d>
c0028f1c:	fb                   	sti    
c0028f1d:	83 c4 0c             	add    esp,0xc
c0028f20:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028f22 <LinkedList<UnixFile>::~LinkedList()>:
c0028f22:	90                   	nop
c0028f23:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028f24 <LinkedList<UnixFile>::LinkedList()>:
c0028f24:	83 ec 0c             	sub    esp,0xc
c0028f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f2b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f35:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f40:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f4b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f55:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f60:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f67:	83 ec 0c             	sub    esp,0xc
c0028f6a:	68 5a ad 02 c0       	push   0xc002ad5a
c0028f6f:	e8 5b 99 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0028f74:	83 c4 10             	add    esp,0x10
c0028f77:	90                   	nop
c0028f78:	83 c4 0c             	add    esp,0xc
c0028f7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028f7c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028f7c:	83 ec 0c             	sub    esp,0xc
c0028f7f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028f84:	75 10                	jne    c0028f96 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028f86:	83 ec 0c             	sub    esp,0xc
c0028f89:	68 74 ad 02 c0       	push   0xc002ad74
c0028f8e:	e8 72 13 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c0028f93:	83 c4 10             	add    esp,0x10
c0028f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f9c:	85 c0                	test   eax,eax
c0028f9e:	74 34                	je     c0028fd4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fa7:	85 c0                	test   eax,eax
c0028fa9:	74 29                	je     c0028fd4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028faf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fb2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fb6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028fb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fbd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fc1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fcb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028fd2:	eb 65                	jmp    c0029039 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0028fda:	85 c0                	test   eax,eax
c0028fdc:	75 4b                	jne    c0029029 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028fde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fe5:	85 c0                	test   eax,eax
c0028fe7:	75 40                	jne    c0029029 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028fe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ff1:	89 10                	mov    DWORD PTR [eax],edx
c0028ff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028ffb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028ffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029002:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029005:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002900c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029010:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029013:	85 c0                	test   eax,eax
c0029015:	74 22                	je     c0029039 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029017:	83 ec 0c             	sub    esp,0xc
c002901a:	68 96 ad 02 c0       	push   0xc002ad96
c002901f:	e8 e1 12 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c0029024:	83 c4 10             	add    esp,0x10
c0029027:	eb 10                	jmp    c0029039 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029029:	83 ec 0c             	sub    esp,0xc
c002902c:	68 a0 ad 02 c0       	push   0xc002ada0
c0029031:	e8 cf 12 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c0029036:	83 c4 10             	add    esp,0x10
c0029039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002903d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029040:	8d 50 01             	lea    edx,[eax+0x1]
c0029043:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029047:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002904a:	90                   	nop
c002904b:	83 c4 0c             	add    esp,0xc
c002904e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029050 <LinkedList<UnixFile>::getFirstElement()>:
c0029050:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029054:	8b 00                	mov    eax,DWORD PTR [eax]
c0029056:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0029058 <LinkedList<UnixFile>::removeFirst()>:
c0029058:	83 ec 0c             	sub    esp,0xc
c002905b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002905f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029061:	85 c0                	test   eax,eax
c0029063:	75 12                	jne    c0029077 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0029065:	83 ec 0c             	sub    esp,0xc
c0029068:	68 ac ad 02 c0       	push   0xc002adac
c002906d:	e8 93 12 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c0029072:	83 c4 10             	add    esp,0x10
c0029075:	eb 7e                	jmp    c00290f5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0029077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002907b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002907e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029081:	85 c0                	test   eax,eax
c0029083:	74 10                	je     c0029095 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029085:	83 ec 0c             	sub    esp,0xc
c0029088:	68 f7 ad 02 c0       	push   0xc002adf7
c002908d:	e8 73 12 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c0029092:	83 c4 10             	add    esp,0x10
c0029095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029099:	8b 00                	mov    eax,DWORD PTR [eax]
c002909b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002909e:	85 c0                	test   eax,eax
c00290a0:	75 33                	jne    c00290d5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00290a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00290ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00290b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290be:	83 f8 01             	cmp    eax,0x1
c00290c1:	74 21                	je     c00290e4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00290c3:	83 ec 0c             	sub    esp,0xc
c00290c6:	68 d0 ad 02 c0       	push   0xc002add0
c00290cb:	e8 35 12 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c00290d0:	83 c4 10             	add    esp,0x10
c00290d3:	eb 0f                	jmp    c00290e4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00290d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00290db:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00290de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e2:	89 10                	mov    DWORD PTR [eax],edx
c00290e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290eb:	8d 50 ff             	lea    edx,[eax-0x1]
c00290ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00290f5:	83 c4 0c             	add    esp,0xc
c00290f8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00290fa <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00290fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00290fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029101:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0029102 <DriverlessDevice::~DriverlessDevice()>:
c0029102:	ba 9c b5 02 c0       	mov    edx,0xc002b59c
c0029107:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002910b:	89 10                	mov    DWORD PTR [eax],edx
c002910d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029111:	50                   	push   eax
c0029112:	e8 bf aa fe ff       	call   c0013bd6 <Device::~Device()>
c0029117:	83 c4 04             	add    esp,0x4
c002911a:	90                   	nop
c002911b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002911c <DriverlessDevice::~DriverlessDevice()>:
c002911c:	83 ec 0c             	sub    esp,0xc
c002911f:	83 ec 0c             	sub    esp,0xc
c0029122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029126:	e8 d7 ff ff ff       	call   c0029102 <DriverlessDevice::~DriverlessDevice()>
c002912b:	83 c4 10             	add    esp,0x10
c002912e:	83 ec 08             	sub    esp,0x8
c0029131:	68 58 01 00 00       	push   0x158
c0029136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002913a:	e8 b0 96 fe ff       	call   c00127ef <operator delete(void*, unsigned long)>
c002913f:	83 c4 10             	add    esp,0x10
c0029142:	83 c4 0c             	add    esp,0xc
c0029145:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0029146 <LinkedList<Device>::addElement(Device*)>:
c0029146:	83 ec 0c             	sub    esp,0xc
c0029149:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002914e:	75 10                	jne    c0029160 <LinkedList<Device>::addElement(Device*)+0x1a>
c0029150:	83 ec 0c             	sub    esp,0xc
c0029153:	68 74 ad 02 c0       	push   0xc002ad74
c0029158:	e8 a8 11 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c002915d:	83 c4 10             	add    esp,0x10
c0029160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029164:	8b 00                	mov    eax,DWORD PTR [eax]
c0029166:	85 c0                	test   eax,eax
c0029168:	74 3a                	je     c00291a4 <LinkedList<Device>::addElement(Device*)+0x5e>
c002916a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002916e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029171:	85 c0                	test   eax,eax
c0029173:	74 2f                	je     c00291a4 <LinkedList<Device>::addElement(Device*)+0x5e>
c0029175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029179:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002917c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029180:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0029186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002918a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002918e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029195:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029198:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00291a2:	eb 68                	jmp    c002920c <LinkedList<Device>::addElement(Device*)+0xc6>
c00291a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00291aa:	85 c0                	test   eax,eax
c00291ac:	75 4e                	jne    c00291fc <LinkedList<Device>::addElement(Device*)+0xb6>
c00291ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291b5:	85 c0                	test   eax,eax
c00291b7:	75 43                	jne    c00291fc <LinkedList<Device>::addElement(Device*)+0xb6>
c00291b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00291c1:	89 10                	mov    DWORD PTR [eax],edx
c00291c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00291cb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00291ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291d5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00291df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291e6:	85 c0                	test   eax,eax
c00291e8:	74 22                	je     c002920c <LinkedList<Device>::addElement(Device*)+0xc6>
c00291ea:	83 ec 0c             	sub    esp,0xc
c00291ed:	68 96 ad 02 c0       	push   0xc002ad96
c00291f2:	e8 0e 11 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c00291f7:	83 c4 10             	add    esp,0x10
c00291fa:	eb 10                	jmp    c002920c <LinkedList<Device>::addElement(Device*)+0xc6>
c00291fc:	83 ec 0c             	sub    esp,0xc
c00291ff:	68 a0 ad 02 c0       	push   0xc002ada0
c0029204:	e8 fc 10 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c0029209:	83 c4 10             	add    esp,0x10
c002920c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029210:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029213:	8d 50 01             	lea    edx,[eax+0x1]
c0029216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002921a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002921d:	90                   	nop
c002921e:	83 c4 0c             	add    esp,0xc
c0029221:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0029222 <LinkedList<Device>::LinkedList()>:
c0029222:	83 ec 0c             	sub    esp,0xc
c0029225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029229:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002922f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029233:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002923a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002923e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029249:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002924f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029253:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002925a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002925e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029265:	83 ec 0c             	sub    esp,0xc
c0029268:	68 5a ad 02 c0       	push   0xc002ad5a
c002926d:	e8 5d 96 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c0029272:	83 c4 10             	add    esp,0x10
c0029275:	90                   	nop
c0029276:	83 c4 0c             	add    esp,0xc
c0029279:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002927a <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002927a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002927e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029280:	85 c0                	test   eax,eax
c0029282:	75 0e                	jne    c0029292 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029284:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029288:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002928b:	85 c0                	test   eax,eax
c002928d:	75 03                	jne    c0029292 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002928f:	b0 01                	mov    al,0x1
c0029291:	c3                   	ret    
c0029292:	b0 00                	mov    al,0x0
c0029294:	90                   	nop
c0029295:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029296 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029296:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002929a:	8b 00                	mov    eax,DWORD PTR [eax]
c002929c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002929e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002929e:	83 ec 0c             	sub    esp,0xc
c00292a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00292a7:	85 c0                	test   eax,eax
c00292a9:	75 15                	jne    c00292c0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00292ab:	83 ec 0c             	sub    esp,0xc
c00292ae:	68 ac ad 02 c0       	push   0xc002adac
c00292b3:	e8 4d 10 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c00292b8:	83 c4 10             	add    esp,0x10
c00292bb:	e9 88 00 00 00       	jmp    c0029348 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00292c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00292c7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00292ca:	85 c0                	test   eax,eax
c00292cc:	0f 95 c0             	setne  al
c00292cf:	84 c0                	test   al,al
c00292d1:	74 10                	je     c00292e3 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00292d3:	83 ec 0c             	sub    esp,0xc
c00292d6:	68 f7 ad 02 c0       	push   0xc002adf7
c00292db:	e8 25 10 ff ff       	call   c001a305 <Krnl::panic(char const*)>
c00292e0:	83 c4 10             	add    esp,0x10
c00292e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00292e9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00292ec:	85 c0                	test   eax,eax
c00292ee:	0f 94 c0             	sete   al
c00292f1:	84 c0                	test   al,al
c00292f3:	74 33                	je     c0029328 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00292f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00292ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029303:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002930a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002930e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029311:	83 f8 01             	cmp    eax,0x1
c0029314:	74 21                	je     c0029337 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029316:	83 ec 0c             	sub    esp,0xc
c0029319:	68 d0 ad 02 c0       	push   0xc002add0
c002931e:	e8 e2 0f ff ff       	call   c001a305 <Krnl::panic(char const*)>
c0029323:	83 c4 10             	add    esp,0x10
c0029326:	eb 0f                	jmp    c0029337 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002932c:	8b 00                	mov    eax,DWORD PTR [eax]
c002932e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0029331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029335:	89 10                	mov    DWORD PTR [eax],edx
c0029337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002933b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002933e:	8d 50 ff             	lea    edx,[eax-0x1]
c0029341:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029345:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029348:	83 c4 0c             	add    esp,0xc
c002934b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002934c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002934c:	83 ec 0c             	sub    esp,0xc
c002934f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029354:	75 10                	jne    c0029366 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0029356:	83 ec 0c             	sub    esp,0xc
c0029359:	68 74 ad 02 c0       	push   0xc002ad74
c002935e:	e8 a2 0f ff ff       	call   c001a305 <Krnl::panic(char const*)>
c0029363:	83 c4 10             	add    esp,0x10
c0029366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002936a:	8b 00                	mov    eax,DWORD PTR [eax]
c002936c:	85 c0                	test   eax,eax
c002936e:	74 34                	je     c00293a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0029370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029374:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029377:	85 c0                	test   eax,eax
c0029379:	74 29                	je     c00293a4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002937b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002937f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029382:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029386:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029389:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002938d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029391:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029398:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002939b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00293a2:	eb 65                	jmp    c0029409 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00293a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00293aa:	85 c0                	test   eax,eax
c00293ac:	75 4b                	jne    c00293f9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00293ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293b5:	85 c0                	test   eax,eax
c00293b7:	75 40                	jne    c00293f9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00293b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293c1:	89 10                	mov    DWORD PTR [eax],edx
c00293c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293cb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00293ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293d5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00293dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00293e3:	85 c0                	test   eax,eax
c00293e5:	74 22                	je     c0029409 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00293e7:	83 ec 0c             	sub    esp,0xc
c00293ea:	68 96 ad 02 c0       	push   0xc002ad96
c00293ef:	e8 11 0f ff ff       	call   c001a305 <Krnl::panic(char const*)>
c00293f4:	83 c4 10             	add    esp,0x10
c00293f7:	eb 10                	jmp    c0029409 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00293f9:	83 ec 0c             	sub    esp,0xc
c00293fc:	68 a0 ad 02 c0       	push   0xc002ada0
c0029401:	e8 ff 0e ff ff       	call   c001a305 <Krnl::panic(char const*)>
c0029406:	83 c4 10             	add    esp,0x10
c0029409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002940d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029410:	8d 50 01             	lea    edx,[eax+0x1]
c0029413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029417:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002941a:	90                   	nop
c002941b:	83 c4 0c             	add    esp,0xc
c002941e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0029420 <ACPI::~ACPI()>:
c0029420:	83 ec 0c             	sub    esp,0xc
c0029423:	ba 6c bf 02 c0       	mov    edx,0xc002bf6c
c0029428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002942c:	89 10                	mov    DWORD PTR [eax],edx
c002942e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029432:	83 ec 0c             	sub    esp,0xc
c0029435:	50                   	push   eax
c0029436:	e8 9b a7 fe ff       	call   c0013bd6 <Device::~Device()>
c002943b:	83 c4 10             	add    esp,0x10
c002943e:	90                   	nop
c002943f:	83 c4 0c             	add    esp,0xc
c0029442:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029444 <ACPI::~ACPI()>:
c0029444:	83 ec 0c             	sub    esp,0xc
c0029447:	83 ec 0c             	sub    esp,0xc
c002944a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002944e:	e8 cd ff ff ff       	call   c0029420 <ACPI::~ACPI()>
c0029453:	83 c4 10             	add    esp,0x10
c0029456:	83 ec 08             	sub    esp,0x8
c0029459:	68 64 12 00 00       	push   0x1264
c002945e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029462:	e8 88 93 fe ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0029467:	83 c4 10             	add    esp,0x10
c002946a:	83 c4 0c             	add    esp,0xc
c002946d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002946e <LinkedList<Device>::~LinkedList()>:
c002946e:	90                   	nop
c002946f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029470 <LinkedList<Device>::isEmpty()>:
c0029470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029474:	8b 00                	mov    eax,DWORD PTR [eax]
c0029476:	85 c0                	test   eax,eax
c0029478:	75 0e                	jne    c0029488 <LinkedList<Device>::isEmpty()+0x18>
c002947a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002947e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029481:	85 c0                	test   eax,eax
c0029483:	75 03                	jne    c0029488 <LinkedList<Device>::isEmpty()+0x18>
c0029485:	b0 01                	mov    al,0x1
c0029487:	c3                   	ret    
c0029488:	b0 00                	mov    al,0x0
c002948a:	90                   	nop
c002948b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002948c <LinkedList<Device>::getFirstElement()>:
c002948c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029490:	8b 00                	mov    eax,DWORD PTR [eax]
c0029492:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029494 <LinkedList<Device>::removeFirst()>:
c0029494:	83 ec 0c             	sub    esp,0xc
c0029497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002949b:	8b 00                	mov    eax,DWORD PTR [eax]
c002949d:	85 c0                	test   eax,eax
c002949f:	75 15                	jne    c00294b6 <LinkedList<Device>::removeFirst()+0x22>
c00294a1:	83 ec 0c             	sub    esp,0xc
c00294a4:	68 ac ad 02 c0       	push   0xc002adac
c00294a9:	e8 57 0e ff ff       	call   c001a305 <Krnl::panic(char const*)>
c00294ae:	83 c4 10             	add    esp,0x10
c00294b1:	e9 87 00 00 00       	jmp    c002953d <LinkedList<Device>::removeFirst()+0xa9>
c00294b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00294bd:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00294c3:	85 c0                	test   eax,eax
c00294c5:	74 10                	je     c00294d7 <LinkedList<Device>::removeFirst()+0x43>
c00294c7:	83 ec 0c             	sub    esp,0xc
c00294ca:	68 f7 ad 02 c0       	push   0xc002adf7
c00294cf:	e8 31 0e ff ff       	call   c001a305 <Krnl::panic(char const*)>
c00294d4:	83 c4 10             	add    esp,0x10
c00294d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294db:	8b 00                	mov    eax,DWORD PTR [eax]
c00294dd:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00294e3:	85 c0                	test   eax,eax
c00294e5:	75 33                	jne    c002951a <LinkedList<Device>::removeFirst()+0x86>
c00294e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294eb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00294f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00294fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029500:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029503:	83 f8 01             	cmp    eax,0x1
c0029506:	74 24                	je     c002952c <LinkedList<Device>::removeFirst()+0x98>
c0029508:	83 ec 0c             	sub    esp,0xc
c002950b:	68 d0 ad 02 c0       	push   0xc002add0
c0029510:	e8 f0 0d ff ff       	call   c001a305 <Krnl::panic(char const*)>
c0029515:	83 c4 10             	add    esp,0x10
c0029518:	eb 12                	jmp    c002952c <LinkedList<Device>::removeFirst()+0x98>
c002951a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002951e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029520:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0029526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002952a:	89 10                	mov    DWORD PTR [eax],edx
c002952c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029530:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029533:	8d 50 ff             	lea    edx,[eax-0x1]
c0029536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002953a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002953d:	83 c4 0c             	add    esp,0xc
c0029540:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029542 <CPU::~CPU()>:
c0029542:	83 ec 0c             	sub    esp,0xc
c0029545:	ba 5c c3 02 c0       	mov    edx,0xc002c35c
c002954a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002954e:	89 10                	mov    DWORD PTR [eax],edx
c0029550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029554:	83 ec 0c             	sub    esp,0xc
c0029557:	50                   	push   eax
c0029558:	e8 79 a6 fe ff       	call   c0013bd6 <Device::~Device()>
c002955d:	83 c4 10             	add    esp,0x10
c0029560:	90                   	nop
c0029561:	83 c4 0c             	add    esp,0xc
c0029564:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029566 <CPU::~CPU()>:
c0029566:	83 ec 0c             	sub    esp,0xc
c0029569:	83 ec 0c             	sub    esp,0xc
c002956c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029570:	e8 cd ff ff ff       	call   c0029542 <CPU::~CPU()>
c0029575:	83 c4 10             	add    esp,0x10
c0029578:	83 ec 08             	sub    esp,0x8
c002957b:	68 98 11 00 00       	push   0x1198
c0029580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029584:	e8 66 92 fe ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0029589:	83 c4 10             	add    esp,0x10
c002958c:	83 c4 0c             	add    esp,0xc
c002958f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029590 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029590:	90                   	nop
c0029591:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029592 <ThreadControlBlock::ThreadControlBlock()>:
c0029592:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029596:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002959d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295a1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00295a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295ac:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00295b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295b7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00295be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295c2:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00295c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295cd:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00295d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295d5:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00295d9:	90                   	nop
c00295da:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00295dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00295dc:	83 ec 0c             	sub    esp,0xc
c00295df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295e3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00295e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00295f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295f8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00295ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029603:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002960d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029618:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002961f:	83 ec 0c             	sub    esp,0xc
c0029622:	68 5a ad 02 c0       	push   0xc002ad5a
c0029627:	e8 a3 92 fe ff       	call   c00128cf <Dbg::kprintf(char const*, ...)>
c002962c:	83 c4 10             	add    esp,0x10
c002962f:	90                   	nop
c0029630:	83 c4 0c             	add    esp,0xc
c0029633:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029634 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029634:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029638:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002963b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c002963c <Vm::_FPUState::_FPUState()>:
c002963c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029640:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029647:	90                   	nop
c0029648:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002964a <PCI::~PCI()>:
c002964a:	83 ec 0c             	sub    esp,0xc
c002964d:	ba f0 d4 02 c0       	mov    edx,0xc002d4f0
c0029652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029656:	89 10                	mov    DWORD PTR [eax],edx
c0029658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002965c:	83 ec 0c             	sub    esp,0xc
c002965f:	50                   	push   eax
c0029660:	e8 41 9f fe ff       	call   c00135a6 <Bus::~Bus()>
c0029665:	83 c4 10             	add    esp,0x10
c0029668:	90                   	nop
c0029669:	83 c4 0c             	add    esp,0xc
c002966c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002966e <PCI::~PCI()>:
c002966e:	83 ec 0c             	sub    esp,0xc
c0029671:	83 ec 0c             	sub    esp,0xc
c0029674:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029678:	e8 cd ff ff ff       	call   c002964a <PCI::~PCI()>
c002967d:	83 c4 10             	add    esp,0x10
c0029680:	83 ec 08             	sub    esp,0x8
c0029683:	68 5c 01 00 00       	push   0x15c
c0029688:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002968c:	e8 5e 91 fe ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0029691:	83 c4 10             	add    esp,0x10
c0029694:	83 c4 0c             	add    esp,0xc
c0029697:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029698 <IDE::~IDE()>:
c0029698:	83 ec 0c             	sub    esp,0xc
c002969b:	ba 54 d7 02 c0       	mov    edx,0xc002d754
c00296a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296a4:	89 10                	mov    DWORD PTR [eax],edx
c00296a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296aa:	83 ec 0c             	sub    esp,0xc
c00296ad:	50                   	push   eax
c00296ae:	e8 39 aa fe ff       	call   c00140ec <HardDiskController::~HardDiskController()>
c00296b3:	83 c4 10             	add    esp,0x10
c00296b6:	90                   	nop
c00296b7:	83 c4 0c             	add    esp,0xc
c00296ba:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00296bc <IDE::~IDE()>:
c00296bc:	83 ec 0c             	sub    esp,0xc
c00296bf:	83 ec 0c             	sub    esp,0xc
c00296c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296c6:	e8 cd ff ff ff       	call   c0029698 <IDE::~IDE()>
c00296cb:	83 c4 10             	add    esp,0x10
c00296ce:	83 ec 08             	sub    esp,0x8
c00296d1:	68 70 02 00 00       	push   0x270
c00296d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296da:	e8 10 91 fe ff       	call   c00127ef <operator delete(void*, unsigned long)>
c00296df:	83 c4 10             	add    esp,0x10
c00296e2:	83 c4 0c             	add    esp,0xc
c00296e5:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00296e6 <SATABus::~SATABus()>:
c00296e6:	83 ec 0c             	sub    esp,0xc
c00296e9:	ba 34 d8 02 c0       	mov    edx,0xc002d834
c00296ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296f2:	89 10                	mov    DWORD PTR [eax],edx
c00296f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296f8:	83 ec 0c             	sub    esp,0xc
c00296fb:	50                   	push   eax
c00296fc:	e8 eb a9 fe ff       	call   c00140ec <HardDiskController::~HardDiskController()>
c0029701:	83 c4 10             	add    esp,0x10
c0029704:	90                   	nop
c0029705:	83 c4 0c             	add    esp,0xc
c0029708:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002970a <SATABus::~SATABus()>:
c002970a:	83 ec 0c             	sub    esp,0xc
c002970d:	83 ec 0c             	sub    esp,0xc
c0029710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029714:	e8 cd ff ff ff       	call   c00296e6 <SATABus::~SATABus()>
c0029719:	83 c4 10             	add    esp,0x10
c002971c:	83 ec 08             	sub    esp,0x8
c002971f:	68 64 01 00 00       	push   0x164
c0029724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029728:	e8 c2 90 fe ff       	call   c00127ef <operator delete(void*, unsigned long)>
c002972d:	83 c4 10             	add    esp,0x10
c0029730:	83 c4 0c             	add    esp,0xc
c0029733:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029734 <ATA::~ATA()>:
c0029734:	83 ec 0c             	sub    esp,0xc
c0029737:	ba 80 d8 02 c0       	mov    edx,0xc002d880
c002973c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029740:	89 10                	mov    DWORD PTR [eax],edx
c0029742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029746:	83 ec 0c             	sub    esp,0xc
c0029749:	50                   	push   eax
c002974a:	e8 8f aa fe ff       	call   c00141de <PhysicalDisk::~PhysicalDisk()>
c002974f:	83 c4 10             	add    esp,0x10
c0029752:	90                   	nop
c0029753:	83 c4 0c             	add    esp,0xc
c0029756:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029758 <ATA::~ATA()>:
c0029758:	83 ec 0c             	sub    esp,0xc
c002975b:	83 ec 0c             	sub    esp,0xc
c002975e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029762:	e8 cd ff ff ff       	call   c0029734 <ATA::~ATA()>
c0029767:	83 c4 10             	add    esp,0x10
c002976a:	83 ec 08             	sub    esp,0x8
c002976d:	68 7c 01 00 00       	push   0x17c
c0029772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029776:	e8 74 90 fe ff       	call   c00127ef <operator delete(void*, unsigned long)>
c002977b:	83 c4 10             	add    esp,0x10
c002977e:	83 c4 0c             	add    esp,0xc
c0029781:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029782 <ATAPI::~ATAPI()>:
c0029782:	83 ec 0c             	sub    esp,0xc
c0029785:	ba b8 d8 02 c0       	mov    edx,0xc002d8b8
c002978a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002978e:	89 10                	mov    DWORD PTR [eax],edx
c0029790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029794:	83 ec 0c             	sub    esp,0xc
c0029797:	50                   	push   eax
c0029798:	e8 41 aa fe ff       	call   c00141de <PhysicalDisk::~PhysicalDisk()>
c002979d:	83 c4 10             	add    esp,0x10
c00297a0:	90                   	nop
c00297a1:	83 c4 0c             	add    esp,0xc
c00297a4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00297a6 <ATAPI::~ATAPI()>:
c00297a6:	83 ec 0c             	sub    esp,0xc
c00297a9:	83 ec 0c             	sub    esp,0xc
c00297ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297b0:	e8 cd ff ff ff       	call   c0029782 <ATAPI::~ATAPI()>
c00297b5:	83 c4 10             	add    esp,0x10
c00297b8:	83 ec 08             	sub    esp,0x8
c00297bb:	68 80 01 00 00       	push   0x180
c00297c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297c4:	e8 26 90 fe ff       	call   c00127ef <operator delete(void*, unsigned long)>
c00297c9:	83 c4 10             	add    esp,0x10
c00297cc:	83 c4 0c             	add    esp,0xc
c00297cf:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00297d0 <SATA::~SATA()>:
c00297d0:	83 ec 0c             	sub    esp,0xc
c00297d3:	ba 6c d9 02 c0       	mov    edx,0xc002d96c
c00297d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297dc:	89 10                	mov    DWORD PTR [eax],edx
c00297de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297e2:	83 ec 0c             	sub    esp,0xc
c00297e5:	50                   	push   eax
c00297e6:	e8 f3 a9 fe ff       	call   c00141de <PhysicalDisk::~PhysicalDisk()>
c00297eb:	83 c4 10             	add    esp,0x10
c00297ee:	90                   	nop
c00297ef:	83 c4 0c             	add    esp,0xc
c00297f2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00297f4 <SATA::~SATA()>:
c00297f4:	83 ec 0c             	sub    esp,0xc
c00297f7:	83 ec 0c             	sub    esp,0xc
c00297fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297fe:	e8 cd ff ff ff       	call   c00297d0 <SATA::~SATA()>
c0029803:	83 c4 10             	add    esp,0x10
c0029806:	83 ec 08             	sub    esp,0x8
c0029809:	68 7c 01 00 00       	push   0x17c
c002980e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029812:	e8 d8 8f fe ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0029817:	83 c4 10             	add    esp,0x10
c002981a:	83 c4 0c             	add    esp,0xc
c002981d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002981e <SATAPI::~SATAPI()>:
c002981e:	83 ec 0c             	sub    esp,0xc
c0029821:	ba 48 da 02 c0       	mov    edx,0xc002da48
c0029826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002982a:	89 10                	mov    DWORD PTR [eax],edx
c002982c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029830:	83 ec 0c             	sub    esp,0xc
c0029833:	50                   	push   eax
c0029834:	e8 a5 a9 fe ff       	call   c00141de <PhysicalDisk::~PhysicalDisk()>
c0029839:	83 c4 10             	add    esp,0x10
c002983c:	90                   	nop
c002983d:	83 c4 0c             	add    esp,0xc
c0029840:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029842 <SATAPI::~SATAPI()>:
c0029842:	83 ec 0c             	sub    esp,0xc
c0029845:	83 ec 0c             	sub    esp,0xc
c0029848:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002984c:	e8 cd ff ff ff       	call   c002981e <SATAPI::~SATAPI()>
c0029851:	83 c4 10             	add    esp,0x10
c0029854:	83 ec 08             	sub    esp,0x8
c0029857:	68 80 01 00 00       	push   0x180
c002985c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029860:	e8 8a 8f fe ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0029865:	83 c4 10             	add    esp,0x10
c0029868:	83 c4 0c             	add    esp,0xc
c002986b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002986c <AVX::~AVX()>:
c002986c:	83 ec 0c             	sub    esp,0xc
c002986f:	ba 88 da 02 c0       	mov    edx,0xc002da88
c0029874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029878:	89 10                	mov    DWORD PTR [eax],edx
c002987a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002987e:	83 ec 0c             	sub    esp,0xc
c0029881:	50                   	push   eax
c0029882:	e8 db a9 fe ff       	call   c0014262 <FPU::~FPU()>
c0029887:	83 c4 10             	add    esp,0x10
c002988a:	90                   	nop
c002988b:	83 c4 0c             	add    esp,0xc
c002988e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029890 <AVX::~AVX()>:
c0029890:	83 ec 0c             	sub    esp,0xc
c0029893:	83 ec 0c             	sub    esp,0xc
c0029896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002989a:	e8 cd ff ff ff       	call   c002986c <AVX::~AVX()>
c002989f:	83 c4 10             	add    esp,0x10
c00298a2:	83 ec 08             	sub    esp,0x8
c00298a5:	68 58 01 00 00       	push   0x158
c00298aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298ae:	e8 3c 8f fe ff       	call   c00127ef <operator delete(void*, unsigned long)>
c00298b3:	83 c4 10             	add    esp,0x10
c00298b6:	83 c4 0c             	add    esp,0xc
c00298b9:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00298ba <MMX::~MMX()>:
c00298ba:	83 ec 0c             	sub    esp,0xc
c00298bd:	ba c8 da 02 c0       	mov    edx,0xc002dac8
c00298c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298c6:	89 10                	mov    DWORD PTR [eax],edx
c00298c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298cc:	83 ec 0c             	sub    esp,0xc
c00298cf:	50                   	push   eax
c00298d0:	e8 8d a9 fe ff       	call   c0014262 <FPU::~FPU()>
c00298d5:	83 c4 10             	add    esp,0x10
c00298d8:	90                   	nop
c00298d9:	83 c4 0c             	add    esp,0xc
c00298dc:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00298de <MMX::~MMX()>:
c00298de:	83 ec 0c             	sub    esp,0xc
c00298e1:	83 ec 0c             	sub    esp,0xc
c00298e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298e8:	e8 cd ff ff ff       	call   c00298ba <MMX::~MMX()>
c00298ed:	83 c4 10             	add    esp,0x10
c00298f0:	83 ec 08             	sub    esp,0x8
c00298f3:	68 58 01 00 00       	push   0x158
c00298f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298fc:	e8 ee 8e fe ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0029901:	83 c4 10             	add    esp,0x10
c0029904:	83 c4 0c             	add    esp,0xc
c0029907:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029908 <SSE::~SSE()>:
c0029908:	83 ec 0c             	sub    esp,0xc
c002990b:	ba 08 db 02 c0       	mov    edx,0xc002db08
c0029910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029914:	89 10                	mov    DWORD PTR [eax],edx
c0029916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002991a:	83 ec 0c             	sub    esp,0xc
c002991d:	50                   	push   eax
c002991e:	e8 3f a9 fe ff       	call   c0014262 <FPU::~FPU()>
c0029923:	83 c4 10             	add    esp,0x10
c0029926:	90                   	nop
c0029927:	83 c4 0c             	add    esp,0xc
c002992a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002992c <SSE::~SSE()>:
c002992c:	83 ec 0c             	sub    esp,0xc
c002992f:	83 ec 0c             	sub    esp,0xc
c0029932:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029936:	e8 cd ff ff ff       	call   c0029908 <SSE::~SSE()>
c002993b:	83 c4 10             	add    esp,0x10
c002993e:	83 ec 08             	sub    esp,0x8
c0029941:	68 58 01 00 00       	push   0x158
c0029946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002994a:	e8 a0 8e fe ff       	call   c00127ef <operator delete(void*, unsigned long)>
c002994f:	83 c4 10             	add    esp,0x10
c0029952:	83 c4 0c             	add    esp,0xc
c0029955:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029956 <x87::~x87()>:
c0029956:	83 ec 0c             	sub    esp,0xc
c0029959:	ba 48 db 02 c0       	mov    edx,0xc002db48
c002995e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029962:	89 10                	mov    DWORD PTR [eax],edx
c0029964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029968:	83 ec 0c             	sub    esp,0xc
c002996b:	50                   	push   eax
c002996c:	e8 f1 a8 fe ff       	call   c0014262 <FPU::~FPU()>
c0029971:	83 c4 10             	add    esp,0x10
c0029974:	90                   	nop
c0029975:	83 c4 0c             	add    esp,0xc
c0029978:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002997a <x87::~x87()>:
c002997a:	83 ec 0c             	sub    esp,0xc
c002997d:	83 ec 0c             	sub    esp,0xc
c0029980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029984:	e8 cd ff ff ff       	call   c0029956 <x87::~x87()>
c0029989:	83 c4 10             	add    esp,0x10
c002998c:	83 ec 08             	sub    esp,0x8
c002998f:	68 58 01 00 00       	push   0x158
c0029994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029998:	e8 52 8e fe ff       	call   c00127ef <operator delete(void*, unsigned long)>
c002999d:	83 c4 10             	add    esp,0x10
c00299a0:	83 c4 0c             	add    esp,0xc
c00299a3:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00299a4 <IOAPIC::~IOAPIC()>:
c00299a4:	83 ec 0c             	sub    esp,0xc
c00299a7:	ba a0 dc 02 c0       	mov    edx,0xc002dca0
c00299ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299b0:	89 10                	mov    DWORD PTR [eax],edx
c00299b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299b6:	83 ec 0c             	sub    esp,0xc
c00299b9:	50                   	push   eax
c00299ba:	e8 17 a2 fe ff       	call   c0013bd6 <Device::~Device()>
c00299bf:	83 c4 10             	add    esp,0x10
c00299c2:	90                   	nop
c00299c3:	83 c4 0c             	add    esp,0xc
c00299c6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00299c8 <IOAPIC::~IOAPIC()>:
c00299c8:	83 ec 0c             	sub    esp,0xc
c00299cb:	83 ec 0c             	sub    esp,0xc
c00299ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299d2:	e8 cd ff ff ff       	call   c00299a4 <IOAPIC::~IOAPIC()>
c00299d7:	83 c4 10             	add    esp,0x10
c00299da:	83 ec 08             	sub    esp,0x8
c00299dd:	68 68 01 00 00       	push   0x168
c00299e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299e6:	e8 04 8e fe ff       	call   c00127ef <operator delete(void*, unsigned long)>
c00299eb:	83 c4 10             	add    esp,0x10
c00299ee:	83 c4 0c             	add    esp,0xc
c00299f1:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00299f2 <APIC::~APIC()>:
c00299f2:	83 ec 0c             	sub    esp,0xc
c00299f5:	ba 58 dc 02 c0       	mov    edx,0xc002dc58
c00299fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299fe:	89 10                	mov    DWORD PTR [eax],edx
c0029a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a04:	83 ec 0c             	sub    esp,0xc
c0029a07:	50                   	push   eax
c0029a08:	e8 1f ad fe ff       	call   c001472c <InterruptController::~InterruptController()>
c0029a0d:	83 c4 10             	add    esp,0x10
c0029a10:	90                   	nop
c0029a11:	83 c4 0c             	add    esp,0xc
c0029a14:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029a16 <APIC::~APIC()>:
c0029a16:	83 ec 0c             	sub    esp,0xc
c0029a19:	83 ec 0c             	sub    esp,0xc
c0029a1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a20:	e8 cd ff ff ff       	call   c00299f2 <APIC::~APIC()>
c0029a25:	83 c4 10             	add    esp,0x10
c0029a28:	83 ec 08             	sub    esp,0x8
c0029a2b:	68 58 21 00 00       	push   0x2158
c0029a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a34:	e8 b6 8d fe ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0029a39:	83 c4 10             	add    esp,0x10
c0029a3c:	83 c4 0c             	add    esp,0xc
c0029a3f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029a40 <PIC::~PIC()>:
c0029a40:	83 ec 0c             	sub    esp,0xc
c0029a43:	ba f0 dc 02 c0       	mov    edx,0xc002dcf0
c0029a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a4c:	89 10                	mov    DWORD PTR [eax],edx
c0029a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a52:	83 ec 0c             	sub    esp,0xc
c0029a55:	50                   	push   eax
c0029a56:	e8 d1 ac fe ff       	call   c001472c <InterruptController::~InterruptController()>
c0029a5b:	83 c4 10             	add    esp,0x10
c0029a5e:	90                   	nop
c0029a5f:	83 c4 0c             	add    esp,0xc
c0029a62:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029a64 <PIC::~PIC()>:
c0029a64:	83 ec 0c             	sub    esp,0xc
c0029a67:	83 ec 0c             	sub    esp,0xc
c0029a6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a6e:	e8 cd ff ff ff       	call   c0029a40 <PIC::~PIC()>
c0029a73:	83 c4 10             	add    esp,0x10
c0029a76:	83 ec 08             	sub    esp,0x8
c0029a79:	68 58 21 00 00       	push   0x2158
c0029a7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a82:	e8 68 8d fe ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0029a87:	83 c4 10             	add    esp,0x10
c0029a8a:	83 c4 0c             	add    esp,0xc
c0029a8d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029a8e <APICTimer::~APICTimer()>:
c0029a8e:	83 ec 0c             	sub    esp,0xc
c0029a91:	ba 44 dd 02 c0       	mov    edx,0xc002dd44
c0029a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a9a:	89 10                	mov    DWORD PTR [eax],edx
c0029a9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aa0:	83 ec 0c             	sub    esp,0xc
c0029aa3:	50                   	push   eax
c0029aa4:	e8 13 cd fe ff       	call   c00167bc <Timer::~Timer()>
c0029aa9:	83 c4 10             	add    esp,0x10
c0029aac:	90                   	nop
c0029aad:	83 c4 0c             	add    esp,0xc
c0029ab0:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029ab2 <APICTimer::~APICTimer()>:
c0029ab2:	83 ec 0c             	sub    esp,0xc
c0029ab5:	83 ec 0c             	sub    esp,0xc
c0029ab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029abc:	e8 cd ff ff ff       	call   c0029a8e <APICTimer::~APICTimer()>
c0029ac1:	83 c4 10             	add    esp,0x10
c0029ac4:	83 ec 08             	sub    esp,0x8
c0029ac7:	68 60 01 00 00       	push   0x160
c0029acc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ad0:	e8 1a 8d fe ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0029ad5:	83 c4 10             	add    esp,0x10
c0029ad8:	83 c4 0c             	add    esp,0xc
c0029adb:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029adc <PIT::~PIT()>:
c0029adc:	83 ec 0c             	sub    esp,0xc
c0029adf:	ba 94 dd 02 c0       	mov    edx,0xc002dd94
c0029ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ae8:	89 10                	mov    DWORD PTR [eax],edx
c0029aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aee:	83 ec 0c             	sub    esp,0xc
c0029af1:	50                   	push   eax
c0029af2:	e8 c5 cc fe ff       	call   c00167bc <Timer::~Timer()>
c0029af7:	83 c4 10             	add    esp,0x10
c0029afa:	90                   	nop
c0029afb:	83 c4 0c             	add    esp,0xc
c0029afe:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029b00 <PIT::~PIT()>:
c0029b00:	83 ec 0c             	sub    esp,0xc
c0029b03:	83 ec 0c             	sub    esp,0xc
c0029b06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b0a:	e8 cd ff ff ff       	call   c0029adc <PIT::~PIT()>
c0029b0f:	83 c4 10             	add    esp,0x10
c0029b12:	83 ec 08             	sub    esp,0x8
c0029b15:	68 5c 01 00 00       	push   0x15c
c0029b1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b1e:	e8 cc 8c fe ff       	call   c00127ef <operator delete(void*, unsigned long)>
c0029b23:	83 c4 10             	add    esp,0x10
c0029b26:	83 c4 0c             	add    esp,0xc
c0029b29:	c3                   	ret    
