
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d4 7a 00 00       	call   c0007af4 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 a8 22 02 c0       	mov    eax,0xc00222a8
c0000025:	3d a8 22 02 c0       	cmp    eax,0xc00222a8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 a8 22 02 c0       	push   0xc00222a8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 a8 22 02 c0       	mov    eax,0xc00222a8
c0000051:	2d a8 22 02 c0       	sub    eax,0xc00222a8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 a8 22 02 c0       	push   0xc00222a8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 40 02 c0 00 	cmp    BYTE PTR ds:0xc00240c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 5c f2 01 c0       	mov    ebx,0xc001f25c
c0000097:	81 eb 58 f2 01 c0    	sub    ebx,0xc001f258
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 58 f2 01 c0       	mov    esi,0xc001f258
c00000a6:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 40 02 c0       	mov    ds:0xc00240c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 40 02 c0       	mov    eax,ds:0xc00240c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 a8 22 02 c0       	push   0xc00222a8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 40 02 c0 01 	mov    BYTE PTR ds:0xc00240c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 40 02 c0       	push   0xc00240c8
c0000108:	68 a8 22 02 c0       	push   0xc00222a8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 9b 45 01 00       	call   c0014848 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 45 a4 00 00       	call   c000a70a <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 79 45 01 00       	call   c0014848 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 82 4a 01 00       	call   c0014d70 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 41 51 01 00       	call   c0015438 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 4e 02 c0 	lgdtd  ds:0xc0024ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 cb 04 01 00       	jmp    c001084a <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 40 02 c0       	mov    ds:0xc00240e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 40 02 c0    	mov    DWORD PTR ds:0xc00240e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 40 02 c0    	mov    ebx,DWORD PTR ds:0xc00240e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 60 f2 01 c0 02 	test   BYTE PTR [edx-0x3ffe0da0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 60 f2 01 c0 01 	test   BYTE PTR [edx-0x3ffe0da0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 60 f2 01 c0 08 	test   BYTE PTR [edx-0x3ffe0da0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 60 f2 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0da0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 60 f2 01 c0 01 	test   BYTE PTR [edx-0x3ffe0da0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 41 02 c0    	mov    ecx,DWORD PTR ds:0xc0024100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 41 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbefc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbefc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 41 02 c0    	mov    DWORD PTR ds:0xc0024100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 41 02 c0    	mov    ecx,DWORD PTR ds:0xc002413c
c0000df7:	c7 42 0c 34 41 02 c0 	mov    DWORD PTR [edx+0xc],0xc0024134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 41 02 c0 02 	test   BYTE PTR ds:0xc0024100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 94 6a 00 00       	call   c000796c <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 d9 69 00 00       	call   c000796c <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 c3 69 00 00       	call   c000796c <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 9f 69 00 00       	call   c000796c <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 41 02 c0    	mov    edi,DWORD PTR ds:0xc0024100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 41 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbefc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 41 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbefc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 41 02 c0 	lea    edx,[eax*8-0x3ffdbecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024140
c0001176:	81 fb 34 41 02 c0    	cmp    ebx,0xc0024134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 41 02 c0       	cmp    eax,0xc0024134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 41 02 c0    	cmp    DWORD PTR ds:0xc0024130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 41 02 c0       	mov    ds:0xc002413c,eax
c00011b2:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011b7:	a3 30 41 02 c0       	mov    ds:0xc0024130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c00011c5:	c7 40 0c 34 41 02 c0 	mov    DWORD PTR [eax+0xc],0xc0024134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 41 02 c0       	mov    ds:0xc0024140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 41 02 c0 	mov    DWORD PTR [eax+0x8],0xc0024134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 40 02 c0 	lea    ebp,[edx*4-0x3ffdbf08]
c0001216:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 41 02 c0 	lea    ecx,[edx*4-0x3ffdbf00]
c0001231:	8b 14 95 00 41 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 44 02 c0 	or     DWORD PTR [edi*4-0x3ffdbbcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 41 02 c0 	lea    eax,[eax*8-0x3ffdbecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,ecx
c00012eb:	89 0d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ecx
c00012f1:	c7 41 08 34 41 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0024134
c00012f8:	c7 41 0c 34 41 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0024134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 41 02 c0 	lea    edx,[ecx*8-0x3ffdbed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 44 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbbcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 41 02 c0 	lea    edx,[eax*4-0x3ffdbed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 44 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbbcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 41 02 c0    	mov    DWORD PTR ds:0xc002413c,edi
c00013be:	89 3d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,edi
c00013c4:	c7 47 08 34 41 02 c0 	mov    DWORD PTR [edi+0x8],0xc0024134
c00013cb:	c7 47 0c 34 41 02 c0 	mov    DWORD PTR [edi+0xc],0xc0024134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 41 02 c0    	mov    DWORD PTR ds:0xc0024130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 41 02 c0       	mov    edx,0xc0024100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 44 02 c0    	mov    ebx,DWORD PTR ds:0xc0024454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 44 02 c0    	mov    DWORD PTR ds:0xc0024454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 41 02 c0    	cmp    DWORD PTR ds:0xc002412c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 41 02 c0    	mov    DWORD PTR ds:0xc002412c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 41 02 c0       	mov    eax,0xc0024100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 44 02 c0    	push   DWORD PTR ds:0xc002445c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 41 02 c0 00 	cmp    DWORD PTR ds:0xc0024100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 44 02 c0       	mov    eax,ds:0xc002445c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 41 02 c0 00 	cmp    DWORD PTR ds:0xc002412c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 41 02 c0       	mov    eax,ds:0xc002412c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 41 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbefc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 41 02 c0       	mov    eax,0xc0024134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 44 02 c0       	cmp    eax,0xc002442c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 44 02 c0       	mov    eax,ds:0xc0024468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 44 02 c0    	mov    esi,DWORD PTR ds:0xc0024474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 41 02 c0       	mov    eax,0xc0024100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 64 f3 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0c9c]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 41 02 c0       	mov    eax,ds:0xc0024100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 41 02 c0       	mov    ds:0xc0024100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 44 02 c0    	mov    DWORD PTR ds:0xc0024444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 44 02 c0    	mov    DWORD PTR ds:0xc0024448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 44 02 c0    	mov    DWORD PTR ds:0xc002444c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 44 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 52 6b 01 00       	jmp    c00188f4 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 7c 6b 01 00       	jmp    c0018934 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 c0 82 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd7d40]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 9d 6b 01 00       	jmp    c0018974 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 c0 f4 01 c0 	movzx  eax,BYTE PTR [esi-0x3ffe0b40]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 c0 f4 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0b40]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba a4 15 02 c0       	mov    edx,0xc00215a4
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 7c f3 01 c0       	mov    edx,0xc001f37c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 44 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbb60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 44 02 c0    	mov    ax,ds:0xc0024480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 44 02 c0    	mov    ds:0xc0024480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 82 f3 01 c0       	mov    eax,0xc001f382
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 40 f4 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0bc0]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 8b f3 01 c0       	mov    eax,0xc001f38b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 c0 f4 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0b40]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbb60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 44 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbb60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 10 f4 01 c0       	mov    eax,0xc001f410
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 44 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbb60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb 00 f4 01 c0       	mov    ebx,0xc001f400
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 e0 f3 01 c0       	mov    eax,0xc001f3e0
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 f0 f3 01 c0       	mov    eax,0xc001f3f0
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 92 f3 01 c0       	mov    edx,0xc001f392
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 9e f3 01 c0       	mov    edx,0xc001f39e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba b2 f3 01 c0       	mov    edx,0xc001f3b2
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 6b 1e 00 00       	call   c0007a9a <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 63 1e 00 00       	call   c0007aaa <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c e0 f7 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f7e0
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 e0 f7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f7e0
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 e0 f5 01 c0       	mov    eax,0xc001f5e0
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 20 f5 01 c0       	mov    eax,0xc001f520
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 e0 f4 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0b20]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 e0 f8 01 c0       	push   0xc001f8e0
c000611b:	e8 70 31 01 00       	call   c0019290 <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbfe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 ee f8 01 c0       	push   0xc001f8ee
c0006153:	e8 38 31 01 00       	call   c0019290 <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 45 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdba30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 40 02 c0 	movsx  eax,BYTE PTR ds:0xc0024060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 a1 30 01 00       	call   c0019234 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 40 02 c0       	mov    eax,0xc0024080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 40 02 c0       	mov    eax,0xc0024020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 4e 02 c0    	mov    ebp,DWORD PTR ds:0xc0024eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 fd f8 01 c0       	push   0xc001f8fd
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 4e 02 c0       	mov    ecx,0xc0024e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 45 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdbac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdbac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbabc],esi
c000655e:	89 87 40 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbac0],eax
c0006564:	c7 87 48 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdbab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 45 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdba30],0x0
c0006580:	89 87 4c 45 02 c0    	mov    DWORD PTR [edi-0x3ffdbab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 45 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdbac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 45 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdba30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c00065f9:	8b 8d 4c 45 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdbab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 45 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdbac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 40 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbfe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 45 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdbab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 45 02 c0    	add    DWORD PTR [ebp-0x3ffdbab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 45 02 c0    	lea    ecx,[ebp-0x3ffdbac0]
c00066f1:	83 bd 40 45 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdbac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 45 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdbab4]
c000672f:	05 40 45 02 c0       	add    eax,0xc0024540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdbac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 45 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdba30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 45 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdbab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdbac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 45 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdba30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 45 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdbab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 45 02 c0    	lea    edi,[eax-0x3ffdbac0]
c00067ee:	83 b8 40 45 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdbac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 00 f9 01 c0       	push   0xc001f900
c0006812:	e8 79 2a 01 00       	call   c0019290 <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 8d 2a 01 00       	call   c00192ac <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 05 f9 01 c0 	mov    DWORD PTR [esp],0xc001f905
c000682c:	e8 5f 2a 01 00       	call   c0019290 <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbac0]
c0006838:	e8 6f 2a 01 00       	call   c00192ac <iso_kprintfd>
c000683d:	c7 04 24 0b f9 01 c0 	mov    DWORD PTR [esp],0xc001f90b
c0006844:	e8 47 2a 01 00       	call   c0019290 <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 45 02 c0    	push   DWORD PTR [ebx-0x3ffdbabc]
c0006850:	e8 57 2a 01 00       	call   c00192ac <iso_kprintfd>
c0006855:	c7 04 24 11 f9 01 c0 	mov    DWORD PTR [esp],0xc001f911
c000685c:	e8 2f 2a 01 00       	call   c0019290 <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 45 02 c0    	push   DWORD PTR [ebx-0x3ffdba30]
c0006868:	e8 3f 2a 01 00       	call   c00192ac <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 45 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdbab8]
c00068ce:	81 c2 40 45 02 c0    	add    edx,0xc0024540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 40 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdbf80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 45 02 c0    	lea    ebp,[eax-0x3ffdbaa8]
c000692a:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 45 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdbaa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 fd f8 01 c0       	push   0xc001f8fd
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 45 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdbaad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbab0],eax
c0006a06:	89 93 54 45 02 c0    	mov    DWORD PTR [ebx-0x3ffdbaac],edx
c0006a0c:	81 c3 40 45 02 c0    	add    ebx,0xc0024540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 45 02 c0       	add    eax,0xc0024550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 1a f9 01 c0       	push   0xc001f91a
c0006a31:	e8 5a 28 01 00       	call   c0019290 <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 40 02 c0       	mov    ds:0xc0024060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb4,0x0
c0006a66:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 40 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbf80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 25 f9 01 c0       	push   0xc001f925
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 4e 02 c0       	mov    ds:0xc0024eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 4e 02 c0 00 	cmp    DWORD PTR ds:0xc0024eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 4e 02 c0       	mov    eax,ds:0xc0024eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 40 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdbf80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 2c f9 01 c0       	push   0xc001f92c
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 40 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdbf80]
c0006b04:	bf 80 4e 02 c0       	mov    edi,0xc0024e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 4e 02 c0       	mov    eax,0xc0024e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 4e 02 c0       	mov    ds:0xc0024ea8,eax
c0006b27:	b8 8a 4e 02 c0       	mov    eax,0xc0024e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 4e 02 c0       	mov    ds:0xc0024ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 33 f9 01 c0       	push   0xc001f933
c0006b48:	e8 43 27 01 00       	call   c0019290 <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 3e f9 01 c0       	push   0xc001f93e
c0006b63:	e8 28 27 01 00       	call   c0019290 <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 45 02 c0       	push   0xc0024540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 45 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0024540,0xffffffff
c0006b8d:	e8 08 0f 00 00       	call   c0007a9a <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 4e 02 c0       	mov    ds:0xc0024eb0,eax
c0006b9e:	e8 f7 0e 00 00       	call   c0007a9a <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 45 02 c0       	mov    ds:0xc0024520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 e2 0e 00 00       	call   c0007a9a <malloc>
c0006bb8:	89 04 9d 80 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbf80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 c9 0e 00 00       	call   c0007a9a <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbf80]
c0006bfe:	e8 a7 0e 00 00       	call   c0007aaa <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 40 02 c0 	push   DWORD PTR [ebx*4-0x3ffdbfe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 99 0e 00 00       	call   c0007aaa <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 4e 02 c0       	mov    eax,ds:0xc0024eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 7f 0e 00 00       	call   c0007aaa <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 45 02 c0       	mov    eax,ds:0xc0024520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 6a 0e 00 00       	call   c0007aaa <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 45 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024520,0x0
c0006c4d:	c7 05 b0 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c73:	83 ec 0c             	sub    esp,0xc
c0006c76:	50                   	push   eax
c0006c77:	e8 58 52 00 00       	call   c000bed4 <Device::closeAll()>
c0006c7c:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c82:	83 c4 10             	add    esp,0x10
c0006c85:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c87:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c8b:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c93:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006c9b:	5b                   	pop    ebx
c0006c9c:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006c9f:	5e                   	pop    esi
c0006ca0:	5f                   	pop    edi
c0006ca1:	ff e0                	jmp    eax

c0006ca3 <Krnl::firstTask()>:
c0006ca3:	53                   	push   ebx
c0006ca4:	83 ec 14             	sub    esp,0x14
c0006ca7:	fb                   	sti    
c0006ca8:	68 4f f9 01 c0       	push   0xc001f94f
c0006cad:	e8 30 95 00 00       	call   c00101e2 <KeSetBootMessage(char const*)>
c0006cb2:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cb9:	e8 dc 0d 00 00       	call   c0007a9a <malloc>
c0006cbe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cc5:	89 c3                	mov    ebx,eax
c0006cc7:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0006ccc:	50                   	push   eax
c0006ccd:	68 68 f9 01 c0       	push   0xc001f968
c0006cd2:	6a 01                	push   0x1
c0006cd4:	53                   	push   ebx
c0006cd5:	e8 c2 de 00 00       	call   c0014b9c <Process::Process(bool, char const*, Process*, char**)>
c0006cda:	83 c4 20             	add    esp,0x20
c0006cdd:	68 ff 00 00 00       	push   0xff
c0006ce2:	6a 00                	push   0x0
c0006ce4:	68 e3 74 00 c0       	push   0xc00074e3
c0006ce9:	53                   	push   ebx
c0006cea:	e8 d1 e0 00 00       	call   c0014dc0 <Process::createThread(void (*)(void*), void*, int)>
c0006cef:	8b 15 90 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028190
c0006cf5:	6a 7a                	push   0x7a
c0006cf7:	6a 00                	push   0x0
c0006cf9:	68 a8 58 01 c0       	push   0xc00158a8
c0006cfe:	52                   	push   edx
c0006cff:	e8 bc e0 00 00       	call   c0014dc0 <Process::createThread(void (*)(void*), void*, int)>
c0006d04:	83 c4 20             	add    esp,0x20
c0006d07:	a3 48 81 02 c0       	mov    ds:0xc0028148,eax
c0006d0c:	c6 05 bd 4e 02 c0 01 	mov    BYTE PTR ds:0xc0024ebd,0x1
c0006d13:	e8 00 9d 00 00       	call   c0010a18 <KeInitRand()>
c0006d18:	83 ec 0c             	sub    esp,0xc
c0006d1b:	68 64 fa 01 c0       	push   0xc001fa64
c0006d20:	e8 bd 94 00 00       	call   c00101e2 <KeSetBootMessage(char const*)>
c0006d25:	e8 a1 ef 00 00       	call   c0015ccb <Vm::initialise8086()>
c0006d2a:	e8 f5 3f 00 00       	call   c000ad24 <Fs::initVFS()>
c0006d2f:	c7 04 24 75 f9 01 c0 	mov    DWORD PTR [esp],0xc001f975
c0006d36:	e8 a7 94 00 00       	call   c00101e2 <KeSetBootMessage(char const*)>
c0006d3b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d40:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d46:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d48:	6a 00                	push   0x0
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	50                   	push   eax
c0006d4f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d52:	83 c4 14             	add    esp,0x14
c0006d55:	68 64 fa 01 c0       	push   0xc001fa64
c0006d5a:	e8 83 94 00 00       	call   c00101e2 <KeSetBootMessage(char const*)>
c0006d5f:	e8 5e 99 00 00       	call   c00106c2 <Krnl::loadSystemEnv()>
c0006d64:	e8 bb 9b 00 00       	call   c0010924 <Krnl::setupPowerManager()>
c0006d69:	83 c4 0c             	add    esp,0xc
c0006d6c:	6a 3a                	push   0x3a
c0006d6e:	68 8f f9 01 c0       	push   0xc001f98f
c0006d73:	68 98 f9 01 c0       	push   0xc001f998
c0006d78:	e8 6b c1 00 00       	call   c0012ee8 <Reg::readIntWithDefault(char*, char*, int)>
c0006d7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d80:	e8 af 4a 00 00       	call   c000b834 <User::loadClockSettings(int)>
c0006d85:	c7 04 24 88 fa 01 c0 	mov    DWORD PTR [esp],0xc001fa88
c0006d8c:	e8 51 94 00 00       	call   c00101e2 <KeSetBootMessage(char const*)>
c0006d91:	59                   	pop    ecx
c0006d92:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0006d97:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006d9d:	53                   	push   ebx
c0006d9e:	e8 2f 51 00 00       	call   c000bed2 <Device::loadDriversForAll()>
c0006da3:	c7 04 24 a0 f9 01 c0 	mov    DWORD PTR [esp],0xc001f9a0
c0006daa:	e8 33 94 00 00       	call   c00101e2 <KeSetBootMessage(char const*)>
c0006daf:	58                   	pop    eax
c0006db0:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c0006db6:	5a                   	pop    edx
c0006db7:	6a 01                	push   0x1
c0006db9:	68 b1 f9 01 c0       	push   0xc001f9b1
c0006dbe:	e8 f3 d7 00 00       	call   c00145b6 <Thr::loadDLL(char const*, bool)>
c0006dc3:	59                   	pop    ecx
c0006dc4:	5a                   	pop    edx
c0006dc5:	53                   	push   ebx
c0006dc6:	50                   	push   eax
c0006dc7:	e8 1b da 00 00       	call   c00147e7 <Thr::executeDLL(unsigned long, void*)>
c0006dcc:	83 c4 10             	add    esp,0x10
c0006dcf:	83 ec 0c             	sub    esp,0xc
c0006dd2:	6a 02                	push   0x2
c0006dd4:	e8 4b e4 00 00       	call   c0015224 <blockTask(TaskState)>
c0006dd9:	83 c4 10             	add    esp,0x10
c0006ddc:	eb f1                	jmp    c0006dcf <Krnl::firstTask()+0x12c>

c0006dde <Computer::Computer()>:
c0006dde:	83 ec 0c             	sub    esp,0xc
c0006de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006de5:	83 ec 08             	sub    esp,0x8
c0006de8:	68 cd f9 01 c0       	push   0xc001f9cd
c0006ded:	50                   	push   eax
c0006dee:	e8 5b 51 00 00       	call   c000bf4e <Device::Device(char const*)>
c0006df3:	83 c4 10             	add    esp,0x10
c0006df6:	ba b0 fa 01 c0       	mov    edx,0xc001fab0
c0006dfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dff:	89 10                	mov    DWORD PTR [eax],edx
c0006e01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e05:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e13:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e21:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e27:	83 ca 04             	or     edx,0x4
c0006e2a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e34:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e3a:	0f b6 d0             	movzx  edx,al
c0006e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e41:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e52:	0f b6 d0             	movzx  edx,al
c0006e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e59:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e62:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e68:	8d 50 01             	lea    edx,[eax+0x1]
c0006e6b:	88 d1                	mov    cl,dl
c0006e6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e71:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e77:	0f b6 d0             	movzx  edx,al
c0006e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e7e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e82:	83 e1 3f             	and    ecx,0x3f
c0006e85:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e89:	90                   	nop
c0006e8a:	83 c4 0c             	add    esp,0xc
c0006e8d:	c3                   	ret    

c0006e8e <Computer::setBootMessage(char const*)>:
c0006e8e:	c3                   	ret    
c0006e8f:	90                   	nop

c0006e90 <Computer::detectFeatures()>:
c0006e90:	55                   	push   ebp
c0006e91:	57                   	push   edi
c0006e92:	56                   	push   esi
c0006e93:	53                   	push   ebx
c0006e94:	83 ec 1c             	sub    esp,0x1c
c0006e97:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006e9b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea1:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006ea7:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006ead:	e8 47 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eb2:	31 d2                	xor    edx,edx
c0006eb4:	85 c0                	test   eax,eax
c0006eb6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ebc:	0f 95 c2             	setne  dl
c0006ebf:	83 e0 fd             	and    eax,0xfffffffd
c0006ec2:	d1 e2                	shl    edx,1
c0006ec4:	09 d0                	or     eax,edx
c0006ec6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ecc:	a8 02                	test   al,0x2
c0006ece:	75 51                	jne    c0006f21 <Computer::detectFeatures()+0x91>
c0006ed0:	f6 05 d1 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed1,0x4
c0006ed7:	74 0f                	je     c0006ee8 <Computer::detectFeatures()+0x58>
c0006ed9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006edf:	83 e0 fb             	and    eax,0xfffffffb
c0006ee2:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ee8:	e8 69 73 01 00       	call   c001e256 <x87Detect>
c0006eed:	83 e0 01             	and    eax,0x1
c0006ef0:	c1 e0 04             	shl    eax,0x4
c0006ef3:	89 c2                	mov    edx,eax
c0006ef5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006efb:	83 e0 ef             	and    eax,0xffffffef
c0006efe:	09 d0                	or     eax,edx
c0006f00:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f06:	88 c2                	mov    dl,al
c0006f08:	a8 10                	test   al,0x10
c0006f0a:	0f 85 33 01 00 00    	jne    c0007043 <Computer::detectFeatures()+0x1b3>
c0006f10:	80 e2 80             	and    dl,0x80
c0006f13:	0f 85 4c 01 00 00    	jne    c0007065 <Computer::detectFeatures()+0x1d5>
c0006f19:	83 c4 1c             	add    esp,0x1c
c0006f1c:	5b                   	pop    ebx
c0006f1d:	5e                   	pop    esi
c0006f1e:	5f                   	pop    edi
c0006f1f:	5d                   	pop    ebp
c0006f20:	c3                   	ret    
c0006f21:	83 ec 0c             	sub    esp,0xc
c0006f24:	6a 20                	push   0x20
c0006f26:	e8 cd 87 00 00       	call   c000f6f8 <CPU::cpuidCheckEDX(unsigned int)>
c0006f2b:	83 e0 01             	and    eax,0x1
c0006f2e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f35:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f3b:	83 e0 f7             	and    eax,0xfffffff7
c0006f3e:	09 d0                	or     eax,edx
c0006f40:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f46:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f4d:	e8 a6 87 00 00       	call   c000f6f8 <CPU::cpuidCheckEDX(unsigned int)>
c0006f52:	89 c2                	mov    edx,eax
c0006f54:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f5a:	83 e2 01             	and    edx,0x1
c0006f5d:	83 e0 fe             	and    eax,0xfffffffe
c0006f60:	09 d0                	or     eax,edx
c0006f62:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f68:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f6f:	e8 84 87 00 00       	call   c000f6f8 <CPU::cpuidCheckEDX(unsigned int)>
c0006f74:	89 c2                	mov    edx,eax
c0006f76:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f7c:	c1 e2 07             	shl    edx,0x7
c0006f7f:	83 e0 7f             	and    eax,0x7f
c0006f82:	09 d0                	or     eax,edx
c0006f84:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f8a:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f91:	e8 62 87 00 00       	call   c000f6f8 <CPU::cpuidCheckEDX(unsigned int)>
c0006f96:	83 c4 10             	add    esp,0x10
c0006f99:	83 e0 01             	and    eax,0x1
c0006f9c:	c1 e0 05             	shl    eax,0x5
c0006f9f:	89 c2                	mov    edx,eax
c0006fa1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fa7:	83 e0 df             	and    eax,0xffffffdf
c0006faa:	09 d0                	or     eax,edx
c0006fac:	f7 05 d0 4e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024ed0,0x401
c0006fb6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fbc:	0f 84 c9 00 00 00    	je     c000708b <Computer::detectFeatures()+0x1fb>
c0006fc2:	83 e0 fe             	and    eax,0xfffffffe
c0006fc5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fcb:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd1:	89 c2                	mov    edx,eax
c0006fd3:	83 e2 09             	and    edx,0x9
c0006fd6:	83 fa 01             	cmp    edx,0x1
c0006fd9:	75 09                	jne    c0006fe4 <Computer::detectFeatures()+0x154>
c0006fdb:	83 e0 fe             	and    eax,0xfffffffe
c0006fde:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fe4:	83 ec 0c             	sub    esp,0xc
c0006fe7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006feb:	50                   	push   eax
c0006fec:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff0:	55                   	push   ebp
c0006ff1:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ff5:	57                   	push   edi
c0006ff6:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006ffa:	56                   	push   esi
c0006ffb:	68 00 00 00 80       	push   0x80000000
c0007000:	e8 6f 86 00 00       	call   c000f674 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007005:	83 c4 20             	add    esp,0x20
c0007008:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000700f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0007013:	0f 86 b7 fe ff ff    	jbe    c0006ed0 <Computer::detectFeatures()+0x40>
c0007019:	83 ec 0c             	sub    esp,0xc
c000701c:	50                   	push   eax
c000701d:	55                   	push   ebp
c000701e:	57                   	push   edi
c000701f:	56                   	push   esi
c0007020:	68 01 00 00 80       	push   0x80000001
c0007025:	e8 4a 86 00 00       	call   c000f674 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000702a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007030:	83 c4 20             	add    esp,0x20
c0007033:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007038:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000703e:	e9 8d fe ff ff       	jmp    c0006ed0 <Computer::detectFeatures()+0x40>
c0007043:	e8 c8 71 01 00       	call   c001e210 <absolutelyNoChanceInHell>
c0007048:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c000704e:	c1 e0 07             	shl    eax,0x7
c0007051:	83 e2 7f             	and    edx,0x7f
c0007054:	09 c2                	or     edx,eax
c0007056:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c000705c:	80 e2 80             	and    dl,0x80
c000705f:	0f 84 b4 fe ff ff    	je     c0006f19 <Computer::detectFeatures()+0x89>
c0007065:	e8 16 6e 01 00       	call   c001de80 <avxDetect>
c000706a:	83 e0 01             	and    eax,0x1
c000706d:	c1 e0 05             	shl    eax,0x5
c0007070:	89 c2                	mov    edx,eax
c0007072:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007078:	83 e0 df             	and    eax,0xffffffdf
c000707b:	09 d0                	or     eax,edx
c000707d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0007083:	83 c4 1c             	add    esp,0x1c
c0007086:	5b                   	pop    ebx
c0007087:	5e                   	pop    esi
c0007088:	5f                   	pop    edi
c0007089:	5d                   	pop    ebp
c000708a:	c3                   	ret    
c000708b:	83 ec 0c             	sub    esp,0xc
c000708e:	68 00 02 00 00       	push   0x200
c0007093:	e8 60 86 00 00       	call   c000f6f8 <CPU::cpuidCheckEDX(unsigned int)>
c0007098:	83 c4 10             	add    esp,0x10
c000709b:	89 c2                	mov    edx,eax
c000709d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070a3:	83 e2 01             	and    edx,0x1
c00070a6:	83 e0 fe             	and    eax,0xfffffffe
c00070a9:	09 d0                	or     eax,edx
c00070ab:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b1:	e9 15 ff ff ff       	jmp    c0006fcb <Computer::detectFeatures()+0x13b>

c00070b6 <Computer::displayFeatures()>:
c00070b6:	c3                   	ret    
c00070b7:	90                   	nop

c00070b8 <Computer::rdmsr(unsigned int)>:
c00070b8:	83 ec 0c             	sub    esp,0xc
c00070bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070bf:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070c6:	74 0a                	je     c00070d2 <Computer::rdmsr(unsigned int)+0x1a>
c00070c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070cc:	0f 32                	rdmsr  
c00070ce:	83 c4 0c             	add    esp,0xc
c00070d1:	c3                   	ret    
c00070d2:	83 ec 0c             	sub    esp,0xc
c00070d5:	68 d6 f9 01 c0       	push   0xc001f9d6
c00070da:	e8 80 97 00 00       	call   c001085f <KePanic(char const*)>
c00070df:	83 c4 10             	add    esp,0x10
c00070e2:	eb e4                	jmp    c00070c8 <Computer::rdmsr(unsigned int)+0x10>

c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070e4:	57                   	push   edi
c00070e5:	56                   	push   esi
c00070e6:	83 ec 04             	sub    esp,0x4
c00070e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070ed:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070f5:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070fc:	74 10                	je     c000710e <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c00070fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007102:	89 f0                	mov    eax,esi
c0007104:	89 fa                	mov    edx,edi
c0007106:	0f 30                	wrmsr  
c0007108:	83 c4 04             	add    esp,0x4
c000710b:	5e                   	pop    esi
c000710c:	5f                   	pop    edi
c000710d:	c3                   	ret    
c000710e:	83 ec 0c             	sub    esp,0xc
c0007111:	68 dc f9 01 c0       	push   0xc001f9dc
c0007116:	e8 44 97 00 00       	call   c001085f <KePanic(char const*)>
c000711b:	83 c4 10             	add    esp,0x10
c000711e:	eb de                	jmp    c00070fe <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007120 <Computer::shutdown()>:
c0007120:	83 ec 0c             	sub    esp,0xc
c0007123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007127:	8b 10                	mov    edx,DWORD PTR [eax]
c0007129:	6a 00                	push   0x0
c000712b:	6a 00                	push   0x0
c000712d:	6a 00                	push   0x0
c000712f:	50                   	push   eax
c0007130:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007133:	83 c4 1c             	add    esp,0x1c
c0007136:	c3                   	ret    
c0007137:	90                   	nop

c0007138 <Computer::restart()>:
c0007138:	83 ec 0c             	sub    esp,0xc
c000713b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000713f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007141:	6a 00                	push   0x0
c0007143:	6a 00                	push   0x0
c0007145:	6a 01                	push   0x1
c0007147:	50                   	push   eax
c0007148:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000714b:	83 c4 1c             	add    esp,0x1c
c000714e:	c3                   	ret    
c000714f:	90                   	nop

c0007150 <Computer::sleep()>:
c0007150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007154:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000715a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000715e:	e9 fd 7f 00 00       	jmp    c000f160 <ACPI::sleep()>
c0007163:	90                   	nop

c0007164 <Computer::nmiEnabled()>:
c0007164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007168:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000716e:	c3                   	ret    
c000716f:	90                   	nop

c0007170 <Computer::readCMOS(unsigned char)>:
c0007170:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007174:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007178:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c000717f:	75 09                	jne    c000718a <Computer::readCMOS(unsigned char)+0x1a>
c0007181:	b2 80                	mov    dl,0x80
c0007183:	09 d0                	or     eax,edx
c0007185:	e6 70                	out    0x70,al
c0007187:	e4 71                	in     al,0x71
c0007189:	c3                   	ret    
c000718a:	31 d2                	xor    edx,edx
c000718c:	eb f5                	jmp    c0007183 <Computer::readCMOS(unsigned char)+0x13>

c000718e <Computer::enableNMI(bool)>:
c000718e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007196:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000719c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071a4:	eb ca                	jmp    c0007170 <Computer::readCMOS(unsigned char)>

c00071a6 <Computer::open(int, int, void*)>:
c00071a6:	56                   	push   esi
c00071a7:	53                   	push   ebx
c00071a8:	83 ec 10             	sub    esp,0x10
c00071ab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071af:	f6 05 d0 4e 02 c0 04 	test   BYTE PTR ds:0xc0024ed0,0x4
c00071b6:	68 e2 f9 01 c0       	push   0xc001f9e2
c00071bb:	0f 94 05 e0 1d 02 c0 	sete   BYTE PTR ds:0xc0021de0
c00071c2:	e8 1b 90 00 00       	call   c00101e2 <KeSetBootMessage(char const*)>
c00071c7:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071ce:	e8 c7 08 00 00       	call   c0007a9a <malloc>
c00071d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00071d6:	89 c6                	mov    esi,eax
c00071d8:	e8 f7 7a 00 00       	call   c000ecd4 <ACPI::ACPI()>
c00071dd:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071e3:	58                   	pop    eax
c00071e4:	5a                   	pop    edx
c00071e5:	56                   	push   esi
c00071e6:	53                   	push   ebx
c00071e7:	e8 ca 4b 00 00       	call   c000bdb6 <Device::addChild(Device*)>
c00071ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071ef:	e8 9c fc ff ff       	call   c0006e90 <Computer::detectFeatures()>
c00071f4:	59                   	pop    ecx
c00071f5:	5e                   	pop    esi
c00071f6:	6a 01                	push   0x1
c00071f8:	53                   	push   ebx
c00071f9:	e8 90 ff ff ff       	call   c000718e <Computer::enableNMI(bool)>
c00071fe:	c7 04 24 fa f9 01 c0 	mov    DWORD PTR [esp],0xc001f9fa
c0007205:	e8 d8 8f 00 00       	call   c00101e2 <KeSetBootMessage(char const*)>
c000720a:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007211:	e8 84 08 00 00       	call   c0007a9a <malloc>
c0007216:	89 04 24             	mov    DWORD PTR [esp],eax
c0007219:	89 c6                	mov    esi,eax
c000721b:	e8 90 85 00 00       	call   c000f7b0 <CPU::CPU()>
c0007220:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007226:	58                   	pop    eax
c0007227:	5a                   	pop    edx
c0007228:	56                   	push   esi
c0007229:	53                   	push   ebx
c000722a:	e8 87 4b 00 00       	call   c000bdb6 <Device::addChild(Device*)>
c000722f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007235:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007239:	8b 10                	mov    edx,DWORD PTR [eax]
c000723b:	51                   	push   ecx
c000723c:	6a 00                	push   0x0
c000723e:	6a 00                	push   0x0
c0007240:	50                   	push   eax
c0007241:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007244:	83 c4 14             	add    esp,0x14
c0007247:	68 14 fa 01 c0       	push   0xc001fa14
c000724c:	e8 91 8f 00 00       	call   c00101e2 <KeSetBootMessage(char const*)>
c0007251:	c7 04 24 a3 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca3
c0007258:	e8 8f dc 00 00       	call   c0014eec <setupMultitasking(void (*)())>
c000725d:	83 c4 14             	add    esp,0x14
c0007260:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007265:	5b                   	pop    ebx
c0007266:	5e                   	pop    esi
c0007267:	c3                   	ret    

c0007268 <Computer::disableNMI()>:
c0007268:	6a 00                	push   0x0
c000726a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000726e:	50                   	push   eax
c000726f:	e8 1a ff ff ff       	call   c000718e <Computer::enableNMI(bool)>
c0007274:	5a                   	pop    edx
c0007275:	59                   	pop    ecx
c0007276:	c3                   	ret    
c0007277:	90                   	nop

c0007278 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007278:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000727c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007280:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007284:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c000728b:	75 0b                	jne    c0007298 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c000728d:	b1 80                	mov    cl,0x80
c000728f:	09 c8                	or     eax,ecx
c0007291:	e6 70                	out    0x70,al
c0007293:	88 d0                	mov    al,dl
c0007295:	e6 71                	out    0x71,al
c0007297:	c3                   	ret    
c0007298:	31 c9                	xor    ecx,ecx
c000729a:	eb f3                	jmp    c000728f <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c000729c <Computer::handleNMI()>:
c000729c:	56                   	push   esi
c000729d:	53                   	push   ebx
c000729e:	83 ec 10             	sub    esp,0x10
c00072a1:	e4 92                	in     al,0x92
c00072a3:	89 c6                	mov    esi,eax
c00072a5:	e4 61                	in     al,0x61
c00072a7:	68 2f fa 01 c0       	push   0xc001fa2f
c00072ac:	88 c3                	mov    bl,al
c00072ae:	e8 cf 36 00 00       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c00072b3:	83 c4 10             	add    esp,0x10
c00072b6:	83 e6 10             	and    esi,0x10
c00072b9:	75 10                	jne    c00072cb <Computer::handleNMI()+0x2f>
c00072bb:	f6 c3 40             	test   bl,0x40
c00072be:	75 20                	jne    c00072e0 <Computer::handleNMI()+0x44>
c00072c0:	80 e3 80             	and    bl,0x80
c00072c3:	75 30                	jne    c00072f5 <Computer::handleNMI()+0x59>
c00072c5:	83 c4 04             	add    esp,0x4
c00072c8:	5b                   	pop    ebx
c00072c9:	5e                   	pop    esi
c00072ca:	c3                   	ret    
c00072cb:	83 ec 0c             	sub    esp,0xc
c00072ce:	68 40 fa 01 c0       	push   0xc001fa40
c00072d3:	e8 87 95 00 00       	call   c001085f <KePanic(char const*)>
c00072d8:	83 c4 10             	add    esp,0x10
c00072db:	f6 c3 40             	test   bl,0x40
c00072de:	74 e0                	je     c00072c0 <Computer::handleNMI()+0x24>
c00072e0:	83 ec 0c             	sub    esp,0xc
c00072e3:	68 4d fa 01 c0       	push   0xc001fa4d
c00072e8:	e8 72 95 00 00       	call   c001085f <KePanic(char const*)>
c00072ed:	83 c4 10             	add    esp,0x10
c00072f0:	80 e3 80             	and    bl,0x80
c00072f3:	74 d0                	je     c00072c5 <Computer::handleNMI()+0x29>
c00072f5:	c7 44 24 10 57 fa 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fa57
c00072fd:	83 c4 04             	add    esp,0x4
c0007300:	5b                   	pop    ebx
c0007301:	5e                   	pop    esi
c0007302:	e9 58 95 00 00       	jmp    c001085f <KePanic(char const*)>
c0007307:	90                   	nop

c0007308 <GDTEntry::setBase(unsigned int)>:
c0007308:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000730c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007310:	89 c1                	mov    ecx,eax
c0007312:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007316:	c1 e9 10             	shr    ecx,0x10
c0007319:	c1 e8 18             	shr    eax,0x18
c000731c:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000731f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007322:	c3                   	ret    
c0007323:	90                   	nop

c0007324 <GDTEntry::setLimit(unsigned int)>:
c0007324:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007328:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000732c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000732f:	66 89 01             	mov    WORD PTR [ecx],ax
c0007332:	83 e2 f0             	and    edx,0xfffffff0
c0007335:	c1 e8 10             	shr    eax,0x10
c0007338:	83 e0 0f             	and    eax,0xf
c000733b:	09 d0                	or     eax,edx
c000733d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007340:	c3                   	ret    
c0007341:	90                   	nop

c0007342 <GDT::GDT()>:
c0007342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007346:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000734c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007350:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007356:	90                   	nop
c0007357:	c3                   	ret    

c0007358 <GDT::addEntry(GDTEntry)>:
c0007358:	53                   	push   ebx
c0007359:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000735d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007361:	8b 02                	mov    eax,DWORD PTR [edx]
c0007363:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007367:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000736b:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000736f:	8d 48 01             	lea    ecx,[eax+0x1]
c0007372:	c1 e0 03             	shl    eax,0x3
c0007375:	89 0a                	mov    DWORD PTR [edx],ecx
c0007377:	5b                   	pop    ebx
c0007378:	c3                   	ret    
c0007379:	90                   	nop

c000737a <GDT::getNumberOfEntries()>:
c000737a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000737e:	8b 00                	mov    eax,DWORD PTR [eax]
c0007380:	c3                   	ret    
c0007381:	90                   	nop

c0007382 <GDT::flush()>:
c0007382:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007386:	8b 10                	mov    edx,DWORD PTR [eax]
c0007388:	83 c0 04             	add    eax,0x4
c000738b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0007392:	a3 c2 4e 02 c0       	mov    ds:0xc0024ec2,eax
c0007397:	66 89 15 c0 4e 02 c0 	mov    WORD PTR ds:0xc0024ec0,dx
c000739e:	e9 b7 8f ff ff       	jmp    c000035a <loadGDT>
c00073a3:	90                   	nop

c00073a4 <GDT::setup()>:
c00073a4:	57                   	push   edi
c00073a5:	56                   	push   esi
c00073a6:	53                   	push   ebx
c00073a7:	83 ec 30             	sub    esp,0x30
c00073aa:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073ae:	6a 00                	push   0x0
c00073b0:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073b4:	56                   	push   esi
c00073b5:	e8 4e ff ff ff       	call   c0007308 <GDTEntry::setBase(unsigned int)>
c00073ba:	6a 00                	push   0x0
c00073bc:	56                   	push   esi
c00073bd:	e8 62 ff ff ff       	call   c0007324 <GDTEntry::setLimit(unsigned int)>
c00073c2:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073ca:	6a 00                	push   0x0
c00073cc:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073d0:	56                   	push   esi
c00073d1:	e8 32 ff ff ff       	call   c0007308 <GDTEntry::setBase(unsigned int)>
c00073d6:	68 ff ff ff 00       	push   0xffffff
c00073db:	56                   	push   esi
c00073dc:	e8 43 ff ff ff       	call   c0007324 <GDTEntry::setLimit(unsigned int)>
c00073e1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00073e9:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00073ed:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00073f1:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00073f6:	0d 00 9a c0 00       	or     eax,0xc09a00
c00073fb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00073ff:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0007403:	89 f8                	mov    eax,edi
c0007405:	89 fa                	mov    edx,edi
c0007407:	80 e4 f7             	and    ah,0xf7
c000740a:	80 ce 60             	or     dh,0x60
c000740d:	89 c7                	mov    edi,eax
c000740f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007413:	80 cc 60             	or     ah,0x60
c0007416:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000741a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000741e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007422:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007426:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000742a:	83 c4 20             	add    esp,0x20
c000742d:	6a 00                	push   0x0
c000742f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007433:	50                   	push   eax
c0007434:	e8 cf fe ff ff       	call   c0007308 <GDTEntry::setBase(unsigned int)>
c0007439:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000743d:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007441:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007445:	83 e0 3f             	and    eax,0x3f
c0007448:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000744c:	6a 00                	push   0x0
c000744e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007452:	50                   	push   eax
c0007453:	e8 b0 fe ff ff       	call   c0007308 <GDTEntry::setBase(unsigned int)>
c0007458:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000745c:	83 e0 3f             	and    eax,0x3f
c000745f:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0007463:	83 c4 0c             	add    esp,0xc
c0007466:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000746a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000746e:	53                   	push   ebx
c000746f:	e8 e4 fe ff ff       	call   c0007358 <GDT::addEntry(GDTEntry)>
c0007474:	83 c4 0c             	add    esp,0xc
c0007477:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000747b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000747f:	53                   	push   ebx
c0007480:	e8 d3 fe ff ff       	call   c0007358 <GDT::addEntry(GDTEntry)>
c0007485:	83 c4 0c             	add    esp,0xc
c0007488:	57                   	push   edi
c0007489:	56                   	push   esi
c000748a:	53                   	push   ebx
c000748b:	e8 c8 fe ff ff       	call   c0007358 <GDT::addEntry(GDTEntry)>
c0007490:	83 c4 0c             	add    esp,0xc
c0007493:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007497:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000749b:	53                   	push   ebx
c000749c:	e8 b7 fe ff ff       	call   c0007358 <GDT::addEntry(GDTEntry)>
c00074a1:	83 c4 0c             	add    esp,0xc
c00074a4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074a8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074ac:	53                   	push   ebx
c00074ad:	e8 a6 fe ff ff       	call   c0007358 <GDT::addEntry(GDTEntry)>
c00074b2:	83 c4 0c             	add    esp,0xc
c00074b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074bd:	53                   	push   ebx
c00074be:	e8 95 fe ff ff       	call   c0007358 <GDT::addEntry(GDTEntry)>
c00074c3:	83 c4 0c             	add    esp,0xc
c00074c6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074ca:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074ce:	53                   	push   ebx
c00074cf:	e8 84 fe ff ff       	call   c0007358 <GDT::addEntry(GDTEntry)>
c00074d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074d7:	e8 a6 fe ff ff       	call   c0007382 <GDT::flush()>
c00074dc:	83 c4 40             	add    esp,0x40
c00074df:	5b                   	pop    ebx
c00074e0:	5e                   	pop    esi
c00074e1:	5f                   	pop    edi
c00074e2:	c3                   	ret    

c00074e3 <idleFunction(void*)>:
c00074e3:	83 ec 0c             	sub    esp,0xc
c00074e6:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00074eb:	48                   	dec    eax
c00074ec:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00074f1:	75 01                	jne    c00074f4 <idleFunction(void*)+0x11>
c00074f3:	fb                   	sti    
c00074f4:	e8 73 f6 00 00       	call   c0016b6c <HalSystemIdle()>
c00074f9:	e8 14 73 01 00       	call   c001e812 <idleCommon()>
c00074fe:	eb f4                	jmp    c00074f4 <idleFunction(void*)+0x11>

c0007500 <IDTEntry::IDTEntry(bool)>:
c0007500:	53                   	push   ebx
c0007501:	83 ec 04             	sub    esp,0x4
c0007504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007508:	88 04 24             	mov    BYTE PTR [esp],al
c000750b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000750f:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007515:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007519:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000751d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007521:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007524:	83 e2 f0             	and    edx,0xfffffff0
c0007527:	83 ca 0e             	or     edx,0xe
c000752a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000752d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007531:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007534:	83 e2 ef             	and    edx,0xffffffef
c0007537:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000753a:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000753e:	85 c0                	test   eax,eax
c0007540:	74 06                	je     c0007548 <IDTEntry::IDTEntry(bool)+0x48>
c0007542:	b2 03                	mov    dl,0x3
c0007544:	eb 06                	jmp    c000754c <IDTEntry::IDTEntry(bool)+0x4c>
c0007546:	66 90                	xchg   ax,ax
c0007548:	b2 00                	mov    dl,0x0
c000754a:	66 90                	xchg   ax,ax
c000754c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007550:	83 e2 03             	and    edx,0x3
c0007553:	89 d3                	mov    ebx,edx
c0007555:	c1 e3 05             	shl    ebx,0x5
c0007558:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000755b:	83 e2 9f             	and    edx,0xffffff9f
c000755e:	88 d1                	mov    cl,dl
c0007560:	88 da                	mov    dl,bl
c0007562:	09 ca                	or     edx,ecx
c0007564:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007567:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000756e:	83 ca 80             	or     edx,0xffffff80
c0007571:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007574:	90                   	nop
c0007575:	83 c4 04             	add    esp,0x4
c0007578:	5b                   	pop    ebx
c0007579:	c3                   	ret    

c000757a <IDTEntry::setOffset(unsigned int)>:
c000757a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000757e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007582:	66 89 02             	mov    WORD PTR [edx],ax
c0007585:	c1 e8 10             	shr    eax,0x10
c0007588:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000758c:	c3                   	ret    
c000758d:	90                   	nop
c000758e:	66 90                	xchg   ax,ax

c0007590 <IDT::IDT()>:
c0007590:	90                   	nop
c0007591:	c3                   	ret    

c0007592 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0007592:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007596:	83 c0 30             	add    eax,0x30
c0007599:	c3                   	ret    

c000759a <IDT::addEntry(IDTEntry, int)>:
c000759a:	53                   	push   ebx
c000759b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075ab:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ae:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075b2:	5b                   	pop    ebx
c00075b3:	c3                   	ret    

c00075b4 <IDT::addEntry(int, void (*)(), bool)>:
c00075b4:	53                   	push   ebx
c00075b5:	83 ec 10             	sub    esp,0x10
c00075b8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075bd:	50                   	push   eax
c00075be:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075c2:	53                   	push   ebx
c00075c3:	e8 38 ff ff ff       	call   c0007500 <IDTEntry::IDTEntry(bool)>
c00075c8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075cc:	53                   	push   ebx
c00075cd:	e8 a8 ff ff ff       	call   c000757a <IDTEntry::setOffset(unsigned int)>
c00075d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075d6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075de:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075e2:	e8 b3 ff ff ff       	call   c000759a <IDT::addEntry(IDTEntry, int)>
c00075e7:	83 c4 30             	add    esp,0x30
c00075ea:	5b                   	pop    ebx
c00075eb:	c3                   	ret    

c00075ec <IDT::flush()>:
c00075ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075f0:	66 c7 05 c8 4e 02 c0 ff 07 	mov    WORD PTR ds:0xc0024ec8,0x7ff
c00075f9:	a3 ca 4e 02 c0       	mov    ds:0xc0024eca,eax
c00075fe:	0f 01 1d c8 4e 02 c0 	lidtd  ds:0xc0024ec8
c0007605:	c3                   	ret    

c0007606 <IDT::setup()>:
c0007606:	57                   	push   edi
c0007607:	56                   	push   esi
c0007608:	53                   	push   ebx
c0007609:	83 ec 10             	sub    esp,0x10
c000760c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007610:	6a 00                	push   0x0
c0007612:	68 10 df 01 c0       	push   0xc001df10
c0007617:	6a 00                	push   0x0
c0007619:	53                   	push   ebx
c000761a:	e8 95 ff ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c000761f:	6a 00                	push   0x0
c0007621:	68 20 df 01 c0       	push   0xc001df20
c0007626:	6a 01                	push   0x1
c0007628:	53                   	push   ebx
c0007629:	e8 86 ff ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c000762e:	83 c4 20             	add    esp,0x20
c0007631:	6a 00                	push   0x0
c0007633:	68 2a df 01 c0       	push   0xc001df2a
c0007638:	6a 02                	push   0x2
c000763a:	53                   	push   ebx
c000763b:	e8 74 ff ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c0007640:	6a 00                	push   0x0
c0007642:	68 34 df 01 c0       	push   0xc001df34
c0007647:	6a 03                	push   0x3
c0007649:	53                   	push   ebx
c000764a:	e8 65 ff ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c000764f:	83 c4 20             	add    esp,0x20
c0007652:	6a 00                	push   0x0
c0007654:	68 3e df 01 c0       	push   0xc001df3e
c0007659:	6a 04                	push   0x4
c000765b:	53                   	push   ebx
c000765c:	e8 53 ff ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c0007661:	6a 00                	push   0x0
c0007663:	68 48 df 01 c0       	push   0xc001df48
c0007668:	6a 05                	push   0x5
c000766a:	53                   	push   ebx
c000766b:	e8 44 ff ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c0007670:	83 c4 20             	add    esp,0x20
c0007673:	6a 00                	push   0x0
c0007675:	68 52 df 01 c0       	push   0xc001df52
c000767a:	6a 06                	push   0x6
c000767c:	53                   	push   ebx
c000767d:	e8 32 ff ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c0007682:	6a 00                	push   0x0
c0007684:	68 5c df 01 c0       	push   0xc001df5c
c0007689:	6a 07                	push   0x7
c000768b:	53                   	push   ebx
c000768c:	e8 23 ff ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c0007691:	83 c4 20             	add    esp,0x20
c0007694:	6a 00                	push   0x0
c0007696:	68 66 df 01 c0       	push   0xc001df66
c000769b:	6a 08                	push   0x8
c000769d:	53                   	push   ebx
c000769e:	e8 11 ff ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c00076a3:	6a 00                	push   0x0
c00076a5:	68 6e df 01 c0       	push   0xc001df6e
c00076aa:	6a 09                	push   0x9
c00076ac:	53                   	push   ebx
c00076ad:	e8 02 ff ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c00076b2:	83 c4 20             	add    esp,0x20
c00076b5:	6a 00                	push   0x0
c00076b7:	68 78 df 01 c0       	push   0xc001df78
c00076bc:	6a 0a                	push   0xa
c00076be:	53                   	push   ebx
c00076bf:	e8 f0 fe ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c00076c4:	6a 00                	push   0x0
c00076c6:	68 80 df 01 c0       	push   0xc001df80
c00076cb:	6a 0b                	push   0xb
c00076cd:	53                   	push   ebx
c00076ce:	e8 e1 fe ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c00076d3:	83 c4 20             	add    esp,0x20
c00076d6:	6a 00                	push   0x0
c00076d8:	68 88 df 01 c0       	push   0xc001df88
c00076dd:	6a 0c                	push   0xc
c00076df:	53                   	push   ebx
c00076e0:	e8 cf fe ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c00076e5:	6a 00                	push   0x0
c00076e7:	68 90 df 01 c0       	push   0xc001df90
c00076ec:	6a 0d                	push   0xd
c00076ee:	53                   	push   ebx
c00076ef:	e8 c0 fe ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c00076f4:	83 c4 20             	add    esp,0x20
c00076f7:	6a 00                	push   0x0
c00076f9:	68 aa df 01 c0       	push   0xc001dfaa
c00076fe:	6a 0e                	push   0xe
c0007700:	53                   	push   ebx
c0007701:	e8 ae fe ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c0007706:	6a 00                	push   0x0
c0007708:	68 b2 df 01 c0       	push   0xc001dfb2
c000770d:	6a 0f                	push   0xf
c000770f:	53                   	push   ebx
c0007710:	e8 9f fe ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c0007715:	83 c4 20             	add    esp,0x20
c0007718:	6a 00                	push   0x0
c000771a:	68 bc df 01 c0       	push   0xc001dfbc
c000771f:	6a 10                	push   0x10
c0007721:	53                   	push   ebx
c0007722:	e8 8d fe ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c0007727:	6a 00                	push   0x0
c0007729:	68 c6 df 01 c0       	push   0xc001dfc6
c000772e:	6a 11                	push   0x11
c0007730:	53                   	push   ebx
c0007731:	e8 7e fe ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c0007736:	83 c4 20             	add    esp,0x20
c0007739:	6a 00                	push   0x0
c000773b:	68 d0 df 01 c0       	push   0xc001dfd0
c0007740:	6a 12                	push   0x12
c0007742:	53                   	push   ebx
c0007743:	e8 6c fe ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c0007748:	6a 01                	push   0x1
c000774a:	68 6a e0 01 c0       	push   0xc001e06a
c000774f:	6a 60                	push   0x60
c0007751:	53                   	push   ebx
c0007752:	e8 5d fe ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c0007757:	83 c4 20             	add    esp,0x20
c000775a:	6a 00                	push   0x0
c000775c:	68 71 e0 01 c0       	push   0xc001e071
c0007761:	6a 20                	push   0x20
c0007763:	53                   	push   ebx
c0007764:	e8 4b fe ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c0007769:	6a 00                	push   0x0
c000776b:	68 5c e0 01 c0       	push   0xc001e05c
c0007770:	6a 21                	push   0x21
c0007772:	53                   	push   ebx
c0007773:	e8 3c fe ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c0007778:	83 c4 20             	add    esp,0x20
c000777b:	6a 00                	push   0x0
c000777d:	68 63 e0 01 c0       	push   0xc001e063
c0007782:	6a 22                	push   0x22
c0007784:	53                   	push   ebx
c0007785:	e8 2a fe ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c000778a:	6a 00                	push   0x0
c000778c:	68 da df 01 c0       	push   0xc001dfda
c0007791:	6a 23                	push   0x23
c0007793:	53                   	push   ebx
c0007794:	e8 1b fe ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c0007799:	83 c4 20             	add    esp,0x20
c000779c:	6a 00                	push   0x0
c000779e:	68 e4 df 01 c0       	push   0xc001dfe4
c00077a3:	6a 24                	push   0x24
c00077a5:	53                   	push   ebx
c00077a6:	e8 09 fe ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c00077ab:	6a 00                	push   0x0
c00077ad:	68 ee df 01 c0       	push   0xc001dfee
c00077b2:	6a 25                	push   0x25
c00077b4:	53                   	push   ebx
c00077b5:	e8 fa fd ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c00077ba:	83 c4 20             	add    esp,0x20
c00077bd:	6a 00                	push   0x0
c00077bf:	68 f8 df 01 c0       	push   0xc001dff8
c00077c4:	6a 26                	push   0x26
c00077c6:	53                   	push   ebx
c00077c7:	e8 e8 fd ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c00077cc:	6a 00                	push   0x0
c00077ce:	68 02 e0 01 c0       	push   0xc001e002
c00077d3:	6a 27                	push   0x27
c00077d5:	53                   	push   ebx
c00077d6:	e8 d9 fd ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c00077db:	83 c4 20             	add    esp,0x20
c00077de:	6a 00                	push   0x0
c00077e0:	68 0c e0 01 c0       	push   0xc001e00c
c00077e5:	6a 28                	push   0x28
c00077e7:	53                   	push   ebx
c00077e8:	e8 c7 fd ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c00077ed:	6a 00                	push   0x0
c00077ef:	68 16 e0 01 c0       	push   0xc001e016
c00077f4:	6a 29                	push   0x29
c00077f6:	53                   	push   ebx
c00077f7:	e8 b8 fd ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c00077fc:	83 c4 20             	add    esp,0x20
c00077ff:	6a 00                	push   0x0
c0007801:	68 20 e0 01 c0       	push   0xc001e020
c0007806:	6a 2a                	push   0x2a
c0007808:	53                   	push   ebx
c0007809:	e8 a6 fd ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c000780e:	6a 00                	push   0x0
c0007810:	68 2a e0 01 c0       	push   0xc001e02a
c0007815:	6a 2b                	push   0x2b
c0007817:	53                   	push   ebx
c0007818:	e8 97 fd ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c000781d:	83 c4 20             	add    esp,0x20
c0007820:	6a 00                	push   0x0
c0007822:	68 34 e0 01 c0       	push   0xc001e034
c0007827:	6a 2c                	push   0x2c
c0007829:	53                   	push   ebx
c000782a:	e8 85 fd ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c000782f:	6a 00                	push   0x0
c0007831:	68 3e e0 01 c0       	push   0xc001e03e
c0007836:	6a 2d                	push   0x2d
c0007838:	53                   	push   ebx
c0007839:	e8 76 fd ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c000783e:	83 c4 20             	add    esp,0x20
c0007841:	6a 00                	push   0x0
c0007843:	68 48 e0 01 c0       	push   0xc001e048
c0007848:	6a 2e                	push   0x2e
c000784a:	53                   	push   ebx
c000784b:	e8 64 fd ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c0007850:	6a 00                	push   0x0
c0007852:	68 52 e0 01 c0       	push   0xc001e052
c0007857:	6a 2f                	push   0x2f
c0007859:	53                   	push   ebx
c000785a:	e8 55 fd ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c000785f:	83 c4 20             	add    esp,0x20
c0007862:	6a 00                	push   0x0
c0007864:	68 ac e1 01 c0       	push   0xc001e1ac
c0007869:	6a 30                	push   0x30
c000786b:	53                   	push   ebx
c000786c:	e8 43 fd ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c0007871:	6a 00                	push   0x0
c0007873:	68 b6 e1 01 c0       	push   0xc001e1b6
c0007878:	6a 31                	push   0x31
c000787a:	53                   	push   ebx
c000787b:	e8 34 fd ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c0007880:	83 c4 20             	add    esp,0x20
c0007883:	6a 00                	push   0x0
c0007885:	68 c0 e1 01 c0       	push   0xc001e1c0
c000788a:	6a 32                	push   0x32
c000788c:	53                   	push   ebx
c000788d:	e8 22 fd ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c0007892:	6a 00                	push   0x0
c0007894:	68 ca e1 01 c0       	push   0xc001e1ca
c0007899:	6a 33                	push   0x33
c000789b:	53                   	push   ebx
c000789c:	e8 13 fd ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c00078a1:	83 c4 20             	add    esp,0x20
c00078a4:	6a 00                	push   0x0
c00078a6:	68 d4 e1 01 c0       	push   0xc001e1d4
c00078ab:	6a 34                	push   0x34
c00078ad:	53                   	push   ebx
c00078ae:	e8 01 fd ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c00078b3:	6a 00                	push   0x0
c00078b5:	68 de e1 01 c0       	push   0xc001e1de
c00078ba:	6a 35                	push   0x35
c00078bc:	53                   	push   ebx
c00078bd:	e8 f2 fc ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c00078c2:	83 c4 20             	add    esp,0x20
c00078c5:	6a 00                	push   0x0
c00078c7:	68 e8 e1 01 c0       	push   0xc001e1e8
c00078cc:	6a 36                	push   0x36
c00078ce:	53                   	push   ebx
c00078cf:	e8 e0 fc ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c00078d4:	6a 00                	push   0x0
c00078d6:	68 f2 e1 01 c0       	push   0xc001e1f2
c00078db:	6a 37                	push   0x37
c00078dd:	53                   	push   ebx
c00078de:	e8 d1 fc ff ff       	call   c00075b4 <IDT::addEntry(int, void (*)(), bool)>
c00078e3:	83 c4 1c             	add    esp,0x1c
c00078e6:	6a 03                	push   0x3
c00078e8:	6a 02                	push   0x2
c00078ea:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00078f0:	e8 01 25 00 00       	call   c0009df6 <VAS::allocatePages(int, int)>
c00078f5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00078fc:	89 c6                	mov    esi,eax
c00078fe:	e8 97 01 00 00       	call   c0007a9a <malloc>
c0007903:	81 c6 00 20 00 00    	add    esi,0x2000
c0007909:	89 04 24             	mov    DWORD PTR [esp],eax
c000790c:	89 c7                	mov    edi,eax
c000790e:	e8 2d 16 00 00       	call   c0008f40 <TSS::TSS()>
c0007913:	83 c4 0c             	add    esp,0xc
c0007916:	68 66 df 01 c0       	push   0xc001df66
c000791b:	56                   	push   esi
c000791c:	57                   	push   edi
c000791d:	e8 62 16 00 00       	call   c0008f84 <TSS::setup(unsigned long, unsigned long)>
c0007922:	89 c6                	mov    esi,eax
c0007924:	58                   	pop    eax
c0007925:	5a                   	pop    edx
c0007926:	6a 00                	push   0x0
c0007928:	8d 44 24 14          	lea    eax,[esp+0x14]
c000792c:	50                   	push   eax
c000792d:	e8 ce fb ff ff       	call   c0007500 <IDTEntry::IDTEntry(bool)>
c0007932:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007936:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000793b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007942:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007948:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000794c:	80 ce 05             	or     dh,0x5
c000794f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007952:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007956:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000795a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000795d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007960:	e8 87 fc ff ff       	call   c00075ec <IDT::flush()>
c0007965:	83 c4 20             	add    esp,0x20
c0007968:	5b                   	pop    ebx
c0007969:	5e                   	pop    esi
c000796a:	5f                   	pop    edi
c000796b:	c3                   	ret    

c000796c <sbrk>:
c000796c:	55                   	push   ebp
c000796d:	57                   	push   edi
c000796e:	56                   	push   esi
c000796f:	53                   	push   ebx
c0007970:	83 ec 1c             	sub    esp,0x1c
c0007973:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007977:	85 c0                	test   eax,eax
c0007979:	74 61                	je     c00079dc <sbrk+0x70>
c000797b:	78 66                	js     c00079e3 <sbrk+0x77>
c000797d:	8b 15 cc 1d 02 c0    	mov    edx,DWORD PTR ds:0xc0021dcc
c0007983:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007987:	05 ff 0f 00 00       	add    eax,0xfff
c000798c:	89 c5                	mov    ebp,eax
c000798e:	78 6b                	js     c00079fb <sbrk+0x8f>
c0007990:	c1 fd 0c             	sar    ebp,0xc
c0007993:	bb 00 00 00 00       	mov    ebx,0x0
c0007998:	8b 35 b0 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fb0
c000799e:	8b 3d cc 1d 02 c0    	mov    edi,DWORD PTR ds:0xc0021dcc
c00079a4:	e8 f6 03 00 00       	call   c0007d9f <Phys::allocatePage()>
c00079a9:	68 01 04 00 00       	push   0x401
c00079ae:	57                   	push   edi
c00079af:	50                   	push   eax
c00079b0:	56                   	push   esi
c00079b1:	e8 3a 23 00 00       	call   c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079b6:	81 05 cc 1d 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0021dcc,0x1000
c00079c0:	83 c3 01             	add    ebx,0x1
c00079c3:	83 c4 10             	add    esp,0x10
c00079c6:	39 dd                	cmp    ebp,ebx
c00079c8:	75 ce                	jne    c0007998 <sbrk+0x2c>
c00079ca:	0f 20 d8             	mov    eax,cr3
c00079cd:	0f 22 d8             	mov    cr3,eax
c00079d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079d4:	83 c4 1c             	add    esp,0x1c
c00079d7:	5b                   	pop    ebx
c00079d8:	5e                   	pop    esi
c00079d9:	5f                   	pop    edi
c00079da:	5d                   	pop    ebp
c00079db:	c3                   	ret    
c00079dc:	a1 cc 1d 02 c0       	mov    eax,ds:0xc0021dcc
c00079e1:	eb f1                	jmp    c00079d4 <sbrk+0x68>
c00079e3:	83 ec 08             	sub    esp,0x8
c00079e6:	50                   	push   eax
c00079e7:	68 d4 fa 01 c0       	push   0xc001fad4
c00079ec:	e8 91 2f 00 00       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c00079f1:	83 c4 10             	add    esp,0x10
c00079f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00079f9:	eb d9                	jmp    c00079d4 <sbrk+0x68>
c00079fb:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a01:	eb 8d                	jmp    c0007990 <sbrk+0x24>

c0007a03 <mmap>:
c0007a03:	83 ec 18             	sub    esp,0x18
c0007a06:	68 04 fb 01 c0       	push   0xc001fb04
c0007a0b:	e8 4f 8e 00 00       	call   c001085f <KePanic(char const*)>
c0007a10:	b8 00 00 00 00       	mov    eax,0x0
c0007a15:	83 c4 1c             	add    esp,0x1c
c0007a18:	c3                   	ret    

c0007a19 <munmap>:
c0007a19:	83 ec 18             	sub    esp,0x18
c0007a1c:	68 09 fb 01 c0       	push   0xc001fb09
c0007a21:	e8 39 8e 00 00       	call   c001085f <KePanic(char const*)>
c0007a26:	b8 00 00 00 00       	mov    eax,0x0
c0007a2b:	83 c4 1c             	add    esp,0x1c
c0007a2e:	c3                   	ret    

c0007a2f <liballoc_lock()>:
c0007a2f:	fa                   	cli    
c0007a30:	83 05 68 81 02 c0 01 	add    DWORD PTR ds:0xc0028168,0x1
c0007a37:	b8 00 00 00 00       	mov    eax,0x0
c0007a3c:	c3                   	ret    

c0007a3d <liballoc_unlock()>:
c0007a3d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007a42:	83 e8 01             	sub    eax,0x1
c0007a45:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007a4a:	75 01                	jne    c0007a4d <liballoc_unlock()+0x10>
c0007a4c:	fb                   	sti    
c0007a4d:	b8 00 00 00 00       	mov    eax,0x0
c0007a52:	c3                   	ret    

c0007a53 <liballoc_alloc(int)>:
c0007a53:	83 ec 10             	sub    esp,0x10
c0007a56:	6a 01                	push   0x1
c0007a58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a5c:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a62:	e8 8f 23 00 00       	call   c0009df6 <VAS::allocatePages(int, int)>
c0007a67:	83 c4 1c             	add    esp,0x1c
c0007a6a:	c3                   	ret    

c0007a6b <liballoc_free(void*, int)>:
c0007a6b:	83 ec 14             	sub    esp,0x14
c0007a6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a72:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0007a78:	e8 bb 1f 00 00       	call   c0009a38 <VAS::freeAllocatedPages(unsigned long)>
c0007a7d:	b8 00 00 00 00       	mov    eax,0x0
c0007a82:	83 c4 1c             	add    esp,0x1c
c0007a85:	c3                   	ret    

c0007a86 <realloc>:
c0007a86:	83 ec 14             	sub    esp,0x14
c0007a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007a91:	e8 52 9b ff ff       	call   c00015e8 <dlrealloc>
c0007a96:	83 c4 1c             	add    esp,0x1c
c0007a99:	c3                   	ret    

c0007a9a <malloc>:
c0007a9a:	83 ec 18             	sub    esp,0x18
c0007a9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa1:	e8 05 96 ff ff       	call   c00010ab <dlmalloc>
c0007aa6:	83 c4 1c             	add    esp,0x1c
c0007aa9:	c3                   	ret    

c0007aaa <free>:
c0007aaa:	83 ec 18             	sub    esp,0x18
c0007aad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ab1:	e8 9d 92 ff ff       	call   c0000d53 <dlfree>
c0007ab6:	83 c4 1c             	add    esp,0x1c
c0007ab9:	c3                   	ret    

c0007aba <rfree>:
c0007aba:	83 ec 18             	sub    esp,0x18
c0007abd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ac1:	e8 8d 92 ff ff       	call   c0000d53 <dlfree>
c0007ac6:	83 c4 1c             	add    esp,0x1c
c0007ac9:	c3                   	ret    

c0007aca <calloc>:
c0007aca:	56                   	push   esi
c0007acb:	53                   	push   ebx
c0007acc:	83 ec 10             	sub    esp,0x10
c0007acf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007ad3:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007ad8:	53                   	push   ebx
c0007ad9:	e8 bc ff ff ff       	call   c0007a9a <malloc>
c0007ade:	89 c6                	mov    esi,eax
c0007ae0:	83 c4 0c             	add    esp,0xc
c0007ae3:	53                   	push   ebx
c0007ae4:	6a 00                	push   0x0
c0007ae6:	50                   	push   eax
c0007ae7:	e8 04 8a ff ff       	call   c00004f0 <memset>
c0007aec:	89 f0                	mov    eax,esi
c0007aee:	83 c4 14             	add    esp,0x14
c0007af1:	5b                   	pop    ebx
c0007af2:	5e                   	pop    esi
c0007af3:	c3                   	ret    

c0007af4 <KeEntryPoint>:
c0007af4:	57                   	push   edi
c0007af5:	bf f9 03 00 00       	mov    edi,0x3f9
c0007afa:	56                   	push   esi
c0007afb:	89 fa                	mov    edx,edi
c0007afd:	53                   	push   ebx
c0007afe:	31 f6                	xor    esi,esi
c0007b00:	83 ec 2c             	sub    esp,0x2c
c0007b03:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b08:	a3 d0 4e 02 c0       	mov    ds:0xc0024ed0,eax
c0007b0d:	89 f0                	mov    eax,esi
c0007b0f:	ee                   	out    dx,al
c0007b10:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b15:	b0 80                	mov    al,0x80
c0007b17:	89 da                	mov    edx,ebx
c0007b19:	ee                   	out    dx,al
c0007b1a:	b1 03                	mov    cl,0x3
c0007b1c:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b21:	88 c8                	mov    al,cl
c0007b23:	ee                   	out    dx,al
c0007b24:	89 f0                	mov    eax,esi
c0007b26:	89 fa                	mov    edx,edi
c0007b28:	ee                   	out    dx,al
c0007b29:	88 c8                	mov    al,cl
c0007b2b:	89 da                	mov    edx,ebx
c0007b2d:	ee                   	out    dx,al
c0007b2e:	b0 c7                	mov    al,0xc7
c0007b30:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b35:	ee                   	out    dx,al
c0007b36:	b0 0b                	mov    al,0xb
c0007b38:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b3d:	ee                   	out    dx,al
c0007b3e:	68 10 fb 01 c0       	push   0xc001fb10
c0007b43:	e8 3a 2e 00 00       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0007b48:	e8 20 86 00 00       	call   c001016d <KeDisplaySplashScreen()>
c0007b4d:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b52:	05 ff 0f 00 00       	add    eax,0xfff
c0007b57:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b5f:	e8 a9 03 00 00       	call   c0007f0d <Phys::physicalMemorySetup(unsigned int)>
c0007b64:	e8 7e 1c 00 00       	call   c00097e7 <Virt::virtualMemorySetup()>
c0007b69:	58                   	pop    eax
c0007b6a:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b6e:	53                   	push   ebx
c0007b6f:	e8 44 1f 00 00       	call   c0009ab8 <VAS::VAS()>
c0007b74:	89 1d b0 4f 02 c0    	mov    DWORD PTR ds:0xc0024fb0,ebx
c0007b7a:	e8 2b 6c 01 00       	call   c001e7aa <_init>
c0007b7f:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007b86:	e8 0f ff ff ff       	call   c0007a9a <malloc>
c0007b8b:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b8e:	89 c6                	mov    esi,eax
c0007b90:	e8 49 f2 ff ff       	call   c0006dde <Computer::Computer()>
c0007b95:	6a 00                	push   0x0
c0007b97:	89 35 b8 4e 02 c0    	mov    DWORD PTR ds:0xc0024eb8,esi
c0007b9d:	6a 00                	push   0x0
c0007b9f:	6a 00                	push   0x0
c0007ba1:	56                   	push   esi
c0007ba2:	e8 ff f5 ff ff       	call   c00071a6 <Computer::open(int, int, void*)>
c0007ba7:	83 c4 14             	add    esp,0x14
c0007baa:	53                   	push   ebx
c0007bab:	e8 d2 1f 00 00       	call   c0009b82 <VAS::~VAS()>
c0007bb0:	83 c4 30             	add    esp,0x30
c0007bb3:	5b                   	pop    ebx
c0007bb4:	5e                   	pop    esi
c0007bb5:	5f                   	pop    edi
c0007bb6:	c3                   	ret    

c0007bb7 <Phys::allocateDMA(unsigned long)>:
c0007bb7:	55                   	push   ebp
c0007bb8:	31 ed                	xor    ebp,ebp
c0007bba:	57                   	push   edi
c0007bbb:	56                   	push   esi
c0007bbc:	53                   	push   ebx
c0007bbd:	31 db                	xor    ebx,ebx
c0007bbf:	83 ec 1c             	sub    esp,0x1c
c0007bc2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007bc6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bce:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bd4:	31 c0                	xor    eax,eax
c0007bd6:	c1 ef 0c             	shr    edi,0xc
c0007bd9:	eb 1b                	jmp    c0007bf6 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bdb:	85 c0                	test   eax,eax
c0007bdd:	75 06                	jne    c0007be5 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bdf:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007be3:	89 dd                	mov    ebp,ebx
c0007be5:	8d 70 01             	lea    esi,[eax+0x1]
c0007be8:	39 f7                	cmp    edi,esi
c0007bea:	74 37                	je     c0007c23 <Phys::allocateDMA(unsigned long)+0x6c>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	83 c3 01             	add    ebx,0x1
c0007bf1:	83 fb 0f             	cmp    ebx,0xf
c0007bf4:	7f 13                	jg     c0007c09 <Phys::allocateDMA(unsigned long)+0x52>
c0007bf6:	80 bb ec 4e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdb114],0x0
c0007bfd:	74 dc                	je     c0007bdb <Phys::allocateDMA(unsigned long)+0x24>
c0007bff:	31 c0                	xor    eax,eax
c0007c01:	83 c3 01             	add    ebx,0x1
c0007c04:	83 fb 0f             	cmp    ebx,0xf
c0007c07:	7e ed                	jle    c0007bf6 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c09:	83 ec 0c             	sub    esp,0xc
c0007c0c:	68 28 fb 01 c0       	push   0xc001fb28
c0007c11:	e8 49 8c 00 00       	call   c001085f <KePanic(char const*)>
c0007c16:	83 c4 10             	add    esp,0x10
c0007c19:	31 c0                	xor    eax,eax
c0007c1b:	83 c4 1c             	add    esp,0x1c
c0007c1e:	5b                   	pop    ebx
c0007c1f:	5e                   	pop    esi
c0007c20:	5f                   	pop    edi
c0007c21:	5d                   	pop    ebp
c0007c22:	c3                   	ret    
c0007c23:	89 e9                	mov    ecx,ebp
c0007c25:	c1 f9 04             	sar    ecx,0x4
c0007c28:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c2c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c30:	89 ca                	mov    edx,ecx
c0007c32:	83 ea 01             	sub    edx,0x1
c0007c35:	79 03                	jns    c0007c3a <Phys::allocateDMA(unsigned long)+0x83>
c0007c37:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c3a:	c1 fa 04             	sar    edx,0x4
c0007c3d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c41:	74 08                	je     c0007c4b <Phys::allocateDMA(unsigned long)+0x94>
c0007c43:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c47:	31 c0                	xor    eax,eax
c0007c49:	eb b6                	jmp    c0007c01 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c4b:	85 f6                	test   esi,esi
c0007c4d:	74 17                	je     c0007c66 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c4f:	8d 95 ec 4e 02 c0    	lea    edx,[ebp-0x3ffdb114]
c0007c55:	8d 84 05 ed 4e 02 c0 	lea    eax,[ebp+eax*1-0x3ffdb113]
c0007c5c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c5f:	83 c2 01             	add    edx,0x1
c0007c62:	39 d0                	cmp    eax,edx
c0007c64:	75 f6                	jne    c0007c5c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c66:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c6f:	01 f8                	add    eax,edi
c0007c71:	85 d2                	test   edx,edx
c0007c73:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007c78:	74 17                	je     c0007c91 <Phys::allocateDMA(unsigned long)+0xda>
c0007c7a:	83 ec 0c             	sub    esp,0xc
c0007c7d:	68 28 fb 01 c0       	push   0xc001fb28
c0007c82:	e8 d8 8b 00 00       	call   c001085f <KePanic(char const*)>
c0007c87:	83 c4 10             	add    esp,0x10
c0007c8a:	89 f0                	mov    eax,esi
c0007c8c:	e9 5d ff ff ff       	jmp    c0007bee <Phys::allocateDMA(unsigned long)+0x37>
c0007c91:	c1 e5 0c             	shl    ebp,0xc
c0007c94:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007c9a:	e9 7c ff ff ff       	jmp    c0007c1b <Phys::allocateDMA(unsigned long)+0x64>

c0007c9f <Phys::freeDMA(unsigned long, unsigned long)>:
c0007c9f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ca3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007ca9:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007cae:	c1 ea 0c             	shr    edx,0xc
c0007cb1:	29 d0                	sub    eax,edx
c0007cb3:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007cb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cbc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007cc1:	c1 e8 0c             	shr    eax,0xc
c0007cc4:	85 d2                	test   edx,edx
c0007cc6:	74 11                	je     c0007cd9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007cc8:	05 ec 4e 02 c0       	add    eax,0xc0024eec
c0007ccd:	01 c2                	add    edx,eax
c0007ccf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cd2:	83 c0 01             	add    eax,0x1
c0007cd5:	39 d0                	cmp    eax,edx
c0007cd7:	75 f6                	jne    c0007ccf <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cd9:	c3                   	ret    

c0007cda <Phys::setPageState(unsigned long, bool)>:
c0007cda:	57                   	push   edi
c0007cdb:	56                   	push   esi
c0007cdc:	8b 35 d0 1d 02 c0    	mov    esi,DWORD PTR ds:0xc0021dd0
c0007ce2:	53                   	push   ebx
c0007ce3:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007ce8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007cec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007cf0:	0f b6 c0             	movzx  eax,al
c0007cf3:	89 ca                	mov    edx,ecx
c0007cf5:	83 e1 07             	and    ecx,0x7
c0007cf8:	c1 ea 03             	shr    edx,0x3
c0007cfb:	d3 c3                	rol    ebx,cl
c0007cfd:	01 d6                	add    esi,edx
c0007cff:	d3 e0                	shl    eax,cl
c0007d01:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d04:	21 fb                	and    ebx,edi
c0007d06:	88 1e                	mov    BYTE PTR [esi],bl
c0007d08:	8b 1d d0 1d 02 c0    	mov    ebx,DWORD PTR ds:0xc0021dd0
c0007d0e:	01 da                	add    edx,ebx
c0007d10:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d12:	09 c8                	or     eax,ecx
c0007d14:	88 02                	mov    BYTE PTR [edx],al
c0007d16:	5b                   	pop    ebx
c0007d17:	5e                   	pop    esi
c0007d18:	5f                   	pop    edi
c0007d19:	c3                   	ret    

c0007d1a <Phys::getPageState(unsigned long)>:
c0007d1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d1e:	8b 15 d0 1d 02 c0    	mov    edx,DWORD PTR ds:0xc0021dd0
c0007d24:	89 c8                	mov    eax,ecx
c0007d26:	83 e1 07             	and    ecx,0x7
c0007d29:	c1 e8 03             	shr    eax,0x3
c0007d2c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d30:	d3 f8                	sar    eax,cl
c0007d32:	83 e0 01             	and    eax,0x1
c0007d35:	c3                   	ret    

c0007d36 <Phys::freePage(unsigned long)>:
c0007d36:	53                   	push   ebx
c0007d37:	83 ec 08             	sub    esp,0x8
c0007d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d3e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d44:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d4a:	76 41                	jbe    c0007d8d <Phys::freePage(unsigned long)+0x57>
c0007d4c:	c1 e8 0c             	shr    eax,0xc
c0007d4f:	50                   	push   eax
c0007d50:	89 c3                	mov    ebx,eax
c0007d52:	e8 c3 ff ff ff       	call   c0007d1a <Phys::getPageState(unsigned long)>
c0007d57:	5a                   	pop    edx
c0007d58:	84 c0                	test   al,al
c0007d5a:	74 20                	je     c0007d7c <Phys::freePage(unsigned long)+0x46>
c0007d5c:	83 ec 08             	sub    esp,0x8
c0007d5f:	a1 e4 4e 02 c0       	mov    eax,ds:0xc0024ee4
c0007d64:	6a 00                	push   0x0
c0007d66:	83 e8 01             	sub    eax,0x1
c0007d69:	53                   	push   ebx
c0007d6a:	a3 e4 4e 02 c0       	mov    ds:0xc0024ee4,eax
c0007d6f:	e8 66 ff ff ff       	call   c0007cda <Phys::setPageState(unsigned long, bool)>
c0007d74:	83 c4 10             	add    esp,0x10
c0007d77:	83 c4 08             	add    esp,0x8
c0007d7a:	5b                   	pop    ebx
c0007d7b:	c3                   	ret    
c0007d7c:	c7 44 24 10 cd fb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fbcd
c0007d84:	83 c4 08             	add    esp,0x8
c0007d87:	5b                   	pop    ebx
c0007d88:	e9 d2 8a 00 00       	jmp    c001085f <KePanic(char const*)>
c0007d8d:	68 00 10 00 00       	push   0x1000
c0007d92:	50                   	push   eax
c0007d93:	e8 07 ff ff ff       	call   c0007c9f <Phys::freeDMA(unsigned long, unsigned long)>
c0007d98:	59                   	pop    ecx
c0007d99:	5b                   	pop    ebx
c0007d9a:	83 c4 08             	add    esp,0x8
c0007d9d:	5b                   	pop    ebx
c0007d9e:	c3                   	ret    

c0007d9f <Phys::allocatePage()>:
c0007d9f:	56                   	push   esi
c0007da0:	53                   	push   ebx
c0007da1:	83 ec 14             	sub    esp,0x14
c0007da4:	8b 35 d8 4e 02 c0    	mov    esi,DWORD PTR ds:0xc0024ed8
c0007daa:	89 f3                	mov    ebx,esi
c0007dac:	eb 0a                	jmp    c0007db8 <Phys::allocatePage()+0x19>
c0007dae:	89 1d d8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ed8,ebx
c0007db4:	39 de                	cmp    esi,ebx
c0007db6:	74 26                	je     c0007dde <Phys::allocatePage()+0x3f>
c0007db8:	53                   	push   ebx
c0007db9:	e8 5c ff ff ff       	call   c0007d1a <Phys::getPageState(unsigned long)>
c0007dbe:	5a                   	pop    edx
c0007dbf:	84 c0                	test   al,al
c0007dc1:	74 67                	je     c0007e2a <Phys::allocatePage()+0x8b>
c0007dc3:	83 c3 01             	add    ebx,0x1
c0007dc6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dcc:	75 e0                	jne    c0007dae <Phys::allocatePage()+0xf>
c0007dce:	31 db                	xor    ebx,ebx
c0007dd0:	c7 05 d8 4e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024ed8,0x0
c0007dda:	39 de                	cmp    esi,ebx
c0007ddc:	75 da                	jne    c0007db8 <Phys::allocatePage()+0x19>
c0007dde:	83 ec 0c             	sub    esp,0xc
c0007de1:	a0 fc 4e 02 c0       	mov    al,ds:0xc0024efc
c0007de6:	83 f0 01             	xor    eax,0x1
c0007de9:	a2 fc 4e 02 c0       	mov    ds:0xc0024efc,al
c0007dee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007df3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007df6:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007dfc:	50                   	push   eax
c0007dfd:	e8 22 28 00 00       	call   c000a624 <VAS::scanForEviction()>
c0007e02:	83 c4 10             	add    esp,0x10
c0007e05:	85 c0                	test   eax,eax
c0007e07:	75 48                	jne    c0007e51 <Phys::allocatePage()+0xb2>
c0007e09:	83 ec 0c             	sub    esp,0xc
c0007e0c:	68 50 fb 01 c0       	push   0xc001fb50
c0007e11:	e8 49 8a 00 00       	call   c001085f <KePanic(char const*)>
c0007e16:	83 c4 10             	add    esp,0x10
c0007e19:	8b 1d d8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024ed8
c0007e1f:	53                   	push   ebx
c0007e20:	e8 f5 fe ff ff       	call   c0007d1a <Phys::getPageState(unsigned long)>
c0007e25:	5a                   	pop    edx
c0007e26:	84 c0                	test   al,al
c0007e28:	75 99                	jne    c0007dc3 <Phys::allocatePage()+0x24>
c0007e2a:	6a 01                	push   0x1
c0007e2c:	53                   	push   ebx
c0007e2d:	e8 a8 fe ff ff       	call   c0007cda <Phys::setPageState(unsigned long, bool)>
c0007e32:	8b 15 e4 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee4
c0007e38:	a1 d8 4e 02 c0       	mov    eax,ds:0xc0024ed8
c0007e3d:	83 c2 01             	add    edx,0x1
c0007e40:	59                   	pop    ecx
c0007e41:	89 15 e4 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee4,edx
c0007e47:	c1 e0 0c             	shl    eax,0xc
c0007e4a:	5b                   	pop    ebx
c0007e4b:	83 c4 14             	add    esp,0x14
c0007e4e:	5b                   	pop    ebx
c0007e4f:	5e                   	pop    esi
c0007e50:	c3                   	ret    
c0007e51:	83 ec 08             	sub    esp,0x8
c0007e54:	89 c2                	mov    edx,eax
c0007e56:	6a 01                	push   0x1
c0007e58:	c1 ea 0c             	shr    edx,0xc
c0007e5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e5f:	52                   	push   edx
c0007e60:	e8 75 fe ff ff       	call   c0007cda <Phys::setPageState(unsigned long, bool)>
c0007e65:	83 c4 10             	add    esp,0x10
c0007e68:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e6c:	eb dd                	jmp    c0007e4b <Phys::allocatePage()+0xac>

c0007e6e <Phys::allocateContiguousPages(int)>:
c0007e6e:	57                   	push   edi
c0007e6f:	56                   	push   esi
c0007e70:	53                   	push   ebx
c0007e71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e75:	fa                   	cli    
c0007e76:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007e7b:	31 db                	xor    ebx,ebx
c0007e7d:	83 c0 01             	add    eax,0x1
c0007e80:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007e85:	85 db                	test   ebx,ebx
c0007e87:	75 11                	jne    c0007e9a <Phys::allocateContiguousPages(int)+0x2c>
c0007e89:	e8 11 ff ff ff       	call   c0007d9f <Phys::allocatePage()>
c0007e8e:	83 fe 01             	cmp    esi,0x1
c0007e91:	89 c7                	mov    edi,eax
c0007e93:	74 21                	je     c0007eb6 <Phys::allocateContiguousPages(int)+0x48>
c0007e95:	bb 01 00 00 00       	mov    ebx,0x1
c0007e9a:	e8 00 ff ff ff       	call   c0007d9f <Phys::allocatePage()>
c0007e9f:	89 da                	mov    edx,ebx
c0007ea1:	c1 e2 0c             	shl    edx,0xc
c0007ea4:	01 fa                	add    edx,edi
c0007ea6:	39 c2                	cmp    edx,eax
c0007ea8:	74 22                	je     c0007ecc <Phys::allocateContiguousPages(int)+0x5e>
c0007eaa:	bb 01 00 00 00       	mov    ebx,0x1
c0007eaf:	89 c7                	mov    edi,eax
c0007eb1:	83 fe 01             	cmp    esi,0x1
c0007eb4:	75 e4                	jne    c0007e9a <Phys::allocateContiguousPages(int)+0x2c>
c0007eb6:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0007ebb:	83 e8 01             	sub    eax,0x1
c0007ebe:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0007ec3:	75 01                	jne    c0007ec6 <Phys::allocateContiguousPages(int)+0x58>
c0007ec5:	fb                   	sti    
c0007ec6:	89 f8                	mov    eax,edi
c0007ec8:	5b                   	pop    ebx
c0007ec9:	5e                   	pop    esi
c0007eca:	5f                   	pop    edi
c0007ecb:	c3                   	ret    
c0007ecc:	83 c3 01             	add    ebx,0x1
c0007ecf:	39 f3                	cmp    ebx,esi
c0007ed1:	75 b2                	jne    c0007e85 <Phys::allocateContiguousPages(int)+0x17>
c0007ed3:	eb e1                	jmp    c0007eb6 <Phys::allocateContiguousPages(int)+0x48>

c0007ed5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ed5:	56                   	push   esi
c0007ed6:	53                   	push   ebx
c0007ed7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007edb:	39 1d dc 4e 02 c0    	cmp    DWORD PTR ds:0xc0024edc,ebx
c0007ee1:	73 06                	jae    c0007ee9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007ee3:	89 1d dc 4e 02 c0    	mov    DWORD PTR ds:0xc0024edc,ebx
c0007ee9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007eed:	c1 eb 0c             	shr    ebx,0xc
c0007ef0:	c1 e8 0c             	shr    eax,0xc
c0007ef3:	39 d8                	cmp    eax,ebx
c0007ef5:	73 13                	jae    c0007f0a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007ef7:	6a 00                	push   0x0
c0007ef9:	8d 70 01             	lea    esi,[eax+0x1]
c0007efc:	50                   	push   eax
c0007efd:	e8 d8 fd ff ff       	call   c0007cda <Phys::setPageState(unsigned long, bool)>
c0007f02:	5a                   	pop    edx
c0007f03:	89 f0                	mov    eax,esi
c0007f05:	59                   	pop    ecx
c0007f06:	39 f3                	cmp    ebx,esi
c0007f08:	75 ed                	jne    c0007ef7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f0a:	5b                   	pop    ebx
c0007f0b:	5e                   	pop    esi
c0007f0c:	c3                   	ret    

c0007f0d <Phys::physicalMemorySetup(unsigned int)>:
c0007f0d:	55                   	push   ebp
c0007f0e:	57                   	push   edi
c0007f0f:	56                   	push   esi
c0007f10:	53                   	push   ebx
c0007f11:	83 ec 40             	sub    esp,0x40
c0007f14:	6a 10                	push   0x10
c0007f16:	6a 00                	push   0x0
c0007f18:	68 ec 4e 02 c0       	push   0xc0024eec
c0007f1d:	e8 ce 85 ff ff       	call   c00004f0 <memset>
c0007f22:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f26:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f2b:	05 00 10 00 00       	add    eax,0x1000
c0007f30:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f34:	5b                   	pop    ebx
c0007f35:	31 db                	xor    ebx,ebx
c0007f37:	5e                   	pop    esi
c0007f38:	50                   	push   eax
c0007f39:	68 e3 fb 01 c0       	push   0xc001fbe3
c0007f3e:	e8 3f 2a 00 00       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0007f43:	83 c4 10             	add    esp,0x10
c0007f46:	83 ec 08             	sub    esp,0x8
c0007f49:	6a 01                	push   0x1
c0007f4b:	53                   	push   ebx
c0007f4c:	83 c3 01             	add    ebx,0x1
c0007f4f:	e8 86 fd ff ff       	call   c0007cda <Phys::setPageState(unsigned long, bool)>
c0007f54:	83 c4 10             	add    esp,0x10
c0007f57:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f5d:	75 e7                	jne    c0007f46 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f5f:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0007f66:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007f6a:	85 c0                	test   eax,eax
c0007f6c:	0f 84 98 01 00 00    	je     c000810a <Phys::physicalMemorySetup(unsigned int)+0x1fd>
c0007f72:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007f76:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007f7e:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007f83:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007f8f:	eb 1c                	jmp    c0007fad <Phys::physicalMemorySetup(unsigned int)+0xa0>
c0007f91:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007f95:	83 c3 18             	add    ebx,0x18
c0007f98:	83 c6 01             	add    esi,0x1
c0007f9b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007f9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fa3:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fa7:	0f 84 6d 01 00 00    	je     c000811a <Phys::physicalMemorySetup(unsigned int)+0x20d>
c0007fad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fb0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fb3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fbe:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fc0:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fc3:	01 f0                	add    eax,esi
c0007fc5:	55                   	push   ebp
c0007fc6:	11 fa                	adc    edx,edi
c0007fc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007fcc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007fd0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007fd4:	51                   	push   ecx
c0007fd5:	56                   	push   esi
c0007fd6:	68 80 fb 01 c0       	push   0xc001fb80
c0007fdb:	e8 a2 29 00 00       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0007fe0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007fe4:	83 c4 10             	add    esp,0x10
c0007fe7:	09 f8                	or     eax,edi
c0007fe9:	0f 85 2b 01 00 00    	jne    c000811a <Phys::physicalMemorySetup(unsigned int)+0x20d>
c0007fef:	83 fd 01             	cmp    ebp,0x1
c0007ff2:	75 9d                	jne    c0007f91 <Phys::physicalMemorySetup(unsigned int)+0x84>
c0007ff4:	ba 00 00 08 00       	mov    edx,0x80000
c0007ff9:	89 c1                	mov    ecx,eax
c0007ffb:	39 f2                	cmp    edx,esi
c0007ffd:	19 f9                	sbb    ecx,edi
c0007fff:	0f 82 ab 00 00 00    	jb     c00080b0 <Phys::physicalMemorySetup(unsigned int)+0x1a3>
c0008005:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008009:	89 c1                	mov    ecx,eax
c000800b:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000800f:	0f 83 9b 00 00 00    	jae    c00080b0 <Phys::physicalMemorySetup(unsigned int)+0x1a3>
c0008015:	ba 00 00 0a 00       	mov    edx,0xa0000
c000801a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000801e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008022:	39 fa                	cmp    edx,edi
c0008024:	19 e8                	sbb    eax,ebp
c0008026:	0f 82 b0 01 00 00    	jb     c00081dc <Phys::physicalMemorySetup(unsigned int)+0x2cf>
c000802c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008030:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0008034:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000803a:	ba ff 1f 00 00       	mov    edx,0x1fff
c000803f:	83 d5 ff             	adc    ebp,0xffffffff
c0008042:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008046:	31 c0                	xor    eax,eax
c0008048:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000804c:	39 fa                	cmp    edx,edi
c000804e:	89 c1                	mov    ecx,eax
c0008050:	19 e9                	sbb    ecx,ebp
c0008052:	0f 83 39 ff ff ff    	jae    c0007f91 <Phys::physicalMemorySetup(unsigned int)+0x84>
c0008058:	be 00 00 08 00       	mov    esi,0x80000
c000805d:	83 ec 04             	sub    esp,0x4
c0008060:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008064:	57                   	push   edi
c0008065:	56                   	push   esi
c0008066:	68 a4 fb 01 c0       	push   0xc001fba4
c000806b:	e8 12 29 00 00       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0008070:	5d                   	pop    ebp
c0008071:	58                   	pop    eax
c0008072:	57                   	push   edi
c0008073:	56                   	push   esi
c0008074:	e8 5c fe ff ff       	call   c0007ed5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0008079:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000807d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008081:	83 c4 0c             	add    esp,0xc
c0008084:	0f ac d0 0c          	shrd   eax,edx,0xc
c0008088:	8b 15 e8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024ee8
c000808e:	01 d0                	add    eax,edx
c0008090:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0008097:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c000809c:	52                   	push   edx
c000809d:	50                   	push   eax
c000809e:	68 09 fc 01 c0       	push   0xc001fc09
c00080a3:	e8 da 28 00 00       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c00080a8:	83 c4 10             	add    esp,0x10
c00080ab:	e9 e1 fe ff ff       	jmp    c0007f91 <Phys::physicalMemorySetup(unsigned int)+0x84>
c00080b0:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080bc:	39 ea                	cmp    edx,ebp
c00080be:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080c2:	0f 82 c9 fe ff ff    	jb     c0007f91 <Phys::physicalMemorySetup(unsigned int)+0x84>
c00080c8:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080cd:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080d1:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080d5:	0f 83 b6 fe ff ff    	jae    c0007f91 <Phys::physicalMemorySetup(unsigned int)+0x84>
c00080db:	39 ee                	cmp    esi,ebp
c00080dd:	89 f8                	mov    eax,edi
c00080df:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00080e3:	0f 83 74 ff ff ff    	jae    c000805d <Phys::physicalMemorySetup(unsigned int)+0x150>
c00080e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00080ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00080f1:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00080f5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00080f9:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c00080fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008101:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008105:	e9 53 ff ff ff       	jmp    c000805d <Phys::physicalMemorySetup(unsigned int)+0x150>
c000810a:	83 ec 0c             	sub    esp,0xc
c000810d:	68 fb fb 01 c0       	push   0xc001fbfb
c0008112:	e8 48 87 00 00       	call   c001085f <KePanic(char const*)>
c0008117:	83 c4 10             	add    esp,0x10
c000811a:	83 ec 08             	sub    esp,0x8
c000811d:	bb 60 00 00 00       	mov    ebx,0x60
c0008122:	6a 00                	push   0x0
c0008124:	6a 06                	push   0x6
c0008126:	e8 af fb ff ff       	call   c0007cda <Phys::setPageState(unsigned long, bool)>
c000812b:	58                   	pop    eax
c000812c:	5a                   	pop    edx
c000812d:	6a 00                	push   0x0
c000812f:	6a 07                	push   0x7
c0008131:	e8 a4 fb ff ff       	call   c0007cda <Phys::setPageState(unsigned long, bool)>
c0008136:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c000813c:	83 c4 10             	add    esp,0x10
c000813f:	83 c1 02             	add    ecx,0x2
c0008142:	89 0d e8 4e 02 c0    	mov    DWORD PTR ds:0xc0024ee8,ecx
c0008148:	83 ec 08             	sub    esp,0x8
c000814b:	6a 00                	push   0x0
c000814d:	53                   	push   ebx
c000814e:	83 c3 01             	add    ebx,0x1
c0008151:	e8 84 fb ff ff       	call   c0007cda <Phys::setPageState(unsigned long, bool)>
c0008156:	83 c4 10             	add    esp,0x10
c0008159:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000815f:	75 e7                	jne    c0008148 <Phys::physicalMemorySetup(unsigned int)+0x23b>
c0008161:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008166:	bb 40 01 00 00       	mov    ebx,0x140
c000816b:	83 c0 20             	add    eax,0x20
c000816e:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008173:	eb 26                	jmp    c000819b <Phys::physicalMemorySetup(unsigned int)+0x28e>
c0008175:	83 ec 08             	sub    esp,0x8
c0008178:	6a 00                	push   0x0
c000817a:	53                   	push   ebx
c000817b:	83 c3 01             	add    ebx,0x1
c000817e:	e8 57 fb ff ff       	call   c0007cda <Phys::setPageState(unsigned long, bool)>
c0008183:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c0008188:	83 c4 10             	add    esp,0x10
c000818b:	83 c0 01             	add    eax,0x1
c000818e:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0008194:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c0008199:	74 07                	je     c00081a2 <Phys::physicalMemorySetup(unsigned int)+0x295>
c000819b:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081a0:	7e d3                	jle    c0008175 <Phys::physicalMemorySetup(unsigned int)+0x268>
c00081a2:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081a7:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081ac:	7f 26                	jg     c00081d4 <Phys::physicalMemorySetup(unsigned int)+0x2c7>
c00081ae:	83 ec 08             	sub    esp,0x8
c00081b1:	6a 00                	push   0x0
c00081b3:	53                   	push   ebx
c00081b4:	83 c3 01             	add    ebx,0x1
c00081b7:	e8 1e fb ff ff       	call   c0007cda <Phys::setPageState(unsigned long, bool)>
c00081bc:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c00081c1:	83 c4 10             	add    esp,0x10
c00081c4:	83 c0 01             	add    eax,0x1
c00081c7:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081cd:	a3 e8 4e 02 c0       	mov    ds:0xc0024ee8,eax
c00081d2:	75 d3                	jne    c00081a7 <Phys::physicalMemorySetup(unsigned int)+0x29a>
c00081d4:	83 c4 3c             	add    esp,0x3c
c00081d7:	5b                   	pop    ebx
c00081d8:	5e                   	pop    esi
c00081d9:	5f                   	pop    edi
c00081da:	5d                   	pop    ebp
c00081db:	c3                   	ret    
c00081dc:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00081e4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00081ec:	e9 3b fe ff ff       	jmp    c000802c <Phys::physicalMemorySetup(unsigned int)+0x11f>
c00081f1:	90                   	nop

c00081f2 <Pipe::isAtty()>:
c00081f2:	31 c0                	xor    eax,eax
c00081f4:	c3                   	ret    
c00081f5:	90                   	nop

c00081f6 <Pipe::~Pipe()>:
c00081f6:	83 ec 0c             	sub    esp,0xc
c00081f9:	ba 68 fc 01 c0       	mov    edx,0xc001fc68
c00081fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008202:	89 10                	mov    DWORD PTR [eax],edx
c0008204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008208:	83 ec 0c             	sub    esp,0xc
c000820b:	50                   	push   eax
c000820c:	e8 8f 11 00 00       	call   c00093a0 <UnixFile::~UnixFile()>
c0008211:	83 c4 10             	add    esp,0x10
c0008214:	90                   	nop
c0008215:	83 c4 0c             	add    esp,0xc
c0008218:	c3                   	ret    
c0008219:	90                   	nop

c000821a <Pipe::~Pipe()>:
c000821a:	83 ec 0c             	sub    esp,0xc
c000821d:	83 ec 0c             	sub    esp,0xc
c0008220:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008224:	e8 cd ff ff ff       	call   c00081f6 <Pipe::~Pipe()>
c0008229:	83 c4 10             	add    esp,0x10
c000822c:	83 ec 08             	sub    esp,0x8
c000822f:	6a 20                	push   0x20
c0008231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008235:	e8 1b 26 00 00       	call   c000a855 <operator delete(void*, unsigned long)>
c000823a:	83 c4 10             	add    esp,0x10
c000823d:	83 c4 0c             	add    esp,0xc
c0008240:	c3                   	ret    
c0008241:	90                   	nop

c0008242 <Pipe::write(unsigned long long, void*, int*)>:
c0008242:	55                   	push   ebp
c0008243:	57                   	push   edi
c0008244:	56                   	push   esi
c0008245:	53                   	push   ebx
c0008246:	83 ec 1c             	sub    esp,0x1c
c0008249:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000824d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008251:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0008254:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008258:	89 04 24             	mov    DWORD PTR [esp],eax
c000825b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000825f:	89 d8                	mov    eax,ebx
c0008261:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0008264:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008268:	89 d6                	mov    esi,edx
c000826a:	89 d7                	mov    edi,edx
c000826c:	c1 ff 1f             	sar    edi,0x1f
c000826f:	03 34 24             	add    esi,DWORD PTR [esp]
c0008272:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0008276:	c1 f8 1f             	sar    eax,0x1f
c0008279:	39 f3                	cmp    ebx,esi
c000827b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000827f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008283:	19 f8                	sbb    eax,edi
c0008285:	b8 01 00 00 00       	mov    eax,0x1
c000828a:	72 6e                	jb     c00082fa <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000828c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000828f:	01 d0                	add    eax,edx
c0008291:	99                   	cdq    
c0008292:	f7 fb                	idiv   ebx
c0008294:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008298:	29 d3                	sub    ebx,edx
c000829a:	89 d7                	mov    edi,edx
c000829c:	89 de                	mov    esi,ebx
c000829e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082a1:	c1 fb 1f             	sar    ebx,0x1f
c00082a4:	39 f2                	cmp    edx,esi
c00082a6:	19 d8                	sbb    eax,ebx
c00082a8:	b8 00 00 00 00       	mov    eax,0x0
c00082ad:	72 04                	jb     c00082b3 <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082af:	89 d0                	mov    eax,edx
c00082b1:	29 f0                	sub    eax,esi
c00082b3:	89 d3                	mov    ebx,edx
c00082b5:	29 c3                	sub    ebx,eax
c00082b7:	74 0b                	je     c00082c4 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082b9:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082bc:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082c0:	89 d9                	mov    ecx,ebx
c00082c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082c4:	85 c0                	test   eax,eax
c00082c6:	74 0d                	je     c00082d5 <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082c8:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082cc:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082cf:	89 de                	mov    esi,ebx
c00082d1:	89 c1                	mov    ecx,eax
c00082d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082d5:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00082d8:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00082dd:	75 10                	jne    c00082ef <Pipe::write(unsigned long long, void*, int*)+0xad>
c00082df:	83 ec 0c             	sub    esp,0xc
c00082e2:	68 25 fc 01 c0       	push   0xc001fc25
c00082e7:	e8 73 85 00 00       	call   c001085f <KePanic(char const*)>
c00082ec:	83 c4 10             	add    esp,0x10
c00082ef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00082f3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00082f6:	89 08                	mov    DWORD PTR [eax],ecx
c00082f8:	31 c0                	xor    eax,eax
c00082fa:	83 c4 1c             	add    esp,0x1c
c00082fd:	5b                   	pop    ebx
c00082fe:	5e                   	pop    esi
c00082ff:	5f                   	pop    edi
c0008300:	5d                   	pop    ebp
c0008301:	c3                   	ret    

c0008302 <Pipe::read(unsigned long long, void*, int*)>:
c0008302:	55                   	push   ebp
c0008303:	57                   	push   edi
c0008304:	56                   	push   esi
c0008305:	53                   	push   ebx
c0008306:	83 ec 1c             	sub    esp,0x1c
c0008309:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000830d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008311:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008315:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008318:	89 c8                	mov    eax,ecx
c000831a:	99                   	cdq    
c000831b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000831f:	74 24                	je     c0008345 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008321:	39 f9                	cmp    ecx,edi
c0008323:	89 d1                	mov    ecx,edx
c0008325:	19 f1                	sbb    ecx,esi
c0008327:	73 1c                	jae    c0008345 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008329:	fa                   	cli    
c000832a:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0008330:	e8 db cc 00 00       	call   c0015010 <schedule()>
c0008335:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000833a:	48                   	dec    eax
c000833b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0008340:	75 d3                	jne    c0008315 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008342:	fb                   	sti    
c0008343:	eb d0                	jmp    c0008315 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008345:	39 f8                	cmp    eax,edi
c0008347:	89 d1                	mov    ecx,edx
c0008349:	89 3c 24             	mov    DWORD PTR [esp],edi
c000834c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008350:	19 f1                	sbb    ecx,esi
c0008352:	73 07                	jae    c000835b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008354:	89 04 24             	mov    DWORD PTR [esp],eax
c0008357:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000835b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000835e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008361:	29 f7                	sub    edi,esi
c0008363:	89 f8                	mov    eax,edi
c0008365:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008369:	99                   	cdq    
c000836a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000836d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008371:	19 d0                	sbb    eax,edx
c0008373:	73 07                	jae    c000837c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008375:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008378:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000837c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000837f:	89 ea                	mov    edx,ebp
c0008381:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008385:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000838a:	74 0d                	je     c0008399 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000838c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000838f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008393:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008397:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008399:	85 d2                	test   edx,edx
c000839b:	74 11                	je     c00083ae <Pipe::read(unsigned long long, void*, int*)+0xac>
c000839d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a1:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083a4:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083a8:	89 d1                	mov    ecx,edx
c00083aa:	89 c7                	mov    edi,eax
c00083ac:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083ae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083b1:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083b4:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083b7:	99                   	cdq    
c00083b8:	89 f7                	mov    edi,esi
c00083ba:	03 04 24             	add    eax,DWORD PTR [esp]
c00083bd:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083c1:	c1 ff 1f             	sar    edi,0x1f
c00083c4:	57                   	push   edi
c00083c5:	56                   	push   esi
c00083c6:	52                   	push   edx
c00083c7:	50                   	push   eax
c00083c8:	e8 c3 62 01 00       	call   c001e690 <__umoddi3>
c00083cd:	83 c4 10             	add    esp,0x10
c00083d0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083d3:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00083d8:	75 10                	jne    c00083ea <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00083da:	83 ec 0c             	sub    esp,0xc
c00083dd:	68 42 fc 01 c0       	push   0xc001fc42
c00083e2:	e8 78 84 00 00       	call   c001085f <KePanic(char const*)>
c00083e7:	83 c4 10             	add    esp,0x10
c00083ea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00083ee:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00083f1:	89 10                	mov    DWORD PTR [eax],edx
c00083f3:	83 c4 1c             	add    esp,0x1c
c00083f6:	31 c0                	xor    eax,eax
c00083f8:	5b                   	pop    ebx
c00083f9:	5e                   	pop    esi
c00083fa:	5f                   	pop    edi
c00083fb:	5d                   	pop    ebp
c00083fc:	c3                   	ret    
c00083fd:	90                   	nop

c00083fe <Pipe::Pipe(int)>:
c00083fe:	83 ec 0c             	sub    esp,0xc
c0008401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008405:	83 ec 08             	sub    esp,0x8
c0008408:	6a 00                	push   0x0
c000840a:	50                   	push   eax
c000840b:	e8 aa 0d 00 00       	call   c00091ba <UnixFile::UnixFile(int)>
c0008410:	83 c4 10             	add    esp,0x10
c0008413:	ba 68 fc 01 c0       	mov    edx,0xc001fc68
c0008418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000841c:	89 10                	mov    DWORD PTR [eax],edx
c000841e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008422:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008426:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008434:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008438:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000843f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008443:	83 ec 0c             	sub    esp,0xc
c0008446:	50                   	push   eax
c0008447:	e8 4e f6 ff ff       	call   c0007a9a <malloc>
c000844c:	83 c4 10             	add    esp,0x10
c000844f:	89 c2                	mov    edx,eax
c0008451:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008455:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008458:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000845c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008460:	90                   	nop
c0008461:	83 c4 0c             	add    esp,0xc
c0008464:	c3                   	ret    
c0008465:	90                   	nop

c0008466 <VgaText::isAtty()>:
c0008466:	b0 01                	mov    al,0x1
c0008468:	c3                   	ret    
c0008469:	90                   	nop

c000846a <VgaText::~VgaText()>:
c000846a:	83 ec 0c             	sub    esp,0xc
c000846d:	ba b0 fc 01 c0       	mov    edx,0xc001fcb0
c0008472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008476:	89 10                	mov    DWORD PTR [eax],edx
c0008478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847c:	83 ec 0c             	sub    esp,0xc
c000847f:	50                   	push   eax
c0008480:	e8 1b 0f 00 00       	call   c00093a0 <UnixFile::~UnixFile()>
c0008485:	83 c4 10             	add    esp,0x10
c0008488:	90                   	nop
c0008489:	83 c4 0c             	add    esp,0xc
c000848c:	c3                   	ret    
c000848d:	90                   	nop

c000848e <VgaText::~VgaText()>:
c000848e:	83 ec 0c             	sub    esp,0xc
c0008491:	83 ec 0c             	sub    esp,0xc
c0008494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008498:	e8 cd ff ff ff       	call   c000846a <VgaText::~VgaText()>
c000849d:	83 c4 10             	add    esp,0x10
c00084a0:	83 ec 08             	sub    esp,0x8
c00084a3:	68 84 01 00 00       	push   0x184
c00084a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ac:	e8 a4 23 00 00       	call   c000a855 <operator delete(void*, unsigned long)>
c00084b1:	83 c4 10             	add    esp,0x10
c00084b4:	83 c4 0c             	add    esp,0xc
c00084b7:	c3                   	ret    

c00084b8 <VgaText::read(unsigned long long, void*, int*)>:
c00084b8:	83 ec 10             	sub    esp,0x10
c00084bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c7:	e8 c4 47 00 00       	call   c000cc90 <readKeyboard(VgaText*, char*, unsigned long)>
c00084cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084d0:	89 02                	mov    DWORD PTR [edx],eax
c00084d2:	31 c0                	xor    eax,eax
c00084d4:	83 c4 1c             	add    esp,0x1c
c00084d7:	c3                   	ret    

c00084d8 <setTerminalScrollLock(bool)>:
c00084d8:	c3                   	ret    

c00084d9 <doTerminalCycle()>:
c00084d9:	c3                   	ret    

c00084da <addToTerminalCycle(VgaText*)>:
c00084da:	c3                   	ret    

c00084db <scrollTerminalScrollLock(int)>:
c00084db:	c3                   	ret    

c00084dc <VgaText::updateTitle()>:
c00084dc:	c3                   	ret    
c00084dd:	90                   	nop

c00084de <VgaText::load()>:
c00084de:	c3                   	ret    
c00084df:	90                   	nop

c00084e0 <VgaText::updateCursor()>:
c00084e0:	83 ec 14             	sub    esp,0x14
c00084e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00084ea:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084ed:	e8 56 f8 00 00       	call   c0017d48 <HalConsoleCursorUpdate(int, int)>
c00084f2:	83 c4 1c             	add    esp,0x1c
c00084f5:	c3                   	ret    

c00084f6 <VgaText::doANSI_SGR(int)>:
c00084f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00084fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00084fe:	85 d2                	test   edx,edx
c0008500:	75 0b                	jne    c000850d <VgaText::doANSI_SGR(int)+0x17>
c0008502:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008505:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008508:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000850b:	eb 59                	jmp    c0008566 <VgaText::doANSI_SGR(int)+0x70>
c000850d:	83 fa 07             	cmp    edx,0x7
c0008510:	75 0b                	jne    c000851d <VgaText::doANSI_SGR(int)+0x27>
c0008512:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008515:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008518:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000851b:	eb 49                	jmp    c0008566 <VgaText::doANSI_SGR(int)+0x70>
c000851d:	83 fa 1b             	cmp    edx,0x1b
c0008520:	74 e0                	je     c0008502 <VgaText::doANSI_SGR(int)+0xc>
c0008522:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008525:	83 f9 07             	cmp    ecx,0x7
c0008528:	77 09                	ja     c0008533 <VgaText::doANSI_SGR(int)+0x3d>
c000852a:	8b 14 8d 00 1e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde200]
c0008531:	eb 20                	jmp    c0008553 <VgaText::doANSI_SGR(int)+0x5d>
c0008533:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008536:	83 f9 07             	cmp    ecx,0x7
c0008539:	77 09                	ja     c0008544 <VgaText::doANSI_SGR(int)+0x4e>
c000853b:	8b 14 8d 00 1e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffde200]
c0008542:	eb 22                	jmp    c0008566 <VgaText::doANSI_SGR(int)+0x70>
c0008544:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008547:	83 f9 07             	cmp    ecx,0x7
c000854a:	77 0b                	ja     c0008557 <VgaText::doANSI_SGR(int)+0x61>
c000854c:	8b 14 95 b8 1c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde348]
c0008553:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008556:	c3                   	ret    
c0008557:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000855a:	83 f9 07             	cmp    ecx,0x7
c000855d:	77 0a                	ja     c0008569 <VgaText::doANSI_SGR(int)+0x73>
c000855f:	8b 14 95 90 1c 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffde370]
c0008566:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008569:	c3                   	ret    

c000856a <VgaText::setDefaultBgColour(VgaColour)>:
c000856a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000856e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008572:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008575:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008578:	c3                   	ret    
c0008579:	90                   	nop

c000857a <VgaText::setDefaultFgColour(VgaColour)>:
c000857a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000857e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008582:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008585:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008588:	c3                   	ret    
c0008589:	90                   	nop

c000858a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000858a:	53                   	push   ebx
c000858b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000858f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008593:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008597:	51                   	push   ecx
c0008598:	e8 cd ff ff ff       	call   c000856a <VgaText::setDefaultBgColour(VgaColour)>
c000859d:	58                   	pop    eax
c000859e:	5a                   	pop    edx
c000859f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085a3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085a7:	5b                   	pop    ebx
c00085a8:	eb d0                	jmp    c000857a <VgaText::setDefaultFgColour(VgaColour)>

c00085aa <VgaText::setTitleTextColour(VgaColour)>:
c00085aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085b2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085b5:	c3                   	ret    

c00085b6 <VgaText::setTitleColour(VgaColour)>:
c00085b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085be:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085c1:	c3                   	ret    

c00085c2 <VgaText::setTitle(char*)>:
c00085c2:	c3                   	ret    
c00085c3:	90                   	nop

c00085c4 <VgaText::combineColours(unsigned char, unsigned char)>:
c00085c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085c8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085cd:	83 e0 0f             	and    eax,0xf
c00085d0:	c1 e2 04             	shl    edx,0x4
c00085d3:	09 d0                	or     eax,edx
c00085d5:	c3                   	ret    

c00085d6 <VgaText::scrollScreen()>:
c00085d6:	55                   	push   ebp
c00085d7:	57                   	push   edi
c00085d8:	56                   	push   esi
c00085d9:	be 01 00 00 00       	mov    esi,0x1
c00085de:	53                   	push   ebx
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00085e6:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00085e9:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00085ef:	31 ff                	xor    edi,edi
c00085f1:	01 e9                	add    ecx,ebp
c00085f3:	8a 01                	mov    al,BYTE PTR [ecx]
c00085f5:	83 fe 18             	cmp    esi,0x18
c00085f8:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c00085fe:	75 20                	jne    c0008620 <VgaText::scrollScreen()+0x4a>
c0008600:	f7 c7 01 00 00 00    	test   edi,0x1
c0008606:	74 15                	je     c000861d <VgaText::scrollScreen()+0x47>
c0008608:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000860c:	50                   	push   eax
c000860d:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008611:	50                   	push   eax
c0008612:	e8 ad ff ff ff       	call   c00085c4 <VgaText::combineColours(unsigned char, unsigned char)>
c0008617:	5a                   	pop    edx
c0008618:	5a                   	pop    edx
c0008619:	88 01                	mov    BYTE PTR [ecx],al
c000861b:	eb 03                	jmp    c0008620 <VgaText::scrollScreen()+0x4a>
c000861d:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0008620:	47                   	inc    edi
c0008621:	41                   	inc    ecx
c0008622:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008628:	75 c9                	jne    c00085f3 <VgaText::scrollScreen()+0x1d>
c000862a:	46                   	inc    esi
c000862b:	83 fe 19             	cmp    esi,0x19
c000862e:	75 b9                	jne    c00085e9 <VgaText::scrollScreen()+0x13>
c0008630:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008636:	75 1f                	jne    c0008657 <VgaText::scrollScreen()+0x81>
c0008638:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000863c:	74 05                	je     c0008643 <VgaText::scrollScreen()+0x6d>
c000863e:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008641:	eb 14                	jmp    c0008657 <VgaText::scrollScreen()+0x81>
c0008643:	50                   	push   eax
c0008644:	50                   	push   eax
c0008645:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008649:	50                   	push   eax
c000864a:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000864e:	50                   	push   eax
c000864f:	e8 88 f5 00 00       	call   c0017bdc <HalConsoleScroll(int, int)>
c0008654:	83 c4 10             	add    esp,0x10
c0008657:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000865b:	83 c4 0c             	add    esp,0xc
c000865e:	5b                   	pop    ebx
c000865f:	5e                   	pop    esi
c0008660:	5f                   	pop    edi
c0008661:	5d                   	pop    ebp
c0008662:	e9 79 fe ff ff       	jmp    c00084e0 <VgaText::updateCursor()>
c0008667:	90                   	nop

c0008668 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008668:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000866d:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0008672:	c1 e0 08             	shl    eax,0x8
c0008675:	09 d0                	or     eax,edx
c0008677:	c3                   	ret    

c0008678 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008678:	55                   	push   ebp
c0008679:	57                   	push   edi
c000867a:	56                   	push   esi
c000867b:	53                   	push   ebx
c000867c:	83 ec 1c             	sub    esp,0x1c
c000867f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008683:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008687:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000868b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000868f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0008693:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008697:	0f b6 c3             	movzx  eax,bl
c000869a:	50                   	push   eax
c000869b:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086a0:	50                   	push   eax
c00086a1:	e8 1e ff ff ff       	call   c00085c4 <VgaText::combineColours(unsigned char, unsigned char)>
c00086a6:	5a                   	pop    edx
c00086a7:	0f b6 c0             	movzx  eax,al
c00086aa:	59                   	pop    ecx
c00086ab:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086b0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086b4:	50                   	push   eax
c00086b5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086b9:	e8 aa ff ff ff       	call   c0008668 <VgaText::combineCharAndColour(char, unsigned char)>
c00086be:	5a                   	pop    edx
c00086bf:	6b d7 50             	imul   edx,edi,0x50
c00086c2:	59                   	pop    ecx
c00086c3:	01 f2                	add    edx,esi
c00086c5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086c8:	0f b7 d2             	movzx  edx,dx
c00086cb:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086cf:	39 2d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebp
c00086d5:	75 28                	jne    c00086ff <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c00086d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086db:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00086df:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00086e3:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00086e7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00086ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00086f3:	83 c4 1c             	add    esp,0x1c
c00086f6:	5b                   	pop    ebx
c00086f7:	5e                   	pop    esi
c00086f8:	5f                   	pop    edi
c00086f9:	5d                   	pop    ebp
c00086fa:	e9 e5 f5 00 00       	jmp    c0017ce4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00086ff:	83 c4 1c             	add    esp,0x1c
c0008702:	5b                   	pop    ebx
c0008703:	5e                   	pop    esi
c0008704:	5f                   	pop    edi
c0008705:	5d                   	pop    ebp
c0008706:	c3                   	ret    
c0008707:	90                   	nop

c0008708 <VgaText::getCursorX()>:
c0008708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000870c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000870f:	c3                   	ret    

c0008710 <VgaText::getCursorY()>:
c0008710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008714:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008717:	c3                   	ret    

c0008718 <VgaText::setCursor(int, int)>:
c0008718:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000871c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008720:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008723:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008727:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000872a:	e9 b1 fd ff ff       	jmp    c00084e0 <VgaText::updateCursor()>

c000872f <setActiveTerminal(VgaText*)>:
c000872f:	53                   	push   ebx
c0008730:	83 ec 08             	sub    esp,0x8
c0008733:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008737:	85 db                	test   ebx,ebx
c0008739:	75 11                	jne    c000874c <setActiveTerminal(VgaText*)+0x1d>
c000873b:	c7 44 24 10 7c fc 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fc7c
c0008743:	83 c4 08             	add    esp,0x8
c0008746:	5b                   	pop    ebx
c0008747:	e9 13 81 00 00       	jmp    c001085f <KePanic(char const*)>
c000874c:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c0008751:	85 c0                	test   eax,eax
c0008753:	74 0c                	je     c0008761 <setActiveTerminal(VgaText*)+0x32>
c0008755:	83 ec 0c             	sub    esp,0xc
c0008758:	50                   	push   eax
c0008759:	e8 82 fd ff ff       	call   c00084e0 <VgaText::updateCursor()>
c000875e:	83 c4 10             	add    esp,0x10
c0008761:	89 1d 04 4f 02 c0    	mov    DWORD PTR ds:0xc0024f04,ebx
c0008767:	50                   	push   eax
c0008768:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000876b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000876e:	53                   	push   ebx
c000876f:	e8 a4 ff ff ff       	call   c0008718 <VgaText::setCursor(int, int)>
c0008774:	83 c4 18             	add    esp,0x18
c0008777:	5b                   	pop    ebx
c0008778:	c3                   	ret    
c0008779:	90                   	nop

c000877a <VgaText::clearScreen()>:
c000877a:	57                   	push   edi
c000877b:	56                   	push   esi
c000877c:	31 f6                	xor    esi,esi
c000877e:	53                   	push   ebx
c000877f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008783:	52                   	push   edx
c0008784:	6a 00                	push   0x0
c0008786:	6a 00                	push   0x0
c0008788:	53                   	push   ebx
c0008789:	e8 8a ff ff ff       	call   c0008718 <VgaText::setCursor(int, int)>
c000878e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008795:	83 c4 10             	add    esp,0x10
c0008798:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000879b:	7e 20                	jle    c00087bd <VgaText::clearScreen()+0x43>
c000879d:	31 ff                	xor    edi,edi
c000879f:	50                   	push   eax
c00087a0:	50                   	push   eax
c00087a1:	56                   	push   esi
c00087a2:	57                   	push   edi
c00087a3:	47                   	inc    edi
c00087a4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087a7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087aa:	6a 20                	push   0x20
c00087ac:	53                   	push   ebx
c00087ad:	e8 c6 fe ff ff       	call   c0008678 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087b2:	83 c4 20             	add    esp,0x20
c00087b5:	83 ff 50             	cmp    edi,0x50
c00087b8:	75 e5                	jne    c000879f <VgaText::clearScreen()+0x25>
c00087ba:	46                   	inc    esi
c00087bb:	eb db                	jmp    c0008798 <VgaText::clearScreen()+0x1e>
c00087bd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087c4:	5b                   	pop    ebx
c00087c5:	5e                   	pop    esi
c00087c6:	5f                   	pop    edi
c00087c7:	c3                   	ret    

c00087c8 <VgaText::setCursorX(int)>:
c00087c8:	83 ec 10             	sub    esp,0x10
c00087cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087cf:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087d6:	50                   	push   eax
c00087d7:	e8 3c ff ff ff       	call   c0008718 <VgaText::setCursor(int, int)>
c00087dc:	83 c4 1c             	add    esp,0x1c
c00087df:	c3                   	ret    

c00087e0 <VgaText::setCursorY(int)>:
c00087e0:	83 ec 10             	sub    esp,0x10
c00087e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00087eb:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00087ee:	50                   	push   eax
c00087ef:	e8 24 ff ff ff       	call   c0008718 <VgaText::setCursor(int, int)>
c00087f4:	83 c4 1c             	add    esp,0x1c
c00087f7:	c3                   	ret    

c00087f8 <VgaText::incrementCursor(bool)>:
c00087f8:	56                   	push   esi
c00087f9:	53                   	push   ebx
c00087fa:	51                   	push   ecx
c00087fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008803:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008806:	40                   	inc    eax
c0008807:	83 f8 50             	cmp    eax,0x50
c000880a:	74 05                	je     c0008811 <VgaText::incrementCursor(bool)+0x19>
c000880c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000880f:	eb 24                	jmp    c0008835 <VgaText::incrementCursor(bool)+0x3d>
c0008811:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008814:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000881b:	8d 50 01             	lea    edx,[eax+0x1]
c000881e:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008821:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008824:	75 0f                	jne    c0008835 <VgaText::incrementCursor(bool)+0x3d>
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000882c:	53                   	push   ebx
c000882d:	e8 a4 fd ff ff       	call   c00085d6 <VgaText::scrollScreen()>
c0008832:	83 c4 10             	add    esp,0x10
c0008835:	89 f0                	mov    eax,esi
c0008837:	84 c0                	test   al,al
c0008839:	74 0c                	je     c0008847 <VgaText::incrementCursor(bool)+0x4f>
c000883b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000883f:	5a                   	pop    edx
c0008840:	5b                   	pop    ebx
c0008841:	5e                   	pop    esi
c0008842:	e9 99 fc ff ff       	jmp    c00084e0 <VgaText::updateCursor()>
c0008847:	58                   	pop    eax
c0008848:	5b                   	pop    ebx
c0008849:	5e                   	pop    esi
c000884a:	c3                   	ret    
c000884b:	90                   	nop

c000884c <VgaText::decrementCursor(bool)>:
c000884c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008850:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008854:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008857:	85 c0                	test   eax,eax
c0008859:	74 04                	je     c000885f <VgaText::decrementCursor(bool)+0x13>
c000885b:	48                   	dec    eax
c000885c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000885f:	84 c9                	test   cl,cl
c0008861:	74 09                	je     c000886c <VgaText::decrementCursor(bool)+0x20>
c0008863:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008867:	e9 74 fc ff ff       	jmp    c00084e0 <VgaText::updateCursor()>
c000886c:	c3                   	ret    
c000886d:	90                   	nop

c000886e <VgaText::putchar(char, VgaColour, VgaColour)>:
c000886e:	53                   	push   ebx
c000886f:	83 ec 08             	sub    esp,0x8
c0008872:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0008877:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000887b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000887f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008883:	83 f8 07             	cmp    eax,0x7
c0008886:	75 21                	jne    c00088a9 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0008888:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008890:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008898:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088a0:	83 c4 08             	add    esp,0x8
c00088a3:	5b                   	pop    ebx
c00088a4:	e9 32 2f 00 00       	jmp    c000b7db <Krnl::beep(int, int, bool)>
c00088a9:	83 f8 0d             	cmp    eax,0xd
c00088ac:	75 09                	jne    c00088b7 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088ae:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088b5:	eb 2d                	jmp    c00088e4 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088b7:	83 f8 0a             	cmp    eax,0xa
c00088ba:	75 31                	jne    c00088ed <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088bc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088bf:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088c6:	8d 50 01             	lea    edx,[eax+0x1]
c00088c9:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088cc:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088cf:	75 0f                	jne    c00088e0 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088d1:	83 ec 0c             	sub    esp,0xc
c00088d4:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088d7:	53                   	push   ebx
c00088d8:	e8 f9 fc ff ff       	call   c00085d6 <VgaText::scrollScreen()>
c00088dd:	83 c4 10             	add    esp,0x10
c00088e0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00088e4:	83 c4 08             	add    esp,0x8
c00088e7:	5b                   	pop    ebx
c00088e8:	e9 f3 fb ff ff       	jmp    c00084e0 <VgaText::updateCursor()>
c00088ed:	83 f8 08             	cmp    eax,0x8
c00088f0:	75 25                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c00088f2:	50                   	push   eax
c00088f3:	50                   	push   eax
c00088f4:	6a 01                	push   0x1
c00088f6:	53                   	push   ebx
c00088f7:	e8 50 ff ff ff       	call   c000884c <VgaText::decrementCursor(bool)>
c00088fc:	5a                   	pop    edx
c00088fd:	59                   	pop    ecx
c00088fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008901:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008904:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008907:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000890a:	6a 20                	push   0x20
c000890c:	53                   	push   ebx
c000890d:	e8 66 fd ff ff       	call   c0008678 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008912:	83 c4 28             	add    esp,0x28
c0008915:	5b                   	pop    ebx
c0008916:	c3                   	ret    
c0008917:	83 ec 08             	sub    esp,0x8
c000891a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000891d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008920:	51                   	push   ecx
c0008921:	52                   	push   edx
c0008922:	50                   	push   eax
c0008923:	53                   	push   ebx
c0008924:	e8 4f fd ff ff       	call   c0008678 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008929:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000892d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008935:	83 c4 28             	add    esp,0x28
c0008938:	5b                   	pop    ebx
c0008939:	e9 ba fe ff ff       	jmp    c00087f8 <VgaText::incrementCursor(bool)>

c000893e <VgaText::putchar(char)>:
c000893e:	57                   	push   edi
c000893f:	56                   	push   esi
c0008940:	53                   	push   ebx
c0008941:	83 ec 10             	sub    esp,0x10
c0008944:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008948:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000894c:	89 f8                	mov    eax,edi
c000894e:	0f be c0             	movsx  eax,al
c0008951:	83 f8 5b             	cmp    eax,0x5b
c0008954:	75 18                	jne    c000896e <VgaText::putchar(char)+0x30>
c0008956:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000895a:	74 20                	je     c000897c <VgaText::putchar(char)+0x3e>
c000895c:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008962:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008969:	e9 c1 00 00 00       	jmp    c0008a2f <VgaText::putchar(char)+0xf1>
c000896e:	83 f8 1b             	cmp    eax,0x1b
c0008971:	75 09                	jne    c000897c <VgaText::putchar(char)+0x3e>
c0008973:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008977:	e9 b3 00 00 00       	jmp    c0008a2f <VgaText::putchar(char)+0xf1>
c000897c:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000897f:	84 c9                	test   cl,cl
c0008981:	0f 84 98 00 00 00    	je     c0008a1f <VgaText::putchar(char)+0xe1>
c0008987:	8d 77 c0             	lea    esi,[edi-0x40]
c000898a:	89 f2                	mov    edx,esi
c000898c:	80 fa 3e             	cmp    dl,0x3e
c000898f:	77 78                	ja     c0008a09 <VgaText::putchar(char)+0xcb>
c0008991:	83 f8 6d             	cmp    eax,0x6d
c0008994:	75 47                	jne    c00089dd <VgaText::putchar(char)+0x9f>
c0008996:	31 f6                	xor    esi,esi
c0008998:	31 d2                	xor    edx,edx
c000899a:	31 c0                	xor    eax,eax
c000899c:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000899f:	7e 2d                	jle    c00089ce <VgaText::putchar(char)+0x90>
c00089a1:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089a6:	83 fa 3b             	cmp    edx,0x3b
c00089a9:	75 17                	jne    c00089c2 <VgaText::putchar(char)+0x84>
c00089ab:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089af:	50                   	push   eax
c00089b0:	53                   	push   ebx
c00089b1:	e8 40 fb ff ff       	call   c00084f6 <VgaText::doANSI_SGR(int)>
c00089b6:	59                   	pop    ecx
c00089b7:	31 d2                	xor    edx,edx
c00089b9:	5f                   	pop    edi
c00089ba:	31 c0                	xor    eax,eax
c00089bc:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089c0:	eb 09                	jmp    c00089cb <VgaText::putchar(char)+0x8d>
c00089c2:	6b c0 0a             	imul   eax,eax,0xa
c00089c5:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089c9:	88 ca                	mov    dl,cl
c00089cb:	46                   	inc    esi
c00089cc:	eb ce                	jmp    c000899c <VgaText::putchar(char)+0x5e>
c00089ce:	84 d2                	test   dl,dl
c00089d0:	74 2f                	je     c0008a01 <VgaText::putchar(char)+0xc3>
c00089d2:	50                   	push   eax
c00089d3:	53                   	push   ebx
c00089d4:	e8 1d fb ff ff       	call   c00084f6 <VgaText::doANSI_SGR(int)>
c00089d9:	58                   	pop    eax
c00089da:	5a                   	pop    edx
c00089db:	eb 24                	jmp    c0008a01 <VgaText::putchar(char)+0xc3>
c00089dd:	83 f8 4a             	cmp    eax,0x4a
c00089e0:	75 1f                	jne    c0008a01 <VgaText::putchar(char)+0xc3>
c00089e2:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00089e6:	75 19                	jne    c0008a01 <VgaText::putchar(char)+0xc3>
c00089e8:	83 ec 0c             	sub    esp,0xc
c00089eb:	53                   	push   ebx
c00089ec:	e8 89 fd ff ff       	call   c000877a <VgaText::clearScreen()>
c00089f1:	83 c4 0c             	add    esp,0xc
c00089f4:	6a 00                	push   0x0
c00089f6:	6a 00                	push   0x0
c00089f8:	53                   	push   ebx
c00089f9:	e8 1a fd ff ff       	call   c0008718 <VgaText::setCursor(int, int)>
c00089fe:	83 c4 10             	add    esp,0x10
c0008a01:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a07:	eb 26                	jmp    c0008a2f <VgaText::putchar(char)+0xf1>
c0008a09:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a0c:	83 f8 0e             	cmp    eax,0xe
c0008a0f:	7f 1e                	jg     c0008a2f <VgaText::putchar(char)+0xf1>
c0008a11:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a14:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a17:	89 f9                	mov    ecx,edi
c0008a19:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a1d:	eb 10                	jmp    c0008a2f <VgaText::putchar(char)+0xf1>
c0008a1f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a22:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a25:	50                   	push   eax
c0008a26:	53                   	push   ebx
c0008a27:	e8 42 fe ff ff       	call   c000886e <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a2c:	83 c4 10             	add    esp,0x10
c0008a2f:	83 c4 10             	add    esp,0x10
c0008a32:	5b                   	pop    ebx
c0008a33:	5e                   	pop    esi
c0008a34:	5f                   	pop    edi
c0008a35:	c3                   	ret    

c0008a36 <VgaText::putx(unsigned int)>:
c0008a36:	57                   	push   edi
c0008a37:	b9 11 00 00 00       	mov    ecx,0x11
c0008a3c:	56                   	push   esi
c0008a3d:	be 8a fc 01 c0       	mov    esi,0xc001fc8a
c0008a42:	53                   	push   ebx
c0008a43:	83 ec 20             	sub    esp,0x20
c0008a46:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a4a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a4e:	fc                   	cld    
c0008a4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a51:	be 08 00 00 00       	mov    esi,0x8
c0008a56:	50                   	push   eax
c0008a57:	50                   	push   eax
c0008a58:	89 d8                	mov    eax,ebx
c0008a5a:	c1 e3 04             	shl    ebx,0x4
c0008a5d:	c1 e8 1c             	shr    eax,0x1c
c0008a60:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a65:	50                   	push   eax
c0008a66:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a6a:	e8 cf fe ff ff       	call   c000893e <VgaText::putchar(char)>
c0008a6f:	83 c4 10             	add    esp,0x10
c0008a72:	4e                   	dec    esi
c0008a73:	75 e1                	jne    c0008a56 <VgaText::putx(unsigned int)+0x20>
c0008a75:	83 c4 20             	add    esp,0x20
c0008a78:	5b                   	pop    ebx
c0008a79:	5e                   	pop    esi
c0008a7a:	5f                   	pop    edi
c0008a7b:	c3                   	ret    

c0008a7c <VgaText::puts(char const*)>:
c0008a7c:	53                   	push   ebx
c0008a7d:	83 ec 08             	sub    esp,0x8
c0008a80:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008a84:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008a87:	85 c0                	test   eax,eax
c0008a89:	74 12                	je     c0008a9d <VgaText::puts(char const*)+0x21>
c0008a8b:	43                   	inc    ebx
c0008a8c:	51                   	push   ecx
c0008a8d:	51                   	push   ecx
c0008a8e:	50                   	push   eax
c0008a8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a93:	e8 a6 fe ff ff       	call   c000893e <VgaText::putchar(char)>
c0008a98:	83 c4 10             	add    esp,0x10
c0008a9b:	eb e7                	jmp    c0008a84 <VgaText::puts(char const*)+0x8>
c0008a9d:	83 c4 08             	add    esp,0x8
c0008aa0:	5b                   	pop    ebx
c0008aa1:	c3                   	ret    

c0008aa2 <VgaText::write(unsigned long long, void*, int*)>:
c0008aa2:	55                   	push   ebp
c0008aa3:	57                   	push   edi
c0008aa4:	56                   	push   esi
c0008aa5:	53                   	push   ebx
c0008aa6:	83 ec 0c             	sub    esp,0xc
c0008aa9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008aad:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ab1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008ab5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008abc:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008abf:	39 eb                	cmp    ebx,ebp
c0008ac1:	74 13                	je     c0008ad6 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008ac3:	43                   	inc    ebx
c0008ac4:	50                   	push   eax
c0008ac5:	50                   	push   eax
c0008ac6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008aca:	50                   	push   eax
c0008acb:	56                   	push   esi
c0008acc:	e8 6d fe ff ff       	call   c000893e <VgaText::putchar(char)>
c0008ad1:	83 c4 10             	add    esp,0x10
c0008ad4:	eb e9                	jmp    c0008abf <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008ad6:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008add:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008ae1:	89 38                	mov    DWORD PTR [eax],edi
c0008ae3:	83 c4 0c             	add    esp,0xc
c0008ae6:	31 c0                	xor    eax,eax
c0008ae8:	5b                   	pop    ebx
c0008ae9:	5e                   	pop    esi
c0008aea:	5f                   	pop    edi
c0008aeb:	5d                   	pop    ebp
c0008aec:	c3                   	ret    
c0008aed:	90                   	nop

c0008aee <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008aee:	55                   	push   ebp
c0008aef:	57                   	push   edi
c0008af0:	56                   	push   esi
c0008af1:	53                   	push   ebx
c0008af2:	83 ec 0c             	sub    esp,0xc
c0008af5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008af9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008afe:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b05:	50                   	push   eax
c0008b06:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b0b:	50                   	push   eax
c0008b0c:	e8 b3 fa ff ff       	call   c00085c4 <VgaText::combineColours(unsigned char, unsigned char)>
c0008b11:	5a                   	pop    edx
c0008b12:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b16:	59                   	pop    ecx
c0008b17:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b1a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b1e:	0f b7 f6             	movzx  esi,si
c0008b21:	0f b6 e8             	movzx  ebp,al
c0008b24:	01 f6                	add    esi,esi
c0008b26:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b29:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b2c:	85 c0                	test   eax,eax
c0008b2e:	0f 84 ef 00 00 00    	je     c0008c23 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b34:	83 f8 0d             	cmp    eax,0xd
c0008b37:	75 0c                	jne    c0008b45 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b39:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b40:	e9 d8 00 00 00       	jmp    c0008c1d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b45:	83 f8 0a             	cmp    eax,0xa
c0008b48:	75 44                	jne    c0008b8e <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b4d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b54:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b57:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b5a:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b5d:	75 0f                	jne    c0008b6e <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b5f:	83 ec 0c             	sub    esp,0xc
c0008b62:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b65:	53                   	push   ebx
c0008b66:	e8 6b fa ff ff       	call   c00085d6 <VgaText::scrollScreen()>
c0008b6b:	83 c4 10             	add    esp,0x10
c0008b6e:	83 ec 0c             	sub    esp,0xc
c0008b71:	53                   	push   ebx
c0008b72:	e8 69 f9 ff ff       	call   c00084e0 <VgaText::updateCursor()>
c0008b77:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b7b:	83 c4 10             	add    esp,0x10
c0008b7e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b81:	0f b7 f6             	movzx  esi,si
c0008b84:	01 f6                	add    esi,esi
c0008b86:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b89:	e9 8f 00 00 00       	jmp    c0008c1d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b8e:	83 f8 08             	cmp    eax,0x8
c0008b91:	75 34                	jne    c0008bc7 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008b93:	51                   	push   ecx
c0008b94:	51                   	push   ecx
c0008b95:	6a 01                	push   0x1
c0008b97:	53                   	push   ebx
c0008b98:	e8 af fc ff ff       	call   c000884c <VgaText::decrementCursor(bool)>
c0008b9d:	5e                   	pop    esi
c0008b9e:	58                   	pop    eax
c0008b9f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008ba2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008ba5:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ba8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bab:	6a 20                	push   0x20
c0008bad:	53                   	push   ebx
c0008bae:	e8 c5 fa ff ff       	call   c0008678 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bb3:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008bb7:	83 c4 20             	add    esp,0x20
c0008bba:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bbd:	0f b7 f6             	movzx  esi,si
c0008bc0:	01 f6                	add    esi,esi
c0008bc2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bc5:	eb 56                	jmp    c0008c1d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bc7:	52                   	push   edx
c0008bc8:	52                   	push   edx
c0008bc9:	55                   	push   ebp
c0008bca:	50                   	push   eax
c0008bcb:	e8 98 fa ff ff       	call   c0008668 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bd0:	83 c4 10             	add    esp,0x10
c0008bd3:	66 89 06             	mov    WORD PTR [esi],ax
c0008bd6:	39 1d 04 4f 02 c0    	cmp    DWORD PTR ds:0xc0024f04,ebx
c0008bdc:	75 1d                	jne    c0008bfb <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008bde:	83 ec 0c             	sub    esp,0xc
c0008be1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008be4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008be7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008beb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008bef:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008bf2:	50                   	push   eax
c0008bf3:	e8 ec f0 00 00       	call   c0017ce4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008bf8:	83 c4 20             	add    esp,0x20
c0008bfb:	83 c6 02             	add    esi,0x2
c0008bfe:	50                   	push   eax
c0008bff:	50                   	push   eax
c0008c00:	6a 00                	push   0x0
c0008c02:	53                   	push   ebx
c0008c03:	e8 f0 fb ff ff       	call   c00087f8 <VgaText::incrementCursor(bool)>
c0008c08:	83 c4 10             	add    esp,0x10
c0008c0b:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c0f:	75 0c                	jne    c0008c1d <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c11:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c15:	0f b7 f6             	movzx  esi,si
c0008c18:	01 f6                	add    esi,esi
c0008c1a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c1d:	47                   	inc    edi
c0008c1e:	e9 06 ff ff ff       	jmp    c0008b29 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c23:	83 ec 0c             	sub    esp,0xc
c0008c26:	53                   	push   ebx
c0008c27:	e8 b4 f8 ff ff       	call   c00084e0 <VgaText::updateCursor()>
c0008c2c:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c33:	83 c4 1c             	add    esp,0x1c
c0008c36:	5b                   	pop    ebx
c0008c37:	5e                   	pop    esi
c0008c38:	5f                   	pop    edi
c0008c39:	5d                   	pop    ebp
c0008c3a:	c3                   	ret    
c0008c3b:	90                   	nop

c0008c3c <VgaText::VgaText(char const*)>:
c0008c3c:	56                   	push   esi
c0008c3d:	53                   	push   ebx
c0008c3e:	83 ec 04             	sub    esp,0x4
c0008c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c45:	83 ec 08             	sub    esp,0x8
c0008c48:	6a 00                	push   0x0
c0008c4a:	50                   	push   eax
c0008c4b:	e8 6a 05 00 00       	call   c00091ba <UnixFile::UnixFile(int)>
c0008c50:	83 c4 10             	add    esp,0x10
c0008c53:	ba b0 fc 01 c0       	mov    edx,0xc001fcb0
c0008c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c5c:	89 10                	mov    DWORD PTR [eax],edx
c0008c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c62:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c78:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c80:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c88:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c93:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb4:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008cbb:	83 ec 0c             	sub    esp,0xc
c0008cbe:	6a 01                	push   0x1
c0008cc0:	e8 44 09 00 00       	call   c0009609 <Virt::allocateKernelVirtualPages(int)>
c0008cc5:	83 c4 10             	add    esp,0x10
c0008cc8:	89 c2                	mov    edx,eax
c0008cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cce:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cd1:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c0008cd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cdb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cde:	89 c6                	mov    esi,eax
c0008ce0:	e8 ba f0 ff ff       	call   c0007d9f <Phys::allocatePage()>
c0008ce5:	68 05 0c 00 00       	push   0xc05
c0008cea:	56                   	push   esi
c0008ceb:	50                   	push   eax
c0008cec:	53                   	push   ebx
c0008ced:	e8 fe 0f 00 00       	call   c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008cf2:	83 c4 10             	add    esp,0x10
c0008cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008cfc:	83 ec 04             	sub    esp,0x4
c0008cff:	68 a0 0f 00 00       	push   0xfa0
c0008d04:	6a 00                	push   0x0
c0008d06:	50                   	push   eax
c0008d07:	e8 e4 77 ff ff       	call   c00004f0 <memset>
c0008d0c:	83 c4 10             	add    esp,0x10
c0008d0f:	83 ec 04             	sub    esp,0x4
c0008d12:	6a 00                	push   0x0
c0008d14:	6a 07                	push   0x7
c0008d16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d1a:	e8 6b f8 ff ff       	call   c000858a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d1f:	83 c4 10             	add    esp,0x10
c0008d22:	83 ec 04             	sub    esp,0x4
c0008d25:	6a 00                	push   0x0
c0008d27:	6a 00                	push   0x0
c0008d29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d2d:	e8 e6 f9 ff ff       	call   c0008718 <VgaText::setCursor(int, int)>
c0008d32:	83 c4 10             	add    esp,0x10
c0008d35:	83 ec 0c             	sub    esp,0xc
c0008d38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d3c:	e8 39 fa ff ff       	call   c000877a <VgaText::clearScreen()>
c0008d41:	83 c4 10             	add    esp,0x10
c0008d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d48:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d50:	05 82 00 00 00       	add    eax,0x82
c0008d55:	83 ec 04             	sub    esp,0x4
c0008d58:	68 80 00 00 00       	push   0x80
c0008d5d:	6a 00                	push   0x0
c0008d5f:	50                   	push   eax
c0008d60:	e8 8b 77 ff ff       	call   c00004f0 <memset>
c0008d65:	83 c4 10             	add    esp,0x10
c0008d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d6c:	05 02 01 00 00       	add    eax,0x102
c0008d71:	83 ec 04             	sub    esp,0x4
c0008d74:	68 80 00 00 00       	push   0x80
c0008d79:	6a 00                	push   0x0
c0008d7b:	50                   	push   eax
c0008d7c:	e8 6f 77 ff ff       	call   c00004f0 <memset>
c0008d81:	83 c4 10             	add    esp,0x10
c0008d84:	90                   	nop
c0008d85:	83 c4 04             	add    esp,0x4
c0008d88:	5b                   	pop    ebx
c0008d89:	5e                   	pop    esi
c0008d8a:	c3                   	ret    
c0008d8b:	90                   	nop

c0008d8c <VgaText::receiveKey(unsigned char)>:
c0008d8c:	55                   	push   ebp
c0008d8d:	57                   	push   edi
c0008d8e:	56                   	push   esi
c0008d8f:	53                   	push   ebx
c0008d90:	83 ec 2c             	sub    esp,0x2c
c0008d93:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008d97:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008d9b:	89 ef                	mov    edi,ebp
c0008d9d:	81 e7 ff 00 00 00    	and    edi,0xff
c0008da3:	0f 84 66 01 00 00    	je     c0008f0f <VgaText::receiveKey(unsigned char)+0x183>
c0008da9:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008daf:	83 ff 08             	cmp    edi,0x8
c0008db2:	75 73                	jne    c0008e27 <VgaText::receiveKey(unsigned char)+0x9b>
c0008db4:	83 ec 0c             	sub    esp,0xc
c0008db7:	56                   	push   esi
c0008db8:	e8 b3 77 ff ff       	call   c0000570 <strlen>
c0008dbd:	83 c4 10             	add    esp,0x10
c0008dc0:	85 c0                	test   eax,eax
c0008dc2:	0f 84 02 01 00 00    	je     c0008eca <VgaText::receiveKey(unsigned char)+0x13e>
c0008dc8:	50                   	push   eax
c0008dc9:	50                   	push   eax
c0008dca:	6a 08                	push   0x8
c0008dcc:	53                   	push   ebx
c0008dcd:	e8 6c fb ff ff       	call   c000893e <VgaText::putchar(char)>
c0008dd2:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dd5:	e8 96 77 ff ff       	call   c0000570 <strlen>
c0008dda:	83 c4 10             	add    esp,0x10
c0008ddd:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008de5:	83 fa 0d             	cmp    edx,0xd
c0008de8:	89 d0                	mov    eax,edx
c0008dea:	0f 95 c1             	setne  cl
c0008ded:	83 fa 1f             	cmp    edx,0x1f
c0008df0:	0f 9e c2             	setle  dl
c0008df3:	0f b6 d2             	movzx  edx,dl
c0008df6:	85 ca                	test   edx,ecx
c0008df8:	74 17                	je     c0008e11 <VgaText::receiveKey(unsigned char)+0x85>
c0008dfa:	83 e8 08             	sub    eax,0x8
c0008dfd:	3c 02                	cmp    al,0x2
c0008dff:	76 10                	jbe    c0008e11 <VgaText::receiveKey(unsigned char)+0x85>
c0008e01:	55                   	push   ebp
c0008e02:	55                   	push   ebp
c0008e03:	68 9b fc 01 c0       	push   0xc001fc9b
c0008e08:	53                   	push   ebx
c0008e09:	e8 6e fc ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0008e0e:	83 c4 10             	add    esp,0x10
c0008e11:	83 ec 0c             	sub    esp,0xc
c0008e14:	56                   	push   esi
c0008e15:	e8 56 77 ff ff       	call   c0000570 <strlen>
c0008e1a:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e22:	e9 a0 00 00 00       	jmp    c0008ec7 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e27:	83 ec 0c             	sub    esp,0xc
c0008e2a:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e30:	50                   	push   eax
c0008e31:	e8 3a 77 ff ff       	call   c0000570 <strlen>
c0008e36:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e39:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e3d:	e8 2e 77 ff ff       	call   c0000570 <strlen>
c0008e42:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e46:	83 c4 10             	add    esp,0x10
c0008e49:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e4d:	3d 80 00 00 00       	cmp    eax,0x80
c0008e52:	0f 87 b7 00 00 00    	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x183>
c0008e58:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e5b:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e5e:	3c 1e                	cmp    al,0x1e
c0008e60:	0f 96 c0             	setbe  al
c0008e63:	80 fa 01             	cmp    dl,0x1
c0008e66:	0f 97 c2             	seta   dl
c0008e69:	0f b6 d2             	movzx  edx,dl
c0008e6c:	85 c2                	test   edx,eax
c0008e6e:	74 2e                	je     c0008e9e <VgaText::receiveKey(unsigned char)+0x112>
c0008e70:	83 ff 0d             	cmp    edi,0xd
c0008e73:	74 29                	je     c0008e9e <VgaText::receiveKey(unsigned char)+0x112>
c0008e75:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e78:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e7b:	68 a1 fc 01 c0       	push   0xc001fca1
c0008e80:	53                   	push   ebx
c0008e81:	e8 68 fc ff ff       	call   c0008aee <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008e86:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008e89:	8d 45 40             	lea    eax,[ebp+0x40]
c0008e8c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008e8f:	0f b6 c0             	movzx  eax,al
c0008e92:	50                   	push   eax
c0008e93:	53                   	push   ebx
c0008e94:	e8 d5 f9 ff ff       	call   c000886e <VgaText::putchar(char, VgaColour, VgaColour)>
c0008e99:	83 c4 20             	add    esp,0x20
c0008e9c:	eb 11                	jmp    c0008eaf <VgaText::receiveKey(unsigned char)+0x123>
c0008e9e:	89 e8                	mov    eax,ebp
c0008ea0:	51                   	push   ecx
c0008ea1:	0f be c0             	movsx  eax,al
c0008ea4:	51                   	push   ecx
c0008ea5:	50                   	push   eax
c0008ea6:	53                   	push   ebx
c0008ea7:	e8 92 fa ff ff       	call   c000893e <VgaText::putchar(char)>
c0008eac:	83 c4 10             	add    esp,0x10
c0008eaf:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008eb4:	89 e8                	mov    eax,ebp
c0008eb6:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008eba:	52                   	push   edx
c0008ebb:	52                   	push   edx
c0008ebc:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008ec0:	50                   	push   eax
c0008ec1:	56                   	push   esi
c0008ec2:	e8 79 79 ff ff       	call   c0000840 <strcat>
c0008ec7:	83 c4 10             	add    esp,0x10
c0008eca:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008ed0:	b0 01                	mov    al,0x1
c0008ed2:	83 ff 1c             	cmp    edi,0x1c
c0008ed5:	77 0e                	ja     c0008ee5 <VgaText::receiveKey(unsigned char)+0x159>
c0008ed7:	b8 08 04 00 10       	mov    eax,0x10000408
c0008edc:	89 f9                	mov    ecx,edi
c0008ede:	d3 e8                	shr    eax,cl
c0008ee0:	f7 d0                	not    eax
c0008ee2:	83 e0 01             	and    eax,0x1
c0008ee5:	84 c0                	test   al,al
c0008ee7:	74 04                	je     c0008eed <VgaText::receiveKey(unsigned char)+0x161>
c0008ee9:	84 d2                	test   dl,dl
c0008eeb:	74 22                	je     c0008f0f <VgaText::receiveKey(unsigned char)+0x183>
c0008eed:	81 c3 02 01 00 00    	add    ebx,0x102
c0008ef3:	50                   	push   eax
c0008ef4:	50                   	push   eax
c0008ef5:	56                   	push   esi
c0008ef6:	53                   	push   ebx
c0008ef7:	e8 44 79 ff ff       	call   c0000840 <strcat>
c0008efc:	83 c4 0c             	add    esp,0xc
c0008eff:	68 80 00 00 00       	push   0x80
c0008f04:	6a 00                	push   0x0
c0008f06:	56                   	push   esi
c0008f07:	e8 e4 75 ff ff       	call   c00004f0 <memset>
c0008f0c:	83 c4 10             	add    esp,0x10
c0008f0f:	83 c4 2c             	add    esp,0x2c
c0008f12:	5b                   	pop    ebx
c0008f13:	5e                   	pop    esi
c0008f14:	5f                   	pop    edi
c0008f15:	5d                   	pop    ebp
c0008f16:	c3                   	ret    
c0008f17:	90                   	nop

c0008f18 <VgaText::doUpdate()>:
c0008f18:	c3                   	ret    

c0008f19 <newTerminal(char*)>:
c0008f19:	83 ec 28             	sub    esp,0x28
c0008f1c:	68 84 01 00 00       	push   0x184
c0008f21:	e8 74 eb ff ff       	call   c0007a9a <malloc>
c0008f26:	5a                   	pop    edx
c0008f27:	59                   	pop    ecx
c0008f28:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008f2c:	50                   	push   eax
c0008f2d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008f31:	e8 06 fd ff ff       	call   c0008c3c <VgaText::VgaText(char const*)>
c0008f36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f3a:	83 c4 2c             	add    esp,0x2c
c0008f3d:	c3                   	ret    
c0008f3e:	66 90                	xchg   ax,ax

c0008f40 <TSS::TSS()>:
c0008f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f44:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4b:	90                   	nop
c0008f4c:	c3                   	ret    
c0008f4d:	90                   	nop
c0008f4e:	66 90                	xchg   ax,ax

c0008f50 <TSS::setESP(unsigned long)>:
c0008f50:	55                   	push   ebp
c0008f51:	89 e5                	mov    ebp,esp
c0008f53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f59:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f5c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f5f:	90                   	nop
c0008f60:	5d                   	pop    ebp
c0008f61:	c3                   	ret    
c0008f62:	66 90                	xchg   ax,ax

c0008f64 <TSS::flush()>:
c0008f64:	55                   	push   ebp
c0008f65:	89 e5                	mov    ebp,esp
c0008f67:	83 ec 10             	sub    esp,0x10
c0008f6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f6f:	83 c8 03             	or     eax,0x3
c0008f72:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f76:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7a:	66 89 d0             	mov    ax,dx
c0008f7d:	0f 00 d8             	ltr    ax
c0008f80:	90                   	nop
c0008f81:	c9                   	leave  
c0008f82:	c3                   	ret    
c0008f83:	90                   	nop

c0008f84 <TSS::setup(unsigned long, unsigned long)>:
c0008f84:	55                   	push   ebp
c0008f85:	89 e5                	mov    ebp,esp
c0008f87:	83 ec 18             	sub    esp,0x18
c0008f8a:	83 ec 0c             	sub    esp,0xc
c0008f8d:	6a 68                	push   0x68
c0008f8f:	e8 06 eb ff ff       	call   c0007a9a <malloc>
c0008f94:	83 c4 10             	add    esp,0x10
c0008f97:	89 c2                	mov    edx,eax
c0008f99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f9c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa5:	83 ec 04             	sub    esp,0x4
c0008fa8:	6a 68                	push   0x68
c0008faa:	6a 00                	push   0x0
c0008fac:	50                   	push   eax
c0008fad:	e8 3e 75 ff ff       	call   c00004f0 <memset>
c0008fb2:	83 c4 10             	add    esp,0x10
c0008fb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbb:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fc7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fd6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fdc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fdf:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008feb:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ff7:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009000:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009003:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0009009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000900c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000900f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009018:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009024:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009027:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000902d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009030:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009033:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0009036:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0009039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000903c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000903f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0009046:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009049:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000904c:	0f 20 da             	mov    edx,cr3
c000904f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009052:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009055:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0009058:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000905e:	83 ec 08             	sub    esp,0x8
c0009061:	50                   	push   eax
c0009062:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009065:	50                   	push   eax
c0009066:	e8 9d e2 ff ff       	call   c0007308 <GDTEntry::setBase(unsigned int)>
c000906b:	83 c4 10             	add    esp,0x10
c000906e:	83 ec 08             	sub    esp,0x8
c0009071:	6a 68                	push   0x68
c0009073:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009076:	50                   	push   eax
c0009077:	e8 a8 e2 ff ff       	call   c0007324 <GDTEntry::setLimit(unsigned int)>
c000907c:	83 c4 10             	add    esp,0x10
c000907f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009083:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009086:	83 e0 0f             	and    eax,0xf
c0009089:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000908c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908f:	83 c8 40             	or     eax,0x40
c0009092:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009095:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000909a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a0:	05 78 01 00 00       	add    eax,0x178
c00090a5:	83 ec 04             	sub    esp,0x4
c00090a8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090ab:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090ae:	50                   	push   eax
c00090af:	e8 a4 e2 ff ff       	call   c0007358 <GDT::addEntry(GDTEntry)>
c00090b4:	83 c4 10             	add    esp,0x10
c00090b7:	89 c2                	mov    edx,eax
c00090b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090bc:	89 10                	mov    DWORD PTR [eax],edx
c00090be:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00090c3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090c9:	05 78 01 00 00       	add    eax,0x178
c00090ce:	83 ec 0c             	sub    esp,0xc
c00090d1:	50                   	push   eax
c00090d2:	e8 ab e2 ff ff       	call   c0007382 <GDT::flush()>
c00090d7:	83 c4 10             	add    esp,0x10
c00090da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00090df:	c9                   	leave  
c00090e0:	c3                   	ret    
c00090e1:	90                   	nop

c00090e2 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090ed:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f2:	75 08                	jne    c00090fc <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fa:	eb 38                	jmp    c0009134 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00090fc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009101:	75 17                	jne    c000911a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009103:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009108:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009111:	8b 10                	mov    edx,DWORD PTR [eax]
c0009113:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009117:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911a:	89 c1                	mov    ecx,eax
c000911c:	83 e1 fd             	and    ecx,0xfffffffd
c000911f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009125:	74 cd                	je     c00090f4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009127:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000912c:	83 e0 ef             	and    eax,0xffffffef
c000912f:	83 f8 08             	cmp    eax,0x8
c0009132:	76 c0                	jbe    c00090f4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009134:	31 c0                	xor    eax,eax
c0009136:	c3                   	ret    
c0009137:	90                   	nop

c0009138 <ReservedFilename::isAtty()>:
c0009138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000913c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000913f:	31 c0                	xor    eax,eax
c0009141:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0009147:	74 09                	je     c0009152 <ReservedFilename::isAtty()+0x1a>
c0009149:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000914f:	0f 94 c0             	sete   al
c0009152:	c3                   	ret    
c0009153:	90                   	nop

c0009154 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009154:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009158:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000915c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000915f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009163:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009168:	75 08                	jne    c0009172 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009170:	eb 3d                	jmp    c00091af <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009172:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009177:	75 17                	jne    c0009190 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009179:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000917e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009181:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009187:	8b 10                	mov    edx,DWORD PTR [eax]
c0009189:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000918d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009190:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009195:	75 04                	jne    c000919b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0009197:	89 0a                	mov    DWORD PTR [edx],ecx
c0009199:	eb 14                	jmp    c00091af <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a0:	74 c8                	je     c000916a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091a7:	83 e0 ef             	and    eax,0xffffffef
c00091aa:	83 f8 08             	cmp    eax,0x8
c00091ad:	76 bb                	jbe    c000916a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091af:	31 c0                	xor    eax,eax
c00091b1:	c3                   	ret    

c00091b2 <UnixFile::getFileDescriptor()>:
c00091b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091b9:	c3                   	ret    

c00091ba <UnixFile::UnixFile(int)>:
c00091ba:	53                   	push   ebx
c00091bb:	83 ec 28             	sub    esp,0x28
c00091be:	ba 78 fd 01 c0       	mov    edx,0xc001fd78
c00091c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091c7:	89 10                	mov    DWORD PTR [eax],edx
c00091c9:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d1:	0f 8f 90 01 00 00    	jg     c0009367 <UnixFile::UnixFile(int)+0x1ad>
c00091d7:	a1 40 1e 02 c0       	mov    eax,ds:0xc0021e40
c00091dc:	8d 50 01             	lea    edx,[eax+0x1]
c00091df:	89 15 40 1e 02 c0    	mov    DWORD PTR ds:0xc0021e40,edx
c00091e5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091e9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091ec:	83 ec 08             	sub    esp,0x8
c00091ef:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f3:	68 98 4f 02 c0       	push   0xc0024f98
c00091f8:	e8 7b 56 01 00       	call   c001e878 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00091fd:	83 c4 10             	add    esp,0x10
c0009200:	a0 94 4f 02 c0       	mov    al,ds:0xc0024f94
c0009205:	83 f0 01             	xor    eax,0x1
c0009208:	0f b6 c0             	movzx  eax,al
c000920b:	85 c0                	test   eax,eax
c000920d:	0f 84 55 01 00 00    	je     c0009368 <UnixFile::UnixFile(int)+0x1ae>
c0009213:	c6 05 94 4f 02 c0 01 	mov    BYTE PTR ds:0xc0024f94,0x1
c000921a:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009222:	83 ec 0c             	sub    esp,0xc
c0009225:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009229:	e8 6c e8 ff ff       	call   c0007a9a <malloc>
c000922e:	83 c4 10             	add    esp,0x10
c0009231:	89 c3                	mov    ebx,eax
c0009233:	83 ec 08             	sub    esp,0x8
c0009236:	68 03 ff ff 0f       	push   0xfffff03
c000923b:	53                   	push   ebx
c000923c:	e8 2d 01 00 00       	call   c000936e <ReservedFilename::ReservedFilename(int)>
c0009241:	83 c4 10             	add    esp,0x10
c0009244:	89 1d 8c 4f 02 c0    	mov    DWORD PTR ds:0xc0024f8c,ebx
c000924a:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009252:	83 ec 0c             	sub    esp,0xc
c0009255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009259:	e8 3c e8 ff ff       	call   c0007a9a <malloc>
c000925e:	83 c4 10             	add    esp,0x10
c0009261:	89 c3                	mov    ebx,eax
c0009263:	83 ec 08             	sub    esp,0x8
c0009266:	68 01 ff ff 0f       	push   0xfffff01
c000926b:	53                   	push   ebx
c000926c:	e8 fd 00 00 00       	call   c000936e <ReservedFilename::ReservedFilename(int)>
c0009271:	83 c4 10             	add    esp,0x10
c0009274:	89 1d 90 4f 02 c0    	mov    DWORD PTR ds:0xc0024f90,ebx
c000927a:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009282:	83 ec 0c             	sub    esp,0xc
c0009285:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009289:	e8 0c e8 ff ff       	call   c0007a9a <malloc>
c000928e:	83 c4 10             	add    esp,0x10
c0009291:	89 c3                	mov    ebx,eax
c0009293:	83 ec 08             	sub    esp,0x8
c0009296:	68 00 ff ff 0f       	push   0xfffff00
c000929b:	53                   	push   ebx
c000929c:	e8 cd 00 00 00       	call   c000936e <ReservedFilename::ReservedFilename(int)>
c00092a1:	83 c4 10             	add    esp,0x10
c00092a4:	89 1d 84 4f 02 c0    	mov    DWORD PTR ds:0xc0024f84,ebx
c00092aa:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b2:	83 ec 0c             	sub    esp,0xc
c00092b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092b9:	e8 dc e7 ff ff       	call   c0007a9a <malloc>
c00092be:	83 c4 10             	add    esp,0x10
c00092c1:	89 c3                	mov    ebx,eax
c00092c3:	83 ec 08             	sub    esp,0x8
c00092c6:	68 02 ff ff 0f       	push   0xfffff02
c00092cb:	53                   	push   ebx
c00092cc:	e8 9d 00 00 00       	call   c000936e <ReservedFilename::ReservedFilename(int)>
c00092d1:	83 c4 10             	add    esp,0x10
c00092d4:	89 1d 88 4f 02 c0    	mov    DWORD PTR ds:0xc0024f88,ebx
c00092da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e2:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092e7:	7f 7f                	jg     c0009368 <UnixFile::UnixFile(int)+0x1ae>
c00092e9:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f1:	83 ec 0c             	sub    esp,0xc
c00092f4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092f8:	e8 9d e7 ff ff       	call   c0007a9a <malloc>
c00092fd:	83 c4 10             	add    esp,0x10
c0009300:	89 c3                	mov    ebx,eax
c0009302:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009306:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930b:	83 ec 08             	sub    esp,0x8
c000930e:	50                   	push   eax
c000930f:	53                   	push   ebx
c0009310:	e8 59 00 00 00       	call   c000936e <ReservedFilename::ReservedFilename(int)>
c0009315:	83 c4 10             	add    esp,0x10
c0009318:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000931c:	89 1c 85 60 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0a0],ebx
c0009323:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932b:	83 ec 0c             	sub    esp,0xc
c000932e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009332:	e8 63 e7 ff ff       	call   c0007a9a <malloc>
c0009337:	83 c4 10             	add    esp,0x10
c000933a:	89 c3                	mov    ebx,eax
c000933c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009340:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009345:	83 ec 08             	sub    esp,0x8
c0009348:	50                   	push   eax
c0009349:	53                   	push   ebx
c000934a:	e8 1f 00 00 00       	call   c000936e <ReservedFilename::ReservedFilename(int)>
c000934f:	83 c4 10             	add    esp,0x10
c0009352:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009356:	89 1c 85 20 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb0e0],ebx
c000935d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009362:	e9 7b ff ff ff       	jmp    c00092e2 <UnixFile::UnixFile(int)+0x128>
c0009367:	90                   	nop
c0009368:	83 c4 28             	add    esp,0x28
c000936b:	5b                   	pop    ebx
c000936c:	c3                   	ret    
c000936d:	90                   	nop

c000936e <ReservedFilename::ReservedFilename(int)>:
c000936e:	83 ec 0c             	sub    esp,0xc
c0009371:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009375:	83 ec 08             	sub    esp,0x8
c0009378:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000937c:	50                   	push   eax
c000937d:	e8 38 fe ff ff       	call   c00091ba <UnixFile::UnixFile(int)>
c0009382:	83 c4 10             	add    esp,0x10
c0009385:	ba 94 fd 01 c0       	mov    edx,0xc001fd94
c000938a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000938e:	89 10                	mov    DWORD PTR [eax],edx
c0009390:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009394:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009398:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939b:	90                   	nop
c000939c:	83 c4 0c             	add    esp,0xc
c000939f:	c3                   	ret    

c00093a0 <UnixFile::~UnixFile()>:
c00093a0:	83 ec 1c             	sub    esp,0x1c
c00093a3:	ba 78 fd 01 c0       	mov    edx,0xc001fd78
c00093a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093ac:	89 10                	mov    DWORD PTR [eax],edx
c00093ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b5:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093ba:	7f 76                	jg     c0009432 <UnixFile::~UnixFile()+0x92>
c00093bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c4:	83 ec 0c             	sub    esp,0xc
c00093c7:	68 98 4f 02 c0       	push   0xc0024f98
c00093cc:	e8 7b 55 01 00       	call   c001e94c <LinkedList<UnixFile>::getFirstElement()>
c00093d1:	83 c4 10             	add    esp,0x10
c00093d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093d8:	83 ec 0c             	sub    esp,0xc
c00093db:	68 98 4f 02 c0       	push   0xc0024f98
c00093e0:	e8 6f 55 01 00       	call   c001e954 <LinkedList<UnixFile>::removeFirst()>
c00093e5:	83 c4 10             	add    esp,0x10
c00093e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093ec:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f0:	74 43                	je     c0009435 <UnixFile::~UnixFile()+0x95>
c00093f2:	83 ec 08             	sub    esp,0x8
c00093f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093f9:	68 98 4f 02 c0       	push   0xc0024f98
c00093fe:	e8 75 54 01 00       	call   c001e878 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009403:	83 c4 10             	add    esp,0x10
c0009406:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940a:	8d 50 01             	lea    edx,[eax+0x1]
c000940d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009411:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009416:	0f 94 c0             	sete   al
c0009419:	0f b6 c0             	movzx  eax,al
c000941c:	85 c0                	test   eax,eax
c000941e:	74 a4                	je     c00093c4 <UnixFile::~UnixFile()+0x24>
c0009420:	83 ec 0c             	sub    esp,0xc
c0009423:	68 50 fd 01 c0       	push   0xc001fd50
c0009428:	e8 32 74 00 00       	call   c001085f <KePanic(char const*)>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	eb 92                	jmp    c00093c4 <UnixFile::~UnixFile()+0x24>
c0009432:	90                   	nop
c0009433:	eb 01                	jmp    c0009436 <UnixFile::~UnixFile()+0x96>
c0009435:	90                   	nop
c0009436:	90                   	nop
c0009437:	83 c4 1c             	add    esp,0x1c
c000943a:	c3                   	ret    
c000943b:	90                   	nop

c000943c <UnixFile::~UnixFile()>:
c000943c:	83 ec 0c             	sub    esp,0xc
c000943f:	83 ec 0c             	sub    esp,0xc
c0009442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009446:	e8 55 ff ff ff       	call   c00093a0 <UnixFile::~UnixFile()>
c000944b:	83 c4 10             	add    esp,0x10
c000944e:	83 ec 08             	sub    esp,0x8
c0009451:	6a 0c                	push   0xc
c0009453:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009457:	e8 f9 13 00 00       	call   c000a855 <operator delete(void*, unsigned long)>
c000945c:	83 c4 10             	add    esp,0x10
c000945f:	83 c4 0c             	add    esp,0xc
c0009462:	c3                   	ret    
c0009463:	90                   	nop

c0009464 <ReservedFilename::~ReservedFilename()>:
c0009464:	83 ec 0c             	sub    esp,0xc
c0009467:	ba 94 fd 01 c0       	mov    edx,0xc001fd94
c000946c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009470:	89 10                	mov    DWORD PTR [eax],edx
c0009472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009476:	83 ec 0c             	sub    esp,0xc
c0009479:	50                   	push   eax
c000947a:	e8 21 ff ff ff       	call   c00093a0 <UnixFile::~UnixFile()>
c000947f:	83 c4 10             	add    esp,0x10
c0009482:	90                   	nop
c0009483:	83 c4 0c             	add    esp,0xc
c0009486:	c3                   	ret    
c0009487:	90                   	nop

c0009488 <ReservedFilename::~ReservedFilename()>:
c0009488:	83 ec 0c             	sub    esp,0xc
c000948b:	83 ec 0c             	sub    esp,0xc
c000948e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009492:	e8 cd ff ff ff       	call   c0009464 <ReservedFilename::~ReservedFilename()>
c0009497:	83 c4 10             	add    esp,0x10
c000949a:	83 ec 08             	sub    esp,0x8
c000949d:	6a 0c                	push   0xc
c000949f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a3:	e8 ad 13 00 00       	call   c000a855 <operator delete(void*, unsigned long)>
c00094a8:	83 c4 10             	add    esp,0x10
c00094ab:	83 c4 0c             	add    esp,0xc
c00094ae:	c3                   	ret    

c00094af <getFromFileDescriptor(int)>:
c00094af:	53                   	push   ebx
c00094b0:	83 ec 08             	sub    esp,0x8
c00094b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094b7:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094bd:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c3:	7f 2c                	jg     c00094f1 <getFromFileDescriptor(int)+0x42>
c00094c5:	83 ec 0c             	sub    esp,0xc
c00094c8:	68 98 4f 02 c0       	push   0xc0024f98
c00094cd:	e8 7a 54 01 00       	call   c001e94c <LinkedList<UnixFile>::getFirstElement()>
c00094d2:	83 c4 10             	add    esp,0x10
c00094d5:	85 c0                	test   eax,eax
c00094d7:	75 04                	jne    c00094dd <getFromFileDescriptor(int)+0x2e>
c00094d9:	31 c0                	xor    eax,eax
c00094db:	eb 6e                	jmp    c000954b <getFromFileDescriptor(int)+0x9c>
c00094dd:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e0:	74 69                	je     c000954b <getFromFileDescriptor(int)+0x9c>
c00094e2:	52                   	push   edx
c00094e3:	52                   	push   edx
c00094e4:	50                   	push   eax
c00094e5:	68 98 4f 02 c0       	push   0xc0024f98
c00094ea:	e8 07 55 01 00       	call   c001e9f6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094ef:	eb e1                	jmp    c00094d2 <getFromFileDescriptor(int)+0x23>
c00094f1:	a1 8c 4f 02 c0       	mov    eax,ds:0xc0024f8c
c00094f6:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00094fc:	74 4d                	je     c000954b <getFromFileDescriptor(int)+0x9c>
c00094fe:	a1 90 4f 02 c0       	mov    eax,ds:0xc0024f90
c0009503:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009509:	74 40                	je     c000954b <getFromFileDescriptor(int)+0x9c>
c000950b:	a1 88 4f 02 c0       	mov    eax,ds:0xc0024f88
c0009510:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009516:	74 33                	je     c000954b <getFromFileDescriptor(int)+0x9c>
c0009518:	a1 84 4f 02 c0       	mov    eax,ds:0xc0024f84
c000951d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009523:	74 26                	je     c000954b <getFromFileDescriptor(int)+0x9c>
c0009525:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952b:	83 f8 08             	cmp    eax,0x8
c000952e:	77 09                	ja     c0009539 <getFromFileDescriptor(int)+0x8a>
c0009530:	8b 04 85 60 4f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb0a0]
c0009537:	eb 12                	jmp    c000954b <getFromFileDescriptor(int)+0x9c>
c0009539:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000953f:	83 fb 08             	cmp    ebx,0x8
c0009542:	77 95                	ja     c00094d9 <getFromFileDescriptor(int)+0x2a>
c0009544:	8b 04 9d 20 4f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb0e0]
c000954b:	83 c4 08             	add    esp,0x8
c000954e:	5b                   	pop    ebx
c000954f:	c3                   	ret    

c0009550 <__static_initialization_and_destruction_0(int, int)>:
c0009550:	83 ec 0c             	sub    esp,0xc
c0009553:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009558:	75 34                	jne    c000958e <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009562:	75 2a                	jne    c000958e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009564:	83 ec 0c             	sub    esp,0xc
c0009567:	68 98 4f 02 c0       	push   0xc0024f98
c000956c:	e8 c5 52 01 00       	call   c001e836 <LinkedList<UnixFile>::LinkedList()>
c0009571:	83 c4 10             	add    esp,0x10
c0009574:	83 ec 04             	sub    esp,0x4
c0009577:	68 c8 1d 02 c0       	push   0xc0021dc8
c000957c:	68 98 4f 02 c0       	push   0xc0024f98
c0009581:	68 34 e8 01 c0       	push   0xc001e834
c0009586:	e8 7a 12 00 00       	call   c000a805 <__cxa_atexit>
c000958b:	83 c4 10             	add    esp,0x10
c000958e:	90                   	nop
c000958f:	83 c4 0c             	add    esp,0xc
c0009592:	c3                   	ret    

c0009593 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009593:	83 ec 0c             	sub    esp,0xc
c0009596:	83 ec 08             	sub    esp,0x8
c0009599:	68 ff ff 00 00       	push   0xffff
c000959e:	6a 01                	push   0x1
c00095a0:	e8 ab ff ff ff       	call   c0009550 <__static_initialization_and_destruction_0(int, int)>
c00095a5:	83 c4 10             	add    esp,0x10
c00095a8:	83 c4 0c             	add    esp,0xc
c00095ab:	c3                   	ret    

c00095ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095ac:	53                   	push   ebx
c00095ad:	8b 15 48 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021e48
c00095b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bb:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c1:	89 d8                	mov    eax,ebx
c00095c3:	d1 e8                	shr    eax,1
c00095c5:	01 d0                	add    eax,edx
c00095c7:	80 e3 01             	and    bl,0x1
c00095ca:	8a 10                	mov    dl,BYTE PTR [eax]
c00095cc:	75 09                	jne    c00095d7 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095ce:	83 e2 f0             	and    edx,0xfffffff0
c00095d1:	09 ca                	or     edx,ecx
c00095d3:	88 10                	mov    BYTE PTR [eax],dl
c00095d5:	5b                   	pop    ebx
c00095d6:	c3                   	ret    
c00095d7:	83 e2 0f             	and    edx,0xf
c00095da:	0f b6 c9             	movzx  ecx,cl
c00095dd:	c1 e1 04             	shl    ecx,0x4
c00095e0:	09 ca                	or     edx,ecx
c00095e2:	88 10                	mov    BYTE PTR [eax],dl
c00095e4:	5b                   	pop    ebx
c00095e5:	c3                   	ret    

c00095e6 <Virt::getPageState(unsigned long)>:
c00095e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ea:	8b 0d 48 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021e48
c00095f0:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095f6:	89 d0                	mov    eax,edx
c00095f8:	d1 e8                	shr    eax,1
c00095fa:	80 e2 01             	and    dl,0x1
c00095fd:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009600:	74 03                	je     c0009605 <Virt::getPageState(unsigned long)+0x1f>
c0009602:	c1 e8 04             	shr    eax,0x4
c0009605:	83 e0 0f             	and    eax,0xf
c0009608:	c3                   	ret    

c0009609 <Virt::allocateKernelVirtualPages(int)>:
c0009609:	55                   	push   ebp
c000960a:	31 ed                	xor    ebp,ebp
c000960c:	57                   	push   edi
c000960d:	31 ff                	xor    edi,edi
c000960f:	56                   	push   esi
c0009610:	53                   	push   ebx
c0009611:	31 db                	xor    ebx,ebx
c0009613:	83 ec 0c             	sub    esp,0xc
c0009616:	8b 35 44 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021e44
c000961c:	56                   	push   esi
c000961d:	e8 c4 ff ff ff       	call   c00095e6 <Virt::getPageState(unsigned long)>
c0009622:	5a                   	pop    edx
c0009623:	84 c0                	test   al,al
c0009625:	75 41                	jne    c0009668 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0009627:	85 db                	test   ebx,ebx
c0009629:	75 02                	jne    c000962d <Virt::allocateKernelVirtualPages(int)+0x24>
c000962b:	89 f5                	mov    ebp,esi
c000962d:	83 c3 01             	add    ebx,0x1
c0009630:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009634:	74 5f                	je     c0009695 <Virt::allocateKernelVirtualPages(int)+0x8c>
c0009636:	83 c6 01             	add    esi,0x1
c0009639:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c000963f:	76 34                	jbe    c0009675 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009641:	c7 05 44 1e 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0021e44,0xc8000
c000964b:	f7 c7 01 00 00 00    	test   edi,0x1
c0009651:	75 2a                	jne    c000967d <Virt::allocateKernelVirtualPages(int)+0x74>
c0009653:	be 00 80 0c 00       	mov    esi,0xc8000
c0009658:	bf 01 00 00 00       	mov    edi,0x1
c000965d:	56                   	push   esi
c000965e:	e8 83 ff ff ff       	call   c00095e6 <Virt::getPageState(unsigned long)>
c0009663:	5a                   	pop    edx
c0009664:	84 c0                	test   al,al
c0009666:	74 bf                	je     c0009627 <Virt::allocateKernelVirtualPages(int)+0x1e>
c0009668:	31 db                	xor    ebx,ebx
c000966a:	83 c6 01             	add    esi,0x1
c000966d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009673:	77 cc                	ja     c0009641 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009675:	89 35 44 1e 02 c0    	mov    DWORD PTR ds:0xc0021e44,esi
c000967b:	eb 9f                	jmp    c000961c <Virt::allocateKernelVirtualPages(int)+0x13>
c000967d:	83 ec 0c             	sub    esp,0xc
c0009680:	68 a8 fd 01 c0       	push   0xc001fda8
c0009685:	e8 d5 71 00 00       	call   c001085f <KePanic(char const*)>
c000968a:	8b 35 44 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021e44
c0009690:	83 c4 10             	add    esp,0x10
c0009693:	eb 87                	jmp    c000961c <Virt::allocateKernelVirtualPages(int)+0x13>
c0009695:	89 2d 44 1e 02 c0    	mov    DWORD PTR ds:0xc0021e44,ebp
c000969b:	83 fb 01             	cmp    ebx,0x1
c000969e:	74 6f                	je     c000970f <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a4:	85 c9                	test   ecx,ecx
c00096a6:	74 49                	je     c00096f1 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096a8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096ac:	89 e8                	mov    eax,ebp
c00096ae:	31 db                	xor    ebx,ebx
c00096b0:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b3:	eb 18                	jmp    c00096cd <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b5:	6a 01                	push   0x1
c00096b7:	83 c3 01             	add    ebx,0x1
c00096ba:	50                   	push   eax
c00096bb:	e8 ec fe ff ff       	call   c00095ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c0:	58                   	pop    eax
c00096c1:	5a                   	pop    edx
c00096c2:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096c6:	74 29                	je     c00096f1 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096c8:	a1 44 1e 02 c0       	mov    eax,ds:0xc0021e44
c00096cd:	8d 50 01             	lea    edx,[eax+0x1]
c00096d0:	85 db                	test   ebx,ebx
c00096d2:	89 15 44 1e 02 c0    	mov    DWORD PTR ds:0xc0021e44,edx
c00096d8:	74 24                	je     c00096fe <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096da:	39 df                	cmp    edi,ebx
c00096dc:	75 d7                	jne    c00096b5 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096de:	6a 03                	push   0x3
c00096e0:	83 c3 01             	add    ebx,0x1
c00096e3:	50                   	push   eax
c00096e4:	e8 c3 fe ff ff       	call   c00095ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096e9:	59                   	pop    ecx
c00096ea:	5e                   	pop    esi
c00096eb:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ef:	75 d7                	jne    c00096c8 <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f1:	83 c4 0c             	add    esp,0xc
c00096f4:	89 e8                	mov    eax,ebp
c00096f6:	5b                   	pop    ebx
c00096f7:	c1 e0 0c             	shl    eax,0xc
c00096fa:	5e                   	pop    esi
c00096fb:	5f                   	pop    edi
c00096fc:	5d                   	pop    ebp
c00096fd:	c3                   	ret    
c00096fe:	6a 02                	push   0x2
c0009700:	bb 01 00 00 00       	mov    ebx,0x1
c0009705:	50                   	push   eax
c0009706:	e8 a1 fe ff ff       	call   c00095ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970b:	58                   	pop    eax
c000970c:	5a                   	pop    edx
c000970d:	eb b9                	jmp    c00096c8 <Virt::allocateKernelVirtualPages(int)+0xbf>
c000970f:	6a 04                	push   0x4
c0009711:	8d 45 01             	lea    eax,[ebp+0x1]
c0009714:	55                   	push   ebp
c0009715:	a3 44 1e 02 c0       	mov    ds:0xc0021e44,eax
c000971a:	e8 8d fe ff ff       	call   c00095ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000971f:	5b                   	pop    ebx
c0009720:	89 e8                	mov    eax,ebp
c0009722:	5e                   	pop    esi
c0009723:	c1 e0 0c             	shl    eax,0xc
c0009726:	83 c4 0c             	add    esp,0xc
c0009729:	5b                   	pop    ebx
c000972a:	5e                   	pop    esi
c000972b:	5f                   	pop    edi
c000972c:	5d                   	pop    ebp
c000972d:	c3                   	ret    

c000972e <Virt::freeSwapfilePage(unsigned long)>:
c000972e:	53                   	push   ebx
c000972f:	8b 15 ac 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fac
c0009735:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009739:	b8 01 00 00 00       	mov    eax,0x1
c000973e:	89 cb                	mov    ebx,ecx
c0009740:	d3 e0                	shl    eax,cl
c0009742:	c1 eb 05             	shr    ebx,0x5
c0009745:	f7 d0                	not    eax
c0009747:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974a:	21 c1                	and    ecx,eax
c000974c:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c000974f:	5b                   	pop    ebx
c0009750:	c3                   	ret    

c0009751 <Virt::swapIDToSector(unsigned long)>:
c0009751:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009755:	8b 15 4c 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021e4c
c000975b:	8b 0d 54 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021e54
c0009761:	0f af c2             	imul   eax,edx
c0009764:	01 c8                	add    eax,ecx
c0009766:	c3                   	ret    

c0009767 <Virt::allocateSwapfilePage()>:
c0009767:	55                   	push   ebp
c0009768:	31 d2                	xor    edx,edx
c000976a:	57                   	push   edi
c000976b:	56                   	push   esi
c000976c:	53                   	push   ebx
c000976d:	83 ec 0c             	sub    esp,0xc
c0009770:	8b 0d 4c 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021e4c
c0009776:	a1 50 1e 02 c0       	mov    eax,ds:0xc0021e50
c000977b:	f7 f1                	div    ecx
c000977d:	39 0d 50 1e 02 c0    	cmp    DWORD PTR ds:0xc0021e50,ecx
c0009783:	72 2f                	jb     c00097b4 <Virt::allocateSwapfilePage()+0x4d>
c0009785:	8b 35 ac 4f 02 c0    	mov    esi,DWORD PTR ds:0xc0024fac
c000978b:	8b 16                	mov    edx,DWORD PTR [esi]
c000978d:	f6 c2 01             	test   dl,0x1
c0009790:	74 3e                	je     c00097d0 <Virt::allocateSwapfilePage()+0x69>
c0009792:	31 c9                	xor    ecx,ecx
c0009794:	bf 01 00 00 00       	mov    edi,0x1
c0009799:	eb 12                	jmp    c00097ad <Virt::allocateSwapfilePage()+0x46>
c000979b:	89 fd                	mov    ebp,edi
c000979d:	89 ca                	mov    edx,ecx
c000979f:	d3 e5                	shl    ebp,cl
c00097a1:	c1 ea 05             	shr    edx,0x5
c00097a4:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097a7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097a9:	85 ea                	test   edx,ebp
c00097ab:	74 2c                	je     c00097d9 <Virt::allocateSwapfilePage()+0x72>
c00097ad:	83 c1 01             	add    ecx,0x1
c00097b0:	39 c8                	cmp    eax,ecx
c00097b2:	77 e7                	ja     c000979b <Virt::allocateSwapfilePage()+0x34>
c00097b4:	83 ec 0c             	sub    esp,0xc
c00097b7:	68 0f ff 01 c0       	push   0xc001ff0f
c00097bc:	e8 9e 70 00 00       	call   c001085f <KePanic(char const*)>
c00097c1:	83 c4 10             	add    esp,0x10
c00097c4:	31 c9                	xor    ecx,ecx
c00097c6:	83 c4 0c             	add    esp,0xc
c00097c9:	89 c8                	mov    eax,ecx
c00097cb:	5b                   	pop    ebx
c00097cc:	5e                   	pop    esi
c00097cd:	5f                   	pop    edi
c00097ce:	5d                   	pop    ebp
c00097cf:	c3                   	ret    
c00097d0:	89 f3                	mov    ebx,esi
c00097d2:	bd 01 00 00 00       	mov    ebp,0x1
c00097d7:	31 c9                	xor    ecx,ecx
c00097d9:	09 ea                	or     edx,ebp
c00097db:	89 c8                	mov    eax,ecx
c00097dd:	89 13                	mov    DWORD PTR [ebx],edx
c00097df:	83 c4 0c             	add    esp,0xc
c00097e2:	5b                   	pop    ebx
c00097e3:	5e                   	pop    esi
c00097e4:	5f                   	pop    edi
c00097e5:	5d                   	pop    ebp
c00097e6:	c3                   	ret    

c00097e7 <Virt::virtualMemorySetup()>:
c00097e7:	53                   	push   ebx
c00097e8:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097ed:	6a 0f                	push   0xf
c00097ef:	53                   	push   ebx
c00097f0:	83 c3 01             	add    ebx,0x1
c00097f3:	e8 b4 fd ff ff       	call   c00095ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097f8:	58                   	pop    eax
c00097f9:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00097ff:	5a                   	pop    edx
c0009800:	75 eb                	jne    c00097ed <Virt::virtualMemorySetup()+0x6>
c0009802:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009807:	6a 00                	push   0x0
c0009809:	53                   	push   ebx
c000980a:	83 c3 01             	add    ebx,0x1
c000980d:	e8 9a fd ff ff       	call   c00095ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009812:	59                   	pop    ecx
c0009813:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009819:	58                   	pop    eax
c000981a:	75 eb                	jne    c0009807 <Virt::virtualMemorySetup()+0x20>
c000981c:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009821:	6a 0f                	push   0xf
c0009823:	53                   	push   ebx
c0009824:	83 c3 01             	add    ebx,0x1
c0009827:	e8 80 fd ff ff       	call   c00095ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000982c:	58                   	pop    eax
c000982d:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009833:	5a                   	pop    edx
c0009834:	75 eb                	jne    c0009821 <Virt::virtualMemorySetup()+0x3a>
c0009836:	5b                   	pop    ebx
c0009837:	c3                   	ret    

c0009838 <Virt::setupPageSwapping(int)>:
c0009838:	53                   	push   ebx
c0009839:	83 ec 0c             	sub    esp,0xc
c000983c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009840:	a1 28 74 02 c0       	mov    eax,ds:0xc0027428
c0009845:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984b:	8b 10                	mov    edx,DWORD PTR [eax]
c000984d:	53                   	push   ebx
c000984e:	c1 e3 0b             	shl    ebx,0xb
c0009851:	68 26 ff 01 c0       	push   0xc001ff26
c0009856:	50                   	push   eax
c0009857:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000985a:	89 1d 50 1e 02 c0    	mov    DWORD PTR ds:0xc0021e50,ebx
c0009860:	c6 05 58 1e 02 c0 43 	mov    BYTE PTR ds:0xc0021e58,0x43
c0009867:	c1 eb 08             	shr    ebx,0x8
c000986a:	a3 54 1e 02 c0       	mov    ds:0xc0021e54,eax
c000986f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009872:	c7 05 4c 1e 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0021e4c,0x8
c000987c:	e8 19 e2 ff ff       	call   c0007a9a <malloc>
c0009881:	83 c4 0c             	add    esp,0xc
c0009884:	89 c1                	mov    ecx,eax
c0009886:	a3 ac 4f 02 c0       	mov    ds:0xc0024fac,eax
c000988b:	31 d2                	xor    edx,edx
c000988d:	a1 50 1e 02 c0       	mov    eax,ds:0xc0021e50
c0009892:	f7 35 4c 1e 02 c0    	div    DWORD PTR ds:0xc0021e4c
c0009898:	c1 e8 05             	shr    eax,0x5
c000989b:	50                   	push   eax
c000989c:	6a 00                	push   0x0
c000989e:	51                   	push   ecx
c000989f:	e8 4c 6c ff ff       	call   c00004f0 <memset>
c00098a4:	83 c4 18             	add    esp,0x18
c00098a7:	5b                   	pop    ebx
c00098a8:	c3                   	ret    
c00098a9:	90                   	nop

c00098aa <VAS::VAS(VAS*)>:
c00098aa:	83 ec 0c             	sub    esp,0xc
c00098ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098bc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c3:	83 ec 0c             	sub    esp,0xc
c00098c6:	68 c8 fd 01 c0       	push   0xc001fdc8
c00098cb:	e8 8f 6f 00 00       	call   c001085f <KePanic(char const*)>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	90                   	nop
c00098d4:	83 c4 0c             	add    esp,0xc
c00098d7:	c3                   	ret    

c00098d8 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098dc:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e1:	89 c2                	mov    edx,eax
c00098e3:	c1 e8 0a             	shr    eax,0xa
c00098e6:	c1 ea 16             	shr    edx,0x16
c00098e9:	83 f9 01             	cmp    ecx,0x1
c00098ec:	19 c9                	sbb    ecx,ecx
c00098ee:	c1 e2 0c             	shl    edx,0xc
c00098f1:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098f7:	25 fc 0f 00 00       	and    eax,0xffc
c00098fc:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009903:	01 d0                	add    eax,edx
c0009905:	c3                   	ret    

c0009906 <VAS::getPageTableEntry(unsigned long)>:
c0009906:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000990a:	89 ca                	mov    edx,ecx
c000990c:	c1 e9 0a             	shr    ecx,0xa
c000990f:	c1 ea 16             	shr    edx,0x16
c0009912:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009918:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000991e:	c1 e0 0c             	shl    eax,0xc
c0009921:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009924:	c3                   	ret    

c0009925 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009925:	55                   	push   ebp
c0009926:	57                   	push   edi
c0009927:	bf 01 00 00 00       	mov    edi,0x1
c000992c:	56                   	push   esi
c000992d:	53                   	push   ebx
c000992e:	83 ec 0c             	sub    esp,0xc
c0009931:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0009935:	c1 ee 0c             	shr    esi,0xc
c0009938:	eb 3a                	jmp    c0009974 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000993a:	83 ec 08             	sub    esp,0x8
c000993d:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0009942:	55                   	push   ebp
c0009943:	50                   	push   eax
c0009944:	e8 bd ff ff ff       	call   c0009906 <VAS::getPageTableEntry(unsigned long)>
c0009949:	83 c4 10             	add    esp,0x10
c000994c:	8b 00                	mov    eax,DWORD PTR [eax]
c000994e:	f6 c4 04             	test   ah,0x4
c0009951:	75 5a                	jne    c00099ad <Virt::freeKernelVirtualPages(unsigned long)+0x88>
c0009953:	83 fb 04             	cmp    ebx,0x4
c0009956:	74 6b                	je     c00099c3 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009958:	83 fb 02             	cmp    ebx,0x2
c000995b:	74 7f                	je     c00099dc <Virt::freeKernelVirtualPages(unsigned long)+0xb7>
c000995d:	83 fb 03             	cmp    ebx,0x3
c0009960:	0f 84 a3 00 00 00    	je     c0009a09 <Virt::freeKernelVirtualPages(unsigned long)+0xe4>
c0009966:	83 fb 01             	cmp    ebx,0x1
c0009969:	0f 84 87 00 00 00    	je     c00099f6 <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c000996f:	83 c6 01             	add    esi,0x1
c0009972:	31 ff                	xor    edi,edi
c0009974:	56                   	push   esi
c0009975:	89 f5                	mov    ebp,esi
c0009977:	e8 6a fc ff ff       	call   c00095e6 <Virt::getPageState(unsigned long)>
c000997c:	c1 e5 0c             	shl    ebp,0xc
c000997f:	0f b6 d8             	movzx  ebx,al
c0009982:	5a                   	pop    edx
c0009983:	85 db                	test   ebx,ebx
c0009985:	75 b3                	jne    c000993a <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0009987:	83 ec 0c             	sub    esp,0xc
c000998a:	68 3d ff 01 c0       	push   0xc001ff3d
c000998f:	e8 cb 6e 00 00       	call   c001085f <KePanic(char const*)>
c0009994:	5a                   	pop    edx
c0009995:	59                   	pop    ecx
c0009996:	55                   	push   ebp
c0009997:	8b 2d b0 4f 02 c0    	mov    ebp,DWORD PTR ds:0xc0024fb0
c000999d:	55                   	push   ebp
c000999e:	e8 63 ff ff ff       	call   c0009906 <VAS::getPageTableEntry(unsigned long)>
c00099a3:	83 c4 10             	add    esp,0x10
c00099a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00099a8:	f6 c4 04             	test   ah,0x4
c00099ab:	74 c2                	je     c000996f <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099ad:	83 ec 0c             	sub    esp,0xc
c00099b0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099b5:	50                   	push   eax
c00099b6:	e8 7b e3 ff ff       	call   c0007d36 <Phys::freePage(unsigned long)>
c00099bb:	83 c4 10             	add    esp,0x10
c00099be:	83 fb 04             	cmp    ebx,0x4
c00099c1:	75 95                	jne    c0009958 <Virt::freeKernelVirtualPages(unsigned long)+0x33>
c00099c3:	83 e7 01             	and    edi,0x1
c00099c6:	75 46                	jne    c0009a0e <Virt::freeKernelVirtualPages(unsigned long)+0xe9>
c00099c8:	c7 44 24 20 ec fd 01 c0 	mov    DWORD PTR [esp+0x20],0xc001fdec
c00099d0:	83 c4 0c             	add    esp,0xc
c00099d3:	5b                   	pop    ebx
c00099d4:	5e                   	pop    esi
c00099d5:	5f                   	pop    edi
c00099d6:	5d                   	pop    ebp
c00099d7:	e9 83 6e 00 00       	jmp    c001085f <KePanic(char const*)>
c00099dc:	83 e7 01             	and    edi,0x1
c00099df:	75 15                	jne    c00099f6 <Virt::freeKernelVirtualPages(unsigned long)+0xd1>
c00099e1:	83 ec 0c             	sub    esp,0xc
c00099e4:	68 59 ff 01 c0       	push   0xc001ff59
c00099e9:	e8 71 6e 00 00       	call   c001085f <KePanic(char const*)>
c00099ee:	83 c4 10             	add    esp,0x10
c00099f1:	e9 79 ff ff ff       	jmp    c000996f <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c00099f6:	83 ec 08             	sub    esp,0x8
c00099f9:	6a 00                	push   0x0
c00099fb:	56                   	push   esi
c00099fc:	e8 ab fb ff ff       	call   c00095ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a01:	83 c4 10             	add    esp,0x10
c0009a04:	e9 66 ff ff ff       	jmp    c000996f <Virt::freeKernelVirtualPages(unsigned long)+0x4a>
c0009a09:	83 e7 01             	and    edi,0x1
c0009a0c:	75 16                	jne    c0009a24 <Virt::freeKernelVirtualPages(unsigned long)+0xff>
c0009a0e:	83 ec 08             	sub    esp,0x8
c0009a11:	6a 00                	push   0x0
c0009a13:	56                   	push   esi
c0009a14:	e8 93 fb ff ff       	call   c00095ac <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a19:	83 c4 10             	add    esp,0x10
c0009a1c:	83 c4 0c             	add    esp,0xc
c0009a1f:	5b                   	pop    ebx
c0009a20:	5e                   	pop    esi
c0009a21:	5f                   	pop    edi
c0009a22:	5d                   	pop    ebp
c0009a23:	c3                   	ret    
c0009a24:	c7 44 24 20 75 ff 01 c0 	mov    DWORD PTR [esp+0x20],0xc001ff75
c0009a2c:	83 c4 0c             	add    esp,0xc
c0009a2f:	5b                   	pop    ebx
c0009a30:	5e                   	pop    esi
c0009a31:	5f                   	pop    edi
c0009a32:	5d                   	pop    ebp
c0009a33:	e9 27 6e 00 00       	jmp    c001085f <KePanic(char const*)>

c0009a38 <VAS::freeAllocatedPages(unsigned long)>:
c0009a38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a40:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a44:	74 09                	je     c0009a4f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a46:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a4a:	e9 d6 fe ff ff       	jmp    c0009925 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a4f:	c7 44 24 04 10 fe 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fe10
c0009a57:	e9 26 0f 00 00       	jmp    c000a982 <Dbg::kprintf(char const*, ...)>

c0009a5c <VAS::virtualToPhysical(unsigned long)>:
c0009a5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a60:	50                   	push   eax
c0009a61:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a65:	52                   	push   edx
c0009a66:	e8 9b fe ff ff       	call   c0009906 <VAS::getPageTableEntry(unsigned long)>
c0009a6b:	59                   	pop    ecx
c0009a6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a6e:	5a                   	pop    edx
c0009a6f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009a74:	c3                   	ret    
c0009a75:	90                   	nop

c0009a76 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009a76:	55                   	push   ebp
c0009a77:	57                   	push   edi
c0009a78:	56                   	push   esi
c0009a79:	53                   	push   ebx
c0009a7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009a82:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009a86:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009a8a:	85 db                	test   ebx,ebx
c0009a8c:	7e 24                	jle    c0009ab2 <VAS::reflagRange(unsigned long, int, int, int)+0x3c>
c0009a8e:	c1 e3 0c             	shl    ebx,0xc
c0009a91:	01 f3                	add    ebx,esi
c0009a93:	56                   	push   esi
c0009a94:	81 c6 00 10 00 00    	add    esi,0x1000
c0009a9a:	55                   	push   ebp
c0009a9b:	e8 66 fe ff ff       	call   c0009906 <VAS::getPageTableEntry(unsigned long)>
c0009aa0:	5a                   	pop    edx
c0009aa1:	59                   	pop    ecx
c0009aa2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009aa4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009aa8:	21 f9                	and    ecx,edi
c0009aaa:	09 d1                	or     ecx,edx
c0009aac:	39 f3                	cmp    ebx,esi
c0009aae:	89 08                	mov    DWORD PTR [eax],ecx
c0009ab0:	75 e1                	jne    c0009a93 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009ab2:	5b                   	pop    ebx
c0009ab3:	5e                   	pop    esi
c0009ab4:	5f                   	pop    edi
c0009ab5:	5d                   	pop    ebp
c0009ab6:	c3                   	ret    
c0009ab7:	90                   	nop

c0009ab8 <VAS::VAS()>:
c0009ab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009abc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ac3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ac7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009ace:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ad2:	a3 b0 4f 02 c0       	mov    ds:0xc0024fb0,eax
c0009ad7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009adb:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009adf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ae3:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009ae6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aea:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009af1:	ba 7d 30 02 c0       	mov    edx,0xc002307d
c0009af6:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009afb:	29 c2                	sub    edx,eax
c0009afd:	89 d0                	mov    eax,edx
c0009aff:	05 ff 0f 00 00       	add    eax,0xfff
c0009b04:	c1 e8 0c             	shr    eax,0xc
c0009b07:	89 c2                	mov    edx,eax
c0009b09:	b8 00 30 02 c0       	mov    eax,0xc0023000
c0009b0e:	6a 04                	push   0x4
c0009b10:	6a ff                	push   0xffffffff
c0009b12:	52                   	push   edx
c0009b13:	50                   	push   eax
c0009b14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b18:	e8 59 ff ff ff       	call   c0009a76 <VAS::reflagRange(unsigned long, int, int, int)>
c0009b1d:	83 c4 14             	add    esp,0x14
c0009b20:	90                   	nop
c0009b21:	c3                   	ret    

c0009b22 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b22:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009b27:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b2d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b34:	75 01                	jne    c0009b37 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b36:	c3                   	ret    
c0009b37:	68 80 00 00 00       	push   0x80
c0009b3c:	6a ff                	push   0xffffffff
c0009b3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b42:	50                   	push   eax
c0009b43:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b47:	52                   	push   edx
c0009b48:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b4c:	51                   	push   ecx
c0009b4d:	e8 24 ff ff ff       	call   c0009a76 <VAS::reflagRange(unsigned long, int, int, int)>
c0009b52:	83 c4 14             	add    esp,0x14
c0009b55:	c3                   	ret    

c0009b56 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b5a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b61:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b64:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b69:	83 f8 01             	cmp    eax,0x1
c0009b6c:	19 c0                	sbb    eax,eax
c0009b6e:	83 ca 03             	or     edx,0x3
c0009b71:	83 e0 fc             	and    eax,0xfffffffc
c0009b74:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009b7b:	0f 20 d8             	mov    eax,cr3
c0009b7e:	0f 22 d8             	mov    cr3,eax
c0009b81:	c3                   	ret    

c0009b82 <VAS::~VAS()>:
c0009b82:	83 ec 2c             	sub    esp,0x2c
c0009b85:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009b8d:	fa                   	cli    
c0009b8e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009b93:	83 c0 01             	add    eax,0x1
c0009b96:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009b9b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009ba0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ba2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009ba5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009baf:	6a 01                	push   0x1
c0009bb1:	50                   	push   eax
c0009bb2:	e8 9f ff ff ff       	call   c0009b56 <VAS::mapOtherVASIn(bool, VAS*)>
c0009bb7:	83 c4 0c             	add    esp,0xc
c0009bba:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bc2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bca:	0f 8f d8 00 00 00    	jg     c0009ca8 <VAS::~VAS()+0x126>
c0009bd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009bd4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009bd7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009bdb:	c1 e2 02             	shl    edx,0x2
c0009bde:	01 d0                	add    eax,edx
c0009be0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009be2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009bea:	83 e0 01             	and    eax,0x1
c0009bed:	0f 84 ab 00 00 00    	je     c0009c9e <VAS::~VAS()+0x11c>
c0009bf3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009bfb:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c03:	7f 74                	jg     c0009c79 <VAS::~VAS()+0xf7>
c0009c05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c09:	c1 e0 0a             	shl    eax,0xa
c0009c0c:	89 c2                	mov    edx,eax
c0009c0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c12:	01 d0                	add    eax,edx
c0009c14:	c1 e0 0c             	shl    eax,0xc
c0009c17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c1b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c20:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c22:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c25:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c2b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c2f:	6a 01                	push   0x1
c0009c31:	50                   	push   eax
c0009c32:	e8 a1 fc ff ff       	call   c00098d8 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c37:	83 c4 0c             	add    esp,0xc
c0009c3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c42:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c4c:	25 01 04 00 00       	and    eax,0x401
c0009c51:	3d 01 04 00 00       	cmp    eax,0x401
c0009c56:	75 1a                	jne    c0009c72 <VAS::~VAS()+0xf0>
c0009c58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c61:	83 ec 0c             	sub    esp,0xc
c0009c64:	50                   	push   eax
c0009c65:	e8 cc e0 ff ff       	call   c0007d36 <Phys::freePage(unsigned long)>
c0009c6a:	83 c4 10             	add    esp,0x10
c0009c6d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c72:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009c77:	eb 82                	jmp    c0009bfb <VAS::~VAS()+0x79>
c0009c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c7d:	25 00 04 00 00       	and    eax,0x400
c0009c82:	74 1a                	je     c0009c9e <VAS::~VAS()+0x11c>
c0009c84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c88:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c8d:	83 ec 0c             	sub    esp,0xc
c0009c90:	50                   	push   eax
c0009c91:	e8 a0 e0 ff ff       	call   c0007d36 <Phys::freePage(unsigned long)>
c0009c96:	83 c4 10             	add    esp,0x10
c0009c99:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009c9e:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009ca3:	e9 1a ff ff ff       	jmp    c0009bc2 <VAS::~VAS()+0x40>
c0009ca8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009caf:	83 ec 0c             	sub    esp,0xc
c0009cb2:	50                   	push   eax
c0009cb3:	e8 6d fc ff ff       	call   c0009925 <Virt::freeKernelVirtualPages(unsigned long)>
c0009cb8:	83 c4 10             	add    esp,0x10
c0009cbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cbf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cc2:	83 ec 0c             	sub    esp,0xc
c0009cc5:	50                   	push   eax
c0009cc6:	e8 6b e0 ff ff       	call   c0007d36 <Phys::freePage(unsigned long)>
c0009ccb:	83 c4 10             	add    esp,0x10
c0009cce:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cd3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009cd8:	83 e8 01             	sub    eax,0x1
c0009cdb:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0009ce0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0009ce5:	85 c0                	test   eax,eax
c0009ce7:	75 01                	jne    c0009cea <VAS::~VAS()+0x168>
c0009ce9:	fb                   	sti    
c0009cea:	90                   	nop
c0009ceb:	83 c4 2c             	add    esp,0x2c
c0009cee:	c3                   	ret    
c0009cef:	90                   	nop

c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009cf0:	55                   	push   ebp
c0009cf1:	57                   	push   edi
c0009cf2:	56                   	push   esi
c0009cf3:	53                   	push   ebx
c0009cf4:	83 ec 1c             	sub    esp,0x1c
c0009cf7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009cfb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009cff:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d05:	77 0b                	ja     c0009d12 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009d07:	0f 20 d8             	mov    eax,cr3
c0009d0a:	0f 20 d8             	mov    eax,cr3
c0009d0d:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d10:	75 49                	jne    c0009d5b <VAS::mapPage(unsigned long, unsigned long, int)+0x6b>
c0009d12:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d16:	09 d8                	or     eax,ebx
c0009d18:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d1d:	75 59                	jne    c0009d78 <VAS::mapPage(unsigned long, unsigned long, int)+0x88>
c0009d1f:	89 de                	mov    esi,ebx
c0009d21:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d24:	c1 ee 16             	shr    esi,0x16
c0009d27:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d2e:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d32:	74 56                	je     c0009d8a <VAS::mapPage(unsigned long, unsigned long, int)+0x9a>
c0009d34:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d38:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d3c:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d42:	c1 eb 0a             	shr    ebx,0xa
c0009d45:	c1 e6 0c             	shl    esi,0xc
c0009d48:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d4e:	09 d0                	or     eax,edx
c0009d50:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d53:	83 c4 1c             	add    esp,0x1c
c0009d56:	5b                   	pop    ebx
c0009d57:	5e                   	pop    esi
c0009d58:	5f                   	pop    edi
c0009d59:	5d                   	pop    ebp
c0009d5a:	c3                   	ret    
c0009d5b:	83 ec 0c             	sub    esp,0xc
c0009d5e:	68 34 fe 01 c0       	push   0xc001fe34
c0009d63:	e8 1a 0c 00 00       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0009d68:	83 c4 10             	add    esp,0x10
c0009d6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d6f:	09 d8                	or     eax,ebx
c0009d71:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d76:	74 a7                	je     c0009d1f <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009d78:	83 ec 0c             	sub    esp,0xc
c0009d7b:	68 9c fe 01 c0       	push   0xc001fe9c
c0009d80:	e8 da 6a 00 00       	call   c001085f <KePanic(char const*)>
c0009d85:	83 c4 10             	add    esp,0x10
c0009d88:	eb 95                	jmp    c0009d1f <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009d8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d8e:	e8 0c e0 ff ff       	call   c0007d9f <Phys::allocatePage()>
c0009d93:	83 ec 0c             	sub    esp,0xc
c0009d96:	89 c5                	mov    ebp,eax
c0009d98:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c0009d9e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009da2:	6a 01                	push   0x1
c0009da4:	e8 60 f8 ff ff       	call   c0009609 <Virt::allocateKernelVirtualPages(int)>
c0009da9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009db0:	6a 01                	push   0x1
c0009db2:	50                   	push   eax
c0009db3:	55                   	push   ebp
c0009db4:	81 cd 07 04 00 00    	or     ebp,0x407
c0009dba:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009dbe:	51                   	push   ecx
c0009dbf:	e8 40 02 00 00       	call   c000a004 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dc4:	83 c4 1c             	add    esp,0x1c
c0009dc7:	68 00 10 00 00       	push   0x1000
c0009dcc:	6a 00                	push   0x0
c0009dce:	50                   	push   eax
c0009dcf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dd3:	e8 18 67 ff ff       	call   c00004f0 <memset>
c0009dd8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009ddc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ddf:	e8 41 fb ff ff       	call   c0009925 <Virt::freeKernelVirtualPages(unsigned long)>
c0009de4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009de8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009deb:	83 c4 10             	add    esp,0x10
c0009dee:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009df1:	e9 3e ff ff ff       	jmp    c0009d34 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009df6 <VAS::allocatePages(int, int)>:
c0009df6:	55                   	push   ebp
c0009df7:	57                   	push   edi
c0009df8:	56                   	push   esi
c0009df9:	53                   	push   ebx
c0009dfa:	83 ec 1c             	sub    esp,0x1c
c0009dfd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009e01:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009e06:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e0c:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009e12:	83 e0 01             	and    eax,0x1
c0009e15:	80 7d 01 00          	cmp    BYTE PTR [ebp+0x1],0x0
c0009e19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e1d:	89 c7                	mov    edi,eax
c0009e1f:	0f 85 d6 00 00 00    	jne    c0009efb <VAS::allocatePages(int, int)+0x105>
c0009e25:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009e28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e2c:	85 c0                	test   eax,eax
c0009e2e:	0f 84 ab 00 00 00    	je     c0009edf <VAS::allocatePages(int, int)+0xe9>
c0009e34:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009e38:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e3c:	c1 e6 0c             	shl    esi,0xc
c0009e3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e43:	01 de                	add    esi,ebx
c0009e45:	85 c0                	test   eax,eax
c0009e47:	89 75 04             	mov    DWORD PTR [ebp+0x4],esi
c0009e4a:	7e 3a                	jle    c0009e86 <VAS::allocatePages(int, int)+0x90>
c0009e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009e50:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009e54:	80 cc 04             	or     ah,0x4
c0009e57:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009e5b:	89 f8                	mov    eax,edi
c0009e5d:	0f b6 f8             	movzx  edi,al
c0009e60:	e8 3a df ff ff       	call   c0007d9f <Phys::allocatePage()>
c0009e65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009e69:	52                   	push   edx
c0009e6a:	53                   	push   ebx
c0009e6b:	50                   	push   eax
c0009e6c:	55                   	push   ebp
c0009e6d:	e8 7e fe ff ff       	call   c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e72:	83 c4 10             	add    esp,0x10
c0009e75:	85 ff                	test   edi,edi
c0009e77:	74 03                	je     c0009e7c <VAS::allocatePages(int, int)+0x86>
c0009e79:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009e7c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e82:	39 de                	cmp    esi,ebx
c0009e84:	75 da                	jne    c0009e60 <VAS::allocatePages(int, int)+0x6a>
c0009e86:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009e8a:	85 c9                	test   ecx,ecx
c0009e8c:	75 12                	jne    c0009ea0 <VAS::allocatePages(int, int)+0xaa>
c0009e8e:	0f 20 d8             	mov    eax,cr3
c0009e91:	0f 22 d8             	mov    cr3,eax
c0009e94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009e98:	83 c4 1c             	add    esp,0x1c
c0009e9b:	5b                   	pop    ebx
c0009e9c:	5e                   	pop    esi
c0009e9d:	5f                   	pop    edi
c0009e9e:	5d                   	pop    ebp
c0009e9f:	c3                   	ret    
c0009ea0:	c1 ee 0a             	shr    esi,0xa
c0009ea3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009ea7:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009ead:	c1 eb 0a             	shr    ebx,0xa
c0009eb0:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009eb6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ebc:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ec2:	39 c3                	cmp    ebx,eax
c0009ec4:	77 ce                	ja     c0009e94 <VAS::allocatePages(int, int)+0x9e>
c0009ec6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ec9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ecf:	39 d8                	cmp    eax,ebx
c0009ed1:	73 f3                	jae    c0009ec6 <VAS::allocatePages(int, int)+0xd0>
c0009ed3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ed7:	83 c4 1c             	add    esp,0x1c
c0009eda:	5b                   	pop    ebx
c0009edb:	5e                   	pop    esi
c0009edc:	5f                   	pop    edi
c0009edd:	5d                   	pop    ebp
c0009ede:	c3                   	ret    
c0009edf:	83 ec 0c             	sub    esp,0xc
c0009ee2:	68 c0 fe 01 c0       	push   0xc001fec0
c0009ee7:	e8 73 69 00 00       	call   c001085f <KePanic(char const*)>
c0009eec:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0009eef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ef3:	83 c4 10             	add    esp,0x10
c0009ef6:	e9 39 ff ff ff       	jmp    c0009e34 <VAS::allocatePages(int, int)+0x3e>
c0009efb:	83 ec 0c             	sub    esp,0xc
c0009efe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f02:	50                   	push   eax
c0009f03:	e8 01 f7 ff ff       	call   c0009609 <Virt::allocateKernelVirtualPages(int)>
c0009f08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f0c:	83 c4 10             	add    esp,0x10
c0009f0f:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009f14:	0f 87 a4 00 00 00    	ja     c0009fbe <VAS::allocatePages(int, int)+0x1c8>
c0009f1a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f1e:	85 c0                	test   eax,eax
c0009f20:	7e 44                	jle    c0009f66 <VAS::allocatePages(int, int)+0x170>
c0009f22:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f26:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f2a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f2e:	c1 e0 0c             	shl    eax,0xc
c0009f31:	81 ce 00 04 00 00    	or     esi,0x400
c0009f37:	01 d8                	add    eax,ebx
c0009f39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009f3d:	89 f8                	mov    eax,edi
c0009f3f:	0f b6 f8             	movzx  edi,al
c0009f42:	e8 58 de ff ff       	call   c0007d9f <Phys::allocatePage()>
c0009f47:	56                   	push   esi
c0009f48:	53                   	push   ebx
c0009f49:	50                   	push   eax
c0009f4a:	55                   	push   ebp
c0009f4b:	e8 a0 fd ff ff       	call   c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f50:	83 c4 10             	add    esp,0x10
c0009f53:	85 ff                	test   edi,edi
c0009f55:	74 03                	je     c0009f5a <VAS::allocatePages(int, int)+0x164>
c0009f57:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f5a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f60:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0009f64:	75 dc                	jne    c0009f42 <VAS::allocatePages(int, int)+0x14c>
c0009f66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f6a:	85 c0                	test   eax,eax
c0009f6c:	0f 84 1c ff ff ff    	je     c0009e8e <VAS::allocatePages(int, int)+0x98>
c0009f72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009f76:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009f7a:	89 d3                	mov    ebx,edx
c0009f7c:	c1 e0 0c             	shl    eax,0xc
c0009f7f:	c1 eb 0a             	shr    ebx,0xa
c0009f82:	01 d0                	add    eax,edx
c0009f84:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009f8a:	c1 e8 0a             	shr    eax,0xa
c0009f8d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009f93:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f98:	2d 00 00 40 00       	sub    eax,0x400000
c0009f9d:	39 c3                	cmp    ebx,eax
c0009f9f:	0f 87 ef fe ff ff    	ja     c0009e94 <VAS::allocatePages(int, int)+0x9e>
c0009fa5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009fa8:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009fae:	39 d8                	cmp    eax,ebx
c0009fb0:	73 f3                	jae    c0009fa5 <VAS::allocatePages(int, int)+0x1af>
c0009fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009fb6:	83 c4 1c             	add    esp,0x1c
c0009fb9:	5b                   	pop    ebx
c0009fba:	5e                   	pop    esi
c0009fbb:	5f                   	pop    edi
c0009fbc:	5d                   	pop    ebp
c0009fbd:	c3                   	ret    
c0009fbe:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0009fc3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fc9:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009fd0:	0f 84 44 ff ff ff    	je     c0009f1a <VAS::allocatePages(int, int)+0x124>
c0009fd6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009fda:	80 cc 01             	or     ah,0x1
c0009fdd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fe1:	e9 34 ff ff ff       	jmp    c0009f1a <VAS::allocatePages(int, int)+0x124>

c0009fe6 <VAS::setCPUSpecific(unsigned long)>:
c0009fe6:	83 ec 0c             	sub    esp,0xc
c0009fe9:	6a 05                	push   0x5
c0009feb:	68 00 00 40 c2       	push   0xc2400000
c0009ff0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ff4:	50                   	push   eax
c0009ff5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009ff9:	52                   	push   edx
c0009ffa:	e8 f1 fc ff ff       	call   c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009fff:	83 c4 1c             	add    esp,0x1c
c000a002:	c3                   	ret    
c000a003:	90                   	nop

c000a004 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000a004:	55                   	push   ebp
c000a005:	57                   	push   edi
c000a006:	56                   	push   esi
c000a007:	53                   	push   ebx
c000a008:	83 ec 1c             	sub    esp,0x1c
c000a00b:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a010:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a014:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a01a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000a01e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000a024:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000a028:	83 e0 01             	and    eax,0x1
c000a02b:	85 db                	test   ebx,ebx
c000a02d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a031:	7e 43                	jle    c000a076 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x72>
c000a033:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a037:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a03b:	c1 e2 0c             	shl    edx,0xc
c000a03e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000a042:	01 ca                	add    edx,ecx
c000a044:	0f b6 f0             	movzx  esi,al
c000a047:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a04b:	55                   	push   ebp
c000a04c:	53                   	push   ebx
c000a04d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a051:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000a055:	29 d0                	sub    eax,edx
c000a057:	01 d8                	add    eax,ebx
c000a059:	50                   	push   eax
c000a05a:	57                   	push   edi
c000a05b:	e8 90 fc ff ff       	call   c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a060:	83 c4 10             	add    esp,0x10
c000a063:	85 f6                	test   esi,esi
c000a065:	74 03                	je     c000a06a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000a067:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a06a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a070:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c000a074:	75 d5                	jne    c000a04b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x47>
c000a076:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a07a:	85 c9                	test   ecx,ecx
c000a07c:	75 12                	jne    c000a090 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x8c>
c000a07e:	0f 20 d8             	mov    eax,cr3
c000a081:	0f 22 d8             	mov    cr3,eax
c000a084:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a088:	83 c4 1c             	add    esp,0x1c
c000a08b:	5b                   	pop    ebx
c000a08c:	5e                   	pop    esi
c000a08d:	5f                   	pop    edi
c000a08e:	5d                   	pop    ebp
c000a08f:	c3                   	ret    
c000a090:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000a094:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000a098:	c1 eb 0a             	shr    ebx,0xa
c000a09b:	c1 e0 0c             	shl    eax,0xc
c000a09e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a0a4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a0a8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000a0ae:	01 d0                	add    eax,edx
c000a0b0:	c1 e8 0a             	shr    eax,0xa
c000a0b3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a0b8:	2d 00 00 40 00       	sub    eax,0x400000
c000a0bd:	39 c3                	cmp    ebx,eax
c000a0bf:	77 c3                	ja     c000a084 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x80>
c000a0c1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000a0c4:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a0ca:	39 d8                	cmp    eax,ebx
c000a0cc:	73 f3                	jae    c000a0c1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xbd>
c000a0ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a0d2:	83 c4 1c             	add    esp,0x1c
c000a0d5:	5b                   	pop    ebx
c000a0d6:	5e                   	pop    esi
c000a0d7:	5f                   	pop    edi
c000a0d8:	5d                   	pop    ebp
c000a0d9:	c3                   	ret    

c000a0da <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000a0da:	55                   	push   ebp
c000a0db:	57                   	push   edi
c000a0dc:	56                   	push   esi
c000a0dd:	53                   	push   ebx
c000a0de:	83 ec 1c             	sub    esp,0x1c
c000a0e1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a0e5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a0e9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a0ed:	09 f8                	or     eax,edi
c000a0ef:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a0f3:	a9 ff 0f 00 00       	test   eax,0xfff
c000a0f8:	75 4f                	jne    c000a149 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c000a0fa:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000a0fe:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a101:	c1 eb 16             	shr    ebx,0x16
c000a104:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c000a10b:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c000a10f:	74 52                	je     c000a163 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c000a111:	0f b6 f2             	movzx  esi,dl
c000a114:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a118:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000a11c:	c1 e8 0a             	shr    eax,0xa
c000a11f:	83 fe 01             	cmp    esi,0x1
c000a122:	19 d2                	sbb    edx,edx
c000a124:	c1 e3 0c             	shl    ebx,0xc
c000a127:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000a12d:	25 fc 0f 00 00       	and    eax,0xffc
c000a132:	01 d8                	add    eax,ebx
c000a134:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a138:	09 d9                	or     ecx,ebx
c000a13a:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000a141:	83 c4 1c             	add    esp,0x1c
c000a144:	5b                   	pop    ebx
c000a145:	5e                   	pop    esi
c000a146:	5f                   	pop    edi
c000a147:	5d                   	pop    ebp
c000a148:	c3                   	ret    
c000a149:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000a14d:	83 ec 0c             	sub    esp,0xc
c000a150:	68 ec fe 01 c0       	push   0xc001feec
c000a155:	e8 05 67 00 00       	call   c001085f <KePanic(char const*)>
c000a15a:	83 c4 10             	add    esp,0x10
c000a15d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a161:	eb 97                	jmp    c000a0fa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000a163:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a167:	e8 33 dc ff ff       	call   c0007d9f <Phys::allocatePage()>
c000a16c:	83 ec 0c             	sub    esp,0xc
c000a16f:	89 c5                	mov    ebp,eax
c000a171:	8b 0d b0 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fb0
c000a177:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a17b:	6a 01                	push   0x1
c000a17d:	e8 87 f4 ff ff       	call   c0009609 <Virt::allocateKernelVirtualPages(int)>
c000a182:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a189:	6a 01                	push   0x1
c000a18b:	50                   	push   eax
c000a18c:	55                   	push   ebp
c000a18d:	81 cd 07 04 00 00    	or     ebp,0x407
c000a193:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a197:	51                   	push   ecx
c000a198:	e8 67 fe ff ff       	call   c000a004 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a19d:	83 c4 1c             	add    esp,0x1c
c000a1a0:	68 00 10 00 00       	push   0x1000
c000a1a5:	6a 00                	push   0x0
c000a1a7:	50                   	push   eax
c000a1a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1ac:	e8 3f 63 ff ff       	call   c00004f0 <memset>
c000a1b1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a1b5:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a1b8:	e8 68 f7 ff ff       	call   c0009925 <Virt::freeKernelVirtualPages(unsigned long)>
c000a1bd:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a1c0:	83 c4 10             	add    esp,0x10
c000a1c3:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a1c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a1ca:	e9 42 ff ff ff       	jmp    c000a111 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a1cf:	90                   	nop

c000a1d0 <VAS::VAS(bool)>:
c000a1d0:	53                   	push   ebx
c000a1d1:	83 ec 28             	sub    esp,0x28
c000a1d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a1d8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a1dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a1e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1eb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a1f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1f6:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a1fa:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a1fd:	e8 9d db ff ff       	call   c0007d9f <Phys::allocatePage()>
c000a202:	89 c2                	mov    edx,eax
c000a204:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a208:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a20b:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000a211:	83 ec 0c             	sub    esp,0xc
c000a214:	6a 01                	push   0x1
c000a216:	e8 ee f3 ff ff       	call   c0009609 <Virt::allocateKernelVirtualPages(int)>
c000a21b:	83 c4 10             	add    esp,0x10
c000a21e:	89 c2                	mov    edx,eax
c000a220:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a224:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a227:	83 ec 0c             	sub    esp,0xc
c000a22a:	6a 03                	push   0x3
c000a22c:	6a 01                	push   0x1
c000a22e:	52                   	push   edx
c000a22f:	50                   	push   eax
c000a230:	53                   	push   ebx
c000a231:	e8 ce fd ff ff       	call   c000a004 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a236:	83 c4 20             	add    esp,0x20
c000a239:	89 c2                	mov    edx,eax
c000a23b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a23f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a242:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a24a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a252:	7f 1d                	jg     c000a271 <VAS::VAS(bool)+0xa1>
c000a254:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a258:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a25b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a25f:	c1 e2 02             	shl    edx,0x2
c000a262:	01 d0                	add    eax,edx
c000a264:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a26a:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a26f:	eb d9                	jmp    c000a24a <VAS::VAS(bool)+0x7a>
c000a271:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a279:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a281:	7f 7e                	jg     c000a301 <VAS::VAS(bool)+0x131>
c000a283:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a287:	2d 00 02 00 00       	sub    eax,0x200
c000a28c:	c1 e0 0c             	shl    eax,0xc
c000a28f:	83 c8 05             	or     eax,0x5
c000a292:	89 c2                	mov    edx,eax
c000a294:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a299:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a29f:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a2a5:	83 e0 10             	and    eax,0x10
c000a2a8:	0f b6 c0             	movzx  eax,al
c000a2ab:	85 c0                	test   eax,eax
c000a2ad:	74 07                	je     c000a2b6 <VAS::VAS(bool)+0xe6>
c000a2af:	b8 00 01 00 00       	mov    eax,0x100
c000a2b4:	eb 05                	jmp    c000a2bb <VAS::VAS(bool)+0xeb>
c000a2b6:	b8 00 00 00 00       	mov    eax,0x0
c000a2bb:	09 d0                	or     eax,edx
c000a2bd:	89 c1                	mov    ecx,eax
c000a2bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2c3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2c6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a2ca:	c1 e2 02             	shl    edx,0x2
c000a2cd:	01 d0                	add    eax,edx
c000a2cf:	89 ca                	mov    edx,ecx
c000a2d1:	89 10                	mov    DWORD PTR [eax],edx
c000a2d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a2d7:	2d 40 03 00 00       	sub    eax,0x340
c000a2dc:	83 f8 7f             	cmp    eax,0x7f
c000a2df:	77 16                	ja     c000a2f7 <VAS::VAS(bool)+0x127>
c000a2e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2e5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a2e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a2ec:	c1 e2 02             	shl    edx,0x2
c000a2ef:	01 d0                	add    eax,edx
c000a2f1:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a2f7:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a2fc:	e9 78 ff ff ff       	jmp    c000a279 <VAS::VAS(bool)+0xa9>
c000a301:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a306:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a30c:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a312:	83 e0 10             	and    eax,0x10
c000a315:	0f b6 c0             	movzx  eax,al
c000a318:	85 c0                	test   eax,eax
c000a31a:	74 07                	je     c000a323 <VAS::VAS(bool)+0x153>
c000a31c:	b8 03 41 00 00       	mov    eax,0x4103
c000a321:	eb 05                	jmp    c000a328 <VAS::VAS(bool)+0x158>
c000a323:	b8 03 40 00 00       	mov    eax,0x4003
c000a328:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a32c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a32f:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a335:	89 02                	mov    DWORD PTR [edx],eax
c000a337:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a33c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a342:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a348:	83 ec 08             	sub    esp,0x8
c000a34b:	50                   	push   eax
c000a34c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a350:	e8 91 fc ff ff       	call   c0009fe6 <VAS::setCPUSpecific(unsigned long)>
c000a355:	83 c4 10             	add    esp,0x10
c000a358:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a35c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a35f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a364:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a36a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a370:	83 e0 10             	and    eax,0x10
c000a373:	0f b6 c0             	movzx  eax,al
c000a376:	85 c0                	test   eax,eax
c000a378:	74 07                	je     c000a381 <VAS::VAS(bool)+0x1b1>
c000a37a:	b8 00 01 00 00       	mov    eax,0x100
c000a37f:	eb 05                	jmp    c000a386 <VAS::VAS(bool)+0x1b6>
c000a381:	b8 00 00 00 00       	mov    eax,0x0
c000a386:	09 c2                	or     edx,eax
c000a388:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a38c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a38f:	05 fc 0f 00 00       	add    eax,0xffc
c000a394:	83 ca 03             	or     edx,0x3
c000a397:	89 10                	mov    DWORD PTR [eax],edx
c000a399:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a39e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3a4:	83 ec 0c             	sub    esp,0xc
c000a3a7:	50                   	push   eax
c000a3a8:	e8 9d 1c 00 00       	call   c000c04a <Device::getName()>
c000a3ad:	83 c4 10             	add    esp,0x10
c000a3b0:	83 ec 08             	sub    esp,0x8
c000a3b3:	68 8f ff 01 c0       	push   0xc001ff8f
c000a3b8:	50                   	push   eax
c000a3b9:	e8 92 63 ff ff       	call   c0000750 <strcmp>
c000a3be:	83 c4 10             	add    esp,0x10
c000a3c1:	85 c0                	test   eax,eax
c000a3c3:	0f 94 c0             	sete   al
c000a3c6:	0f b6 c0             	movzx  eax,al
c000a3c9:	85 c0                	test   eax,eax
c000a3cb:	0f 84 8b 00 00 00    	je     c000a45c <VAS::VAS(bool)+0x28c>
c000a3d1:	fa                   	cli    
c000a3d2:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a3d7:	83 c0 01             	add    eax,0x1
c000a3da:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a3df:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a3e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a3ea:	05 7c 09 00 00       	add    eax,0x97c
c000a3ef:	83 ec 0c             	sub    esp,0xc
c000a3f2:	50                   	push   eax
c000a3f3:	e8 9a d1 ff ff       	call   c0007592 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a3f8:	83 c4 10             	add    esp,0x10
c000a3fb:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a400:	89 c3                	mov    ebx,eax
c000a402:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000a407:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a40d:	05 7c 09 00 00       	add    eax,0x97c
c000a412:	83 ec 0c             	sub    esp,0xc
c000a415:	50                   	push   eax
c000a416:	e8 77 d1 ff ff       	call   c0007592 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a41b:	83 c4 10             	add    esp,0x10
c000a41e:	83 ec 08             	sub    esp,0x8
c000a421:	50                   	push   eax
c000a422:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a426:	e8 db f4 ff ff       	call   c0009906 <VAS::getPageTableEntry(unsigned long)>
c000a42b:	83 c4 10             	add    esp,0x10
c000a42e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a430:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a435:	6a 11                	push   0x11
c000a437:	53                   	push   ebx
c000a438:	50                   	push   eax
c000a439:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a43d:	e8 ae f8 ff ff       	call   c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a442:	83 c4 10             	add    esp,0x10
c000a445:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a44a:	83 e8 01             	sub    eax,0x1
c000a44d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a452:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a457:	85 c0                	test   eax,eax
c000a459:	75 01                	jne    c000a45c <VAS::VAS(bool)+0x28c>
c000a45b:	fb                   	sti    
c000a45c:	90                   	nop
c000a45d:	83 c4 28             	add    esp,0x28
c000a460:	5b                   	pop    ebx
c000a461:	c3                   	ret    

c000a462 <VAS::evict(unsigned long)>:
c000a462:	55                   	push   ebp
c000a463:	57                   	push   edi
c000a464:	56                   	push   esi
c000a465:	53                   	push   ebx
c000a466:	83 ec 1c             	sub    esp,0x1c
c000a469:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a46d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a471:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a475:	e8 ed f2 ff ff       	call   c0009767 <Virt::allocateSwapfilePage()>
c000a47a:	89 c7                	mov    edi,eax
c000a47c:	a1 4c 1e 02 c0       	mov    eax,ds:0xc0021e4c
c000a481:	85 c0                	test   eax,eax
c000a483:	7e 40                	jle    c000a4c5 <VAS::evict(unsigned long)+0x63>
c000a485:	89 ee                	mov    esi,ebp
c000a487:	31 db                	xor    ebx,ebx
c000a489:	83 ec 0c             	sub    esp,0xc
c000a48c:	57                   	push   edi
c000a48d:	e8 bf f2 ff ff       	call   c0009751 <Virt::swapIDToSector(unsigned long)>
c000a492:	89 34 24             	mov    DWORD PTR [esp],esi
c000a495:	01 d8                	add    eax,ebx
c000a497:	6a 01                	push   0x1
c000a499:	31 d2                	xor    edx,edx
c000a49b:	83 c3 01             	add    ebx,0x1
c000a49e:	52                   	push   edx
c000a49f:	81 c6 00 02 00 00    	add    esi,0x200
c000a4a5:	50                   	push   eax
c000a4a6:	0f be 05 58 1e 02 c0 	movsx  eax,BYTE PTR ds:0xc0021e58
c000a4ad:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a4b4:	50                   	push   eax
c000a4b5:	e8 4a 2d 00 00       	call   c000d204 <LogicalDisk::write(unsigned long long, int, void*)>
c000a4ba:	83 c4 20             	add    esp,0x20
c000a4bd:	39 1d 4c 1e 02 c0    	cmp    DWORD PTR ds:0xc0021e4c,ebx
c000a4c3:	7f c4                	jg     c000a489 <VAS::evict(unsigned long)+0x27>
c000a4c5:	83 ec 08             	sub    esp,0x8
c000a4c8:	c1 e7 0b             	shl    edi,0xb
c000a4cb:	55                   	push   ebp
c000a4cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4d0:	50                   	push   eax
c000a4d1:	e8 30 f4 ff ff       	call   c0009906 <VAS::getPageTableEntry(unsigned long)>
c000a4d6:	8b 10                	mov    edx,DWORD PTR [eax]
c000a4d8:	89 d1                	mov    ecx,edx
c000a4da:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a4e0:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a4e6:	09 cf                	or     edi,ecx
c000a4e8:	89 38                	mov    DWORD PTR [eax],edi
c000a4ea:	89 14 24             	mov    DWORD PTR [esp],edx
c000a4ed:	8b 0d a8 4f 02 c0    	mov    ecx,DWORD PTR ds:0xc0024fa8
c000a4f3:	83 c1 01             	add    ecx,0x1
c000a4f6:	89 0d a8 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa8,ecx
c000a4fc:	e8 35 d8 ff ff       	call   c0007d36 <Phys::freePage(unsigned long)>
c000a501:	0f 20 d8             	mov    eax,cr3
c000a504:	0f 22 d8             	mov    cr3,eax
c000a507:	a1 a4 4f 02 c0       	mov    eax,ds:0xc0024fa4
c000a50c:	c7 44 24 40 9d ff 01 c0 	mov    DWORD PTR [esp+0x40],0xc001ff9d
c000a514:	8d 50 01             	lea    edx,[eax+0x1]
c000a517:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a51b:	89 15 a4 4f 02 c0    	mov    DWORD PTR ds:0xc0024fa4,edx
c000a521:	83 c4 2c             	add    esp,0x2c
c000a524:	5b                   	pop    ebx
c000a525:	5e                   	pop    esi
c000a526:	5f                   	pop    edi
c000a527:	5d                   	pop    ebp
c000a528:	e9 55 04 00 00       	jmp    c000a982 <Dbg::kprintf(char const*, ...)>
c000a52d:	90                   	nop

c000a52e <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a52e:	55                   	push   ebp
c000a52f:	57                   	push   edi
c000a530:	56                   	push   esi
c000a531:	53                   	push   ebx
c000a532:	83 ec 14             	sub    esp,0x14
c000a535:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a539:	53                   	push   ebx
c000a53a:	68 ae ff 01 c0       	push   0xc001ffae
c000a53f:	e8 3e 04 00 00       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c000a544:	83 c4 10             	add    esp,0x10
c000a547:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a54d:	74 21                	je     c000a570 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a54f:	83 ec 08             	sub    esp,0x8
c000a552:	53                   	push   ebx
c000a553:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000a557:	51                   	push   ecx
c000a558:	e8 a9 f3 ff ff       	call   c0009906 <VAS::getPageTableEntry(unsigned long)>
c000a55d:	83 c4 10             	add    esp,0x10
c000a560:	89 c6                	mov    esi,eax
c000a562:	85 c0                	test   eax,eax
c000a564:	74 0a                	je     c000a570 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a566:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a568:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a56e:	74 0a                	je     c000a57a <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a570:	31 c0                	xor    eax,eax
c000a572:	83 c4 0c             	add    esp,0xc
c000a575:	5b                   	pop    ebx
c000a576:	5e                   	pop    esi
c000a577:	5f                   	pop    edi
c000a578:	5d                   	pop    ebp
c000a579:	c3                   	ret    
c000a57a:	e8 20 d8 ff ff       	call   c0007d9f <Phys::allocatePage()>
c000a57f:	c1 ed 0b             	shr    ebp,0xb
c000a582:	8b 16                	mov    edx,DWORD PTR [esi]
c000a584:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a58a:	09 c2                	or     edx,eax
c000a58c:	81 ca 01 08 00 00    	or     edx,0x801
c000a592:	89 16                	mov    DWORD PTR [esi],edx
c000a594:	8b 15 4c 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021e4c
c000a59a:	85 d2                	test   edx,edx
c000a59c:	7e 40                	jle    c000a5de <VAS::tryLoadBackOffDisk(unsigned long)+0xb0>
c000a59e:	89 df                	mov    edi,ebx
c000a5a0:	31 f6                	xor    esi,esi
c000a5a2:	83 ec 0c             	sub    esp,0xc
c000a5a5:	55                   	push   ebp
c000a5a6:	e8 a6 f1 ff ff       	call   c0009751 <Virt::swapIDToSector(unsigned long)>
c000a5ab:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a5ae:	01 f0                	add    eax,esi
c000a5b0:	6a 01                	push   0x1
c000a5b2:	31 d2                	xor    edx,edx
c000a5b4:	83 c6 01             	add    esi,0x1
c000a5b7:	52                   	push   edx
c000a5b8:	81 c7 00 02 00 00    	add    edi,0x200
c000a5be:	50                   	push   eax
c000a5bf:	0f be 05 58 1e 02 c0 	movsx  eax,BYTE PTR ds:0xc0021e58
c000a5c6:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c000a5cd:	50                   	push   eax
c000a5ce:	e8 c5 2b 00 00       	call   c000d198 <LogicalDisk::read(unsigned long long, int, void*)>
c000a5d3:	83 c4 20             	add    esp,0x20
c000a5d6:	39 35 4c 1e 02 c0    	cmp    DWORD PTR ds:0xc0021e4c,esi
c000a5dc:	7f c4                	jg     c000a5a2 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a5de:	83 ec 04             	sub    esp,0x4
c000a5e1:	a1 a8 4f 02 c0       	mov    eax,ds:0xc0024fa8
c000a5e6:	83 e8 01             	sub    eax,0x1
c000a5e9:	50                   	push   eax
c000a5ea:	a3 a8 4f 02 c0       	mov    ds:0xc0024fa8,eax
c000a5ef:	53                   	push   ebx
c000a5f0:	68 c1 ff 01 c0       	push   0xc001ffc1
c000a5f5:	e8 88 03 00 00       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c000a5fa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a5fd:	e8 2c f1 ff ff       	call   c000972e <Virt::freeSwapfilePage(unsigned long)>
c000a602:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000a607:	83 c4 10             	add    esp,0x10
c000a60a:	83 e8 01             	sub    eax,0x1
c000a60d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000a612:	85 c0                	test   eax,eax
c000a614:	75 01                	jne    c000a617 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c000a616:	fb                   	sti    
c000a617:	0f 20 d8             	mov    eax,cr3
c000a61a:	0f 22 d8             	mov    cr3,eax
c000a61d:	b0 01                	mov    al,0x1
c000a61f:	e9 4e ff ff ff       	jmp    c000a572 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a624 <VAS::scanForEviction()>:
c000a624:	57                   	push   edi
c000a625:	31 ff                	xor    edi,edi
c000a627:	56                   	push   esi
c000a628:	53                   	push   ebx
c000a629:	83 ec 10             	sub    esp,0x10
c000a62c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a630:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a633:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a639:	75 0e                	jne    c000a649 <VAS::scanForEviction()+0x25>
c000a63b:	89 da                	mov    edx,ebx
c000a63d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a640:	c1 ea 16             	shr    edx,0x16
c000a643:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a647:	74 50                	je     c000a699 <VAS::scanForEviction()+0x75>
c000a649:	53                   	push   ebx
c000a64a:	56                   	push   esi
c000a64b:	e8 b6 f2 ff ff       	call   c0009906 <VAS::getPageTableEntry(unsigned long)>
c000a650:	5a                   	pop    edx
c000a651:	8b 10                	mov    edx,DWORD PTR [eax]
c000a653:	59                   	pop    ecx
c000a654:	89 d1                	mov    ecx,edx
c000a656:	81 e1 01 08 00 00    	and    ecx,0x801
c000a65c:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a662:	74 40                	je     c000a6a4 <VAS::scanForEviction()+0x80>
c000a664:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a66a:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a670:	76 2d                	jbe    c000a69f <VAS::scanForEviction()+0x7b>
c000a672:	83 c7 01             	add    edi,0x1
c000a675:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a67c:	83 ff 03             	cmp    edi,0x3
c000a67f:	74 32                	je     c000a6b3 <VAS::scanForEviction()+0x8f>
c000a681:	31 db                	xor    ebx,ebx
c000a683:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a689:	75 be                	jne    c000a649 <VAS::scanForEviction()+0x25>
c000a68b:	89 da                	mov    edx,ebx
c000a68d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a690:	c1 ea 16             	shr    edx,0x16
c000a693:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a697:	75 b0                	jne    c000a649 <VAS::scanForEviction()+0x25>
c000a699:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a69f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a6a2:	eb 8f                	jmp    c000a633 <VAS::scanForEviction()+0xf>
c000a6a4:	f6 c2 20             	test   dl,0x20
c000a6a7:	74 13                	je     c000a6bc <VAS::scanForEviction()+0x98>
c000a6a9:	83 e2 df             	and    edx,0xffffffdf
c000a6ac:	89 10                	mov    DWORD PTR [eax],edx
c000a6ae:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a6b1:	eb b1                	jmp    c000a664 <VAS::scanForEviction()+0x40>
c000a6b3:	83 c4 10             	add    esp,0x10
c000a6b6:	31 c0                	xor    eax,eax
c000a6b8:	5b                   	pop    ebx
c000a6b9:	5e                   	pop    esi
c000a6ba:	5f                   	pop    edi
c000a6bb:	c3                   	ret    
c000a6bc:	83 ec 08             	sub    esp,0x8
c000a6bf:	89 d0                	mov    eax,edx
c000a6c1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a6c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a6ca:	53                   	push   ebx
c000a6cb:	68 d6 ff 01 c0       	push   0xc001ffd6
c000a6d0:	e8 ad 02 00 00       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c000a6d5:	58                   	pop    eax
c000a6d6:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a6d9:	5a                   	pop    edx
c000a6da:	51                   	push   ecx
c000a6db:	56                   	push   esi
c000a6dc:	e8 81 fd ff ff       	call   c000a462 <VAS::evict(unsigned long)>
c000a6e1:	5b                   	pop    ebx
c000a6e2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a6e5:	5f                   	pop    edi
c000a6e6:	50                   	push   eax
c000a6e7:	68 ea ff 01 c0       	push   0xc001ffea
c000a6ec:	e8 91 02 00 00       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c000a6f1:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a6f4:	83 c4 10             	add    esp,0x10
c000a6f7:	05 00 10 00 00       	add    eax,0x1000
c000a6fc:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a6ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a703:	83 c4 10             	add    esp,0x10
c000a706:	5b                   	pop    ebx
c000a707:	5e                   	pop    esi
c000a708:	5f                   	pop    edi
c000a709:	c3                   	ret    

c000a70a <mapVASFirstTime>:
c000a70a:	55                   	push   ebp
c000a70b:	57                   	push   edi
c000a70c:	56                   	push   esi
c000a70d:	53                   	push   ebx
c000a70e:	83 ec 0c             	sub    esp,0xc
c000a711:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a716:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a719:	83 fa 01             	cmp    edx,0x1
c000a71c:	0f 84 cb 00 00 00    	je     c000a7ed <mapVASFirstTime+0xe3>
c000a722:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a725:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a728:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a72d:	c1 e5 15             	shl    ebp,0x15
c000a730:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a735:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a73b:	29 eb                	sub    ebx,ebp
c000a73d:	29 ef                	sub    edi,ebp
c000a73f:	e8 5b d6 ff ff       	call   c0007d9f <Phys::allocatePage()>
c000a744:	83 ec 0c             	sub    esp,0xc
c000a747:	68 03 04 00 00       	push   0x403
c000a74c:	6a 01                	push   0x1
c000a74e:	53                   	push   ebx
c000a74f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a755:	50                   	push   eax
c000a756:	56                   	push   esi
c000a757:	e8 a8 f8 ff ff       	call   c000a004 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75c:	83 c4 20             	add    esp,0x20
c000a75f:	39 fb                	cmp    ebx,edi
c000a761:	75 dc                	jne    c000a73f <mapVASFirstTime+0x35>
c000a763:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a768:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a76d:	29 eb                	sub    ebx,ebp
c000a76f:	29 ef                	sub    edi,ebp
c000a771:	e8 29 d6 ff ff       	call   c0007d9f <Phys::allocatePage()>
c000a776:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a77a:	83 fa 01             	cmp    edx,0x1
c000a77d:	19 d2                	sbb    edx,edx
c000a77f:	83 ec 0c             	sub    esp,0xc
c000a782:	83 e2 04             	and    edx,0x4
c000a785:	81 c2 03 04 00 00    	add    edx,0x403
c000a78b:	52                   	push   edx
c000a78c:	6a 01                	push   0x1
c000a78e:	53                   	push   ebx
c000a78f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a795:	50                   	push   eax
c000a796:	56                   	push   esi
c000a797:	e8 68 f8 ff ff       	call   c000a004 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a79c:	83 c4 20             	add    esp,0x20
c000a79f:	39 df                	cmp    edi,ebx
c000a7a1:	75 ce                	jne    c000a771 <mapVASFirstTime+0x67>
c000a7a3:	83 ec 0c             	sub    esp,0xc
c000a7a6:	bb 7c 40 02 c0       	mov    ebx,0xc002407c
c000a7ab:	6a 04                	push   0x4
c000a7ad:	81 eb 00 30 02 c0    	sub    ebx,0xc0023000
c000a7b3:	6a ff                	push   0xffffffff
c000a7b5:	c1 eb 0c             	shr    ebx,0xc
c000a7b8:	53                   	push   ebx
c000a7b9:	68 00 30 02 c0       	push   0xc0023000
c000a7be:	56                   	push   esi
c000a7bf:	e8 b2 f2 ff ff       	call   c0009a76 <VAS::reflagRange(unsigned long, int, int, int)>
c000a7c4:	83 c4 14             	add    esp,0x14
c000a7c7:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c000a7cc:	6a 04                	push   0x4
c000a7ce:	6a ff                	push   0xffffffff
c000a7d0:	53                   	push   ebx
c000a7d1:	68 00 30 02 c0       	push   0xc0023000
c000a7d6:	50                   	push   eax
c000a7d7:	e8 9a f2 ff ff       	call   c0009a76 <VAS::reflagRange(unsigned long, int, int, int)>
c000a7dc:	0f 20 d8             	mov    eax,cr3
c000a7df:	0f 22 d8             	mov    cr3,eax
c000a7e2:	83 c4 20             	add    esp,0x20
c000a7e5:	83 c4 0c             	add    esp,0xc
c000a7e8:	5b                   	pop    ebx
c000a7e9:	5e                   	pop    esi
c000a7ea:	5f                   	pop    edi
c000a7eb:	5d                   	pop    ebp
c000a7ec:	c3                   	ret    
c000a7ed:	83 ec 0c             	sub    esp,0xc
c000a7f0:	68 fd ff 01 c0       	push   0xc001fffd
c000a7f5:	e8 88 01 00 00       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c000a7fa:	83 c4 10             	add    esp,0x10
c000a7fd:	83 c4 0c             	add    esp,0xc
c000a800:	5b                   	pop    ebx
c000a801:	5e                   	pop    esi
c000a802:	5f                   	pop    edi
c000a803:	5d                   	pop    ebp
c000a804:	c3                   	ret    

c000a805 <__cxa_atexit>:
c000a805:	31 c0                	xor    eax,eax
c000a807:	c3                   	ret    

c000a808 <__cxa_finalize>:
c000a808:	c3                   	ret    

c000a809 <__stack_chk_fail>:
c000a809:	55                   	push   ebp
c000a80a:	89 e5                	mov    ebp,esp
c000a80c:	83 ec 10             	sub    esp,0x10
c000a80f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a812:	68 16 00 02 c0       	push   0xc0020016
c000a817:	e8 66 01 00 00       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c000a81c:	58                   	pop    eax
c000a81d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a820:	5a                   	pop    edx
c000a821:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a824:	68 16 00 02 c0       	push   0xc0020016
c000a829:	e8 54 01 00 00       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c000a82e:	c7 04 24 1e 00 02 c0 	mov    DWORD PTR [esp],0xc002001e
c000a835:	e8 25 60 00 00       	call   c001085f <KePanic(char const*)>
c000a83a:	83 c4 10             	add    esp,0x10
c000a83d:	c9                   	leave  
c000a83e:	c3                   	ret    

c000a83f <__cxa_pure_virtual>:
c000a83f:	83 ec 18             	sub    esp,0x18
c000a842:	68 36 00 02 c0       	push   0xc0020036
c000a847:	e8 13 60 00 00       	call   c001085f <KePanic(char const*)>
c000a84c:	83 c4 1c             	add    esp,0x1c
c000a84f:	c3                   	ret    

c000a850 <operator new[](unsigned long)>:
c000a850:	e9 45 d2 ff ff       	jmp    c0007a9a <malloc>

c000a855 <operator delete(void*, unsigned long)>:
c000a855:	e9 60 d2 ff ff       	jmp    c0007aba <rfree>

c000a85a <operator delete[](void*)>:
c000a85a:	e9 5b d2 ff ff       	jmp    c0007aba <rfree>

c000a85f <operator delete[](void*, unsigned long)>:
c000a85f:	e9 56 d2 ff ff       	jmp    c0007aba <rfree>

c000a864 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a864:	55                   	push   ebp
c000a865:	57                   	push   edi
c000a866:	56                   	push   esi
c000a867:	be 8b fc 01 c0       	mov    esi,0xc001fc8b
c000a86c:	53                   	push   ebx
c000a86d:	83 ec 20             	sub    esp,0x20
c000a870:	a0 8a fc 01 c0       	mov    al,ds:0xc001fc8a
c000a875:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a879:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a87d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a881:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a885:	b8 10 00 00 00       	mov    eax,0x10
c000a88a:	f7 c7 02 00 00 00    	test   edi,0x2
c000a890:	75 60                	jne    c000a8f2 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a892:	89 c1                	mov    ecx,eax
c000a894:	c1 e9 02             	shr    ecx,0x2
c000a897:	fc                   	cld    
c000a898:	31 d2                	xor    edx,edx
c000a89a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a89c:	a8 02                	test   al,0x2
c000a89e:	74 0b                	je     c000a8ab <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a8a0:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8a3:	66 89 17             	mov    WORD PTR [edi],dx
c000a8a6:	ba 02 00 00 00       	mov    edx,0x2
c000a8ab:	a8 01                	test   al,0x1
c000a8ad:	74 06                	je     c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a8af:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a8b2:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a8b5:	89 ee                	mov    esi,ebp
c000a8b7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a8bb:	eb 02                	jmp    c000a8bf <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a8bd:	89 c6                	mov    esi,eax
c000a8bf:	31 d2                	xor    edx,edx
c000a8c1:	83 c1 01             	add    ecx,0x1
c000a8c4:	89 f0                	mov    eax,esi
c000a8c6:	f7 f3                	div    ebx
c000a8c8:	39 de                	cmp    esi,ebx
c000a8ca:	73 f1                	jae    c000a8bd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a8cc:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a8cf:	eb 02                	jmp    c000a8d3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a8d1:	89 c5                	mov    ebp,eax
c000a8d3:	31 d2                	xor    edx,edx
c000a8d5:	83 e9 01             	sub    ecx,0x1
c000a8d8:	89 e8                	mov    eax,ebp
c000a8da:	f7 f3                	div    ebx
c000a8dc:	39 dd                	cmp    ebp,ebx
c000a8de:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8e2:	88 11                	mov    BYTE PTR [ecx],dl
c000a8e4:	73 eb                	jae    c000a8d1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ea:	83 c4 20             	add    esp,0x20
c000a8ed:	5b                   	pop    ebx
c000a8ee:	5e                   	pop    esi
c000a8ef:	5f                   	pop    edi
c000a8f0:	5d                   	pop    ebp
c000a8f1:	c3                   	ret    
c000a8f2:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8f5:	83 c7 02             	add    edi,0x2
c000a8f8:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8fc:	83 c6 02             	add    esi,0x2
c000a8ff:	83 e8 02             	sub    eax,0x2
c000a902:	eb 8e                	jmp    c000a892 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a904 <Dbg::logc(char)>:
c000a904:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a908:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a90f:	75 12                	jne    c000a923 <Dbg::logc(char)+0x1f>
c000a911:	ba fd 03 00 00       	mov    edx,0x3fd
c000a916:	ec                   	in     al,dx
c000a917:	a8 20                	test   al,0x20
c000a919:	74 fb                	je     c000a916 <Dbg::logc(char)+0x12>
c000a91b:	ba f8 03 00 00       	mov    edx,0x3f8
c000a920:	88 c8                	mov    al,cl
c000a922:	ee                   	out    dx,al
c000a923:	c3                   	ret    

c000a924 <Dbg::logs(char*)>:
c000a924:	53                   	push   ebx
c000a925:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a929:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a92c:	85 c0                	test   eax,eax
c000a92e:	74 11                	je     c000a941 <Dbg::logs(char*)+0x1d>
c000a930:	83 c3 01             	add    ebx,0x1
c000a933:	50                   	push   eax
c000a934:	e8 cb ff ff ff       	call   c000a904 <Dbg::logc(char)>
c000a939:	58                   	pop    eax
c000a93a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a93d:	85 c0                	test   eax,eax
c000a93f:	75 ef                	jne    c000a930 <Dbg::logs(char*)+0xc>
c000a941:	5b                   	pop    ebx
c000a942:	c3                   	ret    

c000a943 <Dbg::logWriteInt(unsigned int)>:
c000a943:	83 ec 10             	sub    esp,0x10
c000a946:	6a 0a                	push   0xa
c000a948:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a94c:	50                   	push   eax
c000a94d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a951:	50                   	push   eax
c000a952:	e8 0d ff ff ff       	call   c000a864 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a957:	50                   	push   eax
c000a958:	e8 c7 ff ff ff       	call   c000a924 <Dbg::logs(char*)>
c000a95d:	83 c4 20             	add    esp,0x20
c000a960:	c3                   	ret    

c000a961 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a961:	83 ec 10             	sub    esp,0x10
c000a964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a968:	50                   	push   eax
c000a969:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a96d:	50                   	push   eax
c000a96e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a972:	52                   	push   edx
c000a973:	e8 ec fe ff ff       	call   c000a864 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a978:	50                   	push   eax
c000a979:	e8 a6 ff ff ff       	call   c000a924 <Dbg::logs(char*)>
c000a97e:	83 c4 20             	add    esp,0x20
c000a981:	c3                   	ret    

c000a982 <Dbg::kprintf(char const*, ...)>:
c000a982:	55                   	push   ebp
c000a983:	57                   	push   edi
c000a984:	56                   	push   esi
c000a985:	53                   	push   ebx
c000a986:	83 ec 0c             	sub    esp,0xc
c000a989:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a98d:	f6 05 d0 4e 02 c0 10 	test   BYTE PTR ds:0xc0024ed0,0x10
c000a994:	74 08                	je     c000a99e <Dbg::kprintf(char const*, ...)+0x1c>
c000a996:	83 c4 0c             	add    esp,0xc
c000a999:	5b                   	pop    ebx
c000a99a:	5e                   	pop    esi
c000a99b:	5f                   	pop    edi
c000a99c:	5d                   	pop    ebp
c000a99d:	c3                   	ret    
c000a99e:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a9a2:	31 ff                	xor    edi,edi
c000a9a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9a8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a9ab:	85 c0                	test   eax,eax
c000a9ad:	74 e7                	je     c000a996 <Dbg::kprintf(char const*, ...)+0x14>
c000a9af:	8d 77 01             	lea    esi,[edi+0x1]
c000a9b2:	83 f8 25             	cmp    eax,0x25
c000a9b5:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9b8:	75 47                	jne    c000aa01 <Dbg::kprintf(char const*, ...)+0x7f>
c000a9ba:	83 c7 02             	add    edi,0x2
c000a9bd:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a9c0:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a9c3:	83 e8 25             	sub    eax,0x25
c000a9c6:	0f b6 c0             	movzx  eax,al
c000a9c9:	83 f8 53             	cmp    eax,0x53
c000a9cc:	0f 87 ce 00 00 00    	ja     c000aaa0 <Dbg::kprintf(char const*, ...)+0x11e>
c000a9d2:	ff 24 85 4c 00 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdffb4]
c000a9d9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9dd:	89 c8                	mov    eax,ecx
c000a9df:	83 c1 04             	add    ecx,0x4
c000a9e2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e6:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9e8:	55                   	push   ebp
c000a9e9:	e8 55 ff ff ff       	call   c000a943 <Dbg::logWriteInt(unsigned int)>
c000a9ee:	58                   	pop    eax
c000a9ef:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9f2:	85 c0                	test   eax,eax
c000a9f4:	74 a0                	je     c000a996 <Dbg::kprintf(char const*, ...)+0x14>
c000a9f6:	8d 77 01             	lea    esi,[edi+0x1]
c000a9f9:	83 f8 25             	cmp    eax,0x25
c000a9fc:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9ff:	74 b9                	je     c000a9ba <Dbg::kprintf(char const*, ...)+0x38>
c000aa01:	50                   	push   eax
c000aa02:	89 f7                	mov    edi,esi
c000aa04:	e8 fb fe ff ff       	call   c000a904 <Dbg::logc(char)>
c000aa09:	89 ee                	mov    esi,ebp
c000aa0b:	58                   	pop    eax
c000aa0c:	eb e1                	jmp    c000a9ef <Dbg::kprintf(char const*, ...)+0x6d>
c000aa0e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa12:	89 c8                	mov    eax,ecx
c000aa14:	83 c1 04             	add    ecx,0x4
c000aa17:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa19:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa1d:	50                   	push   eax
c000aa1e:	e8 01 ff ff ff       	call   c000a924 <Dbg::logs(char*)>
c000aa23:	58                   	pop    eax
c000aa24:	eb c9                	jmp    c000a9ef <Dbg::kprintf(char const*, ...)+0x6d>
c000aa26:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa2a:	89 d0                	mov    eax,edx
c000aa2c:	83 c2 04             	add    edx,0x4
c000aa2f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa33:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa35:	50                   	push   eax
c000aa36:	e8 08 ff ff ff       	call   c000a943 <Dbg::logWriteInt(unsigned int)>
c000aa3b:	58                   	pop    eax
c000aa3c:	eb b1                	jmp    c000a9ef <Dbg::kprintf(char const*, ...)+0x6d>
c000aa3e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa42:	89 d0                	mov    eax,edx
c000aa44:	83 c2 04             	add    edx,0x4
c000aa47:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa4e:	50                   	push   eax
c000aa4f:	e8 b0 fe ff ff       	call   c000a904 <Dbg::logc(char)>
c000aa54:	58                   	pop    eax
c000aa55:	eb 98                	jmp    c000a9ef <Dbg::kprintf(char const*, ...)+0x6d>
c000aa57:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa5b:	89 c8                	mov    eax,ecx
c000aa5d:	83 c1 04             	add    ecx,0x4
c000aa60:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa64:	6a 10                	push   0x10
c000aa66:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa68:	51                   	push   ecx
c000aa69:	e8 f3 fe ff ff       	call   c000a961 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa6e:	5d                   	pop    ebp
c000aa6f:	58                   	pop    eax
c000aa70:	e9 7a ff ff ff       	jmp    c000a9ef <Dbg::kprintf(char const*, ...)+0x6d>
c000aa75:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa79:	89 d0                	mov    eax,edx
c000aa7b:	83 c2 08             	add    edx,0x8
c000aa7e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa82:	6a 10                	push   0x10
c000aa84:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa86:	50                   	push   eax
c000aa87:	e8 d5 fe ff ff       	call   c000a961 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa8c:	58                   	pop    eax
c000aa8d:	5a                   	pop    edx
c000aa8e:	e9 5c ff ff ff       	jmp    c000a9ef <Dbg::kprintf(char const*, ...)+0x6d>
c000aa93:	6a 25                	push   0x25
c000aa95:	e8 6a fe ff ff       	call   c000a904 <Dbg::logc(char)>
c000aa9a:	5a                   	pop    edx
c000aa9b:	e9 4f ff ff ff       	jmp    c000a9ef <Dbg::kprintf(char const*, ...)+0x6d>
c000aaa0:	6a 25                	push   0x25
c000aaa2:	e8 5d fe ff ff       	call   c000a904 <Dbg::logc(char)>
c000aaa7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aaab:	50                   	push   eax
c000aaac:	e8 53 fe ff ff       	call   c000a904 <Dbg::logc(char)>
c000aab1:	5a                   	pop    edx
c000aab2:	59                   	pop    ecx
c000aab3:	e9 37 ff ff ff       	jmp    c000a9ef <Dbg::kprintf(char const*, ...)+0x6d>

c000aab8 <File::read(unsigned long long, void*, int*)>:
c000aab8:	53                   	push   ebx
c000aab9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aabd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000aac1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000aac8:	83 f8 19             	cmp    eax,0x19
c000aacb:	77 35                	ja     c000ab02 <File::read(unsigned long long, void*, int*)+0x4a>
c000aacd:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000aad4:	85 c0                	test   eax,eax
c000aad6:	74 2a                	je     c000ab02 <File::read(unsigned long long, void*, int*)+0x4a>
c000aad8:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000aade:	85 c0                	test   eax,eax
c000aae0:	74 20                	je     c000ab02 <File::read(unsigned long long, void*, int*)+0x4a>
c000aae2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000aae6:	74 21                	je     c000ab09 <File::read(unsigned long long, void*, int*)+0x51>
c000aae8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aaea:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aaee:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000aaf4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaf8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aafc:	5b                   	pop    ebx
c000aafd:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ab00:	ff e0                	jmp    eax
c000ab02:	b8 0b 00 00 00       	mov    eax,0xb
c000ab07:	eb 05                	jmp    c000ab0e <File::read(unsigned long long, void*, int*)+0x56>
c000ab09:	b8 05 00 00 00       	mov    eax,0x5
c000ab0e:	5b                   	pop    ebx
c000ab0f:	c3                   	ret    

c000ab10 <File::write(unsigned long long, void*, int*)>:
c000ab10:	53                   	push   ebx
c000ab11:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab15:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab19:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab20:	83 f8 19             	cmp    eax,0x19
c000ab23:	77 35                	ja     c000ab5a <File::write(unsigned long long, void*, int*)+0x4a>
c000ab25:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab2c:	85 c0                	test   eax,eax
c000ab2e:	74 2a                	je     c000ab5a <File::write(unsigned long long, void*, int*)+0x4a>
c000ab30:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab36:	85 c0                	test   eax,eax
c000ab38:	74 20                	je     c000ab5a <File::write(unsigned long long, void*, int*)+0x4a>
c000ab3a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab3e:	74 21                	je     c000ab61 <File::write(unsigned long long, void*, int*)+0x51>
c000ab40:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab42:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab46:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab54:	5b                   	pop    ebx
c000ab55:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000ab58:	ff e0                	jmp    eax
c000ab5a:	b8 0b 00 00 00       	mov    eax,0xb
c000ab5f:	eb 05                	jmp    c000ab66 <File::write(unsigned long long, void*, int*)+0x56>
c000ab61:	b8 05 00 00 00       	mov    eax,0x5
c000ab66:	5b                   	pop    ebx
c000ab67:	c3                   	ret    

c000ab68 <Directory::read(unsigned long long, void*, int*)>:
c000ab68:	53                   	push   ebx
c000ab69:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab6d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ab71:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ab78:	83 f8 19             	cmp    eax,0x19
c000ab7b:	77 35                	ja     c000abb2 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab7d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000ab84:	85 c0                	test   eax,eax
c000ab86:	74 2a                	je     c000abb2 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab88:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ab8e:	85 c0                	test   eax,eax
c000ab90:	74 20                	je     c000abb2 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000ab92:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ab96:	74 21                	je     c000abb9 <Directory::read(unsigned long long, void*, int*)+0x51>
c000ab98:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ab9a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab9e:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000aba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abac:	5b                   	pop    ebx
c000abad:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000abb0:	ff e0                	jmp    eax
c000abb2:	b8 0b 00 00 00       	mov    eax,0xb
c000abb7:	eb 05                	jmp    c000abbe <Directory::read(unsigned long long, void*, int*)+0x56>
c000abb9:	b8 05 00 00 00       	mov    eax,0x5
c000abbe:	5b                   	pop    ebx
c000abbf:	c3                   	ret    

c000abc0 <Directory::write(unsigned long long, void*, int*)>:
c000abc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abc4:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000abcb:	b8 0b 00 00 00       	mov    eax,0xb
c000abd0:	83 fa 19             	cmp    edx,0x19
c000abd3:	77 18                	ja     c000abed <Directory::write(unsigned long long, void*, int*)+0x2d>
c000abd5:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000abdc:	85 d2                	test   edx,edx
c000abde:	74 0d                	je     c000abed <Directory::write(unsigned long long, void*, int*)+0x2d>
c000abe0:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000abe7:	19 c0                	sbb    eax,eax
c000abe9:	83 e0 0a             	and    eax,0xa
c000abec:	40                   	inc    eax
c000abed:	c3                   	ret    

c000abee <File::isAtty()>:
c000abee:	31 c0                	xor    eax,eax
c000abf0:	c3                   	ret    
c000abf1:	90                   	nop

c000abf2 <Directory::isAtty()>:
c000abf2:	31 c0                	xor    eax,eax
c000abf4:	c3                   	ret    
c000abf5:	90                   	nop

c000abf6 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000abf6:	b8 0a 00 00 00       	mov    eax,0xa
c000abfb:	c3                   	ret    

c000abfc <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000abfc:	b8 0a 00 00 00       	mov    eax,0xa
c000ac01:	c3                   	ret    

c000ac02 <Filesystem::allocateSwapfile(char const*, int)>:
c000ac02:	31 c0                	xor    eax,eax
c000ac04:	31 d2                	xor    edx,edx
c000ac06:	c3                   	ret    
c000ac07:	90                   	nop

c000ac08 <File::~File()>:
c000ac08:	83 ec 0c             	sub    esp,0xc
c000ac0b:	ba 0c 02 02 c0       	mov    edx,0xc002020c
c000ac10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac14:	89 10                	mov    DWORD PTR [eax],edx
c000ac16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac1a:	83 ec 0c             	sub    esp,0xc
c000ac1d:	50                   	push   eax
c000ac1e:	e8 7d e7 ff ff       	call   c00093a0 <UnixFile::~UnixFile()>
c000ac23:	83 c4 10             	add    esp,0x10
c000ac26:	90                   	nop
c000ac27:	83 c4 0c             	add    esp,0xc
c000ac2a:	c3                   	ret    
c000ac2b:	90                   	nop

c000ac2c <File::~File()>:
c000ac2c:	83 ec 0c             	sub    esp,0xc
c000ac2f:	83 ec 0c             	sub    esp,0xc
c000ac32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac36:	e8 cd ff ff ff       	call   c000ac08 <File::~File()>
c000ac3b:	83 c4 10             	add    esp,0x10
c000ac3e:	83 ec 08             	sub    esp,0x8
c000ac41:	68 14 01 00 00       	push   0x114
c000ac46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac4a:	e8 06 fc ff ff       	call   c000a855 <operator delete(void*, unsigned long)>
c000ac4f:	83 c4 10             	add    esp,0x10
c000ac52:	83 c4 0c             	add    esp,0xc
c000ac55:	c3                   	ret    

c000ac56 <Directory::~Directory()>:
c000ac56:	83 ec 0c             	sub    esp,0xc
c000ac59:	ba 28 02 02 c0       	mov    edx,0xc0020228
c000ac5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac62:	89 10                	mov    DWORD PTR [eax],edx
c000ac64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac68:	83 ec 0c             	sub    esp,0xc
c000ac6b:	50                   	push   eax
c000ac6c:	e8 2f e7 ff ff       	call   c00093a0 <UnixFile::~UnixFile()>
c000ac71:	83 c4 10             	add    esp,0x10
c000ac74:	90                   	nop
c000ac75:	83 c4 0c             	add    esp,0xc
c000ac78:	c3                   	ret    
c000ac79:	90                   	nop

c000ac7a <Directory::~Directory()>:
c000ac7a:	83 ec 0c             	sub    esp,0xc
c000ac7d:	83 ec 0c             	sub    esp,0xc
c000ac80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac84:	e8 cd ff ff ff       	call   c000ac56 <Directory::~Directory()>
c000ac89:	83 c4 10             	add    esp,0x10
c000ac8c:	83 ec 08             	sub    esp,0x8
c000ac8f:	68 14 01 00 00       	push   0x114
c000ac94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac98:	e8 b8 fb ff ff       	call   c000a855 <operator delete(void*, unsigned long)>
c000ac9d:	83 c4 10             	add    esp,0x10
c000aca0:	83 c4 0c             	add    esp,0xc
c000aca3:	c3                   	ret    

c000aca4 <Filesystem::Filesystem()>:
c000aca4:	ba a4 01 02 c0       	mov    edx,0xc00201a4
c000aca9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acad:	89 10                	mov    DWORD PTR [eax],edx
c000acaf:	8b 15 b4 4f 02 c0    	mov    edx,DWORD PTR ds:0xc0024fb4
c000acb5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acb9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000acbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acc0:	a3 b4 4f 02 c0       	mov    ds:0xc0024fb4,eax
c000acc5:	90                   	nop
c000acc6:	c3                   	ret    
c000acc7:	90                   	nop

c000acc8 <Filesystem::~Filesystem()>:
c000acc8:	ba a4 01 02 c0       	mov    edx,0xc00201a4
c000accd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acd1:	89 10                	mov    DWORD PTR [eax],edx
c000acd3:	90                   	nop
c000acd4:	c3                   	ret    
c000acd5:	90                   	nop

c000acd6 <Filesystem::~Filesystem()>:
c000acd6:	83 ec 0c             	sub    esp,0xc
c000acd9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000acdd:	e8 e6 ff ff ff       	call   c000acc8 <Filesystem::~Filesystem()>
c000ace2:	83 c4 04             	add    esp,0x4
c000ace5:	83 ec 08             	sub    esp,0x8
c000ace8:	6a 08                	push   0x8
c000acea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acee:	e8 62 fb ff ff       	call   c000a855 <operator delete(void*, unsigned long)>
c000acf3:	83 c4 10             	add    esp,0x10
c000acf6:	83 c4 0c             	add    esp,0xc
c000acf9:	c3                   	ret    

c000acfa <Fs::getcwd(Process*, char*, int)>:
c000acfa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acfe:	31 c0                	xor    eax,eax
c000ad00:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ad03:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ad07:	7d 15                	jge    c000ad1e <Fs::getcwd(Process*, char*, int)+0x24>
c000ad09:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ad0d:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ad14:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ad17:	84 c9                	test   cl,cl
c000ad19:	74 06                	je     c000ad21 <Fs::getcwd(Process*, char*, int)+0x27>
c000ad1b:	40                   	inc    eax
c000ad1c:	eb e2                	jmp    c000ad00 <Fs::getcwd(Process*, char*, int)+0x6>
c000ad1e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ad21:	31 c0                	xor    eax,eax
c000ad23:	c3                   	ret    

c000ad24 <Fs::initVFS()>:
c000ad24:	83 ec 18             	sub    esp,0x18
c000ad27:	6a 08                	push   0x8
c000ad29:	e8 6c cd ff ff       	call   c0007a9a <malloc>
c000ad2e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad31:	e8 5a dd 00 00       	call   c0018a90 <FAT::FAT()>
c000ad36:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ad3d:	e8 58 cd ff ff       	call   c0007a9a <malloc>
c000ad42:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad45:	e8 6c ec 00 00       	call   c00199b6 <ISO9660::ISO9660()>
c000ad4a:	83 c4 1c             	add    esp,0x1c
c000ad4d:	c3                   	ret    

c000ad4e <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ad4e:	55                   	push   ebp
c000ad4f:	57                   	push   edi
c000ad50:	56                   	push   esi
c000ad51:	53                   	push   ebx
c000ad52:	81 ec 10 04 00 00    	sub    esp,0x410
c000ad58:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000ad5f:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ad66:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000ad6d:	68 00 04 00 00       	push   0x400
c000ad72:	6a 00                	push   0x0
c000ad74:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ad78:	56                   	push   esi
c000ad79:	e8 72 57 ff ff       	call   c00004f0 <memset>
c000ad7e:	83 c4 10             	add    esp,0x10
c000ad81:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ad85:	75 0b                	jne    c000ad92 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ad87:	50                   	push   eax
c000ad88:	50                   	push   eax
c000ad89:	57                   	push   edi
c000ad8a:	56                   	push   esi
c000ad8b:	e8 b0 58 ff ff       	call   c0000640 <strcpy>
c000ad90:	eb 44                	jmp    c000add6 <Fs::standardiseFiles(char*, char const*, char const*)+0x88>
c000ad92:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ad95:	83 f8 5c             	cmp    eax,0x5c
c000ad98:	74 05                	je     c000ad9f <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000ad9a:	83 f8 2f             	cmp    eax,0x2f
c000ad9d:	75 18                	jne    c000adb7 <Fs::standardiseFiles(char*, char const*, char const*)+0x69>
c000ad9f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ada2:	3c 60                	cmp    al,0x60
c000ada4:	7e 03                	jle    c000ada9 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000ada6:	83 e8 20             	sub    eax,0x20
c000ada9:	88 04 24             	mov    BYTE PTR [esp],al
c000adac:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000adb3:	50                   	push   eax
c000adb4:	50                   	push   eax
c000adb5:	eb 18                	jmp    c000adcf <Fs::standardiseFiles(char*, char const*, char const*)+0x81>
c000adb7:	50                   	push   eax
c000adb8:	50                   	push   eax
c000adb9:	55                   	push   ebp
c000adba:	56                   	push   esi
c000adbb:	e8 80 58 ff ff       	call   c0000640 <strcpy>
c000adc0:	5a                   	pop    edx
c000adc1:	59                   	pop    ecx
c000adc2:	68 fb 10 02 c0       	push   0xc00210fb
c000adc7:	56                   	push   esi
c000adc8:	e8 73 5a ff ff       	call   c0000840 <strcat>
c000adcd:	5d                   	pop    ebp
c000adce:	58                   	pop    eax
c000adcf:	57                   	push   edi
c000add0:	56                   	push   esi
c000add1:	e8 6a 5a ff ff       	call   c0000840 <strcat>
c000add6:	83 c4 10             	add    esp,0x10
c000add9:	8a 04 24             	mov    al,BYTE PTR [esp]
c000addc:	3c 60                	cmp    al,0x60
c000adde:	7e 03                	jle    c000ade3 <Fs::standardiseFiles(char*, char const*, char const*)+0x95>
c000ade0:	83 e8 20             	sub    eax,0x20
c000ade3:	88 04 24             	mov    BYTE PTR [esp],al
c000ade6:	88 03                	mov    BYTE PTR [ebx],al
c000ade8:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000adef:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000adf5:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000adf9:	bf 03 00 00 00       	mov    edi,0x3
c000adfe:	b8 03 00 00 00       	mov    eax,0x3
c000ae03:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000ae07:	89 ea                	mov    edx,ebp
c000ae09:	85 ed                	test   ebp,ebp
c000ae0b:	0f 84 97 00 00 00    	je     c000aea8 <Fs::standardiseFiles(char*, char const*, char const*)+0x15a>
c000ae11:	8d 4f 01             	lea    ecx,[edi+0x1]
c000ae14:	83 fd 5c             	cmp    ebp,0x5c
c000ae17:	74 05                	je     c000ae1e <Fs::standardiseFiles(char*, char const*, char const*)+0xd0>
c000ae19:	83 fd 2f             	cmp    ebp,0x2f
c000ae1c:	75 12                	jne    c000ae30 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000ae1e:	89 c5                	mov    ebp,eax
c000ae20:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ae25:	74 09                	je     c000ae30 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000ae27:	40                   	inc    eax
c000ae28:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000ae2c:	89 cf                	mov    edi,ecx
c000ae2e:	eb d3                	jmp    c000ae03 <Fs::standardiseFiles(char*, char const*, char const*)+0xb5>
c000ae30:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000ae35:	0f be ea             	movsx  ebp,dl
c000ae38:	75 5e                	jne    c000ae98 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000ae3a:	83 fd 2e             	cmp    ebp,0x2e
c000ae3d:	75 59                	jne    c000ae98 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000ae3f:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000ae43:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000ae48:	74 18                	je     c000ae62 <Fs::standardiseFiles(char*, char const*, char const*)+0x114>
c000ae4a:	83 fd 2e             	cmp    ebp,0x2e
c000ae4d:	74 53                	je     c000aea2 <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000ae4f:	89 f9                	mov    ecx,edi
c000ae51:	41                   	inc    ecx
c000ae52:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000ae56:	83 fa 2f             	cmp    edx,0x2f
c000ae59:	74 f6                	je     c000ae51 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000ae5b:	83 fa 5c             	cmp    edx,0x5c
c000ae5e:	74 f1                	je     c000ae51 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000ae60:	eb ca                	jmp    c000ae2c <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000ae62:	83 fd 2e             	cmp    ebp,0x2e
c000ae65:	74 3b                	je     c000aea2 <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000ae67:	83 f8 03             	cmp    eax,0x3
c000ae6a:	74 c0                	je     c000ae2c <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000ae6c:	41                   	inc    ecx
c000ae6d:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000ae71:	83 fa 2f             	cmp    edx,0x2f
c000ae74:	74 f6                	je     c000ae6c <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000ae76:	83 fa 5c             	cmp    edx,0x5c
c000ae79:	74 f1                	je     c000ae6c <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000ae7b:	48                   	dec    eax
c000ae7c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ae80:	75 06                	jne    c000ae88 <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000ae82:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ae86:	eb f3                	jmp    c000ae7b <Fs::standardiseFiles(char*, char const*, char const*)+0x12d>
c000ae88:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ae8c:	74 07                	je     c000ae95 <Fs::standardiseFiles(char*, char const*, char const*)+0x147>
c000ae8e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ae92:	48                   	dec    eax
c000ae93:	eb f3                	jmp    c000ae88 <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000ae95:	40                   	inc    eax
c000ae96:	eb 94                	jmp    c000ae2c <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000ae98:	83 fd 2f             	cmp    ebp,0x2f
c000ae9b:	74 8f                	je     c000ae2c <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000ae9d:	83 fd 5c             	cmp    ebp,0x5c
c000aea0:	74 8a                	je     c000ae2c <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000aea2:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000aea5:	40                   	inc    eax
c000aea6:	eb 84                	jmp    c000ae2c <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000aea8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aeac:	83 ec 0c             	sub    esp,0xc
c000aeaf:	53                   	push   ebx
c000aeb0:	e8 bb 56 ff ff       	call   c0000570 <strlen>
c000aeb5:	83 c4 10             	add    esp,0x10
c000aeb8:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aebd:	75 26                	jne    c000aee5 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000aebf:	83 ec 0c             	sub    esp,0xc
c000aec2:	53                   	push   ebx
c000aec3:	e8 a8 56 ff ff       	call   c0000570 <strlen>
c000aec8:	83 c4 10             	add    esp,0x10
c000aecb:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aed0:	74 26                	je     c000aef8 <Fs::standardiseFiles(char*, char const*, char const*)+0x1aa>
c000aed2:	83 ec 0c             	sub    esp,0xc
c000aed5:	53                   	push   ebx
c000aed6:	e8 95 56 ff ff       	call   c0000570 <strlen>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aee3:	eb c7                	jmp    c000aeac <Fs::standardiseFiles(char*, char const*, char const*)+0x15e>
c000aee5:	83 ec 0c             	sub    esp,0xc
c000aee8:	53                   	push   ebx
c000aee9:	e8 82 56 ff ff       	call   c0000570 <strlen>
c000aeee:	83 c4 10             	add    esp,0x10
c000aef1:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aef6:	74 c7                	je     c000aebf <Fs::standardiseFiles(char*, char const*, char const*)+0x171>
c000aef8:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aefe:	5b                   	pop    ebx
c000aeff:	5e                   	pop    esi
c000af00:	5f                   	pop    edi
c000af01:	5d                   	pop    ebp
c000af02:	c3                   	ret    
c000af03:	90                   	nop

c000af04 <File::File(char const*, Process*)>:
c000af04:	83 ec 0c             	sub    esp,0xc
c000af07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af0b:	83 ec 08             	sub    esp,0x8
c000af0e:	6a 00                	push   0x0
c000af10:	50                   	push   eax
c000af11:	e8 a4 e2 ff ff       	call   c00091ba <UnixFile::UnixFile(int)>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	ba 0c 02 02 c0       	mov    edx,0xc002020c
c000af1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af22:	89 10                	mov    DWORD PTR [eax],edx
c000af24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000af28:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000af2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af32:	83 c0 0d             	add    eax,0xd
c000af35:	83 ec 04             	sub    esp,0x4
c000af38:	52                   	push   edx
c000af39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af3d:	50                   	push   eax
c000af3e:	e8 0b fe ff ff       	call   c000ad4e <Fs::standardiseFiles(char*, char const*, char const*)>
c000af43:	83 c4 10             	add    esp,0x10
c000af46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af4a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000af4d:	83 e8 41             	sub    eax,0x41
c000af50:	88 c2                	mov    dl,al
c000af52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af56:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000af5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af60:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000af64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af68:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af6e:	0f b6 c0             	movzx  eax,al
c000af71:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000af78:	85 c0                	test   eax,eax
c000af7a:	74 3e                	je     c000afba <File::File(char const*, Process*)+0xb6>
c000af7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af80:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000af86:	0f b6 c0             	movzx  eax,al
c000af89:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000af90:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000af96:	85 c0                	test   eax,eax
c000af98:	75 20                	jne    c000afba <File::File(char const*, Process*)+0xb6>
c000af9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af9e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afa4:	0f b6 c0             	movzx  eax,al
c000afa7:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000afae:	83 ec 0c             	sub    esp,0xc
c000afb1:	50                   	push   eax
c000afb2:	e8 1f 21 00 00       	call   c000d0d6 <LogicalDisk::mount()>
c000afb7:	83 c4 10             	add    esp,0x10
c000afba:	90                   	nop
c000afbb:	83 c4 0c             	add    esp,0xc
c000afbe:	c3                   	ret    
c000afbf:	90                   	nop

c000afc0 <File::open(FileOpenMode)>:
c000afc0:	53                   	push   ebx
c000afc1:	b8 0b 00 00 00       	mov    eax,0xb
c000afc6:	83 ec 08             	sub    esp,0x8
c000afc9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000afcd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000afd4:	83 fa 19             	cmp    edx,0x19
c000afd7:	77 40                	ja     c000b019 <File::open(FileOpenMode)+0x59>
c000afd9:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000afe0:	85 d2                	test   edx,edx
c000afe2:	74 35                	je     c000b019 <File::open(FileOpenMode)+0x59>
c000afe4:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000afea:	85 d2                	test   edx,edx
c000afec:	74 2b                	je     c000b019 <File::open(FileOpenMode)+0x59>
c000afee:	b8 06 00 00 00       	mov    eax,0x6
c000aff3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000aff7:	75 20                	jne    c000b019 <File::open(FileOpenMode)+0x59>
c000aff9:	8b 02                	mov    eax,DWORD PTR [edx]
c000affb:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b001:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b005:	51                   	push   ecx
c000b006:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b009:	51                   	push   ecx
c000b00a:	52                   	push   edx
c000b00b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	85 c0                	test   eax,eax
c000b013:	75 04                	jne    c000b019 <File::open(FileOpenMode)+0x59>
c000b015:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b019:	83 c4 08             	add    esp,0x8
c000b01c:	5b                   	pop    ebx
c000b01d:	c3                   	ret    

c000b01e <File::close()>:
c000b01e:	53                   	push   ebx
c000b01f:	b8 0b 00 00 00       	mov    eax,0xb
c000b024:	83 ec 08             	sub    esp,0x8
c000b027:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b02b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b032:	83 f9 19             	cmp    ecx,0x19
c000b035:	77 41                	ja     c000b078 <File::close()+0x5a>
c000b037:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b03e:	85 db                	test   ebx,ebx
c000b040:	74 36                	je     c000b078 <File::close()+0x5a>
c000b042:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b049:	74 2d                	je     c000b078 <File::close()+0x5a>
c000b04b:	b8 05 00 00 00       	mov    eax,0x5
c000b050:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b054:	74 22                	je     c000b078 <File::close()+0x5a>
c000b056:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b05a:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b061:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b067:	53                   	push   ebx
c000b068:	53                   	push   ebx
c000b069:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b06b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b071:	50                   	push   eax
c000b072:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b075:	83 c4 10             	add    esp,0x10
c000b078:	83 c4 08             	add    esp,0x8
c000b07b:	5b                   	pop    ebx
c000b07c:	c3                   	ret    
c000b07d:	90                   	nop

c000b07e <File::seek(unsigned long long)>:
c000b07e:	56                   	push   esi
c000b07f:	53                   	push   ebx
c000b080:	b8 0b 00 00 00       	mov    eax,0xb
c000b085:	51                   	push   ecx
c000b086:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b08a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b08e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b095:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b099:	83 fa 19             	cmp    edx,0x19
c000b09c:	77 31                	ja     c000b0cf <File::seek(unsigned long long)+0x51>
c000b09e:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b0a5:	85 d2                	test   edx,edx
c000b0a7:	74 26                	je     c000b0cf <File::seek(unsigned long long)+0x51>
c000b0a9:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b0af:	85 d2                	test   edx,edx
c000b0b1:	74 1c                	je     c000b0cf <File::seek(unsigned long long)+0x51>
c000b0b3:	b8 05 00 00 00       	mov    eax,0x5
c000b0b8:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b0bc:	74 11                	je     c000b0cf <File::seek(unsigned long long)+0x51>
c000b0be:	8b 02                	mov    eax,DWORD PTR [edx]
c000b0c0:	53                   	push   ebx
c000b0c1:	51                   	push   ecx
c000b0c2:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b0c8:	52                   	push   edx
c000b0c9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	5a                   	pop    edx
c000b0d0:	5b                   	pop    ebx
c000b0d1:	5e                   	pop    esi
c000b0d2:	c3                   	ret    
c000b0d3:	90                   	nop

c000b0d4 <File::tell(unsigned long long*)>:
c000b0d4:	83 ec 0c             	sub    esp,0xc
c000b0d7:	b8 0b 00 00 00       	mov    eax,0xb
c000b0dc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b0e0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b0e7:	83 fa 19             	cmp    edx,0x19
c000b0ea:	77 34                	ja     c000b120 <File::tell(unsigned long long*)+0x4c>
c000b0ec:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b0f3:	85 d2                	test   edx,edx
c000b0f5:	74 29                	je     c000b120 <File::tell(unsigned long long*)+0x4c>
c000b0f7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b0fd:	85 d2                	test   edx,edx
c000b0ff:	74 1f                	je     c000b120 <File::tell(unsigned long long*)+0x4c>
c000b101:	b8 05 00 00 00       	mov    eax,0x5
c000b106:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b10a:	74 14                	je     c000b120 <File::tell(unsigned long long*)+0x4c>
c000b10c:	50                   	push   eax
c000b10d:	8b 02                	mov    eax,DWORD PTR [edx]
c000b10f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b113:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b119:	52                   	push   edx
c000b11a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b11d:	83 c4 10             	add    esp,0x10
c000b120:	83 c4 0c             	add    esp,0xc
c000b123:	c3                   	ret    

c000b124 <File::rewind()>:
c000b124:	83 ec 10             	sub    esp,0x10
c000b127:	6a 00                	push   0x0
c000b129:	6a 00                	push   0x0
c000b12b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b12f:	e8 4a ff ff ff       	call   c000b07e <File::seek(unsigned long long)>
c000b134:	83 c4 1c             	add    esp,0x1c
c000b137:	c3                   	ret    

c000b138 <File::unlink()>:
c000b138:	83 ec 0c             	sub    esp,0xc
c000b13b:	b8 0b 00 00 00       	mov    eax,0xb
c000b140:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b144:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b14b:	83 f9 19             	cmp    ecx,0x19
c000b14e:	77 2f                	ja     c000b17f <File::unlink()+0x47>
c000b150:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b157:	85 c9                	test   ecx,ecx
c000b159:	74 24                	je     c000b17f <File::unlink()+0x47>
c000b15b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b161:	85 c9                	test   ecx,ecx
c000b163:	74 1a                	je     c000b17f <File::unlink()+0x47>
c000b165:	b8 06 00 00 00       	mov    eax,0x6
c000b16a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b16e:	75 0f                	jne    c000b17f <File::unlink()+0x47>
c000b170:	83 c2 0d             	add    edx,0xd
c000b173:	50                   	push   eax
c000b174:	50                   	push   eax
c000b175:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b177:	52                   	push   edx
c000b178:	51                   	push   ecx
c000b179:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b17c:	83 c4 10             	add    esp,0x10
c000b17f:	83 c4 0c             	add    esp,0xc
c000b182:	c3                   	ret    
c000b183:	90                   	nop

c000b184 <File::rename(char const*)>:
c000b184:	83 ec 0c             	sub    esp,0xc
c000b187:	b8 0b 00 00 00       	mov    eax,0xb
c000b18c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b190:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b197:	83 f9 19             	cmp    ecx,0x19
c000b19a:	77 32                	ja     c000b1ce <File::rename(char const*)+0x4a>
c000b19c:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b1a3:	85 c9                	test   ecx,ecx
c000b1a5:	74 27                	je     c000b1ce <File::rename(char const*)+0x4a>
c000b1a7:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b1ad:	85 c9                	test   ecx,ecx
c000b1af:	74 1d                	je     c000b1ce <File::rename(char const*)+0x4a>
c000b1b1:	b8 06 00 00 00       	mov    eax,0x6
c000b1b6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b1ba:	75 12                	jne    c000b1ce <File::rename(char const*)+0x4a>
c000b1bc:	83 c2 0d             	add    edx,0xd
c000b1bf:	50                   	push   eax
c000b1c0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b1c6:	52                   	push   edx
c000b1c7:	51                   	push   ecx
c000b1c8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b1cb:	83 c4 10             	add    esp,0x10
c000b1ce:	83 c4 0c             	add    esp,0xc
c000b1d1:	c3                   	ret    

c000b1d2 <File::chfatattr(unsigned char, unsigned char)>:
c000b1d2:	57                   	push   edi
c000b1d3:	b8 0b 00 00 00       	mov    eax,0xb
c000b1d8:	56                   	push   esi
c000b1d9:	53                   	push   ebx
c000b1da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1de:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b1e2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1e9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b1ed:	83 f9 19             	cmp    ecx,0x19
c000b1f0:	77 37                	ja     c000b229 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b1f2:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b1f9:	85 c9                	test   ecx,ecx
c000b1fb:	74 2c                	je     c000b229 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b1fd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b203:	85 c9                	test   ecx,ecx
c000b205:	74 22                	je     c000b229 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b207:	b8 06 00 00 00       	mov    eax,0x6
c000b20c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b210:	75 17                	jne    c000b229 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000b212:	8b 39                	mov    edi,DWORD PTR [ecx]
c000b214:	89 f0                	mov    eax,esi
c000b216:	83 c2 0d             	add    edx,0xd
c000b219:	0f b6 f0             	movzx  esi,al
c000b21c:	0f b6 db             	movzx  ebx,bl
c000b21f:	56                   	push   esi
c000b220:	53                   	push   ebx
c000b221:	52                   	push   edx
c000b222:	51                   	push   ecx
c000b223:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000b226:	83 c4 10             	add    esp,0x10
c000b229:	5b                   	pop    ebx
c000b22a:	5e                   	pop    esi
c000b22b:	5f                   	pop    edi
c000b22c:	c3                   	ret    
c000b22d:	90                   	nop

c000b22e <File::exists()>:
c000b22e:	83 ec 0c             	sub    esp,0xc
c000b231:	31 c0                	xor    eax,eax
c000b233:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b237:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b23e:	83 f9 19             	cmp    ecx,0x19
c000b241:	77 24                	ja     c000b267 <File::exists()+0x39>
c000b243:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b24a:	85 c9                	test   ecx,ecx
c000b24c:	74 19                	je     c000b267 <File::exists()+0x39>
c000b24e:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b254:	85 c9                	test   ecx,ecx
c000b256:	74 0f                	je     c000b267 <File::exists()+0x39>
c000b258:	83 c2 0d             	add    edx,0xd
c000b25b:	50                   	push   eax
c000b25c:	50                   	push   eax
c000b25d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b25f:	52                   	push   edx
c000b260:	51                   	push   ecx
c000b261:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b264:	83 c4 10             	add    esp,0x10
c000b267:	83 c4 0c             	add    esp,0xc
c000b26a:	c3                   	ret    
c000b26b:	90                   	nop

c000b26c <File::stat(unsigned long long*, bool*)>:
c000b26c:	56                   	push   esi
c000b26d:	53                   	push   ebx
c000b26e:	50                   	push   eax
c000b26f:	b8 0b 00 00 00       	mov    eax,0xb
c000b274:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b278:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b27c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b283:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b287:	83 f9 19             	cmp    ecx,0x19
c000b28a:	77 3d                	ja     c000b2c9 <File::stat(unsigned long long*, bool*)+0x5d>
c000b28c:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b293:	85 c9                	test   ecx,ecx
c000b295:	74 32                	je     c000b2c9 <File::stat(unsigned long long*, bool*)+0x5d>
c000b297:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b29d:	85 c9                	test   ecx,ecx
c000b29f:	74 28                	je     c000b2c9 <File::stat(unsigned long long*, bool*)+0x5d>
c000b2a1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2a3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2a7:	74 13                	je     c000b2bc <File::stat(unsigned long long*, bool*)+0x50>
c000b2a9:	83 ec 04             	sub    esp,0x4
c000b2ac:	56                   	push   esi
c000b2ad:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b2b3:	51                   	push   ecx
c000b2b4:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b2b7:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b2ba:	eb 0a                	jmp    c000b2c6 <File::stat(unsigned long long*, bool*)+0x5a>
c000b2bc:	53                   	push   ebx
c000b2bd:	83 c2 0d             	add    edx,0xd
c000b2c0:	56                   	push   esi
c000b2c1:	52                   	push   edx
c000b2c2:	51                   	push   ecx
c000b2c3:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b2c6:	83 c4 10             	add    esp,0x10
c000b2c9:	5a                   	pop    edx
c000b2ca:	5b                   	pop    ebx
c000b2cb:	5e                   	pop    esi
c000b2cc:	c3                   	ret    

c000b2cd <Fs::setcwd(Process*, char*)>:
c000b2cd:	55                   	push   ebp
c000b2ce:	57                   	push   edi
c000b2cf:	56                   	push   esi
c000b2d0:	53                   	push   ebx
c000b2d1:	81 ec 20 02 00 00    	sub    esp,0x220
c000b2d7:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b2de:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b2e4:	57                   	push   edi
c000b2e5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b2ec:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b2f0:	56                   	push   esi
c000b2f1:	e8 58 fa ff ff       	call   c000ad4e <Fs::standardiseFiles(char*, char const*, char const*)>
c000b2f6:	89 34 24             	mov    DWORD PTR [esp],esi
c000b2f9:	e8 72 52 ff ff       	call   c0000570 <strlen>
c000b2fe:	83 c4 10             	add    esp,0x10
c000b301:	83 f8 02             	cmp    eax,0x2
c000b304:	77 15                	ja     c000b31b <Fs::setcwd(Process*, char*)+0x4e>
c000b306:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b30b:	83 eb 41             	sub    ebx,0x41
c000b30e:	8b 04 9d 20 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8be0]
c000b315:	85 c0                	test   eax,eax
c000b317:	75 1c                	jne    c000b335 <Fs::setcwd(Process*, char*)+0x68>
c000b319:	eb 2f                	jmp    c000b34a <Fs::setcwd(Process*, char*)+0x7d>
c000b31b:	83 ec 0c             	sub    esp,0xc
c000b31e:	56                   	push   esi
c000b31f:	e8 4c 52 ff ff       	call   c0000570 <strlen>
c000b324:	83 c4 10             	add    esp,0x10
c000b327:	83 f8 03             	cmp    eax,0x3
c000b32a:	75 57                	jne    c000b383 <Fs::setcwd(Process*, char*)+0xb6>
c000b32c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b331:	75 50                	jne    c000b383 <Fs::setcwd(Process*, char*)+0xb6>
c000b333:	eb d1                	jmp    c000b306 <Fs::setcwd(Process*, char*)+0x39>
c000b335:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000b33c:	75 0c                	jne    c000b34a <Fs::setcwd(Process*, char*)+0x7d>
c000b33e:	83 ec 0c             	sub    esp,0xc
c000b341:	50                   	push   eax
c000b342:	e8 8f 1d 00 00       	call   c000d0d6 <LogicalDisk::mount()>
c000b347:	83 c4 10             	add    esp,0x10
c000b34a:	b8 03 00 00 00       	mov    eax,0x3
c000b34f:	83 fb 19             	cmp    ebx,0x19
c000b352:	0f 87 c6 00 00 00    	ja     c000b41e <Fs::setcwd(Process*, char*)+0x151>
c000b358:	8b 14 9d 20 74 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd8be0]
c000b35f:	b8 05 00 00 00       	mov    eax,0x5
c000b364:	85 d2                	test   edx,edx
c000b366:	0f 84 b2 00 00 00    	je     c000b41e <Fs::setcwd(Process*, char*)+0x151>
c000b36c:	b8 06 00 00 00       	mov    eax,0x6
c000b371:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b378:	0f 85 92 00 00 00    	jne    c000b410 <Fs::setcwd(Process*, char*)+0x143>
c000b37e:	e9 9b 00 00 00       	jmp    c000b41e <Fs::setcwd(Process*, char*)+0x151>
c000b383:	83 ec 0c             	sub    esp,0xc
c000b386:	68 14 01 00 00       	push   0x114
c000b38b:	e8 0a c7 ff ff       	call   c0007a9a <malloc>
c000b390:	83 c4 0c             	add    esp,0xc
c000b393:	89 c3                	mov    ebx,eax
c000b395:	55                   	push   ebp
c000b396:	56                   	push   esi
c000b397:	50                   	push   eax
c000b398:	e8 67 fb ff ff       	call   c000af04 <File::File(char const*, Process*)>
c000b39d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b3a2:	83 c4 0c             	add    esp,0xc
c000b3a5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b3a9:	50                   	push   eax
c000b3aa:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b3ae:	50                   	push   eax
c000b3af:	53                   	push   ebx
c000b3b0:	e8 b7 fe ff ff       	call   c000b26c <File::stat(unsigned long long*, bool*)>
c000b3b5:	83 c4 10             	add    esp,0x10
c000b3b8:	83 f8 02             	cmp    eax,0x2
c000b3bb:	74 27                	je     c000b3e4 <Fs::setcwd(Process*, char*)+0x117>
c000b3bd:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b3c2:	75 1c                	jne    c000b3e0 <Fs::setcwd(Process*, char*)+0x113>
c000b3c4:	b8 02 00 00 00       	mov    eax,0x2
c000b3c9:	85 db                	test   ebx,ebx
c000b3cb:	74 51                	je     c000b41e <Fs::setcwd(Process*, char*)+0x151>
c000b3cd:	83 ec 0c             	sub    esp,0xc
c000b3d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3d2:	53                   	push   ebx
c000b3d3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3d6:	83 c4 10             	add    esp,0x10
c000b3d9:	b8 02 00 00 00       	mov    eax,0x2
c000b3de:	eb 3e                	jmp    c000b41e <Fs::setcwd(Process*, char*)+0x151>
c000b3e0:	85 c0                	test   eax,eax
c000b3e2:	74 1c                	je     c000b400 <Fs::setcwd(Process*, char*)+0x133>
c000b3e4:	b8 01 00 00 00       	mov    eax,0x1
c000b3e9:	85 db                	test   ebx,ebx
c000b3eb:	74 31                	je     c000b41e <Fs::setcwd(Process*, char*)+0x151>
c000b3ed:	83 ec 0c             	sub    esp,0xc
c000b3f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3f2:	53                   	push   ebx
c000b3f3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b3f6:	83 c4 10             	add    esp,0x10
c000b3f9:	b8 01 00 00 00       	mov    eax,0x1
c000b3fe:	eb 1e                	jmp    c000b41e <Fs::setcwd(Process*, char*)+0x151>
c000b400:	85 db                	test   ebx,ebx
c000b402:	74 0c                	je     c000b410 <Fs::setcwd(Process*, char*)+0x143>
c000b404:	83 ec 0c             	sub    esp,0xc
c000b407:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b409:	53                   	push   ebx
c000b40a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b40d:	83 c4 10             	add    esp,0x10
c000b410:	50                   	push   eax
c000b411:	50                   	push   eax
c000b412:	56                   	push   esi
c000b413:	57                   	push   edi
c000b414:	e8 27 52 ff ff       	call   c0000640 <strcpy>
c000b419:	83 c4 10             	add    esp,0x10
c000b41c:	31 c0                	xor    eax,eax
c000b41e:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b424:	5b                   	pop    ebx
c000b425:	5e                   	pop    esi
c000b426:	5f                   	pop    edi
c000b427:	5d                   	pop    ebp
c000b428:	c3                   	ret    
c000b429:	90                   	nop

c000b42a <Directory::Directory(char const*, Process*)>:
c000b42a:	83 ec 0c             	sub    esp,0xc
c000b42d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b431:	83 ec 08             	sub    esp,0x8
c000b434:	6a 00                	push   0x0
c000b436:	50                   	push   eax
c000b437:	e8 7e dd ff ff       	call   c00091ba <UnixFile::UnixFile(int)>
c000b43c:	83 c4 10             	add    esp,0x10
c000b43f:	ba 28 02 02 c0       	mov    edx,0xc0020228
c000b444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b448:	89 10                	mov    DWORD PTR [eax],edx
c000b44a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b44e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b458:	83 c0 0d             	add    eax,0xd
c000b45b:	83 ec 04             	sub    esp,0x4
c000b45e:	52                   	push   edx
c000b45f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b463:	50                   	push   eax
c000b464:	e8 e5 f8 ff ff       	call   c000ad4e <Fs::standardiseFiles(char*, char const*, char const*)>
c000b469:	83 c4 10             	add    esp,0x10
c000b46c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b470:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b473:	83 e8 41             	sub    eax,0x41
c000b476:	88 c2                	mov    dl,al
c000b478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b47c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b486:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b48e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b494:	0f b6 c0             	movzx  eax,al
c000b497:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b49e:	85 c0                	test   eax,eax
c000b4a0:	74 3e                	je     c000b4e0 <Directory::Directory(char const*, Process*)+0xb6>
c000b4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4a6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b4ac:	0f b6 c0             	movzx  eax,al
c000b4af:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b4b6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b4bc:	85 c0                	test   eax,eax
c000b4be:	75 20                	jne    c000b4e0 <Directory::Directory(char const*, Process*)+0xb6>
c000b4c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b4ca:	0f b6 c0             	movzx  eax,al
c000b4cd:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c000b4d4:	83 ec 0c             	sub    esp,0xc
c000b4d7:	50                   	push   eax
c000b4d8:	e8 f9 1b 00 00       	call   c000d0d6 <LogicalDisk::mount()>
c000b4dd:	83 c4 10             	add    esp,0x10
c000b4e0:	90                   	nop
c000b4e1:	83 c4 0c             	add    esp,0xc
c000b4e4:	c3                   	ret    
c000b4e5:	90                   	nop

c000b4e6 <Directory::open()>:
c000b4e6:	53                   	push   ebx
c000b4e7:	b8 0b 00 00 00       	mov    eax,0xb
c000b4ec:	83 ec 08             	sub    esp,0x8
c000b4ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b4f3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b4fa:	83 fa 19             	cmp    edx,0x19
c000b4fd:	77 3d                	ja     c000b53c <Directory::open()+0x56>
c000b4ff:	8b 14 95 20 74 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8be0]
c000b506:	85 d2                	test   edx,edx
c000b508:	74 32                	je     c000b53c <Directory::open()+0x56>
c000b50a:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b510:	85 d2                	test   edx,edx
c000b512:	74 28                	je     c000b53c <Directory::open()+0x56>
c000b514:	b8 06 00 00 00       	mov    eax,0x6
c000b519:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b51d:	75 1d                	jne    c000b53c <Directory::open()+0x56>
c000b51f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b525:	50                   	push   eax
c000b526:	8b 02                	mov    eax,DWORD PTR [edx]
c000b528:	51                   	push   ecx
c000b529:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b52c:	51                   	push   ecx
c000b52d:	52                   	push   edx
c000b52e:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b531:	83 c4 10             	add    esp,0x10
c000b534:	85 c0                	test   eax,eax
c000b536:	75 04                	jne    c000b53c <Directory::open()+0x56>
c000b538:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b53c:	83 c4 08             	add    esp,0x8
c000b53f:	5b                   	pop    ebx
c000b540:	c3                   	ret    
c000b541:	90                   	nop

c000b542 <Directory::close()>:
c000b542:	53                   	push   ebx
c000b543:	b8 0b 00 00 00       	mov    eax,0xb
c000b548:	83 ec 08             	sub    esp,0x8
c000b54b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b54f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b556:	83 f9 19             	cmp    ecx,0x19
c000b559:	77 41                	ja     c000b59c <Directory::close()+0x5a>
c000b55b:	8b 1c 8d 20 74 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b562:	85 db                	test   ebx,ebx
c000b564:	74 36                	je     c000b59c <Directory::close()+0x5a>
c000b566:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b56d:	74 2d                	je     c000b59c <Directory::close()+0x5a>
c000b56f:	b8 05 00 00 00       	mov    eax,0x5
c000b574:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b578:	74 22                	je     c000b59c <Directory::close()+0x5a>
c000b57a:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b57e:	8b 04 8d 20 74 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd8be0]
c000b585:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b58b:	53                   	push   ebx
c000b58c:	53                   	push   ebx
c000b58d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b58f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b595:	50                   	push   eax
c000b596:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000b599:	83 c4 10             	add    esp,0x10
c000b59c:	83 c4 08             	add    esp,0x8
c000b59f:	5b                   	pop    ebx
c000b5a0:	c3                   	ret    
c000b5a1:	90                   	nop

c000b5a2 <Directory::unlink()>:
c000b5a2:	83 ec 0c             	sub    esp,0xc
c000b5a5:	b8 0b 00 00 00       	mov    eax,0xb
c000b5aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b5ae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b5b5:	83 f9 19             	cmp    ecx,0x19
c000b5b8:	77 2f                	ja     c000b5e9 <Directory::unlink()+0x47>
c000b5ba:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b5c1:	85 c9                	test   ecx,ecx
c000b5c3:	74 24                	je     c000b5e9 <Directory::unlink()+0x47>
c000b5c5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b5cb:	85 c9                	test   ecx,ecx
c000b5cd:	74 1a                	je     c000b5e9 <Directory::unlink()+0x47>
c000b5cf:	b8 06 00 00 00       	mov    eax,0x6
c000b5d4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b5d8:	75 0f                	jne    c000b5e9 <Directory::unlink()+0x47>
c000b5da:	83 c2 0d             	add    edx,0xd
c000b5dd:	50                   	push   eax
c000b5de:	50                   	push   eax
c000b5df:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b5e1:	52                   	push   edx
c000b5e2:	51                   	push   ecx
c000b5e3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b5e6:	83 c4 10             	add    esp,0x10
c000b5e9:	83 c4 0c             	add    esp,0xc
c000b5ec:	c3                   	ret    
c000b5ed:	90                   	nop

c000b5ee <Directory::rename(char const*)>:
c000b5ee:	83 ec 0c             	sub    esp,0xc
c000b5f1:	b8 0b 00 00 00       	mov    eax,0xb
c000b5f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b5fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b601:	83 f9 19             	cmp    ecx,0x19
c000b604:	77 32                	ja     c000b638 <Directory::rename(char const*)+0x4a>
c000b606:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b60d:	85 c9                	test   ecx,ecx
c000b60f:	74 27                	je     c000b638 <Directory::rename(char const*)+0x4a>
c000b611:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b617:	85 c9                	test   ecx,ecx
c000b619:	74 1d                	je     c000b638 <Directory::rename(char const*)+0x4a>
c000b61b:	b8 06 00 00 00       	mov    eax,0x6
c000b620:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b624:	75 12                	jne    c000b638 <Directory::rename(char const*)+0x4a>
c000b626:	83 c2 0d             	add    edx,0xd
c000b629:	50                   	push   eax
c000b62a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b62c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b630:	52                   	push   edx
c000b631:	51                   	push   ecx
c000b632:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b635:	83 c4 10             	add    esp,0x10
c000b638:	83 c4 0c             	add    esp,0xc
c000b63b:	c3                   	ret    

c000b63c <Directory::exists()>:
c000b63c:	83 ec 0c             	sub    esp,0xc
c000b63f:	31 c0                	xor    eax,eax
c000b641:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b645:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b64c:	83 f9 19             	cmp    ecx,0x19
c000b64f:	77 24                	ja     c000b675 <Directory::exists()+0x39>
c000b651:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b658:	85 c9                	test   ecx,ecx
c000b65a:	74 19                	je     c000b675 <Directory::exists()+0x39>
c000b65c:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b662:	85 c9                	test   ecx,ecx
c000b664:	74 0f                	je     c000b675 <Directory::exists()+0x39>
c000b666:	83 c2 0d             	add    edx,0xd
c000b669:	50                   	push   eax
c000b66a:	50                   	push   eax
c000b66b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b66d:	52                   	push   edx
c000b66e:	51                   	push   ecx
c000b66f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b672:	83 c4 10             	add    esp,0x10
c000b675:	83 c4 0c             	add    esp,0xc
c000b678:	c3                   	ret    
c000b679:	90                   	nop

c000b67a <Directory::read(dirent*)>:
c000b67a:	83 ec 1c             	sub    esp,0x1c
c000b67d:	b8 0b 00 00 00       	mov    eax,0xb
c000b682:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b686:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b68d:	83 f9 19             	cmp    ecx,0x19
c000b690:	77 30                	ja     c000b6c2 <Directory::read(dirent*)+0x48>
c000b692:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b699:	85 c9                	test   ecx,ecx
c000b69b:	74 25                	je     c000b6c2 <Directory::read(dirent*)+0x48>
c000b69d:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000b6a4:	74 1c                	je     c000b6c2 <Directory::read(dirent*)+0x48>
c000b6a6:	83 ec 0c             	sub    esp,0xc
c000b6a9:	8b 02                	mov    eax,DWORD PTR [edx]
c000b6ab:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000b6af:	51                   	push   ecx
c000b6b0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6b4:	6a 00                	push   0x0
c000b6b6:	68 10 01 00 00       	push   0x110
c000b6bb:	52                   	push   edx
c000b6bc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b6bf:	83 c4 20             	add    esp,0x20
c000b6c2:	83 c4 1c             	add    esp,0x1c
c000b6c5:	c3                   	ret    

c000b6c6 <Directory::create()>:
c000b6c6:	83 ec 0c             	sub    esp,0xc
c000b6c9:	b8 0b 00 00 00       	mov    eax,0xb
c000b6ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b6d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b6d9:	83 f9 19             	cmp    ecx,0x19
c000b6dc:	77 2f                	ja     c000b70d <Directory::create()+0x47>
c000b6de:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c000b6e5:	85 c9                	test   ecx,ecx
c000b6e7:	74 24                	je     c000b70d <Directory::create()+0x47>
c000b6e9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b6ef:	85 c9                	test   ecx,ecx
c000b6f1:	74 1a                	je     c000b70d <Directory::create()+0x47>
c000b6f3:	b8 06 00 00 00       	mov    eax,0x6
c000b6f8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6fc:	75 0f                	jne    c000b70d <Directory::create()+0x47>
c000b6fe:	83 c2 0d             	add    edx,0xd
c000b701:	50                   	push   eax
c000b702:	50                   	push   eax
c000b703:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b705:	52                   	push   edx
c000b706:	51                   	push   ecx
c000b707:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	83 c4 0c             	add    esp,0xc
c000b710:	c3                   	ret    
c000b711:	90                   	nop

c000b712 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b712:	b8 0a 00 00 00       	mov    eax,0xa
c000b717:	c3                   	ret    

c000b718 <Bus::Bus(char const*)>:
c000b718:	83 ec 0c             	sub    esp,0xc
c000b71b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b71f:	83 ec 08             	sub    esp,0x8
c000b722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b726:	50                   	push   eax
c000b727:	e8 22 08 00 00       	call   c000bf4e <Device::Device(char const*)>
c000b72c:	83 c4 10             	add    esp,0x10
c000b72f:	ba 44 02 02 c0       	mov    edx,0xc0020244
c000b734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b738:	89 10                	mov    DWORD PTR [eax],edx
c000b73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b73e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b748:	90                   	nop
c000b749:	83 c4 0c             	add    esp,0xc
c000b74c:	c3                   	ret    
c000b74d:	90                   	nop
c000b74e:	66 90                	xchg   ax,ax

c000b750 <Bus::~Bus()>:
c000b750:	83 ec 0c             	sub    esp,0xc
c000b753:	ba 44 02 02 c0       	mov    edx,0xc0020244
c000b758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b75c:	89 10                	mov    DWORD PTR [eax],edx
c000b75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b762:	83 ec 0c             	sub    esp,0xc
c000b765:	50                   	push   eax
c000b766:	e8 4d 05 00 00       	call   c000bcb8 <Device::~Device()>
c000b76b:	83 c4 10             	add    esp,0x10
c000b76e:	90                   	nop
c000b76f:	83 c4 0c             	add    esp,0xc
c000b772:	c3                   	ret    
c000b773:	90                   	nop

c000b774 <Bus::~Bus()>:
c000b774:	83 ec 0c             	sub    esp,0xc
c000b777:	83 ec 0c             	sub    esp,0xc
c000b77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77e:	e8 cd ff ff ff       	call   c000b750 <Bus::~Bus()>
c000b783:	83 c4 10             	add    esp,0x10
c000b786:	83 ec 08             	sub    esp,0x8
c000b789:	68 58 01 00 00       	push   0x158
c000b78e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b792:	e8 be f0 ff ff       	call   c000a855 <operator delete(void*, unsigned long)>
c000b797:	83 c4 10             	add    esp,0x10
c000b79a:	83 c4 0c             	add    esp,0xc
c000b79d:	c3                   	ret    

c000b79e <beepThread(void*)>:
c000b79e:	83 ec 0c             	sub    esp,0xc
c000b7a1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000b7a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b7aa:	48                   	dec    eax
c000b7ab:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000b7b0:	75 01                	jne    c000b7b3 <beepThread(void*)+0x15>
c000b7b2:	fb                   	sti    
c000b7b3:	83 ec 0c             	sub    esp,0xc
c000b7b6:	6b c2 0a             	imul   eax,edx,0xa
c000b7b9:	50                   	push   eax
c000b7ba:	e8 81 9b 00 00       	call   c0015340 <milliTenthSleep(unsigned int)>
c000b7bf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b7c6:	e8 4d ba 00 00       	call   c0017218 <HalMakeBeep(int)>
c000b7cb:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b7d3:	83 c4 1c             	add    esp,0x1c
c000b7d6:	e9 49 9a 00 00       	jmp    c0015224 <blockTask(TaskState)>

c000b7db <Krnl::beep(int, int, bool)>:
c000b7db:	56                   	push   esi
c000b7dc:	53                   	push   ebx
c000b7dd:	83 ec 10             	sub    esp,0x10
c000b7e0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b7e4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b7e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7ec:	e8 27 ba 00 00       	call   c0017218 <HalMakeBeep(int)>
c000b7f1:	83 c4 10             	add    esp,0x10
c000b7f4:	89 f0                	mov    eax,esi
c000b7f6:	84 c0                	test   al,al
c000b7f8:	74 1e                	je     c000b818 <Krnl::beep(int, int, bool)+0x3d>
c000b7fa:	83 ec 0c             	sub    esp,0xc
c000b7fd:	6b db 0a             	imul   ebx,ebx,0xa
c000b800:	53                   	push   ebx
c000b801:	e8 3a 9b 00 00       	call   c0015340 <milliTenthSleep(unsigned int)>
c000b806:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b80e:	83 c4 14             	add    esp,0x14
c000b811:	5b                   	pop    ebx
c000b812:	5e                   	pop    esi
c000b813:	e9 00 ba 00 00       	jmp    c0017218 <HalMakeBeep(int)>
c000b818:	68 e6 00 00 00       	push   0xe6
c000b81d:	53                   	push   ebx
c000b81e:	68 9e b7 00 c0       	push   0xc000b79e
c000b823:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b829:	e8 92 95 00 00       	call   c0014dc0 <Process::createThread(void (*)(void*), void*, int)>
c000b82e:	83 c4 14             	add    esp,0x14
c000b831:	5b                   	pop    ebx
c000b832:	5e                   	pop    esi
c000b833:	c3                   	ret    

c000b834 <User::loadClockSettings(int)>:
c000b834:	53                   	push   ebx
c000b835:	83 ec 14             	sub    esp,0x14
c000b838:	68 14 01 00 00       	push   0x114
c000b83d:	e8 58 c2 ff ff       	call   c0007a9a <malloc>
c000b842:	83 c4 0c             	add    esp,0xc
c000b845:	89 c3                	mov    ebx,eax
c000b847:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c000b84d:	68 68 02 02 c0       	push   0xc0020268
c000b852:	50                   	push   eax
c000b853:	e8 ac f6 ff ff       	call   c000af04 <File::File(char const*, Process*)>
c000b858:	58                   	pop    eax
c000b859:	5a                   	pop    edx
c000b85a:	6a 01                	push   0x1
c000b85c:	53                   	push   ebx
c000b85d:	e8 5e f7 ff ff       	call   c000afc0 <File::open(FileOpenMode)>
c000b862:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b865:	e8 b4 f7 ff ff       	call   c000b01e <File::close()>
c000b86a:	83 c4 10             	add    esp,0x10
c000b86d:	85 db                	test   ebx,ebx
c000b86f:	74 0f                	je     c000b880 <User::loadClockSettings(int)+0x4c>
c000b871:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b873:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b877:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b87a:	83 c4 08             	add    esp,0x8
c000b87d:	5b                   	pop    ebx
c000b87e:	ff e0                	jmp    eax
c000b880:	83 c4 08             	add    esp,0x8
c000b883:	5b                   	pop    ebx
c000b884:	c3                   	ret    
c000b885:	90                   	nop

c000b886 <Clock::Clock(char const*)>:
c000b886:	83 ec 0c             	sub    esp,0xc
c000b889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b88d:	83 ec 08             	sub    esp,0x8
c000b890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b894:	50                   	push   eax
c000b895:	e8 b4 06 00 00       	call   c000bf4e <Device::Device(char const*)>
c000b89a:	83 c4 10             	add    esp,0x10
c000b89d:	ba 90 02 02 c0       	mov    edx,0xc0020290
c000b8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8a6:	89 10                	mov    DWORD PTR [eax],edx
c000b8a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8ac:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b8b6:	90                   	nop
c000b8b7:	83 c4 0c             	add    esp,0xc
c000b8ba:	c3                   	ret    
c000b8bb:	90                   	nop

c000b8bc <Clock::~Clock()>:
c000b8bc:	83 ec 0c             	sub    esp,0xc
c000b8bf:	ba 90 02 02 c0       	mov    edx,0xc0020290
c000b8c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8c8:	89 10                	mov    DWORD PTR [eax],edx
c000b8ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8ce:	83 ec 0c             	sub    esp,0xc
c000b8d1:	50                   	push   eax
c000b8d2:	e8 e1 03 00 00       	call   c000bcb8 <Device::~Device()>
c000b8d7:	83 c4 10             	add    esp,0x10
c000b8da:	90                   	nop
c000b8db:	83 c4 0c             	add    esp,0xc
c000b8de:	c3                   	ret    
c000b8df:	90                   	nop

c000b8e0 <Clock::~Clock()>:
c000b8e0:	83 ec 0c             	sub    esp,0xc
c000b8e3:	83 ec 0c             	sub    esp,0xc
c000b8e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8ea:	e8 cd ff ff ff       	call   c000b8bc <Clock::~Clock()>
c000b8ef:	83 c4 10             	add    esp,0x10
c000b8f2:	83 ec 08             	sub    esp,0x8
c000b8f5:	68 58 01 00 00       	push   0x158
c000b8fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8fe:	e8 52 ef ff ff       	call   c000a855 <operator delete(void*, unsigned long)>
c000b903:	83 c4 10             	add    esp,0x10
c000b906:	83 c4 0c             	add    esp,0xc
c000b909:	c3                   	ret    

c000b90a <Clock::timeInSecondsLocal()>:
c000b90a:	53                   	push   ebx
c000b90b:	83 ec 14             	sub    esp,0x14
c000b90e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b912:	8b 10                	mov    edx,DWORD PTR [eax]
c000b914:	50                   	push   eax
c000b915:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b918:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000b91f:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000b925:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b92b:	89 cb                	mov    ebx,ecx
c000b92d:	c1 fb 1f             	sar    ebx,0x1f
c000b930:	01 c8                	add    eax,ecx
c000b932:	11 da                	adc    edx,ebx
c000b934:	83 c4 10             	add    esp,0x10
c000b937:	31 c9                	xor    ecx,ecx
c000b939:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b940:	74 05                	je     c000b947 <Clock::timeInSecondsLocal()+0x3d>
c000b942:	b9 08 07 00 00       	mov    ecx,0x708
c000b947:	31 db                	xor    ebx,ebx
c000b949:	01 c8                	add    eax,ecx
c000b94b:	11 da                	adc    edx,ebx
c000b94d:	83 c4 08             	add    esp,0x8
c000b950:	5b                   	pop    ebx
c000b951:	c3                   	ret    

c000b952 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b952:	57                   	push   edi
c000b953:	56                   	push   esi
c000b954:	53                   	push   ebx
c000b955:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b959:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b95d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b95f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b963:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b966:	0f b6 05 b8 4f 02 c0 	movzx  eax,BYTE PTR ds:0xc0024fb8
c000b96d:	03 05 bc 4f 02 c0    	add    eax,DWORD PTR ds:0xc0024fbc
c000b973:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b979:	99                   	cdq    
c000b97a:	29 c6                	sub    esi,eax
c000b97c:	19 d7                	sbb    edi,edx
c000b97e:	89 f0                	mov    eax,esi
c000b980:	89 fa                	mov    edx,edi
c000b982:	31 f6                	xor    esi,esi
c000b984:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000b98b:	74 05                	je     c000b992 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b98d:	be 08 07 00 00       	mov    esi,0x708
c000b992:	31 ff                	xor    edi,edi
c000b994:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b998:	29 f0                	sub    eax,esi
c000b99a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b99e:	19 fa                	sbb    edx,edi
c000b9a0:	89 d8                	mov    eax,ebx
c000b9a2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9a6:	5b                   	pop    ebx
c000b9a7:	5e                   	pop    esi
c000b9a8:	5f                   	pop    edi
c000b9a9:	ff e0                	jmp    eax

c000b9ab <datetimeToSeconds(datetime_t)>:
c000b9ab:	55                   	push   ebp
c000b9ac:	57                   	push   edi
c000b9ad:	56                   	push   esi
c000b9ae:	53                   	push   ebx
c000b9af:	83 ec 0c             	sub    esp,0xc
c000b9b2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b9b6:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000b9ba:	89 d6                	mov    esi,edx
c000b9bc:	0f b6 c7             	movzx  eax,bh
c000b9bf:	c1 ee 10             	shr    esi,0x10
c000b9c2:	6b e8 3c             	imul   ebp,eax,0x3c
c000b9c5:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000b9cb:	0f b6 ce             	movzx  ecx,dh
c000b9ce:	89 df                	mov    edi,ebx
c000b9d0:	49                   	dec    ecx
c000b9d1:	c1 ef 10             	shr    edi,0x10
c000b9d4:	0f b6 db             	movzx  ebx,bl
c000b9d7:	89 f8                	mov    eax,edi
c000b9d9:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000b9df:	0f b6 f8             	movzx  edi,al
c000b9e2:	0f b6 d2             	movzx  edx,dl
c000b9e5:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000b9e9:	01 d8                	add    eax,ebx
c000b9eb:	0f b7 de             	movzx  ebx,si
c000b9ee:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9f1:	c1 f8 1f             	sar    eax,0x1f
c000b9f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b9f8:	0f b6 c1             	movzx  eax,cl
c000b9fb:	8b 0c 85 e0 02 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdfd20]
c000ba02:	83 f8 01             	cmp    eax,0x1
c000ba05:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000ba09:	76 27                	jbe    c000ba32 <datetimeToSeconds(datetime_t)+0x87>
c000ba0b:	83 e6 03             	and    esi,0x3
c000ba0e:	75 22                	jne    c000ba32 <datetimeToSeconds(datetime_t)+0x87>
c000ba10:	31 d2                	xor    edx,edx
c000ba12:	be 64 00 00 00       	mov    esi,0x64
c000ba17:	89 d8                	mov    eax,ebx
c000ba19:	f7 f6                	div    esi
c000ba1b:	85 d2                	test   edx,edx
c000ba1d:	75 12                	jne    c000ba31 <datetimeToSeconds(datetime_t)+0x86>
c000ba1f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000ba25:	be 90 01 00 00       	mov    esi,0x190
c000ba2a:	99                   	cdq    
c000ba2b:	f7 fe                	idiv   esi
c000ba2d:	85 d2                	test   edx,edx
c000ba2f:	75 01                	jne    c000ba32 <datetimeToSeconds(datetime_t)+0x87>
c000ba31:	41                   	inc    ecx
c000ba32:	83 fb 46             	cmp    ebx,0x46
c000ba35:	76 48                	jbe    c000ba7f <datetimeToSeconds(datetime_t)+0xd4>
c000ba37:	be 46 00 00 00       	mov    esi,0x46
c000ba3c:	bf 64 00 00 00       	mov    edi,0x64
c000ba41:	bd 90 01 00 00       	mov    ebp,0x190
c000ba46:	b8 6d 01 00 00       	mov    eax,0x16d
c000ba4b:	f7 c6 03 00 00 00    	test   esi,0x3
c000ba51:	75 23                	jne    c000ba76 <datetimeToSeconds(datetime_t)+0xcb>
c000ba53:	89 f0                	mov    eax,esi
c000ba55:	99                   	cdq    
c000ba56:	f7 ff                	idiv   edi
c000ba58:	b8 6e 01 00 00       	mov    eax,0x16e
c000ba5d:	85 d2                	test   edx,edx
c000ba5f:	75 15                	jne    c000ba76 <datetimeToSeconds(datetime_t)+0xcb>
c000ba61:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000ba67:	99                   	cdq    
c000ba68:	f7 fd                	idiv   ebp
c000ba6a:	83 fa 01             	cmp    edx,0x1
c000ba6d:	19 c0                	sbb    eax,eax
c000ba6f:	f7 d0                	not    eax
c000ba71:	05 6e 01 00 00       	add    eax,0x16e
c000ba76:	01 c1                	add    ecx,eax
c000ba78:	46                   	inc    esi
c000ba79:	39 de                	cmp    esi,ebx
c000ba7b:	7c c9                	jl     c000ba46 <datetimeToSeconds(datetime_t)+0x9b>
c000ba7d:	eb 34                	jmp    c000bab3 <datetimeToSeconds(datetime_t)+0x108>
c000ba7f:	74 32                	je     c000bab3 <datetimeToSeconds(datetime_t)+0x108>
c000ba81:	b8 45 00 00 00       	mov    eax,0x45
c000ba86:	89 c2                	mov    edx,eax
c000ba88:	83 e2 03             	and    edx,0x3
c000ba8b:	39 d8                	cmp    eax,ebx
c000ba8d:	7e 0f                	jle    c000ba9e <datetimeToSeconds(datetime_t)+0xf3>
c000ba8f:	83 fa 01             	cmp    edx,0x1
c000ba92:	19 d2                	sbb    edx,edx
c000ba94:	48                   	dec    eax
c000ba95:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000ba9c:	eb e8                	jmp    c000ba86 <datetimeToSeconds(datetime_t)+0xdb>
c000ba9e:	b8 6d 01 00 00       	mov    eax,0x16d
c000baa3:	85 d2                	test   edx,edx
c000baa5:	75 0a                	jne    c000bab1 <datetimeToSeconds(datetime_t)+0x106>
c000baa7:	83 fb 01             	cmp    ebx,0x1
c000baaa:	19 c0                	sbb    eax,eax
c000baac:	05 6e 01 00 00       	add    eax,0x16e
c000bab1:	29 c1                	sub    ecx,eax
c000bab3:	b8 80 51 01 00       	mov    eax,0x15180
c000bab8:	f7 e9                	imul   ecx
c000baba:	03 04 24             	add    eax,DWORD PTR [esp]
c000babd:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000bac1:	83 c4 0c             	add    esp,0xc
c000bac4:	5b                   	pop    ebx
c000bac5:	5e                   	pop    esi
c000bac6:	5f                   	pop    edi
c000bac7:	5d                   	pop    ebp
c000bac8:	c3                   	ret    
c000bac9:	90                   	nop

c000baca <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000baca:	57                   	push   edi
c000bacb:	56                   	push   esi
c000bacc:	53                   	push   ebx
c000bacd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bad1:	8b 06                	mov    eax,DWORD PTR [esi]
c000bad3:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000bad6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bada:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bade:	e8 c8 fe ff ff       	call   c000b9ab <datetimeToSeconds(datetime_t)>
c000bae3:	59                   	pop    ecx
c000bae4:	0f b6 0d b8 4f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024fb8
c000baeb:	5b                   	pop    ebx
c000baec:	03 0d bc 4f 02 c0    	add    ecx,DWORD PTR ds:0xc0024fbc
c000baf2:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000baf8:	89 cb                	mov    ebx,ecx
c000bafa:	c1 fb 1f             	sar    ebx,0x1f
c000bafd:	29 c8                	sub    eax,ecx
c000baff:	19 da                	sbb    edx,ebx
c000bb01:	31 c9                	xor    ecx,ecx
c000bb03:	80 3d b9 4f 02 c0 00 	cmp    BYTE PTR ds:0xc0024fb9,0x0
c000bb0a:	74 05                	je     c000bb11 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000bb0c:	b9 08 07 00 00       	mov    ecx,0x708
c000bb11:	31 db                	xor    ebx,ebx
c000bb13:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000bb17:	29 c8                	sub    eax,ecx
c000bb19:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb1d:	19 da                	sbb    edx,ebx
c000bb1f:	89 f8                	mov    eax,edi
c000bb21:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb25:	5b                   	pop    ebx
c000bb26:	5e                   	pop    esi
c000bb27:	5f                   	pop    edi
c000bb28:	ff e0                	jmp    eax

c000bb2a <secondsToDatetime(unsigned long long)>:
c000bb2a:	55                   	push   ebp
c000bb2b:	57                   	push   edi
c000bb2c:	56                   	push   esi
c000bb2d:	53                   	push   ebx
c000bb2e:	83 ec 1c             	sub    esp,0x1c
c000bb31:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bb35:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000bb39:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000bb3d:	6a 00                	push   0x0
c000bb3f:	68 80 51 01 00       	push   0x15180
c000bb44:	55                   	push   ebp
c000bb45:	57                   	push   edi
c000bb46:	e8 45 2a 01 00       	call   c001e590 <__udivdi3>
c000bb4b:	83 c4 10             	add    esp,0x10
c000bb4e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000bb54:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb58:	6a 00                	push   0x0
c000bb5a:	68 80 51 01 00       	push   0x15180
c000bb5f:	55                   	push   ebp
c000bb60:	57                   	push   edi
c000bb61:	bf 10 0e 00 00       	mov    edi,0xe10
c000bb66:	e8 25 2b 01 00       	call   c001e690 <__umoddi3>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	99                   	cdq    
c000bb6f:	f7 ff                	idiv   edi
c000bb71:	bf 3c 00 00 00       	mov    edi,0x3c
c000bb76:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000bb79:	89 d0                	mov    eax,edx
c000bb7b:	99                   	cdq    
c000bb7c:	f7 ff                	idiv   edi
c000bb7e:	85 db                	test   ebx,ebx
c000bb80:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000bb83:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000bb86:	79 11                	jns    c000bb99 <secondsToDatetime(unsigned long long)+0x6f>
c000bb88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bb8c:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000bb92:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bb97:	eb 07                	jmp    c000bba0 <secondsToDatetime(unsigned long long)+0x76>
c000bb99:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000bb9e:	89 d8                	mov    eax,ebx
c000bba0:	bf b4 05 00 00       	mov    edi,0x5b4
c000bba5:	99                   	cdq    
c000bba6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000bbab:	f7 f9                	idiv   ecx
c000bbad:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000bbb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb6:	31 d2                	xor    edx,edx
c000bbb8:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000bbc0:	01 c3                	add    ebx,eax
c000bbc2:	89 d8                	mov    eax,ebx
c000bbc4:	f7 f1                	div    ecx
c000bbc6:	31 d2                	xor    edx,edx
c000bbc8:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000bbcb:	89 d8                	mov    eax,ebx
c000bbcd:	f7 f7                	div    edi
c000bbcf:	31 d2                	xor    edx,edx
c000bbd1:	29 c1                	sub    ecx,eax
c000bbd3:	89 d8                	mov    eax,ebx
c000bbd5:	f7 f5                	div    ebp
c000bbd7:	bd 6d 01 00 00       	mov    ebp,0x16d
c000bbdc:	29 c1                	sub    ecx,eax
c000bbde:	31 d2                	xor    edx,edx
c000bbe0:	89 c8                	mov    eax,ecx
c000bbe2:	f7 f5                	div    ebp
c000bbe4:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000bbe9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bbed:	31 d2                	xor    edx,edx
c000bbef:	89 c8                	mov    eax,ecx
c000bbf1:	f7 f5                	div    ebp
c000bbf3:	31 d2                	xor    edx,edx
c000bbf5:	01 c3                	add    ebx,eax
c000bbf7:	89 c8                	mov    eax,ecx
c000bbf9:	f7 f7                	div    edi
c000bbfb:	bf 99 00 00 00       	mov    edi,0x99
c000bc00:	29 c3                	sub    ebx,eax
c000bc02:	31 d2                	xor    edx,edx
c000bc04:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000bc0c:	29 c3                	sub    ebx,eax
c000bc0e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bc11:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000bc14:	bb 05 00 00 00       	mov    ebx,0x5
c000bc19:	83 c1 02             	add    ecx,0x2
c000bc1c:	89 c8                	mov    eax,ecx
c000bc1e:	f7 f7                	div    edi
c000bc20:	31 d2                	xor    edx,edx
c000bc22:	89 c7                	mov    edi,eax
c000bc24:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000bc2a:	83 c0 02             	add    eax,0x2
c000bc2d:	f7 f3                	div    ebx
c000bc2f:	89 eb                	mov    ebx,ebp
c000bc31:	29 c3                	sub    ebx,eax
c000bc33:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000bc39:	88 1e                	mov    BYTE PTR [esi],bl
c000bc3b:	19 c0                	sbb    eax,eax
c000bc3d:	31 d2                	xor    edx,edx
c000bc3f:	83 e0 0c             	and    eax,0xc
c000bc42:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000bc46:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000bc4e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000bc52:	83 f9 01             	cmp    ecx,0x1
c000bc55:	0f 96 c2             	setbe  dl
c000bc58:	41                   	inc    ecx
c000bc59:	01 d0                	add    eax,edx
c000bc5b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000bc5e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000bc62:	83 c4 1c             	add    esp,0x1c
c000bc65:	89 f0                	mov    eax,esi
c000bc67:	5b                   	pop    ebx
c000bc68:	5e                   	pop    esi
c000bc69:	5f                   	pop    edi
c000bc6a:	5d                   	pop    ebp
c000bc6b:	c2 04 00             	ret    0x4

c000bc6e <Clock::timeInDatetimeLocal()>:
c000bc6e:	53                   	push   ebx
c000bc6f:	83 ec 14             	sub    esp,0x14
c000bc72:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc76:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bc7a:	e8 8b fc ff ff       	call   c000b90a <Clock::timeInSecondsLocal()>
c000bc7f:	83 c4 0c             	add    esp,0xc
c000bc82:	52                   	push   edx
c000bc83:	50                   	push   eax
c000bc84:	53                   	push   ebx
c000bc85:	e8 a0 fe ff ff       	call   c000bb2a <secondsToDatetime(unsigned long long)>
c000bc8a:	89 d8                	mov    eax,ebx
c000bc8c:	83 c4 14             	add    esp,0x14
c000bc8f:	5b                   	pop    ebx
c000bc90:	c2 04 00             	ret    0x4
c000bc93:	90                   	nop

c000bc94 <Device::hibernate()>:
c000bc94:	c3                   	ret    
c000bc95:	90                   	nop

c000bc96 <Device::wake()>:
c000bc96:	c3                   	ret    
c000bc97:	90                   	nop

c000bc98 <Device::detect()>:
c000bc98:	c3                   	ret    
c000bc99:	90                   	nop

c000bc9a <Device::disableLegacy()>:
c000bc9a:	c3                   	ret    
c000bc9b:	90                   	nop

c000bc9c <Device::powerSaving(PowerSavingLevel)>:
c000bc9c:	c3                   	ret    
c000bc9d:	90                   	nop

c000bc9e <DriverlessDevice::close(int, int, void*)>:
c000bc9e:	31 c0                	xor    eax,eax
c000bca0:	c3                   	ret    
c000bca1:	90                   	nop

c000bca2 <DriverlessDevice::detect()>:
c000bca2:	c3                   	ret    
c000bca3:	90                   	nop

c000bca4 <DriverlessDevice::open(int, int, void*)>:
c000bca4:	83 ec 18             	sub    esp,0x18
c000bca7:	68 10 03 02 c0       	push   0xc0020310
c000bcac:	e8 ae 4b 00 00       	call   c001085f <KePanic(char const*)>
c000bcb1:	83 c8 ff             	or     eax,0xffffffff
c000bcb4:	83 c4 1c             	add    esp,0x1c
c000bcb7:	c3                   	ret    

c000bcb8 <Device::~Device()>:
c000bcb8:	ba 70 03 02 c0       	mov    edx,0xc0020370
c000bcbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bcc1:	89 10                	mov    DWORD PTR [eax],edx
c000bcc3:	90                   	nop
c000bcc4:	c3                   	ret    
c000bcc5:	90                   	nop

c000bcc6 <Device::~Device()>:
c000bcc6:	83 ec 0c             	sub    esp,0xc
c000bcc9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bccd:	e8 e6 ff ff ff       	call   c000bcb8 <Device::~Device()>
c000bcd2:	83 c4 04             	add    esp,0x4
c000bcd5:	83 ec 08             	sub    esp,0x8
c000bcd8:	68 58 01 00 00       	push   0x158
c000bcdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bce1:	e8 6f eb ff ff       	call   c000a855 <operator delete(void*, unsigned long)>
c000bce6:	83 c4 10             	add    esp,0x10
c000bce9:	83 c4 0c             	add    esp,0xc
c000bcec:	c3                   	ret    
c000bced:	90                   	nop

c000bcee <Device::findAndLoadDriver()>:
c000bcee:	c7 44 24 04 2e 03 02 c0 	mov    DWORD PTR [esp+0x4],0xc002032e
c000bcf6:	e9 87 ec ff ff       	jmp    c000a982 <Dbg::kprintf(char const*, ...)>
c000bcfb:	90                   	nop

c000bcfc <Device::preOpenPCI(PCIDeviceInfo)>:
c000bcfc:	57                   	push   edi
c000bcfd:	b9 09 00 00 00       	mov    ecx,0x9
c000bd02:	56                   	push   esi
c000bd03:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bd07:	8d 74 24 10          	lea    esi,[esp+0x10]
c000bd0b:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bd15:	81 c7 18 01 00 00    	add    edi,0x118
c000bd1b:	fc                   	cld    
c000bd1c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bd1e:	5e                   	pop    esi
c000bd1f:	5f                   	pop    edi
c000bd20:	c3                   	ret    
c000bd21:	90                   	nop

c000bd22 <Device::preOpenACPI(void*, char*, char*)>:
c000bd22:	57                   	push   edi
c000bd23:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bd28:	56                   	push   esi
c000bd29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bd2d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd31:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000bd3b:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000bd41:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000bd47:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd4b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd4d:	b9 0e 00 00 00       	mov    ecx,0xe
c000bd52:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bd58:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bd5c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bd5e:	5e                   	pop    esi
c000bd5f:	5f                   	pop    edi
c000bd60:	c3                   	ret    
c000bd61:	90                   	nop

c000bd62 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bd62:	53                   	push   ebx
c000bd63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd67:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bd6f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bd73:	0f b6 c0             	movzx  eax,al
c000bd76:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bd7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bd7e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bd82:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bd86:	5b                   	pop    ebx
c000bd87:	e9 a8 05 00 00       	jmp    c000c334 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bd8c <Device::getParent()>:
c000bd8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd90:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000bd96:	c3                   	ret    
c000bd97:	90                   	nop

c000bd98 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bd98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bda0:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000bda5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bda9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bdad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bdb1:	e9 e6 06 00 00       	jmp    c000c49c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000bdb6 <Device::addChild(Device*)>:
c000bdb6:	53                   	push   ebx
c000bdb7:	83 ec 08             	sub    esp,0x8
c000bdba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bdc2:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000bdc8:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000bdce:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bdd0:	85 d2                	test   edx,edx
c000bdd2:	74 04                	je     c000bdd8 <Device::addChild(Device*)+0x22>
c000bdd4:	89 d3                	mov    ebx,edx
c000bdd6:	eb f6                	jmp    c000bdce <Device::addChild(Device*)+0x18>
c000bdd8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000bddb:	83 ec 0c             	sub    esp,0xc
c000bdde:	6a 08                	push   0x8
c000bde0:	e8 b5 bc ff ff       	call   c0007a9a <malloc>
c000bde5:	89 03                	mov    DWORD PTR [ebx],eax
c000bde7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bded:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bdf4:	83 c4 18             	add    esp,0x18
c000bdf7:	5b                   	pop    ebx
c000bdf8:	c3                   	ret    
c000bdf9:	90                   	nop

c000bdfa <Device::removeAllChildren()>:
c000bdfa:	56                   	push   esi
c000bdfb:	53                   	push   ebx
c000bdfc:	52                   	push   edx
c000bdfd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000be01:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000be07:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be0a:	74 17                	je     c000be23 <Device::removeAllChildren()+0x29>
c000be0c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000be0f:	85 c0                	test   eax,eax
c000be11:	74 0c                	je     c000be1f <Device::removeAllChildren()+0x25>
c000be13:	83 ec 0c             	sub    esp,0xc
c000be16:	8b 10                	mov    edx,DWORD PTR [eax]
c000be18:	50                   	push   eax
c000be19:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000be1c:	83 c4 10             	add    esp,0x10
c000be1f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be21:	eb e4                	jmp    c000be07 <Device::removeAllChildren()+0xd>
c000be23:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be29:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000be2f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000be35:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000be3c:	58                   	pop    eax
c000be3d:	5b                   	pop    ebx
c000be3e:	5e                   	pop    esi
c000be3f:	c3                   	ret    

c000be40 <Device::hibernateAll()>:
c000be40:	53                   	push   ebx
c000be41:	83 ec 14             	sub    esp,0x14
c000be44:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be48:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be4a:	53                   	push   ebx
c000be4b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000be4e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be54:	83 c4 10             	add    esp,0x10
c000be57:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be5a:	74 0f                	je     c000be6b <Device::hibernateAll()+0x2b>
c000be5c:	83 ec 0c             	sub    esp,0xc
c000be5f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be62:	e8 d9 ff ff ff       	call   c000be40 <Device::hibernateAll()>
c000be67:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be69:	eb e9                	jmp    c000be54 <Device::hibernateAll()+0x14>
c000be6b:	83 c4 08             	add    esp,0x8
c000be6e:	5b                   	pop    ebx
c000be6f:	c3                   	ret    

c000be70 <Device::wakeAll()>:
c000be70:	53                   	push   ebx
c000be71:	83 ec 14             	sub    esp,0x14
c000be74:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be78:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be7a:	53                   	push   ebx
c000be7b:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000be7e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be84:	83 c4 10             	add    esp,0x10
c000be87:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be8a:	74 0f                	je     c000be9b <Device::wakeAll()+0x2b>
c000be8c:	83 ec 0c             	sub    esp,0xc
c000be8f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be92:	e8 d9 ff ff ff       	call   c000be70 <Device::wakeAll()>
c000be97:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be99:	eb e9                	jmp    c000be84 <Device::wakeAll()+0x14>
c000be9b:	83 c4 08             	add    esp,0x8
c000be9e:	5b                   	pop    ebx
c000be9f:	c3                   	ret    

c000bea0 <Device::detectAll()>:
c000bea0:	53                   	push   ebx
c000bea1:	83 ec 14             	sub    esp,0x14
c000bea4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bea8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000beaa:	53                   	push   ebx
c000beab:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000beae:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000beb4:	83 c4 10             	add    esp,0x10
c000beb7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000beba:	74 0f                	je     c000becb <Device::detectAll()+0x2b>
c000bebc:	83 ec 0c             	sub    esp,0xc
c000bebf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bec2:	e8 d9 ff ff ff       	call   c000bea0 <Device::detectAll()>
c000bec7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bec9:	eb e9                	jmp    c000beb4 <Device::detectAll()+0x14>
c000becb:	83 c4 08             	add    esp,0x8
c000bece:	5b                   	pop    ebx
c000becf:	c3                   	ret    

c000bed0 <Device::disableLegacyAll()>:
c000bed0:	c3                   	ret    
c000bed1:	90                   	nop

c000bed2 <Device::loadDriversForAll()>:
c000bed2:	c3                   	ret    
c000bed3:	90                   	nop

c000bed4 <Device::closeAll()>:
c000bed4:	53                   	push   ebx
c000bed5:	83 ec 08             	sub    esp,0x8
c000bed8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bedc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bede:	6a 00                	push   0x0
c000bee0:	6a 00                	push   0x0
c000bee2:	6a 00                	push   0x0
c000bee4:	53                   	push   ebx
c000bee5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bee8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000beee:	83 c4 10             	add    esp,0x10
c000bef1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bef4:	74 0f                	je     c000bf05 <Device::closeAll()+0x31>
c000bef6:	83 ec 0c             	sub    esp,0xc
c000bef9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000befc:	e8 d3 ff ff ff       	call   c000bed4 <Device::closeAll()>
c000bf01:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf03:	eb e9                	jmp    c000beee <Device::closeAll()+0x1a>
c000bf05:	83 c4 08             	add    esp,0x8
c000bf08:	5b                   	pop    ebx
c000bf09:	c3                   	ret    

c000bf0a <Device::powerSavingAll(PowerSavingLevel)>:
c000bf0a:	56                   	push   esi
c000bf0b:	53                   	push   ebx
c000bf0c:	83 ec 0c             	sub    esp,0xc
c000bf0f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bf13:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bf17:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf19:	56                   	push   esi
c000bf1a:	53                   	push   ebx
c000bf1b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bf1e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bf24:	83 c4 10             	add    esp,0x10
c000bf27:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bf2a:	74 0f                	je     c000bf3b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bf2c:	52                   	push   edx
c000bf2d:	52                   	push   edx
c000bf2e:	56                   	push   esi
c000bf2f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bf32:	e8 d3 ff ff ff       	call   c000bf0a <Device::powerSavingAll(PowerSavingLevel)>
c000bf37:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bf39:	eb e9                	jmp    c000bf24 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bf3b:	58                   	pop    eax
c000bf3c:	5b                   	pop    ebx
c000bf3d:	5e                   	pop    esi
c000bf3e:	c3                   	ret    
c000bf3f:	90                   	nop

c000bf40 <Device::setName(char const*)>:
c000bf40:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bf48:	e9 f3 46 ff ff       	jmp    c0000640 <strcpy>
c000bf4d:	90                   	nop

c000bf4e <Device::Device(char const*)>:
c000bf4e:	83 ec 1c             	sub    esp,0x1c
c000bf51:	ba 70 03 02 c0       	mov    edx,0xc0020370
c000bf56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf5a:	89 10                	mov    DWORD PTR [eax],edx
c000bf5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf60:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bf6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf6e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bf78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf7c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bf86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bf8a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bf94:	83 ec 08             	sub    esp,0x8
c000bf97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf9f:	e8 9c ff ff ff       	call   c000bf40 <Device::setName(char const*)>
c000bfa4:	83 c4 10             	add    esp,0x10
c000bfa7:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bfaf:	83 ec 0c             	sub    esp,0xc
c000bfb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfb6:	e8 df ba ff ff       	call   c0007a9a <malloc>
c000bfbb:	83 c4 10             	add    esp,0x10
c000bfbe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bfc4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bfcb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bfcf:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bfd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfd9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bfdf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bfe5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfe9:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bfef:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bffa:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c001:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c005:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c00c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c010:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c01a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c01e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c028:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c02c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c036:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c03a:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c044:	90                   	nop
c000c045:	83 c4 1c             	add    esp,0x1c
c000c048:	c3                   	ret    
c000c049:	90                   	nop

c000c04a <Device::getName()>:
c000c04a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c04e:	05 d0 00 00 00       	add    eax,0xd0
c000c053:	c3                   	ret    

c000c054 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c054:	83 ec 0c             	sub    esp,0xc
c000c057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c05b:	83 ec 08             	sub    esp,0x8
c000c05e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c062:	50                   	push   eax
c000c063:	e8 e6 fe ff ff       	call   c000bf4e <Device::Device(char const*)>
c000c068:	83 c4 10             	add    esp,0x10
c000c06b:	ba 9c 03 02 c0       	mov    edx,0xc002039c
c000c070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c074:	89 10                	mov    DWORD PTR [eax],edx
c000c076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c07a:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c084:	90                   	nop
c000c085:	83 c4 0c             	add    esp,0xc
c000c088:	c3                   	ret    
c000c089:	90                   	nop

c000c08a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c08a:	57                   	push   edi
c000c08b:	56                   	push   esi
c000c08c:	53                   	push   ebx
c000c08d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c091:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c095:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c099:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c09f:	75 0c                	jne    c000c0ad <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c0a1:	52                   	push   edx
c000c0a2:	52                   	push   edx
c000c0a3:	53                   	push   ebx
c000c0a4:	56                   	push   esi
c000c0a5:	e8 98 29 01 00       	call   c001ea42 <LinkedList<Device>::addElement(Device*)>
c000c0aa:	83 c4 10             	add    esp,0x10
c000c0ad:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c0b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c0b6:	74 12                	je     c000c0ca <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c0b8:	50                   	push   eax
c000c0b9:	57                   	push   edi
c000c0ba:	56                   	push   esi
c000c0bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c0be:	e8 c7 ff ff ff       	call   c000c08a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c0c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c0c5:	83 c4 10             	add    esp,0x10
c000c0c8:	eb e9                	jmp    c000c0b3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c0ca:	5b                   	pop    ebx
c000c0cb:	5e                   	pop    esi
c000c0cc:	5f                   	pop    edi
c000c0cd:	c3                   	ret    

c000c0ce <getDevicesOfType(DeviceType)>:
c000c0ce:	53                   	push   ebx
c000c0cf:	83 ec 14             	sub    esp,0x14
c000c0d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0d6:	53                   	push   ebx
c000c0d7:	e8 42 2a 01 00       	call   c001eb1e <LinkedList<Device>::LinkedList()>
c000c0dc:	83 c4 0c             	add    esp,0xc
c000c0df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c0e3:	53                   	push   ebx
c000c0e4:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000c0ea:	e8 9b ff ff ff       	call   c000c08a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c0ef:	89 d8                	mov    eax,ebx
c000c0f1:	83 c4 18             	add    esp,0x18
c000c0f4:	5b                   	pop    ebx
c000c0f5:	c2 04 00             	ret    0x4

c000c0f8 <HardDiskController::HardDiskController(char const*)>:
c000c0f8:	83 ec 0c             	sub    esp,0xc
c000c0fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0ff:	83 ec 08             	sub    esp,0x8
c000c102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c106:	50                   	push   eax
c000c107:	e8 42 fe ff ff       	call   c000bf4e <Device::Device(char const*)>
c000c10c:	83 c4 10             	add    esp,0x10
c000c10f:	ba c8 03 02 c0       	mov    edx,0xc00203c8
c000c114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c118:	89 10                	mov    DWORD PTR [eax],edx
c000c11a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c11e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c128:	90                   	nop
c000c129:	83 c4 0c             	add    esp,0xc
c000c12c:	c3                   	ret    
c000c12d:	90                   	nop
c000c12e:	66 90                	xchg   ax,ax

c000c130 <HardDiskController::~HardDiskController()>:
c000c130:	83 ec 0c             	sub    esp,0xc
c000c133:	ba c8 03 02 c0       	mov    edx,0xc00203c8
c000c138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c13c:	89 10                	mov    DWORD PTR [eax],edx
c000c13e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c142:	83 ec 0c             	sub    esp,0xc
c000c145:	50                   	push   eax
c000c146:	e8 6d fb ff ff       	call   c000bcb8 <Device::~Device()>
c000c14b:	83 c4 10             	add    esp,0x10
c000c14e:	90                   	nop
c000c14f:	83 c4 0c             	add    esp,0xc
c000c152:	c3                   	ret    
c000c153:	90                   	nop

c000c154 <HardDiskController::~HardDiskController()>:
c000c154:	83 ec 0c             	sub    esp,0xc
c000c157:	83 ec 0c             	sub    esp,0xc
c000c15a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c15e:	e8 cd ff ff ff       	call   c000c130 <HardDiskController::~HardDiskController()>
c000c163:	83 c4 10             	add    esp,0x10
c000c166:	83 ec 08             	sub    esp,0x8
c000c169:	68 58 01 00 00       	push   0x158
c000c16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c172:	e8 de e6 ff ff       	call   c000a855 <operator delete(void*, unsigned long)>
c000c177:	83 c4 10             	add    esp,0x10
c000c17a:	83 c4 0c             	add    esp,0xc
c000c17d:	c3                   	ret    

c000c17e <PhysicalDisk::eject()>:
c000c17e:	83 c8 ff             	or     eax,0xffffffff
c000c181:	c3                   	ret    

c000c182 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c182:	83 ec 0c             	sub    esp,0xc
c000c185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c189:	83 ec 08             	sub    esp,0x8
c000c18c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c190:	50                   	push   eax
c000c191:	e8 b8 fd ff ff       	call   c000bf4e <Device::Device(char const*)>
c000c196:	83 c4 10             	add    esp,0x10
c000c199:	ba f4 03 02 c0       	mov    edx,0xc00203f4
c000c19e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1a2:	89 10                	mov    DWORD PTR [eax],edx
c000c1a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1a8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c1af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1b3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1be:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c1c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c1d0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000c1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1da:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000c1e4:	90                   	nop
c000c1e5:	83 c4 0c             	add    esp,0xc
c000c1e8:	c3                   	ret    
c000c1e9:	90                   	nop

c000c1ea <PhysicalDisk::startCache()>:
c000c1ea:	56                   	push   esi
c000c1eb:	53                   	push   ebx
c000c1ec:	83 ec 10             	sub    esp,0x10
c000c1ef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c1f3:	6a 44                	push   0x44
c000c1f5:	e8 a0 b8 ff ff       	call   c0007a9a <malloc>
c000c1fa:	89 c6                	mov    esi,eax
c000c1fc:	58                   	pop    eax
c000c1fd:	5a                   	pop    edx
c000c1fe:	53                   	push   ebx
c000c1ff:	56                   	push   esi
c000c200:	e8 7b 17 00 00       	call   c000d980 <VCache::VCache(PhysicalDisk*)>
c000c205:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000c20b:	83 c4 14             	add    esp,0x14
c000c20e:	5b                   	pop    ebx
c000c20f:	5e                   	pop    esi
c000c210:	c3                   	ret    
c000c211:	90                   	nop

c000c212 <PhysicalDisk::~PhysicalDisk()>:
c000c212:	83 ec 0c             	sub    esp,0xc
c000c215:	ba f4 03 02 c0       	mov    edx,0xc00203f4
c000c21a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c21e:	89 10                	mov    DWORD PTR [eax],edx
c000c220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c224:	83 ec 0c             	sub    esp,0xc
c000c227:	50                   	push   eax
c000c228:	e8 8b fa ff ff       	call   c000bcb8 <Device::~Device()>
c000c22d:	83 c4 10             	add    esp,0x10
c000c230:	90                   	nop
c000c231:	83 c4 0c             	add    esp,0xc
c000c234:	c3                   	ret    
c000c235:	90                   	nop

c000c236 <PhysicalDisk::~PhysicalDisk()>:
c000c236:	83 ec 0c             	sub    esp,0xc
c000c239:	83 ec 0c             	sub    esp,0xc
c000c23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c240:	e8 cd ff ff ff       	call   c000c212 <PhysicalDisk::~PhysicalDisk()>
c000c245:	83 c4 10             	add    esp,0x10
c000c248:	83 ec 08             	sub    esp,0x8
c000c24b:	68 6c 01 00 00       	push   0x16c
c000c250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c254:	e8 fc e5 ff ff       	call   c000a855 <operator delete(void*, unsigned long)>
c000c259:	83 c4 10             	add    esp,0x10
c000c25c:	83 c4 0c             	add    esp,0xc
c000c25f:	c3                   	ret    

c000c260 <int_handler>:
c000c260:	55                   	push   ebp
c000c261:	57                   	push   edi
c000c262:	56                   	push   esi
c000c263:	53                   	push   ebx
c000c264:	83 ec 0c             	sub    esp,0xc
c000c267:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c26b:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c272:	74 0b                	je     c000c27f <int_handler+0x1f>
c000c274:	fa                   	cli    
c000c275:	f4                   	hlt    
c000c276:	80 3d 38 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027938,0x0
c000c27d:	75 f5                	jne    c000c274 <int_handler+0x14>
c000c27f:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c282:	8d 46 e0             	lea    eax,[esi-0x20]
c000c285:	83 f8 17             	cmp    eax,0x17
c000c288:	76 40                	jbe    c000c2ca <int_handler+0x6a>
c000c28a:	c1 e6 04             	shl    esi,0x4
c000c28d:	31 db                	xor    ebx,ebx
c000c28f:	8d ae c0 5f 02 c0    	lea    ebp,[esi-0x3ffda040]
c000c295:	81 c6 c0 4f 02 c0    	add    esi,0xc0024fc0
c000c29b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c29f:	85 c0                	test   eax,eax
c000c2a1:	74 13                	je     c000c2b6 <int_handler+0x56>
c000c2a3:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c2a6:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c2aa:	74 2c                	je     c000c2d8 <int_handler+0x78>
c000c2ac:	83 ec 08             	sub    esp,0x8
c000c2af:	52                   	push   edx
c000c2b0:	57                   	push   edi
c000c2b1:	ff d0                	call   eax
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	83 c3 01             	add    ebx,0x1
c000c2b9:	83 fb 04             	cmp    ebx,0x4
c000c2bc:	75 dd                	jne    c000c29b <int_handler+0x3b>
c000c2be:	83 c4 0c             	add    esp,0xc
c000c2c1:	31 c0                	xor    eax,eax
c000c2c3:	5b                   	pop    ebx
c000c2c4:	31 d2                	xor    edx,edx
c000c2c6:	5e                   	pop    esi
c000c2c7:	5f                   	pop    edi
c000c2c8:	5d                   	pop    ebp
c000c2c9:	c3                   	ret    
c000c2ca:	83 ec 0c             	sub    esp,0xc
c000c2cd:	50                   	push   eax
c000c2ce:	e8 82 af 00 00       	call   c0017255 <HalEndOfInterrupt(int)>
c000c2d3:	83 c4 10             	add    esp,0x10
c000c2d6:	eb b2                	jmp    c000c28a <int_handler+0x2a>
c000c2d8:	83 ec 08             	sub    esp,0x8
c000c2db:	52                   	push   edx
c000c2dc:	57                   	push   edi
c000c2dd:	ff d0                	call   eax
c000c2df:	83 c4 10             	add    esp,0x10
c000c2e2:	83 c4 0c             	add    esp,0xc
c000c2e5:	5b                   	pop    ebx
c000c2e6:	5e                   	pop    esi
c000c2e7:	5f                   	pop    edi
c000c2e8:	5d                   	pop    ebp
c000c2e9:	c3                   	ret    

c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c2ea:	56                   	push   esi
c000c2eb:	31 c0                	xor    eax,eax
c000c2ed:	53                   	push   ebx
c000c2ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c2f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c2f6:	89 ca                	mov    edx,ecx
c000c2f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c2fc:	c1 e2 04             	shl    edx,0x4
c000c2ff:	83 bc 82 c0 5f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffda040],0x0
c000c307:	74 17                	je     c000c320 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000c309:	83 c0 01             	add    eax,0x1
c000c30c:	83 f8 04             	cmp    eax,0x4
c000c30f:	75 ee                	jne    c000c2ff <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c311:	c7 44 24 0c 24 04 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020424
c000c319:	5b                   	pop    ebx
c000c31a:	5e                   	pop    esi
c000c31b:	e9 3f 45 00 00       	jmp    c001085f <KePanic(char const*)>
c000c320:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c323:	89 1c 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],ebx
c000c32a:	89 34 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],esi
c000c331:	5b                   	pop    ebx
c000c332:	5e                   	pop    esi
c000c333:	c3                   	ret    

c000c334 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c334:	57                   	push   edi
c000c335:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c33b:	56                   	push   esi
c000c33c:	53                   	push   ebx
c000c33d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c341:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c345:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c34c:	74 54                	je     c000c3a2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000c34e:	89 c7                	mov    edi,eax
c000c350:	84 c0                	test   al,al
c000c352:	74 1d                	je     c000c371 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000c354:	83 fe 0f             	cmp    esi,0xf
c000c357:	0f 8f d5 00 00 00    	jg     c000c432 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000c35d:	0f b6 b6 60 1e 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffde1a0]
c000c364:	0f b7 bc 36 60 77 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd88a0]
c000c36c:	d1 ef                	shr    edi,1
c000c36e:	83 e7 01             	and    edi,0x1
c000c371:	83 ec 08             	sub    esp,0x8
c000c374:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c379:	31 db                	xor    ebx,ebx
c000c37b:	50                   	push   eax
c000c37c:	68 31 04 02 c0       	push   0xc0020431
c000c381:	e8 fc e5 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c000c386:	83 c4 10             	add    esp,0x10
c000c389:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c000c38e:	85 c0                	test   eax,eax
c000c390:	7f 55                	jg     c000c3e7 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000c392:	83 ec 0c             	sub    esp,0xc
c000c395:	68 48 04 02 c0       	push   0xc0020448
c000c39a:	e8 c0 44 00 00       	call   c001085f <KePanic(char const*)>
c000c39f:	83 c4 10             	add    esp,0x10
c000c3a2:	8d 7e 20             	lea    edi,[esi+0x20]
c000c3a5:	89 f8                	mov    eax,edi
c000c3a7:	31 d2                	xor    edx,edx
c000c3a9:	c1 e0 04             	shl    eax,0x4
c000c3ac:	8b 8c 90 c0 5f 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffda040]
c000c3b3:	85 c9                	test   ecx,ecx
c000c3b5:	0f 84 8e 00 00 00    	je     c000c449 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000c3bb:	83 c2 01             	add    edx,0x1
c000c3be:	83 fa 04             	cmp    edx,0x4
c000c3c1:	75 e9                	jne    c000c3ac <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000c3c3:	83 ec 0c             	sub    esp,0xc
c000c3c6:	68 9c 04 02 c0       	push   0xc002049c
c000c3cb:	e8 8f 44 00 00       	call   c001085f <KePanic(char const*)>
c000c3d0:	83 c4 10             	add    esp,0x10
c000c3d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c3d8:	5b                   	pop    ebx
c000c3d9:	5e                   	pop    esi
c000c3da:	5f                   	pop    edi
c000c3db:	c3                   	ret    
c000c3dc:	83 c3 01             	add    ebx,0x1
c000c3df:	39 1d 60 8b 02 c0    	cmp    DWORD PTR ds:0xc0028b60,ebx
c000c3e5:	7e ab                	jle    c000c392 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000c3e7:	83 ec 08             	sub    esp,0x8
c000c3ea:	8b 04 9d 80 8b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7480]
c000c3f1:	56                   	push   esi
c000c3f2:	50                   	push   eax
c000c3f3:	e8 7a 15 01 00       	call   c001d972 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c3f8:	83 c4 10             	add    esp,0x10
c000c3fb:	84 c0                	test   al,al
c000c3fd:	74 dd                	je     c000c3dc <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000c3ff:	83 ec 04             	sub    esp,0x4
c000c402:	89 f8                	mov    eax,edi
c000c404:	8b 1c 9d 80 8b 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd7480]
c000c40b:	0f b6 f8             	movzx  edi,al
c000c40e:	57                   	push   edi
c000c40f:	8d 7e 20             	lea    edi,[esi+0x20]
c000c412:	6a 00                	push   0x0
c000c414:	89 f8                	mov    eax,edi
c000c416:	0f b6 c0             	movzx  eax,al
c000c419:	50                   	push   eax
c000c41a:	89 f0                	mov    eax,esi
c000c41c:	6a 00                	push   0x0
c000c41e:	0f b6 c0             	movzx  eax,al
c000c421:	6a 00                	push   0x0
c000c423:	50                   	push   eax
c000c424:	53                   	push   ebx
c000c425:	e8 b4 16 01 00       	call   c001dade <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c42a:	83 c4 20             	add    esp,0x20
c000c42d:	e9 73 ff ff ff       	jmp    c000c3a5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000c432:	83 ec 0c             	sub    esp,0xc
c000c435:	31 ff                	xor    edi,edi
c000c437:	68 64 04 02 c0       	push   0xc0020464
c000c43c:	e8 1e 44 00 00       	call   c001085f <KePanic(char const*)>
c000c441:	83 c4 10             	add    esp,0x10
c000c444:	e9 28 ff ff ff       	jmp    c000c371 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000c449:	8d 04 ba             	lea    eax,[edx+edi*4]
c000c44c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c450:	89 14 85 c0 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda040],edx
c000c457:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c45b:	5b                   	pop    ebx
c000c45c:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c463:	89 f0                	mov    eax,esi
c000c465:	5e                   	pop    esi
c000c466:	5f                   	pop    edi
c000c467:	c3                   	ret    

c000c468 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c46c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c470:	c1 e0 04             	shl    eax,0x4
c000c473:	8d 50 10             	lea    edx,[eax+0x10]
c000c476:	39 88 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ecx
c000c47c:	74 08                	je     c000c486 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c47e:	83 c0 04             	add    eax,0x4
c000c481:	39 d0                	cmp    eax,edx
c000c483:	75 f1                	jne    c000c476 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c485:	c3                   	ret    
c000c486:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c490:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c49a:	eb e2                	jmp    c000c47e <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c49c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c49c:	53                   	push   ebx
c000c49d:	83 ec 08             	sub    esp,0x8
c000c4a0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c4a4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c4a9:	74 0e                	je     c000c4b9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c4ab:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000c4b0:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c4b7:	75 37                	jne    c000c4f0 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c4b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4bd:	83 c0 20             	add    eax,0x20
c000c4c0:	c1 e0 04             	shl    eax,0x4
c000c4c3:	8d 50 10             	lea    edx,[eax+0x10]
c000c4c6:	39 98 c0 5f 02 c0    	cmp    DWORD PTR [eax-0x3ffda040],ebx
c000c4cc:	74 0c                	je     c000c4da <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c4ce:	83 c0 04             	add    eax,0x4
c000c4d1:	39 d0                	cmp    eax,edx
c000c4d3:	75 f1                	jne    c000c4c6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c4d5:	83 c4 08             	add    esp,0x8
c000c4d8:	5b                   	pop    ebx
c000c4d9:	c3                   	ret    
c000c4da:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c4e4:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c4ee:	eb de                	jmp    c000c4ce <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c4f0:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c4f5:	7f 11                	jg     c000c508 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000c4f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4fb:	0f b6 80 60 1e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde1a0]
c000c502:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c506:	eb b1                	jmp    c000c4b9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c508:	83 ec 0c             	sub    esp,0xc
c000c50b:	68 55 04 02 c0       	push   0xc0020455
c000c510:	e8 4a 43 00 00       	call   c001085f <KePanic(char const*)>
c000c515:	83 c4 10             	add    esp,0x10
c000c518:	eb 9f                	jmp    c000c4b9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c51a <setupINTS()>:
c000c51a:	31 c0                	xor    eax,eax
c000c51c:	c7 80 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda040],0x0
c000c526:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c530:	c7 80 c4 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda03c],0x0
c000c53a:	c7 80 c4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb03c],0x0
c000c544:	c7 80 c8 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda038],0x0
c000c54e:	c7 80 c8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb038],0x0
c000c558:	c7 80 cc 5f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffda034],0x0
c000c562:	c7 80 cc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb034],0x0
c000c56c:	83 c0 10             	add    eax,0x10
c000c56f:	3d 00 10 00 00       	cmp    eax,0x1000
c000c574:	75 a6                	jne    c000c51c <setupINTS()+0x2>
c000c576:	c3                   	ret    

c000c577 <convertLegacyIRQNumber(int)>:
c000c577:	83 ec 0c             	sub    esp,0xc
c000c57a:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000c580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c584:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c58b:	74 0c                	je     c000c599 <convertLegacyIRQNumber(int)+0x22>
c000c58d:	83 f8 0f             	cmp    eax,0xf
c000c590:	7f 0b                	jg     c000c59d <convertLegacyIRQNumber(int)+0x26>
c000c592:	0f b6 80 60 1e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde1a0]
c000c599:	83 c4 0c             	add    esp,0xc
c000c59c:	c3                   	ret    
c000c59d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5a1:	83 ec 0c             	sub    esp,0xc
c000c5a4:	68 64 04 02 c0       	push   0xc0020464
c000c5a9:	e8 b1 42 00 00       	call   c001085f <KePanic(char const*)>
c000c5ae:	83 c4 10             	add    esp,0x10
c000c5b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c5b5:	83 c4 0c             	add    esp,0xc
c000c5b8:	c3                   	ret    
c000c5b9:	90                   	nop

c000c5ba <startGUI(void*)>:
c000c5ba:	55                   	push   ebp
c000c5bb:	89 e5                	mov    ebp,esp
c000c5bd:	53                   	push   ebx
c000c5be:	83 ec 04             	sub    esp,0x4
c000c5c1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c5c6:	83 e8 01             	sub    eax,0x1
c000c5c9:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c5ce:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c5d3:	85 c0                	test   eax,eax
c000c5d5:	75 01                	jne    c000c5d8 <startGUI(void*)+0x1e>
c000c5d7:	fb                   	sti    
c000c5d8:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c5de:	83 ec 08             	sub    esp,0x8
c000c5e1:	6a 01                	push   0x1
c000c5e3:	68 c1 04 02 c0       	push   0xc00204c1
c000c5e8:	e8 c9 7f 00 00       	call   c00145b6 <Thr::loadDLL(char const*, bool)>
c000c5ed:	83 c4 10             	add    esp,0x10
c000c5f0:	83 ec 08             	sub    esp,0x8
c000c5f3:	53                   	push   ebx
c000c5f4:	50                   	push   eax
c000c5f5:	e8 ed 81 00 00       	call   c00147e7 <Thr::executeDLL(unsigned long, void*)>
c000c5fa:	83 c4 10             	add    esp,0x10
c000c5fd:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c603:	83 ec 08             	sub    esp,0x8
c000c606:	6a 01                	push   0x1
c000c608:	68 db 04 02 c0       	push   0xc00204db
c000c60d:	e8 a4 7f 00 00       	call   c00145b6 <Thr::loadDLL(char const*, bool)>
c000c612:	83 c4 10             	add    esp,0x10
c000c615:	83 ec 08             	sub    esp,0x8
c000c618:	53                   	push   ebx
c000c619:	50                   	push   eax
c000c61a:	e8 c8 81 00 00       	call   c00147e7 <Thr::executeDLL(unsigned long, void*)>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	90                   	nop
c000c623:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c626:	c9                   	leave  
c000c627:	c3                   	ret    

c000c628 <startGUIVESA(void*)>:
c000c628:	55                   	push   ebp
c000c629:	89 e5                	mov    ebp,esp
c000c62b:	53                   	push   ebx
c000c62c:	83 ec 04             	sub    esp,0x4
c000c62f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c634:	83 e8 01             	sub    eax,0x1
c000c637:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c63c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c641:	85 c0                	test   eax,eax
c000c643:	75 01                	jne    c000c646 <startGUIVESA(void*)+0x1e>
c000c645:	fb                   	sti    
c000c646:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c64c:	83 ec 08             	sub    esp,0x8
c000c64f:	6a 01                	push   0x1
c000c651:	68 f9 04 02 c0       	push   0xc00204f9
c000c656:	e8 5b 7f 00 00       	call   c00145b6 <Thr::loadDLL(char const*, bool)>
c000c65b:	83 c4 10             	add    esp,0x10
c000c65e:	83 ec 08             	sub    esp,0x8
c000c661:	53                   	push   ebx
c000c662:	50                   	push   eax
c000c663:	e8 7f 81 00 00       	call   c00147e7 <Thr::executeDLL(unsigned long, void*)>
c000c668:	83 c4 10             	add    esp,0x10
c000c66b:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000c671:	83 ec 08             	sub    esp,0x8
c000c674:	6a 01                	push   0x1
c000c676:	68 db 04 02 c0       	push   0xc00204db
c000c67b:	e8 36 7f 00 00       	call   c00145b6 <Thr::loadDLL(char const*, bool)>
c000c680:	83 c4 10             	add    esp,0x10
c000c683:	83 ec 08             	sub    esp,0x8
c000c686:	53                   	push   ebx
c000c687:	50                   	push   eax
c000c688:	e8 5a 81 00 00       	call   c00147e7 <Thr::executeDLL(unsigned long, void*)>
c000c68d:	83 c4 10             	add    esp,0x10
c000c690:	90                   	nop
c000c691:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c694:	c9                   	leave  
c000c695:	c3                   	ret    

c000c696 <sendKeyToTerminal(unsigned char)>:
c000c696:	55                   	push   ebp
c000c697:	89 e5                	mov    ebp,esp
c000c699:	83 ec 28             	sub    esp,0x28
c000c69c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c69f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c6a2:	a1 04 4f 02 c0       	mov    eax,ds:0xc0024f04
c000c6a7:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000c6ab:	83 ec 08             	sub    esp,0x8
c000c6ae:	52                   	push   edx
c000c6af:	50                   	push   eax
c000c6b0:	e8 d7 c6 ff ff       	call   c0008d8c <VgaText::receiveKey(unsigned char)>
c000c6b5:	83 c4 10             	add    esp,0x10
c000c6b8:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c6bc:	83 f8 0a             	cmp    eax,0xa
c000c6bf:	74 16                	je     c000c6d7 <sendKeyToTerminal(unsigned char)+0x41>
c000c6c1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c6c5:	83 f8 03             	cmp    eax,0x3
c000c6c8:	74 0d                	je     c000c6d7 <sendKeyToTerminal(unsigned char)+0x41>
c000c6ca:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000c6ce:	83 f8 1c             	cmp    eax,0x1c
c000c6d1:	0f 85 97 00 00 00    	jne    c000c76e <sendKeyToTerminal(unsigned char)+0xd8>
c000c6d7:	fa                   	cli    
c000c6d8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c6dd:	83 c0 01             	add    eax,0x1
c000c6e0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c6e5:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c6ea:	83 c0 01             	add    eax,0x1
c000c6ed:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c6f2:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000c6f7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c6fa:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000c704:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c708:	74 1f                	je     c000c729 <sendKeyToTerminal(unsigned char)+0x93>
c000c70a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c70d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c710:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c713:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c716:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c719:	83 ec 0c             	sub    esp,0xc
c000c71c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c71f:	e8 04 8e 00 00       	call   c0015528 <unblockTask(ThreadControlBlock*)>
c000c724:	83 c4 10             	add    esp,0x10
c000c727:	eb db                	jmp    c000c704 <sendKeyToTerminal(unsigned char)+0x6e>
c000c729:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c72e:	83 e8 01             	sub    eax,0x1
c000c731:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000c736:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000c73b:	85 c0                	test   eax,eax
c000c73d:	75 18                	jne    c000c757 <sendKeyToTerminal(unsigned char)+0xc1>
c000c73f:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c000c744:	85 c0                	test   eax,eax
c000c746:	74 0f                	je     c000c757 <sendKeyToTerminal(unsigned char)+0xc1>
c000c748:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000c752:	e8 b9 88 00 00       	call   c0015010 <schedule()>
c000c757:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c75c:	83 e8 01             	sub    eax,0x1
c000c75f:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000c764:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000c769:	85 c0                	test   eax,eax
c000c76b:	75 01                	jne    c000c76e <sendKeyToTerminal(unsigned char)+0xd8>
c000c76d:	fb                   	sti    
c000c76e:	90                   	nop
c000c76f:	c9                   	leave  
c000c770:	c3                   	ret    

c000c771 <sendKeyboardToken(KeyboardToken)>:
c000c771:	55                   	push   ebp
c000c772:	89 e5                	mov    ebp,esp
c000c774:	83 ec 18             	sub    esp,0x18
c000c777:	e8 33 41 00 00       	call   c00108af <Krnl::userIOReceived()>
c000c77c:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c77f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c782:	0f b7 c0             	movzx  eax,ax
c000c785:	83 f2 01             	xor    edx,0x1
c000c788:	88 90 e0 6f 02 c0    	mov    BYTE PTR [eax-0x3ffd9020],dl
c000c78e:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000c793:	85 c0                	test   eax,eax
c000c795:	74 24                	je     c000c7bb <sendKeyboardToken(KeyboardToken)+0x4a>
c000c797:	8b 0d c8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fc8
c000c79d:	83 ec 04             	sub    esp,0x4
c000c7a0:	68 e0 6f 02 c0       	push   0xc0026fe0
c000c7a5:	83 ec 08             	sub    esp,0x8
c000c7a8:	89 e2                	mov    edx,esp
c000c7aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7ad:	89 02                	mov    DWORD PTR [edx],eax
c000c7af:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c7b2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c7b6:	ff d1                	call   ecx
c000c7b8:	83 c4 10             	add    esp,0x10
c000c7bb:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c7bf:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c7c2:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c7c7:	0f b6 d2             	movzx  edx,dl
c000c7ca:	0f b6 c0             	movzx  eax,al
c000c7cd:	39 c2                	cmp    edx,eax
c000c7cf:	74 1c                	je     c000c7ed <sendKeyboardToken(KeyboardToken)+0x7c>
c000c7d1:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c7d4:	a2 e8 73 02 c0       	mov    ds:0xc00273e8,al
c000c7d9:	a0 e8 73 02 c0       	mov    al,ds:0xc00273e8
c000c7de:	0f b6 c0             	movzx  eax,al
c000c7e1:	83 ec 0c             	sub    esp,0xc
c000c7e4:	50                   	push   eax
c000c7e5:	e8 ee bc ff ff       	call   c00084d8 <setTerminalScrollLock(bool)>
c000c7ea:	83 c4 10             	add    esp,0x10
c000c7ed:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c7f0:	0f b6 c0             	movzx  eax,al
c000c7f3:	85 c0                	test   eax,eax
c000c7f5:	0f 84 da 00 00 00    	je     c000c8d5 <sendKeyboardToken(KeyboardToken)+0x164>
c000c7fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7fe:	0f b7 c0             	movzx  eax,ax
c000c801:	3d 18 03 00 00       	cmp    eax,0x318
c000c806:	75 06                	jne    c000c80e <sendKeyboardToken(KeyboardToken)+0x9d>
c000c808:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c80e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c811:	0f b7 c0             	movzx  eax,ax
c000c814:	3d 19 03 00 00       	cmp    eax,0x319
c000c819:	75 06                	jne    c000c821 <sendKeyboardToken(KeyboardToken)+0xb0>
c000c81b:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c824:	0f b7 c0             	movzx  eax,ax
c000c827:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c82c:	75 06                	jne    c000c834 <sendKeyboardToken(KeyboardToken)+0xc3>
c000c82e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c834:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c837:	0f b7 c0             	movzx  eax,ax
c000c83a:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c83f:	75 06                	jne    c000c847 <sendKeyboardToken(KeyboardToken)+0xd6>
c000c841:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c847:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c84a:	0f b7 c0             	movzx  eax,ax
c000c84d:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c852:	75 06                	jne    c000c85a <sendKeyboardToken(KeyboardToken)+0xe9>
c000c854:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c85a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c85d:	0f b7 c0             	movzx  eax,ax
c000c860:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c865:	75 06                	jne    c000c86d <sendKeyboardToken(KeyboardToken)+0xfc>
c000c867:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c86d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c870:	0f b7 c0             	movzx  eax,ax
c000c873:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c878:	75 06                	jne    c000c880 <sendKeyboardToken(KeyboardToken)+0x10f>
c000c87a:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c880:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c883:	0f b7 c0             	movzx  eax,ax
c000c886:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c88b:	75 06                	jne    c000c893 <sendKeyboardToken(KeyboardToken)+0x122>
c000c88d:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c896:	0f b7 c0             	movzx  eax,ax
c000c899:	3d 20 03 00 00       	cmp    eax,0x320
c000c89e:	75 06                	jne    c000c8a6 <sendKeyboardToken(KeyboardToken)+0x135>
c000c8a0:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c8a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8a9:	0f b7 c0             	movzx  eax,ax
c000c8ac:	3d 21 03 00 00       	cmp    eax,0x321
c000c8b1:	75 06                	jne    c000c8b9 <sendKeyboardToken(KeyboardToken)+0x148>
c000c8b3:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c8b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8bc:	0f b7 c0             	movzx  eax,ax
c000c8bf:	3d 22 03 00 00       	cmp    eax,0x322
c000c8c4:	0f 85 f1 00 00 00    	jne    c000c9bb <sendKeyboardToken(KeyboardToken)+0x24a>
c000c8ca:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c8d0:	e9 e6 00 00 00       	jmp    c000c9bb <sendKeyboardToken(KeyboardToken)+0x24a>
c000c8d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8d8:	0f b7 c0             	movzx  eax,ax
c000c8db:	3d 18 03 00 00       	cmp    eax,0x318
c000c8e0:	75 0a                	jne    c000c8ec <sendKeyboardToken(KeyboardToken)+0x17b>
c000c8e2:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c8e8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c8ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8ef:	0f b7 c0             	movzx  eax,ax
c000c8f2:	3d 19 03 00 00       	cmp    eax,0x319
c000c8f7:	75 0a                	jne    c000c903 <sendKeyboardToken(KeyboardToken)+0x192>
c000c8f9:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c8ff:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c906:	0f b7 c0             	movzx  eax,ax
c000c909:	3d 1a 03 00 00       	cmp    eax,0x31a
c000c90e:	75 0a                	jne    c000c91a <sendKeyboardToken(KeyboardToken)+0x1a9>
c000c910:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c916:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c91a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c91d:	0f b7 c0             	movzx  eax,ax
c000c920:	3d 1b 03 00 00       	cmp    eax,0x31b
c000c925:	75 0a                	jne    c000c931 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000c927:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c92d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c931:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c934:	0f b7 c0             	movzx  eax,ax
c000c937:	3d 1c 03 00 00       	cmp    eax,0x31c
c000c93c:	75 0a                	jne    c000c948 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000c93e:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c944:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c948:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c94b:	0f b7 c0             	movzx  eax,ax
c000c94e:	3d 1d 03 00 00       	cmp    eax,0x31d
c000c953:	75 0a                	jne    c000c95f <sendKeyboardToken(KeyboardToken)+0x1ee>
c000c955:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c95b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c95f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c962:	0f b7 c0             	movzx  eax,ax
c000c965:	3d 1e 03 00 00       	cmp    eax,0x31e
c000c96a:	75 0a                	jne    c000c976 <sendKeyboardToken(KeyboardToken)+0x205>
c000c96c:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c972:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c976:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c979:	0f b7 c0             	movzx  eax,ax
c000c97c:	3d 1f 03 00 00       	cmp    eax,0x31f
c000c981:	75 0a                	jne    c000c98d <sendKeyboardToken(KeyboardToken)+0x21c>
c000c983:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c989:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c98d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c990:	0f b7 c0             	movzx  eax,ax
c000c993:	3d 20 03 00 00       	cmp    eax,0x320
c000c998:	75 0a                	jne    c000c9a4 <sendKeyboardToken(KeyboardToken)+0x233>
c000c99a:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c9a0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a7:	0f b7 c0             	movzx  eax,ax
c000c9aa:	3d 21 03 00 00       	cmp    eax,0x321
c000c9af:	75 0a                	jne    c000c9bb <sendKeyboardToken(KeyboardToken)+0x24a>
c000c9b1:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c9b7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c9bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9be:	0f b7 c0             	movzx  eax,ax
c000c9c1:	3d 00 02 00 00       	cmp    eax,0x200
c000c9c6:	75 2f                	jne    c000c9f7 <sendKeyboardToken(KeyboardToken)+0x286>
c000c9c8:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000c9cd:	83 f0 01             	xor    eax,0x1
c000c9d0:	0f b6 c0             	movzx  eax,al
c000c9d3:	85 c0                	test   eax,eax
c000c9d5:	74 20                	je     c000c9f7 <sendKeyboardToken(KeyboardToken)+0x286>
c000c9d7:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000c9dc:	6a 01                	push   0x1
c000c9de:	6a 00                	push   0x0
c000c9e0:	68 ba c5 00 c0       	push   0xc000c5ba
c000c9e5:	50                   	push   eax
c000c9e6:	e8 d5 83 00 00       	call   c0014dc0 <Process::createThread(void (*)(void*), void*, int)>
c000c9eb:	83 c4 10             	add    esp,0x10
c000c9ee:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000c9f5:	eb 3a                	jmp    c000ca31 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000c9f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9fa:	0f b7 c0             	movzx  eax,ax
c000c9fd:	3d 01 02 00 00       	cmp    eax,0x201
c000ca02:	75 2d                	jne    c000ca31 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca04:	a0 e0 73 02 c0       	mov    al,ds:0xc00273e0
c000ca09:	83 f0 01             	xor    eax,0x1
c000ca0c:	0f b6 c0             	movzx  eax,al
c000ca0f:	85 c0                	test   eax,eax
c000ca11:	74 1e                	je     c000ca31 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000ca13:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000ca18:	6a 01                	push   0x1
c000ca1a:	6a 00                	push   0x0
c000ca1c:	68 28 c6 00 c0       	push   0xc000c628
c000ca21:	50                   	push   eax
c000ca22:	e8 99 83 00 00       	call   c0014dc0 <Process::createThread(void (*)(void*), void*, int)>
c000ca27:	83 c4 10             	add    esp,0x10
c000ca2a:	c6 05 e0 73 02 c0 01 	mov    BYTE PTR ds:0xc00273e0,0x1
c000ca31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca34:	0f b7 c0             	movzx  eax,ax
c000ca37:	3d 25 03 00 00       	cmp    eax,0x325
c000ca3c:	75 06                	jne    c000ca44 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000ca3e:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000ca44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca47:	0f b7 c0             	movzx  eax,ax
c000ca4a:	3d 24 03 00 00       	cmp    eax,0x324
c000ca4f:	75 06                	jne    c000ca57 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000ca51:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000ca57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca5a:	0f b7 c0             	movzx  eax,ax
c000ca5d:	3d 23 03 00 00       	cmp    eax,0x323
c000ca62:	75 06                	jne    c000ca6a <sendKeyboardToken(KeyboardToken)+0x2f9>
c000ca64:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000ca6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca6d:	0f b7 c0             	movzx  eax,ax
c000ca70:	3d 26 03 00 00       	cmp    eax,0x326
c000ca75:	75 06                	jne    c000ca7d <sendKeyboardToken(KeyboardToken)+0x30c>
c000ca77:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000ca7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca80:	0f b7 c0             	movzx  eax,ax
c000ca83:	3d 27 03 00 00       	cmp    eax,0x327
c000ca88:	75 06                	jne    c000ca90 <sendKeyboardToken(KeyboardToken)+0x31f>
c000ca8a:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000ca90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca93:	0f b7 c0             	movzx  eax,ax
c000ca96:	3d 22 03 00 00       	cmp    eax,0x322
c000ca9b:	75 06                	jne    c000caa3 <sendKeyboardToken(KeyboardToken)+0x332>
c000ca9d:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000caa3:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000caa7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000caaa:	83 f0 01             	xor    eax,0x1
c000caad:	0f b6 c0             	movzx  eax,al
c000cab0:	85 c0                	test   eax,eax
c000cab2:	74 7c                	je     c000cb30 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000cab4:	a0 e1 70 02 c0       	mov    al,ds:0xc00270e1
c000cab9:	0f b6 c0             	movzx  eax,al
c000cabc:	85 c0                	test   eax,eax
c000cabe:	74 43                	je     c000cb03 <sendKeyboardToken(KeyboardToken)+0x392>
c000cac0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cac4:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000cac8:	85 c0                	test   eax,eax
c000caca:	74 2b                	je     c000caf7 <sendKeyboardToken(KeyboardToken)+0x386>
c000cacc:	8b 15 e4 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273e4
c000cad2:	89 d0                	mov    eax,edx
c000cad4:	c1 e0 02             	shl    eax,0x2
c000cad7:	01 d0                	add    eax,edx
c000cad9:	01 c0                	add    eax,eax
c000cadb:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000cae0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cae3:	0f b7 c0             	movzx  eax,ax
c000cae6:	8d 50 d0             	lea    edx,[eax-0x30]
c000cae9:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000caee:	01 d0                	add    eax,edx
c000caf0:	a3 e4 73 02 c0       	mov    ds:0xc00273e4,eax
c000caf5:	eb 71                	jmp    c000cb68 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000caf7:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb01:	eb 65                	jmp    c000cb68 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb03:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb08:	85 c0                	test   eax,eax
c000cb0a:	74 18                	je     c000cb24 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000cb0c:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb11:	0f b6 c0             	movzx  eax,al
c000cb14:	83 ec 0c             	sub    esp,0xc
c000cb17:	50                   	push   eax
c000cb18:	e8 79 fb ff ff       	call   c000c696 <sendKeyToTerminal(unsigned char)>
c000cb1d:	83 c4 10             	add    esp,0x10
c000cb20:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb24:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb2e:	eb 38                	jmp    c000cb68 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb33:	0f b7 c0             	movzx  eax,ax
c000cb36:	3d 01 01 00 00       	cmp    eax,0x101
c000cb3b:	75 2b                	jne    c000cb68 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000cb3d:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb42:	85 c0                	test   eax,eax
c000cb44:	74 18                	je     c000cb5e <sendKeyboardToken(KeyboardToken)+0x3ed>
c000cb46:	a1 e4 73 02 c0       	mov    eax,ds:0xc00273e4
c000cb4b:	0f b6 c0             	movzx  eax,al
c000cb4e:	83 ec 0c             	sub    esp,0xc
c000cb51:	50                   	push   eax
c000cb52:	e8 3f fb ff ff       	call   c000c696 <sendKeyToTerminal(unsigned char)>
c000cb57:	83 c4 10             	add    esp,0x10
c000cb5a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000cb5e:	c7 05 e4 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273e4,0x0
c000cb68:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cb6b:	83 f0 01             	xor    eax,0x1
c000cb6e:	0f b6 c0             	movzx  eax,al
c000cb71:	85 c0                	test   eax,eax
c000cb73:	74 5a                	je     c000cbcf <sendKeyboardToken(KeyboardToken)+0x45e>
c000cb75:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cb78:	83 f0 01             	xor    eax,0x1
c000cb7b:	0f b6 c0             	movzx  eax,al
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	74 4d                	je     c000cbcf <sendKeyboardToken(KeyboardToken)+0x45e>
c000cb82:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cb87:	83 f0 01             	xor    eax,0x1
c000cb8a:	0f b6 c0             	movzx  eax,al
c000cb8d:	85 c0                	test   eax,eax
c000cb8f:	74 3e                	je     c000cbcf <sendKeyboardToken(KeyboardToken)+0x45e>
c000cb91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb94:	0f b7 c0             	movzx  eax,ax
c000cb97:	83 f8 1f             	cmp    eax,0x1f
c000cb9a:	76 0b                	jbe    c000cba7 <sendKeyboardToken(KeyboardToken)+0x436>
c000cb9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cb9f:	0f b7 c0             	movzx  eax,ax
c000cba2:	83 f8 7e             	cmp    eax,0x7e
c000cba5:	76 16                	jbe    c000cbbd <sendKeyboardToken(KeyboardToken)+0x44c>
c000cba7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbaa:	0f b7 c0             	movzx  eax,ax
c000cbad:	83 f8 0a             	cmp    eax,0xa
c000cbb0:	74 0b                	je     c000cbbd <sendKeyboardToken(KeyboardToken)+0x44c>
c000cbb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbb5:	0f b7 c0             	movzx  eax,ax
c000cbb8:	83 f8 08             	cmp    eax,0x8
c000cbbb:	75 12                	jne    c000cbcf <sendKeyboardToken(KeyboardToken)+0x45e>
c000cbbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbc0:	0f b6 c0             	movzx  eax,al
c000cbc3:	83 ec 0c             	sub    esp,0xc
c000cbc6:	50                   	push   eax
c000cbc7:	e8 ca fa ff ff       	call   c000c696 <sendKeyToTerminal(unsigned char)>
c000cbcc:	83 c4 10             	add    esp,0x10
c000cbcf:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000cbd2:	83 f0 01             	xor    eax,0x1
c000cbd5:	0f b6 c0             	movzx  eax,al
c000cbd8:	85 c0                	test   eax,eax
c000cbda:	74 5d                	je     c000cc39 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbdc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cbdf:	83 f0 01             	xor    eax,0x1
c000cbe2:	0f b6 c0             	movzx  eax,al
c000cbe5:	85 c0                	test   eax,eax
c000cbe7:	74 50                	je     c000cc39 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbe9:	a0 e0 70 02 c0       	mov    al,ds:0xc00270e0
c000cbee:	0f b6 c0             	movzx  eax,al
c000cbf1:	85 c0                	test   eax,eax
c000cbf3:	74 44                	je     c000cc39 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cbf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cbf8:	0f b7 c0             	movzx  eax,ax
c000cbfb:	83 f8 3f             	cmp    eax,0x3f
c000cbfe:	76 39                	jbe    c000cc39 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc03:	0f b7 c0             	movzx  eax,ax
c000cc06:	83 f8 7f             	cmp    eax,0x7f
c000cc09:	77 2e                	ja     c000cc39 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000cc0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc0e:	88 c2                	mov    dl,al
c000cc10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc13:	0f b7 c0             	movzx  eax,ax
c000cc16:	83 f8 5f             	cmp    eax,0x5f
c000cc19:	76 04                	jbe    c000cc1f <sendKeyboardToken(KeyboardToken)+0x4ae>
c000cc1b:	b0 20                	mov    al,0x20
c000cc1d:	eb 02                	jmp    c000cc21 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000cc1f:	b0 00                	mov    al,0x0
c000cc21:	89 d1                	mov    ecx,edx
c000cc23:	29 c1                	sub    ecx,eax
c000cc25:	89 c8                	mov    eax,ecx
c000cc27:	83 e8 40             	sub    eax,0x40
c000cc2a:	0f b6 c0             	movzx  eax,al
c000cc2d:	83 ec 0c             	sub    esp,0xc
c000cc30:	50                   	push   eax
c000cc31:	e8 60 fa ff ff       	call   c000c696 <sendKeyToTerminal(unsigned char)>
c000cc36:	83 c4 10             	add    esp,0x10
c000cc39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc3c:	0f b7 c0             	movzx  eax,ax
c000cc3f:	3d 00 03 00 00       	cmp    eax,0x300
c000cc44:	75 12                	jne    c000cc58 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cc46:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000cc49:	83 f0 01             	xor    eax,0x1
c000cc4c:	0f b6 c0             	movzx  eax,al
c000cc4f:	85 c0                	test   eax,eax
c000cc51:	74 05                	je     c000cc58 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000cc53:	e8 81 b8 ff ff       	call   c00084d9 <doTerminalCycle()>
c000cc58:	90                   	nop
c000cc59:	c9                   	leave  
c000cc5a:	c3                   	ret    

c000cc5b <clearInternalKeybuffer(VgaText*)>:
c000cc5b:	55                   	push   ebp
c000cc5c:	89 e5                	mov    ebp,esp
c000cc5e:	83 ec 08             	sub    esp,0x8
c000cc61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc64:	05 02 01 00 00       	add    eax,0x102
c000cc69:	83 ec 0c             	sub    esp,0xc
c000cc6c:	50                   	push   eax
c000cc6d:	e8 fe 38 ff ff       	call   c0000570 <strlen>
c000cc72:	83 c4 10             	add    esp,0x10
c000cc75:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cc78:	81 c2 02 01 00 00    	add    edx,0x102
c000cc7e:	83 ec 04             	sub    esp,0x4
c000cc81:	50                   	push   eax
c000cc82:	6a 00                	push   0x0
c000cc84:	52                   	push   edx
c000cc85:	e8 66 38 ff ff       	call   c00004f0 <memset>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	90                   	nop
c000cc8e:	c9                   	leave  
c000cc8f:	c3                   	ret    

c000cc90 <readKeyboard(VgaText*, char*, unsigned long)>:
c000cc90:	55                   	push   ebp
c000cc91:	89 e5                	mov    ebp,esp
c000cc93:	83 ec 18             	sub    esp,0x18
c000cc96:	a1 c8 6f 02 c0       	mov    eax,ds:0xc0026fc8
c000cc9b:	85 c0                	test   eax,eax
c000cc9d:	74 2a                	je     c000ccc9 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000cc9f:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000cca5:	8b 0d c8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fc8
c000ccab:	83 ec 04             	sub    esp,0x4
c000ccae:	68 e0 6f 02 c0       	push   0xc0026fe0
c000ccb3:	83 ec 08             	sub    esp,0x8
c000ccb6:	89 e2                	mov    edx,esp
c000ccb8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000ccbb:	89 02                	mov    DWORD PTR [edx],eax
c000ccbd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ccc0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ccc4:	ff d1                	call   ecx
c000ccc6:	83 c4 10             	add    esp,0x10
c000ccc9:	fb                   	sti    
c000ccca:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000ccd1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000ccd5:	0f 84 0d 01 00 00    	je     c000cde8 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000ccdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ccde:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cce4:	0f be c0             	movsx  eax,al
c000cce7:	85 c0                	test   eax,eax
c000cce9:	75 2c                	jne    c000cd17 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000cceb:	fa                   	cli    
c000ccec:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000ccf1:	83 c0 01             	add    eax,0x1
c000ccf4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000ccf9:	e8 12 83 00 00       	call   c0015010 <schedule()>
c000ccfe:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd03:	83 e8 01             	sub    eax,0x1
c000cd06:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000cd0b:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000cd10:	85 c0                	test   eax,eax
c000cd12:	75 c7                	jne    c000ccdb <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd14:	fb                   	sti    
c000cd15:	eb c4                	jmp    c000ccdb <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000cd17:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cd1a:	8d 50 01             	lea    edx,[eax+0x1]
c000cd1d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd20:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd23:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000cd29:	88 10                	mov    BYTE PTR [eax],dl
c000cd2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd2e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000cd34:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000cd37:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd3b:	83 f8 03             	cmp    eax,0x3
c000cd3e:	75 1e                	jne    c000cd5e <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000cd40:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cd45:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd47:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cd4a:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cd50:	83 ec 08             	sub    esp,0x8
c000cd53:	6a 02                	push   0x2
c000cd55:	50                   	push   eax
c000cd56:	e8 a0 3f 00 00       	call   c0010cfb <KeRaiseSignal(SigHandlerBlock*, int)>
c000cd5b:	83 c4 10             	add    esp,0x10
c000cd5e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cd62:	83 f8 1c             	cmp    eax,0x1c
c000cd65:	75 1e                	jne    c000cd85 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000cd67:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000cd6c:	8b 00                	mov    eax,DWORD PTR [eax]
c000cd6e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000cd71:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000cd77:	83 ec 08             	sub    esp,0x8
c000cd7a:	6a 09                	push   0x9
c000cd7c:	50                   	push   eax
c000cd7d:	e8 79 3f 00 00       	call   c0010cfb <KeRaiseSignal(SigHandlerBlock*, int)>
c000cd82:	83 c4 10             	add    esp,0x10
c000cd85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cd88:	05 02 01 00 00       	add    eax,0x102
c000cd8d:	83 ec 0c             	sub    esp,0xc
c000cd90:	50                   	push   eax
c000cd91:	e8 da 37 ff ff       	call   c0000570 <strlen>
c000cd96:	83 c4 10             	add    esp,0x10
c000cd99:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cd9c:	81 c2 02 01 00 00    	add    edx,0x102
c000cda2:	8d 4a 01             	lea    ecx,[edx+0x1]
c000cda5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000cda8:	81 c2 02 01 00 00    	add    edx,0x102
c000cdae:	83 ec 04             	sub    esp,0x4
c000cdb1:	50                   	push   eax
c000cdb2:	51                   	push   ecx
c000cdb3:	52                   	push   edx
c000cdb4:	e8 17 36 ff ff       	call   c00003d0 <memmove>
c000cdb9:	83 c4 10             	add    esp,0x10
c000cdbc:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000cdc0:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000cdc4:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdc8:	83 f8 0a             	cmp    eax,0xa
c000cdcb:	74 16                	je     c000cde3 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000cdcd:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdd1:	83 f8 03             	cmp    eax,0x3
c000cdd4:	74 0d                	je     c000cde3 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000cdd6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000cdda:	83 f8 1c             	cmp    eax,0x1c
c000cddd:	0f 85 ee fe ff ff    	jne    c000ccd1 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000cde3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cde6:	eb 03                	jmp    c000cdeb <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000cde8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cdeb:	c9                   	leave  
c000cdec:	c3                   	ret    
c000cded:	90                   	nop

c000cdee <Keyboard::Keyboard(char const*)>:
c000cdee:	83 ec 0c             	sub    esp,0xc
c000cdf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdf5:	83 ec 08             	sub    esp,0x8
c000cdf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdfc:	50                   	push   eax
c000cdfd:	e8 4c f1 ff ff       	call   c000bf4e <Device::Device(char const*)>
c000ce02:	83 c4 10             	add    esp,0x10
c000ce05:	ba 1c 05 02 c0       	mov    edx,0xc002051c
c000ce0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce0e:	89 10                	mov    DWORD PTR [eax],edx
c000ce10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce14:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000ce1e:	c6 05 c4 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026fc4,0x1
c000ce25:	90                   	nop
c000ce26:	83 c4 0c             	add    esp,0xc
c000ce29:	c3                   	ret    

c000ce2a <Keyboard::~Keyboard()>:
c000ce2a:	83 ec 0c             	sub    esp,0xc
c000ce2d:	ba 1c 05 02 c0       	mov    edx,0xc002051c
c000ce32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce36:	89 10                	mov    DWORD PTR [eax],edx
c000ce38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce3c:	83 ec 0c             	sub    esp,0xc
c000ce3f:	50                   	push   eax
c000ce40:	e8 73 ee ff ff       	call   c000bcb8 <Device::~Device()>
c000ce45:	83 c4 10             	add    esp,0x10
c000ce48:	90                   	nop
c000ce49:	83 c4 0c             	add    esp,0xc
c000ce4c:	c3                   	ret    
c000ce4d:	90                   	nop

c000ce4e <Keyboard::~Keyboard()>:
c000ce4e:	83 ec 0c             	sub    esp,0xc
c000ce51:	83 ec 0c             	sub    esp,0xc
c000ce54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce58:	e8 cd ff ff ff       	call   c000ce2a <Keyboard::~Keyboard()>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	83 ec 08             	sub    esp,0x8
c000ce63:	68 5c 01 00 00       	push   0x15c
c000ce68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce6c:	e8 e4 d9 ff ff       	call   c000a855 <operator delete(void*, unsigned long)>
c000ce71:	83 c4 10             	add    esp,0x10
c000ce74:	83 c4 0c             	add    esp,0xc
c000ce77:	c3                   	ret    

c000ce78 <LogicalDisk::close(int, int, void*)>:
c000ce78:	83 c8 ff             	or     eax,0xffffffff
c000ce7b:	c3                   	ret    

c000ce7c <LogicalDisk::~LogicalDisk()>:
c000ce7c:	83 ec 0c             	sub    esp,0xc
c000ce7f:	ba 94 05 02 c0       	mov    edx,0xc0020594
c000ce84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce88:	89 10                	mov    DWORD PTR [eax],edx
c000ce8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce8e:	83 ec 0c             	sub    esp,0xc
c000ce91:	50                   	push   eax
c000ce92:	e8 21 ee ff ff       	call   c000bcb8 <Device::~Device()>
c000ce97:	83 c4 10             	add    esp,0x10
c000ce9a:	90                   	nop
c000ce9b:	83 c4 0c             	add    esp,0xc
c000ce9e:	c3                   	ret    
c000ce9f:	90                   	nop

c000cea0 <LogicalDisk::~LogicalDisk()>:
c000cea0:	83 ec 0c             	sub    esp,0xc
c000cea3:	83 ec 0c             	sub    esp,0xc
c000cea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceaa:	e8 cd ff ff ff       	call   c000ce7c <LogicalDisk::~LogicalDisk()>
c000ceaf:	83 c4 10             	add    esp,0x10
c000ceb2:	83 ec 08             	sub    esp,0x8
c000ceb5:	68 78 01 00 00       	push   0x178
c000ceba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cebe:	e8 92 d9 ff ff       	call   c000a855 <operator delete(void*, unsigned long)>
c000cec3:	83 c4 10             	add    esp,0x10
c000cec6:	83 c4 0c             	add    esp,0xc
c000cec9:	c3                   	ret    

c000ceca <LogicalDisk::open(int, int, void*)>:
c000ceca:	83 ec 18             	sub    esp,0x18
c000cecd:	68 48 05 02 c0       	push   0xc0020548
c000ced2:	e8 88 39 00 00       	call   c001085f <KePanic(char const*)>
c000ced7:	83 c8 ff             	or     eax,0xffffffff
c000ceda:	83 c4 1c             	add    esp,0x1c
c000cedd:	c3                   	ret    

c000cede <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cede:	53                   	push   ebx
c000cedf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cee3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ceeb:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cef1:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cef7:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cefd:	77 10                	ja     c000cf0f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ceff:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cf05:	89 d3                	mov    ebx,edx
c000cf07:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cf0d:	72 05                	jb     c000cf14 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cf0f:	83 c8 ff             	or     eax,0xffffffff
c000cf12:	89 c2                	mov    edx,eax
c000cf14:	5b                   	pop    ebx
c000cf15:	c3                   	ret    

c000cf16 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cf16:	56                   	push   esi
c000cf17:	83 c8 ff             	or     eax,0xffffffff
c000cf1a:	53                   	push   ebx
c000cf1b:	89 c2                	mov    edx,eax
c000cf1d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cf21:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cf25:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cf29:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cf2f:	77 27                	ja     c000cf58 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf31:	89 d8                	mov    eax,ebx
c000cf33:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cf39:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cf3f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cf44:	89 c2                	mov    edx,eax
c000cf46:	73 10                	jae    c000cf58 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cf48:	89 c8                	mov    eax,ecx
c000cf4a:	89 da                	mov    edx,ebx
c000cf4c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cf52:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cf58:	5b                   	pop    ebx
c000cf59:	5e                   	pop    esi
c000cf5a:	c3                   	ret    
c000cf5b:	90                   	nop

c000cf5c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cf5c:	83 ec 1c             	sub    esp,0x1c
c000cf5f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf67:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cf6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cf73:	89 04 24             	mov    DWORD PTR [esp],eax
c000cf76:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cf7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cf7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf82:	83 ec 08             	sub    esp,0x8
c000cf85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf89:	50                   	push   eax
c000cf8a:	e8 bf ef ff ff       	call   c000bf4e <Device::Device(char const*)>
c000cf8f:	83 c4 10             	add    esp,0x10
c000cf92:	ba 94 05 02 c0       	mov    edx,0xc0020594
c000cf97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf9b:	89 10                	mov    DWORD PTR [eax],edx
c000cf9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfa1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cfa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfac:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cfb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfb7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cfbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfc2:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cfcc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cfd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cfd4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cfd8:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cfde:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cfe4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cfe8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cfeb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cfef:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cff5:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cfff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d003:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d009:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d00d:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d017:	90                   	nop
c000d018:	83 c4 1c             	add    esp,0x1c
c000d01b:	c3                   	ret    

c000d01c <LogicalDisk::assignDriveLetter()>:
c000d01c:	55                   	push   ebp
c000d01d:	57                   	push   edi
c000d01e:	56                   	push   esi
c000d01f:	53                   	push   ebx
c000d020:	83 ec 14             	sub    esp,0x14
c000d023:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d027:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d02d:	b0 41                	mov    al,0x41
c000d02f:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d035:	84 d2                	test   dl,dl
c000d037:	75 02                	jne    c000d03b <LogicalDisk::assignDriveLetter()+0x1f>
c000d039:	b0 43                	mov    al,0x43
c000d03b:	8b 3d 00 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027400
c000d041:	0f b6 ca             	movzx  ecx,dl
c000d044:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d048:	0f be e8             	movsx  ebp,al
c000d04b:	8b 3d 04 74 02 c0    	mov    edi,DWORD PTR ds:0xc0027404
c000d051:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d055:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d059:	3c 43                	cmp    al,0x43
c000d05b:	75 10                	jne    c000d06d <LogicalDisk::assignDriveLetter()+0x51>
c000d05d:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d064:	75 5a                	jne    c000d0c0 <LogicalDisk::assignDriveLetter()+0xa4>
c000d066:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d06b:	75 53                	jne    c000d0c0 <LogicalDisk::assignDriveLetter()+0xa4>
c000d06d:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d070:	ba 01 00 00 00       	mov    edx,0x1
c000d075:	89 34 24             	mov    DWORD PTR [esp],esi
c000d078:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d07b:	d3 e2                	shl    edx,cl
c000d07d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d081:	89 d7                	mov    edi,edx
c000d083:	89 d6                	mov    esi,edx
c000d085:	c1 ff 1f             	sar    edi,0x1f
c000d088:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d08c:	21 f9                	and    ecx,edi
c000d08e:	09 d1                	or     ecx,edx
c000d090:	75 2e                	jne    c000d0c0 <LogicalDisk::assignDriveLetter()+0xa4>
c000d092:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d096:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d09a:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d0a0:	09 f2                	or     edx,esi
c000d0a2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d0a5:	89 15 00 74 02 c0    	mov    DWORD PTR ds:0xc0027400,edx
c000d0ab:	89 1c b5 20 74 02 c0 	mov    DWORD PTR [esi*4-0x3ffd8be0],ebx
c000d0b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0b6:	09 fa                	or     edx,edi
c000d0b8:	89 15 04 74 02 c0    	mov    DWORD PTR ds:0xc0027404,edx
c000d0be:	eb 0d                	jmp    c000d0cd <LogicalDisk::assignDriveLetter()+0xb1>
c000d0c0:	8d 50 01             	lea    edx,[eax+0x1]
c000d0c3:	45                   	inc    ebp
c000d0c4:	88 d0                	mov    al,dl
c000d0c6:	80 fa 5b             	cmp    dl,0x5b
c000d0c9:	75 8e                	jne    c000d059 <LogicalDisk::assignDriveLetter()+0x3d>
c000d0cb:	31 c0                	xor    eax,eax
c000d0cd:	83 c4 14             	add    esp,0x14
c000d0d0:	5b                   	pop    ebx
c000d0d1:	5e                   	pop    esi
c000d0d2:	5f                   	pop    edi
c000d0d3:	5d                   	pop    ebp
c000d0d4:	c3                   	ret    
c000d0d5:	90                   	nop

c000d0d6 <LogicalDisk::mount()>:
c000d0d6:	56                   	push   esi
c000d0d7:	53                   	push   ebx
c000d0d8:	53                   	push   ebx
c000d0d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d0dd:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c000d0e3:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d0ed:	85 db                	test   ebx,ebx
c000d0ef:	74 27                	je     c000d118 <LogicalDisk::mount()+0x42>
c000d0f1:	51                   	push   ecx
c000d0f2:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d0f9:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d0fb:	83 e8 41             	sub    eax,0x41
c000d0fe:	50                   	push   eax
c000d0ff:	56                   	push   esi
c000d100:	53                   	push   ebx
c000d101:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d104:	83 c4 10             	add    esp,0x10
c000d107:	84 c0                	test   al,al
c000d109:	74 08                	je     c000d113 <LogicalDisk::mount()+0x3d>
c000d10b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d111:	eb 07                	jmp    c000d11a <LogicalDisk::mount()+0x44>
c000d113:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d116:	eb d5                	jmp    c000d0ed <LogicalDisk::mount()+0x17>
c000d118:	31 c0                	xor    eax,eax
c000d11a:	5a                   	pop    edx
c000d11b:	5b                   	pop    ebx
c000d11c:	5e                   	pop    esi
c000d11d:	c3                   	ret    

c000d11e <LogicalDisk::unmount()>:
c000d11e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d122:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d12c:	c3                   	ret    
c000d12d:	90                   	nop

c000d12e <LogicalDisk::eject()>:
c000d12e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d132:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d138:	8b 10                	mov    edx,DWORD PTR [eax]
c000d13a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d13e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d141:	90                   	nop

c000d142 <LogicalDisk::unassignDriveLetter()>:
c000d142:	57                   	push   edi
c000d143:	56                   	push   esi
c000d144:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d148:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d14f:	85 c9                	test   ecx,ecx
c000d151:	75 0f                	jne    c000d162 <LogicalDisk::unassignDriveLetter()+0x20>
c000d153:	c7 44 24 0c 6c 05 02 c0 	mov    DWORD PTR [esp+0xc],0xc002056c
c000d15b:	5e                   	pop    esi
c000d15c:	5f                   	pop    edi
c000d15d:	e9 fd 36 00 00       	jmp    c001085f <KePanic(char const*)>
c000d162:	83 e9 41             	sub    ecx,0x41
c000d165:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d16c:	b8 01 00 00 00       	mov    eax,0x1
c000d171:	c7 04 8d 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd8be0],0x0
c000d17c:	d3 e0                	shl    eax,cl
c000d17e:	89 c7                	mov    edi,eax
c000d180:	f7 d0                	not    eax
c000d182:	c1 ff 1f             	sar    edi,0x1f
c000d185:	21 05 00 74 02 c0    	and    DWORD PTR ds:0xc0027400,eax
c000d18b:	89 fe                	mov    esi,edi
c000d18d:	f7 d6                	not    esi
c000d18f:	21 35 04 74 02 c0    	and    DWORD PTR ds:0xc0027404,esi
c000d195:	5e                   	pop    esi
c000d196:	5f                   	pop    edi
c000d197:	c3                   	ret    

c000d198 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d198:	57                   	push   edi
c000d199:	56                   	push   esi
c000d19a:	53                   	push   ebx
c000d19b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d19f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d1a3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d1a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d1ab:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d1b1:	77 41                	ja     c000d1f4 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d1b3:	99                   	cdq    
c000d1b4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d1ba:	01 c8                	add    eax,ecx
c000d1bc:	11 da                	adc    edx,ebx
c000d1be:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d1c4:	19 d7                	sbb    edi,edx
c000d1c6:	72 33                	jb     c000d1fb <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d1c8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d1ce:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d1d4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d1d8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d1dc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d1e2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d1e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1ec:	5b                   	pop    ebx
c000d1ed:	5e                   	pop    esi
c000d1ee:	5f                   	pop    edi
c000d1ef:	e9 c6 0a 00 00       	jmp    c000dcba <VCache::read(unsigned long long, int, void*)>
c000d1f4:	b8 05 00 00 00       	mov    eax,0x5
c000d1f9:	eb 05                	jmp    c000d200 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000d1fb:	b8 07 00 00 00       	mov    eax,0x7
c000d200:	5b                   	pop    ebx
c000d201:	5e                   	pop    esi
c000d202:	5f                   	pop    edi
c000d203:	c3                   	ret    

c000d204 <LogicalDisk::write(unsigned long long, int, void*)>:
c000d204:	57                   	push   edi
c000d205:	56                   	push   esi
c000d206:	53                   	push   ebx
c000d207:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d20b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d20f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d213:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d217:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d21d:	77 41                	ja     c000d260 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000d21f:	99                   	cdq    
c000d220:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d226:	01 c8                	add    eax,ecx
c000d228:	11 da                	adc    edx,ebx
c000d22a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d230:	19 d7                	sbb    edi,edx
c000d232:	72 33                	jb     c000d267 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000d234:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d23a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000d240:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d244:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d248:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000d24e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d254:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d258:	5b                   	pop    ebx
c000d259:	5e                   	pop    esi
c000d25a:	5f                   	pop    edi
c000d25b:	e9 6c 09 00 00       	jmp    c000dbcc <VCache::write(unsigned long long, int, void*)>
c000d260:	b8 05 00 00 00       	mov    eax,0x5
c000d265:	eb 05                	jmp    c000d26c <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000d267:	b8 07 00 00 00       	mov    eax,0x7
c000d26c:	5b                   	pop    ebx
c000d26d:	5e                   	pop    esi
c000d26e:	5f                   	pop    edi
c000d26f:	c3                   	ret    

c000d270 <Mouse::Mouse(char const*)>:
c000d270:	83 ec 0c             	sub    esp,0xc
c000d273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d277:	83 ec 08             	sub    esp,0x8
c000d27a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d27e:	50                   	push   eax
c000d27f:	e8 ca ec ff ff       	call   c000bf4e <Device::Device(char const*)>
c000d284:	83 c4 10             	add    esp,0x10
c000d287:	ba c0 05 02 c0       	mov    edx,0xc00205c0
c000d28c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d290:	89 10                	mov    DWORD PTR [eax],edx
c000d292:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d296:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000d2a0:	90                   	nop
c000d2a1:	83 c4 0c             	add    esp,0xc
c000d2a4:	c3                   	ret    
c000d2a5:	90                   	nop
c000d2a6:	66 90                	xchg   ax,ax

c000d2a8 <Mouse::~Mouse()>:
c000d2a8:	83 ec 0c             	sub    esp,0xc
c000d2ab:	ba c0 05 02 c0       	mov    edx,0xc00205c0
c000d2b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2b4:	89 10                	mov    DWORD PTR [eax],edx
c000d2b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ba:	83 ec 0c             	sub    esp,0xc
c000d2bd:	50                   	push   eax
c000d2be:	e8 f5 e9 ff ff       	call   c000bcb8 <Device::~Device()>
c000d2c3:	83 c4 10             	add    esp,0x10
c000d2c6:	90                   	nop
c000d2c7:	83 c4 0c             	add    esp,0xc
c000d2ca:	c3                   	ret    
c000d2cb:	90                   	nop

c000d2cc <Mouse::~Mouse()>:
c000d2cc:	83 ec 0c             	sub    esp,0xc
c000d2cf:	83 ec 0c             	sub    esp,0xc
c000d2d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2d6:	e8 cd ff ff ff       	call   c000d2a8 <Mouse::~Mouse()>
c000d2db:	83 c4 10             	add    esp,0x10
c000d2de:	83 ec 08             	sub    esp,0x8
c000d2e1:	68 58 01 00 00       	push   0x158
c000d2e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ea:	e8 66 d5 ff ff       	call   c000a855 <operator delete(void*, unsigned long)>
c000d2ef:	83 c4 10             	add    esp,0x10
c000d2f2:	83 c4 0c             	add    esp,0xc
c000d2f5:	c3                   	ret    

c000d2f6 <NIC::getMAC()>:
c000d2f6:	31 c0                	xor    eax,eax
c000d2f8:	31 d2                	xor    edx,edx
c000d2fa:	c3                   	ret    
c000d2fb:	90                   	nop

c000d2fc <NIC::write(int, unsigned char*, int*)>:
c000d2fc:	b8 01 00 00 00       	mov    eax,0x1
c000d301:	c3                   	ret    

c000d302 <NIC::NIC(char const*)>:
c000d302:	83 ec 0c             	sub    esp,0xc
c000d305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d309:	83 ec 08             	sub    esp,0x8
c000d30c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d310:	50                   	push   eax
c000d311:	e8 38 ec ff ff       	call   c000bf4e <Device::Device(char const*)>
c000d316:	83 c4 10             	add    esp,0x10
c000d319:	ba ec 05 02 c0       	mov    edx,0xc00205ec
c000d31e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d322:	89 10                	mov    DWORD PTR [eax],edx
c000d324:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d328:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000d332:	90                   	nop
c000d333:	83 c4 0c             	add    esp,0xc
c000d336:	c3                   	ret    
c000d337:	90                   	nop

c000d338 <NIC::~NIC()>:
c000d338:	83 ec 0c             	sub    esp,0xc
c000d33b:	ba ec 05 02 c0       	mov    edx,0xc00205ec
c000d340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d344:	89 10                	mov    DWORD PTR [eax],edx
c000d346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d34a:	83 ec 0c             	sub    esp,0xc
c000d34d:	50                   	push   eax
c000d34e:	e8 65 e9 ff ff       	call   c000bcb8 <Device::~Device()>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	90                   	nop
c000d357:	83 c4 0c             	add    esp,0xc
c000d35a:	c3                   	ret    
c000d35b:	90                   	nop

c000d35c <NIC::~NIC()>:
c000d35c:	83 ec 0c             	sub    esp,0xc
c000d35f:	83 ec 0c             	sub    esp,0xc
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	e8 cd ff ff ff       	call   c000d338 <NIC::~NIC()>
c000d36b:	83 c4 10             	add    esp,0x10
c000d36e:	83 ec 08             	sub    esp,0x8
c000d371:	68 58 01 00 00       	push   0x158
c000d376:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d37a:	e8 d6 d4 ff ff       	call   c000a855 <operator delete(void*, unsigned long)>
c000d37f:	83 c4 10             	add    esp,0x10
c000d382:	83 c4 0c             	add    esp,0xc
c000d385:	c3                   	ret    

c000d386 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d386:	55                   	push   ebp
c000d387:	57                   	push   edi
c000d388:	56                   	push   esi
c000d389:	53                   	push   ebx
c000d38a:	81 ec 28 01 00 00    	sub    esp,0x128
c000d390:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000d397:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000d39e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000d3a5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000d3ac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3b0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d3b4:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d3bb:	e8 8a ec ff ff       	call   c000c04a <Device::getName()>
c000d3c0:	5a                   	pop    edx
c000d3c1:	59                   	pop    ecx
c000d3c2:	50                   	push   eax
c000d3c3:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d3c7:	55                   	push   ebp
c000d3c8:	e8 73 32 ff ff       	call   c0000640 <strcpy>
c000d3cd:	5b                   	pop    ebx
c000d3ce:	58                   	pop    eax
c000d3cf:	68 18 06 02 c0       	push   0xc0020618
c000d3d4:	55                   	push   ebp
c000d3d5:	e8 66 34 ff ff       	call   c0000840 <strcat>
c000d3da:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000d3e1:	e8 b4 a6 ff ff       	call   c0007a9a <malloc>
c000d3e6:	83 c4 0c             	add    esp,0xc
c000d3e9:	89 c3                	mov    ebx,eax
c000d3eb:	57                   	push   edi
c000d3ec:	56                   	push   esi
c000d3ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3f5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000d3fc:	55                   	push   ebp
c000d3fd:	50                   	push   eax
c000d3fe:	e8 59 fb ff ff       	call   c000cf5c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000d403:	83 c4 14             	add    esp,0x14
c000d406:	53                   	push   ebx
c000d407:	e8 10 fc ff ff       	call   c000d01c <LogicalDisk::assignDriveLetter()>
c000d40c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d40f:	e8 c2 fc ff ff       	call   c000d0d6 <LogicalDisk::mount()>
c000d414:	58                   	pop    eax
c000d415:	5a                   	pop    edx
c000d416:	53                   	push   ebx
c000d417:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d41e:	e8 93 e9 ff ff       	call   c000bdb6 <Device::addChild(Device*)>
c000d423:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d429:	5b                   	pop    ebx
c000d42a:	5e                   	pop    esi
c000d42b:	5f                   	pop    edi
c000d42c:	5d                   	pop    ebp
c000d42d:	c3                   	ret    

c000d42e <createPartitionsForDisk(PhysicalDisk*)>:
c000d42e:	55                   	push   ebp
c000d42f:	57                   	push   edi
c000d430:	56                   	push   esi
c000d431:	53                   	push   ebx
c000d432:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d438:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d43f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d445:	3d 00 02 00 00       	cmp    eax,0x200
c000d44a:	74 27                	je     c000d473 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d44c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d452:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d458:	83 ec 10             	sub    esp,0x10
c000d45b:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d45f:	99                   	cdq    
c000d460:	c1 e6 0a             	shl    esi,0xa
c000d463:	52                   	push   edx
c000d464:	89 fd                	mov    ebp,edi
c000d466:	50                   	push   eax
c000d467:	55                   	push   ebp
c000d468:	56                   	push   esi
c000d469:	e8 22 11 01 00       	call   c001e590 <__udivdi3>
c000d46e:	e9 b9 00 00 00       	jmp    c000d52c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d473:	83 ec 0c             	sub    esp,0xc
c000d476:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d478:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d47c:	56                   	push   esi
c000d47d:	6a 01                	push   0x1
c000d47f:	6a 00                	push   0x0
c000d481:	6a 00                	push   0x0
c000d483:	53                   	push   ebx
c000d484:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d487:	83 c4 20             	add    esp,0x20
c000d48a:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d492:	75 0a                	jne    c000d49e <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d494:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d49c:	74 2c                	je     c000d4ca <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d49e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d4a4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d4aa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d4b0:	83 ec 10             	sub    esp,0x10
c000d4b3:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d4b7:	89 f7                	mov    edi,esi
c000d4b9:	c1 e0 0a             	shl    eax,0xa
c000d4bc:	c1 ff 1f             	sar    edi,0x1f
c000d4bf:	57                   	push   edi
c000d4c0:	56                   	push   esi
c000d4c1:	52                   	push   edx
c000d4c2:	50                   	push   eax
c000d4c3:	e8 c8 10 01 00       	call   c001e590 <__udivdi3>
c000d4c8:	eb 62                	jmp    c000d52c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000d4ca:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d4d1:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000d4d8:	89 cf                	mov    edi,ecx
c000d4da:	83 e2 7f             	and    edx,0x7f
c000d4dd:	83 e7 7f             	and    edi,0x7f
c000d4e0:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d4e7:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000d4ea:	83 e0 7f             	and    eax,0x7f
c000d4ed:	8d 14 01             	lea    edx,[ecx+eax*1]
c000d4f0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d4f7:	83 e0 7f             	and    eax,0x7f
c000d4fa:	01 d0                	add    eax,edx
c000d4fc:	89 c5                	mov    ebp,eax
c000d4fe:	84 c0                	test   al,al
c000d500:	74 41                	je     c000d543 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000d502:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d508:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d50e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d514:	83 ec 10             	sub    esp,0x10
c000d517:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d51b:	89 f7                	mov    edi,esi
c000d51d:	c1 e0 0a             	shl    eax,0xa
c000d520:	c1 ff 1f             	sar    edi,0x1f
c000d523:	57                   	push   edi
c000d524:	56                   	push   esi
c000d525:	52                   	push   edx
c000d526:	50                   	push   eax
c000d527:	e8 64 10 01 00       	call   c001e590 <__udivdi3>
c000d52c:	83 c4 14             	add    esp,0x14
c000d52f:	52                   	push   edx
c000d530:	50                   	push   eax
c000d531:	6a 00                	push   0x0
c000d533:	6a 00                	push   0x0
c000d535:	53                   	push   ebx
c000d536:	e8 4b fe ff ff       	call   c000d386 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d53b:	83 c4 20             	add    esp,0x20
c000d53e:	e9 73 01 00 00       	jmp    c000d6b6 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000d543:	89 f0                	mov    eax,esi
c000d545:	31 c9                	xor    ecx,ecx
c000d547:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d54e:	75 02                	jne    c000d552 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000d550:	89 cd                	mov    ebp,ecx
c000d552:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d559:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000d560:	c1 e2 08             	shl    edx,0x8
c000d563:	c1 e6 10             	shl    esi,0x10
c000d566:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000d56e:	09 f2                	or     edx,esi
c000d570:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000d578:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000d57f:	83 c0 10             	add    eax,0x10
c000d582:	09 f2                	or     edx,esi
c000d584:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000d58b:	c1 e6 18             	shl    esi,0x18
c000d58e:	09 f2                	or     edx,esi
c000d590:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000d597:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000d59b:	c1 e6 10             	shl    esi,0x10
c000d59e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d5a5:	c1 e2 08             	shl    edx,0x8
c000d5a8:	09 f2                	or     edx,esi
c000d5aa:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000d5b1:	09 f2                	or     edx,esi
c000d5b3:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000d5ba:	c1 e6 18             	shl    esi,0x18
c000d5bd:	09 f2                	or     edx,esi
c000d5bf:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000d5c3:	41                   	inc    ecx
c000d5c4:	83 f9 04             	cmp    ecx,0x4
c000d5c7:	0f 85 7a ff ff ff    	jne    c000d547 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000d5cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d1:	83 f0 01             	xor    eax,0x1
c000d5d4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d5d8:	75 4f                	jne    c000d629 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d5da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d5de:	83 f0 01             	xor    eax,0x1
c000d5e1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d5e5:	75 42                	jne    c000d629 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d5e7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d5ef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d5f7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d5fd:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d603:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d609:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d60d:	89 f7                	mov    edi,esi
c000d60f:	c1 e0 0a             	shl    eax,0xa
c000d612:	c1 ff 1f             	sar    edi,0x1f
c000d615:	57                   	push   edi
c000d616:	56                   	push   esi
c000d617:	52                   	push   edx
c000d618:	50                   	push   eax
c000d619:	e8 72 0f 01 00       	call   c001e590 <__udivdi3>
c000d61e:	83 c4 10             	add    esp,0x10
c000d621:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d625:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d629:	89 e8                	mov    eax,ebp
c000d62b:	0f b6 e8             	movzx  ebp,al
c000d62e:	85 ed                	test   ebp,ebp
c000d630:	74 50                	je     c000d682 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d632:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d636:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d63a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d63e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d642:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d646:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d64a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d64e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d652:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d656:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d65a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d65e:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000d662:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000d666:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d66a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d66e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d672:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000d676:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000d67a:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000d67e:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000d682:	31 ed                	xor    ebp,ebp
c000d684:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d688:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d68c:	89 f8                	mov    eax,edi
c000d68e:	09 f0                	or     eax,esi
c000d690:	74 1e                	je     c000d6b0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d692:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d696:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d69a:	89 d1                	mov    ecx,edx
c000d69c:	09 c1                	or     ecx,eax
c000d69e:	74 10                	je     c000d6b0 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000d6a0:	83 ec 0c             	sub    esp,0xc
c000d6a3:	57                   	push   edi
c000d6a4:	56                   	push   esi
c000d6a5:	52                   	push   edx
c000d6a6:	50                   	push   eax
c000d6a7:	53                   	push   ebx
c000d6a8:	e8 d9 fc ff ff       	call   c000d386 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d6ad:	83 c4 20             	add    esp,0x20
c000d6b0:	45                   	inc    ebp
c000d6b1:	83 fd 04             	cmp    ebp,0x4
c000d6b4:	75 ce                	jne    c000d684 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000d6b6:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d6bc:	5b                   	pop    ebx
c000d6bd:	5e                   	pop    esi
c000d6be:	5f                   	pop    edi
c000d6bf:	5d                   	pop    ebp
c000d6c0:	c3                   	ret    
c000d6c1:	66 90                	xchg   ax,ax
c000d6c3:	90                   	nop

c000d6c4 <Serial::Serial(char const*)>:
c000d6c4:	83 ec 0c             	sub    esp,0xc
c000d6c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6cb:	83 ec 08             	sub    esp,0x8
c000d6ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6d2:	50                   	push   eax
c000d6d3:	e8 76 e8 ff ff       	call   c000bf4e <Device::Device(char const*)>
c000d6d8:	83 c4 10             	add    esp,0x10
c000d6db:	ba 2c 06 02 c0       	mov    edx,0xc002062c
c000d6e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6e4:	89 10                	mov    DWORD PTR [eax],edx
c000d6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ea:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d6f4:	90                   	nop
c000d6f5:	83 c4 0c             	add    esp,0xc
c000d6f8:	c3                   	ret    
c000d6f9:	90                   	nop
c000d6fa:	66 90                	xchg   ax,ax

c000d6fc <Serial::~Serial()>:
c000d6fc:	83 ec 0c             	sub    esp,0xc
c000d6ff:	ba 2c 06 02 c0       	mov    edx,0xc002062c
c000d704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d708:	89 10                	mov    DWORD PTR [eax],edx
c000d70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 a1 e5 ff ff       	call   c000bcb8 <Device::~Device()>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	90                   	nop
c000d71b:	83 c4 0c             	add    esp,0xc
c000d71e:	c3                   	ret    
c000d71f:	90                   	nop

c000d720 <Serial::~Serial()>:
c000d720:	83 ec 0c             	sub    esp,0xc
c000d723:	83 ec 0c             	sub    esp,0xc
c000d726:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d72a:	e8 cd ff ff ff       	call   c000d6fc <Serial::~Serial()>
c000d72f:	83 c4 10             	add    esp,0x10
c000d732:	83 ec 08             	sub    esp,0x8
c000d735:	68 58 01 00 00       	push   0x158
c000d73a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73e:	e8 12 d1 ff ff       	call   c000a855 <operator delete(void*, unsigned long)>
c000d743:	83 c4 10             	add    esp,0x10
c000d746:	83 c4 0c             	add    esp,0xc
c000d749:	c3                   	ret    
c000d74a:	66 90                	xchg   ax,ax

c000d74c <Timer::Timer(char const*)>:
c000d74c:	83 ec 0c             	sub    esp,0xc
c000d74f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d753:	83 ec 08             	sub    esp,0x8
c000d756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d75a:	50                   	push   eax
c000d75b:	e8 ee e7 ff ff       	call   c000bf4e <Device::Device(char const*)>
c000d760:	83 c4 10             	add    esp,0x10
c000d763:	ba 70 06 02 c0       	mov    edx,0xc0020670
c000d768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d76c:	89 10                	mov    DWORD PTR [eax],edx
c000d76e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d772:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d77c:	90                   	nop
c000d77d:	83 c4 0c             	add    esp,0xc
c000d780:	c3                   	ret    
c000d781:	90                   	nop
c000d782:	66 90                	xchg   ax,ax

c000d784 <Timer::~Timer()>:
c000d784:	83 ec 0c             	sub    esp,0xc
c000d787:	ba 70 06 02 c0       	mov    edx,0xc0020670
c000d78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d790:	89 10                	mov    DWORD PTR [eax],edx
c000d792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d796:	83 ec 0c             	sub    esp,0xc
c000d799:	50                   	push   eax
c000d79a:	e8 19 e5 ff ff       	call   c000bcb8 <Device::~Device()>
c000d79f:	83 c4 10             	add    esp,0x10
c000d7a2:	90                   	nop
c000d7a3:	83 c4 0c             	add    esp,0xc
c000d7a6:	c3                   	ret    
c000d7a7:	90                   	nop

c000d7a8 <Timer::~Timer()>:
c000d7a8:	83 ec 0c             	sub    esp,0xc
c000d7ab:	83 ec 0c             	sub    esp,0xc
c000d7ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7b2:	e8 cd ff ff ff       	call   c000d784 <Timer::~Timer()>
c000d7b7:	83 c4 10             	add    esp,0x10
c000d7ba:	83 ec 08             	sub    esp,0x8
c000d7bd:	68 5c 01 00 00       	push   0x15c
c000d7c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c6:	e8 8a d0 ff ff       	call   c000a855 <operator delete(void*, unsigned long)>
c000d7cb:	83 c4 10             	add    esp,0x10
c000d7ce:	83 c4 0c             	add    esp,0xc
c000d7d1:	c3                   	ret    

c000d7d2 <Timer::read()>:
c000d7d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d7d6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d7dc:	c3                   	ret    

c000d7dd <setupTimer(int)>:
c000d7dd:	53                   	push   ebx
c000d7de:	83 ec 14             	sub    esp,0x14
c000d7e1:	68 5c 01 00 00       	push   0x15c
c000d7e6:	e8 af a2 ff ff       	call   c0007a9a <malloc>
c000d7eb:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7ee:	89 c3                	mov    ebx,eax
c000d7f0:	e8 07 06 01 00       	call   c001ddfc <PIT::PIT()>
c000d7f5:	58                   	pop    eax
c000d7f6:	5a                   	pop    edx
c000d7f7:	53                   	push   ebx
c000d7f8:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000d7fe:	e8 b3 e5 ff ff       	call   c000bdb6 <Device::addChild(Device*)>
c000d803:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d805:	6a 00                	push   0x0
c000d807:	6a 00                	push   0x0
c000d809:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d80d:	53                   	push   ebx
c000d80e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d811:	89 d8                	mov    eax,ebx
c000d813:	83 c4 28             	add    esp,0x28
c000d816:	5b                   	pop    ebx
c000d817:	c3                   	ret    

c000d818 <timerHandler(unsigned int)>:
c000d818:	56                   	push   esi
c000d819:	53                   	push   ebx
c000d81a:	51                   	push   ecx
c000d81b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d81f:	01 05 8c 74 02 c0    	add    DWORD PTR ds:0xc002748c,eax
c000d825:	80 3d bd 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebd,0x0
c000d82c:	0f 84 4a 01 00 00    	je     c000d97c <timerHandler(unsigned int)+0x164>
c000d832:	fa                   	cli    
c000d833:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d839:	83 ec 0c             	sub    esp,0xc
c000d83c:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c000d842:	68 78 81 02 c0       	push   0xc0028178
c000d847:	e8 14 13 01 00       	call   c001eb60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d84c:	83 c4 10             	add    esp,0x10
c000d84f:	84 c0                	test   al,al
c000d851:	0f 85 a1 00 00 00    	jne    c000d8f8 <timerHandler(unsigned int)+0xe0>
c000d857:	83 ec 0c             	sub    esp,0xc
c000d85a:	68 78 81 02 c0       	push   0xc0028178
c000d85f:	e8 18 13 01 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d864:	83 c4 10             	add    esp,0x10
c000d867:	89 c6                	mov    esi,eax
c000d869:	8d 76 00             	lea    esi,[esi+0x0]
c000d86c:	83 ec 0c             	sub    esp,0xc
c000d86f:	68 78 81 02 c0       	push   0xc0028178
c000d874:	e8 03 13 01 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d879:	c7 04 24 78 81 02 c0 	mov    DWORD PTR [esp],0xc0028178
c000d880:	89 c3                	mov    ebx,eax
c000d882:	e8 fd 12 01 00       	call   c001eb84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d887:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d88a:	83 c4 10             	add    esp,0x10
c000d88d:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c000d893:	77 23                	ja     c000d8b8 <timerHandler(unsigned int)+0xa0>
c000d895:	83 ec 0c             	sub    esp,0xc
c000d898:	53                   	push   ebx
c000d899:	e8 8a 7c 00 00       	call   c0015528 <unblockTask(ThreadControlBlock*)>
c000d89e:	83 c4 10             	add    esp,0x10
c000d8a1:	39 de                	cmp    esi,ebx
c000d8a3:	75 27                	jne    c000d8cc <timerHandler(unsigned int)+0xb4>
c000d8a5:	83 ec 0c             	sub    esp,0xc
c000d8a8:	68 78 81 02 c0       	push   0xc0028178
c000d8ad:	e8 ca 12 01 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8b2:	89 c6                	mov    esi,eax
c000d8b4:	eb 12                	jmp    c000d8c8 <timerHandler(unsigned int)+0xb0>
c000d8b6:	66 90                	xchg   ax,ax
c000d8b8:	52                   	push   edx
c000d8b9:	52                   	push   edx
c000d8ba:	53                   	push   ebx
c000d8bb:	68 78 81 02 c0       	push   0xc0028178
c000d8c0:	e8 7b 13 01 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d8c5:	8d 76 00             	lea    esi,[esi+0x0]
c000d8c8:	83 c4 10             	add    esp,0x10
c000d8cb:	90                   	nop
c000d8cc:	83 ec 0c             	sub    esp,0xc
c000d8cf:	68 78 81 02 c0       	push   0xc0028178
c000d8d4:	e8 87 12 01 00       	call   c001eb60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d8d9:	83 c4 10             	add    esp,0x10
c000d8dc:	84 c0                	test   al,al
c000d8de:	75 18                	jne    c000d8f8 <timerHandler(unsigned int)+0xe0>
c000d8e0:	83 ec 0c             	sub    esp,0xc
c000d8e3:	68 78 81 02 c0       	push   0xc0028178
c000d8e8:	e8 8f 12 01 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d8ed:	83 c4 10             	add    esp,0x10
c000d8f0:	39 f0                	cmp    eax,esi
c000d8f2:	0f 85 74 ff ff ff    	jne    c000d86c <timerHandler(unsigned int)+0x54>
c000d8f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d8fd:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d901:	74 41                	je     c000d944 <timerHandler(unsigned int)+0x12c>
c000d903:	80 3d bc 4e 02 c0 00 	cmp    BYTE PTR ds:0xc0024ebc,0x0
c000d90a:	74 38                	je     c000d944 <timerHandler(unsigned int)+0x12c>
c000d90c:	fa                   	cli    
c000d90d:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c000d913:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c000d918:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d91e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d921:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d927:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d92a:	72 08                	jb     c000d934 <timerHandler(unsigned int)+0x11c>
c000d92c:	e8 df 76 00 00       	call   c0015010 <schedule()>
c000d931:	8d 76 00             	lea    esi,[esi+0x0]
c000d934:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d939:	48                   	dec    eax
c000d93a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d93f:	75 03                	jne    c000d944 <timerHandler(unsigned int)+0x12c>
c000d941:	fb                   	sti    
c000d942:	66 90                	xchg   ax,ax
c000d944:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c000d949:	48                   	dec    eax
c000d94a:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c000d94f:	75 1b                	jne    c000d96c <timerHandler(unsigned int)+0x154>
c000d951:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c000d958:	74 12                	je     c000d96c <timerHandler(unsigned int)+0x154>
c000d95a:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c000d964:	e8 a7 76 00 00       	call   c0015010 <schedule()>
c000d969:	8d 76 00             	lea    esi,[esi+0x0]
c000d96c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c000d971:	48                   	dec    eax
c000d972:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c000d977:	75 03                	jne    c000d97c <timerHandler(unsigned int)+0x164>
c000d979:	fb                   	sti    
c000d97a:	66 90                	xchg   ax,ax
c000d97c:	58                   	pop    eax
c000d97d:	5b                   	pop    ebx
c000d97e:	5e                   	pop    esi
c000d97f:	c3                   	ret    

c000d980 <VCache::VCache(PhysicalDisk*)>:
c000d980:	53                   	push   ebx
c000d981:	83 ec 18             	sub    esp,0x18
c000d984:	ba a0 06 02 c0       	mov    edx,0xc00206a0
c000d989:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d98d:	89 10                	mov    DWORD PTR [eax],edx
c000d98f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d993:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d99a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d99e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d9a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9a9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d9b0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d9b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9bb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d9c2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d9c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9cd:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d9d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9d8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d9dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d9e7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d9ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d9f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9fa:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d9fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da02:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000da06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da0a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000da11:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000da19:	83 ec 0c             	sub    esp,0xc
c000da1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000da20:	e8 75 a0 ff ff       	call   c0007a9a <malloc>
c000da25:	83 c4 10             	add    esp,0x10
c000da28:	89 c3                	mov    ebx,eax
c000da2a:	83 ec 0c             	sub    esp,0xc
c000da2d:	53                   	push   ebx
c000da2e:	e8 79 73 00 00       	call   c0014dac <Mutex::Mutex()>
c000da33:	83 c4 10             	add    esp,0x10
c000da36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da3a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000da3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da41:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000da45:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000da48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da4c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000da53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da57:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000da5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da61:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000da64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da68:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000da6e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000da74:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000da78:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000da7b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000da7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da82:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000da86:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000da8a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000da90:	05 00 02 00 00       	add    eax,0x200
c000da95:	c1 e0 03             	shl    eax,0x3
c000da98:	83 ec 0c             	sub    esp,0xc
c000da9b:	50                   	push   eax
c000da9c:	e8 f9 9f ff ff       	call   c0007a9a <malloc>
c000daa1:	83 c4 10             	add    esp,0x10
c000daa4:	89 c2                	mov    edx,eax
c000daa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000daaa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000daad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab1:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000dab8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dabc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000dac0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000dac4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000daca:	89 d0                	mov    eax,edx
c000dacc:	c1 e0 02             	shl    eax,0x2
c000dacf:	01 d0                	add    eax,edx
c000dad1:	c1 e0 04             	shl    eax,0x4
c000dad4:	83 ec 0c             	sub    esp,0xc
c000dad7:	50                   	push   eax
c000dad8:	e8 bd 9f ff ff       	call   c0007a9a <malloc>
c000dadd:	83 c4 10             	add    esp,0x10
c000dae0:	89 c2                	mov    edx,eax
c000dae2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dae6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000dae9:	90                   	nop
c000daea:	83 c4 18             	add    esp,0x18
c000daed:	5b                   	pop    ebx
c000daee:	c3                   	ret    
c000daef:	90                   	nop

c000daf0 <VCache::invalidateReadBuffer()>:
c000daf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000daf4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000dafa:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000dafe:	c3                   	ret    
c000daff:	90                   	nop

c000db00 <VCache::writeWriteBuffer()>:
c000db00:	53                   	push   ebx
c000db01:	83 ec 08             	sub    esp,0x8
c000db04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db08:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000db0c:	74 1e                	je     c000db2c <VCache::writeWriteBuffer()+0x2c>
c000db0e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000db11:	83 ec 0c             	sub    esp,0xc
c000db14:	8b 10                	mov    edx,DWORD PTR [eax]
c000db16:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000db19:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000db1c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000db1f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db22:	50                   	push   eax
c000db23:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000db26:	83 c4 20             	add    esp,0x20
c000db29:	8d 76 00             	lea    esi,[esi+0x0]
c000db2c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000db33:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000db3a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000db3e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000db45:	83 c4 08             	add    esp,0x8
c000db48:	5b                   	pop    ebx
c000db49:	c3                   	ret    
c000db4a:	66 90                	xchg   ax,ax

c000db4c <VCache::~VCache()>:
c000db4c:	83 ec 0c             	sub    esp,0xc
c000db4f:	ba a0 06 02 c0       	mov    edx,0xc00206a0
c000db54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db58:	89 10                	mov    DWORD PTR [eax],edx
c000db5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db5e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000db61:	0f b6 c0             	movzx  eax,al
c000db64:	85 c0                	test   eax,eax
c000db66:	74 10                	je     c000db78 <VCache::~VCache()+0x2c>
c000db68:	83 ec 0c             	sub    esp,0xc
c000db6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db6f:	e8 8c ff ff ff       	call   c000db00 <VCache::writeWriteBuffer()>
c000db74:	83 c4 10             	add    esp,0x10
c000db77:	90                   	nop
c000db78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db7c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000db7f:	83 ec 0c             	sub    esp,0xc
c000db82:	50                   	push   eax
c000db83:	e8 22 9f ff ff       	call   c0007aaa <free>
c000db88:	83 c4 10             	add    esp,0x10
c000db8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db8f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000db92:	83 ec 0c             	sub    esp,0xc
c000db95:	50                   	push   eax
c000db96:	e8 0f 9f ff ff       	call   c0007aaa <free>
c000db9b:	83 c4 10             	add    esp,0x10
c000db9e:	90                   	nop
c000db9f:	83 c4 0c             	add    esp,0xc
c000dba2:	c3                   	ret    
c000dba3:	90                   	nop

c000dba4 <VCache::~VCache()>:
c000dba4:	83 ec 0c             	sub    esp,0xc
c000dba7:	83 ec 0c             	sub    esp,0xc
c000dbaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbae:	e8 99 ff ff ff       	call   c000db4c <VCache::~VCache()>
c000dbb3:	83 c4 10             	add    esp,0x10
c000dbb6:	83 ec 08             	sub    esp,0x8
c000dbb9:	6a 44                	push   0x44
c000dbbb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbbf:	e8 91 cc ff ff       	call   c000a855 <operator delete(void*, unsigned long)>
c000dbc4:	83 c4 10             	add    esp,0x10
c000dbc7:	83 c4 0c             	add    esp,0xc
c000dbca:	c3                   	ret    
c000dbcb:	90                   	nop

c000dbcc <VCache::write(unsigned long long, int, void*)>:
c000dbcc:	55                   	push   ebp
c000dbcd:	57                   	push   edi
c000dbce:	56                   	push   esi
c000dbcf:	53                   	push   ebx
c000dbd0:	83 ec 1c             	sub    esp,0x1c
c000dbd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dbd7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dbdb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dbdf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe3:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000dbe7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dbeb:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000dbef:	74 07                	je     c000dbf8 <VCache::write(unsigned long long, int, void*)+0x2c>
c000dbf1:	53                   	push   ebx
c000dbf2:	e8 f9 fe ff ff       	call   c000daf0 <VCache::invalidateReadBuffer()>
c000dbf7:	58                   	pop    eax
c000dbf8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000dbfc:	74 62                	je     c000dc60 <VCache::write(unsigned long long, int, void*)+0x94>
c000dbfe:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc01:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc05:	99                   	cdq    
c000dc06:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc0a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000dc0d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000dc10:	31 c1                	xor    ecx,eax
c000dc12:	89 d0                	mov    eax,edx
c000dc14:	89 ca                	mov    edx,ecx
c000dc16:	31 e8                	xor    eax,ebp
c000dc18:	09 c2                	or     edx,eax
c000dc1a:	75 38                	jne    c000dc54 <VCache::write(unsigned long long, int, void*)+0x88>
c000dc1c:	83 ff 01             	cmp    edi,0x1
c000dc1f:	75 33                	jne    c000dc54 <VCache::write(unsigned long long, int, void*)+0x88>
c000dc21:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc24:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc28:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dc2e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dc31:	0f af c8             	imul   ecx,eax
c000dc34:	01 cf                	add    edi,ecx
c000dc36:	89 c1                	mov    ecx,eax
c000dc38:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc3a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000dc3d:	40                   	inc    eax
c000dc3e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000dc41:	83 f8 50             	cmp    eax,0x50
c000dc44:	75 6a                	jne    c000dcb0 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dc46:	83 ec 0c             	sub    esp,0xc
c000dc49:	53                   	push   ebx
c000dc4a:	e8 b1 fe ff ff       	call   c000db00 <VCache::writeWriteBuffer()>
c000dc4f:	83 c4 10             	add    esp,0x10
c000dc52:	eb 5c                	jmp    c000dcb0 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dc54:	83 ec 0c             	sub    esp,0xc
c000dc57:	53                   	push   ebx
c000dc58:	e8 a3 fe ff ff       	call   c000db00 <VCache::writeWriteBuffer()>
c000dc5d:	83 c4 10             	add    esp,0x10
c000dc60:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000dc63:	83 ff 4f             	cmp    edi,0x4f
c000dc66:	7f 20                	jg     c000dc88 <VCache::write(unsigned long long, int, void*)+0xbc>
c000dc68:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000dc6b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc6f:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000dc72:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000dc75:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000dc79:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000dc7c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dc82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc84:	eb 2a                	jmp    c000dcb0 <VCache::write(unsigned long long, int, void*)+0xe4>
c000dc86:	66 90                	xchg   ax,ax
c000dc88:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc8a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000dc8e:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000dc92:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000dc96:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000dc9a:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dc9e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dca2:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000dca5:	83 c4 1c             	add    esp,0x1c
c000dca8:	5b                   	pop    ebx
c000dca9:	5e                   	pop    esi
c000dcaa:	5f                   	pop    edi
c000dcab:	5d                   	pop    ebp
c000dcac:	ff e0                	jmp    eax
c000dcae:	66 90                	xchg   ax,ax
c000dcb0:	83 c4 1c             	add    esp,0x1c
c000dcb3:	31 c0                	xor    eax,eax
c000dcb5:	5b                   	pop    ebx
c000dcb6:	5e                   	pop    esi
c000dcb7:	5f                   	pop    edi
c000dcb8:	5d                   	pop    ebp
c000dcb9:	c3                   	ret    

c000dcba <VCache::read(unsigned long long, int, void*)>:
c000dcba:	55                   	push   ebp
c000dcbb:	57                   	push   edi
c000dcbc:	56                   	push   esi
c000dcbd:	53                   	push   ebx
c000dcbe:	83 ec 1c             	sub    esp,0x1c
c000dcc1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000dcc5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dcc9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000dccd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000dcd1:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000dcd5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dcd9:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000dcdd:	74 0d                	je     c000dcec <VCache::read(unsigned long long, int, void*)+0x32>
c000dcdf:	83 ec 0c             	sub    esp,0xc
c000dce2:	57                   	push   edi
c000dce3:	e8 18 fe ff ff       	call   c000db00 <VCache::writeWriteBuffer()>
c000dce8:	83 c4 10             	add    esp,0x10
c000dceb:	90                   	nop
c000dcec:	83 fd 01             	cmp    ebp,0x1
c000dcef:	0f 85 93 00 00 00    	jne    c000dd88 <VCache::read(unsigned long long, int, void*)+0xce>
c000dcf5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dcf8:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcfb:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000dd02:	0f 85 80 00 00 00    	jne    c000dd88 <VCache::read(unsigned long long, int, void*)+0xce>
c000dd08:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000dd0b:	89 e9                	mov    ecx,ebp
c000dd0d:	f7 d9                	neg    ecx
c000dd0f:	89 c8                	mov    eax,ecx
c000dd11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000dd15:	c1 f8 1f             	sar    eax,0x1f
c000dd18:	21 d9                	and    ecx,ebx
c000dd1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd1e:	89 c8                	mov    eax,ecx
c000dd20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dd24:	21 f1                	and    ecx,esi
c000dd26:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000dd2a:	89 ca                	mov    edx,ecx
c000dd2c:	74 2e                	je     c000dd5c <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd2e:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000dd31:	75 29                	jne    c000dd5c <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd33:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000dd36:	75 24                	jne    c000dd5c <VCache::read(unsigned long long, int, void*)+0xa2>
c000dd38:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd3b:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000dd41:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000dd44:	8d 70 ff             	lea    esi,[eax-0x1]
c000dd47:	21 f3                	and    ebx,esi
c000dd49:	0f af d9             	imul   ebx,ecx
c000dd4c:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000dd4f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000dd53:	89 de                	mov    esi,ebx
c000dd55:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dd57:	31 c0                	xor    eax,eax
c000dd59:	eb 61                	jmp    c000ddbc <VCache::read(unsigned long long, int, void*)+0x102>
c000dd5b:	90                   	nop
c000dd5c:	83 ec 0c             	sub    esp,0xc
c000dd5f:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000dd63:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000dd67:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000dd6a:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000dd6d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd6f:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000dd72:	55                   	push   ebp
c000dd73:	52                   	push   edx
c000dd74:	50                   	push   eax
c000dd75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd79:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000dd7c:	83 c4 20             	add    esp,0x20
c000dd7f:	85 c0                	test   eax,eax
c000dd81:	75 39                	jne    c000ddbc <VCache::read(unsigned long long, int, void*)+0x102>
c000dd83:	eb b3                	jmp    c000dd38 <VCache::read(unsigned long long, int, void*)+0x7e>
c000dd85:	8d 76 00             	lea    esi,[esi+0x0]
c000dd88:	83 ec 0c             	sub    esp,0xc
c000dd8b:	57                   	push   edi
c000dd8c:	e8 5f fd ff ff       	call   c000daf0 <VCache::invalidateReadBuffer()>
c000dd91:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dd94:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dd98:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd9a:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000dd9e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000dda2:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000dda6:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000ddaa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ddae:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000ddb1:	83 c4 2c             	add    esp,0x2c
c000ddb4:	5b                   	pop    ebx
c000ddb5:	5e                   	pop    esi
c000ddb6:	5f                   	pop    edi
c000ddb7:	5d                   	pop    ebp
c000ddb8:	ff e0                	jmp    eax
c000ddba:	66 90                	xchg   ax,ax
c000ddbc:	83 c4 1c             	add    esp,0x1c
c000ddbf:	5b                   	pop    ebx
c000ddc0:	5e                   	pop    esi
c000ddc1:	5f                   	pop    edi
c000ddc2:	5d                   	pop    ebp
c000ddc3:	c3                   	ret    

c000ddc4 <Video::putrect(int, int, int, int, unsigned int)>:
c000ddc4:	55                   	push   ebp
c000ddc5:	57                   	push   edi
c000ddc6:	56                   	push   esi
c000ddc7:	53                   	push   ebx
c000ddc8:	83 ec 1c             	sub    esp,0x1c
c000ddcb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ddcf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ddd3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ddd7:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000dddb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dddf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dde3:	01 df                	add    edi,ebx
c000dde5:	39 fb                	cmp    ebx,edi
c000dde7:	7d 1f                	jge    c000de08 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000dde9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dded:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ddf1:	7d 12                	jge    c000de05 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ddf3:	8b 16                	mov    edx,DWORD PTR [esi]
c000ddf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ddf9:	53                   	push   ebx
c000ddfa:	55                   	push   ebp
c000ddfb:	45                   	inc    ebp
c000ddfc:	56                   	push   esi
c000ddfd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000de00:	83 c4 10             	add    esp,0x10
c000de03:	eb e8                	jmp    c000dded <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000de05:	43                   	inc    ebx
c000de06:	eb dd                	jmp    c000dde5 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000de08:	83 c4 1c             	add    esp,0x1c
c000de0b:	5b                   	pop    ebx
c000de0c:	5e                   	pop    esi
c000de0d:	5f                   	pop    edi
c000de0e:	5d                   	pop    ebp
c000de0f:	c3                   	ret    

c000de10 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000de10:	55                   	push   ebp
c000de11:	57                   	push   edi
c000de12:	31 ff                	xor    edi,edi
c000de14:	56                   	push   esi
c000de15:	53                   	push   ebx
c000de16:	83 ec 1c             	sub    esp,0x1c
c000de19:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000de1d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000de21:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000de28:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000de2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de31:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000de35:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000de39:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000de3c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000de40:	01 f9                	add    ecx,edi
c000de42:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000de46:	7d 2f                	jge    c000de77 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000de48:	31 f6                	xor    esi,esi
c000de4a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000de4e:	01 f2                	add    edx,esi
c000de50:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000de54:	7d 1a                	jge    c000de70 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000de56:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000de59:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000de5c:	46                   	inc    esi
c000de5d:	51                   	push   ecx
c000de5e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de62:	52                   	push   edx
c000de63:	55                   	push   ebp
c000de64:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de67:	83 c4 10             	add    esp,0x10
c000de6a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000de6e:	eb da                	jmp    c000de4a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000de70:	47                   	inc    edi
c000de71:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000de75:	eb c5                	jmp    c000de3c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000de77:	83 c4 1c             	add    esp,0x1c
c000de7a:	5b                   	pop    ebx
c000de7b:	5e                   	pop    esi
c000de7c:	5f                   	pop    edi
c000de7d:	5d                   	pop    ebp
c000de7e:	c3                   	ret    
c000de7f:	90                   	nop

c000de80 <Video::blit(unsigned int*, int, int, int, int)>:
c000de80:	55                   	push   ebp
c000de81:	57                   	push   edi
c000de82:	56                   	push   esi
c000de83:	53                   	push   ebx
c000de84:	83 ec 1c             	sub    esp,0x1c
c000de87:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de8b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000de8f:	85 c0                	test   eax,eax
c000de91:	79 02                	jns    c000de95 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000de93:	31 c0                	xor    eax,eax
c000de95:	c1 e0 02             	shl    eax,0x2
c000de98:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000de9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dea4:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000dea8:	39 d8                	cmp    eax,ebx
c000deaa:	7e 49                	jle    c000def5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000deac:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000deb2:	7c 41                	jl     c000def5 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000deb4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000deb8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000debc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000dec0:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000dec4:	39 f9                	cmp    ecx,edi
c000dec6:	7e 22                	jle    c000deea <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000dec8:	83 c5 04             	add    ebp,0x4
c000decb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ded1:	7c 14                	jl     c000dee7 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000ded3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ded5:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000ded8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000dedc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000dee0:	56                   	push   esi
c000dee1:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000dee4:	83 c4 10             	add    esp,0x10
c000dee7:	47                   	inc    edi
c000dee8:	eb d2                	jmp    c000debc <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000deea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000deee:	43                   	inc    ebx
c000deef:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000def3:	eb ab                	jmp    c000dea0 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000def5:	83 c4 1c             	add    esp,0x1c
c000def8:	5b                   	pop    ebx
c000def9:	5e                   	pop    esi
c000defa:	5f                   	pop    edi
c000defb:	5d                   	pop    ebp
c000defc:	c3                   	ret    
c000defd:	90                   	nop

c000defe <Video::clearScreen(unsigned int)>:
c000defe:	57                   	push   edi
c000deff:	56                   	push   esi
c000df00:	53                   	push   ebx
c000df01:	31 db                	xor    ebx,ebx
c000df03:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df07:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000df0d:	7e 1f                	jle    c000df2e <Video::clearScreen(unsigned int)+0x30>
c000df0f:	31 ff                	xor    edi,edi
c000df11:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000df17:	7e 12                	jle    c000df2b <Video::clearScreen(unsigned int)+0x2d>
c000df19:	8b 06                	mov    eax,DWORD PTR [esi]
c000df1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df1f:	53                   	push   ebx
c000df20:	57                   	push   edi
c000df21:	47                   	inc    edi
c000df22:	56                   	push   esi
c000df23:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000df26:	83 c4 10             	add    esp,0x10
c000df29:	eb e6                	jmp    c000df11 <Video::clearScreen(unsigned int)+0x13>
c000df2b:	43                   	inc    ebx
c000df2c:	eb d9                	jmp    c000df07 <Video::clearScreen(unsigned int)+0x9>
c000df2e:	5b                   	pop    ebx
c000df2f:	5e                   	pop    esi
c000df30:	5f                   	pop    edi
c000df31:	c3                   	ret    

c000df32 <Video::putpixel(int, int, unsigned int)>:
c000df32:	c7 44 24 04 a8 06 02 c0 	mov    DWORD PTR [esp+0x4],0xc00206a8
c000df3a:	e9 20 29 00 00       	jmp    c001085f <KePanic(char const*)>
c000df3f:	90                   	nop

c000df40 <Video::readPixelApprox(int, int)>:
c000df40:	83 ec 18             	sub    esp,0x18
c000df43:	68 c9 06 02 c0       	push   0xc00206c9
c000df48:	e8 12 29 00 00       	call   c001085f <KePanic(char const*)>
c000df4d:	31 c0                	xor    eax,eax
c000df4f:	83 c4 1c             	add    esp,0x1c
c000df52:	c3                   	ret    
c000df53:	90                   	nop

c000df54 <Video::Video(char const*)>:
c000df54:	83 ec 0c             	sub    esp,0xc
c000df57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df5b:	83 ec 08             	sub    esp,0x8
c000df5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df62:	50                   	push   eax
c000df63:	e8 e6 df ff ff       	call   c000bf4e <Device::Device(char const*)>
c000df68:	83 c4 10             	add    esp,0x10
c000df6b:	ba 44 07 02 c0       	mov    edx,0xc0020744
c000df70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df74:	89 10                	mov    DWORD PTR [eax],edx
c000df76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7a:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000df84:	90                   	nop
c000df85:	83 c4 0c             	add    esp,0xc
c000df88:	c3                   	ret    
c000df89:	90                   	nop

c000df8a <Video::~Video()>:
c000df8a:	83 ec 0c             	sub    esp,0xc
c000df8d:	ba 44 07 02 c0       	mov    edx,0xc0020744
c000df92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df96:	89 10                	mov    DWORD PTR [eax],edx
c000df98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9c:	83 ec 0c             	sub    esp,0xc
c000df9f:	50                   	push   eax
c000dfa0:	e8 13 dd ff ff       	call   c000bcb8 <Device::~Device()>
c000dfa5:	83 c4 10             	add    esp,0x10
c000dfa8:	90                   	nop
c000dfa9:	83 c4 0c             	add    esp,0xc
c000dfac:	c3                   	ret    
c000dfad:	90                   	nop

c000dfae <Video::~Video()>:
c000dfae:	83 ec 0c             	sub    esp,0xc
c000dfb1:	83 ec 0c             	sub    esp,0xc
c000dfb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb8:	e8 cd ff ff ff       	call   c000df8a <Video::~Video()>
c000dfbd:	83 c4 10             	add    esp,0x10
c000dfc0:	83 ec 08             	sub    esp,0x8
c000dfc3:	68 64 01 00 00       	push   0x164
c000dfc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfcc:	e8 84 c8 ff ff       	call   c000a855 <operator delete(void*, unsigned long)>
c000dfd1:	83 c4 10             	add    esp,0x10
c000dfd4:	83 c4 0c             	add    esp,0xc
c000dfd7:	c3                   	ret    

c000dfd8 <Video::isMonochrome()>:
c000dfd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dfdc:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000dfe2:	c3                   	ret    
c000dfe3:	90                   	nop

c000dfe4 <Video::getWidth()>:
c000dfe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dfe8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dfee:	c3                   	ret    
c000dfef:	90                   	nop

c000dff0 <Video::getHeight()>:
c000dff0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dff4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dffa:	c3                   	ret    
c000dffb:	90                   	nop

c000dffc <Video::drawCursor(int, int, unsigned int*, int)>:
c000dffc:	55                   	push   ebp
c000dffd:	57                   	push   edi
c000dffe:	56                   	push   esi
c000dfff:	53                   	push   ebx
c000e000:	83 ec 2c             	sub    esp,0x2c
c000e003:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e007:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e00b:	83 f8 01             	cmp    eax,0x1
c000e00e:	19 c9                	sbb    ecx,ecx
c000e010:	31 db                	xor    ebx,ebx
c000e012:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e016:	89 cd                	mov    ebp,ecx
c000e018:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e020:	f7 d5                	not    ebp
c000e022:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e028:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e02c:	01 d8                	add    eax,ebx
c000e02e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e032:	56                   	push   esi
c000e033:	e8 b8 ff ff ff       	call   c000dff0 <Video::getHeight()>
c000e038:	59                   	pop    ecx
c000e039:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e03d:	7e 70                	jle    c000e0af <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e03f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e043:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e047:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e04a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e04e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e052:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e059:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e05d:	89 f8                	mov    eax,edi
c000e05f:	83 c0 20             	add    eax,0x20
c000e062:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e066:	56                   	push   esi
c000e067:	e8 78 ff ff ff       	call   c000dfe4 <Video::getWidth()>
c000e06c:	5a                   	pop    edx
c000e06d:	39 c7                	cmp    edi,eax
c000e06f:	7d 34                	jge    c000e0a5 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e071:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e076:	74 05                	je     c000e07d <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e078:	8b 06                	mov    eax,DWORD PTR [esi]
c000e07a:	55                   	push   ebp
c000e07b:	eb 0d                	jmp    c000e08a <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e07d:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e082:	74 12                	je     c000e096 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e084:	8b 06                	mov    eax,DWORD PTR [esi]
c000e086:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e08a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e08e:	57                   	push   edi
c000e08f:	56                   	push   esi
c000e090:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e093:	83 c4 10             	add    esp,0x10
c000e096:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e09a:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e09e:	47                   	inc    edi
c000e09f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e0a3:	75 c1                	jne    c000e066 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e0a5:	43                   	inc    ebx
c000e0a6:	83 fb 20             	cmp    ebx,0x20
c000e0a9:	0f 85 79 ff ff ff    	jne    c000e028 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e0af:	83 c4 2c             	add    esp,0x2c
c000e0b2:	5b                   	pop    ebx
c000e0b3:	5e                   	pop    esi
c000e0b4:	5f                   	pop    edi
c000e0b5:	5d                   	pop    ebp
c000e0b6:	c3                   	ret    
c000e0b7:	90                   	nop

c000e0b8 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e0b8:	55                   	push   ebp
c000e0b9:	57                   	push   edi
c000e0ba:	56                   	push   esi
c000e0bb:	53                   	push   ebx
c000e0bc:	83 ec 28             	sub    esp,0x28
c000e0bf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e0c3:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e0c7:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e0cb:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e0cf:	c1 e6 08             	shl    esi,0x8
c000e0d2:	01 c6                	add    esi,eax
c000e0d4:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e0d8:	c1 e0 08             	shl    eax,0x8
c000e0db:	01 d0                	add    eax,edx
c000e0dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e0e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e0e5:	0f af c6             	imul   eax,esi
c000e0e8:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e0ef:	50                   	push   eax
c000e0f0:	e8 a5 99 ff ff       	call   c0007a9a <malloc>
c000e0f5:	83 c4 10             	add    esp,0x10
c000e0f8:	89 c7                	mov    edi,eax
c000e0fa:	85 c0                	test   eax,eax
c000e0fc:	75 10                	jne    c000e10e <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e0fe:	83 ec 0c             	sub    esp,0xc
c000e101:	68 f4 06 02 c0       	push   0xc00206f4
c000e106:	e8 54 27 00 00       	call   c001085f <KePanic(char const*)>
c000e10b:	83 c4 10             	add    esp,0x10
c000e10e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e112:	ba 12 00 00 00       	mov    edx,0x12
c000e117:	85 c0                	test   eax,eax
c000e119:	74 11                	je     c000e12c <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e11b:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e11f:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e123:	c1 fa 03             	sar    edx,0x3
c000e126:	0f af d1             	imul   edx,ecx
c000e129:	83 c2 12             	add    edx,0x12
c000e12c:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e130:	74 04                	je     c000e136 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e132:	85 f6                	test   esi,esi
c000e134:	75 12                	jne    c000e148 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e136:	83 ec 0c             	sub    esp,0xc
c000e139:	68 04 07 02 c0       	push   0xc0020704
c000e13e:	e8 3f c8 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c000e143:	e9 b8 00 00 00       	jmp    c000e200 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e148:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e14c:	83 f9 02             	cmp    ecx,0x2
c000e14f:	0f 85 96 00 00 00    	jne    c000e1eb <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e155:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e15a:	75 0e                	jne    c000e16a <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e15c:	85 c0                	test   eax,eax
c000e15e:	75 0a                	jne    c000e16a <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e160:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e163:	83 e8 18             	sub    eax,0x18
c000e166:	a8 f7                	test   al,0xf7
c000e168:	74 0a                	je     c000e174 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e16a:	83 ec 0c             	sub    esp,0xc
c000e16d:	68 19 07 02 c0       	push   0xc0020719
c000e172:	eb 7f                	jmp    c000e1f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e17c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e184:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e188:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e190:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e194:	75 0c                	jne    c000e1a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e196:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e19b:	c1 e0 18             	shl    eax,0x18
c000e19e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1a2:	45                   	inc    ebp
c000e1a3:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e1a8:	c1 e1 10             	shl    ecx,0x10
c000e1ab:	89 c8                	mov    eax,ecx
c000e1ad:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e1b2:	c1 e1 08             	shl    ecx,0x8
c000e1b5:	09 c1                	or     ecx,eax
c000e1b7:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e1bb:	09 c1                	or     ecx,eax
c000e1bd:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e1c1:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e1c5:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e1c9:	c1 f8 03             	sar    eax,0x3
c000e1cc:	01 c2                	add    edx,eax
c000e1ce:	89 e8                	mov    eax,ebp
c000e1d0:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000e1d4:	39 c6                	cmp    esi,eax
c000e1d6:	7f b0                	jg     c000e188 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000e1d8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e1dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e1e0:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000e1e3:	7e 22                	jle    c000e207 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000e1e5:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000e1e9:	eb 99                	jmp    c000e184 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000e1eb:	50                   	push   eax
c000e1ec:	50                   	push   eax
c000e1ed:	51                   	push   ecx
c000e1ee:	68 27 07 02 c0       	push   0xc0020727
c000e1f3:	e8 8a c7 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c000e1f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e1fb:	e8 aa 98 ff ff       	call   c0007aaa <free>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	31 ff                	xor    edi,edi
c000e205:	eb 0f                	jmp    c000e216 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000e207:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e20b:	89 30                	mov    DWORD PTR [eax],esi
c000e20d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e211:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000e214:	89 30                	mov    DWORD PTR [eax],esi
c000e216:	83 c4 1c             	add    esp,0x1c
c000e219:	89 f8                	mov    eax,edi
c000e21b:	5b                   	pop    ebx
c000e21c:	5e                   	pop    esi
c000e21d:	5f                   	pop    edi
c000e21e:	5d                   	pop    ebp
c000e21f:	c3                   	ret    

c000e220 <Video::putTGA(int, int, unsigned char*, int)>:
c000e220:	55                   	push   ebp
c000e221:	57                   	push   edi
c000e222:	56                   	push   esi
c000e223:	53                   	push   ebx
c000e224:	83 ec 28             	sub    esp,0x28
c000e227:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000e22b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e22f:	50                   	push   eax
c000e230:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e234:	50                   	push   eax
c000e235:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e239:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000e23d:	56                   	push   esi
c000e23e:	e8 75 fe ff ff       	call   c000e0b8 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000e243:	83 c4 20             	add    esp,0x20
c000e246:	85 c0                	test   eax,eax
c000e248:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e24c:	74 35                	je     c000e283 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e24e:	89 c7                	mov    edi,eax
c000e250:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e254:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e258:	39 d8                	cmp    eax,ebx
c000e25a:	7e 27                	jle    c000e283 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000e25c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e260:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e264:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e268:	39 e8                	cmp    eax,ebp
c000e26a:	7e 14                	jle    c000e280 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000e26c:	8b 06                	mov    eax,DWORD PTR [esi]
c000e26e:	83 c7 04             	add    edi,0x4
c000e271:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000e274:	53                   	push   ebx
c000e275:	55                   	push   ebp
c000e276:	45                   	inc    ebp
c000e277:	56                   	push   esi
c000e278:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e27b:	83 c4 10             	add    esp,0x10
c000e27e:	eb e0                	jmp    c000e260 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000e280:	43                   	inc    ebx
c000e281:	eb cd                	jmp    c000e250 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000e283:	83 c4 1c             	add    esp,0x1c
c000e286:	5b                   	pop    ebx
c000e287:	5e                   	pop    esi
c000e288:	5f                   	pop    edi
c000e289:	5d                   	pop    ebp
c000e28a:	c3                   	ret    
c000e28b:	90                   	nop

c000e28c <ACPI::close(int, int, void*)>:
c000e28c:	83 ec 1c             	sub    esp,0x1c
c000e28f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000e297:	74 0b                	je     c000e2a4 <ACPI::close(int, int, void*)+0x18>
c000e299:	b8 00 00 00 00       	mov    eax,0x0
c000e29e:	e9 99 00 00 00       	jmp    c000e33c <ACPI::close(int, int, void*)+0xb0>
c000e2a3:	90                   	nop
c000e2a4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000e2a9:	75 29                	jne    c000e2d4 <ACPI::close(int, int, void*)+0x48>
c000e2ab:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e2b0:	85 c0                	test   eax,eax
c000e2b2:	74 08                	je     c000e2bc <ACPI::close(int, int, void*)+0x30>
c000e2b4:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000e2b9:	ff d0                	call   eax
c000e2bb:	90                   	nop
c000e2bc:	83 ec 0c             	sub    esp,0xc
c000e2bf:	68 88 07 02 c0       	push   0xc0020788
c000e2c4:	e8 96 25 00 00       	call   c001085f <KePanic(char const*)>
c000e2c9:	83 c4 10             	add    esp,0x10
c000e2cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e2d1:	eb 69                	jmp    c000e33c <ACPI::close(int, int, void*)+0xb0>
c000e2d3:	90                   	nop
c000e2d4:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000e2d9:	75 59                	jne    c000e334 <ACPI::close(int, int, void*)+0xa8>
c000e2db:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e2e0:	85 c0                	test   eax,eax
c000e2e2:	74 08                	je     c000e2ec <ACPI::close(int, int, void*)+0x60>
c000e2e4:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000e2e9:	ff d0                	call   eax
c000e2eb:	90                   	nop
c000e2ec:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000e2f1:	8d 76 00             	lea    esi,[esi+0x0]
c000e2f4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e2f9:	83 e0 02             	and    eax,0x2
c000e2fc:	74 1e                	je     c000e31c <ACPI::close(int, int, void*)+0x90>
c000e2fe:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000e305:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e309:	89 c2                	mov    edx,eax
c000e30b:	ec                   	in     al,dx
c000e30c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e310:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000e314:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e318:	eb da                	jmp    c000e2f4 <ACPI::close(int, int, void*)+0x68>
c000e31a:	66 90                	xchg   ax,ax
c000e31c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000e323:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000e328:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000e32c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e330:	ee                   	out    dx,al
c000e331:	8d 76 00             	lea    esi,[esi+0x0]
c000e334:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e339:	8d 76 00             	lea    esi,[esi+0x0]
c000e33c:	83 c4 1c             	add    esp,0x1c
c000e33f:	c3                   	ret    

c000e340 <findRSDP()>:
c000e340:	83 ec 1c             	sub    esp,0x1c
c000e343:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e348:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e34e:	83 e0 04             	and    eax,0x4
c000e351:	0f b6 c0             	movzx  eax,al
c000e354:	85 c0                	test   eax,eax
c000e356:	75 08                	jne    c000e360 <findRSDP()+0x20>
c000e358:	b8 00 00 00 00       	mov    eax,0x0
c000e35d:	eb 75                	jmp    c000e3d4 <findRSDP()+0x94>
c000e35f:	90                   	nop
c000e360:	a1 e8 4e 02 c0       	mov    eax,ds:0xc0024ee8
c000e365:	3d ff 07 00 00       	cmp    eax,0x7ff
c000e36a:	7f 1c                	jg     c000e388 <findRSDP()+0x48>
c000e36c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e371:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e377:	83 e2 fb             	and    edx,0xfffffffb
c000e37a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e380:	b8 00 00 00 00       	mov    eax,0x0
c000e385:	eb 4d                	jmp    c000e3d4 <findRSDP()+0x94>
c000e387:	90                   	nop
c000e388:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000e390:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000e398:	77 32                	ja     c000e3cc <findRSDP()+0x8c>
c000e39a:	83 ec 04             	sub    esp,0x4
c000e39d:	6a 08                	push   0x8
c000e39f:	68 23 08 02 c0       	push   0xc0020823
c000e3a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e3a8:	e8 d3 1f ff ff       	call   c0000380 <memcmp>
c000e3ad:	83 c4 10             	add    esp,0x10
c000e3b0:	85 c0                	test   eax,eax
c000e3b2:	0f 94 c0             	sete   al
c000e3b5:	0f b6 c0             	movzx  eax,al
c000e3b8:	85 c0                	test   eax,eax
c000e3ba:	74 08                	je     c000e3c4 <findRSDP()+0x84>
c000e3bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3c0:	eb 12                	jmp    c000e3d4 <findRSDP()+0x94>
c000e3c2:	66 90                	xchg   ax,ax
c000e3c4:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000e3c9:	eb c5                	jmp    c000e390 <findRSDP()+0x50>
c000e3cb:	90                   	nop
c000e3cc:	b8 00 00 00 00       	mov    eax,0x0
c000e3d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e3d4:	83 c4 1c             	add    esp,0x1c
c000e3d7:	c3                   	ret    

c000e3d8 <loadACPITables(unsigned char*)>:
c000e3d8:	57                   	push   edi
c000e3d9:	56                   	push   esi
c000e3da:	53                   	push   ebx
c000e3db:	83 ec 60             	sub    esp,0x60
c000e3de:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e3e3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e3e9:	83 e0 04             	and    eax,0x4
c000e3ec:	0f b6 c0             	movzx  eax,al
c000e3ef:	85 c0                	test   eax,eax
c000e3f1:	0f 84 41 02 00 00    	je     c000e638 <loadACPITables(unsigned char*)+0x260>
c000e3f7:	a0 c0 76 02 c0       	mov    al,ds:0xc00276c0
c000e3fc:	0f b6 c0             	movzx  eax,al
c000e3ff:	85 c0                	test   eax,eax
c000e401:	74 79                	je     c000e47c <loadACPITables(unsigned char*)+0xa4>
c000e403:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e407:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000e40b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e40f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e412:	83 e8 24             	sub    eax,0x24
c000e415:	c1 e8 03             	shr    eax,0x3
c000e418:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e41c:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000e424:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e428:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000e42c:	0f 8d ba 00 00 00    	jge    c000e4ec <loadACPITables(unsigned char*)+0x114>
c000e432:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e436:	83 c0 24             	add    eax,0x24
c000e439:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e43d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e441:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e445:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e449:	c1 e0 03             	shl    eax,0x3
c000e44c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e450:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e454:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e457:	8b 00                	mov    eax,DWORD PTR [eax]
c000e459:	89 c1                	mov    ecx,eax
c000e45b:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e460:	8d 50 01             	lea    edx,[eax+0x1]
c000e463:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e469:	89 ca                	mov    edx,ecx
c000e46b:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e472:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000e477:	eb ab                	jmp    c000e424 <loadACPITables(unsigned char*)+0x4c>
c000e479:	8d 76 00             	lea    esi,[esi+0x0]
c000e47c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e480:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e484:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e488:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e48b:	83 e8 24             	sub    eax,0x24
c000e48e:	c1 e8 02             	shr    eax,0x2
c000e491:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e495:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e49d:	8d 76 00             	lea    esi,[esi+0x0]
c000e4a0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e4a4:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e4a8:	7d 42                	jge    c000e4ec <loadACPITables(unsigned char*)+0x114>
c000e4aa:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e4ae:	83 c0 24             	add    eax,0x24
c000e4b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e4b5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e4b9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e4bd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e4c1:	c1 e0 02             	shl    eax,0x2
c000e4c4:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e4c8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e4cc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e4ce:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e4d3:	8d 50 01             	lea    edx,[eax+0x1]
c000e4d6:	89 15 ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,edx
c000e4dc:	89 ca                	mov    edx,ecx
c000e4de:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e4e5:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000e4ea:	eb b4                	jmp    c000e4a0 <loadACPITables(unsigned char*)+0xc8>
c000e4ec:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e4f4:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e4f9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e4fd:	0f 8d 39 01 00 00    	jge    c000e63c <loadACPITables(unsigned char*)+0x264>
c000e503:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e507:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e50e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e512:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e516:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e51a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e51e:	25 ff 0f 00 00       	and    eax,0xfff
c000e523:	89 c6                	mov    esi,eax
c000e525:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e52b:	83 ec 0c             	sub    esp,0xc
c000e52e:	6a 01                	push   0x1
c000e530:	e8 d4 b0 ff ff       	call   c0009609 <Virt::allocateKernelVirtualPages(int)>
c000e535:	83 c4 10             	add    esp,0x10
c000e538:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e53c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e542:	83 ec 0c             	sub    esp,0xc
c000e545:	6a 01                	push   0x1
c000e547:	6a 01                	push   0x1
c000e549:	50                   	push   eax
c000e54a:	52                   	push   edx
c000e54b:	53                   	push   ebx
c000e54c:	e8 b3 ba ff ff       	call   c000a004 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e551:	83 c4 20             	add    esp,0x20
c000e554:	09 f0                	or     eax,esi
c000e556:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e55a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e55e:	c1 e0 03             	shl    eax,0x3
c000e561:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e566:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e56a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e56e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e572:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e57a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e57e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e582:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e586:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e58a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e58e:	89 c6                	mov    esi,eax
c000e590:	89 d7                	mov    edi,edx
c000e592:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e594:	89 c8                	mov    eax,ecx
c000e596:	89 fa                	mov    edx,edi
c000e598:	89 f3                	mov    ebx,esi
c000e59a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e59e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e5a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e5ad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e5b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5b5:	05 00 10 00 00       	add    eax,0x1000
c000e5ba:	c1 e8 0c             	shr    eax,0xc
c000e5bd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e5c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e5c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e5cd:	25 ff 0f 00 00       	and    eax,0xfff
c000e5d2:	89 c6                	mov    esi,eax
c000e5d4:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e5da:	83 ec 0c             	sub    esp,0xc
c000e5dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e5e1:	e8 23 b0 ff ff       	call   c0009609 <Virt::allocateKernelVirtualPages(int)>
c000e5e6:	83 c4 10             	add    esp,0x10
c000e5e9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e5ed:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e5f3:	83 ec 0c             	sub    esp,0xc
c000e5f6:	6a 01                	push   0x1
c000e5f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e5fc:	50                   	push   eax
c000e5fd:	52                   	push   edx
c000e5fe:	53                   	push   ebx
c000e5ff:	e8 00 ba ff ff       	call   c000a004 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e604:	83 c4 20             	add    esp,0x20
c000e607:	09 f0                	or     eax,esi
c000e609:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e60d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e611:	83 ec 0c             	sub    esp,0xc
c000e614:	50                   	push   eax
c000e615:	e8 0b b3 ff ff       	call   c0009925 <Virt::freeKernelVirtualPages(unsigned long)>
c000e61a:	83 c4 10             	add    esp,0x10
c000e61d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e621:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e625:	89 14 c5 c4 74 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8b3c],edx
c000e62c:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000e631:	e9 be fe ff ff       	jmp    c000e4f4 <loadACPITables(unsigned char*)+0x11c>
c000e636:	66 90                	xchg   ax,ax
c000e638:	90                   	nop
c000e639:	8d 76 00             	lea    esi,[esi+0x0]
c000e63c:	83 c4 60             	add    esp,0x60
c000e63f:	5b                   	pop    ebx
c000e640:	5e                   	pop    esi
c000e641:	5f                   	pop    edi
c000e642:	c3                   	ret    
c000e643:	90                   	nop

c000e644 <findRSDT(unsigned char*)>:
c000e644:	57                   	push   edi
c000e645:	56                   	push   esi
c000e646:	53                   	push   ebx
c000e647:	83 ec 50             	sub    esp,0x50
c000e64a:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e64f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e655:	83 e0 04             	and    eax,0x4
c000e658:	0f b6 c0             	movzx  eax,al
c000e65b:	85 c0                	test   eax,eax
c000e65d:	75 0d                	jne    c000e66c <findRSDT(unsigned char*)+0x28>
c000e65f:	b8 00 00 00 00       	mov    eax,0x0
c000e664:	e9 2b 01 00 00       	jmp    c000e794 <findRSDT(unsigned char*)+0x150>
c000e669:	8d 76 00             	lea    esi,[esi+0x0]
c000e66c:	89 e0                	mov    eax,esp
c000e66e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e672:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e676:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e67a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e682:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e686:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e68a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e68e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e692:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e696:	89 c6                	mov    esi,eax
c000e698:	89 d7                	mov    edi,edx
c000e69a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e69c:	89 c8                	mov    eax,ecx
c000e69e:	89 fa                	mov    edx,edi
c000e6a0:	89 f3                	mov    ebx,esi
c000e6a2:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e6a6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e6aa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e6ae:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e6b2:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e6b6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e6be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e6c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e6c6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6ce:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e6d2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e6d6:	25 ff 0f 00 00       	and    eax,0xfff
c000e6db:	89 c6                	mov    esi,eax
c000e6dd:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e6e3:	83 ec 0c             	sub    esp,0xc
c000e6e6:	6a 02                	push   0x2
c000e6e8:	e8 1c af ff ff       	call   c0009609 <Virt::allocateKernelVirtualPages(int)>
c000e6ed:	83 c4 10             	add    esp,0x10
c000e6f0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e6f4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e6fa:	83 ec 0c             	sub    esp,0xc
c000e6fd:	6a 01                	push   0x1
c000e6ff:	6a 02                	push   0x2
c000e701:	50                   	push   eax
c000e702:	52                   	push   edx
c000e703:	53                   	push   ebx
c000e704:	e8 fb b8 ff ff       	call   c000a004 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e709:	83 c4 20             	add    esp,0x20
c000e70c:	09 f0                	or     eax,esi
c000e70e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e712:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e716:	25 ff 0f 00 00       	and    eax,0xfff
c000e71b:	89 c6                	mov    esi,eax
c000e71d:	8b 1d b0 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb0
c000e723:	83 ec 0c             	sub    esp,0xc
c000e726:	6a 02                	push   0x2
c000e728:	e8 dc ae ff ff       	call   c0009609 <Virt::allocateKernelVirtualPages(int)>
c000e72d:	83 c4 10             	add    esp,0x10
c000e730:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e734:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	6a 01                	push   0x1
c000e73f:	6a 02                	push   0x2
c000e741:	50                   	push   eax
c000e742:	52                   	push   edx
c000e743:	53                   	push   ebx
c000e744:	e8 bb b8 ff ff       	call   c000a004 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e749:	83 c4 20             	add    esp,0x20
c000e74c:	09 f0                	or     eax,esi
c000e74e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e752:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e757:	85 c0                	test   eax,eax
c000e759:	75 11                	jne    c000e76c <findRSDT(unsigned char*)+0x128>
c000e75b:	c6 05 c0 76 02 c0 00 	mov    BYTE PTR ds:0xc00276c0,0x0
c000e762:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e766:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e76a:	eb 24                	jmp    c000e790 <findRSDT(unsigned char*)+0x14c>
c000e76c:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000e771:	83 f8 02             	cmp    eax,0x2
c000e774:	75 12                	jne    c000e788 <findRSDT(unsigned char*)+0x144>
c000e776:	c6 05 c0 76 02 c0 01 	mov    BYTE PTR ds:0xc00276c0,0x1
c000e77d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e781:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e785:	eb 09                	jmp    c000e790 <findRSDT(unsigned char*)+0x14c>
c000e787:	90                   	nop
c000e788:	b8 00 00 00 00       	mov    eax,0x0
c000e78d:	eb 05                	jmp    c000e794 <findRSDT(unsigned char*)+0x150>
c000e78f:	90                   	nop
c000e790:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e794:	83 c4 50             	add    esp,0x50
c000e797:	5b                   	pop    ebx
c000e798:	5e                   	pop    esi
c000e799:	5f                   	pop    edi
c000e79a:	c3                   	ret    
c000e79b:	90                   	nop

c000e79c <findDataTable(unsigned char*, char*)>:
c000e79c:	83 ec 1c             	sub    esp,0x1c
c000e79f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e7a4:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e7aa:	83 e0 04             	and    eax,0x4
c000e7ad:	0f b6 c0             	movzx  eax,al
c000e7b0:	85 c0                	test   eax,eax
c000e7b2:	75 08                	jne    c000e7bc <findDataTable(unsigned char*, char*)+0x20>
c000e7b4:	b8 00 00 00 00       	mov    eax,0x0
c000e7b9:	eb 5d                	jmp    c000e818 <findDataTable(unsigned char*, char*)+0x7c>
c000e7bb:	90                   	nop
c000e7bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e7c4:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000e7c9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e7cd:	7d 41                	jge    c000e810 <findDataTable(unsigned char*, char*)+0x74>
c000e7cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7d3:	c1 e0 03             	shl    eax,0x3
c000e7d6:	05 c0 74 02 c0       	add    eax,0xc00274c0
c000e7db:	83 ec 04             	sub    esp,0x4
c000e7de:	6a 04                	push   0x4
c000e7e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e7e4:	50                   	push   eax
c000e7e5:	e8 96 1b ff ff       	call   c0000380 <memcmp>
c000e7ea:	83 c4 10             	add    esp,0x10
c000e7ed:	85 c0                	test   eax,eax
c000e7ef:	0f 94 c0             	sete   al
c000e7f2:	0f b6 c0             	movzx  eax,al
c000e7f5:	85 c0                	test   eax,eax
c000e7f7:	74 0f                	je     c000e808 <findDataTable(unsigned char*, char*)+0x6c>
c000e7f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7fd:	8b 04 c5 c4 74 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd8b3c]
c000e804:	eb 12                	jmp    c000e818 <findDataTable(unsigned char*, char*)+0x7c>
c000e806:	66 90                	xchg   ax,ax
c000e808:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e80d:	eb b5                	jmp    c000e7c4 <findDataTable(unsigned char*, char*)+0x28>
c000e80f:	90                   	nop
c000e810:	b8 00 00 00 00       	mov    eax,0x0
c000e815:	8d 76 00             	lea    esi,[esi+0x0]
c000e818:	83 c4 1c             	add    esp,0x1c
c000e81b:	c3                   	ret    

c000e81c <scanMADT()>:
c000e81c:	53                   	push   ebx
c000e81d:	83 ec 38             	sub    esp,0x38
c000e820:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c000e825:	25 00 04 00 00       	and    eax,0x400
c000e82a:	74 14                	je     c000e840 <scanMADT()+0x24>
c000e82c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e831:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e837:	83 e2 fb             	and    edx,0xfffffffb
c000e83a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e840:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e845:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e84b:	83 e0 04             	and    eax,0x4
c000e84e:	0f b6 c0             	movzx  eax,al
c000e851:	85 c0                	test   eax,eax
c000e853:	0f 84 6b 04 00 00    	je     c000ecc4 <scanMADT()+0x4a8>
c000e859:	e8 e2 fa ff ff       	call   c000e340 <findRSDP()>
c000e85e:	a3 cc 76 02 c0       	mov    ds:0xc00276cc,eax
c000e863:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e868:	85 c0                	test   eax,eax
c000e86a:	75 1c                	jne    c000e888 <scanMADT()+0x6c>
c000e86c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e871:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e877:	83 e2 fb             	and    edx,0xfffffffb
c000e87a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e880:	e9 47 04 00 00       	jmp    c000eccc <scanMADT()+0x4b0>
c000e885:	8d 76 00             	lea    esi,[esi+0x0]
c000e888:	a1 cc 76 02 c0       	mov    eax,ds:0xc00276cc
c000e88d:	83 ec 0c             	sub    esp,0xc
c000e890:	50                   	push   eax
c000e891:	e8 ae fd ff ff       	call   c000e644 <findRSDT(unsigned char*)>
c000e896:	83 c4 10             	add    esp,0x10
c000e899:	a3 c8 76 02 c0       	mov    ds:0xc00276c8,eax
c000e89e:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8a3:	85 c0                	test   eax,eax
c000e8a5:	75 19                	jne    c000e8c0 <scanMADT()+0xa4>
c000e8a7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8ac:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8b2:	83 e2 fb             	and    edx,0xfffffffb
c000e8b5:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e8bb:	e9 0c 04 00 00       	jmp    c000eccc <scanMADT()+0x4b0>
c000e8c0:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8c5:	83 ec 0c             	sub    esp,0xc
c000e8c8:	50                   	push   eax
c000e8c9:	e8 0a fb ff ff       	call   c000e3d8 <loadACPITables(unsigned char*)>
c000e8ce:	83 c4 10             	add    esp,0x10
c000e8d1:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000e8d6:	83 ec 08             	sub    esp,0x8
c000e8d9:	68 2c 08 02 c0       	push   0xc002082c
c000e8de:	50                   	push   eax
c000e8df:	e8 b8 fe ff ff       	call   c000e79c <findDataTable(unsigned char*, char*)>
c000e8e4:	83 c4 10             	add    esp,0x10
c000e8e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e8eb:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e8f0:	75 1a                	jne    c000e90c <scanMADT()+0xf0>
c000e8f2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000e8f7:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e8fd:	83 e2 fe             	and    edx,0xfffffffe
c000e900:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e906:	e9 c1 03 00 00       	jmp    c000eccc <scanMADT()+0x4b0>
c000e90b:	90                   	nop
c000e90c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e914:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e918:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e91b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e91f:	0f 87 a7 03 00 00    	ja     c000eccc <scanMADT()+0x4b0>
c000e925:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e92d:	0f 87 99 03 00 00    	ja     c000eccc <scanMADT()+0x4b0>
c000e933:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e937:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e93b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e93f:	8d 50 01             	lea    edx,[eax+0x1]
c000e942:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e946:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e94a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e94e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e952:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e956:	8d 50 01             	lea    edx,[eax+0x1]
c000e959:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e95d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e961:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e965:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e969:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000e96e:	83 f8 02             	cmp    eax,0x2
c000e971:	0f 86 51 03 00 00    	jbe    c000ecc8 <scanMADT()+0x4ac>
c000e977:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000e97c:	85 c0                	test   eax,eax
c000e97e:	75 58                	jne    c000e9d8 <scanMADT()+0x1bc>
c000e980:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e984:	8d 50 01             	lea    edx,[eax+0x1]
c000e987:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e98b:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000e991:	0f b6 d2             	movzx  edx,dl
c000e994:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e998:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e99c:	88 82 00 79 02 c0    	mov    BYTE PTR [edx-0x3ffd8700],al
c000e9a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9a6:	8d 50 01             	lea    edx,[eax+0x1]
c000e9a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9ad:	8a 15 c0 78 02 c0    	mov    dl,BYTE PTR ds:0xc00278c0
c000e9b3:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e9b6:	88 0d c0 78 02 c0    	mov    BYTE PTR ds:0xc00278c0,cl
c000e9bc:	0f b6 d2             	movzx  edx,dl
c000e9bf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9c3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e9c7:	88 82 e0 78 02 c0    	mov    BYTE PTR [edx-0x3ffd8720],al
c000e9cd:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e9d2:	e9 d9 02 00 00       	jmp    c000ecb0 <scanMADT()+0x494>
c000e9d7:	90                   	nop
c000e9d8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000e9dd:	83 f8 01             	cmp    eax,0x1
c000e9e0:	0f 85 1a 01 00 00    	jne    c000eb00 <scanMADT()+0x2e4>
c000e9e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e9ea:	8d 50 01             	lea    edx,[eax+0x1]
c000e9ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e9f1:	8a 15 80 77 02 c0    	mov    dl,BYTE PTR ds:0xc0027780
c000e9f7:	0f b6 d2             	movzx  edx,dl
c000e9fa:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e9fe:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000ea02:	88 82 a0 77 02 c0    	mov    BYTE PTR [edx-0x3ffd8860],al
c000ea08:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000ea0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea11:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea15:	01 d0                	add    eax,edx
c000ea17:	83 c0 2c             	add    eax,0x2c
c000ea1a:	8a 00                	mov    al,BYTE PTR [eax]
c000ea1c:	0f b6 d0             	movzx  edx,al
c000ea1f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea23:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea2a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ea2e:	0f b6 c0             	movzx  eax,al
c000ea31:	c1 e0 08             	shl    eax,0x8
c000ea34:	89 d1                	mov    ecx,edx
c000ea36:	09 c1                	or     ecx,eax
c000ea38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea3c:	8d 50 02             	lea    edx,[eax+0x2]
c000ea3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea43:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea47:	0f b6 c0             	movzx  eax,al
c000ea4a:	c1 e0 10             	shl    eax,0x10
c000ea4d:	09 c1                	or     ecx,eax
c000ea4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea53:	8d 50 03             	lea    edx,[eax+0x3]
c000ea56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea5a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ea5e:	0f b6 c0             	movzx  eax,al
c000ea61:	c1 e0 18             	shl    eax,0x18
c000ea64:	09 c1                	or     ecx,eax
c000ea66:	89 ca                	mov    edx,ecx
c000ea68:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000ea6d:	0f b6 c0             	movzx  eax,al
c000ea70:	89 14 85 c0 77 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8840],edx
c000ea77:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ea7c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ea80:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea84:	01 d0                	add    eax,edx
c000ea86:	83 c0 2c             	add    eax,0x2c
c000ea89:	8a 00                	mov    al,BYTE PTR [eax]
c000ea8b:	0f b6 d0             	movzx  edx,al
c000ea8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ea92:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea95:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ea99:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ea9d:	0f b6 c0             	movzx  eax,al
c000eaa0:	c1 e0 08             	shl    eax,0x8
c000eaa3:	89 d1                	mov    ecx,edx
c000eaa5:	09 c1                	or     ecx,eax
c000eaa7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eaab:	8d 50 02             	lea    edx,[eax+0x2]
c000eaae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eab2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eab6:	0f b6 c0             	movzx  eax,al
c000eab9:	c1 e0 10             	shl    eax,0x10
c000eabc:	09 c1                	or     ecx,eax
c000eabe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eac2:	8d 50 03             	lea    edx,[eax+0x3]
c000eac5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eac9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eacd:	0f b6 c0             	movzx  eax,al
c000ead0:	c1 e0 18             	shl    eax,0x18
c000ead3:	09 c1                	or     ecx,eax
c000ead5:	89 ca                	mov    edx,ecx
c000ead7:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eadc:	0f b6 c0             	movzx  eax,al
c000eadf:	89 14 85 40 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd87c0],edx
c000eae6:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eaeb:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c000eaf0:	83 c0 01             	add    eax,0x1
c000eaf3:	a2 80 77 02 c0       	mov    ds:0xc0027780,al
c000eaf8:	e9 b3 01 00 00       	jmp    c000ecb0 <scanMADT()+0x494>
c000eafd:	8d 76 00             	lea    esi,[esi+0x0]
c000eb00:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eb05:	83 f8 02             	cmp    eax,0x2
c000eb08:	0f 85 ea 00 00 00    	jne    c000ebf8 <scanMADT()+0x3dc>
c000eb0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb12:	8d 50 01             	lea    edx,[eax+0x1]
c000eb15:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb19:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb1d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb21:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000eb25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb29:	8d 50 01             	lea    edx,[eax+0x1]
c000eb2c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000eb30:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb34:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000eb38:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000eb3c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eb40:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb44:	01 d0                	add    eax,edx
c000eb46:	83 c0 2c             	add    eax,0x2c
c000eb49:	8a 00                	mov    al,BYTE PTR [eax]
c000eb4b:	0f b6 d0             	movzx  edx,al
c000eb4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb52:	8d 48 01             	lea    ecx,[eax+0x1]
c000eb55:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb59:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000eb5d:	0f b6 c0             	movzx  eax,al
c000eb60:	c1 e0 08             	shl    eax,0x8
c000eb63:	89 d1                	mov    ecx,edx
c000eb65:	09 c1                	or     ecx,eax
c000eb67:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb6b:	8d 50 02             	lea    edx,[eax+0x2]
c000eb6e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb72:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb76:	0f b6 c0             	movzx  eax,al
c000eb79:	c1 e0 10             	shl    eax,0x10
c000eb7c:	09 c1                	or     ecx,eax
c000eb7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eb82:	8d 50 03             	lea    edx,[eax+0x3]
c000eb85:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eb89:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000eb8d:	0f b6 c0             	movzx  eax,al
c000eb90:	c1 e0 18             	shl    eax,0x18
c000eb93:	09 c8                	or     eax,ecx
c000eb95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eb99:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000eb9e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000eba2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000eba6:	01 d0                	add    eax,edx
c000eba8:	83 c0 2c             	add    eax,0x2c
c000ebab:	8a 00                	mov    al,BYTE PTR [eax]
c000ebad:	0f b6 c0             	movzx  eax,al
c000ebb0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ebb4:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ebb7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ebbb:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000ebbf:	0f b6 d2             	movzx  edx,dl
c000ebc2:	c1 e2 08             	shl    edx,0x8
c000ebc5:	09 d0                	or     eax,edx
c000ebc7:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000ebcc:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ebd1:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000ebd6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ebda:	88 90 60 1e 02 c0    	mov    BYTE PTR [eax-0x3ffde1a0],dl
c000ebe0:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000ebe5:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000ebea:	66 89 84 12 60 77 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd88a0],ax
c000ebf2:	e9 b9 00 00 00       	jmp    c000ecb0 <scanMADT()+0x494>
c000ebf7:	90                   	nop
c000ebf8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000ebfd:	83 f8 04             	cmp    eax,0x4
c000ec00:	0f 85 9a 00 00 00    	jne    c000eca0 <scanMADT()+0x484>
c000ec06:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec0a:	8d 50 01             	lea    edx,[eax+0x1]
c000ec0d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec11:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec15:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec19:	0f b6 c0             	movzx  eax,al
c000ec1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec20:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec24:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec28:	01 d0                	add    eax,edx
c000ec2a:	83 c0 2c             	add    eax,0x2c
c000ec2d:	8a 00                	mov    al,BYTE PTR [eax]
c000ec2f:	0f b6 d0             	movzx  edx,al
c000ec32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec36:	8d 48 01             	lea    ecx,[eax+0x1]
c000ec39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ec3d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ec41:	0f b6 c0             	movzx  eax,al
c000ec44:	c1 e0 08             	shl    eax,0x8
c000ec47:	09 d0                	or     eax,edx
c000ec49:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec4d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000ec52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ec56:	8d 50 01             	lea    edx,[eax+0x1]
c000ec59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ec5d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ec61:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ec65:	0f b6 c0             	movzx  eax,al
c000ec68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec70:	c1 e0 08             	shl    eax,0x8
c000ec73:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ec77:	89 c1                	mov    ecx,eax
c000ec79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec7d:	c1 e0 18             	shl    eax,0x18
c000ec80:	89 c3                	mov    ebx,eax
c000ec82:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c000ec87:	8d 50 01             	lea    edx,[eax+0x1]
c000ec8a:	89 15 d0 76 02 c0    	mov    DWORD PTR ds:0xc00276d0,edx
c000ec90:	09 d9                	or     ecx,ebx
c000ec92:	89 ca                	mov    edx,ecx
c000ec94:	89 14 85 e0 76 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8920],edx
c000ec9b:	eb 13                	jmp    c000ecb0 <scanMADT()+0x494>
c000ec9d:	8d 76 00             	lea    esi,[esi+0x0]
c000eca0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000eca5:	83 f8 05             	cmp    eax,0x5
c000eca8:	75 06                	jne    c000ecb0 <scanMADT()+0x494>
c000ecaa:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000ecaf:	90                   	nop
c000ecb0:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000ecb5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ecb9:	01 d0                	add    eax,edx
c000ecbb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ecbf:	e9 50 fc ff ff       	jmp    c000e914 <scanMADT()+0xf8>
c000ecc4:	90                   	nop
c000ecc5:	eb 05                	jmp    c000eccc <scanMADT()+0x4b0>
c000ecc7:	90                   	nop
c000ecc8:	90                   	nop
c000ecc9:	8d 76 00             	lea    esi,[esi+0x0]
c000eccc:	83 c4 38             	add    esp,0x38
c000eccf:	5b                   	pop    ebx
c000ecd0:	c3                   	ret    
c000ecd1:	90                   	nop
c000ecd2:	66 90                	xchg   ax,ax

c000ecd4 <ACPI::ACPI()>:
c000ecd4:	83 ec 0c             	sub    esp,0xc
c000ecd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecdb:	83 ec 08             	sub    esp,0x8
c000ecde:	68 31 08 02 c0       	push   0xc0020831
c000ece3:	50                   	push   eax
c000ece4:	e8 65 d2 ff ff       	call   c000bf4e <Device::Device(char const*)>
c000ece9:	83 c4 10             	add    esp,0x10
c000ecec:	ba 68 09 02 c0       	mov    edx,0xc0020968
c000ecf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecf5:	89 10                	mov    DWORD PTR [eax],edx
c000ecf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecfb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000ed02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed06:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000ed10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed14:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000ed1e:	e8 f9 fa ff ff       	call   c000e81c <scanMADT()>
c000ed23:	90                   	nop
c000ed24:	83 c4 0c             	add    esp,0xc
c000ed27:	c3                   	ret    

c000ed28 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000ed28:	83 ec 2c             	sub    esp,0x2c
c000ed2b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ed2f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ed33:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ed37:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000ed3b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ed40:	88 d0                	mov    al,dl
c000ed42:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ed46:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ed4b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ed53:	90                   	nop
c000ed54:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed58:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ed5e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000ed62:	0f 8d b0 00 00 00    	jge    c000ee18 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000ed68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed6c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed70:	83 c2 2a             	add    edx,0x2a
c000ed73:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000ed77:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000ed7c:	0f b7 c0             	movzx  eax,ax
c000ed7f:	39 c2                	cmp    edx,eax
c000ed81:	0f 85 85 00 00 00    	jne    c000ee0c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000ed87:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed8b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed8f:	83 c2 2a             	add    edx,0x2a
c000ed92:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000ed96:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000ed9b:	0f b6 c0             	movzx  eax,al
c000ed9e:	39 c2                	cmp    edx,eax
c000eda0:	75 6a                	jne    c000ee0c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000eda2:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000eda7:	85 c0                	test   eax,eax
c000eda9:	74 3d                	je     c000ede8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000edab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edaf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edb3:	83 c2 2a             	add    edx,0x2a
c000edb6:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000edba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edc1:	39 c2                	cmp    edx,eax
c000edc3:	74 13                	je     c000edd8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000edc5:	83 ec 0c             	sub    esp,0xc
c000edc8:	68 ac 07 02 c0       	push   0xc00207ac
c000edcd:	e8 8d 1a 00 00       	call   c001085f <KePanic(char const*)>
c000edd2:	83 c4 10             	add    esp,0x10
c000edd5:	8d 76 00             	lea    esi,[esi+0x0]
c000edd8:	83 ec 0c             	sub    esp,0xc
c000eddb:	68 36 08 02 c0       	push   0xc0020836
c000ede0:	e8 7a 1a 00 00       	call   c001085f <KePanic(char const*)>
c000ede5:	83 c4 10             	add    esp,0x10
c000ede8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000edec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edf0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edf4:	83 c2 2a             	add    edx,0x2a
c000edf7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000edfb:	8b 02                	mov    eax,DWORD PTR [edx]
c000edfd:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000ee00:	89 01                	mov    DWORD PTR [ecx],eax
c000ee02:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000ee05:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ee0a:	66 90                	xchg   ax,ax
c000ee0c:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000ee11:	e9 3e ff ff ff       	jmp    c000ed54 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000ee16:	66 90                	xchg   ax,ax
c000ee18:	90                   	nop
c000ee19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee1d:	83 c4 2c             	add    esp,0x2c
c000ee20:	c2 04 00             	ret    0x4
c000ee23:	90                   	nop

c000ee24 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000ee24:	83 ec 1c             	sub    esp,0x1c
c000ee27:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee2b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000ee2f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee33:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ee38:	88 c8                	mov    al,cl
c000ee3a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ee3e:	88 d0                	mov    al,dl
c000ee40:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ee44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee48:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee52:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ee55:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000ee59:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000ee5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee61:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ee67:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ee6b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000ee6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ee72:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ee77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee7b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee81:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ee85:	83 c0 01             	add    eax,0x1
c000ee88:	88 c1                	mov    cl,al
c000ee8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee8e:	83 c2 2a             	add    edx,0x2a
c000ee91:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ee95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee99:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ee9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eea3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000eea6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000eeaa:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000eeae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eeb2:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eeb8:	8d 50 01             	lea    edx,[eax+0x1]
c000eebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eebf:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000eec5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eec9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000eecf:	3d 00 02 00 00       	cmp    eax,0x200
c000eed4:	75 12                	jne    c000eee8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000eed6:	83 ec 0c             	sub    esp,0xc
c000eed9:	68 45 08 02 c0       	push   0xc0020845
c000eede:	e8 7c 19 00 00       	call   c001085f <KePanic(char const*)>
c000eee3:	83 c4 10             	add    esp,0x10
c000eee6:	66 90                	xchg   ax,ax
c000eee8:	90                   	nop
c000eee9:	83 c4 1c             	add    esp,0x1c
c000eeec:	c3                   	ret    
c000eeed:	90                   	nop
c000eeee:	66 90                	xchg   ax,ax

c000eef0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000eef0:	b8 00 00 00 00       	mov    eax,0x0
c000eef5:	c3                   	ret    
c000eef6:	66 90                	xchg   ax,ax

c000eef8 <ACPI::detectPCI()>:
c000eef8:	53                   	push   ebx
c000eef9:	83 ec 28             	sub    esp,0x28
c000eefc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ef01:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ef06:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ef0b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef11:	83 e0 04             	and    eax,0x4
c000ef14:	0f b6 c0             	movzx  eax,al
c000ef17:	85 c0                	test   eax,eax
c000ef19:	74 2d                	je     c000ef48 <ACPI::detectPCI()+0x50>
c000ef1b:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000ef20:	83 ec 08             	sub    esp,0x8
c000ef23:	68 62 08 02 c0       	push   0xc0020862
c000ef28:	50                   	push   eax
c000ef29:	e8 6e f8 ff ff       	call   c000e79c <findDataTable(unsigned char*, char*)>
c000ef2e:	83 c4 10             	add    esp,0x10
c000ef31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef35:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ef3a:	74 0c                	je     c000ef48 <ACPI::detectPCI()+0x50>
c000ef3c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef41:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef46:	66 90                	xchg   ax,ax
c000ef48:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ef50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef54:	8a 00                	mov    al,BYTE PTR [eax]
c000ef56:	0f b6 c0             	movzx  eax,al
c000ef59:	83 f8 01             	cmp    eax,0x1
c000ef5c:	75 0e                	jne    c000ef6c <ACPI::detectPCI()+0x74>
c000ef5e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef63:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ef68:	eb 2e                	jmp    c000ef98 <ACPI::detectPCI()+0xa0>
c000ef6a:	66 90                	xchg   ax,ax
c000ef6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef70:	8a 00                	mov    al,BYTE PTR [eax]
c000ef72:	0f b6 c0             	movzx  eax,al
c000ef75:	83 f8 02             	cmp    eax,0x2
c000ef78:	75 1e                	jne    c000ef98 <ACPI::detectPCI()+0xa0>
c000ef7a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ef7f:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000ef84:	85 c0                	test   eax,eax
c000ef86:	74 10                	je     c000ef98 <ACPI::detectPCI()+0xa0>
c000ef88:	83 ec 0c             	sub    esp,0xc
c000ef8b:	68 dc 07 02 c0       	push   0xc00207dc
c000ef90:	e8 ca 18 00 00       	call   c001085f <KePanic(char const*)>
c000ef95:	83 c4 10             	add    esp,0x10
c000ef98:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ef9c:	83 f0 01             	xor    eax,0x1
c000ef9f:	0f b6 c0             	movzx  eax,al
c000efa2:	85 c0                	test   eax,eax
c000efa4:	74 46                	je     c000efec <ACPI::detectPCI()+0xf4>
c000efa6:	e8 85 11 ff ff       	call   c0000130 <manualPCIProbe>
c000efab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000efaf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000efb4:	75 0e                	jne    c000efc4 <ACPI::detectPCI()+0xcc>
c000efb6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efbb:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000efc0:	eb 2a                	jmp    c000efec <ACPI::detectPCI()+0xf4>
c000efc2:	66 90                	xchg   ax,ax
c000efc4:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000efc9:	75 21                	jne    c000efec <ACPI::detectPCI()+0xf4>
c000efcb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000efd0:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000efd5:	85 c0                	test   eax,eax
c000efd7:	74 13                	je     c000efec <ACPI::detectPCI()+0xf4>
c000efd9:	83 ec 0c             	sub    esp,0xc
c000efdc:	68 dc 07 02 c0       	push   0xc00207dc
c000efe1:	e8 79 18 00 00       	call   c001085f <KePanic(char const*)>
c000efe6:	83 c4 10             	add    esp,0x10
c000efe9:	8d 76 00             	lea    esi,[esi+0x0]
c000efec:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000eff1:	85 c0                	test   eax,eax
c000eff3:	0f 84 87 00 00 00    	je     c000f080 <ACPI::detectPCI()+0x188>
c000eff9:	83 ec 0c             	sub    esp,0xc
c000effc:	68 67 08 02 c0       	push   0xc0020867
c000f001:	e8 dc 11 00 00       	call   c00101e2 <KeSetBootMessage(char const*)>
c000f006:	83 c4 10             	add    esp,0x10
c000f009:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f011:	83 ec 0c             	sub    esp,0xc
c000f014:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f018:	e8 7d 8a ff ff       	call   c0007a9a <malloc>
c000f01d:	83 c4 10             	add    esp,0x10
c000f020:	89 c3                	mov    ebx,eax
c000f022:	83 ec 0c             	sub    esp,0xc
c000f025:	53                   	push   ebx
c000f026:	e8 cd af 00 00       	call   c0019ff8 <PCI::PCI()>
c000f02b:	83 c4 10             	add    esp,0x10
c000f02e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f032:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f036:	83 ec 08             	sub    esp,0x8
c000f039:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f03d:	50                   	push   eax
c000f03e:	e8 73 cd ff ff       	call   c000bdb6 <Device::addChild(Device*)>
c000f043:	83 c4 10             	add    esp,0x10
c000f046:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f04a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f04c:	83 c0 08             	add    eax,0x8
c000f04f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f051:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f056:	85 d2                	test   edx,edx
c000f058:	74 0a                	je     c000f064 <ACPI::detectPCI()+0x16c>
c000f05a:	ba 01 00 00 00       	mov    edx,0x1
c000f05f:	eb 0b                	jmp    c000f06c <ACPI::detectPCI()+0x174>
c000f061:	8d 76 00             	lea    esi,[esi+0x0]
c000f064:	ba 02 00 00 00       	mov    edx,0x2
c000f069:	8d 76 00             	lea    esi,[esi+0x0]
c000f06c:	6a 00                	push   0x0
c000f06e:	6a 00                	push   0x0
c000f070:	52                   	push   edx
c000f071:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f075:	ff d0                	call   eax
c000f077:	83 c4 10             	add    esp,0x10
c000f07a:	e9 91 00 00 00       	jmp    c000f110 <ACPI::detectPCI()+0x218>
c000f07f:	90                   	nop
c000f080:	83 ec 0c             	sub    esp,0xc
c000f083:	68 7f 08 02 c0       	push   0xc002087f
c000f088:	e8 55 11 00 00       	call   c00101e2 <KeSetBootMessage(char const*)>
c000f08d:	83 c4 10             	add    esp,0x10
c000f090:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f097:	83 ec 0c             	sub    esp,0xc
c000f09a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f09e:	e8 f7 89 ff ff       	call   c0007a9a <malloc>
c000f0a3:	83 c4 10             	add    esp,0x10
c000f0a6:	89 c3                	mov    ebx,eax
c000f0a8:	83 ec 0c             	sub    esp,0xc
c000f0ab:	53                   	push   ebx
c000f0ac:	e8 e1 ba 00 00       	call   c001ab92 <IDE::IDE()>
c000f0b1:	83 c4 10             	add    esp,0x10
c000f0b4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f0bc:	83 ec 08             	sub    esp,0x8
c000f0bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f0c3:	50                   	push   eax
c000f0c4:	e8 ed cc ff ff       	call   c000bdb6 <Device::addChild(Device*)>
c000f0c9:	83 c4 10             	add    esp,0x10
c000f0cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0d0:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f0da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0de:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f0e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0eb:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f0f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0fa:	83 c0 08             	add    eax,0x8
c000f0fd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0ff:	6a 00                	push   0x0
c000f101:	6a 00                	push   0x0
c000f103:	6a 00                	push   0x0
c000f105:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f109:	ff d0                	call   eax
c000f10b:	83 c4 10             	add    esp,0x10
c000f10e:	66 90                	xchg   ax,ax
c000f110:	90                   	nop
c000f111:	83 c4 28             	add    esp,0x28
c000f114:	5b                   	pop    ebx
c000f115:	c3                   	ret    
c000f116:	66 90                	xchg   ax,ax

c000f118 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f118:	83 ec 1c             	sub    esp,0x1c
c000f11b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f11f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f122:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f126:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f12b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f130:	83 ec 08             	sub    esp,0x8
c000f133:	52                   	push   edx
c000f134:	50                   	push   eax
c000f135:	e8 36 80 ff ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c000f13a:	83 c4 10             	add    esp,0x10
c000f13d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f141:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f146:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f14b:	83 ec 04             	sub    esp,0x4
c000f14e:	6a 01                	push   0x1
c000f150:	52                   	push   edx
c000f151:	50                   	push   eax
c000f152:	e8 21 81 ff ff       	call   c0007278 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f157:	83 c4 10             	add    esp,0x10
c000f15a:	90                   	nop
c000f15b:	83 c4 1c             	add    esp,0x1c
c000f15e:	c3                   	ret    
c000f15f:	90                   	nop

c000f160 <ACPI::sleep()>:
c000f160:	83 ec 0c             	sub    esp,0xc
c000f163:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f168:	85 c0                	test   eax,eax
c000f16a:	74 08                	je     c000f174 <ACPI::sleep()+0x14>
c000f16c:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c000f171:	ff d0                	call   eax
c000f173:	90                   	nop
c000f174:	90                   	nop
c000f175:	83 c4 0c             	add    esp,0xc
c000f178:	c3                   	ret    
c000f179:	90                   	nop
c000f17a:	66 90                	xchg   ax,ax

c000f17c <ACPI::open(int, int, void*)>:
c000f17c:	57                   	push   edi
c000f17d:	56                   	push   esi
c000f17e:	53                   	push   ebx
c000f17f:	81 ec 70 01 00 00    	sub    esp,0x170
c000f185:	83 ec 0c             	sub    esp,0xc
c000f188:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f18f:	e8 64 fd ff ff       	call   c000eef8 <ACPI::detectPCI()>
c000f194:	83 c4 10             	add    esp,0x10
c000f197:	83 ec 0c             	sub    esp,0xc
c000f19a:	68 04 08 02 c0       	push   0xc0020804
c000f19f:	e8 3e 10 00 00       	call   c00101e2 <KeSetBootMessage(char const*)>
c000f1a4:	83 c4 10             	add    esp,0x10
c000f1a7:	83 ec 0c             	sub    esp,0xc
c000f1aa:	68 94 08 02 c0       	push   0xc0020894
c000f1af:	e8 88 49 00 00       	call   c0013b3c <Thr::loadKernelSymbolTable(char const*)>
c000f1b4:	83 c4 10             	add    esp,0x10
c000f1b7:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000f1bf:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000f1ca:	83 ec 0c             	sub    esp,0xc
c000f1cd:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f1d4:	e8 c1 88 ff ff       	call   c0007a9a <malloc>
c000f1d9:	83 c4 10             	add    esp,0x10
c000f1dc:	89 c3                	mov    ebx,eax
c000f1de:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f1e3:	83 ec 04             	sub    esp,0x4
c000f1e6:	50                   	push   eax
c000f1e7:	68 b2 08 02 c0       	push   0xc00208b2
c000f1ec:	53                   	push   ebx
c000f1ed:	e8 12 bd ff ff       	call   c000af04 <File::File(char const*, Process*)>
c000f1f2:	83 c4 10             	add    esp,0x10
c000f1f5:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000f1fc:	83 ec 08             	sub    esp,0x8
c000f1ff:	6a 01                	push   0x1
c000f201:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f208:	e8 b3 bd ff ff       	call   c000afc0 <File::open(FileOpenMode)>
c000f20d:	83 c4 10             	add    esp,0x10
c000f210:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000f217:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000f21f:	75 17                	jne    c000f238 <ACPI::open(int, int, void*)+0xbc>
c000f221:	83 ec 0c             	sub    esp,0xc
c000f224:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f22b:	e8 ee bd ff ff       	call   c000b01e <File::close()>
c000f230:	83 c4 10             	add    esp,0x10
c000f233:	eb 0b                	jmp    c000f240 <ACPI::open(int, int, void*)+0xc4>
c000f235:	8d 76 00             	lea    esi,[esi+0x0]
c000f238:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000f240:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000f248:	74 1e                	je     c000f268 <ACPI::open(int, int, void*)+0xec>
c000f24a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000f251:	8b 00                	mov    eax,DWORD PTR [eax]
c000f253:	83 c0 08             	add    eax,0x8
c000f256:	8b 00                	mov    eax,DWORD PTR [eax]
c000f258:	83 ec 0c             	sub    esp,0xc
c000f25b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000f262:	ff d0                	call   eax
c000f264:	83 c4 10             	add    esp,0x10
c000f267:	90                   	nop
c000f268:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000f26f:	83 f0 01             	xor    eax,0x1
c000f272:	0f b6 c0             	movzx  eax,al
c000f275:	85 c0                	test   eax,eax
c000f277:	74 43                	je     c000f2bc <ACPI::open(int, int, void*)+0x140>
c000f279:	83 ec 0c             	sub    esp,0xc
c000f27c:	68 d0 08 02 c0       	push   0xc00208d0
c000f281:	e8 5c 0f 00 00       	call   c00101e2 <KeSetBootMessage(char const*)>
c000f286:	83 c4 10             	add    esp,0x10
c000f289:	83 ec 04             	sub    esp,0x4
c000f28c:	6a 0c                	push   0xc
c000f28e:	68 eb 08 02 c0       	push   0xc00208eb
c000f293:	68 fc 08 02 c0       	push   0xc00208fc
c000f298:	e8 4b 3c 00 00       	call   c0012ee8 <Reg::readIntWithDefault(char*, char*, int)>
c000f29d:	83 c4 10             	add    esp,0x10
c000f2a0:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000f2a7:	83 ec 0c             	sub    esp,0xc
c000f2aa:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000f2b1:	e8 82 a5 ff ff       	call   c0009838 <Virt::setupPageSwapping(int)>
c000f2b6:	83 c4 10             	add    esp,0x10
c000f2b9:	8d 76 00             	lea    esi,[esi+0x0]
c000f2bc:	83 ec 0c             	sub    esp,0xc
c000f2bf:	68 75 f9 01 c0       	push   0xc001f975
c000f2c4:	e8 19 0f 00 00       	call   c00101e2 <KeSetBootMessage(char const*)>
c000f2c9:	83 c4 10             	add    esp,0x10
c000f2cc:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000f2d3:	83 ec 08             	sub    esp,0x8
c000f2d6:	6a 13                	push   0x13
c000f2d8:	50                   	push   eax
c000f2d9:	e8 f0 cd ff ff       	call   c000c0ce <getDevicesOfType(DeviceType)>
c000f2de:	83 c4 0c             	add    esp,0xc
c000f2e1:	8d 76 00             	lea    esi,[esi+0x0]
c000f2e4:	83 ec 0c             	sub    esp,0xc
c000f2e7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f2ee:	50                   	push   eax
c000f2ef:	e8 7c fa 00 00       	call   c001ed70 <LinkedList<Device>::isEmpty()>
c000f2f4:	83 c4 10             	add    esp,0x10
c000f2f7:	83 f0 01             	xor    eax,0x1
c000f2fa:	0f b6 c0             	movzx  eax,al
c000f2fd:	85 c0                	test   eax,eax
c000f2ff:	0f 84 47 01 00 00    	je     c000f44c <ACPI::open(int, int, void*)+0x2d0>
c000f305:	83 ec 0c             	sub    esp,0xc
c000f308:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f30f:	50                   	push   eax
c000f310:	e8 77 fa 00 00       	call   c001ed8c <LinkedList<Device>::getFirstElement()>
c000f315:	83 c4 10             	add    esp,0x10
c000f318:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000f31f:	83 ec 0c             	sub    esp,0xc
c000f322:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f329:	50                   	push   eax
c000f32a:	e8 65 fa 00 00       	call   c001ed94 <LinkedList<Device>::removeFirst()>
c000f32f:	83 c4 10             	add    esp,0x10
c000f332:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000f339:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000f340:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000f347:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f34b:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000f351:	ba 09 00 00 00       	mov    edx,0x9
c000f356:	fc                   	cld    
c000f357:	89 c7                	mov    edi,eax
c000f359:	89 de                	mov    esi,ebx
c000f35b:	89 d1                	mov    ecx,edx
c000f35d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f35f:	83 ec 08             	sub    esp,0x8
c000f362:	8d 44 24 38          	lea    eax,[esp+0x38]
c000f366:	50                   	push   eax
c000f367:	83 ec 24             	sub    esp,0x24
c000f36a:	89 e0                	mov    eax,esp
c000f36c:	89 c3                	mov    ebx,eax
c000f36e:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000f372:	ba 09 00 00 00       	mov    edx,0x9
c000f377:	89 df                	mov    edi,ebx
c000f379:	89 c6                	mov    esi,eax
c000f37b:	89 d1                	mov    ecx,edx
c000f37d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f37f:	e8 5e b1 00 00       	call   c001a4e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000f384:	83 c4 30             	add    esp,0x30
c000f387:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000f38e:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000f396:	0f 84 48 ff ff ff    	je     c000f2e4 <ACPI::open(int, int, void*)+0x168>
c000f39c:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000f3a7:	83 ec 0c             	sub    esp,0xc
c000f3aa:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000f3b1:	e8 e4 86 ff ff       	call   c0007a9a <malloc>
c000f3b6:	83 c4 10             	add    esp,0x10
c000f3b9:	89 c3                	mov    ebx,eax
c000f3bb:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f3c0:	83 ec 04             	sub    esp,0x4
c000f3c3:	50                   	push   eax
c000f3c4:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f3cb:	53                   	push   ebx
c000f3cc:	e8 33 bb ff ff       	call   c000af04 <File::File(char const*, Process*)>
c000f3d1:	83 c4 10             	add    esp,0x10
c000f3d4:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000f3db:	83 ec 0c             	sub    esp,0xc
c000f3de:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f3e5:	e8 44 be ff ff       	call   c000b22e <File::exists()>
c000f3ea:	83 c4 10             	add    esp,0x10
c000f3ed:	0f b6 c0             	movzx  eax,al
c000f3f0:	85 c0                	test   eax,eax
c000f3f2:	74 28                	je     c000f41c <ACPI::open(int, int, void*)+0x2a0>
c000f3f4:	83 ec 08             	sub    esp,0x8
c000f3f7:	6a 01                	push   0x1
c000f3f9:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f400:	e8 b1 51 00 00       	call   c00145b6 <Thr::loadDLL(char const*, bool)>
c000f405:	83 c4 10             	add    esp,0x10
c000f408:	83 ec 08             	sub    esp,0x8
c000f40b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000f412:	50                   	push   eax
c000f413:	e8 cf 53 00 00       	call   c00147e7 <Thr::executeDLL(unsigned long, void*)>
c000f418:	83 c4 10             	add    esp,0x10
c000f41b:	90                   	nop
c000f41c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000f424:	0f 84 ba fe ff ff    	je     c000f2e4 <ACPI::open(int, int, void*)+0x168>
c000f42a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000f431:	8b 00                	mov    eax,DWORD PTR [eax]
c000f433:	83 c0 08             	add    eax,0x8
c000f436:	8b 00                	mov    eax,DWORD PTR [eax]
c000f438:	83 ec 0c             	sub    esp,0xc
c000f43b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000f442:	ff d0                	call   eax
c000f444:	83 c4 10             	add    esp,0x10
c000f447:	e9 98 fe ff ff       	jmp    c000f2e4 <ACPI::open(int, int, void*)+0x168>
c000f44c:	83 ec 0c             	sub    esp,0xc
c000f44f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000f456:	50                   	push   eax
c000f457:	e8 10 f9 00 00       	call   c001ed6c <LinkedList<Device>::~LinkedList()>
c000f45c:	83 c4 10             	add    esp,0x10
c000f45f:	8b 1d b8 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024eb8
c000f465:	83 ec 08             	sub    esp,0x8
c000f468:	6a 01                	push   0x1
c000f46a:	68 03 09 02 c0       	push   0xc0020903
c000f46f:	e8 42 51 00 00       	call   c00145b6 <Thr::loadDLL(char const*, bool)>
c000f474:	83 c4 10             	add    esp,0x10
c000f477:	83 ec 08             	sub    esp,0x8
c000f47a:	53                   	push   ebx
c000f47b:	50                   	push   eax
c000f47c:	e8 66 53 00 00       	call   c00147e7 <Thr::executeDLL(unsigned long, void*)>
c000f481:	83 c4 10             	add    esp,0x10
c000f484:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f489:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f48f:	83 e0 04             	and    eax,0x4
c000f492:	0f b6 c0             	movzx  eax,al
c000f495:	85 c0                	test   eax,eax
c000f497:	0f 84 1b 01 00 00    	je     c000f5b8 <ACPI::open(int, int, void*)+0x43c>
c000f49d:	83 ec 0c             	sub    esp,0xc
c000f4a0:	68 20 09 02 c0       	push   0xc0020920
c000f4a5:	e8 38 0d 00 00       	call   c00101e2 <KeSetBootMessage(char const*)>
c000f4aa:	83 c4 10             	add    esp,0x10
c000f4ad:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f4b8:	83 ec 0c             	sub    esp,0xc
c000f4bb:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f4c2:	e8 d3 85 ff ff       	call   c0007a9a <malloc>
c000f4c7:	83 c4 10             	add    esp,0x10
c000f4ca:	89 c3                	mov    ebx,eax
c000f4cc:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c000f4d1:	83 ec 04             	sub    esp,0x4
c000f4d4:	50                   	push   eax
c000f4d5:	68 3d 09 02 c0       	push   0xc002093d
c000f4da:	53                   	push   ebx
c000f4db:	e8 24 ba ff ff       	call   c000af04 <File::File(char const*, Process*)>
c000f4e0:	83 c4 10             	add    esp,0x10
c000f4e3:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f4ea:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f4f2:	74 20                	je     c000f514 <ACPI::open(int, int, void*)+0x398>
c000f4f4:	83 ec 0c             	sub    esp,0xc
c000f4f7:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f4fe:	e8 2b bd ff ff       	call   c000b22e <File::exists()>
c000f503:	83 c4 10             	add    esp,0x10
c000f506:	0f b6 c0             	movzx  eax,al
c000f509:	85 c0                	test   eax,eax
c000f50b:	74 07                	je     c000f514 <ACPI::open(int, int, void*)+0x398>
c000f50d:	b0 01                	mov    al,0x1
c000f50f:	eb 07                	jmp    c000f518 <ACPI::open(int, int, void*)+0x39c>
c000f511:	8d 76 00             	lea    esi,[esi+0x0]
c000f514:	b0 00                	mov    al,0x0
c000f516:	66 90                	xchg   ax,ax
c000f518:	0f b6 c0             	movzx  eax,al
c000f51b:	85 c0                	test   eax,eax
c000f51d:	74 25                	je     c000f544 <ACPI::open(int, int, void*)+0x3c8>
c000f51f:	83 ec 08             	sub    esp,0x8
c000f522:	6a 01                	push   0x1
c000f524:	68 3d 09 02 c0       	push   0xc002093d
c000f529:	e8 88 50 00 00       	call   c00145b6 <Thr::loadDLL(char const*, bool)>
c000f52e:	83 c4 10             	add    esp,0x10
c000f531:	83 ec 08             	sub    esp,0x8
c000f534:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f53b:	50                   	push   eax
c000f53c:	e8 a6 52 00 00       	call   c00147e7 <Thr::executeDLL(unsigned long, void*)>
c000f541:	83 c4 10             	add    esp,0x10
c000f544:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f54c:	74 2a                	je     c000f578 <ACPI::open(int, int, void*)+0x3fc>
c000f54e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f556:	74 20                	je     c000f578 <ACPI::open(int, int, void*)+0x3fc>
c000f558:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f55f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f561:	83 c0 08             	add    eax,0x8
c000f564:	8b 00                	mov    eax,DWORD PTR [eax]
c000f566:	83 ec 0c             	sub    esp,0xc
c000f569:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f570:	ff d0                	call   eax
c000f572:	83 c4 10             	add    esp,0x10
c000f575:	8d 76 00             	lea    esi,[esi+0x0]
c000f578:	a1 c8 76 02 c0       	mov    eax,ds:0xc00276c8
c000f57d:	83 ec 08             	sub    esp,0x8
c000f580:	68 5a 09 02 c0       	push   0xc002095a
c000f585:	50                   	push   eax
c000f586:	e8 11 f2 ff ff       	call   c000e79c <findDataTable(unsigned char*, char*)>
c000f58b:	83 c4 10             	add    esp,0x10
c000f58e:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f595:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f59d:	74 19                	je     c000f5b8 <ACPI::open(int, int, void*)+0x43c>
c000f59f:	83 ec 08             	sub    esp,0x8
c000f5a2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f5a9:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f5b0:	e8 63 fb ff ff       	call   c000f118 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f5b5:	83 c4 10             	add    esp,0x10
c000f5b8:	b8 00 00 00 00       	mov    eax,0x0
c000f5bd:	81 c4 70 01 00 00    	add    esp,0x170
c000f5c3:	5b                   	pop    ebx
c000f5c4:	5e                   	pop    esi
c000f5c5:	5f                   	pop    edi
c000f5c6:	c3                   	ret    
c000f5c7:	90                   	nop

c000f5c8 <CPU::close(int, int, void*)>:
c000f5c8:	31 c0                	xor    eax,eax
c000f5ca:	c3                   	ret    
c000f5cb:	90                   	nop

c000f5cc <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f5cc:	60                   	pusha  
c000f5cd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f5d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f5d9:	9c                   	pushf  
c000f5da:	fa                   	cli    
c000f5db:	0f 09                	wbinvd 
c000f5dd:	0f 30                	wrmsr  
c000f5df:	9d                   	popf   
c000f5e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f5e4:	89 02                	mov    DWORD PTR [edx],eax
c000f5e6:	61                   	popa   
c000f5e7:	c3                   	ret    

c000f5e8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f5e8:	60                   	pusha  
c000f5e9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f5ed:	9c                   	pushf  
c000f5ee:	fa                   	cli    
c000f5ef:	0f 09                	wbinvd 
c000f5f1:	31 c0                	xor    eax,eax
c000f5f3:	31 d2                	xor    edx,edx
c000f5f5:	0f 32                	rdmsr  
c000f5f7:	9d                   	popf   
c000f5f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f5fc:	89 02                	mov    DWORD PTR [edx],eax
c000f5fe:	61                   	popa   
c000f5ff:	c3                   	ret    

c000f600 <CPU::AMD_K6_writeback(int, int, int)>:
c000f600:	56                   	push   esi
c000f601:	53                   	push   ebx
c000f602:	83 ec 10             	sub    esp,0x10
c000f605:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f609:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f60e:	75 5d                	jne    c000f66d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f610:	83 f8 08             	cmp    eax,0x8
c000f613:	75 09                	jne    c000f61e <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f615:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f61a:	7e 13                	jle    c000f62f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f61c:	eb 30                	jmp    c000f64e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f61e:	83 f8 06             	cmp    eax,0x6
c000f621:	7c 4a                	jl     c000f66d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f623:	83 f8 07             	cmp    eax,0x7
c000f626:	7e 07                	jle    c000f62f <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f628:	83 f8 09             	cmp    eax,0x9
c000f62b:	74 21                	je     c000f64e <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f62d:	eb 3e                	jmp    c000f66d <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f62f:	89 e6                	mov    esi,esp
c000f631:	8b 1d dc 4e 02 c0    	mov    ebx,DWORD PTR ds:0xc0024edc
c000f637:	56                   	push   esi
c000f638:	c1 eb 15             	shr    ebx,0x15
c000f63b:	68 82 00 00 c0       	push   0xc0000082
c000f640:	83 e3 7e             	and    ebx,0x7e
c000f643:	e8 a0 ff ff ff       	call   c000f5e8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f648:	56                   	push   esi
c000f649:	6a 00                	push   0x0
c000f64b:	53                   	push   ebx
c000f64c:	eb 12                	jmp    c000f660 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f64e:	89 e3                	mov    ebx,esp
c000f650:	53                   	push   ebx
c000f651:	68 82 00 00 c0       	push   0xc0000082
c000f656:	e8 8d ff ff ff       	call   c000f5e8 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f65b:	53                   	push   ebx
c000f65c:	6a 00                	push   0x0
c000f65e:	6a 00                	push   0x0
c000f660:	68 82 00 00 c0       	push   0xc0000082
c000f665:	e8 62 ff ff ff       	call   c000f5cc <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f66a:	83 c4 18             	add    esp,0x18
c000f66d:	83 c4 10             	add    esp,0x10
c000f670:	5b                   	pop    ebx
c000f671:	5e                   	pop    esi
c000f672:	c3                   	ret    
c000f673:	90                   	nop

c000f674 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f674:	55                   	push   ebp
c000f675:	57                   	push   edi
c000f676:	56                   	push   esi
c000f677:	53                   	push   ebx
c000f678:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f67c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f680:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f684:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f688:	39 05 70 1e 02 c0    	cmp    DWORD PTR ds:0xc0021e70,eax
c000f68e:	75 23                	jne    c000f6b3 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f690:	a1 2c 79 02 c0       	mov    eax,ds:0xc002792c
c000f695:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f699:	89 06                	mov    DWORD PTR [esi],eax
c000f69b:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f6a0:	89 07                	mov    DWORD PTR [edi],eax
c000f6a2:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f6a7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f6aa:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f6af:	89 02                	mov    DWORD PTR [edx],eax
c000f6b1:	eb 3f                	jmp    c000f6f2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f6b3:	31 c9                	xor    ecx,ecx
c000f6b5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6b9:	0f a2                	cpuid  
c000f6bb:	89 06                	mov    DWORD PTR [esi],eax
c000f6bd:	89 1f                	mov    DWORD PTR [edi],ebx
c000f6bf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6c3:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f6c6:	89 10                	mov    DWORD PTR [eax],edx
c000f6c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f6cc:	a3 70 1e 02 c0       	mov    ds:0xc0021e70,eax
c000f6d1:	8b 06                	mov    eax,DWORD PTR [esi]
c000f6d3:	a3 2c 79 02 c0       	mov    ds:0xc002792c,eax
c000f6d8:	8b 07                	mov    eax,DWORD PTR [edi]
c000f6da:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f6df:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f6e2:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f6e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f6eb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6ed:	a3 20 79 02 c0       	mov    ds:0xc0027920,eax
c000f6f2:	5b                   	pop    ebx
c000f6f3:	5e                   	pop    esi
c000f6f4:	5f                   	pop    edi
c000f6f5:	5d                   	pop    ebp
c000f6f6:	c3                   	ret    
c000f6f7:	90                   	nop

c000f6f8 <CPU::cpuidCheckEDX(unsigned int)>:
c000f6f8:	83 ec 10             	sub    esp,0x10
c000f6fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f6ff:	50                   	push   eax
c000f700:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f704:	50                   	push   eax
c000f705:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f709:	50                   	push   eax
c000f70a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f70e:	50                   	push   eax
c000f70f:	6a 01                	push   0x1
c000f711:	e8 5e ff ff ff       	call   c000f674 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f716:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f71a:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f71e:	0f 95 c0             	setne  al
c000f721:	83 c4 24             	add    esp,0x24
c000f724:	c3                   	ret    
c000f725:	90                   	nop

c000f726 <CPU::cpuidCheckECX(unsigned int)>:
c000f726:	83 ec 10             	sub    esp,0x10
c000f729:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f72d:	50                   	push   eax
c000f72e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f732:	50                   	push   eax
c000f733:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f737:	50                   	push   eax
c000f738:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f73c:	50                   	push   eax
c000f73d:	6a 01                	push   0x1
c000f73f:	e8 30 ff ff ff       	call   c000f674 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f744:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f748:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f74c:	0f 95 c0             	setne  al
c000f74f:	83 c4 24             	add    esp,0x24
c000f752:	c3                   	ret    
c000f753:	90                   	nop

c000f754 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f754:	83 ec 10             	sub    esp,0x10
c000f757:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f75b:	50                   	push   eax
c000f75c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f760:	50                   	push   eax
c000f761:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f765:	50                   	push   eax
c000f766:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f76a:	50                   	push   eax
c000f76b:	6a 07                	push   0x7
c000f76d:	e8 02 ff ff ff       	call   c000f674 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f772:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f776:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f77a:	0f 95 c0             	setne  al
c000f77d:	83 c4 24             	add    esp,0x24
c000f780:	c3                   	ret    
c000f781:	90                   	nop

c000f782 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f782:	83 ec 10             	sub    esp,0x10
c000f785:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f789:	50                   	push   eax
c000f78a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f78e:	50                   	push   eax
c000f78f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f793:	50                   	push   eax
c000f794:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f798:	50                   	push   eax
c000f799:	6a 07                	push   0x7
c000f79b:	e8 d4 fe ff ff       	call   c000f674 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f7a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7a4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f7a8:	0f 95 c0             	setne  al
c000f7ab:	83 c4 24             	add    esp,0x24
c000f7ae:	c3                   	ret    
c000f7af:	90                   	nop

c000f7b0 <CPU::CPU()>:
c000f7b0:	83 ec 0c             	sub    esp,0xc
c000f7b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7b7:	83 ec 08             	sub    esp,0x8
c000f7ba:	68 7d 0a 02 c0       	push   0xc0020a7d
c000f7bf:	50                   	push   eax
c000f7c0:	e8 89 c7 ff ff       	call   c000bf4e <Device::Device(char const*)>
c000f7c5:	83 c4 10             	add    esp,0x10
c000f7c8:	ba 04 0b 02 c0       	mov    edx,0xc0020b04
c000f7cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7d1:	89 10                	mov    DWORD PTR [eax],edx
c000f7d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7d7:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f7e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7e5:	05 78 01 00 00       	add    eax,0x178
c000f7ea:	83 ec 0c             	sub    esp,0xc
c000f7ed:	50                   	push   eax
c000f7ee:	e8 4f 7b ff ff       	call   c0007342 <GDT::GDT()>
c000f7f3:	83 c4 10             	add    esp,0x10
c000f7f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7fa:	05 7c 09 00 00       	add    eax,0x97c
c000f7ff:	83 ec 0c             	sub    esp,0xc
c000f802:	50                   	push   eax
c000f803:	e8 88 7d ff ff       	call   c0007590 <IDT::IDT()>
c000f808:	83 c4 10             	add    esp,0x10
c000f80b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f80f:	05 7c 11 00 00       	add    eax,0x117c
c000f814:	83 ec 0c             	sub    esp,0xc
c000f817:	50                   	push   eax
c000f818:	e8 23 97 ff ff       	call   c0008f40 <TSS::TSS()>
c000f81d:	83 c4 10             	add    esp,0x10
c000f820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f824:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f82f:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f839:	90                   	nop
c000f83a:	83 c4 0c             	add    esp,0xc
c000f83d:	c3                   	ret    

c000f83e <CPU::displayFeatures()>:
c000f83e:	c3                   	ret    
c000f83f:	90                   	nop

c000f840 <CPU::detectFeatures()>:
c000f840:	55                   	push   ebp
c000f841:	57                   	push   edi
c000f842:	56                   	push   esi
c000f843:	53                   	push   ebx
c000f844:	83 ec 30             	sub    esp,0x30
c000f847:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f84b:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f855:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f85c:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f862:	6a 0d                	push   0xd
c000f864:	6a 00                	push   0x0
c000f866:	55                   	push   ebp
c000f867:	e8 84 0c ff ff       	call   c00004f0 <memset>
c000f86c:	83 c4 10             	add    esp,0x10
c000f86f:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000f874:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f87b:	0f 84 db 05 00 00    	je     c000fe5c <CPU::detectFeatures()+0x61c>
c000f881:	83 ec 0c             	sub    esp,0xc
c000f884:	89 ef                	mov    edi,ebp
c000f886:	6a 10                	push   0x10
c000f888:	e8 6b fe ff ff       	call   c000f6f8 <CPU::cpuidCheckEDX(unsigned int)>
c000f88d:	83 e0 01             	and    eax,0x1
c000f890:	8d 14 00             	lea    edx,[eax+eax*1]
c000f893:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f899:	83 e0 fd             	and    eax,0xfffffffd
c000f89c:	09 d0                	or     eax,edx
c000f89e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8a4:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f8ab:	e8 48 fe ff ff       	call   c000f6f8 <CPU::cpuidCheckEDX(unsigned int)>
c000f8b0:	83 e0 01             	and    eax,0x1
c000f8b3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f8ba:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8c0:	83 e0 fb             	and    eax,0xfffffffb
c000f8c3:	09 d0                	or     eax,edx
c000f8c5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8cb:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f8d2:	e8 21 fe ff ff       	call   c000f6f8 <CPU::cpuidCheckEDX(unsigned int)>
c000f8d7:	83 e0 01             	and    eax,0x1
c000f8da:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f8e1:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f8e7:	83 e0 f7             	and    eax,0xfffffff7
c000f8ea:	09 d0                	or     eax,edx
c000f8ec:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f8f2:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f8f9:	e8 fa fd ff ff       	call   c000f6f8 <CPU::cpuidCheckEDX(unsigned int)>
c000f8fe:	83 e0 01             	and    eax,0x1
c000f901:	c1 e0 04             	shl    eax,0x4
c000f904:	89 c2                	mov    edx,eax
c000f906:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f90c:	83 e0 ef             	and    eax,0xffffffef
c000f90f:	09 d0                	or     eax,edx
c000f911:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f917:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f91e:	e8 d5 fd ff ff       	call   c000f6f8 <CPU::cpuidCheckEDX(unsigned int)>
c000f923:	83 e0 01             	and    eax,0x1
c000f926:	c1 e0 05             	shl    eax,0x5
c000f929:	89 c2                	mov    edx,eax
c000f92b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f931:	83 e0 df             	and    eax,0xffffffdf
c000f934:	09 d0                	or     eax,edx
c000f936:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f93c:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f943:	e8 b0 fd ff ff       	call   c000f6f8 <CPU::cpuidCheckEDX(unsigned int)>
c000f948:	83 e0 01             	and    eax,0x1
c000f94b:	8d 14 00             	lea    edx,[eax+eax*1]
c000f94e:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f954:	83 e0 fd             	and    eax,0xfffffffd
c000f957:	09 d0                	or     eax,edx
c000f959:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f95f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f966:	e8 8d fd ff ff       	call   c000f6f8 <CPU::cpuidCheckEDX(unsigned int)>
c000f96b:	83 e0 01             	and    eax,0x1
c000f96e:	c1 e0 06             	shl    eax,0x6
c000f971:	89 c2                	mov    edx,eax
c000f973:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f979:	83 e0 bf             	and    eax,0xffffffbf
c000f97c:	09 d0                	or     eax,edx
c000f97e:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f984:	58                   	pop    eax
c000f985:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f989:	50                   	push   eax
c000f98a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f98e:	50                   	push   eax
c000f98f:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f993:	56                   	push   esi
c000f994:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f998:	50                   	push   eax
c000f999:	6a 00                	push   0x0
c000f99b:	e8 d4 fc ff ff       	call   c000f674 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9a0:	b8 04 00 00 00       	mov    eax,0x4
c000f9a5:	89 c1                	mov    ecx,eax
c000f9a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9a9:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f9af:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f9b3:	89 c1                	mov    ecx,eax
c000f9b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9b7:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f9bd:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f9c1:	89 c1                	mov    ecx,eax
c000f9c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f9c5:	83 c4 18             	add    esp,0x18
c000f9c8:	68 8c 09 02 c0       	push   0xc002098c
c000f9cd:	55                   	push   ebp
c000f9ce:	e8 7d 0d ff ff       	call   c0000750 <strcmp>
c000f9d3:	83 c4 10             	add    esp,0x10
c000f9d6:	85 c0                	test   eax,eax
c000f9d8:	75 0f                	jne    c000f9e9 <CPU::detectFeatures()+0x1a9>
c000f9da:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f9e4:	e9 22 02 00 00       	jmp    c000fc0b <CPU::detectFeatures()+0x3cb>
c000f9e9:	50                   	push   eax
c000f9ea:	50                   	push   eax
c000f9eb:	68 99 09 02 c0       	push   0xc0020999
c000f9f0:	55                   	push   ebp
c000f9f1:	e8 5a 0d ff ff       	call   c0000750 <strcmp>
c000f9f6:	83 c4 10             	add    esp,0x10
c000f9f9:	85 c0                	test   eax,eax
c000f9fb:	74 dd                	je     c000f9da <CPU::detectFeatures()+0x19a>
c000f9fd:	50                   	push   eax
c000f9fe:	50                   	push   eax
c000f9ff:	68 a6 09 02 c0       	push   0xc00209a6
c000fa04:	55                   	push   ebp
c000fa05:	e8 46 0d ff ff       	call   c0000750 <strcmp>
c000fa0a:	83 c4 10             	add    esp,0x10
c000fa0d:	85 c0                	test   eax,eax
c000fa0f:	74 2a                	je     c000fa3b <CPU::detectFeatures()+0x1fb>
c000fa11:	50                   	push   eax
c000fa12:	50                   	push   eax
c000fa13:	68 b3 09 02 c0       	push   0xc00209b3
c000fa18:	55                   	push   ebp
c000fa19:	e8 32 0d ff ff       	call   c0000750 <strcmp>
c000fa1e:	83 c4 10             	add    esp,0x10
c000fa21:	85 c0                	test   eax,eax
c000fa23:	74 16                	je     c000fa3b <CPU::detectFeatures()+0x1fb>
c000fa25:	50                   	push   eax
c000fa26:	50                   	push   eax
c000fa27:	68 c0 09 02 c0       	push   0xc00209c0
c000fa2c:	55                   	push   ebp
c000fa2d:	e8 1e 0d ff ff       	call   c0000750 <strcmp>
c000fa32:	83 c4 10             	add    esp,0x10
c000fa35:	85 c0                	test   eax,eax
c000fa37:	74 48                	je     c000fa81 <CPU::detectFeatures()+0x241>
c000fa39:	eb 0f                	jmp    c000fa4a <CPU::detectFeatures()+0x20a>
c000fa3b:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000fa45:	e9 c1 01 00 00       	jmp    c000fc0b <CPU::detectFeatures()+0x3cb>
c000fa4a:	50                   	push   eax
c000fa4b:	50                   	push   eax
c000fa4c:	68 cd 09 02 c0       	push   0xc00209cd
c000fa51:	55                   	push   ebp
c000fa52:	e8 f9 0c ff ff       	call   c0000750 <strcmp>
c000fa57:	83 c4 10             	add    esp,0x10
c000fa5a:	85 c0                	test   eax,eax
c000fa5c:	74 23                	je     c000fa81 <CPU::detectFeatures()+0x241>
c000fa5e:	57                   	push   edi
c000fa5f:	57                   	push   edi
c000fa60:	68 da 09 02 c0       	push   0xc00209da
c000fa65:	55                   	push   ebp
c000fa66:	e8 e5 0c ff ff       	call   c0000750 <strcmp>
c000fa6b:	83 c4 10             	add    esp,0x10
c000fa6e:	85 c0                	test   eax,eax
c000fa70:	75 1e                	jne    c000fa90 <CPU::detectFeatures()+0x250>
c000fa72:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fa7c:	e9 8a 01 00 00       	jmp    c000fc0b <CPU::detectFeatures()+0x3cb>
c000fa81:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000fa8b:	e9 7b 01 00 00       	jmp    c000fc0b <CPU::detectFeatures()+0x3cb>
c000fa90:	56                   	push   esi
c000fa91:	56                   	push   esi
c000fa92:	68 e7 09 02 c0       	push   0xc00209e7
c000fa97:	55                   	push   ebp
c000fa98:	e8 b3 0c ff ff       	call   c0000750 <strcmp>
c000fa9d:	83 c4 10             	add    esp,0x10
c000faa0:	85 c0                	test   eax,eax
c000faa2:	75 0f                	jne    c000fab3 <CPU::detectFeatures()+0x273>
c000faa4:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000faae:	e9 58 01 00 00       	jmp    c000fc0b <CPU::detectFeatures()+0x3cb>
c000fab3:	51                   	push   ecx
c000fab4:	51                   	push   ecx
c000fab5:	68 a6 09 02 c0       	push   0xc00209a6
c000faba:	55                   	push   ebp
c000fabb:	e8 90 0c ff ff       	call   c0000750 <strcmp>
c000fac0:	83 c4 10             	add    esp,0x10
c000fac3:	85 c0                	test   eax,eax
c000fac5:	75 0f                	jne    c000fad6 <CPU::detectFeatures()+0x296>
c000fac7:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000fad1:	e9 35 01 00 00       	jmp    c000fc0b <CPU::detectFeatures()+0x3cb>
c000fad6:	52                   	push   edx
c000fad7:	52                   	push   edx
c000fad8:	68 f4 09 02 c0       	push   0xc00209f4
c000fadd:	55                   	push   ebp
c000fade:	e8 6d 0c ff ff       	call   c0000750 <strcmp>
c000fae3:	83 c4 10             	add    esp,0x10
c000fae6:	85 c0                	test   eax,eax
c000fae8:	75 0f                	jne    c000faf9 <CPU::detectFeatures()+0x2b9>
c000faea:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000faf4:	e9 12 01 00 00       	jmp    c000fc0b <CPU::detectFeatures()+0x3cb>
c000faf9:	50                   	push   eax
c000fafa:	50                   	push   eax
c000fafb:	68 01 0a 02 c0       	push   0xc0020a01
c000fb00:	55                   	push   ebp
c000fb01:	e8 4a 0c ff ff       	call   c0000750 <strcmp>
c000fb06:	83 c4 10             	add    esp,0x10
c000fb09:	85 c0                	test   eax,eax
c000fb0b:	75 0f                	jne    c000fb1c <CPU::detectFeatures()+0x2dc>
c000fb0d:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000fb17:	e9 ef 00 00 00       	jmp    c000fc0b <CPU::detectFeatures()+0x3cb>
c000fb1c:	50                   	push   eax
c000fb1d:	50                   	push   eax
c000fb1e:	68 0e 0a 02 c0       	push   0xc0020a0e
c000fb23:	55                   	push   ebp
c000fb24:	e8 27 0c ff ff       	call   c0000750 <strcmp>
c000fb29:	83 c4 10             	add    esp,0x10
c000fb2c:	85 c0                	test   eax,eax
c000fb2e:	75 0f                	jne    c000fb3f <CPU::detectFeatures()+0x2ff>
c000fb30:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000fb3a:	e9 cc 00 00 00       	jmp    c000fc0b <CPU::detectFeatures()+0x3cb>
c000fb3f:	50                   	push   eax
c000fb40:	50                   	push   eax
c000fb41:	68 1b 0a 02 c0       	push   0xc0020a1b
c000fb46:	55                   	push   ebp
c000fb47:	e8 04 0c ff ff       	call   c0000750 <strcmp>
c000fb4c:	83 c4 10             	add    esp,0x10
c000fb4f:	85 c0                	test   eax,eax
c000fb51:	75 0f                	jne    c000fb62 <CPU::detectFeatures()+0x322>
c000fb53:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000fb5d:	e9 a9 00 00 00       	jmp    c000fc0b <CPU::detectFeatures()+0x3cb>
c000fb62:	50                   	push   eax
c000fb63:	50                   	push   eax
c000fb64:	68 28 0a 02 c0       	push   0xc0020a28
c000fb69:	55                   	push   ebp
c000fb6a:	e8 e1 0b ff ff       	call   c0000750 <strcmp>
c000fb6f:	83 c4 10             	add    esp,0x10
c000fb72:	85 c0                	test   eax,eax
c000fb74:	75 0f                	jne    c000fb85 <CPU::detectFeatures()+0x345>
c000fb76:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000fb80:	e9 86 00 00 00       	jmp    c000fc0b <CPU::detectFeatures()+0x3cb>
c000fb85:	50                   	push   eax
c000fb86:	50                   	push   eax
c000fb87:	68 35 0a 02 c0       	push   0xc0020a35
c000fb8c:	55                   	push   ebp
c000fb8d:	e8 be 0b ff ff       	call   c0000750 <strcmp>
c000fb92:	83 c4 10             	add    esp,0x10
c000fb95:	85 c0                	test   eax,eax
c000fb97:	75 0c                	jne    c000fba5 <CPU::detectFeatures()+0x365>
c000fb99:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000fba3:	eb 66                	jmp    c000fc0b <CPU::detectFeatures()+0x3cb>
c000fba5:	50                   	push   eax
c000fba6:	50                   	push   eax
c000fba7:	68 42 0a 02 c0       	push   0xc0020a42
c000fbac:	55                   	push   ebp
c000fbad:	e8 9e 0b ff ff       	call   c0000750 <strcmp>
c000fbb2:	83 c4 10             	add    esp,0x10
c000fbb5:	85 c0                	test   eax,eax
c000fbb7:	75 0c                	jne    c000fbc5 <CPU::detectFeatures()+0x385>
c000fbb9:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000fbc3:	eb 46                	jmp    c000fc0b <CPU::detectFeatures()+0x3cb>
c000fbc5:	57                   	push   edi
c000fbc6:	57                   	push   edi
c000fbc7:	68 4f 0a 02 c0       	push   0xc0020a4f
c000fbcc:	55                   	push   ebp
c000fbcd:	e8 7e 0b ff ff       	call   c0000750 <strcmp>
c000fbd2:	83 c4 10             	add    esp,0x10
c000fbd5:	85 c0                	test   eax,eax
c000fbd7:	74 e0                	je     c000fbb9 <CPU::detectFeatures()+0x379>
c000fbd9:	56                   	push   esi
c000fbda:	56                   	push   esi
c000fbdb:	68 5c 0a 02 c0       	push   0xc0020a5c
c000fbe0:	55                   	push   ebp
c000fbe1:	e8 6a 0b ff ff       	call   c0000750 <strcmp>
c000fbe6:	83 c4 10             	add    esp,0x10
c000fbe9:	85 c0                	test   eax,eax
c000fbeb:	74 cc                	je     c000fbb9 <CPU::detectFeatures()+0x379>
c000fbed:	51                   	push   ecx
c000fbee:	51                   	push   ecx
c000fbef:	68 69 0a 02 c0       	push   0xc0020a69
c000fbf4:	55                   	push   ebp
c000fbf5:	e8 56 0b ff ff       	call   c0000750 <strcmp>
c000fbfa:	83 c4 10             	add    esp,0x10
c000fbfd:	85 c0                	test   eax,eax
c000fbff:	74 b8                	je     c000fbb9 <CPU::detectFeatures()+0x379>
c000fc01:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000fc0b:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000fc10:	0f 86 be 00 00 00    	jbe    c000fcd4 <CPU::detectFeatures()+0x494>
c000fc16:	83 ec 0c             	sub    esp,0xc
c000fc19:	68 80 00 00 00       	push   0x80
c000fc1e:	e8 31 fb ff ff       	call   c000f754 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc23:	83 e0 01             	and    eax,0x1
c000fc26:	c1 e0 06             	shl    eax,0x6
c000fc29:	89 c2                	mov    edx,eax
c000fc2b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc31:	83 e0 bf             	and    eax,0xffffffbf
c000fc34:	09 d0                	or     eax,edx
c000fc36:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc3c:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000fc43:	e8 0c fb ff ff       	call   c000f754 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc48:	83 e0 01             	and    eax,0x1
c000fc4b:	c1 e0 04             	shl    eax,0x4
c000fc4e:	89 c2                	mov    edx,eax
c000fc50:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc56:	83 e0 ef             	and    eax,0xffffffef
c000fc59:	09 d0                	or     eax,edx
c000fc5b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fc61:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000fc68:	e8 e7 fa ff ff       	call   c000f754 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000fc6d:	89 c2                	mov    edx,eax
c000fc6f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000fc75:	c1 e2 07             	shl    edx,0x7
c000fc78:	83 e0 7f             	and    eax,0x7f
c000fc7b:	09 d0                	or     eax,edx
c000fc7d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000fc83:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000fc8a:	e8 f3 fa ff ff       	call   c000f782 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fc8f:	83 e0 01             	and    eax,0x1
c000fc92:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000fc99:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fc9f:	83 e0 f7             	and    eax,0xfffffff7
c000fca2:	09 d0                	or     eax,edx
c000fca4:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fcaa:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000fcb1:	e8 cc fa ff ff       	call   c000f782 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000fcb6:	83 c4 10             	add    esp,0x10
c000fcb9:	83 e0 01             	and    eax,0x1
c000fcbc:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fcc3:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fcc9:	83 e0 fb             	and    eax,0xfffffffb
c000fccc:	09 d0                	or     eax,edx
c000fcce:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fcd4:	83 ec 0c             	sub    esp,0xc
c000fcd7:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fcdb:	50                   	push   eax
c000fcdc:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fce0:	50                   	push   eax
c000fce1:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000fce5:	57                   	push   edi
c000fce6:	8d 74 24 28          	lea    esi,[esp+0x28]
c000fcea:	56                   	push   esi
c000fceb:	6a 01                	push   0x1
c000fced:	e8 82 f9 ff ff       	call   c000f674 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fcf2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fcf6:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c000fcfc:	89 c1                	mov    ecx,eax
c000fcfe:	83 e2 f0             	and    edx,0xfffffff0
c000fd01:	83 e1 0f             	and    ecx,0xf
c000fd04:	09 ca                	or     edx,ecx
c000fd06:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000fd0c:	89 c2                	mov    edx,eax
c000fd0e:	c1 ea 04             	shr    edx,0x4
c000fd11:	83 e2 0f             	and    edx,0xf
c000fd14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000fd18:	89 d1                	mov    ecx,edx
c000fd1a:	83 c4 20             	add    esp,0x20
c000fd1d:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c000fd23:	c1 e1 06             	shl    ecx,0x6
c000fd26:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c000fd2c:	09 ca                	or     edx,ecx
c000fd2e:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000fd35:	89 c2                	mov    edx,eax
c000fd37:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c000fd3d:	c1 ea 08             	shr    edx,0x8
c000fd40:	83 e1 3f             	and    ecx,0x3f
c000fd43:	83 e2 0f             	and    edx,0xf
c000fd46:	89 d5                	mov    ebp,edx
c000fd48:	83 e5 03             	and    ebp,0x3
c000fd4b:	c1 e5 06             	shl    ebp,0x6
c000fd4e:	09 e9                	or     ecx,ebp
c000fd50:	89 d5                	mov    ebp,edx
c000fd52:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c000fd58:	c1 ed 02             	shr    ebp,0x2
c000fd5b:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c000fd61:	83 e1 c0             	and    ecx,0xffffffc0
c000fd64:	09 e9                	or     ecx,ebp
c000fd66:	89 c5                	mov    ebp,eax
c000fd68:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000fd6e:	c1 ed 08             	shr    ebp,0x8
c000fd71:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c000fd77:	83 e5 30             	and    ebp,0x30
c000fd7a:	83 e1 cf             	and    ecx,0xffffffcf
c000fd7d:	09 e9                	or     ecx,ebp
c000fd7f:	83 fa 06             	cmp    edx,0x6
c000fd82:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c000fd88:	74 05                	je     c000fd8f <CPU::detectFeatures()+0x54f>
c000fd8a:	83 fa 0f             	cmp    edx,0xf
c000fd8d:	75 64                	jne    c000fdf3 <CPU::detectFeatures()+0x5b3>
c000fd8f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000fd95:	89 c1                	mov    ecx,eax
c000fd97:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c000fd9d:	c1 e9 10             	shr    ecx,0x10
c000fda0:	c1 e1 04             	shl    ecx,0x4
c000fda3:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c000fda7:	0f b6 c9             	movzx  ecx,cl
c000fdaa:	c1 e1 06             	shl    ecx,0x6
c000fdad:	09 e9                	or     ecx,ebp
c000fdaf:	83 fa 0f             	cmp    edx,0xf
c000fdb2:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c000fdb9:	75 38                	jne    c000fdf3 <CPU::detectFeatures()+0x5b3>
c000fdbb:	c1 e8 14             	shr    eax,0x14
c000fdbe:	83 c0 0f             	add    eax,0xf
c000fdc1:	0f b6 c0             	movzx  eax,al
c000fdc4:	89 c2                	mov    edx,eax
c000fdc6:	c1 e8 02             	shr    eax,0x2
c000fdc9:	83 e2 03             	and    edx,0x3
c000fdcc:	89 d1                	mov    ecx,edx
c000fdce:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c000fdd4:	c1 e1 06             	shl    ecx,0x6
c000fdd7:	83 e2 3f             	and    edx,0x3f
c000fdda:	09 ca                	or     edx,ecx
c000fddc:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000fde2:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c000fde8:	83 e2 c0             	and    edx,0xffffffc0
c000fdeb:	09 d0                	or     eax,edx
c000fded:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c000fdf3:	83 ec 0c             	sub    esp,0xc
c000fdf6:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fdfc:	83 c8 07             	or     eax,0x7
c000fdff:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fe05:	8d 44 24 28          	lea    eax,[esp+0x28]
c000fe09:	50                   	push   eax
c000fe0a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000fe0e:	55                   	push   ebp
c000fe0f:	57                   	push   edi
c000fe10:	56                   	push   esi
c000fe11:	68 00 00 00 80       	push   0x80000000
c000fe16:	e8 59 f8 ff ff       	call   c000f674 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe1b:	83 c4 20             	add    esp,0x20
c000fe1e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000fe26:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000fe2a:	76 1e                	jbe    c000fe4a <CPU::detectFeatures()+0x60a>
c000fe2c:	83 ec 0c             	sub    esp,0xc
c000fe2f:	50                   	push   eax
c000fe30:	55                   	push   ebp
c000fe31:	57                   	push   edi
c000fe32:	56                   	push   esi
c000fe33:	68 01 00 00 80       	push   0x80000001
c000fe38:	e8 37 f8 ff ff       	call   c000f674 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fe3d:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000fe47:	83 c4 20             	add    esp,0x20
c000fe4a:	52                   	push   edx
c000fe4b:	52                   	push   edx
c000fe4c:	68 75 0a 02 c0       	push   0xc0020a75
c000fe51:	53                   	push   ebx
c000fe52:	e8 e9 c0 ff ff       	call   c000bf40 <Device::setName(char const*)>
c000fe57:	83 c4 10             	add    esp,0x10
c000fe5a:	eb 69                	jmp    c000fec5 <CPU::detectFeatures()+0x685>
c000fe5c:	50                   	push   eax
c000fe5d:	50                   	push   eax
c000fe5e:	68 da 09 02 c0       	push   0xc00209da
c000fe63:	55                   	push   ebp
c000fe64:	e8 d7 07 ff ff       	call   c0000640 <strcpy>
c000fe69:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fe73:	e8 4b 03 ff ff       	call   c00001c3 <is486>
c000fe78:	83 c4 10             	add    esp,0x10
c000fe7b:	85 c0                	test   eax,eax
c000fe7d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fe83:	74 1f                	je     c000fea4 <CPU::detectFeatures()+0x664>
c000fe85:	83 c8 07             	or     eax,0x7
c000fe88:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fe8e:	0f 20 c0             	mov    eax,cr0
c000fe91:	83 e0 14             	and    eax,0x14
c000fe94:	83 f8 04             	cmp    eax,0x4
c000fe97:	75 10                	jne    c000fea9 <CPU::detectFeatures()+0x669>
c000fe99:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fe9f:	83 e0 fd             	and    eax,0xfffffffd
c000fea2:	eb 1b                	jmp    c000febf <CPU::detectFeatures()+0x67f>
c000fea4:	83 e0 f8             	and    eax,0xfffffff8
c000fea7:	eb df                	jmp    c000fe88 <CPU::detectFeatures()+0x648>
c000fea9:	e8 f0 02 ff ff       	call   c000019e <hasLegacyFPU>
c000feae:	83 e0 01             	and    eax,0x1
c000feb1:	8d 14 00             	lea    edx,[eax+eax*1]
c000feb4:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000feba:	83 e0 fd             	and    eax,0xfffffffd
c000febd:	09 d0                	or     eax,edx
c000febf:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fec5:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fecc:	74 17                	je     c000fee5 <CPU::detectFeatures()+0x6a5>
c000fece:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c000fed4:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c000feda:	83 c8 10             	or     eax,0x10
c000fedd:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c000fee3:	eb 20                	jmp    c000ff05 <CPU::detectFeatures()+0x6c5>
c000fee5:	e8 b4 02 ff ff       	call   c000019e <hasLegacyFPU>
c000feea:	83 e0 01             	and    eax,0x1
c000feed:	8d 14 00             	lea    edx,[eax+eax*1]
c000fef0:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fef6:	83 e0 fd             	and    eax,0xfffffffd
c000fef9:	09 d0                	or     eax,edx
c000fefb:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000ff01:	a8 02                	test   al,0x2
c000ff03:	75 c9                	jne    c000fece <CPU::detectFeatures()+0x68e>
c000ff05:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000ff0c:	83 c4 2c             	add    esp,0x2c
c000ff0f:	5b                   	pop    ebx
c000ff10:	5e                   	pop    esi
c000ff11:	5f                   	pop    edi
c000ff12:	5d                   	pop    ebp
c000ff13:	c3                   	ret    

c000ff14 <CPU::setupSMEP()>:
c000ff14:	0f 20 e0             	mov    eax,cr4
c000ff17:	0d 00 00 10 00       	or     eax,0x100000
c000ff1c:	0f 22 e0             	mov    cr4,eax
c000ff1f:	c3                   	ret    

c000ff20 <CPU::setupUMIP()>:
c000ff20:	0f 20 e0             	mov    eax,cr4
c000ff23:	80 cc 08             	or     ah,0x8
c000ff26:	0f 22 e0             	mov    cr4,eax
c000ff29:	c3                   	ret    

c000ff2a <CPU::setupTSC()>:
c000ff2a:	0f 20 e0             	mov    eax,cr4
c000ff2d:	83 c8 04             	or     eax,0x4
c000ff30:	0f 22 e0             	mov    cr4,eax
c000ff33:	c3                   	ret    

c000ff34 <CPU::setupLargePages()>:
c000ff34:	0f 20 e0             	mov    eax,cr4
c000ff37:	83 c8 10             	or     eax,0x10
c000ff3a:	0f 22 e0             	mov    cr4,eax
c000ff3d:	c3                   	ret    

c000ff3e <CPU::setupPAT()>:
c000ff3e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c000ff43:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000ff4a:	74 2c                	je     c000ff78 <CPU::setupPAT()+0x3a>
c000ff4c:	53                   	push   ebx
c000ff4d:	83 ec 10             	sub    esp,0x10
c000ff50:	68 77 02 00 00       	push   0x277
c000ff55:	50                   	push   eax
c000ff56:	e8 5d 71 ff ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c000ff5b:	83 e2 f8             	and    edx,0xfffffff8
c000ff5e:	83 ca 01             	or     edx,0x1
c000ff61:	52                   	push   edx
c000ff62:	50                   	push   eax
c000ff63:	68 77 02 00 00       	push   0x277
c000ff68:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c000ff6e:	e8 71 71 ff ff       	call   c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>
c000ff73:	83 c4 28             	add    esp,0x28
c000ff76:	5b                   	pop    ebx
c000ff77:	c3                   	ret    
c000ff78:	c3                   	ret    
c000ff79:	90                   	nop

c000ff7a <CPU::setupMTRR()>:
c000ff7a:	c3                   	ret    
c000ff7b:	90                   	nop

c000ff7c <CPU::setupGlobalPages()>:
c000ff7c:	0f 20 e0             	mov    eax,cr4
c000ff7f:	0c 80                	or     al,0x80
c000ff81:	0f 22 e0             	mov    cr4,eax
c000ff84:	c3                   	ret    
c000ff85:	90                   	nop

c000ff86 <CPU::allowUsermodeDataAccess()>:
c000ff86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff8a:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ff91:	74 03                	je     c000ff96 <CPU::allowUsermodeDataAccess()+0x10>
c000ff93:	0f 01 cb             	stac   
c000ff96:	c3                   	ret    
c000ff97:	90                   	nop

c000ff98 <CPU::prohibitUsermodeDataAccess()>:
c000ff98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff9c:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000ffa3:	74 03                	je     c000ffa8 <CPU::prohibitUsermodeDataAccess()+0x10>
c000ffa5:	0f 01 ca             	clac   
c000ffa8:	c3                   	ret    
c000ffa9:	90                   	nop

c000ffaa <CPU::setupSMAP()>:
c000ffaa:	0f 20 e0             	mov    eax,cr4
c000ffad:	0d 00 00 20 00       	or     eax,0x200000
c000ffb2:	0f 22 e0             	mov    cr4,eax
c000ffb5:	eb e1                	jmp    c000ff98 <CPU::prohibitUsermodeDataAccess()>
c000ffb7:	90                   	nop

c000ffb8 <CPU::setupFeatures()>:
c000ffb8:	53                   	push   ebx
c000ffb9:	83 ec 08             	sub    esp,0x8
c000ffbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffc0:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000ffc7:	74 18                	je     c000ffe1 <CPU::setupFeatures()+0x29>
c000ffc9:	83 ec 0c             	sub    esp,0xc
c000ffcc:	68 81 0a 02 c0       	push   0xc0020a81
c000ffd1:	e8 ac a9 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c000ffd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffd9:	e8 42 ff ff ff       	call   c000ff20 <CPU::setupUMIP()>
c000ffde:	83 c4 10             	add    esp,0x10
c000ffe1:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000ffe8:	74 18                	je     c0010002 <CPU::setupFeatures()+0x4a>
c000ffea:	83 ec 0c             	sub    esp,0xc
c000ffed:	68 8b 0a 02 c0       	push   0xc0020a8b
c000fff2:	e8 8b a9 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c000fff7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fffa:	e8 2b ff ff ff       	call   c000ff2a <CPU::setupTSC()>
c000ffff:	83 c4 10             	add    esp,0x10
c0010002:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010009:	74 18                	je     c0010023 <CPU::setupFeatures()+0x6b>
c001000b:	83 ec 0c             	sub    esp,0xc
c001000e:	68 94 0a 02 c0       	push   0xc0020a94
c0010013:	e8 6a a9 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0010018:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001001b:	e8 14 ff ff ff       	call   c000ff34 <CPU::setupLargePages()>
c0010020:	83 c4 10             	add    esp,0x10
c0010023:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001002a:	74 18                	je     c0010044 <CPU::setupFeatures()+0x8c>
c001002c:	83 ec 0c             	sub    esp,0xc
c001002f:	68 9d 0a 02 c0       	push   0xc0020a9d
c0010034:	e8 49 a9 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0010039:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001003c:	e8 3b ff ff ff       	call   c000ff7c <CPU::setupGlobalPages()>
c0010041:	83 c4 10             	add    esp,0x10
c0010044:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001004b:	74 18                	je     c0010065 <CPU::setupFeatures()+0xad>
c001004d:	83 ec 0c             	sub    esp,0xc
c0010050:	68 af 0a 02 c0       	push   0xc0020aaf
c0010055:	e8 28 a9 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c001005a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001005d:	e8 dc fe ff ff       	call   c000ff3e <CPU::setupPAT()>
c0010062:	83 c4 10             	add    esp,0x10
c0010065:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001006c:	74 11                	je     c001007f <CPU::setupFeatures()+0xc7>
c001006e:	c7 44 24 10 b8 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020ab8
c0010076:	83 c4 08             	add    esp,0x8
c0010079:	5b                   	pop    ebx
c001007a:	e9 03 a9 ff ff       	jmp    c000a982 <Dbg::kprintf(char const*, ...)>
c001007f:	83 c4 08             	add    esp,0x8
c0010082:	5b                   	pop    ebx
c0010083:	c3                   	ret    

c0010084 <CPU::open(int, int, void*)>:
c0010084:	57                   	push   edi
c0010085:	56                   	push   esi
c0010086:	53                   	push   ebx
c0010087:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001008b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001008f:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010095:	83 ec 0c             	sub    esp,0xc
c0010098:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001009e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00100a4:	50                   	push   eax
c00100a5:	e8 fa 72 ff ff       	call   c00073a4 <GDT::setup()>
c00100aa:	83 c4 0c             	add    esp,0xc
c00100ad:	6a 00                	push   0x0
c00100af:	68 ef be ad de       	push   0xdeadbeef
c00100b4:	57                   	push   edi
c00100b5:	e8 ca 8e ff ff       	call   c0008f84 <TSS::setup(unsigned long, unsigned long)>
c00100ba:	89 3c 24             	mov    DWORD PTR [esp],edi
c00100bd:	e8 a2 8e ff ff       	call   c0008f64 <TSS::flush()>
c00100c2:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00100c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00100cb:	e8 36 75 ff ff       	call   c0007606 <IDT::setup()>
c00100d0:	b8 00 04 00 00       	mov    eax,0x400
c00100d5:	0f 23 f8             	mov    db7,eax
c00100d8:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00100e2:	e8 b8 7c ff ff       	call   c0007d9f <Phys::allocatePage()>
c00100e7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00100ed:	89 30                	mov    DWORD PTR [eax],esi
c00100ef:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00100f5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00100f8:	58                   	pop    eax
c00100f9:	5a                   	pop    edx
c00100fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010100:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010104:	e8 dd 9e ff ff       	call   c0009fe6 <VAS::setCPUSpecific(unsigned long)>
c0010109:	c7 04 24 c2 0a 02 c0 	mov    DWORD PTR [esp],0xc0020ac2
c0010110:	e8 cd 00 00 00       	call   c00101e2 <KeSetBootMessage(char const*)>
c0010115:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010118:	e8 23 f7 ff ff       	call   c000f840 <CPU::detectFeatures()>
c001011d:	c7 04 24 e5 0a 02 c0 	mov    DWORD PTR [esp],0xc0020ae5
c0010124:	e8 b9 00 00 00       	call   c00101e2 <KeSetBootMessage(char const*)>
c0010129:	e8 34 6f 00 00       	call   c0017062 <HalInitialise()>
c001012e:	a1 d0 4e 02 c0       	mov    eax,ds:0xc0024ed0
c0010133:	83 e0 10             	and    eax,0x10
c0010136:	83 f8 01             	cmp    eax,0x1
c0010139:	19 c0                	sbb    eax,eax
c001013b:	83 e0 46             	and    eax,0x46
c001013e:	83 c0 1e             	add    eax,0x1e
c0010141:	89 04 24             	mov    DWORD PTR [esp],eax
c0010144:	e8 94 d6 ff ff       	call   c000d7dd <setupTimer(int)>
c0010149:	83 c4 10             	add    esp,0x10
c001014c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010152:	f6 05 d0 4e 02 c0 20 	test   BYTE PTR ds:0xc0024ed0,0x20
c0010159:	74 0c                	je     c0010167 <CPU::open(int, int, void*)+0xe3>
c001015b:	83 ec 0c             	sub    esp,0xc
c001015e:	53                   	push   ebx
c001015f:	e8 54 fe ff ff       	call   c000ffb8 <CPU::setupFeatures()>
c0010164:	83 c4 10             	add    esp,0x10
c0010167:	5b                   	pop    ebx
c0010168:	31 c0                	xor    eax,eax
c001016a:	5e                   	pop    esi
c001016b:	5f                   	pop    edi
c001016c:	c3                   	ret    

c001016d <KeDisplaySplashScreen()>:
c001016d:	55                   	push   ebp
c001016e:	bd 05 00 00 00       	mov    ebp,0x5
c0010173:	57                   	push   edi
c0010174:	bf 80 1e 02 c0       	mov    edi,0xc0021e80
c0010179:	56                   	push   esi
c001017a:	be 0a 00 00 00       	mov    esi,0xa
c001017f:	53                   	push   ebx
c0010180:	31 db                	xor    ebx,ebx
c0010182:	83 ec 0c             	sub    esp,0xc
c0010185:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0010188:	89 d0                	mov    eax,edx
c001018a:	85 d2                	test   edx,edx
c001018c:	74 4c                	je     c00101da <KeDisplaySplashScreen()+0x6d>
c001018e:	80 bb b6 1e 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffde14a],0xdb
c0010195:	75 13                	jne    c00101aa <KeDisplaySplashScreen()+0x3d>
c0010197:	0f b6 8b b5 1e 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffde14b]
c001019e:	83 e1 fe             	and    ecx,0xfffffffe
c00101a1:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c00101a7:	75 01                	jne    c00101aa <KeDisplaySplashScreen()+0x3d>
c00101a9:	46                   	inc    esi
c00101aa:	83 fa 0d             	cmp    edx,0xd
c00101ad:	74 28                	je     c00101d7 <KeDisplaySplashScreen()+0x6a>
c00101af:	83 fa 0a             	cmp    edx,0xa
c00101b2:	75 0a                	jne    c00101be <KeDisplaySplashScreen()+0x51>
c00101b4:	45                   	inc    ebp
c00101b5:	be 0a 00 00 00       	mov    esi,0xa
c00101ba:	31 db                	xor    ebx,ebx
c00101bc:	eb 19                	jmp    c00101d7 <KeDisplaySplashScreen()+0x6a>
c00101be:	83 ec 0c             	sub    esp,0xc
c00101c1:	8d 14 33             	lea    edx,[ebx+esi*1]
c00101c4:	55                   	push   ebp
c00101c5:	0f be c0             	movsx  eax,al
c00101c8:	52                   	push   edx
c00101c9:	43                   	inc    ebx
c00101ca:	6a 00                	push   0x0
c00101cc:	6a 0e                	push   0xe
c00101ce:	50                   	push   eax
c00101cf:	e8 10 7b 00 00       	call   c0017ce4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00101d4:	83 c4 20             	add    esp,0x20
c00101d7:	47                   	inc    edi
c00101d8:	eb ab                	jmp    c0010185 <KeDisplaySplashScreen()+0x18>
c00101da:	83 c4 0c             	add    esp,0xc
c00101dd:	5b                   	pop    ebx
c00101de:	5e                   	pop    esi
c00101df:	5f                   	pop    edi
c00101e0:	5d                   	pop    ebp
c00101e1:	c3                   	ret    

c00101e2 <KeSetBootMessage(char const*)>:
c00101e2:	57                   	push   edi
c00101e3:	56                   	push   esi
c00101e4:	53                   	push   ebx
c00101e5:	81 ec a4 00 00 00    	sub    esp,0xa4
c00101eb:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c00101f2:	68 9e 00 00 00       	push   0x9e
c00101f7:	6a 00                	push   0x0
c00101f9:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00101fd:	56                   	push   esi
c00101fe:	e8 ed 02 ff ff       	call   c00004f0 <memset>
c0010203:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010206:	e8 65 03 ff ff       	call   c0000570 <strlen>
c001020b:	ba 50 00 00 00       	mov    edx,0x50
c0010210:	83 c4 10             	add    esp,0x10
c0010213:	29 c2                	sub    edx,eax
c0010215:	31 c9                	xor    ecx,ecx
c0010217:	83 e2 fe             	and    edx,0xfffffffe
c001021a:	01 f2                	add    edx,esi
c001021c:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010221:	84 c0                	test   al,al
c0010223:	74 0a                	je     c001022f <KeSetBootMessage(char const*)+0x4d>
c0010225:	80 cc 0f             	or     ah,0xf
c0010228:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001022c:	41                   	inc    ecx
c001022d:	eb ed                	jmp    c001021c <KeSetBootMessage(char const*)+0x3a>
c001022f:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010234:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010239:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001023b:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010241:	5b                   	pop    ebx
c0010242:	5e                   	pop    esi
c0010243:	5f                   	pop    edi
c0010244:	c3                   	ret    
c0010245:	90                   	nop

c0010246 <EnvVarContainer::getEnv(char const*)>:
c0010246:	57                   	push   edi
c0010247:	56                   	push   esi
c0010248:	53                   	push   ebx
c0010249:	31 db                	xor    ebx,ebx
c001024b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001024f:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010251:	7e 2b                	jle    c001027e <EnvVarContainer::getEnv(char const*)+0x38>
c0010253:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001025a:	50                   	push   eax
c001025b:	50                   	push   eax
c001025c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001025f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010262:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010266:	e8 e5 04 ff ff       	call   c0000750 <strcmp>
c001026b:	83 c4 10             	add    esp,0x10
c001026e:	85 c0                	test   eax,eax
c0010270:	75 09                	jne    c001027b <EnvVarContainer::getEnv(char const*)+0x35>
c0010272:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010275:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010279:	eb 05                	jmp    c0010280 <EnvVarContainer::getEnv(char const*)+0x3a>
c001027b:	43                   	inc    ebx
c001027c:	eb d1                	jmp    c001024f <EnvVarContainer::getEnv(char const*)+0x9>
c001027e:	31 c0                	xor    eax,eax
c0010280:	5b                   	pop    ebx
c0010281:	5e                   	pop    esi
c0010282:	5f                   	pop    edi
c0010283:	c3                   	ret    

c0010284 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010284:	55                   	push   ebp
c0010285:	57                   	push   edi
c0010286:	56                   	push   esi
c0010287:	53                   	push   ebx
c0010288:	83 ec 28             	sub    esp,0x28
c001028b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001028f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010293:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010297:	56                   	push   esi
c0010298:	e8 d3 02 ff ff       	call   c0000570 <strlen>
c001029d:	40                   	inc    eax
c001029e:	89 04 24             	mov    DWORD PTR [esp],eax
c00102a1:	e8 f4 77 ff ff       	call   c0007a9a <malloc>
c00102a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102ad:	e8 be 02 ff ff       	call   c0000570 <strlen>
c00102b2:	40                   	inc    eax
c00102b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00102b6:	e8 df 77 ff ff       	call   c0007a9a <malloc>
c00102bb:	89 34 24             	mov    DWORD PTR [esp],esi
c00102be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00102c2:	e8 a9 02 ff ff       	call   c0000570 <strlen>
c00102c7:	83 c4 0c             	add    esp,0xc
c00102ca:	40                   	inc    eax
c00102cb:	50                   	push   eax
c00102cc:	6a 00                	push   0x0
c00102ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00102d2:	e8 19 02 ff ff       	call   c00004f0 <memset>
c00102d7:	89 34 24             	mov    DWORD PTR [esp],esi
c00102da:	e8 91 02 ff ff       	call   c0000570 <strlen>
c00102df:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00102e3:	8d 48 01             	lea    ecx,[eax+0x1]
c00102e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00102eb:	89 de                	mov    esi,ebx
c00102ed:	e8 7e 02 ff ff       	call   c0000570 <strlen>
c00102f2:	83 c4 0c             	add    esp,0xc
c00102f5:	40                   	inc    eax
c00102f6:	50                   	push   eax
c00102f7:	6a 00                	push   0x0
c00102f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102fd:	e8 ee 01 ff ff       	call   c00004f0 <memset>
c0010302:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010305:	e8 66 02 ff ff       	call   c0000570 <strlen>
c001030a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001030e:	8d 48 01             	lea    ecx,[eax+0x1]
c0010311:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010313:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010316:	40                   	inc    eax
c0010317:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001031a:	c1 e0 03             	shl    eax,0x3
c001031d:	5a                   	pop    edx
c001031e:	59                   	pop    ecx
c001031f:	50                   	push   eax
c0010320:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010323:	e8 5e 77 ff ff       	call   c0007a86 <realloc>
c0010328:	8d 74 24 18          	lea    esi,[esp+0x18]
c001032c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001032f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010332:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010336:	b9 08 00 00 00       	mov    ecx,0x8
c001033b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001033d:	83 c4 2c             	add    esp,0x2c
c0010340:	5b                   	pop    ebx
c0010341:	5e                   	pop    esi
c0010342:	5f                   	pop    edi
c0010343:	5d                   	pop    ebp
c0010344:	c3                   	ret    
c0010345:	90                   	nop

c0010346 <EnvVarContainer::deleteEnv(char const*)>:
c0010346:	c3                   	ret    
c0010347:	90                   	nop

c0010348 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010348:	55                   	push   ebp
c0010349:	57                   	push   edi
c001034a:	56                   	push   esi
c001034b:	53                   	push   ebx
c001034c:	81 ec 38 01 00 00    	sub    esp,0x138
c0010352:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010359:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010360:	68 14 01 00 00       	push   0x114
c0010365:	e8 30 77 ff ff       	call   c0007a9a <malloc>
c001036a:	83 c4 0c             	add    esp,0xc
c001036d:	89 c3                	mov    ebx,eax
c001036f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010372:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010379:	50                   	push   eax
c001037a:	e8 85 ab ff ff       	call   c000af04 <File::File(char const*, Process*)>
c001037f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010382:	e8 a7 ae ff ff       	call   c000b22e <File::exists()>
c0010387:	83 c4 10             	add    esp,0x10
c001038a:	84 c0                	test   al,al
c001038c:	75 31                	jne    c00103bf <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001038e:	50                   	push   eax
c001038f:	50                   	push   eax
c0010390:	6a 12                	push   0x12
c0010392:	53                   	push   ebx
c0010393:	e8 28 ac ff ff       	call   c000afc0 <File::open(FileOpenMode)>
c0010398:	8b 03                	mov    eax,DWORD PTR [ebx]
c001039a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001039d:	89 34 24             	mov    DWORD PTR [esp],esi
c00103a0:	e8 cb 01 ff ff       	call   c0000570 <strlen>
c00103a5:	5a                   	pop    edx
c00103a6:	31 d2                	xor    edx,edx
c00103a8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00103ac:	51                   	push   ecx
c00103ad:	56                   	push   esi
c00103ae:	52                   	push   edx
c00103af:	50                   	push   eax
c00103b0:	53                   	push   ebx
c00103b1:	ff d7                	call   edi
c00103b3:	83 c4 14             	add    esp,0x14
c00103b6:	53                   	push   ebx
c00103b7:	e8 62 ac ff ff       	call   c000b01e <File::close()>
c00103bc:	83 c4 10             	add    esp,0x10
c00103bf:	56                   	push   esi
c00103c0:	31 f6                	xor    esi,esi
c00103c2:	68 00 01 00 00       	push   0x100
c00103c7:	6a 00                	push   0x0
c00103c9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00103cd:	50                   	push   eax
c00103ce:	e8 1d 01 ff ff       	call   c00004f0 <memset>
c00103d3:	5f                   	pop    edi
c00103d4:	58                   	pop    eax
c00103d5:	6a 01                	push   0x1
c00103d7:	53                   	push   ebx
c00103d8:	e8 e3 ab ff ff       	call   c000afc0 <File::open(FileOpenMode)>
c00103dd:	83 c4 10             	add    esp,0x10
c00103e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00103e8:	83 ec 0c             	sub    esp,0xc
c00103eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00103ed:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00103f1:	51                   	push   ecx
c00103f2:	8d 54 24 23          	lea    edx,[esp+0x23]
c00103f6:	52                   	push   edx
c00103f7:	6a 00                	push   0x0
c00103f9:	6a 01                	push   0x1
c00103fb:	53                   	push   ebx
c00103fc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00103ff:	0f be 54 24 33       	movsx  edx,BYTE PTR [esp+0x33]
c0010404:	83 c4 20             	add    esp,0x20
c0010407:	89 d0                	mov    eax,edx
c0010409:	83 fa 0d             	cmp    edx,0xd
c001040c:	0f 84 0a 01 00 00    	je     c001051c <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c0010412:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010417:	0f 84 f0 00 00 00    	je     c001050d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001041d:	83 fa 0a             	cmp    edx,0xa
c0010420:	74 13                	je     c0010435 <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c0010422:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010427:	74 0c                	je     c0010435 <EnvVarContainer::loadFrom(char const*, char const*)+0xed>
c0010429:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001042f:	0f 8e d8 00 00 00    	jle    c001050d <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0010435:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010439:	83 ec 0c             	sub    esp,0xc
c001043c:	8d 78 01             	lea    edi,[eax+0x1]
c001043f:	57                   	push   edi
c0010440:	e8 55 76 ff ff       	call   c0007a9a <malloc>
c0010445:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010449:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001044d:	8d 56 04             	lea    edx,[esi+0x4]
c0010450:	89 14 24             	mov    DWORD PTR [esp],edx
c0010453:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010457:	e8 3e 76 ff ff       	call   c0007a9a <malloc>
c001045c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010460:	83 c4 0c             	add    esp,0xc
c0010463:	57                   	push   edi
c0010464:	6a 00                	push   0x0
c0010466:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001046a:	e8 81 00 ff ff       	call   c00004f0 <memset>
c001046f:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010473:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010477:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001047b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001047d:	83 c4 0c             	add    esp,0xc
c0010480:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010484:	52                   	push   edx
c0010485:	6a 00                	push   0x0
c0010487:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001048b:	e8 60 00 ff ff       	call   c00004f0 <memset>
c0010490:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010494:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010498:	89 34 24             	mov    DWORD PTR [esp],esi
c001049b:	e8 d0 00 ff ff       	call   c0000570 <strlen>
c00104a0:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c00104a4:	89 c1                	mov    ecx,eax
c00104a6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00104ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00104ae:	40                   	inc    eax
c00104af:	83 c4 10             	add    esp,0x10
c00104b2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00104b5:	85 d2                	test   edx,edx
c00104b7:	75 0c                	jne    c00104c5 <EnvVarContainer::loadFrom(char const*, char const*)+0x17d>
c00104b9:	83 ec 0c             	sub    esp,0xc
c00104bc:	6a 08                	push   0x8
c00104be:	e8 d7 75 ff ff       	call   c0007a9a <malloc>
c00104c3:	eb 0c                	jmp    c00104d1 <EnvVarContainer::loadFrom(char const*, char const*)+0x189>
c00104c5:	c1 e0 03             	shl    eax,0x3
c00104c8:	51                   	push   ecx
c00104c9:	51                   	push   ecx
c00104ca:	50                   	push   eax
c00104cb:	52                   	push   edx
c00104cc:	e8 b5 75 ff ff       	call   c0007a86 <realloc>
c00104d1:	83 c4 10             	add    esp,0x10
c00104d4:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00104d7:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00104da:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00104dd:	8d 74 24 18          	lea    esi,[esp+0x18]
c00104e1:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00104e5:	b9 08 00 00 00       	mov    ecx,0x8
c00104ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104ec:	31 f6                	xor    esi,esi
c00104ee:	50                   	push   eax
c00104ef:	68 00 01 00 00       	push   0x100
c00104f4:	6a 00                	push   0x0
c00104f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00104fa:	50                   	push   eax
c00104fb:	e8 f0 ff fe ff       	call   c00004f0 <memset>
c0010500:	83 c4 10             	add    esp,0x10
c0010503:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001050b:	eb 0f                	jmp    c001051c <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c001050d:	3c 3d                	cmp    al,0x3d
c001050f:	74 07                	je     c0010518 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c0010511:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0010515:	46                   	inc    esi
c0010516:	eb 04                	jmp    c001051c <EnvVarContainer::loadFrom(char const*, char const*)+0x1d4>
c0010518:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001051c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010521:	0f 85 c1 fe ff ff    	jne    c00103e8 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010527:	81 c4 2c 01 00 00    	add    esp,0x12c
c001052d:	5b                   	pop    ebx
c001052e:	5e                   	pop    esi
c001052f:	5f                   	pop    edi
c0010530:	5d                   	pop    ebp
c0010531:	c3                   	ret    

c0010532 <EnvVarContainer::__loadSystem()>:
c0010532:	83 ec 10             	sub    esp,0x10
c0010535:	68 e0 1f 02 c0       	push   0xc0021fe0
c001053a:	68 28 0b 02 c0       	push   0xc0020b28
c001053f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010543:	e8 00 fe ff ff       	call   c0010348 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010548:	83 c4 1c             	add    esp,0x1c
c001054b:	c3                   	ret    

c001054c <EnvVarContainer::__loadUser()>:
c001054c:	c3                   	ret    
c001054d:	90                   	nop

c001054e <EnvVarContainer::EnvVarContainer(Process*)>:
c001054e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010552:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001055c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010560:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010563:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010567:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001056e:	90                   	nop
c001056f:	c3                   	ret    

c0010570 <EnvVarContainer::~EnvVarContainer()>:
c0010570:	83 ec 0c             	sub    esp,0xc
c0010573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010577:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001057a:	85 c0                	test   eax,eax
c001057c:	74 1d                	je     c001059b <EnvVarContainer::~EnvVarContainer()+0x2b>
c001057e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010582:	8b 00                	mov    eax,DWORD PTR [eax]
c0010584:	85 c0                	test   eax,eax
c0010586:	74 13                	je     c001059b <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001058c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001058f:	83 ec 0c             	sub    esp,0xc
c0010592:	50                   	push   eax
c0010593:	e8 12 75 ff ff       	call   c0007aaa <free>
c0010598:	83 c4 10             	add    esp,0x10
c001059b:	90                   	nop
c001059c:	83 c4 0c             	add    esp,0xc
c001059f:	c3                   	ret    

c00105a0 <Krnl::getEnv(Process*, char const*)>:
c00105a0:	53                   	push   ebx
c00105a1:	83 ec 08             	sub    esp,0x8
c00105a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105a8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00105ac:	39 05 90 81 02 c0    	cmp    DWORD PTR ds:0xc0028190,eax
c00105b2:	74 04                	je     c00105b8 <Krnl::getEnv(Process*, char const*)+0x18>
c00105b4:	85 c0                	test   eax,eax
c00105b6:	75 0b                	jne    c00105c3 <Krnl::getEnv(Process*, char const*)+0x23>
c00105b8:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c00105bd:	85 c0                	test   eax,eax
c00105bf:	75 19                	jne    c00105da <Krnl::getEnv(Process*, char const*)+0x3a>
c00105c1:	eb 27                	jmp    c00105ea <Krnl::getEnv(Process*, char const*)+0x4a>
c00105c3:	52                   	push   edx
c00105c4:	52                   	push   edx
c00105c5:	53                   	push   ebx
c00105c6:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00105cc:	e8 75 fc ff ff       	call   c0010246 <EnvVarContainer::getEnv(char const*)>
c00105d1:	83 c4 10             	add    esp,0x10
c00105d4:	85 c0                	test   eax,eax
c00105d6:	75 28                	jne    c0010600 <Krnl::getEnv(Process*, char const*)+0x60>
c00105d8:	eb de                	jmp    c00105b8 <Krnl::getEnv(Process*, char const*)+0x18>
c00105da:	52                   	push   edx
c00105db:	52                   	push   edx
c00105dc:	53                   	push   ebx
c00105dd:	50                   	push   eax
c00105de:	e8 63 fc ff ff       	call   c0010246 <EnvVarContainer::getEnv(char const*)>
c00105e3:	83 c4 10             	add    esp,0x10
c00105e6:	85 c0                	test   eax,eax
c00105e8:	75 16                	jne    c0010600 <Krnl::getEnv(Process*, char const*)+0x60>
c00105ea:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00105ee:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c00105f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00105f7:	83 c4 08             	add    esp,0x8
c00105fa:	5b                   	pop    ebx
c00105fb:	e9 46 fc ff ff       	jmp    c0010246 <EnvVarContainer::getEnv(char const*)>
c0010600:	83 c4 08             	add    esp,0x8
c0010603:	5b                   	pop    ebx
c0010604:	c3                   	ret    

c0010605 <Krnl::setEnvSystem(char const*, char const*)>:
c0010605:	83 ec 10             	sub    esp,0x10
c0010608:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001060c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010610:	ff 35 34 79 02 c0    	push   DWORD PTR ds:0xc0027934
c0010616:	e8 69 fc ff ff       	call   c0010284 <EnvVarContainer::setEnv(char const*, char const*)>
c001061b:	83 c4 1c             	add    esp,0x1c
c001061e:	c3                   	ret    

c001061f <Krnl::setEnvUser(char const*, char const*)>:
c001061f:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c0010624:	85 c0                	test   eax,eax
c0010626:	74 15                	je     c001063d <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010628:	83 ec 10             	sub    esp,0x10
c001062b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001062f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010633:	50                   	push   eax
c0010634:	e8 4b fc ff ff       	call   c0010284 <EnvVarContainer::setEnv(char const*, char const*)>
c0010639:	83 c4 1c             	add    esp,0x1c
c001063c:	c3                   	ret    
c001063d:	c3                   	ret    

c001063e <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001063e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010642:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010648:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001064c:	e9 33 fc ff ff       	jmp    c0010284 <EnvVarContainer::setEnv(char const*, char const*)>

c0010651 <Krnl::deleteEnvSystem(char const*)>:
c0010651:	c3                   	ret    

c0010652 <Krnl::deleteEnvUser(char const*)>:
c0010652:	c3                   	ret    

c0010653 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0010653:	c3                   	ret    

c0010654 <Krnl::newProcessEnv(Process*)>:
c0010654:	83 ec 28             	sub    esp,0x28
c0010657:	6a 0c                	push   0xc
c0010659:	e8 3c 74 ff ff       	call   c0007a9a <malloc>
c001065e:	5a                   	pop    edx
c001065f:	59                   	pop    ecx
c0010660:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010664:	50                   	push   eax
c0010665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010669:	e8 e0 fe ff ff       	call   c001054e <EnvVarContainer::EnvVarContainer(Process*)>
c001066e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010672:	83 c4 2c             	add    esp,0x2c
c0010675:	c3                   	ret    

c0010676 <Krnl::copyProcessEnv(Process*, Process*)>:
c0010676:	57                   	push   edi
c0010677:	56                   	push   esi
c0010678:	53                   	push   ebx
c0010679:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001067d:	83 ec 0c             	sub    esp,0xc
c0010680:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010686:	6a 0c                	push   0xc
c0010688:	e8 0d 74 ff ff       	call   c0007a9a <malloc>
c001068d:	89 c3                	mov    ebx,eax
c001068f:	58                   	pop    eax
c0010690:	5a                   	pop    edx
c0010691:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010695:	53                   	push   ebx
c0010696:	e8 b3 fe ff ff       	call   c001054e <EnvVarContainer::EnvVarContainer(Process*)>
c001069b:	8b 07                	mov    eax,DWORD PTR [edi]
c001069d:	89 03                	mov    DWORD PTR [ebx],eax
c001069f:	c1 e0 03             	shl    eax,0x3
c00106a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00106a5:	e8 f0 73 ff ff       	call   c0007a9a <malloc>
c00106aa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00106ad:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00106af:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00106b2:	c1 e1 03             	shl    ecx,0x3
c00106b5:	89 c7                	mov    edi,eax
c00106b7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106b9:	83 c4 10             	add    esp,0x10
c00106bc:	89 d8                	mov    eax,ebx
c00106be:	5b                   	pop    ebx
c00106bf:	5e                   	pop    esi
c00106c0:	5f                   	pop    edi
c00106c1:	c3                   	ret    

c00106c2 <Krnl::loadSystemEnv()>:
c00106c2:	53                   	push   ebx
c00106c3:	83 ec 14             	sub    esp,0x14
c00106c6:	6a 0c                	push   0xc
c00106c8:	e8 cd 73 ff ff       	call   c0007a9a <malloc>
c00106cd:	89 c3                	mov    ebx,eax
c00106cf:	58                   	pop    eax
c00106d0:	5a                   	pop    edx
c00106d1:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00106d7:	53                   	push   ebx
c00106d8:	e8 71 fe ff ff       	call   c001054e <EnvVarContainer::EnvVarContainer(Process*)>
c00106dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00106e0:	89 1d 34 79 02 c0    	mov    DWORD PTR ds:0xc0027934,ebx
c00106e6:	e8 47 fe ff ff       	call   c0010532 <EnvVarContainer::__loadSystem()>
c00106eb:	83 c4 18             	add    esp,0x18
c00106ee:	5b                   	pop    ebx
c00106ef:	c3                   	ret    

c00106f0 <Krnl::loadUserEnv()>:
c00106f0:	53                   	push   ebx
c00106f1:	83 ec 14             	sub    esp,0x14
c00106f4:	6a 0c                	push   0xc
c00106f6:	e8 9f 73 ff ff       	call   c0007a9a <malloc>
c00106fb:	89 c3                	mov    ebx,eax
c00106fd:	58                   	pop    eax
c00106fe:	5a                   	pop    edx
c00106ff:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0010705:	53                   	push   ebx
c0010706:	e8 43 fe ff ff       	call   c001054e <EnvVarContainer::EnvVarContainer(Process*)>
c001070b:	89 1d 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,ebx
c0010711:	83 c4 18             	add    esp,0x18
c0010714:	5b                   	pop    ebx
c0010715:	c3                   	ret    

c0010716 <Krnl::flushEnv()>:
c0010716:	c3                   	ret    

c0010717 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010717:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001071b:	8b 15 30 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027930
c0010721:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010727:	a1 34 79 02 c0       	mov    eax,ds:0xc0027934
c001072c:	8b 00                	mov    eax,DWORD PTR [eax]
c001072e:	03 01                	add    eax,DWORD PTR [ecx]
c0010730:	85 d2                	test   edx,edx
c0010732:	74 02                	je     c0010736 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010734:	03 02                	add    eax,DWORD PTR [edx]
c0010736:	c3                   	ret    

c0010737 <Krnl::getProcessEnvPair(Process*, int)>:
c0010737:	57                   	push   edi
c0010738:	56                   	push   esi
c0010739:	8b 35 30 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027930
c001073f:	53                   	push   ebx
c0010740:	85 f6                	test   esi,esi
c0010742:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010746:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001074a:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010750:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010754:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010756:	75 16                	jne    c001076e <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010758:	39 c2                	cmp    edx,eax
c001075a:	7c 16                	jl     c0010772 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001075c:	8b 0d 34 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027934
c0010762:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010764:	01 c6                	add    esi,eax
c0010766:	39 d6                	cmp    esi,edx
c0010768:	7e 3c                	jle    c00107a6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001076a:	29 c2                	sub    edx,eax
c001076c:	eb 04                	jmp    c0010772 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001076e:	39 c2                	cmp    edx,eax
c0010770:	7d 05                	jge    c0010777 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0010772:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010775:	eb 20                	jmp    c0010797 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010777:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010779:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001077c:	39 d1                	cmp    ecx,edx
c001077e:	7e 04                	jle    c0010784 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010780:	29 c2                	sub    edx,eax
c0010782:	eb 10                	jmp    c0010794 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010784:	8b 35 34 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027934
c001078a:	03 0e                	add    ecx,DWORD PTR [esi]
c001078c:	39 d1                	cmp    ecx,edx
c001078e:	7e 16                	jle    c00107a6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010790:	29 c2                	sub    edx,eax
c0010792:	29 fa                	sub    edx,edi
c0010794:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010797:	8d 14 d0             	lea    edx,[eax+edx*8]
c001079a:	8b 02                	mov    eax,DWORD PTR [edx]
c001079c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001079f:	89 03                	mov    DWORD PTR [ebx],eax
c00107a1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00107a4:	eb 1d                	jmp    c00107c3 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00107a6:	83 ec 0c             	sub    esp,0xc
c00107a9:	68 4a 0b 02 c0       	push   0xc0020b4a
c00107ae:	e8 ac 00 00 00       	call   c001085f <KePanic(char const*)>
c00107b3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00107b9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00107c0:	83 c4 10             	add    esp,0x10
c00107c3:	89 d8                	mov    eax,ebx
c00107c5:	5b                   	pop    ebx
c00107c6:	5e                   	pop    esi
c00107c7:	5f                   	pop    edi
c00107c8:	c2 04 00             	ret    0x4

c00107cb <CPU::current()>:
c00107cb:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00107d0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00107d6:	c3                   	ret    

c00107d7 <operator new(unsigned long)>:
c00107d7:	e9 be 72 ff ff       	jmp    c0007a9a <malloc>

c00107dc <operator delete(void*)>:
c00107dc:	e9 d9 72 ff ff       	jmp    c0007aba <rfree>

c00107e1 <disableIRQs()>:
c00107e1:	fa                   	cli    
c00107e2:	c3                   	ret    

c00107e3 <enableIRQs()>:
c00107e3:	fb                   	sti    
c00107e4:	c3                   	ret    

c00107e5 <lockScheduler()>:
c00107e5:	fa                   	cli    
c00107e6:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c00107ec:	c3                   	ret    

c00107ed <unlockScheduler()>:
c00107ed:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00107f2:	48                   	dec    eax
c00107f3:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00107f8:	75 01                	jne    c00107fb <unlockScheduler()+0xe>
c00107fa:	fb                   	sti    
c00107fb:	c3                   	ret    

c00107fc <lockStuff()>:
c00107fc:	fa                   	cli    
c00107fd:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0010803:	ff 05 64 81 02 c0    	inc    DWORD PTR ds:0xc0028164
c0010809:	c3                   	ret    

c001080a <unlockStuff()>:
c001080a:	83 ec 0c             	sub    esp,0xc
c001080d:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0010812:	48                   	dec    eax
c0010813:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0010818:	75 18                	jne    c0010832 <unlockStuff()+0x28>
c001081a:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0010821:	74 0f                	je     c0010832 <unlockStuff()+0x28>
c0010823:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001082d:	e8 de 47 00 00       	call   c0015010 <schedule()>
c0010832:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010837:	48                   	dec    eax
c0010838:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001083d:	75 01                	jne    c0010840 <unlockStuff()+0x36>
c001083f:	fb                   	sti    
c0010840:	83 c4 0c             	add    esp,0xc
c0010843:	c3                   	ret    

c0010844 <Virt::getAKernelVAS()>:
c0010844:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c0010849:	c3                   	ret    

c001084a <__not_memcpy>:
c001084a:	57                   	push   edi
c001084b:	56                   	push   esi
c001084c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010850:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010854:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010858:	89 c7                	mov    edi,eax
c001085a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001085c:	5e                   	pop    esi
c001085d:	5f                   	pop    edi
c001085e:	c3                   	ret    

c001085f <KePanic(char const*)>:
c001085f:	c6 05 38 79 02 c0 01 	mov    BYTE PTR ds:0xc0027938,0x1
c0010866:	e9 e3 66 00 00       	jmp    c0016f4e <HalPanic(char const*)>

c001086b <Krnl::powerThread(void*)>:
c001086b:	83 ec 0c             	sub    esp,0xc
c001086e:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0010873:	48                   	dec    eax
c0010874:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0010879:	75 01                	jne    c001087c <Krnl::powerThread(void*)+0x11>
c001087b:	fb                   	sti    
c001087c:	83 ec 0c             	sub    esp,0xc
c001087f:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c0010886:	6a 0a                	push   0xa
c0010888:	e8 c7 4a 00 00       	call   c0015354 <sleep(unsigned int)>
c001088d:	83 05 84 79 02 c0 0a 	add    DWORD PTR ds:0xc0027984,0xa
c0010894:	83 c4 10             	add    esp,0x10
c0010897:	eb e3                	jmp    c001087c <Krnl::powerThread(void*)+0x11>

c0010899 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010899:	57                   	push   edi
c001089a:	b9 09 00 00 00       	mov    ecx,0x9
c001089f:	56                   	push   esi
c00108a0:	bf 60 79 02 c0       	mov    edi,0xc0027960
c00108a5:	fc                   	cld    
c00108a6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00108aa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00108ac:	5e                   	pop    esi
c00108ad:	5f                   	pop    edi
c00108ae:	c3                   	ret    

c00108af <Krnl::userIOReceived()>:
c00108af:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c00108b9:	c3                   	ret    

c00108ba <Krnl::handlePowerButton()>:
c00108ba:	83 ec 0c             	sub    esp,0xc
c00108bd:	a1 60 79 02 c0       	mov    eax,ds:0xc0027960
c00108c2:	83 f8 02             	cmp    eax,0x2
c00108c5:	75 10                	jne    c00108d7 <Krnl::handlePowerButton()+0x1d>
c00108c7:	83 ec 0c             	sub    esp,0xc
c00108ca:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108d0:	e8 4b 68 ff ff       	call   c0007120 <Computer::shutdown()>
c00108d5:	eb 11                	jmp    c00108e8 <Krnl::handlePowerButton()+0x2e>
c00108d7:	48                   	dec    eax
c00108d8:	75 11                	jne    c00108eb <Krnl::handlePowerButton()+0x31>
c00108da:	83 ec 0c             	sub    esp,0xc
c00108dd:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00108e3:	e8 68 68 ff ff       	call   c0007150 <Computer::sleep()>
c00108e8:	83 c4 10             	add    esp,0x10
c00108eb:	83 c4 0c             	add    esp,0xc
c00108ee:	c3                   	ret    

c00108ef <Krnl::handleSleepButton()>:
c00108ef:	83 ec 0c             	sub    esp,0xc
c00108f2:	a1 64 79 02 c0       	mov    eax,ds:0xc0027964
c00108f7:	83 f8 02             	cmp    eax,0x2
c00108fa:	75 10                	jne    c001090c <Krnl::handleSleepButton()+0x1d>
c00108fc:	83 ec 0c             	sub    esp,0xc
c00108ff:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010905:	e8 16 68 ff ff       	call   c0007120 <Computer::shutdown()>
c001090a:	eb 11                	jmp    c001091d <Krnl::handleSleepButton()+0x2e>
c001090c:	48                   	dec    eax
c001090d:	75 11                	jne    c0010920 <Krnl::handleSleepButton()+0x31>
c001090f:	83 ec 0c             	sub    esp,0xc
c0010912:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0010918:	e8 33 68 ff ff       	call   c0007150 <Computer::sleep()>
c001091d:	83 c4 10             	add    esp,0x10
c0010920:	83 c4 0c             	add    esp,0xc
c0010923:	c3                   	ret    

c0010924 <Krnl::setupPowerManager()>:
c0010924:	83 ec 0c             	sub    esp,0xc
c0010927:	c7 05 84 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027984,0x0
c0010931:	68 f0 00 00 00       	push   0xf0
c0010936:	c6 05 40 79 02 c0 00 	mov    BYTE PTR ds:0xc0027940,0x0
c001093d:	6a 00                	push   0x0
c001093f:	68 6b 08 01 c0       	push   0xc001086b
c0010944:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001094a:	e8 71 44 00 00       	call   c0014dc0 <Process::createThread(void (*)(void*), void*, int)>
c001094f:	c7 05 60 79 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0027960,0x2
c0010959:	c7 05 64 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027964,0x1
c0010963:	c7 05 68 79 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0027968,0x3
c001096d:	c7 05 6c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002796c,0x0
c0010977:	c7 05 78 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027978,0x0
c0010981:	c7 05 70 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027970,0x0
c001098b:	c7 05 7c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002797c,0x0
c0010995:	c7 05 74 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027974,0x3c
c001099f:	c7 05 80 79 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0027980,0x3c
c00109a9:	83 c4 1c             	add    esp,0x1c
c00109ac:	c3                   	ret    

c00109ad <KeRand()>:
c00109ad:	69 05 88 79 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0027988,0x2875
c00109b7:	69 0d 8c 79 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002798c,0xa2e7b175
c00109c1:	53                   	push   ebx
c00109c2:	01 c1                	add    ecx,eax
c00109c4:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00109c9:	f7 25 88 79 02 c0    	mul    DWORD PTR ds:0xc0027988
c00109cf:	01 ca                	add    edx,ecx
c00109d1:	05 ef 04 b5 00       	add    eax,0xb504ef
c00109d6:	83 d2 00             	adc    edx,0x0
c00109d9:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c00109de:	0f b7 da             	movzx  ebx,dx
c00109e1:	89 da                	mov    edx,ebx
c00109e3:	89 1d 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,ebx
c00109e9:	0f ac d0 0e          	shrd   eax,edx,0xe
c00109ed:	5b                   	pop    ebx
c00109ee:	c3                   	ret    

c00109ef <KeSeedRand(unsigned int)>:
c00109ef:	53                   	push   ebx
c00109f0:	83 ec 08             	sub    esp,0x8
c00109f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109f7:	e8 56 68 00 00       	call   c0017252 <HalGetRand()>
c00109fc:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c0010a06:	31 d8                	xor    eax,ebx
c0010a08:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0010a0d:	e8 9b ff ff ff       	call   c00109ad <KeRand()>
c0010a12:	83 c4 08             	add    esp,0x8
c0010a15:	5b                   	pop    ebx
c0010a16:	eb 95                	jmp    c00109ad <KeRand()>

c0010a18 <KeInitRand()>:
c0010a18:	83 ec 0c             	sub    esp,0xc
c0010a1b:	e8 27 66 00 00       	call   c0017047 <HalQueryPerformanceCounter()>
c0010a20:	0f 20 da             	mov    edx,cr3
c0010a23:	0f 22 da             	mov    cr3,edx
c0010a26:	0f 20 da             	mov    edx,cr3
c0010a29:	0f 22 da             	mov    cr3,edx
c0010a2c:	0f 20 da             	mov    edx,cr3
c0010a2f:	0f 22 da             	mov    cr3,edx
c0010a32:	0f 20 da             	mov    edx,cr3
c0010a35:	0f 22 da             	mov    cr3,edx
c0010a38:	83 ec 0c             	sub    esp,0xc
c0010a3b:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010a40:	50                   	push   eax
c0010a41:	e8 a9 ff ff ff       	call   c00109ef <KeSeedRand(unsigned int)>
c0010a46:	83 c4 1c             	add    esp,0x1c
c0010a49:	c3                   	ret    
c0010a4a:	66 90                	xchg   ax,ax

c0010a4c <KeResolveCompatibilitySymbol(char*)>:
c0010a4c:	83 ec 0c             	sub    esp,0xc
c0010a4f:	83 ec 08             	sub    esp,0x8
c0010a52:	68 64 0b 02 c0       	push   0xc0020b64
c0010a57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a5b:	e8 f0 fc fe ff       	call   c0000750 <strcmp>
c0010a60:	83 c4 10             	add    esp,0x10
c0010a63:	85 c0                	test   eax,eax
c0010a65:	0f 94 c0             	sete   al
c0010a68:	0f b6 c0             	movzx  eax,al
c0010a6b:	85 c0                	test   eax,eax
c0010a6d:	74 0d                	je     c0010a7c <KeResolveCompatibilitySymbol(char*)+0x30>
c0010a6f:	b8 b8 4e 02 c0       	mov    eax,0xc0024eb8
c0010a74:	e9 8b 01 00 00       	jmp    c0010c04 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a79:	8d 76 00             	lea    esi,[esi+0x0]
c0010a7c:	83 ec 08             	sub    esp,0x8
c0010a7f:	68 6d 0b 02 c0       	push   0xc0020b6d
c0010a84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a88:	e8 c3 fc fe ff       	call   c0000750 <strcmp>
c0010a8d:	83 c4 10             	add    esp,0x10
c0010a90:	85 c0                	test   eax,eax
c0010a92:	0f 94 c0             	sete   al
c0010a95:	0f b6 c0             	movzx  eax,al
c0010a98:	85 c0                	test   eax,eax
c0010a9a:	74 0c                	je     c0010aa8 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010a9c:	b8 90 e5 01 c0       	mov    eax,0xc001e590
c0010aa1:	e9 5e 01 00 00       	jmp    c0010c04 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010aa6:	66 90                	xchg   ax,ax
c0010aa8:	83 ec 08             	sub    esp,0x8
c0010aab:	68 77 0b 02 c0       	push   0xc0020b77
c0010ab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ab4:	e8 97 fc fe ff       	call   c0000750 <strcmp>
c0010ab9:	83 c4 10             	add    esp,0x10
c0010abc:	85 c0                	test   eax,eax
c0010abe:	0f 94 c0             	sete   al
c0010ac1:	0f b6 c0             	movzx  eax,al
c0010ac4:	85 c0                	test   eax,eax
c0010ac6:	74 0c                	je     c0010ad4 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010ac8:	b8 c4 e2 01 c0       	mov    eax,0xc001e2c4
c0010acd:	e9 32 01 00 00       	jmp    c0010c04 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ad2:	66 90                	xchg   ax,ax
c0010ad4:	83 ec 08             	sub    esp,0x8
c0010ad7:	68 80 0b 02 c0       	push   0xc0020b80
c0010adc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ae0:	e8 6b fc fe ff       	call   c0000750 <strcmp>
c0010ae5:	83 c4 10             	add    esp,0x10
c0010ae8:	85 c0                	test   eax,eax
c0010aea:	0f 94 c0             	sete   al
c0010aed:	0f b6 c0             	movzx  eax,al
c0010af0:	85 c0                	test   eax,eax
c0010af2:	74 0c                	je     c0010b00 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010af4:	b8 5f 08 01 c0       	mov    eax,0xc001085f
c0010af9:	e9 06 01 00 00       	jmp    c0010c04 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010afe:	66 90                	xchg   ax,ax
c0010b00:	83 ec 08             	sub    esp,0x8
c0010b03:	68 93 0b 02 c0       	push   0xc0020b93
c0010b08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b0c:	e8 3f fc fe ff       	call   c0000750 <strcmp>
c0010b11:	83 c4 10             	add    esp,0x10
c0010b14:	85 c0                	test   eax,eax
c0010b16:	0f 94 c0             	sete   al
c0010b19:	0f b6 c0             	movzx  eax,al
c0010b1c:	85 c0                	test   eax,eax
c0010b1e:	74 0c                	je     c0010b2c <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010b20:	b8 e2 01 01 c0       	mov    eax,0xc00101e2
c0010b25:	e9 da 00 00 00       	jmp    c0010c04 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b2a:	66 90                	xchg   ax,ax
c0010b2c:	83 ec 08             	sub    esp,0x8
c0010b2f:	68 b0 0b 02 c0       	push   0xc0020bb0
c0010b34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b38:	e8 13 fc fe ff       	call   c0000750 <strcmp>
c0010b3d:	83 c4 10             	add    esp,0x10
c0010b40:	85 c0                	test   eax,eax
c0010b42:	0f 94 c0             	sete   al
c0010b45:	0f b6 c0             	movzx  eax,al
c0010b48:	85 c0                	test   eax,eax
c0010b4a:	74 0c                	je     c0010b58 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010b4c:	b8 90 e6 01 c0       	mov    eax,0xc001e690
c0010b51:	e9 ae 00 00 00       	jmp    c0010c04 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b56:	66 90                	xchg   ax,ax
c0010b58:	83 ec 08             	sub    esp,0x8
c0010b5b:	68 ba 0b 02 c0       	push   0xc0020bba
c0010b60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b64:	e8 e7 fb fe ff       	call   c0000750 <strcmp>
c0010b69:	83 c4 10             	add    esp,0x10
c0010b6c:	85 c0                	test   eax,eax
c0010b6e:	0f 94 c0             	sete   al
c0010b71:	0f b6 c0             	movzx  eax,al
c0010b74:	85 c0                	test   eax,eax
c0010b76:	74 0c                	je     c0010b84 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010b78:	b8 10 e4 01 c0       	mov    eax,0xc001e410
c0010b7d:	e9 82 00 00 00       	jmp    c0010c04 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b82:	66 90                	xchg   ax,ax
c0010b84:	83 ec 08             	sub    esp,0x8
c0010b87:	68 c3 0b 02 c0       	push   0xc0020bc3
c0010b8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b90:	e8 bb fb fe ff       	call   c0000750 <strcmp>
c0010b95:	83 c4 10             	add    esp,0x10
c0010b98:	85 c0                	test   eax,eax
c0010b9a:	0f 94 c0             	sete   al
c0010b9d:	0f b6 c0             	movzx  eax,al
c0010ba0:	85 c0                	test   eax,eax
c0010ba2:	74 08                	je     c0010bac <KeResolveCompatibilitySymbol(char*)+0x160>
c0010ba4:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010ba9:	eb 59                	jmp    c0010c04 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bab:	90                   	nop
c0010bac:	83 ec 08             	sub    esp,0x8
c0010baf:	68 db 0b 02 c0       	push   0xc0020bdb
c0010bb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bb8:	e8 93 fb fe ff       	call   c0000750 <strcmp>
c0010bbd:	83 c4 10             	add    esp,0x10
c0010bc0:	85 c0                	test   eax,eax
c0010bc2:	0f 94 c0             	sete   al
c0010bc5:	0f b6 c0             	movzx  eax,al
c0010bc8:	85 c0                	test   eax,eax
c0010bca:	74 08                	je     c0010bd4 <KeResolveCompatibilitySymbol(char*)+0x188>
c0010bcc:	b8 bc 4e 02 c0       	mov    eax,0xc0024ebc
c0010bd1:	eb 31                	jmp    c0010c04 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bd3:	90                   	nop
c0010bd4:	83 ec 08             	sub    esp,0x8
c0010bd7:	68 e8 0b 02 c0       	push   0xc0020be8
c0010bdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010be0:	e8 6b fb fe ff       	call   c0000750 <strcmp>
c0010be5:	83 c4 10             	add    esp,0x10
c0010be8:	85 c0                	test   eax,eax
c0010bea:	0f 94 c0             	sete   al
c0010bed:	0f b6 c0             	movzx  eax,al
c0010bf0:	85 c0                	test   eax,eax
c0010bf2:	74 08                	je     c0010bfc <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010bf4:	b8 bd 4e 02 c0       	mov    eax,0xc0024ebd
c0010bf9:	eb 09                	jmp    c0010c04 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bfb:	90                   	nop
c0010bfc:	b8 00 00 00 00       	mov    eax,0x0
c0010c01:	8d 76 00             	lea    esi,[esi+0x0]
c0010c04:	83 c4 0c             	add    esp,0xc
c0010c07:	c3                   	ret    

c0010c08 <KiSigKill(int)>:
c0010c08:	83 ec 0c             	sub    esp,0xc
c0010c0b:	6a 00                	push   0x0
c0010c0d:	6a 00                	push   0x0
c0010c0f:	6a ff                	push   0xffffffff
c0010c11:	6a 01                	push   0x1
c0010c13:	e8 3a 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c18:	83 c4 1c             	add    esp,0x1c
c0010c1b:	c3                   	ret    

c0010c1c <KiDefaultSignalHandlerIgnore(int)>:
c0010c1c:	c3                   	ret    

c0010c1d <KiDefaultSignalHandlerPause(int)>:
c0010c1d:	57                   	push   edi
c0010c1e:	b9 07 00 00 00       	mov    ecx,0x7
c0010c23:	56                   	push   esi
c0010c24:	be 31 0c 02 c0       	mov    esi,0xc0020c31
c0010c29:	83 ec 24             	sub    esp,0x24
c0010c2c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010c30:	fc                   	cld    
c0010c31:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010c33:	8d 44 24 04          	lea    eax,[esp+0x4]
c0010c37:	50                   	push   eax
c0010c38:	6a 00                	push   0x0
c0010c3a:	6a 00                	push   0x0
c0010c3c:	6a 27                	push   0x27
c0010c3e:	e8 0f 24 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c43:	83 c4 34             	add    esp,0x34
c0010c46:	5e                   	pop    esi
c0010c47:	5f                   	pop    edi
c0010c48:	c3                   	ret    

c0010c49 <KiDefaultSignalHandlerResume(int)>:
c0010c49:	57                   	push   edi
c0010c4a:	b9 1d 00 00 00       	mov    ecx,0x1d
c0010c4f:	56                   	push   esi
c0010c50:	be 4d 0c 02 c0       	mov    esi,0xc0020c4d
c0010c55:	83 ec 24             	sub    esp,0x24
c0010c58:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0010c5c:	fc                   	cld    
c0010c5d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c5f:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010c63:	50                   	push   eax
c0010c64:	6a 00                	push   0x0
c0010c66:	6a 00                	push   0x0
c0010c68:	6a 27                	push   0x27
c0010c6a:	e8 e3 23 01 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010c6f:	83 c4 34             	add    esp,0x34
c0010c72:	5e                   	pop    esi
c0010c73:	5f                   	pop    edi
c0010c74:	c3                   	ret    

c0010c75 <KeDeinitSignals(SigHandlerBlock*)>:
c0010c75:	e9 30 6e ff ff       	jmp    c0007aaa <free>

c0010c7a <KeInitSignals()>:
c0010c7a:	53                   	push   ebx
c0010c7b:	83 ec 14             	sub    esp,0x14
c0010c7e:	68 c8 00 00 00       	push   0xc8
c0010c83:	e8 12 6e ff ff       	call   c0007a9a <malloc>
c0010c88:	83 c4 0c             	add    esp,0xc
c0010c8b:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010c95:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010c9f:	89 c3                	mov    ebx,eax
c0010ca1:	6a 20                	push   0x20
c0010ca3:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010ca9:	6a 00                	push   0x0
c0010cab:	50                   	push   eax
c0010cac:	e8 3f f8 fe ff       	call   c00004f0 <memset>
c0010cb1:	83 c4 0c             	add    esp,0xc
c0010cb4:	6a 44                	push   0x44
c0010cb6:	6a 00                	push   0x0
c0010cb8:	53                   	push   ebx
c0010cb9:	e8 32 f8 fe ff       	call   c00004f0 <memset>
c0010cbe:	89 d8                	mov    eax,ebx
c0010cc0:	83 c4 18             	add    esp,0x18
c0010cc3:	5b                   	pop    ebx
c0010cc4:	c3                   	ret    

c0010cc5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010cc5:	53                   	push   ebx
c0010cc6:	b8 01 00 00 00       	mov    eax,0x1
c0010ccb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010ccf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cd3:	83 f9 10             	cmp    ecx,0x10
c0010cd6:	7f 21                	jg     c0010cf9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010cd8:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cdf:	89 03                	mov    DWORD PTR [ebx],eax
c0010ce1:	b8 01 00 00 00       	mov    eax,0x1
c0010ce6:	d3 e0                	shl    eax,cl
c0010ce8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010cec:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010cef:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010cf7:	31 c0                	xor    eax,eax
c0010cf9:	5b                   	pop    ebx
c0010cfa:	c3                   	ret    

c0010cfb <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010cfb:	55                   	push   ebp
c0010cfc:	57                   	push   edi
c0010cfd:	bf 08 00 00 00       	mov    edi,0x8
c0010d02:	56                   	push   esi
c0010d03:	53                   	push   ebx
c0010d04:	83 ec 18             	sub    esp,0x18
c0010d07:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d0b:	68 6a 0c 02 c0       	push   0xc0020c6a
c0010d10:	e8 6d 9c ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0010d15:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010d1c:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0010d22:	83 c4 10             	add    esp,0x10
c0010d25:	31 c9                	xor    ecx,ecx
c0010d27:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010d2b:	99                   	cdq    
c0010d2c:	f7 ff                	idiv   edi
c0010d2e:	8d 42 24             	lea    eax,[edx+0x24]
c0010d31:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0010d35:	85 f6                	test   esi,esi
c0010d37:	75 1a                	jne    c0010d53 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010d39:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010d3d:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0010d41:	50                   	push   eax
c0010d42:	50                   	push   eax
c0010d43:	52                   	push   edx
c0010d44:	68 7b 0c 02 c0       	push   0xc0020c7b
c0010d49:	e8 34 9c ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0010d4e:	83 c4 10             	add    esp,0x10
c0010d51:	eb 1b                	jmp    c0010d6e <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0010d53:	41                   	inc    ecx
c0010d54:	83 f9 08             	cmp    ecx,0x8
c0010d57:	75 ce                	jne    c0010d27 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010d59:	83 ec 0c             	sub    esp,0xc
c0010d5c:	be 01 00 00 00       	mov    esi,0x1
c0010d61:	68 9c 0c 02 c0       	push   0xc0020c9c
c0010d66:	e8 17 9c ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0010d6b:	83 c4 10             	add    esp,0x10
c0010d6e:	83 c4 0c             	add    esp,0xc
c0010d71:	89 f0                	mov    eax,esi
c0010d73:	5b                   	pop    ebx
c0010d74:	5e                   	pop    esi
c0010d75:	5f                   	pop    edi
c0010d76:	5d                   	pop    ebp
c0010d77:	c3                   	ret    

c0010d78 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010d78:	55                   	push   ebp
c0010d79:	57                   	push   edi
c0010d7a:	56                   	push   esi
c0010d7b:	53                   	push   ebx
c0010d7c:	51                   	push   ecx
c0010d7d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d81:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010d88:	0f 84 af 00 00 00    	je     c0010e3d <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010d8e:	31 c9                	xor    ecx,ecx
c0010d90:	bf 08 00 00 00       	mov    edi,0x8
c0010d95:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010d9b:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010d9e:	99                   	cdq    
c0010d9f:	f7 ff                	idiv   edi
c0010da1:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010da8:	85 ed                	test   ebp,ebp
c0010daa:	0f 84 9e 00 00 00    	je     c0010e4e <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010db0:	89 e9                	mov    ecx,ebp
c0010db2:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010db8:	bf 01 00 00 00       	mov    edi,0x1
c0010dbd:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dc0:	d3 e7                	shl    edi,cl
c0010dc2:	31 c9                	xor    ecx,ecx
c0010dc4:	b8 01 00 00 00       	mov    eax,0x1
c0010dc9:	d3 e0                	shl    eax,cl
c0010dcb:	85 04 24             	test   DWORD PTR [esp],eax
c0010dce:	74 06                	je     c0010dd6 <KeCheckSignal(SigHandlerBlock*, int*)+0x5e>
c0010dd0:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010dd4:	75 67                	jne    c0010e3d <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010dd6:	41                   	inc    ecx
c0010dd7:	83 f9 11             	cmp    ecx,0x11
c0010dda:	75 e8                	jne    c0010dc4 <KeCheckSignal(SigHandlerBlock*, int*)+0x4c>
c0010ddc:	46                   	inc    esi
c0010ddd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010de0:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010de6:	09 f8                	or     eax,edi
c0010de8:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010df3:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010df9:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010e00:	31 c0                	xor    eax,eax
c0010e02:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010e0a:	74 09                	je     c0010e15 <KeCheckSignal(SigHandlerBlock*, int*)+0x9d>
c0010e0c:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010e13:	eb 06                	jmp    c0010e1b <KeCheckSignal(SigHandlerBlock*, int*)+0xa3>
c0010e15:	40                   	inc    eax
c0010e16:	83 f8 08             	cmp    eax,0x8
c0010e19:	75 e7                	jne    c0010e02 <KeCheckSignal(SigHandlerBlock*, int*)+0x8a>
c0010e1b:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0010e1e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010e22:	83 fd 09             	cmp    ebp,0x9
c0010e25:	89 2a                	mov    DWORD PTR [edx],ebp
c0010e27:	75 07                	jne    c0010e30 <KeCheckSignal(SigHandlerBlock*, int*)+0xb8>
c0010e29:	b8 08 0c 01 c0       	mov    eax,0xc0010c08
c0010e2e:	eb 31                	jmp    c0010e61 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e30:	83 f8 01             	cmp    eax,0x1
c0010e33:	75 0c                	jne    c0010e41 <KeCheckSignal(SigHandlerBlock*, int*)+0xc9>
c0010e35:	f7 d7                	not    edi
c0010e37:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0010e3d:	31 c0                	xor    eax,eax
c0010e3f:	eb 20                	jmp    c0010e61 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e41:	85 c0                	test   eax,eax
c0010e43:	75 1c                	jne    c0010e61 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e45:	8b 04 ad 40 20 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffddfc0]
c0010e4c:	eb 13                	jmp    c0010e61 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c0010e4e:	46                   	inc    esi
c0010e4f:	41                   	inc    ecx
c0010e50:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010e56:	83 f9 08             	cmp    ecx,0x8
c0010e59:	0f 85 36 ff ff ff    	jne    c0010d95 <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c0010e5f:	eb dc                	jmp    c0010e3d <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010e61:	5a                   	pop    edx
c0010e62:	5b                   	pop    ebx
c0010e63:	5e                   	pop    esi
c0010e64:	5f                   	pop    edi
c0010e65:	5d                   	pop    ebp
c0010e66:	c3                   	ret    

c0010e67 <KiCheckSignalZ>:
c0010e67:	83 ec 10             	sub    esp,0x10
c0010e6a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010e6e:	50                   	push   eax
c0010e6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e74:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e77:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010e7d:	e8 f6 fe ff ff       	call   c0010d78 <KeCheckSignal(SigHandlerBlock*, int*)>
c0010e82:	5a                   	pop    edx
c0010e83:	31 d2                	xor    edx,edx
c0010e85:	59                   	pop    ecx
c0010e86:	85 c0                	test   eax,eax
c0010e88:	74 19                	je     c0010ea3 <KiCheckSignalZ+0x3c>
c0010e8a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010e90:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010e93:	89 02                	mov    DWORD PTR [edx],eax
c0010e95:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0010e9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ea0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010ea3:	89 d0                	mov    eax,edx
c0010ea5:	83 c4 10             	add    esp,0x10
c0010ea8:	c3                   	ret    

c0010ea9 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010ea9:	56                   	push   esi
c0010eaa:	53                   	push   ebx
c0010eab:	bb 01 00 00 00       	mov    ebx,0x1
c0010eb0:	52                   	push   edx
c0010eb1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010eb5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010eb9:	d3 e3                	shl    ebx,cl
c0010ebb:	83 f9 10             	cmp    ecx,0x10
c0010ebe:	7f 08                	jg     c0010ec8 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010ec0:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010ec6:	75 10                	jne    c0010ed8 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010ec8:	83 ec 0c             	sub    esp,0xc
c0010ecb:	68 ad 0c 02 c0       	push   0xc0020cad
c0010ed0:	e8 8a f9 ff ff       	call   c001085f <KePanic(char const*)>
c0010ed5:	83 c4 10             	add    esp,0x10
c0010ed8:	f7 d3                	not    ebx
c0010eda:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010ee0:	58                   	pop    eax
c0010ee1:	5b                   	pop    ebx
c0010ee2:	5e                   	pop    esi
c0010ee3:	c3                   	ret    

c0010ee4 <KiFinishSignalZ>:
c0010ee4:	53                   	push   ebx
c0010ee5:	83 ec 10             	sub    esp,0x10
c0010ee8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010eec:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010eef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ef4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ef7:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010efd:	e8 a7 ff ff ff       	call   c0010ea9 <KeCompleteSignal(SigHandlerBlock*, int)>
c0010f02:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010f08:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010f0f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0010f16:	83 c4 18             	add    esp,0x18
c0010f19:	5b                   	pop    ebx
c0010f1a:	c3                   	ret    

c0010f1b <SysSeekDir(regs*)>:
c0010f1b:	31 c0                	xor    eax,eax
c0010f1d:	31 d2                	xor    edx,edx
c0010f1f:	c3                   	ret    

c0010f20 <SysTellDir(regs*)>:
c0010f20:	31 c0                	xor    eax,eax
c0010f22:	31 d2                	xor    edx,edx
c0010f24:	c3                   	ret    

c0010f25 <SysVerify(regs*)>:
c0010f25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f29:	31 d2                	xor    edx,edx
c0010f2b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010f2e:	c3                   	ret    

c0010f2f <SysGetArgc(regs*)>:
c0010f2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f34:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f37:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010f3d:	89 c2                	mov    edx,eax
c0010f3f:	c1 fa 1f             	sar    edx,0x1f
c0010f42:	c3                   	ret    

c0010f43 <SysTTYName(regs*)>:
c0010f43:	b8 01 00 00 00       	mov    eax,0x1
c0010f48:	31 d2                	xor    edx,edx
c0010f4a:	c3                   	ret    

c0010f4b <SysFormatDisk(regs*)>:
c0010f4b:	56                   	push   esi
c0010f4c:	53                   	push   ebx
c0010f4d:	83 ec 04             	sub    esp,0x4
c0010f50:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010f54:	8b 1d b4 4f 02 c0    	mov    ebx,DWORD PTR ds:0xc0024fb4
c0010f5a:	eb 28                	jmp    c0010f84 <SysFormatDisk(regs*)+0x39>
c0010f5c:	83 ec 0c             	sub    esp,0xc
c0010f5f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010f62:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010f65:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f67:	51                   	push   ecx
c0010f68:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010f6b:	51                   	push   ecx
c0010f6c:	50                   	push   eax
c0010f6d:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c0010f74:	50                   	push   eax
c0010f75:	53                   	push   ebx
c0010f76:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010f79:	83 c4 20             	add    esp,0x20
c0010f7c:	83 f8 08             	cmp    eax,0x8
c0010f7f:	75 14                	jne    c0010f95 <SysFormatDisk(regs*)+0x4a>
c0010f81:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010f84:	85 db                	test   ebx,ebx
c0010f86:	75 d4                	jne    c0010f5c <SysFormatDisk(regs*)+0x11>
c0010f88:	83 c4 04             	add    esp,0x4
c0010f8b:	b8 03 00 00 00       	mov    eax,0x3
c0010f90:	31 d2                	xor    edx,edx
c0010f92:	5b                   	pop    ebx
c0010f93:	5e                   	pop    esi
c0010f94:	c3                   	ret    
c0010f95:	85 c0                	test   eax,eax
c0010f97:	74 1f                	je     c0010fb8 <SysFormatDisk(regs*)+0x6d>
c0010f99:	83 f8 09             	cmp    eax,0x9
c0010f9c:	74 0d                	je     c0010fab <SysFormatDisk(regs*)+0x60>
c0010f9e:	83 c4 04             	add    esp,0x4
c0010fa1:	b8 02 00 00 00       	mov    eax,0x2
c0010fa6:	31 d2                	xor    edx,edx
c0010fa8:	5b                   	pop    ebx
c0010fa9:	5e                   	pop    esi
c0010faa:	c3                   	ret    
c0010fab:	83 c4 04             	add    esp,0x4
c0010fae:	b8 01 00 00 00       	mov    eax,0x1
c0010fb3:	31 d2                	xor    edx,edx
c0010fb5:	5b                   	pop    ebx
c0010fb6:	5e                   	pop    esi
c0010fb7:	c3                   	ret    
c0010fb8:	83 c4 04             	add    esp,0x4
c0010fbb:	31 c0                	xor    eax,eax
c0010fbd:	31 d2                	xor    edx,edx
c0010fbf:	5b                   	pop    ebx
c0010fc0:	5e                   	pop    esi
c0010fc1:	c3                   	ret    

c0010fc2 <SysSetDiskVolumeLabel(regs*)>:
c0010fc2:	56                   	push   esi
c0010fc3:	53                   	push   ebx
c0010fc4:	83 ec 04             	sub    esp,0x4
c0010fc7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010fcb:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010fce:	83 f8 19             	cmp    eax,0x19
c0010fd1:	77 33                	ja     c0011006 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fd3:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c0010fda:	85 c9                	test   ecx,ecx
c0010fdc:	74 28                	je     c0011006 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fde:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010fe1:	85 db                	test   ebx,ebx
c0010fe3:	74 21                	je     c0011006 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fe5:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010feb:	85 d2                	test   edx,edx
c0010fed:	74 17                	je     c0011006 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010fef:	8b 32                	mov    esi,DWORD PTR [edx]
c0010ff1:	53                   	push   ebx
c0010ff2:	50                   	push   eax
c0010ff3:	51                   	push   ecx
c0010ff4:	52                   	push   edx
c0010ff5:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010ff8:	83 c4 10             	add    esp,0x10
c0010ffb:	89 c2                	mov    edx,eax
c0010ffd:	83 c4 04             	add    esp,0x4
c0011000:	c1 fa 1f             	sar    edx,0x1f
c0011003:	5b                   	pop    ebx
c0011004:	5e                   	pop    esi
c0011005:	c3                   	ret    
c0011006:	83 c4 04             	add    esp,0x4
c0011009:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001100e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011013:	5b                   	pop    ebx
c0011014:	5e                   	pop    esi
c0011015:	c3                   	ret    

c0011016 <SysGetDiskVolumeLabel(regs*)>:
c0011016:	57                   	push   edi
c0011017:	56                   	push   esi
c0011018:	53                   	push   ebx
c0011019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001101d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011020:	83 fa 19             	cmp    edx,0x19
c0011023:	77 3c                	ja     c0011061 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011025:	8b 0c 95 20 74 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd8be0]
c001102c:	85 c9                	test   ecx,ecx
c001102e:	74 31                	je     c0011061 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011030:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011033:	85 db                	test   ebx,ebx
c0011035:	74 2a                	je     c0011061 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011037:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001103a:	85 f6                	test   esi,esi
c001103c:	74 23                	je     c0011061 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001103e:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011044:	85 c0                	test   eax,eax
c0011046:	74 19                	je     c0011061 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011048:	83 ec 0c             	sub    esp,0xc
c001104b:	8b 38                	mov    edi,DWORD PTR [eax]
c001104d:	56                   	push   esi
c001104e:	53                   	push   ebx
c001104f:	52                   	push   edx
c0011050:	51                   	push   ecx
c0011051:	50                   	push   eax
c0011052:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0011055:	83 c4 20             	add    esp,0x20
c0011058:	89 c2                	mov    edx,eax
c001105a:	5b                   	pop    ebx
c001105b:	c1 fa 1f             	sar    edx,0x1f
c001105e:	5e                   	pop    esi
c001105f:	5f                   	pop    edi
c0011060:	c3                   	ret    
c0011061:	5b                   	pop    ebx
c0011062:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011067:	ba ff ff ff ff       	mov    edx,0xffffffff
c001106c:	5e                   	pop    esi
c001106d:	5f                   	pop    edi
c001106e:	c3                   	ret    

c001106f <SysShutdown(regs*)>:
c001106f:	83 ec 0c             	sub    esp,0xc
c0011072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011076:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011079:	85 c0                	test   eax,eax
c001107b:	74 18                	je     c0011095 <SysShutdown(regs*)+0x26>
c001107d:	83 f8 01             	cmp    eax,0x1
c0011080:	74 38                	je     c00110ba <SysShutdown(regs*)+0x4b>
c0011082:	83 f8 02             	cmp    eax,0x2
c0011085:	74 24                	je     c00110ab <SysShutdown(regs*)+0x3c>
c0011087:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001108c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011091:	83 c4 0c             	add    esp,0xc
c0011094:	c3                   	ret    
c0011095:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001109a:	8b 10                	mov    edx,DWORD PTR [eax]
c001109c:	6a 00                	push   0x0
c001109e:	6a 00                	push   0x0
c00110a0:	6a 00                	push   0x0
c00110a2:	50                   	push   eax
c00110a3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00110a6:	83 c4 10             	add    esp,0x10
c00110a9:	eb dc                	jmp    c0011087 <SysShutdown(regs*)+0x18>
c00110ab:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00110b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00110b2:	6a 00                	push   0x0
c00110b4:	6a 00                	push   0x0
c00110b6:	6a 01                	push   0x1
c00110b8:	eb e8                	jmp    c00110a2 <SysShutdown(regs*)+0x33>
c00110ba:	a1 a0 74 02 c0       	mov    eax,ds:0xc00274a0
c00110bf:	85 c0                	test   eax,eax
c00110c1:	74 02                	je     c00110c5 <SysShutdown(regs*)+0x56>
c00110c3:	ff d0                	call   eax
c00110c5:	31 c0                	xor    eax,eax
c00110c7:	31 d2                	xor    edx,edx
c00110c9:	83 c4 0c             	add    esp,0xc
c00110cc:	c3                   	ret    

c00110cd <SysRealpath(regs*)>:
c00110cd:	83 ec 0c             	sub    esp,0xc
c00110d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110d4:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00110d7:	85 d2                	test   edx,edx
c00110d9:	74 07                	je     c00110e2 <SysRealpath(regs*)+0x15>
c00110db:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00110de:	85 c0                	test   eax,eax
c00110e0:	75 0b                	jne    c00110ed <SysRealpath(regs*)+0x20>
c00110e2:	b8 01 00 00 00       	mov    eax,0x1
c00110e7:	31 d2                	xor    edx,edx
c00110e9:	83 c4 0c             	add    esp,0xc
c00110ec:	c3                   	ret    
c00110ed:	83 ec 04             	sub    esp,0x4
c00110f0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00110f6:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00110f9:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00110ff:	51                   	push   ecx
c0011100:	52                   	push   edx
c0011101:	50                   	push   eax
c0011102:	e8 47 9c ff ff       	call   c000ad4e <Fs::standardiseFiles(char*, char const*, char const*)>
c0011107:	83 c4 10             	add    esp,0x10
c001110a:	31 c0                	xor    eax,eax
c001110c:	31 d2                	xor    edx,edx
c001110e:	83 c4 0c             	add    esp,0xc
c0011111:	c3                   	ret    

c0011112 <SysReadDir(regs*)>:
c0011112:	53                   	push   ebx
c0011113:	83 ec 18             	sub    esp,0x18
c0011116:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001111a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001111d:	83 f8 02             	cmp    eax,0x2
c0011120:	76 61                	jbe    c0011183 <SysReadDir(regs*)+0x71>
c0011122:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011129:	77 49                	ja     c0011174 <SysReadDir(regs*)+0x62>
c001112b:	83 ec 0c             	sub    esp,0xc
c001112e:	50                   	push   eax
c001112f:	e8 7b 83 ff ff       	call   c00094af <getFromFileDescriptor(int)>
c0011134:	83 c4 10             	add    esp,0x10
c0011137:	85 c0                	test   eax,eax
c0011139:	74 39                	je     c0011174 <SysReadDir(regs*)+0x62>
c001113b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011143:	83 ec 0c             	sub    esp,0xc
c0011146:	8b 10                	mov    edx,DWORD PTR [eax]
c0011148:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001114c:	51                   	push   ecx
c001114d:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011150:	51                   	push   ecx
c0011151:	6a 00                	push   0x0
c0011153:	68 10 01 00 00       	push   0x110
c0011158:	50                   	push   eax
c0011159:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001115c:	83 c4 20             	add    esp,0x20
c001115f:	85 c0                	test   eax,eax
c0011161:	74 29                	je     c001118c <SysReadDir(regs*)+0x7a>
c0011163:	83 f8 07             	cmp    eax,0x7
c0011166:	74 1b                	je     c0011183 <SysReadDir(regs*)+0x71>
c0011168:	b8 02 00 00 00       	mov    eax,0x2
c001116d:	31 d2                	xor    edx,edx
c001116f:	83 c4 18             	add    esp,0x18
c0011172:	5b                   	pop    ebx
c0011173:	c3                   	ret    
c0011174:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011179:	ba ff ff ff ff       	mov    edx,0xffffffff
c001117e:	83 c4 18             	add    esp,0x18
c0011181:	5b                   	pop    ebx
c0011182:	c3                   	ret    
c0011183:	b8 01 00 00 00       	mov    eax,0x1
c0011188:	31 d2                	xor    edx,edx
c001118a:	eb e3                	jmp    c001116f <SysReadDir(regs*)+0x5d>
c001118c:	31 c0                	xor    eax,eax
c001118e:	31 d2                	xor    edx,edx
c0011190:	eb dd                	jmp    c001116f <SysReadDir(regs*)+0x5d>

c0011192 <SysIsATTY(regs*)>:
c0011192:	83 ec 0c             	sub    esp,0xc
c0011195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011199:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001119c:	83 f8 02             	cmp    eax,0x2
c001119f:	76 07                	jbe    c00111a8 <SysIsATTY(regs*)+0x16>
c00111a1:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00111a6:	75 26                	jne    c00111ce <SysIsATTY(regs*)+0x3c>
c00111a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111ad:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111b0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00111b6:	85 c0                	test   eax,eax
c00111b8:	74 24                	je     c00111de <SysIsATTY(regs*)+0x4c>
c00111ba:	83 ec 0c             	sub    esp,0xc
c00111bd:	8b 10                	mov    edx,DWORD PTR [eax]
c00111bf:	50                   	push   eax
c00111c0:	ff 12                	call   DWORD PTR [edx]
c00111c2:	31 d2                	xor    edx,edx
c00111c4:	0f b6 c0             	movzx  eax,al
c00111c7:	83 c4 10             	add    esp,0x10
c00111ca:	83 c4 0c             	add    esp,0xc
c00111cd:	c3                   	ret    
c00111ce:	83 ec 0c             	sub    esp,0xc
c00111d1:	50                   	push   eax
c00111d2:	e8 d8 82 ff ff       	call   c00094af <getFromFileDescriptor(int)>
c00111d7:	83 c4 10             	add    esp,0x10
c00111da:	85 c0                	test   eax,eax
c00111dc:	75 dc                	jne    c00111ba <SysIsATTY(regs*)+0x28>
c00111de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111e3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00111e8:	83 c4 0c             	add    esp,0xc
c00111eb:	c3                   	ret    

c00111ec <SysSeek(regs*)>:
c00111ec:	53                   	push   ebx
c00111ed:	83 ec 08             	sub    esp,0x8
c00111f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111f4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00111f7:	8d 50 fd             	lea    edx,[eax-0x3]
c00111fa:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011200:	77 32                	ja     c0011234 <SysSeek(regs*)+0x48>
c0011202:	83 ec 0c             	sub    esp,0xc
c0011205:	50                   	push   eax
c0011206:	e8 a4 82 ff ff       	call   c00094af <getFromFileDescriptor(int)>
c001120b:	83 c4 0c             	add    esp,0xc
c001120e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011211:	31 db                	xor    ebx,ebx
c0011213:	53                   	push   ebx
c0011214:	51                   	push   ecx
c0011215:	50                   	push   eax
c0011216:	e8 63 9e ff ff       	call   c000b07e <File::seek(unsigned long long)>
c001121b:	83 c4 10             	add    esp,0x10
c001121e:	85 c0                	test   eax,eax
c0011220:	0f 95 c0             	setne  al
c0011223:	31 d2                	xor    edx,edx
c0011225:	0f b6 c0             	movzx  eax,al
c0011228:	f7 d8                	neg    eax
c001122a:	83 d2 00             	adc    edx,0x0
c001122d:	83 c4 08             	add    esp,0x8
c0011230:	f7 da                	neg    edx
c0011232:	5b                   	pop    ebx
c0011233:	c3                   	ret    
c0011234:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011239:	ba ff ff ff ff       	mov    edx,0xffffffff
c001123e:	83 c4 08             	add    esp,0x8
c0011241:	5b                   	pop    ebx
c0011242:	c3                   	ret    

c0011243 <SysTell(regs*)>:
c0011243:	53                   	push   ebx
c0011244:	83 ec 08             	sub    esp,0x8
c0011247:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001124b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001124e:	83 f8 02             	cmp    eax,0x2
c0011251:	76 4e                	jbe    c00112a1 <SysTell(regs*)+0x5e>
c0011253:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011258:	76 19                	jbe    c0011273 <SysTell(regs*)+0x30>
c001125a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001125d:	31 d2                	xor    edx,edx
c001125f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011265:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001126c:	31 c0                	xor    eax,eax
c001126e:	83 c4 08             	add    esp,0x8
c0011271:	5b                   	pop    ebx
c0011272:	c3                   	ret    
c0011273:	83 ec 0c             	sub    esp,0xc
c0011276:	50                   	push   eax
c0011277:	e8 33 82 ff ff       	call   c00094af <getFromFileDescriptor(int)>
c001127c:	5a                   	pop    edx
c001127d:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011280:	59                   	pop    ecx
c0011281:	53                   	push   ebx
c0011282:	50                   	push   eax
c0011283:	e8 4c 9e ff ff       	call   c000b0d4 <File::tell(unsigned long long*)>
c0011288:	83 c4 10             	add    esp,0x10
c001128b:	85 c0                	test   eax,eax
c001128d:	0f 95 c0             	setne  al
c0011290:	31 d2                	xor    edx,edx
c0011292:	0f b6 c0             	movzx  eax,al
c0011295:	f7 d8                	neg    eax
c0011297:	83 d2 00             	adc    edx,0x0
c001129a:	83 c4 08             	add    esp,0x8
c001129d:	f7 da                	neg    edx
c001129f:	5b                   	pop    ebx
c00112a0:	c3                   	ret    
c00112a1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112a6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112ab:	83 c4 08             	add    esp,0x8
c00112ae:	5b                   	pop    ebx
c00112af:	c3                   	ret    

c00112b0 <SysSize(regs*)>:
c00112b0:	53                   	push   ebx
c00112b1:	83 ec 18             	sub    esp,0x18
c00112b4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00112b8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112bb:	83 f8 02             	cmp    eax,0x2
c00112be:	76 54                	jbe    c0011314 <SysSize(regs*)+0x64>
c00112c0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00112c5:	76 19                	jbe    c00112e0 <SysSize(regs*)+0x30>
c00112c7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00112ca:	31 d2                	xor    edx,edx
c00112cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00112d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112d9:	31 c0                	xor    eax,eax
c00112db:	83 c4 18             	add    esp,0x18
c00112de:	5b                   	pop    ebx
c00112df:	c3                   	ret    
c00112e0:	83 ec 0c             	sub    esp,0xc
c00112e3:	50                   	push   eax
c00112e4:	e8 c6 81 ff ff       	call   c00094af <getFromFileDescriptor(int)>
c00112e9:	83 c4 0c             	add    esp,0xc
c00112ec:	8d 54 24 13          	lea    edx,[esp+0x13]
c00112f0:	52                   	push   edx
c00112f1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00112f4:	52                   	push   edx
c00112f5:	50                   	push   eax
c00112f6:	e8 71 9f ff ff       	call   c000b26c <File::stat(unsigned long long*, bool*)>
c00112fb:	83 c4 10             	add    esp,0x10
c00112fe:	85 c0                	test   eax,eax
c0011300:	0f 95 c0             	setne  al
c0011303:	31 d2                	xor    edx,edx
c0011305:	0f b6 c0             	movzx  eax,al
c0011308:	f7 d8                	neg    eax
c001130a:	83 d2 00             	adc    edx,0x0
c001130d:	83 c4 18             	add    esp,0x18
c0011310:	f7 da                	neg    edx
c0011312:	5b                   	pop    ebx
c0011313:	c3                   	ret    
c0011314:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011319:	ba ff ff ff ff       	mov    edx,0xffffffff
c001131e:	83 c4 18             	add    esp,0x18
c0011321:	5b                   	pop    ebx
c0011322:	c3                   	ret    

c0011323 <SysSizeFromFilename(regs*)>:
c0011323:	57                   	push   edi
c0011324:	56                   	push   esi
c0011325:	53                   	push   ebx
c0011326:	83 ec 20             	sub    esp,0x20
c0011329:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001132d:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011330:	83 fb 02             	cmp    ebx,0x2
c0011333:	0f 86 8a 00 00 00    	jbe    c00113c3 <SysSizeFromFilename(regs*)+0xa0>
c0011339:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001133f:	76 1b                	jbe    c001135c <SysSizeFromFilename(regs*)+0x39>
c0011341:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011344:	31 d2                	xor    edx,edx
c0011346:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001134c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011353:	83 c4 20             	add    esp,0x20
c0011356:	31 c0                	xor    eax,eax
c0011358:	5b                   	pop    ebx
c0011359:	5e                   	pop    esi
c001135a:	5f                   	pop    edi
c001135b:	c3                   	ret    
c001135c:	83 ec 0c             	sub    esp,0xc
c001135f:	68 14 01 00 00       	push   0x114
c0011364:	e8 31 67 ff ff       	call   c0007a9a <malloc>
c0011369:	83 c4 0c             	add    esp,0xc
c001136c:	89 c7                	mov    edi,eax
c001136e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011373:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011376:	50                   	push   eax
c0011377:	53                   	push   ebx
c0011378:	57                   	push   edi
c0011379:	e8 86 9b ff ff       	call   c000af04 <File::File(char const*, Process*)>
c001137e:	83 c4 0c             	add    esp,0xc
c0011381:	8d 44 24 23          	lea    eax,[esp+0x23]
c0011385:	50                   	push   eax
c0011386:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011389:	52                   	push   edx
c001138a:	57                   	push   edi
c001138b:	e8 dc 9e ff ff       	call   c000b26c <File::stat(unsigned long long*, bool*)>
c0011390:	83 c4 10             	add    esp,0x10
c0011393:	85 ff                	test   edi,edi
c0011395:	74 14                	je     c00113ab <SysSizeFromFilename(regs*)+0x88>
c0011397:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001139b:	8b 17                	mov    edx,DWORD PTR [edi]
c001139d:	83 ec 0c             	sub    esp,0xc
c00113a0:	57                   	push   edi
c00113a1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00113a4:	83 c4 10             	add    esp,0x10
c00113a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113ab:	85 c0                	test   eax,eax
c00113ad:	0f 95 c0             	setne  al
c00113b0:	31 d2                	xor    edx,edx
c00113b2:	0f b6 c0             	movzx  eax,al
c00113b5:	f7 d8                	neg    eax
c00113b7:	83 d2 00             	adc    edx,0x0
c00113ba:	83 c4 20             	add    esp,0x20
c00113bd:	f7 da                	neg    edx
c00113bf:	5b                   	pop    ebx
c00113c0:	5e                   	pop    esi
c00113c1:	5f                   	pop    edi
c00113c2:	c3                   	ret    
c00113c3:	83 c4 20             	add    esp,0x20
c00113c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113cb:	5b                   	pop    ebx
c00113cc:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113d1:	5e                   	pop    esi
c00113d2:	5f                   	pop    edi
c00113d3:	c3                   	ret    

c00113d4 <SysClose(regs*)>:
c00113d4:	53                   	push   ebx
c00113d5:	83 ec 08             	sub    esp,0x8
c00113d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113dc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00113df:	83 f8 02             	cmp    eax,0x2
c00113e2:	76 41                	jbe    c0011425 <SysClose(regs*)+0x51>
c00113e4:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00113ea:	83 fa 01             	cmp    edx,0x1
c00113ed:	76 2d                	jbe    c001141c <SysClose(regs*)+0x48>
c00113ef:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00113f4:	77 2f                	ja     c0011425 <SysClose(regs*)+0x51>
c00113f6:	83 ec 0c             	sub    esp,0xc
c00113f9:	50                   	push   eax
c00113fa:	e8 b0 80 ff ff       	call   c00094af <getFromFileDescriptor(int)>
c00113ff:	89 c3                	mov    ebx,eax
c0011401:	89 04 24             	mov    DWORD PTR [esp],eax
c0011404:	e8 15 9c ff ff       	call   c000b01e <File::close()>
c0011409:	83 c4 10             	add    esp,0x10
c001140c:	85 db                	test   ebx,ebx
c001140e:	74 0c                	je     c001141c <SysClose(regs*)+0x48>
c0011410:	83 ec 0c             	sub    esp,0xc
c0011413:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011415:	53                   	push   ebx
c0011416:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011419:	83 c4 10             	add    esp,0x10
c001141c:	31 c0                	xor    eax,eax
c001141e:	31 d2                	xor    edx,edx
c0011420:	83 c4 08             	add    esp,0x8
c0011423:	5b                   	pop    ebx
c0011424:	c3                   	ret    
c0011425:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001142a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001142f:	83 c4 08             	add    esp,0x8
c0011432:	5b                   	pop    ebx
c0011433:	c3                   	ret    

c0011434 <SysOpenDir(regs*)>:
c0011434:	56                   	push   esi
c0011435:	53                   	push   ebx
c0011436:	83 ec 04             	sub    esp,0x4
c0011439:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001143d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011440:	85 c9                	test   ecx,ecx
c0011442:	74 5d                	je     c00114a1 <SysOpenDir(regs*)+0x6d>
c0011444:	83 ec 0c             	sub    esp,0xc
c0011447:	68 14 01 00 00       	push   0x114
c001144c:	e8 49 66 ff ff       	call   c0007a9a <malloc>
c0011451:	83 c4 0c             	add    esp,0xc
c0011454:	89 c6                	mov    esi,eax
c0011456:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001145b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001145e:	50                   	push   eax
c001145f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011462:	52                   	push   edx
c0011463:	56                   	push   esi
c0011464:	e8 c1 9f ff ff       	call   c000b42a <Directory::Directory(char const*, Process*)>
c0011469:	83 c4 10             	add    esp,0x10
c001146c:	85 f6                	test   esi,esi
c001146e:	74 31                	je     c00114a1 <SysOpenDir(regs*)+0x6d>
c0011470:	83 ec 0c             	sub    esp,0xc
c0011473:	56                   	push   esi
c0011474:	e8 6d a0 ff ff       	call   c000b4e6 <Directory::open()>
c0011479:	83 c4 10             	add    esp,0x10
c001147c:	85 c0                	test   eax,eax
c001147e:	75 21                	jne    c00114a1 <SysOpenDir(regs*)+0x6d>
c0011480:	83 ec 0c             	sub    esp,0xc
c0011483:	56                   	push   esi
c0011484:	e8 29 7d ff ff       	call   c00091b2 <UnixFile::getFileDescriptor()>
c0011489:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001148c:	83 c4 10             	add    esp,0x10
c001148f:	89 02                	mov    DWORD PTR [edx],eax
c0011491:	c1 f8 1f             	sar    eax,0x1f
c0011494:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011497:	83 c4 04             	add    esp,0x4
c001149a:	31 c0                	xor    eax,eax
c001149c:	31 d2                	xor    edx,edx
c001149e:	5b                   	pop    ebx
c001149f:	5e                   	pop    esi
c00114a0:	c3                   	ret    
c00114a1:	83 c4 04             	add    esp,0x4
c00114a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114a9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114ae:	5b                   	pop    ebx
c00114af:	5e                   	pop    esi
c00114b0:	c3                   	ret    

c00114b1 <SysMakeDir(regs*)>:
c00114b1:	56                   	push   esi
c00114b2:	53                   	push   ebx
c00114b3:	83 ec 10             	sub    esp,0x10
c00114b6:	68 14 01 00 00       	push   0x114
c00114bb:	e8 da 65 ff ff       	call   c0007a9a <malloc>
c00114c0:	83 c4 0c             	add    esp,0xc
c00114c3:	89 c3                	mov    ebx,eax
c00114c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114ca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00114cd:	50                   	push   eax
c00114ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00114d2:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00114d5:	52                   	push   edx
c00114d6:	53                   	push   ebx
c00114d7:	e8 4e 9f ff ff       	call   c000b42a <Directory::Directory(char const*, Process*)>
c00114dc:	83 c4 10             	add    esp,0x10
c00114df:	85 db                	test   ebx,ebx
c00114e1:	74 2c                	je     c001150f <SysMakeDir(regs*)+0x5e>
c00114e3:	83 ec 0c             	sub    esp,0xc
c00114e6:	53                   	push   ebx
c00114e7:	e8 da a1 ff ff       	call   c000b6c6 <Directory::create()>
c00114ec:	89 c6                	mov    esi,eax
c00114ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00114f3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114f6:	83 c4 10             	add    esp,0x10
c00114f9:	31 c0                	xor    eax,eax
c00114fb:	85 f6                	test   esi,esi
c00114fd:	0f 95 c0             	setne  al
c0011500:	31 d2                	xor    edx,edx
c0011502:	f7 d8                	neg    eax
c0011504:	83 d2 00             	adc    edx,0x0
c0011507:	83 c4 04             	add    esp,0x4
c001150a:	f7 da                	neg    edx
c001150c:	5b                   	pop    ebx
c001150d:	5e                   	pop    esi
c001150e:	c3                   	ret    
c001150f:	83 c4 04             	add    esp,0x4
c0011512:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011517:	ba ff ff ff ff       	mov    edx,0xffffffff
c001151c:	5b                   	pop    ebx
c001151d:	5e                   	pop    esi
c001151e:	c3                   	ret    

c001151f <SysCloseDir(regs*)>:
c001151f:	53                   	push   ebx
c0011520:	83 ec 08             	sub    esp,0x8
c0011523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011527:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001152a:	8d 50 fd             	lea    edx,[eax-0x3]
c001152d:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011533:	77 2f                	ja     c0011564 <SysCloseDir(regs*)+0x45>
c0011535:	83 ec 0c             	sub    esp,0xc
c0011538:	50                   	push   eax
c0011539:	e8 71 7f ff ff       	call   c00094af <getFromFileDescriptor(int)>
c001153e:	89 c3                	mov    ebx,eax
c0011540:	89 04 24             	mov    DWORD PTR [esp],eax
c0011543:	e8 fa 9f ff ff       	call   c000b542 <Directory::close()>
c0011548:	83 c4 10             	add    esp,0x10
c001154b:	85 db                	test   ebx,ebx
c001154d:	74 0c                	je     c001155b <SysCloseDir(regs*)+0x3c>
c001154f:	83 ec 0c             	sub    esp,0xc
c0011552:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011554:	53                   	push   ebx
c0011555:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011558:	83 c4 10             	add    esp,0x10
c001155b:	31 c0                	xor    eax,eax
c001155d:	31 d2                	xor    edx,edx
c001155f:	83 c4 08             	add    esp,0x8
c0011562:	5b                   	pop    ebx
c0011563:	c3                   	ret    
c0011564:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011569:	ba ff ff ff ff       	mov    edx,0xffffffff
c001156e:	83 c4 08             	add    esp,0x8
c0011571:	5b                   	pop    ebx
c0011572:	c3                   	ret    

c0011573 <SysWait(regs*)>:
c0011573:	83 ec 10             	sub    esp,0x10
c0011576:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001157a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001157d:	52                   	push   edx
c001157e:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011581:	51                   	push   ecx
c0011582:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011585:	50                   	push   eax
c0011586:	e8 d1 3c 00 00       	call   c001525c <waitTask(int, int*, int)>
c001158b:	83 c4 1c             	add    esp,0x1c
c001158e:	89 c2                	mov    edx,eax
c0011590:	c1 fa 1f             	sar    edx,0x1f
c0011593:	c3                   	ret    

c0011594 <SysNotImpl(regs*)>:
c0011594:	83 ec 18             	sub    esp,0x18
c0011597:	68 be 0c 02 c0       	push   0xc0020cbe
c001159c:	e8 be f2 ff ff       	call   c001085f <KePanic(char const*)>
c00115a1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115a6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115ab:	83 c4 1c             	add    esp,0x1c
c00115ae:	c3                   	ret    

c00115af <SysPanic(regs*)>:
c00115af:	83 ec 18             	sub    esp,0x18
c00115b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115b6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00115b9:	50                   	push   eax
c00115ba:	e8 a0 f2 ff ff       	call   c001085f <KePanic(char const*)>
c00115bf:	b8 01 00 00 00       	mov    eax,0x1
c00115c4:	31 d2                	xor    edx,edx
c00115c6:	83 c4 1c             	add    esp,0x1c
c00115c9:	c3                   	ret    

c00115ca <SysRmdir(regs*)>:
c00115ca:	56                   	push   esi
c00115cb:	53                   	push   ebx
c00115cc:	83 ec 20             	sub    esp,0x20
c00115cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00115d3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00115d6:	68 14 01 00 00       	push   0x114
c00115db:	e8 ba 64 ff ff       	call   c0007a9a <malloc>
c00115e0:	83 c4 0c             	add    esp,0xc
c00115e3:	89 c3                	mov    ebx,eax
c00115e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00115ed:	50                   	push   eax
c00115ee:	56                   	push   esi
c00115ef:	53                   	push   ebx
c00115f0:	e8 0f 99 ff ff       	call   c000af04 <File::File(char const*, Process*)>
c00115f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00115f8:	e8 3b 9b ff ff       	call   c000b138 <File::unlink()>
c00115fd:	83 c4 10             	add    esp,0x10
c0011600:	85 db                	test   ebx,ebx
c0011602:	74 14                	je     c0011618 <SysRmdir(regs*)+0x4e>
c0011604:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011608:	8b 13                	mov    edx,DWORD PTR [ebx]
c001160a:	83 ec 0c             	sub    esp,0xc
c001160d:	53                   	push   ebx
c001160e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011611:	83 c4 10             	add    esp,0x10
c0011614:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011618:	85 c0                	test   eax,eax
c001161a:	0f 95 c0             	setne  al
c001161d:	31 d2                	xor    edx,edx
c001161f:	0f b6 c0             	movzx  eax,al
c0011622:	f7 d8                	neg    eax
c0011624:	83 d2 00             	adc    edx,0x0
c0011627:	83 c4 14             	add    esp,0x14
c001162a:	f7 da                	neg    edx
c001162c:	5b                   	pop    ebx
c001162d:	5e                   	pop    esi
c001162e:	c3                   	ret    

c001162f <SysUnlink(regs*)>:
c001162f:	56                   	push   esi
c0011630:	53                   	push   ebx
c0011631:	83 ec 20             	sub    esp,0x20
c0011634:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011638:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001163b:	68 14 01 00 00       	push   0x114
c0011640:	e8 55 64 ff ff       	call   c0007a9a <malloc>
c0011645:	83 c4 0c             	add    esp,0xc
c0011648:	89 c3                	mov    ebx,eax
c001164a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001164f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011652:	50                   	push   eax
c0011653:	56                   	push   esi
c0011654:	53                   	push   ebx
c0011655:	e8 aa 98 ff ff       	call   c000af04 <File::File(char const*, Process*)>
c001165a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001165d:	e8 d6 9a ff ff       	call   c000b138 <File::unlink()>
c0011662:	83 c4 10             	add    esp,0x10
c0011665:	85 db                	test   ebx,ebx
c0011667:	74 14                	je     c001167d <SysUnlink(regs*)+0x4e>
c0011669:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001166d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001166f:	83 ec 0c             	sub    esp,0xc
c0011672:	53                   	push   ebx
c0011673:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011676:	83 c4 10             	add    esp,0x10
c0011679:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001167d:	85 c0                	test   eax,eax
c001167f:	0f 95 c0             	setne  al
c0011682:	31 d2                	xor    edx,edx
c0011684:	0f b6 c0             	movzx  eax,al
c0011687:	f7 d8                	neg    eax
c0011689:	83 d2 00             	adc    edx,0x0
c001168c:	83 c4 14             	add    esp,0x14
c001168f:	f7 da                	neg    edx
c0011691:	5b                   	pop    ebx
c0011692:	5e                   	pop    esi
c0011693:	c3                   	ret    

c0011694 <SysGetArgv(regs*)>:
c0011694:	83 ec 0c             	sub    esp,0xc
c0011697:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001169b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001169e:	85 c0                	test   eax,eax
c00116a0:	78 2c                	js     c00116ce <SysGetArgv(regs*)+0x3a>
c00116a2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00116a8:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00116ab:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00116b1:	7d 1b                	jge    c00116ce <SysGetArgv(regs*)+0x3a>
c00116b3:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00116ba:	85 c0                	test   eax,eax
c00116bc:	74 18                	je     c00116d6 <SysGetArgv(regs*)+0x42>
c00116be:	83 ec 08             	sub    esp,0x8
c00116c1:	50                   	push   eax
c00116c2:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00116c5:	50                   	push   eax
c00116c6:	e8 75 ef fe ff       	call   c0000640 <strcpy>
c00116cb:	83 c4 10             	add    esp,0x10
c00116ce:	31 c0                	xor    eax,eax
c00116d0:	31 d2                	xor    edx,edx
c00116d2:	83 c4 0c             	add    esp,0xc
c00116d5:	c3                   	ret    
c00116d6:	b8 01 00 00 00       	mov    eax,0x1
c00116db:	31 d2                	xor    edx,edx
c00116dd:	83 c4 0c             	add    esp,0xc
c00116e0:	c3                   	ret    

c00116e1 <SysUSleep(regs*)>:
c00116e1:	83 ec 1c             	sub    esp,0x1c
c00116e4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00116e8:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00116eb:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00116ee:	6a 00                	push   0x0
c00116f0:	6a 64                	push   0x64
c00116f2:	52                   	push   edx
c00116f3:	50                   	push   eax
c00116f4:	e8 97 ce 00 00       	call   c001e590 <__udivdi3>
c00116f9:	83 c4 14             	add    esp,0x14
c00116fc:	50                   	push   eax
c00116fd:	e8 3e 3c 00 00       	call   c0015340 <milliTenthSleep(unsigned int)>
c0011702:	31 c0                	xor    eax,eax
c0011704:	31 d2                	xor    edx,edx
c0011706:	83 c4 1c             	add    esp,0x1c
c0011709:	c3                   	ret    

c001170a <SysSpawn(regs*)>:
c001170a:	56                   	push   esi
c001170b:	53                   	push   ebx
c001170c:	83 ec 04             	sub    esp,0x4
c001170f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011713:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011716:	85 f6                	test   esi,esi
c0011718:	75 0a                	jne    c0011724 <SysSpawn(regs*)+0x1a>
c001171a:	83 c4 04             	add    esp,0x4
c001171d:	31 c0                	xor    eax,eax
c001171f:	31 d2                	xor    edx,edx
c0011721:	5b                   	pop    ebx
c0011722:	5e                   	pop    esi
c0011723:	c3                   	ret    
c0011724:	83 ec 0c             	sub    esp,0xc
c0011727:	68 24 07 00 00       	push   0x724
c001172c:	e8 69 63 ff ff       	call   c0007a9a <malloc>
c0011731:	83 c4 10             	add    esp,0x10
c0011734:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011737:	89 c6                	mov    esi,eax
c0011739:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001173c:	85 c9                	test   ecx,ecx
c001173e:	75 39                	jne    c0011779 <SysSpawn(regs*)+0x6f>
c0011740:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011745:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011748:	52                   	push   edx
c0011749:	50                   	push   eax
c001174a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001174d:	50                   	push   eax
c001174e:	56                   	push   esi
c001174f:	e8 40 32 00 00       	call   c0014994 <Process::Process(char const*, Process*, char**)>
c0011754:	83 c4 10             	add    esp,0x10
c0011757:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001175e:	75 ba                	jne    c001171a <SysSpawn(regs*)+0x10>
c0011760:	83 ec 0c             	sub    esp,0xc
c0011763:	56                   	push   esi
c0011764:	e8 63 37 00 00       	call   c0014ecc <Process::createUserThread()>
c0011769:	8b 06                	mov    eax,DWORD PTR [esi]
c001176b:	83 c4 10             	add    esp,0x10
c001176e:	89 c2                	mov    edx,eax
c0011770:	83 c4 04             	add    esp,0x4
c0011773:	c1 fa 1f             	sar    edx,0x1f
c0011776:	5b                   	pop    ebx
c0011777:	5e                   	pop    esi
c0011778:	c3                   	ret    
c0011779:	31 c0                	xor    eax,eax
c001177b:	eb cb                	jmp    c0011748 <SysSpawn(regs*)+0x3e>

c001177d <SysGetEnv(regs*)>:
c001177d:	57                   	push   edi
c001177e:	56                   	push   esi
c001177f:	53                   	push   ebx
c0011780:	83 ec 1c             	sub    esp,0x1c
c0011783:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011787:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001178c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001178f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011792:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0011795:	51                   	push   ecx
c0011796:	e8 7c ef ff ff       	call   c0010717 <Krnl::getProcessTotalEnvCount(Process*)>
c001179b:	83 c4 10             	add    esp,0x10
c001179e:	39 c7                	cmp    edi,eax
c00117a0:	7c 14                	jl     c00117b6 <SysGetEnv(regs*)+0x39>
c00117a2:	85 f6                	test   esi,esi
c00117a4:	75 0b                	jne    c00117b1 <SysGetEnv(regs*)+0x34>
c00117a6:	83 c4 10             	add    esp,0x10
c00117a9:	31 c0                	xor    eax,eax
c00117ab:	5b                   	pop    ebx
c00117ac:	31 d2                	xor    edx,edx
c00117ae:	5e                   	pop    esi
c00117af:	5f                   	pop    edi
c00117b0:	c3                   	ret    
c00117b1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00117b4:	eb f0                	jmp    c00117a6 <SysGetEnv(regs*)+0x29>
c00117b6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00117ba:	83 ec 04             	sub    esp,0x4
c00117bd:	57                   	push   edi
c00117be:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00117c4:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00117c7:	57                   	push   edi
c00117c8:	50                   	push   eax
c00117c9:	e8 69 ef ff ff       	call   c0010737 <Krnl::getProcessEnvPair(Process*, int)>
c00117ce:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00117d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00117d5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00117d9:	83 c4 0c             	add    esp,0xc
c00117dc:	85 d2                	test   edx,edx
c00117de:	75 23                	jne    c0011803 <SysGetEnv(regs*)+0x86>
c00117e0:	83 ec 0c             	sub    esp,0xc
c00117e3:	50                   	push   eax
c00117e4:	e8 87 ed fe ff       	call   c0000570 <strlen>
c00117e9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00117ec:	89 c3                	mov    ebx,eax
c00117ee:	e8 7d ed fe ff       	call   c0000570 <strlen>
c00117f3:	83 c4 10             	add    esp,0x10
c00117f6:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00117fa:	83 c4 10             	add    esp,0x10
c00117fd:	31 d2                	xor    edx,edx
c00117ff:	5b                   	pop    ebx
c0011800:	5e                   	pop    esi
c0011801:	5f                   	pop    edi
c0011802:	c3                   	ret    
c0011803:	83 ec 08             	sub    esp,0x8
c0011806:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011809:	50                   	push   eax
c001180a:	56                   	push   esi
c001180b:	e8 30 ee fe ff       	call   c0000640 <strcpy>
c0011810:	58                   	pop    eax
c0011811:	5a                   	pop    edx
c0011812:	68 d8 0c 02 c0       	push   0xc0020cd8
c0011817:	56                   	push   esi
c0011818:	e8 23 f0 fe ff       	call   c0000840 <strcat>
c001181d:	59                   	pop    ecx
c001181e:	5b                   	pop    ebx
c001181f:	57                   	push   edi
c0011820:	56                   	push   esi
c0011821:	e8 1a f0 fe ff       	call   c0000840 <strcat>
c0011826:	83 c4 10             	add    esp,0x10
c0011829:	e9 78 ff ff ff       	jmp    c00117a6 <SysGetEnv(regs*)+0x29>

c001182e <SysSetFatAttrib(regs*)>:
c001182e:	57                   	push   edi
c001182f:	56                   	push   esi
c0011830:	53                   	push   ebx
c0011831:	83 ec 1c             	sub    esp,0x1c
c0011834:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011838:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001183b:	68 14 01 00 00       	push   0x114
c0011840:	e8 55 62 ff ff       	call   c0007a9a <malloc>
c0011845:	83 c4 0c             	add    esp,0xc
c0011848:	89 c3                	mov    ebx,eax
c001184a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001184f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011852:	50                   	push   eax
c0011853:	57                   	push   edi
c0011854:	53                   	push   ebx
c0011855:	e8 aa 96 ff ff       	call   c000af04 <File::File(char const*, Process*)>
c001185a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001185d:	83 c4 0c             	add    esp,0xc
c0011860:	0f b6 d4             	movzx  edx,ah
c0011863:	0f b6 c0             	movzx  eax,al
c0011866:	52                   	push   edx
c0011867:	50                   	push   eax
c0011868:	53                   	push   ebx
c0011869:	e8 64 99 ff ff       	call   c000b1d2 <File::chfatattr(unsigned char, unsigned char)>
c001186e:	83 c4 10             	add    esp,0x10
c0011871:	85 db                	test   ebx,ebx
c0011873:	74 14                	je     c0011889 <SysSetFatAttrib(regs*)+0x5b>
c0011875:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011879:	8b 13                	mov    edx,DWORD PTR [ebx]
c001187b:	83 ec 0c             	sub    esp,0xc
c001187e:	53                   	push   ebx
c001187f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011882:	83 c4 10             	add    esp,0x10
c0011885:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011889:	85 c0                	test   eax,eax
c001188b:	0f 95 c0             	setne  al
c001188e:	31 d2                	xor    edx,edx
c0011890:	0f b6 c0             	movzx  eax,al
c0011893:	f7 d8                	neg    eax
c0011895:	83 d2 00             	adc    edx,0x0
c0011898:	83 c4 10             	add    esp,0x10
c001189b:	f7 da                	neg    edx
c001189d:	5b                   	pop    ebx
c001189e:	5e                   	pop    esi
c001189f:	5f                   	pop    edi
c00118a0:	c3                   	ret    

c00118a1 <SysPipe(regs*)>:
c00118a1:	57                   	push   edi
c00118a2:	56                   	push   esi
c00118a3:	53                   	push   ebx
c00118a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118a8:	83 ec 0c             	sub    esp,0xc
c00118ab:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00118ae:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00118b1:	6a 20                	push   0x20
c00118b3:	e8 e2 61 ff ff       	call   c0007a9a <malloc>
c00118b8:	89 c3                	mov    ebx,eax
c00118ba:	58                   	pop    eax
c00118bb:	5a                   	pop    edx
c00118bc:	68 00 50 00 00       	push   0x5000
c00118c1:	53                   	push   ebx
c00118c2:	e8 37 6b ff ff       	call   c00083fe <Pipe::Pipe(int)>
c00118c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118ca:	e8 e3 78 ff ff       	call   c00091b2 <UnixFile::getFileDescriptor()>
c00118cf:	89 07                	mov    DWORD PTR [edi],eax
c00118d1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00118d4:	e8 d9 78 ff ff       	call   c00091b2 <UnixFile::getFileDescriptor()>
c00118d9:	83 c4 10             	add    esp,0x10
c00118dc:	89 06                	mov    DWORD PTR [esi],eax
c00118de:	31 d2                	xor    edx,edx
c00118e0:	5b                   	pop    ebx
c00118e1:	31 c0                	xor    eax,eax
c00118e3:	5e                   	pop    esi
c00118e4:	5f                   	pop    edi
c00118e5:	c3                   	ret    

c00118e6 <SysGetUnixTime(regs*)>:
c00118e6:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00118eb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00118f1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118f5:	e9 10 a0 ff ff       	jmp    c000b90a <Clock::timeInSecondsLocal()>

c00118fa <string_ends_with(char const*, char const*)>:
c00118fa:	57                   	push   edi
c00118fb:	56                   	push   esi
c00118fc:	53                   	push   ebx
c00118fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011901:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011905:	83 ec 0c             	sub    esp,0xc
c0011908:	53                   	push   ebx
c0011909:	e8 62 ec fe ff       	call   c0000570 <strlen>
c001190e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011911:	89 c6                	mov    esi,eax
c0011913:	e8 58 ec fe ff       	call   c0000570 <strlen>
c0011918:	83 c4 10             	add    esp,0x10
c001191b:	39 c6                	cmp    esi,eax
c001191d:	7d 06                	jge    c0011925 <string_ends_with(char const*, char const*)+0x2b>
c001191f:	5b                   	pop    ebx
c0011920:	31 c0                	xor    eax,eax
c0011922:	5e                   	pop    esi
c0011923:	5f                   	pop    edi
c0011924:	c3                   	ret    
c0011925:	83 ec 08             	sub    esp,0x8
c0011928:	29 c6                	sub    esi,eax
c001192a:	57                   	push   edi
c001192b:	01 f3                	add    ebx,esi
c001192d:	53                   	push   ebx
c001192e:	e8 1d ee fe ff       	call   c0000750 <strcmp>
c0011933:	83 c4 10             	add    esp,0x10
c0011936:	85 c0                	test   eax,eax
c0011938:	5b                   	pop    ebx
c0011939:	0f 94 c0             	sete   al
c001193c:	5e                   	pop    esi
c001193d:	0f b6 c0             	movzx  eax,al
c0011940:	5f                   	pop    edi
c0011941:	c3                   	ret    

c0011942 <SysOpen(regs*)>:
c0011942:	56                   	push   esi
c0011943:	53                   	push   ebx
c0011944:	81 ec 04 01 00 00    	sub    esp,0x104
c001194a:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011951:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011954:	85 c0                	test   eax,eax
c0011956:	0f 84 bd 01 00 00    	je     c0011b19 <SysOpen(regs*)+0x1d7>
c001195c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001195f:	85 c0                	test   eax,eax
c0011961:	0f 84 b2 01 00 00    	je     c0011b19 <SysOpen(regs*)+0x1d7>
c0011967:	83 ec 04             	sub    esp,0x4
c001196a:	68 da 0c 02 c0       	push   0xc0020cda
c001196f:	50                   	push   eax
c0011970:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011974:	56                   	push   esi
c0011975:	e8 d4 93 ff ff       	call   c000ad4e <Fs::standardiseFiles(char*, char const*, char const*)>
c001197a:	89 34 24             	mov    DWORD PTR [esp],esi
c001197d:	e8 ee eb fe ff       	call   c0000570 <strlen>
c0011982:	83 c4 10             	add    esp,0x10
c0011985:	83 e8 01             	sub    eax,0x1
c0011988:	74 21                	je     c00119ab <SysOpen(regs*)+0x69>
c001198a:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001198e:	eb 12                	jmp    c00119a2 <SysOpen(regs*)+0x60>
c0011990:	83 fa 3a             	cmp    edx,0x3a
c0011993:	74 12                	je     c00119a7 <SysOpen(regs*)+0x65>
c0011995:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011999:	83 e8 01             	sub    eax,0x1
c001199c:	74 0d                	je     c00119ab <SysOpen(regs*)+0x69>
c001199e:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00119a2:	83 fa 2e             	cmp    edx,0x2e
c00119a5:	75 e9                	jne    c0011990 <SysOpen(regs*)+0x4e>
c00119a7:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00119ab:	83 ec 08             	sub    esp,0x8
c00119ae:	68 de 0c 02 c0       	push   0xc0020cde
c00119b3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119b6:	50                   	push   eax
c00119b7:	e8 3e ff ff ff       	call   c00118fa <string_ends_with(char const*, char const*)>
c00119bc:	83 c4 10             	add    esp,0x10
c00119bf:	85 c0                	test   eax,eax
c00119c1:	74 1d                	je     c00119e0 <SysOpen(regs*)+0x9e>
c00119c3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00119c6:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00119cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00119d3:	81 c4 04 01 00 00    	add    esp,0x104
c00119d9:	31 c0                	xor    eax,eax
c00119db:	31 d2                	xor    edx,edx
c00119dd:	5b                   	pop    ebx
c00119de:	5e                   	pop    esi
c00119df:	c3                   	ret    
c00119e0:	83 ec 08             	sub    esp,0x8
c00119e3:	68 e3 0c 02 c0       	push   0xc0020ce3
c00119e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00119eb:	50                   	push   eax
c00119ec:	e8 09 ff ff ff       	call   c00118fa <string_ends_with(char const*, char const*)>
c00119f1:	83 c4 10             	add    esp,0x10
c00119f4:	85 c0                	test   eax,eax
c00119f6:	75 cb                	jne    c00119c3 <SysOpen(regs*)+0x81>
c00119f8:	83 ec 08             	sub    esp,0x8
c00119fb:	68 df 0c 02 c0       	push   0xc0020cdf
c0011a00:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a03:	50                   	push   eax
c0011a04:	e8 47 ed fe ff       	call   c0000750 <strcmp>
c0011a09:	83 c4 10             	add    esp,0x10
c0011a0c:	85 c0                	test   eax,eax
c0011a0e:	74 b3                	je     c00119c3 <SysOpen(regs*)+0x81>
c0011a10:	83 ec 08             	sub    esp,0x8
c0011a13:	68 de 0c 02 c0       	push   0xc0020cde
c0011a18:	56                   	push   esi
c0011a19:	e8 dc fe ff ff       	call   c00118fa <string_ends_with(char const*, char const*)>
c0011a1e:	83 c4 10             	add    esp,0x10
c0011a21:	85 c0                	test   eax,eax
c0011a23:	75 9e                	jne    c00119c3 <SysOpen(regs*)+0x81>
c0011a25:	83 ec 08             	sub    esp,0x8
c0011a28:	68 e8 0c 02 c0       	push   0xc0020ce8
c0011a2d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a30:	50                   	push   eax
c0011a31:	e8 c4 fe ff ff       	call   c00118fa <string_ends_with(char const*, char const*)>
c0011a36:	83 c4 10             	add    esp,0x10
c0011a39:	85 c0                	test   eax,eax
c0011a3b:	0f 85 eb 00 00 00    	jne    c0011b2c <SysOpen(regs*)+0x1ea>
c0011a41:	83 ec 08             	sub    esp,0x8
c0011a44:	68 ed 0c 02 c0       	push   0xc0020ced
c0011a49:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011a4c:	50                   	push   eax
c0011a4d:	e8 a8 fe ff ff       	call   c00118fa <string_ends_with(char const*, char const*)>
c0011a52:	83 c4 10             	add    esp,0x10
c0011a55:	85 c0                	test   eax,eax
c0011a57:	0f 85 cf 00 00 00    	jne    c0011b2c <SysOpen(regs*)+0x1ea>
c0011a5d:	83 ec 08             	sub    esp,0x8
c0011a60:	68 e9 0c 02 c0       	push   0xc0020ce9
c0011a65:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011a68:	51                   	push   ecx
c0011a69:	e8 e2 ec fe ff       	call   c0000750 <strcmp>
c0011a6e:	83 c4 10             	add    esp,0x10
c0011a71:	85 c0                	test   eax,eax
c0011a73:	0f 84 b3 00 00 00    	je     c0011b2c <SysOpen(regs*)+0x1ea>
c0011a79:	83 ec 08             	sub    esp,0x8
c0011a7c:	68 e8 0c 02 c0       	push   0xc0020ce8
c0011a81:	56                   	push   esi
c0011a82:	e8 73 fe ff ff       	call   c00118fa <string_ends_with(char const*, char const*)>
c0011a87:	83 c4 10             	add    esp,0x10
c0011a8a:	85 c0                	test   eax,eax
c0011a8c:	0f 85 9a 00 00 00    	jne    c0011b2c <SysOpen(regs*)+0x1ea>
c0011a92:	83 ec 0c             	sub    esp,0xc
c0011a95:	68 14 01 00 00       	push   0x114
c0011a9a:	e8 fb 5f ff ff       	call   c0007a9a <malloc>
c0011a9f:	83 c4 0c             	add    esp,0xc
c0011aa2:	89 c6                	mov    esi,eax
c0011aa4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011aa9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011aac:	50                   	push   eax
c0011aad:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011ab0:	52                   	push   edx
c0011ab1:	56                   	push   esi
c0011ab2:	e8 4d 94 ff ff       	call   c000af04 <File::File(char const*, Process*)>
c0011ab7:	83 c4 10             	add    esp,0x10
c0011aba:	85 f6                	test   esi,esi
c0011abc:	74 5b                	je     c0011b19 <SysOpen(regs*)+0x1d7>
c0011abe:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011ac1:	0f b6 c2             	movzx  eax,dl
c0011ac4:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011ac7:	89 d0                	mov    eax,edx
c0011ac9:	83 e0 01             	and    eax,0x1
c0011acc:	f6 c2 02             	test   dl,0x2
c0011acf:	74 03                	je     c0011ad4 <SysOpen(regs*)+0x192>
c0011ad1:	83 c8 02             	or     eax,0x2
c0011ad4:	f6 c2 04             	test   dl,0x4
c0011ad7:	74 03                	je     c0011adc <SysOpen(regs*)+0x19a>
c0011ad9:	83 c8 04             	or     eax,0x4
c0011adc:	f6 c2 08             	test   dl,0x8
c0011adf:	74 03                	je     c0011ae4 <SysOpen(regs*)+0x1a2>
c0011ae1:	83 c8 0a             	or     eax,0xa
c0011ae4:	80 e2 10             	and    dl,0x10
c0011ae7:	74 03                	je     c0011aec <SysOpen(regs*)+0x1aa>
c0011ae9:	83 c8 12             	or     eax,0x12
c0011aec:	83 ec 08             	sub    esp,0x8
c0011aef:	50                   	push   eax
c0011af0:	56                   	push   esi
c0011af1:	e8 ca 94 ff ff       	call   c000afc0 <File::open(FileOpenMode)>
c0011af6:	83 c4 10             	add    esp,0x10
c0011af9:	85 c0                	test   eax,eax
c0011afb:	75 1c                	jne    c0011b19 <SysOpen(regs*)+0x1d7>
c0011afd:	83 ec 0c             	sub    esp,0xc
c0011b00:	56                   	push   esi
c0011b01:	e8 ac 76 ff ff       	call   c00091b2 <UnixFile::getFileDescriptor()>
c0011b06:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011b09:	83 c4 10             	add    esp,0x10
c0011b0c:	89 02                	mov    DWORD PTR [edx],eax
c0011b0e:	c1 f8 1f             	sar    eax,0x1f
c0011b11:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011b14:	e9 ba fe ff ff       	jmp    c00119d3 <SysOpen(regs*)+0x91>
c0011b19:	81 c4 04 01 00 00    	add    esp,0x104
c0011b1f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b24:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b29:	5b                   	pop    ebx
c0011b2a:	5e                   	pop    esi
c0011b2b:	c3                   	ret    
c0011b2c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b2f:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011b35:	e9 92 fe ff ff       	jmp    c00119cc <SysOpen(regs*)+0x8a>

c0011b3a <KeSystemCall(regs*, void*)>:
c0011b3a:	53                   	push   ebx
c0011b3b:	83 ec 08             	sub    esp,0x8
c0011b3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b42:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011b45:	83 f8 3b             	cmp    eax,0x3b
c0011b48:	77 16                	ja     c0011b60 <KeSystemCall(regs*, void*)+0x26>
c0011b4a:	8b 14 85 a0 20 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffddf60]
c0011b51:	85 d2                	test   edx,edx
c0011b53:	74 0b                	je     c0011b60 <KeSystemCall(regs*, void*)+0x26>
c0011b55:	83 ec 0c             	sub    esp,0xc
c0011b58:	53                   	push   ebx
c0011b59:	ff d2                	call   edx
c0011b5b:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011b5e:	eb 0d                	jmp    c0011b6d <KeSystemCall(regs*, void*)+0x33>
c0011b60:	52                   	push   edx
c0011b61:	52                   	push   edx
c0011b62:	50                   	push   eax
c0011b63:	68 f2 0c 02 c0       	push   0xc0020cf2
c0011b68:	e8 15 8e ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0011b6d:	83 c4 10             	add    esp,0x10
c0011b70:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011b75:	31 d2                	xor    edx,edx
c0011b77:	83 c4 08             	add    esp,0x8
c0011b7a:	5b                   	pop    ebx
c0011b7b:	c3                   	ret    

c0011b7c <KeSwitchEndian16(unsigned short)>:
c0011b7c:	83 ec 04             	sub    esp,0x4
c0011b7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b83:	66 89 04 24          	mov    WORD PTR [esp],ax
c0011b87:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011b8b:	c1 f8 08             	sar    eax,0x8
c0011b8e:	89 c2                	mov    edx,eax
c0011b90:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0011b94:	c1 e0 08             	shl    eax,0x8
c0011b97:	09 d0                	or     eax,edx
c0011b99:	83 c4 04             	add    esp,0x4
c0011b9c:	c3                   	ret    
c0011b9d:	8d 76 00             	lea    esi,[esi+0x0]

c0011ba0 <KeSwitchEndian32(unsigned int)>:
c0011ba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ba4:	c1 e8 18             	shr    eax,0x18
c0011ba7:	89 c2                	mov    edx,eax
c0011ba9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bad:	c1 e0 08             	shl    eax,0x8
c0011bb0:	25 00 00 ff 00       	and    eax,0xff0000
c0011bb5:	09 c2                	or     edx,eax
c0011bb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bbb:	c1 e8 08             	shr    eax,0x8
c0011bbe:	25 00 ff 00 00       	and    eax,0xff00
c0011bc3:	09 c2                	or     edx,eax
c0011bc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bc9:	c1 e0 18             	shl    eax,0x18
c0011bcc:	09 d0                	or     eax,edx
c0011bce:	c3                   	ret    
c0011bcf:	90                   	nop

c0011bd0 <EthernetCRC32(unsigned char*, int)>:
c0011bd0:	83 ec 10             	sub    esp,0x10
c0011bd3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011bd8:	75 0a                	jne    c0011be4 <EthernetCRC32(unsigned char*, int)+0x14>
c0011bda:	b8 00 00 00 00       	mov    eax,0x0
c0011bdf:	e9 8c 00 00 00       	jmp    c0011c70 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011be4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011be9:	7f 09                	jg     c0011bf4 <EthernetCRC32(unsigned char*, int)+0x24>
c0011beb:	b8 00 00 00 00       	mov    eax,0x0
c0011bf0:	eb 7e                	jmp    c0011c70 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011bf2:	66 90                	xchg   ax,ax
c0011bf4:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0011bfc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011c04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011c08:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0011c0c:	7d 5a                	jge    c0011c68 <EthernetCRC32(unsigned char*, int)+0x98>
c0011c0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011c16:	01 d0                	add    eax,edx
c0011c18:	8a 00                	mov    al,BYTE PTR [eax]
c0011c1a:	0f b6 c0             	movzx  eax,al
c0011c1d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0011c21:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c29:	8d 76 00             	lea    esi,[esi+0x0]
c0011c2c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0011c31:	7f 2d                	jg     c0011c60 <EthernetCRC32(unsigned char*, int)+0x90>
c0011c33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c37:	83 e0 01             	and    eax,0x1
c0011c3a:	74 10                	je     c0011c4c <EthernetCRC32(unsigned char*, int)+0x7c>
c0011c3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c40:	d1 e8                	shr    eax,1
c0011c42:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0011c47:	eb 0b                	jmp    c0011c54 <EthernetCRC32(unsigned char*, int)+0x84>
c0011c49:	8d 76 00             	lea    esi,[esi+0x0]
c0011c4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c50:	d1 e8                	shr    eax,1
c0011c52:	66 90                	xchg   ax,ax
c0011c54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011c58:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0011c5d:	eb cd                	jmp    c0011c2c <EthernetCRC32(unsigned char*, int)+0x5c>
c0011c5f:	90                   	nop
c0011c60:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0011c65:	eb 9d                	jmp    c0011c04 <EthernetCRC32(unsigned char*, int)+0x34>
c0011c67:	90                   	nop
c0011c68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c6c:	f7 d0                	not    eax
c0011c6e:	66 90                	xchg   ax,ax
c0011c70:	83 c4 10             	add    esp,0x10
c0011c73:	c3                   	ret    

c0011c74 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0011c74:	83 ec 2c             	sub    esp,0x2c
c0011c77:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c7b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011c80:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c84:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011c88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c8c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011c8f:	0f b7 c0             	movzx  eax,ax
c0011c92:	3d 06 08 00 00       	cmp    eax,0x806
c0011c97:	75 13                	jne    c0011cac <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0011c99:	83 ec 0c             	sub    esp,0xc
c0011c9c:	68 06 0d 02 c0       	push   0xc0020d06
c0011ca1:	e8 dc 8c ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0011ca6:	83 c4 10             	add    esp,0x10
c0011ca9:	eb 25                	jmp    c0011cd0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011cab:	90                   	nop
c0011cac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011cb0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011cb3:	0f b7 c0             	movzx  eax,ax
c0011cb6:	3d 00 08 00 00       	cmp    eax,0x800
c0011cbb:	75 13                	jne    c0011cd0 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0011cbd:	83 ec 0c             	sub    esp,0xc
c0011cc0:	68 1c 0d 02 c0       	push   0xc0020d1c
c0011cc5:	e8 b8 8c ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0011cca:	83 c4 10             	add    esp,0x10
c0011ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0011cd0:	90                   	nop
c0011cd1:	83 c4 2c             	add    esp,0x2c
c0011cd4:	c3                   	ret    

c0011cd5 <CmOpen(char const*)>:
c0011cd5:	57                   	push   edi
c0011cd6:	56                   	push   esi
c0011cd7:	53                   	push   ebx
c0011cd8:	83 ec 1c             	sub    esp,0x1c
c0011cdb:	6a 30                	push   0x30
c0011cdd:	e8 b8 5d ff ff       	call   c0007a9a <malloc>
c0011ce2:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011ce9:	89 c3                	mov    ebx,eax
c0011ceb:	e8 aa 5d ff ff       	call   c0007a9a <malloc>
c0011cf0:	83 c4 0c             	add    esp,0xc
c0011cf3:	89 c6                	mov    esi,eax
c0011cf5:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0011cfb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011cff:	50                   	push   eax
c0011d00:	e8 ff 91 ff ff       	call   c000af04 <File::File(char const*, Process*)>
c0011d05:	83 c4 0c             	add    esp,0xc
c0011d08:	89 33                	mov    DWORD PTR [ebx],esi
c0011d0a:	8d 44 24 07          	lea    eax,[esp+0x7]
c0011d0e:	50                   	push   eax
c0011d0f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011d13:	50                   	push   eax
c0011d14:	56                   	push   esi
c0011d15:	e8 52 95 ff ff       	call   c000b26c <File::stat(unsigned long long*, bool*)>
c0011d1a:	5a                   	pop    edx
c0011d1b:	59                   	pop    ecx
c0011d1c:	6a 01                	push   0x1
c0011d1e:	ff 33                	push   DWORD PTR [ebx]
c0011d20:	e8 9b 92 ff ff       	call   c000afc0 <File::open(FileOpenMode)>
c0011d25:	5e                   	pop    esi
c0011d26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011d2a:	e8 6b 5d ff ff       	call   c0007a9a <malloc>
c0011d2f:	5a                   	pop    edx
c0011d30:	89 c7                	mov    edi,eax
c0011d32:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011d36:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d38:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d3a:	56                   	push   esi
c0011d3b:	57                   	push   edi
c0011d3c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d40:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d44:	50                   	push   eax
c0011d45:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011d48:	83 c4 14             	add    esp,0x14
c0011d4b:	ff 33                	push   DWORD PTR [ebx]
c0011d4d:	e8 cc 92 ff ff       	call   c000b01e <File::close()>
c0011d52:	59                   	pop    ecx
c0011d53:	58                   	pop    eax
c0011d54:	6a 13                	push   0x13
c0011d56:	ff 33                	push   DWORD PTR [ebx]
c0011d58:	e8 63 92 ff ff       	call   c000afc0 <File::open(FileOpenMode)>
c0011d5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011d5f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d61:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d64:	57                   	push   edi
c0011d65:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d69:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d6d:	50                   	push   eax
c0011d6e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011d71:	83 c4 14             	add    esp,0x14
c0011d74:	57                   	push   edi
c0011d75:	e8 30 5d ff ff       	call   c0007aaa <free>
c0011d7a:	83 c4 10             	add    esp,0x10
c0011d7d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0011d80:	75 10                	jne    c0011d92 <CmOpen(char const*)+0xbd>
c0011d82:	83 ec 0c             	sub    esp,0xc
c0011d85:	68 31 0d 02 c0       	push   0xc0020d31
c0011d8a:	e8 d0 ea ff ff       	call   c001085f <KePanic(char const*)>
c0011d8f:	83 c4 10             	add    esp,0x10
c0011d92:	8d 7b 05             	lea    edi,[ebx+0x5]
c0011d95:	50                   	push   eax
c0011d96:	6a 00                	push   0x0
c0011d98:	6a 00                	push   0x0
c0011d9a:	ff 33                	push   DWORD PTR [ebx]
c0011d9c:	e8 dd 92 ff ff       	call   c000b07e <File::seek(unsigned long long)>
c0011da1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011da3:	8b 10                	mov    edx,DWORD PTR [eax]
c0011da5:	89 34 24             	mov    DWORD PTR [esp],esi
c0011da8:	57                   	push   edi
c0011da9:	6a 00                	push   0x0
c0011dab:	6a 2b                	push   0x2b
c0011dad:	50                   	push   eax
c0011dae:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011db1:	83 c4 1c             	add    esp,0x1c
c0011db4:	6a 00                	push   0x0
c0011db6:	6a 00                	push   0x0
c0011db8:	ff 33                	push   DWORD PTR [ebx]
c0011dba:	e8 bf 92 ff ff       	call   c000b07e <File::seek(unsigned long long)>
c0011dbf:	83 c4 0c             	add    esp,0xc
c0011dc2:	6a 08                	push   0x8
c0011dc4:	68 42 0d 02 c0       	push   0xc0020d42
c0011dc9:	57                   	push   edi
c0011dca:	e8 b1 e5 fe ff       	call   c0000380 <memcmp>
c0011dcf:	83 c4 10             	add    esp,0x10
c0011dd2:	85 c0                	test   eax,eax
c0011dd4:	74 10                	je     c0011de6 <CmOpen(char const*)+0x111>
c0011dd6:	83 ec 0c             	sub    esp,0xc
c0011dd9:	68 4b 0d 02 c0       	push   0xc0020d4b
c0011dde:	e8 7c ea ff ff       	call   c001085f <KePanic(char const*)>
c0011de3:	83 c4 10             	add    esp,0x10
c0011de6:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011dea:	89 d8                	mov    eax,ebx
c0011dec:	83 c4 10             	add    esp,0x10
c0011def:	5b                   	pop    ebx
c0011df0:	5e                   	pop    esi
c0011df1:	5f                   	pop    edi
c0011df2:	c3                   	ret    

c0011df3 <CmClose(Reghive_Tag*)>:
c0011df3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011df7:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011dfb:	74 0b                	je     c0011e08 <CmClose(Reghive_Tag*)+0x15>
c0011dfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011e03:	e9 16 92 ff ff       	jmp    c000b01e <File::close()>
c0011e08:	c3                   	ret    

c0011e09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011e09:	53                   	push   ebx
c0011e0a:	83 ec 18             	sub    esp,0x18
c0011e0d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e11:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011e15:	74 29                	je     c0011e40 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011e17:	50                   	push   eax
c0011e18:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011e1d:	99                   	cdq    
c0011e1e:	52                   	push   edx
c0011e1f:	50                   	push   eax
c0011e20:	ff 33                	push   DWORD PTR [ebx]
c0011e22:	e8 57 92 ff ff       	call   c000b07e <File::seek(unsigned long long)>
c0011e27:	5a                   	pop    edx
c0011e28:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e2a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011e2e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e30:	51                   	push   ecx
c0011e31:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011e35:	6a 00                	push   0x0
c0011e37:	6a 2b                	push   0x2b
c0011e39:	50                   	push   eax
c0011e3a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e3d:	83 c4 20             	add    esp,0x20
c0011e40:	83 c4 18             	add    esp,0x18
c0011e43:	5b                   	pop    ebx
c0011e44:	c3                   	ret    

c0011e45 <CmGetString(Reghive_Tag*, int, char*)>:
c0011e45:	55                   	push   ebp
c0011e46:	57                   	push   edi
c0011e47:	56                   	push   esi
c0011e48:	53                   	push   ebx
c0011e49:	31 db                	xor    ebx,ebx
c0011e4b:	83 ec 70             	sub    esp,0x70
c0011e4e:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0011e55:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0011e59:	50                   	push   eax
c0011e5a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0011e61:	55                   	push   ebp
c0011e62:	e8 a2 ff ff ff       	call   c0011e09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e67:	83 c4 10             	add    esp,0x10
c0011e6a:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0011e6f:	c1 e0 08             	shl    eax,0x8
c0011e72:	89 c2                	mov    edx,eax
c0011e74:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0011e79:	09 d0                	or     eax,edx
c0011e7b:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0011e80:	c1 e0 08             	shl    eax,0x8
c0011e83:	09 d0                	or     eax,edx
c0011e85:	74 25                	je     c0011eac <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0011e87:	6b fb 0d             	imul   edi,ebx,0xd
c0011e8a:	52                   	push   edx
c0011e8b:	8d 54 24 39          	lea    edx,[esp+0x39]
c0011e8f:	52                   	push   edx
c0011e90:	50                   	push   eax
c0011e91:	55                   	push   ebp
c0011e92:	e8 72 ff ff ff       	call   c0011e09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e97:	8d 74 24 49          	lea    esi,[esp+0x49]
c0011e9b:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011ea2:	b9 27 00 00 00       	mov    ecx,0x27
c0011ea7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011ea9:	83 c4 10             	add    esp,0x10
c0011eac:	83 c3 03             	add    ebx,0x3
c0011eaf:	83 fb 15             	cmp    ebx,0x15
c0011eb2:	75 b6                	jne    c0011e6a <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011eb4:	83 c4 6c             	add    esp,0x6c
c0011eb7:	5b                   	pop    ebx
c0011eb8:	5e                   	pop    esi
c0011eb9:	5f                   	pop    edi
c0011eba:	5d                   	pop    ebp
c0011ebb:	c3                   	ret    

c0011ebc <CmEnterDirectory(Reghive_Tag*, int)>:
c0011ebc:	83 ec 40             	sub    esp,0x40
c0011ebf:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011ec3:	50                   	push   eax
c0011ec4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ec8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ecc:	e8 38 ff ff ff       	call   c0011e09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ed1:	83 c4 10             	add    esp,0x10
c0011ed4:	83 c8 ff             	or     eax,0xffffffff
c0011ed7:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0011edc:	75 19                	jne    c0011ef7 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0011ede:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011ee3:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ee8:	c1 e0 08             	shl    eax,0x8
c0011eeb:	09 c2                	or     edx,eax
c0011eed:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011ef2:	c1 e0 10             	shl    eax,0x10
c0011ef5:	09 d0                	or     eax,edx
c0011ef7:	83 c4 3c             	add    esp,0x3c
c0011efa:	c3                   	ret    

c0011efb <CmGetNext(Reghive_Tag*, int)>:
c0011efb:	83 ec 40             	sub    esp,0x40
c0011efe:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011f02:	50                   	push   eax
c0011f03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f0b:	e8 f9 fe ff ff       	call   c0011e09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f10:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011f15:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011f1a:	c1 e0 08             	shl    eax,0x8
c0011f1d:	09 c2                	or     edx,eax
c0011f1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011f24:	83 c4 4c             	add    esp,0x4c
c0011f27:	c1 e0 10             	shl    eax,0x10
c0011f2a:	09 d0                	or     eax,edx
c0011f2c:	c3                   	ret    

c0011f2d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0011f2d:	53                   	push   ebx
c0011f2e:	83 ec 18             	sub    esp,0x18
c0011f31:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f35:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011f39:	74 29                	je     c0011f64 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0011f3b:	50                   	push   eax
c0011f3c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0011f41:	99                   	cdq    
c0011f42:	52                   	push   edx
c0011f43:	50                   	push   eax
c0011f44:	ff 33                	push   DWORD PTR [ebx]
c0011f46:	e8 33 91 ff ff       	call   c000b07e <File::seek(unsigned long long)>
c0011f4b:	5a                   	pop    edx
c0011f4c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f4e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f52:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f54:	51                   	push   ecx
c0011f55:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f59:	6a 00                	push   0x0
c0011f5b:	6a 2b                	push   0x2b
c0011f5d:	50                   	push   eax
c0011f5e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011f61:	83 c4 20             	add    esp,0x20
c0011f64:	83 c4 18             	add    esp,0x18
c0011f67:	5b                   	pop    ebx
c0011f68:	c3                   	ret    

c0011f69 <CmFreeExtent(Reghive_Tag*, int)>:
c0011f69:	53                   	push   ebx
c0011f6a:	83 ec 3c             	sub    esp,0x3c
c0011f6d:	6a 2b                	push   0x2b
c0011f6f:	6a 00                	push   0x0
c0011f71:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011f75:	53                   	push   ebx
c0011f76:	e8 75 e5 fe ff       	call   c00004f0 <memset>
c0011f7b:	83 c4 0c             	add    esp,0xc
c0011f7e:	53                   	push   ebx
c0011f7f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f83:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f87:	e8 a1 ff ff ff       	call   c0011f2d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011f8c:	83 c4 48             	add    esp,0x48
c0011f8f:	5b                   	pop    ebx
c0011f90:	c3                   	ret    

c0011f91 <CmUpdateHeader(Reghive_Tag*)>:
c0011f91:	83 ec 0c             	sub    esp,0xc
c0011f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f98:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011f9c:	74 10                	je     c0011fae <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0011f9e:	52                   	push   edx
c0011f9f:	8d 50 05             	lea    edx,[eax+0x5]
c0011fa2:	52                   	push   edx
c0011fa3:	6a 00                	push   0x0
c0011fa5:	50                   	push   eax
c0011fa6:	e8 82 ff ff ff       	call   c0011f2d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011fab:	83 c4 10             	add    esp,0x10
c0011fae:	83 c4 0c             	add    esp,0xc
c0011fb1:	c3                   	ret    

c0011fb2 <CmExpand(Reghive_Tag*, int)>:
c0011fb2:	57                   	push   edi
c0011fb3:	56                   	push   esi
c0011fb4:	83 ce ff             	or     esi,0xffffffff
c0011fb7:	53                   	push   ebx
c0011fb8:	83 ec 30             	sub    esp,0x30
c0011fbb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011fbf:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011fc3:	74 5f                	je     c0012024 <CmExpand(Reghive_Tag*, int)+0x72>
c0011fc5:	31 d2                	xor    edx,edx
c0011fc7:	31 f6                	xor    esi,esi
c0011fc9:	50                   	push   eax
c0011fca:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0011fce:	52                   	push   edx
c0011fcf:	50                   	push   eax
c0011fd0:	ff 33                	push   DWORD PTR [ebx]
c0011fd2:	e8 a7 90 ff ff       	call   c000b07e <File::seek(unsigned long long)>
c0011fd7:	83 c4 0c             	add    esp,0xc
c0011fda:	6a 2b                	push   0x2b
c0011fdc:	6a 00                	push   0x0
c0011fde:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0011fe2:	57                   	push   edi
c0011fe3:	e8 08 e5 fe ff       	call   c00004f0 <memset>
c0011fe8:	83 c4 10             	add    esp,0x10
c0011feb:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0011fef:	7d 1b                	jge    c001200c <CmExpand(Reghive_Tag*, int)+0x5a>
c0011ff1:	83 ec 0c             	sub    esp,0xc
c0011ff4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ff6:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0011ffa:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ffc:	46                   	inc    esi
c0011ffd:	51                   	push   ecx
c0011ffe:	57                   	push   edi
c0011fff:	6a 00                	push   0x0
c0012001:	6a 2b                	push   0x2b
c0012003:	50                   	push   eax
c0012004:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012007:	83 c4 20             	add    esp,0x20
c001200a:	eb df                	jmp    c0011feb <CmExpand(Reghive_Tag*, int)+0x39>
c001200c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012010:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0012013:	83 ec 0c             	sub    esp,0xc
c0012016:	01 f2                	add    edx,esi
c0012018:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c001201b:	53                   	push   ebx
c001201c:	e8 70 ff ff ff       	call   c0011f91 <CmUpdateHeader(Reghive_Tag*)>
c0012021:	83 c4 10             	add    esp,0x10
c0012024:	83 c4 30             	add    esp,0x30
c0012027:	89 f0                	mov    eax,esi
c0012029:	5b                   	pop    ebx
c001202a:	5e                   	pop    esi
c001202b:	5f                   	pop    edi
c001202c:	c3                   	ret    

c001202d <CmFindUnusedExtent(Reghive_Tag*)>:
c001202d:	55                   	push   ebp
c001202e:	57                   	push   edi
c001202f:	56                   	push   esi
c0012030:	53                   	push   ebx
c0012031:	83 cb ff             	or     ebx,0xffffffff
c0012034:	83 ec 1c             	sub    esp,0x1c
c0012037:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001203b:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c001203f:	74 68                	je     c00120a9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012041:	be 2b 00 00 00       	mov    esi,0x2b
c0012046:	51                   	push   ecx
c0012047:	31 ff                	xor    edi,edi
c0012049:	6a 00                	push   0x0
c001204b:	31 db                	xor    ebx,ebx
c001204d:	6a 00                	push   0x0
c001204f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012052:	e8 27 90 ff ff       	call   c000b07e <File::seek(unsigned long long)>
c0012057:	83 c4 10             	add    esp,0x10
c001205a:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c001205d:	76 3b                	jbe    c001209a <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c001205f:	83 ec 0c             	sub    esp,0xc
c0012062:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012065:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012069:	8b 10                	mov    edx,DWORD PTR [eax]
c001206b:	51                   	push   ecx
c001206c:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012070:	51                   	push   ecx
c0012071:	6a 00                	push   0x0
c0012073:	6a 01                	push   0x1
c0012075:	50                   	push   eax
c0012076:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012079:	83 c4 20             	add    esp,0x20
c001207c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012081:	74 26                	je     c00120a9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012083:	43                   	inc    ebx
c0012084:	52                   	push   edx
c0012085:	57                   	push   edi
c0012086:	56                   	push   esi
c0012087:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c001208a:	e8 ef 8f ff ff       	call   c000b07e <File::seek(unsigned long long)>
c001208f:	83 c6 2b             	add    esi,0x2b
c0012092:	83 d7 00             	adc    edi,0x0
c0012095:	83 c4 10             	add    esp,0x10
c0012098:	eb c0                	jmp    c001205a <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c001209a:	50                   	push   eax
c001209b:	50                   	push   eax
c001209c:	6a 40                	push   0x40
c001209e:	55                   	push   ebp
c001209f:	e8 0e ff ff ff       	call   c0011fb2 <CmExpand(Reghive_Tag*, int)>
c00120a4:	83 c4 10             	add    esp,0x10
c00120a7:	89 c3                	mov    ebx,eax
c00120a9:	83 c4 1c             	add    esp,0x1c
c00120ac:	89 d8                	mov    eax,ebx
c00120ae:	5b                   	pop    ebx
c00120af:	5e                   	pop    esi
c00120b0:	5f                   	pop    edi
c00120b1:	5d                   	pop    ebp
c00120b2:	c3                   	ret    

c00120b3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c00120b3:	55                   	push   ebp
c00120b4:	57                   	push   edi
c00120b5:	56                   	push   esi
c00120b6:	53                   	push   ebx
c00120b7:	81 ec 88 00 00 00    	sub    esp,0x88
c00120bd:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00120c4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00120cb:	e8 5d ff ff ff       	call   c001202d <CmFindUnusedExtent(Reghive_Tag*)>
c00120d0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00120d4:	83 c4 0c             	add    esp,0xc
c00120d7:	6a 2b                	push   0x2b
c00120d9:	6a 00                	push   0x0
c00120db:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00120df:	55                   	push   ebp
c00120e0:	e8 0b e4 fe ff       	call   c00004f0 <memset>
c00120e5:	83 c4 10             	add    esp,0x10
c00120e8:	85 db                	test   ebx,ebx
c00120ea:	74 12                	je     c00120fe <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00120ec:	51                   	push   ecx
c00120ed:	55                   	push   ebp
c00120ee:	53                   	push   ebx
c00120ef:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00120f6:	e8 0e fd ff ff       	call   c0011e09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00120fb:	83 c4 10             	add    esp,0x10
c00120fe:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012102:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012109:	b9 2b 00 00 00       	mov    ecx,0x2b
c001210e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012110:	85 db                	test   ebx,ebx
c0012112:	74 49                	je     c001215d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012114:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012119:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c001211e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012122:	c1 e0 08             	shl    eax,0x8
c0012125:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001212b:	09 c8                	or     eax,ecx
c001212d:	74 11                	je     c0012140 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c001212f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012133:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012137:	c1 e8 10             	shr    eax,0x10
c001213a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c001213e:	eb 0f                	jmp    c001214f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012140:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012145:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001214a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001214f:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012153:	c1 ea 08             	shr    edx,0x8
c0012156:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c001215b:	eb 0f                	jmp    c001216c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c001215d:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012162:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012167:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001216c:	52                   	push   edx
c001216d:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012171:	50                   	push   eax
c0012172:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012176:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001217d:	e8 ab fd ff ff       	call   c0011f2d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012182:	83 c4 10             	add    esp,0x10
c0012185:	85 db                	test   ebx,ebx
c0012187:	74 12                	je     c001219b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012189:	50                   	push   eax
c001218a:	55                   	push   ebp
c001218b:	53                   	push   ebx
c001218c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012193:	e8 95 fd ff ff       	call   c0011f2d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012198:	83 c4 10             	add    esp,0x10
c001219b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001219f:	83 c4 7c             	add    esp,0x7c
c00121a2:	5b                   	pop    ebx
c00121a3:	5e                   	pop    esi
c00121a4:	5f                   	pop    edi
c00121a5:	5d                   	pop    ebp
c00121a6:	c3                   	ret    

c00121a7 <CmSetString(Reghive_Tag*, int, char const*)>:
c00121a7:	55                   	push   ebp
c00121a8:	57                   	push   edi
c00121a9:	56                   	push   esi
c00121aa:	53                   	push   ebx
c00121ab:	bb 27 00 00 00       	mov    ebx,0x27
c00121b0:	81 ec 88 00 00 00    	sub    esp,0x88
c00121b6:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00121bd:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00121c4:	e8 a7 e3 fe ff       	call   c0000570 <strlen>
c00121c9:	8d 48 26             	lea    ecx,[eax+0x26]
c00121cc:	89 c8                	mov    eax,ecx
c00121ce:	99                   	cdq    
c00121cf:	f7 fb                	idiv   ebx
c00121d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121d5:	83 c4 10             	add    esp,0x10
c00121d8:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00121de:	7e 10                	jle    c00121f0 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00121e0:	83 ec 0c             	sub    esp,0xc
c00121e3:	68 5c 0d 02 c0       	push   0xc0020d5c
c00121e8:	e8 72 e6 ff ff       	call   c001085f <KePanic(char const*)>
c00121ed:	83 c4 10             	add    esp,0x10
c00121f0:	31 ff                	xor    edi,edi
c00121f2:	50                   	push   eax
c00121f3:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00121f7:	53                   	push   ebx
c00121f8:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00121ff:	56                   	push   esi
c0012200:	e8 04 fc ff ff       	call   c0011e09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012205:	83 c4 10             	add    esp,0x10
c0012208:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c001220c:	89 d0                	mov    eax,edx
c001220e:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0012212:	c1 e0 08             	shl    eax,0x8
c0012215:	09 c2                	or     edx,eax
c0012217:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c001221b:	c1 e2 08             	shl    edx,0x8
c001221e:	09 c2                	or     edx,eax
c0012220:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0012224:	7e 76                	jle    c001229c <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0012226:	85 d2                	test   edx,edx
c0012228:	75 25                	jne    c001224f <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c001222a:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c001222f:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012233:	50                   	push   eax
c0012234:	6a 00                	push   0x0
c0012236:	6a 00                	push   0x0
c0012238:	56                   	push   esi
c0012239:	e8 75 fe ff ff       	call   c00120b3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001223e:	83 c4 10             	add    esp,0x10
c0012241:	89 c2                	mov    edx,eax
c0012243:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012246:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012249:	c1 f8 10             	sar    eax,0x10
c001224c:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c001224f:	55                   	push   ebp
c0012250:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012254:	55                   	push   ebp
c0012255:	52                   	push   edx
c0012256:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001225a:	56                   	push   esi
c001225b:	e8 a9 fb ff ff       	call   c0011e09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012260:	83 c4 0c             	add    esp,0xc
c0012263:	6a 27                	push   0x27
c0012265:	6a 00                	push   0x0
c0012267:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c001226b:	51                   	push   ecx
c001226c:	e8 7f e2 fe ff       	call   c00004f0 <memset>
c0012271:	83 c4 0c             	add    esp,0xc
c0012274:	6b c7 27             	imul   eax,edi,0x27
c0012277:	6a 27                	push   0x27
c0012279:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012280:	50                   	push   eax
c0012281:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012285:	51                   	push   ecx
c0012286:	e8 f5 e3 fe ff       	call   c0000680 <strncpy>
c001228b:	83 c4 0c             	add    esp,0xc
c001228e:	55                   	push   ebp
c001228f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012293:	52                   	push   edx
c0012294:	56                   	push   esi
c0012295:	e8 93 fc ff ff       	call   c0011f2d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001229a:	eb 19                	jmp    c00122b5 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c001229c:	85 d2                	test   edx,edx
c001229e:	74 18                	je     c00122b8 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c00122a0:	51                   	push   ecx
c00122a1:	51                   	push   ecx
c00122a2:	52                   	push   edx
c00122a3:	56                   	push   esi
c00122a4:	e8 c0 fc ff ff       	call   c0011f69 <CmFreeExtent(Reghive_Tag*, int)>
c00122a9:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c00122ad:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c00122b1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00122b5:	83 c4 10             	add    esp,0x10
c00122b8:	47                   	inc    edi
c00122b9:	83 c3 03             	add    ebx,0x3
c00122bc:	83 ff 07             	cmp    edi,0x7
c00122bf:	0f 85 43 ff ff ff    	jne    c0012208 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00122c5:	50                   	push   eax
c00122c6:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00122ca:	50                   	push   eax
c00122cb:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00122d2:	56                   	push   esi
c00122d3:	e8 55 fc ff ff       	call   c0011f2d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122d8:	81 c4 8c 00 00 00    	add    esp,0x8c
c00122de:	5b                   	pop    ebx
c00122df:	5e                   	pop    esi
c00122e0:	5f                   	pop    edi
c00122e1:	5d                   	pop    ebp
c00122e2:	c3                   	ret    

c00122e3 <CmGetMatch(char*, char*, bool, bool*)>:
c00122e3:	56                   	push   esi
c00122e4:	53                   	push   ebx
c00122e5:	50                   	push   eax
c00122e6:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00122ea:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00122ef:	74 25                	je     c0012316 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00122f1:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00122f4:	31 db                	xor    ebx,ebx
c00122f6:	50                   	push   eax
c00122f7:	50                   	push   eax
c00122f8:	8d 04 9d a0 21 02 c0 	lea    eax,[ebx*4-0x3ffdde60]
c00122ff:	50                   	push   eax
c0012300:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012304:	e8 47 e4 fe ff       	call   c0000750 <strcmp>
c0012309:	83 c4 10             	add    esp,0x10
c001230c:	85 c0                	test   eax,eax
c001230e:	74 2e                	je     c001233e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012310:	43                   	inc    ebx
c0012311:	83 fb 3f             	cmp    ebx,0x3f
c0012314:	75 e0                	jne    c00122f6 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012316:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012319:	31 db                	xor    ebx,ebx
c001231b:	8d 04 9d a0 21 02 c0 	lea    eax,[ebx*4-0x3ffdde60]
c0012322:	51                   	push   ecx
c0012323:	51                   	push   ecx
c0012324:	50                   	push   eax
c0012325:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012329:	e8 22 e4 fe ff       	call   c0000750 <strcmp>
c001232e:	83 c4 10             	add    esp,0x10
c0012331:	85 c0                	test   eax,eax
c0012333:	74 09                	je     c001233e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012335:	43                   	inc    ebx
c0012336:	83 fb 3f             	cmp    ebx,0x3f
c0012339:	75 e0                	jne    c001231b <CmGetMatch(char*, char*, bool, bool*)+0x38>
c001233b:	83 cb ff             	or     ebx,0xffffffff
c001233e:	89 d8                	mov    eax,ebx
c0012340:	5a                   	pop    edx
c0012341:	5b                   	pop    ebx
c0012342:	5e                   	pop    esi
c0012343:	c3                   	ret    

c0012344 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012344:	55                   	push   ebp
c0012345:	31 c0                	xor    eax,eax
c0012347:	57                   	push   edi
c0012348:	56                   	push   esi
c0012349:	53                   	push   ebx
c001234a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001234e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012352:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012354:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012358:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c001235b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001235f:	83 fd 1f             	cmp    ebp,0x1f
c0012362:	7f 0b                	jg     c001236f <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012364:	0f b6 c2             	movzx  eax,dl
c0012367:	d3 e0                	shl    eax,cl
c0012369:	09 07                	or     DWORD PTR [edi],eax
c001236b:	b0 01                	mov    al,0x1
c001236d:	01 33                	add    DWORD PTR [ebx],esi
c001236f:	5b                   	pop    ebx
c0012370:	5e                   	pop    esi
c0012371:	5f                   	pop    edi
c0012372:	5d                   	pop    ebp
c0012373:	c3                   	ret    

c0012374 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012374:	57                   	push   edi
c0012375:	56                   	push   esi
c0012376:	53                   	push   ebx
c0012377:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001237b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001237f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012383:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012387:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012389:	7c 17                	jl     c00123a2 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c001238b:	8b 17                	mov    edx,DWORD PTR [edi]
c001238d:	b8 01 00 00 00       	mov    eax,0x1
c0012392:	d3 e0                	shl    eax,cl
c0012394:	48                   	dec    eax
c0012395:	21 d0                	and    eax,edx
c0012397:	d3 ea                	shr    edx,cl
c0012399:	89 17                	mov    DWORD PTR [edi],edx
c001239b:	29 0b                	sub    DWORD PTR [ebx],ecx
c001239d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00123a0:	eb 05                	jmp    c00123a7 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c00123a2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00123a5:	31 c0                	xor    eax,eax
c00123a7:	5b                   	pop    ebx
c00123a8:	5e                   	pop    esi
c00123a9:	5f                   	pop    edi
c00123aa:	c3                   	ret    

c00123ab <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c00123ab:	83 ec 40             	sub    esp,0x40
c00123ae:	8d 44 24 09          	lea    eax,[esp+0x9]
c00123b2:	50                   	push   eax
c00123b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00123b7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00123bb:	e8 49 fa ff ff       	call   c0011e09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00123c0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00123c4:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00123c8:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00123cc:	89 10                	mov    DWORD PTR [eax],edx
c00123ce:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00123d1:	83 c4 4c             	add    esp,0x4c
c00123d4:	c3                   	ret    

c00123d5 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00123d5:	55                   	push   ebp
c00123d6:	57                   	push   edi
c00123d7:	56                   	push   esi
c00123d8:	53                   	push   ebx
c00123d9:	83 ec 40             	sub    esp,0x40
c00123dc:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00123e0:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00123e4:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00123e8:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00123ec:	53                   	push   ebx
c00123ed:	56                   	push   esi
c00123ee:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00123f2:	e8 12 fa ff ff       	call   c0011e09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00123f7:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00123fb:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00123ff:	83 c4 0c             	add    esp,0xc
c0012402:	53                   	push   ebx
c0012403:	56                   	push   esi
c0012404:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012408:	e8 20 fb ff ff       	call   c0011f2d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001240d:	83 c4 4c             	add    esp,0x4c
c0012410:	5b                   	pop    ebx
c0012411:	5e                   	pop    esi
c0012412:	5f                   	pop    edi
c0012413:	5d                   	pop    ebp
c0012414:	c3                   	ret    

c0012415 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012415:	55                   	push   ebp
c0012416:	57                   	push   edi
c0012417:	56                   	push   esi
c0012418:	31 f6                	xor    esi,esi
c001241a:	53                   	push   ebx
c001241b:	31 db                	xor    ebx,ebx
c001241d:	83 ec 40             	sub    esp,0x40
c0012420:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012428:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012430:	6a 12                	push   0x12
c0012432:	68 ee 00 00 00       	push   0xee
c0012437:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001243b:	e8 b0 e0 fe ff       	call   c00004f0 <memset>
c0012440:	83 c4 10             	add    esp,0x10
c0012443:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012447:	6a 08                	push   0x8
c0012449:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001244d:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012451:	50                   	push   eax
c0012452:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012456:	55                   	push   ebp
c0012457:	57                   	push   edi
c0012458:	e8 e7 fe ff ff       	call   c0012344 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001245d:	83 c4 10             	add    esp,0x10
c0012460:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012464:	50                   	push   eax
c0012465:	6a 06                	push   0x6
c0012467:	55                   	push   ebp
c0012468:	57                   	push   edi
c0012469:	e8 06 ff ff ff       	call   c0012374 <CmGetShift(unsigned int*, int*, int, bool*)>
c001246e:	83 c4 10             	add    esp,0x10
c0012471:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012476:	74 07                	je     c001247f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012478:	46                   	inc    esi
c0012479:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c001247d:	eb e1                	jmp    c0012460 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c001247f:	43                   	inc    ebx
c0012480:	83 fb 12             	cmp    ebx,0x12
c0012483:	75 c2                	jne    c0012447 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012485:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012489:	31 db                	xor    ebx,ebx
c001248b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001248e:	50                   	push   eax
c001248f:	50                   	push   eax
c0012490:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0012495:	43                   	inc    ebx
c0012496:	8d 04 85 a0 21 02 c0 	lea    eax,[eax*4-0x3ffdde60]
c001249d:	50                   	push   eax
c001249e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00124a2:	e8 99 e3 fe ff       	call   c0000840 <strcat>
c00124a7:	83 c4 10             	add    esp,0x10
c00124aa:	83 fb 18             	cmp    ebx,0x18
c00124ad:	75 df                	jne    c001248e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c00124af:	83 c4 3c             	add    esp,0x3c
c00124b2:	31 c0                	xor    eax,eax
c00124b4:	5b                   	pop    ebx
c00124b5:	5e                   	pop    esi
c00124b6:	5f                   	pop    edi
c00124b7:	5d                   	pop    ebp
c00124b8:	c3                   	ret    

c00124b9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c00124b9:	83 ec 40             	sub    esp,0x40
c00124bc:	8d 44 24 09          	lea    eax,[esp+0x9]
c00124c0:	50                   	push   eax
c00124c1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124c5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00124c9:	e8 3b f9 ff ff       	call   c0011e09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00124ce:	58                   	pop    eax
c00124cf:	5a                   	pop    edx
c00124d0:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00124d4:	8d 44 24 15          	lea    eax,[esp+0x15]
c00124d8:	50                   	push   eax
c00124d9:	e8 37 ff ff ff       	call   c0012415 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00124de:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00124e3:	83 c4 4c             	add    esp,0x4c
c00124e6:	c3                   	ret    

c00124e7 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00124e7:	55                   	push   ebp
c00124e8:	57                   	push   edi
c00124e9:	56                   	push   esi
c00124ea:	53                   	push   ebx
c00124eb:	31 db                	xor    ebx,ebx
c00124ed:	83 ec 70             	sub    esp,0x70
c00124f0:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00124f7:	6a 30                	push   0x30
c00124f9:	6a 00                	push   0x0
c00124fb:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00124ff:	56                   	push   esi
c0012500:	e8 eb df fe ff       	call   c00004f0 <memset>
c0012505:	83 c4 10             	add    esp,0x10
c0012508:	83 ec 0c             	sub    esp,0xc
c001250b:	57                   	push   edi
c001250c:	e8 5f e0 fe ff       	call   c0000570 <strlen>
c0012511:	83 c4 10             	add    esp,0x10
c0012514:	39 d8                	cmp    eax,ebx
c0012516:	76 16                	jbe    c001252e <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012518:	83 ec 0c             	sub    esp,0xc
c001251b:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c001251f:	50                   	push   eax
c0012520:	e8 0b e4 fe ff       	call   c0000930 <toupper>
c0012525:	83 c4 10             	add    esp,0x10
c0012528:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001252b:	43                   	inc    ebx
c001252c:	eb da                	jmp    c0012508 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c001252e:	31 f6                	xor    esi,esi
c0012530:	52                   	push   edx
c0012531:	31 ff                	xor    edi,edi
c0012533:	6a 18                	push   0x18
c0012535:	6a 3f                	push   0x3f
c0012537:	8d 44 24 24          	lea    eax,[esp+0x24]
c001253b:	50                   	push   eax
c001253c:	e8 af df fe ff       	call   c00004f0 <memset>
c0012541:	83 c4 10             	add    esp,0x10
c0012544:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0012548:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c001254c:	84 c0                	test   al,al
c001254e:	0f 84 b0 00 00 00    	je     c0012604 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0012554:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012558:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c001255d:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0012561:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0012566:	8d 6e 01             	lea    ebp,[esi+0x1]
c0012569:	83 ec 0c             	sub    esp,0xc
c001256c:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012570:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012574:	53                   	push   ebx
c0012575:	e8 f6 df fe ff       	call   c0000570 <strlen>
c001257a:	83 c4 10             	add    esp,0x10
c001257d:	85 c0                	test   eax,eax
c001257f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012583:	74 0b                	je     c0012590 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012585:	50                   	push   eax
c0012586:	6a 01                	push   0x1
c0012588:	53                   	push   ebx
c0012589:	8d 44 24 20          	lea    eax,[esp+0x20]
c001258d:	50                   	push   eax
c001258e:	eb 0a                	jmp    c001259a <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012590:	50                   	push   eax
c0012591:	6a 00                	push   0x0
c0012593:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012597:	50                   	push   eax
c0012598:	6a 00                	push   0x0
c001259a:	e8 44 fd ff ff       	call   c00122e3 <CmGetMatch(char*, char*, bool, bool*)>
c001259f:	83 c4 10             	add    esp,0x10
c00125a2:	83 f8 ff             	cmp    eax,0xffffffff
c00125a5:	75 1a                	jne    c00125c1 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00125a7:	83 ec 0c             	sub    esp,0xc
c00125aa:	68 71 0d 02 c0       	push   0xc0020d71
c00125af:	e8 ab e2 ff ff       	call   c001085f <KePanic(char const*)>
c00125b4:	83 c4 10             	add    esp,0x10
c00125b7:	b8 02 00 00 00       	mov    eax,0x2
c00125bc:	e9 bc 00 00 00       	jmp    c001267d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00125c1:	83 ff 18             	cmp    edi,0x18
c00125c4:	75 1a                	jne    c00125e0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00125c6:	83 ec 0c             	sub    esp,0xc
c00125c9:	68 86 0d 02 c0       	push   0xc0020d86
c00125ce:	e8 8c e2 ff ff       	call   c001085f <KePanic(char const*)>
c00125d3:	83 c4 10             	add    esp,0x10
c00125d6:	b8 01 00 00 00       	mov    eax,0x1
c00125db:	e9 9d 00 00 00       	jmp    c001267d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00125e0:	47                   	inc    edi
c00125e1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00125e6:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00125ea:	74 02                	je     c00125ee <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c00125ec:	89 ee                	mov    esi,ebp
c00125ee:	83 ec 0c             	sub    esp,0xc
c00125f1:	53                   	push   ebx
c00125f2:	e8 79 df fe ff       	call   c0000570 <strlen>
c00125f7:	83 c4 10             	add    esp,0x10
c00125fa:	85 c0                	test   eax,eax
c00125fc:	74 06                	je     c0012604 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00125fe:	46                   	inc    esi
c00125ff:	e9 40 ff ff ff       	jmp    c0012544 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0012604:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001260c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012614:	31 f6                	xor    esi,esi
c0012616:	50                   	push   eax
c0012617:	31 ff                	xor    edi,edi
c0012619:	6a 12                	push   0x12
c001261b:	68 ee 00 00 00       	push   0xee
c0012620:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0012627:	e8 c4 de fe ff       	call   c00004f0 <memset>
c001262c:	83 c4 10             	add    esp,0x10
c001262f:	83 fe 17             	cmp    esi,0x17
c0012632:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0012636:	7e 26                	jle    c001265e <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0012638:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001263c:	50                   	push   eax
c001263d:	6a 08                	push   0x8
c001263f:	55                   	push   ebp
c0012640:	53                   	push   ebx
c0012641:	e8 2e fd ff ff       	call   c0012374 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012646:	83 c4 10             	add    esp,0x10
c0012649:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001264e:	74 26                	je     c0012676 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0012650:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012657:	4e                   	dec    esi
c0012658:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c001265b:	47                   	inc    edi
c001265c:	eb 1c                	jmp    c001267a <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c001265e:	6a 06                	push   0x6
c0012660:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0012665:	50                   	push   eax
c0012666:	55                   	push   ebp
c0012667:	53                   	push   ebx
c0012668:	e8 d7 fc ff ff       	call   c0012344 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001266d:	83 c4 10             	add    esp,0x10
c0012670:	84 c0                	test   al,al
c0012672:	75 06                	jne    c001267a <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0012674:	eb c2                	jmp    c0012638 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0012676:	31 c0                	xor    eax,eax
c0012678:	eb 03                	jmp    c001267d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001267a:	46                   	inc    esi
c001267b:	eb b2                	jmp    c001262f <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c001267d:	83 c4 6c             	add    esp,0x6c
c0012680:	5b                   	pop    ebx
c0012681:	5e                   	pop    esi
c0012682:	5f                   	pop    edi
c0012683:	5d                   	pop    ebp
c0012684:	c3                   	ret    

c0012685 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0012685:	53                   	push   ebx
c0012686:	83 ec 3c             	sub    esp,0x3c
c0012689:	6a 2b                	push   0x2b
c001268b:	6a 00                	push   0x0
c001268d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012691:	53                   	push   ebx
c0012692:	e8 59 de fe ff       	call   c00004f0 <memset>
c0012697:	58                   	pop    eax
c0012698:	5a                   	pop    edx
c0012699:	8d 44 24 11          	lea    eax,[esp+0x11]
c001269d:	50                   	push   eax
c001269e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00126a2:	e8 40 fe ff ff       	call   c00124e7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00126a7:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00126ac:	83 c4 0c             	add    esp,0xc
c00126af:	6a 15                	push   0x15
c00126b1:	6a 00                	push   0x0
c00126b3:	8d 44 24 27          	lea    eax,[esp+0x27]
c00126b7:	50                   	push   eax
c00126b8:	e8 33 de fe ff       	call   c00004f0 <memset>
c00126bd:	53                   	push   ebx
c00126be:	6a 00                	push   0x0
c00126c0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00126c8:	e8 e6 f9 ff ff       	call   c00120b3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00126cd:	83 c4 58             	add    esp,0x58
c00126d0:	5b                   	pop    ebx
c00126d1:	c3                   	ret    

c00126d2 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00126d2:	56                   	push   esi
c00126d3:	53                   	push   ebx
c00126d4:	83 ec 48             	sub    esp,0x48
c00126d7:	6a 12                	push   0x12
c00126d9:	68 ff 00 00 00       	push   0xff
c00126de:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00126e2:	56                   	push   esi
c00126e3:	e8 08 de fe ff       	call   c00004f0 <memset>
c00126e8:	5a                   	pop    edx
c00126e9:	59                   	pop    ecx
c00126ea:	56                   	push   esi
c00126eb:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00126ef:	e8 f3 fd ff ff       	call   c00124e7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00126f4:	83 c4 10             	add    esp,0x10
c00126f7:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00126fb:	85 db                	test   ebx,ebx
c00126fd:	74 42                	je     c0012741 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00126ff:	50                   	push   eax
c0012700:	8d 44 24 19          	lea    eax,[esp+0x19]
c0012704:	50                   	push   eax
c0012705:	53                   	push   ebx
c0012706:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001270a:	e8 fa f6 ff ff       	call   c0011e09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001270f:	83 c4 0c             	add    esp,0xc
c0012712:	6a 12                	push   0x12
c0012714:	8d 44 24 21          	lea    eax,[esp+0x21]
c0012718:	50                   	push   eax
c0012719:	56                   	push   esi
c001271a:	e8 61 dc fe ff       	call   c0000380 <memcmp>
c001271f:	83 c4 10             	add    esp,0x10
c0012722:	85 c0                	test   eax,eax
c0012724:	74 1e                	je     c0012744 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0012726:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001272b:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0012730:	c1 e3 08             	shl    ebx,0x8
c0012733:	09 d8                	or     eax,ebx
c0012735:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001273a:	c1 e3 10             	shl    ebx,0x10
c001273d:	09 c3                	or     ebx,eax
c001273f:	eb ba                	jmp    c00126fb <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0012741:	83 cb ff             	or     ebx,0xffffffff
c0012744:	89 d8                	mov    eax,ebx
c0012746:	83 c4 44             	add    esp,0x44
c0012749:	5b                   	pop    ebx
c001274a:	5e                   	pop    esi
c001274b:	c3                   	ret    

c001274c <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c001274c:	57                   	push   edi
c001274d:	56                   	push   esi
c001274e:	53                   	push   ebx
c001274f:	83 ec 34             	sub    esp,0x34
c0012752:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0012756:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001275a:	6a 2b                	push   0x2b
c001275c:	6a 00                	push   0x0
c001275e:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012762:	53                   	push   ebx
c0012763:	e8 88 dd fe ff       	call   c00004f0 <memset>
c0012768:	58                   	pop    eax
c0012769:	5a                   	pop    edx
c001276a:	8d 44 24 11          	lea    eax,[esp+0x11]
c001276e:	50                   	push   eax
c001276f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012773:	e8 6f fd ff ff       	call   c00124e7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012778:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001277c:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0012780:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0012784:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012788:	53                   	push   ebx
c0012789:	6a 00                	push   0x0
c001278b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001278f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012793:	e8 1b f9 ff ff       	call   c00120b3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012798:	83 c4 50             	add    esp,0x50
c001279b:	5b                   	pop    ebx
c001279c:	5e                   	pop    esi
c001279d:	5f                   	pop    edi
c001279e:	c3                   	ret    

c001279f <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001279f:	55                   	push   ebp
c00127a0:	57                   	push   edi
c00127a1:	56                   	push   esi
c00127a2:	53                   	push   ebx
c00127a3:	83 ec 40             	sub    esp,0x40
c00127a6:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00127aa:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00127ae:	6a 2b                	push   0x2b
c00127b0:	6a 00                	push   0x0
c00127b2:	8d 74 24 11          	lea    esi,[esp+0x11]
c00127b6:	56                   	push   esi
c00127b7:	e8 34 dd fe ff       	call   c00004f0 <memset>
c00127bc:	5f                   	pop    edi
c00127bd:	89 ef                	mov    edi,ebp
c00127bf:	58                   	pop    eax
c00127c0:	8d 44 24 11          	lea    eax,[esp+0x11]
c00127c4:	50                   	push   eax
c00127c5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00127c9:	e8 19 fd ff ff       	call   c00124e7 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00127ce:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00127d3:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00127d8:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00127dd:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00127e2:	83 c4 10             	add    esp,0x10
c00127e5:	85 ed                	test   ebp,ebp
c00127e7:	74 14                	je     c00127fd <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00127e9:	51                   	push   ecx
c00127ea:	51                   	push   ecx
c00127eb:	57                   	push   edi
c00127ec:	53                   	push   ebx
c00127ed:	e8 09 f7 ff ff       	call   c0011efb <CmGetNext(Reghive_Tag*, int)>
c00127f2:	83 c4 10             	add    esp,0x10
c00127f5:	85 c0                	test   eax,eax
c00127f7:	74 04                	je     c00127fd <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00127f9:	89 c7                	mov    edi,eax
c00127fb:	eb e8                	jmp    c00127e5 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00127fd:	56                   	push   esi
c00127fe:	6a 00                	push   0x0
c0012800:	57                   	push   edi
c0012801:	53                   	push   ebx
c0012802:	e8 ac f8 ff ff       	call   c00120b3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012807:	83 c4 0c             	add    esp,0xc
c001280a:	89 c7                	mov    edi,eax
c001280c:	56                   	push   esi
c001280d:	50                   	push   eax
c001280e:	53                   	push   ebx
c001280f:	e8 f5 f5 ff ff       	call   c0011e09 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012814:	58                   	pop    eax
c0012815:	5a                   	pop    edx
c0012816:	6a 6c                	push   0x6c
c0012818:	6a 00                	push   0x0
c001281a:	6a 00                	push   0x0
c001281c:	68 97 0d 02 c0       	push   0xc0020d97
c0012821:	57                   	push   edi
c0012822:	53                   	push   ebx
c0012823:	e8 24 ff ff ff       	call   c001274c <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0012828:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001282c:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0012830:	c1 e8 10             	shr    eax,0x10
c0012833:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0012837:	83 c4 1c             	add    esp,0x1c
c001283a:	56                   	push   esi
c001283b:	57                   	push   edi
c001283c:	53                   	push   ebx
c001283d:	e8 eb f6 ff ff       	call   c0011f2d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012842:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0012847:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001284c:	c1 e0 08             	shl    eax,0x8
c001284f:	09 c2                	or     edx,eax
c0012851:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0012856:	83 c4 4c             	add    esp,0x4c
c0012859:	c1 e0 10             	shl    eax,0x10
c001285c:	5b                   	pop    ebx
c001285d:	09 d0                	or     eax,edx
c001285f:	5e                   	pop    esi
c0012860:	5f                   	pop    edi
c0012861:	5d                   	pop    ebp
c0012862:	c3                   	ret    

c0012863 <zStrtok(char*, char const*)>:
c0012863:	55                   	push   ebp
c0012864:	57                   	push   edi
c0012865:	56                   	push   esi
c0012866:	53                   	push   ebx
c0012867:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001286b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001286f:	85 db                	test   ebx,ebx
c0012871:	74 2f                	je     c00128a2 <zStrtok(char*, char const*)+0x3f>
c0012873:	85 c0                	test   eax,eax
c0012875:	75 09                	jne    c0012880 <zStrtok(char*, char const*)+0x1d>
c0012877:	a1 90 79 02 c0       	mov    eax,ds:0xc0027990
c001287c:	85 c0                	test   eax,eax
c001287e:	74 50                	je     c00128d0 <zStrtok(char*, char const*)+0x6d>
c0012880:	31 c9                	xor    ecx,ecx
c0012882:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0012886:	74 03                	je     c001288b <zStrtok(char*, char const*)+0x28>
c0012888:	41                   	inc    ecx
c0012889:	eb f7                	jmp    c0012882 <zStrtok(char*, char const*)+0x1f>
c001288b:	31 d2                	xor    edx,edx
c001288d:	39 ca                	cmp    edx,ecx
c001288f:	74 15                	je     c00128a6 <zStrtok(char*, char const*)+0x43>
c0012891:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0012895:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0012898:	8d 3c 10             	lea    edi,[eax+edx*1]
c001289b:	39 ee                	cmp    esi,ebp
c001289d:	74 13                	je     c00128b2 <zStrtok(char*, char const*)+0x4f>
c001289f:	42                   	inc    edx
c00128a0:	eb eb                	jmp    c001288d <zStrtok(char*, char const*)+0x2a>
c00128a2:	31 c0                	xor    eax,eax
c00128a4:	eb 2a                	jmp    c00128d0 <zStrtok(char*, char const*)+0x6d>
c00128a6:	c7 05 90 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027990,0x0
c00128b0:	eb 1e                	jmp    c00128d0 <zStrtok(char*, char const*)+0x6d>
c00128b2:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00128b5:	39 ce                	cmp    esi,ecx
c00128b7:	75 0a                	jne    c00128c3 <zStrtok(char*, char const*)+0x60>
c00128b9:	40                   	inc    eax
c00128ba:	a3 90 79 02 c0       	mov    ds:0xc0027990,eax
c00128bf:	89 d8                	mov    eax,ebx
c00128c1:	eb 0d                	jmp    c00128d0 <zStrtok(char*, char const*)+0x6d>
c00128c3:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00128c7:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00128ca:	89 15 90 79 02 c0    	mov    DWORD PTR ds:0xc0027990,edx
c00128d0:	5b                   	pop    ebx
c00128d1:	5e                   	pop    esi
c00128d2:	5f                   	pop    edi
c00128d3:	5d                   	pop    ebp
c00128d4:	c3                   	ret    

c00128d5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00128d5:	57                   	push   edi
c00128d6:	56                   	push   esi
c00128d7:	53                   	push   ebx
c00128d8:	81 ec 08 01 00 00    	sub    esp,0x108
c00128de:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00128e5:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00128ec:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00128f0:	53                   	push   ebx
c00128f1:	e8 4a dd fe ff       	call   c0000640 <strcpy>
c00128f6:	59                   	pop    ecx
c00128f7:	5e                   	pop    esi
c00128f8:	68 fb 10 02 c0       	push   0xc00210fb
c00128fd:	53                   	push   ebx
c00128fe:	bb 01 00 00 00       	mov    ebx,0x1
c0012903:	e8 5b ff ff ff       	call   c0012863 <zStrtok(char*, char const*)>
c0012908:	83 c4 10             	add    esp,0x10
c001290b:	85 c0                	test   eax,eax
c001290d:	74 3b                	je     c001294a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001290f:	52                   	push   edx
c0012910:	50                   	push   eax
c0012911:	6a 01                	push   0x1
c0012913:	57                   	push   edi
c0012914:	e8 b9 fd ff ff       	call   c00126d2 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0012919:	59                   	pop    ecx
c001291a:	89 c3                	mov    ebx,eax
c001291c:	5e                   	pop    esi
c001291d:	68 fb 10 02 c0       	push   0xc00210fb
c0012922:	6a 00                	push   0x0
c0012924:	e8 3a ff ff ff       	call   c0012863 <zStrtok(char*, char const*)>
c0012929:	83 c4 10             	add    esp,0x10
c001292c:	89 c6                	mov    esi,eax
c001292e:	85 c0                	test   eax,eax
c0012930:	74 18                	je     c001294a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012932:	52                   	push   edx
c0012933:	52                   	push   edx
c0012934:	53                   	push   ebx
c0012935:	57                   	push   edi
c0012936:	e8 81 f5 ff ff       	call   c0011ebc <CmEnterDirectory(Reghive_Tag*, int)>
c001293b:	83 c4 10             	add    esp,0x10
c001293e:	89 c3                	mov    ebx,eax
c0012940:	83 f8 ff             	cmp    eax,0xffffffff
c0012943:	74 05                	je     c001294a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012945:	50                   	push   eax
c0012946:	56                   	push   esi
c0012947:	53                   	push   ebx
c0012948:	eb c9                	jmp    c0012913 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c001294a:	81 c4 00 01 00 00    	add    esp,0x100
c0012950:	89 d8                	mov    eax,ebx
c0012952:	5b                   	pop    ebx
c0012953:	5e                   	pop    esi
c0012954:	5f                   	pop    edi
c0012955:	c3                   	ret    

c0012956 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0012956:	55                   	push   ebp
c0012957:	57                   	push   edi
c0012958:	56                   	push   esi
c0012959:	53                   	push   ebx
c001295a:	83 ec 5c             	sub    esp,0x5c
c001295d:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0012961:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0012965:	85 db                	test   ebx,ebx
c0012967:	0f 8e 84 00 00 00    	jle    c00129f1 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c001296d:	31 ed                	xor    ebp,ebp
c001296f:	57                   	push   edi
c0012970:	6a 32                	push   0x32
c0012972:	6a 00                	push   0x0
c0012974:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0012978:	57                   	push   edi
c0012979:	e8 72 db fe ff       	call   c00004f0 <memset>
c001297e:	83 c4 0c             	add    esp,0xc
c0012981:	57                   	push   edi
c0012982:	53                   	push   ebx
c0012983:	56                   	push   esi
c0012984:	e8 30 fb ff ff       	call   c00124b9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0012989:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001298d:	83 c4 10             	add    esp,0x10
c0012990:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0012994:	7d 13                	jge    c00129a9 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0012996:	83 ec 0c             	sub    esp,0xc
c0012999:	45                   	inc    ebp
c001299a:	68 68 14 02 c0       	push   0xc0021468
c001299f:	e8 de 7f ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c00129a4:	83 c4 10             	add    esp,0x10
c00129a7:	eb e7                	jmp    c0012990 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00129a9:	51                   	push   ecx
c00129aa:	57                   	push   edi
c00129ab:	53                   	push   ebx
c00129ac:	68 9d 0d 02 c0       	push   0xc0020d9d
c00129b1:	e8 cc 7f ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c00129b6:	83 c4 10             	add    esp,0x10
c00129b9:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00129be:	75 1e                	jne    c00129de <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00129c0:	52                   	push   edx
c00129c1:	52                   	push   edx
c00129c2:	53                   	push   ebx
c00129c3:	56                   	push   esi
c00129c4:	e8 f3 f4 ff ff       	call   c0011ebc <CmEnterDirectory(Reghive_Tag*, int)>
c00129c9:	83 c4 0c             	add    esp,0xc
c00129cc:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00129d0:	8d 51 04             	lea    edx,[ecx+0x4]
c00129d3:	52                   	push   edx
c00129d4:	50                   	push   eax
c00129d5:	56                   	push   esi
c00129d6:	e8 7b ff ff ff       	call   c0012956 <CmDisplayTree(Reghive_Tag*, int, int)>
c00129db:	83 c4 10             	add    esp,0x10
c00129de:	50                   	push   eax
c00129df:	50                   	push   eax
c00129e0:	53                   	push   ebx
c00129e1:	56                   	push   esi
c00129e2:	e8 14 f5 ff ff       	call   c0011efb <CmGetNext(Reghive_Tag*, int)>
c00129e7:	83 c4 10             	add    esp,0x10
c00129ea:	89 c3                	mov    ebx,eax
c00129ec:	e9 74 ff ff ff       	jmp    c0012965 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00129f1:	83 c4 5c             	add    esp,0x5c
c00129f4:	5b                   	pop    ebx
c00129f5:	5e                   	pop    esi
c00129f6:	5f                   	pop    edi
c00129f7:	5d                   	pop    ebp
c00129f8:	c3                   	ret    

c00129f9 <CmSplitFinalSlashInPlace(char*)>:
c00129f9:	53                   	push   ebx
c00129fa:	83 ec 14             	sub    esp,0x14
c00129fd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012a01:	53                   	push   ebx
c0012a02:	e8 69 db fe ff       	call   c0000570 <strlen>
c0012a07:	83 c4 10             	add    esp,0x10
c0012a0a:	48                   	dec    eax
c0012a0b:	85 c0                	test   eax,eax
c0012a0d:	74 15                	je     c0012a24 <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012a0f:	8d 14 03             	lea    edx,[ebx+eax*1]
c0012a12:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012a16:	75 09                	jne    c0012a21 <CmSplitFinalSlashInPlace(char*)+0x28>
c0012a18:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012a1b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012a1f:	eb 05                	jmp    c0012a26 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0012a21:	48                   	dec    eax
c0012a22:	eb e7                	jmp    c0012a0b <CmSplitFinalSlashInPlace(char*)+0x12>
c0012a24:	31 c0                	xor    eax,eax
c0012a26:	83 c4 08             	add    esp,0x8
c0012a29:	5b                   	pop    ebx
c0012a2a:	c3                   	ret    

c0012a2b <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012a2b:	55                   	push   ebp
c0012a2c:	57                   	push   edi
c0012a2d:	56                   	push   esi
c0012a2e:	53                   	push   ebx
c0012a2f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012a35:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0012a3c:	8a 13                	mov    dl,BYTE PTR [ebx]
c0012a3e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012a41:	80 fa 40             	cmp    dl,0x40
c0012a44:	75 1c                	jne    c0012a62 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0012a46:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0012a49:	85 c9                	test   ecx,ecx
c0012a4b:	0f 84 09 01 00 00    	je     c0012b5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012a51:	8d 43 01             	lea    eax,[ebx+0x1]
c0012a54:	83 f9 3a             	cmp    ecx,0x3a
c0012a57:	74 04                	je     c0012a5d <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0012a59:	89 c3                	mov    ebx,eax
c0012a5b:	eb e9                	jmp    c0012a46 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0012a5d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012a60:	89 c3                	mov    ebx,eax
c0012a62:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0012a66:	50                   	push   eax
c0012a67:	6a 40                	push   0x40
c0012a69:	6a 00                	push   0x0
c0012a6b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012a6f:	50                   	push   eax
c0012a70:	e8 7b da fe ff       	call   c00004f0 <memset>
c0012a75:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012a7c:	31 c0                	xor    eax,eax
c0012a7e:	83 c4 10             	add    esp,0x10
c0012a81:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0012a86:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0012a89:	89 d1                	mov    ecx,edx
c0012a8b:	85 d2                	test   edx,edx
c0012a8d:	0f 84 c7 00 00 00    	je     c0012b5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012a93:	3d c7 00 00 00       	cmp    eax,0xc7
c0012a98:	0f 8f bc 00 00 00    	jg     c0012b5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012a9e:	83 fa 0a             	cmp    edx,0xa
c0012aa1:	0f 85 a4 00 00 00    	jne    c0012b4b <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0012aa7:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0012aac:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0012ab1:	89 c8                	mov    eax,ecx
c0012ab3:	a8 df                	test   al,0xdf
c0012ab5:	0f 94 c2             	sete   dl
c0012ab8:	83 f9 23             	cmp    ecx,0x23
c0012abb:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0012ac0:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0012ac4:	80 e2 01             	and    dl,0x1
c0012ac7:	75 4a                	jne    c0012b13 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012ac9:	83 e8 09             	sub    eax,0x9
c0012acc:	3c 01                	cmp    al,0x1
c0012ace:	76 43                	jbe    c0012b13 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012ad0:	83 f9 5b             	cmp    ecx,0x5b
c0012ad3:	75 42                	jne    c0012b17 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0012ad5:	83 fe 40             	cmp    esi,0x40
c0012ad8:	75 39                	jne    c0012b13 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012ada:	83 ec 0c             	sub    esp,0xc
c0012add:	8d 54 24 65          	lea    edx,[esp+0x65]
c0012ae1:	52                   	push   edx
c0012ae2:	e8 89 da fe ff       	call   c0000570 <strlen>
c0012ae7:	83 c4 10             	add    esp,0x10
c0012aea:	83 f8 3f             	cmp    eax,0x3f
c0012aed:	77 6b                	ja     c0012b5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012aef:	50                   	push   eax
c0012af0:	50                   	push   eax
c0012af1:	8d 54 24 61          	lea    edx,[esp+0x61]
c0012af5:	52                   	push   edx
c0012af6:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012afa:	52                   	push   edx
c0012afb:	e8 40 db fe ff       	call   c0000640 <strcpy>
c0012b00:	58                   	pop    eax
c0012b01:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012b05:	52                   	push   edx
c0012b06:	e8 65 da fe ff       	call   c0000570 <strlen>
c0012b0b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012b10:	83 c4 10             	add    esp,0x10
c0012b13:	31 d2                	xor    edx,edx
c0012b15:	eb 3b                	jmp    c0012b52 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0012b17:	83 fe 40             	cmp    esi,0x40
c0012b1a:	74 06                	je     c0012b22 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0012b1c:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012b20:	eb 20                	jmp    c0012b42 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0012b22:	50                   	push   eax
c0012b23:	50                   	push   eax
c0012b24:	55                   	push   ebp
c0012b25:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012b29:	50                   	push   eax
c0012b2a:	e8 21 dc fe ff       	call   c0000750 <strcmp>
c0012b2f:	83 c4 10             	add    esp,0x10
c0012b32:	85 c0                	test   eax,eax
c0012b34:	75 dd                	jne    c0012b13 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012b36:	eb e4                	jmp    c0012b1c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0012b38:	8d 50 01             	lea    edx,[eax+0x1]
c0012b3b:	83 f9 3d             	cmp    ecx,0x3d
c0012b3e:	74 1e                	je     c0012b5e <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0012b40:	89 d0                	mov    eax,edx
c0012b42:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0012b45:	85 c9                	test   ecx,ecx
c0012b47:	75 ef                	jne    c0012b38 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0012b49:	eb 0f                	jmp    c0012b5a <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0012b4b:	8d 50 01             	lea    edx,[eax+0x1]
c0012b4e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012b52:	47                   	inc    edi
c0012b53:	89 d0                	mov    eax,edx
c0012b55:	e9 2c ff ff ff       	jmp    c0012a86 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0012b5a:	31 c0                	xor    eax,eax
c0012b5c:	eb 33                	jmp    c0012b91 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0012b5e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012b62:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012b65:	50                   	push   eax
c0012b66:	50                   	push   eax
c0012b67:	8d 44 24 60          	lea    eax,[esp+0x60]
c0012b6b:	50                   	push   eax
c0012b6c:	53                   	push   ebx
c0012b6d:	e8 de db fe ff       	call   c0000750 <strcmp>
c0012b72:	83 c4 10             	add    esp,0x10
c0012b75:	85 c0                	test   eax,eax
c0012b77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b7b:	75 96                	jne    c0012b13 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0012b7d:	51                   	push   ecx
c0012b7e:	51                   	push   ecx
c0012b7f:	52                   	push   edx
c0012b80:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012b87:	e8 b4 da fe ff       	call   c0000640 <strcpy>
c0012b8c:	83 c4 10             	add    esp,0x10
c0012b8f:	b0 01                	mov    al,0x1
c0012b91:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012b97:	5b                   	pop    ebx
c0012b98:	5e                   	pop    esi
c0012b99:	5f                   	pop    edi
c0012b9a:	5d                   	pop    ebp
c0012b9b:	c3                   	ret    

c0012b9c <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0012b9c:	57                   	push   edi
c0012b9d:	56                   	push   esi
c0012b9e:	53                   	push   ebx
c0012b9f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0012ba5:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0012bac:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0012bb3:	53                   	push   ebx
c0012bb4:	e8 b7 d9 fe ff       	call   c0000570 <strlen>
c0012bb9:	89 34 24             	mov    DWORD PTR [esp],esi
c0012bbc:	89 c7                	mov    edi,eax
c0012bbe:	e8 ad d9 fe ff       	call   c0000570 <strlen>
c0012bc3:	83 c4 10             	add    esp,0x10
c0012bc6:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0012bca:	3d ff 00 00 00       	cmp    eax,0xff
c0012bcf:	0f 87 d3 00 00 00    	ja     c0012ca8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012bd5:	57                   	push   edi
c0012bd6:	57                   	push   edi
c0012bd7:	56                   	push   esi
c0012bd8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012bdc:	56                   	push   esi
c0012bdd:	e8 5e da fe ff       	call   c0000640 <strcpy>
c0012be2:	58                   	pop    eax
c0012be3:	5a                   	pop    edx
c0012be4:	68 fb 10 02 c0       	push   0xc00210fb
c0012be9:	56                   	push   esi
c0012bea:	e8 51 dc fe ff       	call   c0000840 <strcat>
c0012bef:	59                   	pop    ecx
c0012bf0:	5f                   	pop    edi
c0012bf1:	53                   	push   ebx
c0012bf2:	56                   	push   esi
c0012bf3:	e8 48 dc fe ff       	call   c0000840 <strcat>
c0012bf8:	58                   	pop    eax
c0012bf9:	5a                   	pop    edx
c0012bfa:	68 a7 0d 02 c0       	push   0xc0020da7
c0012bff:	56                   	push   esi
c0012c00:	e8 3b dc fe ff       	call   c0000840 <strcat>
c0012c05:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012c0c:	e8 89 4e ff ff       	call   c0007a9a <malloc>
c0012c11:	83 c4 0c             	add    esp,0xc
c0012c14:	89 c3                	mov    ebx,eax
c0012c16:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0012c1c:	56                   	push   esi
c0012c1d:	50                   	push   eax
c0012c1e:	e8 e1 82 ff ff       	call   c000af04 <File::File(char const*, Process*)>
c0012c23:	83 c4 10             	add    esp,0x10
c0012c26:	85 db                	test   ebx,ebx
c0012c28:	74 7e                	je     c0012ca8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0012c2a:	51                   	push   ecx
c0012c2b:	51                   	push   ecx
c0012c2c:	6a 01                	push   0x1
c0012c2e:	53                   	push   ebx
c0012c2f:	e8 8c 83 ff ff       	call   c000afc0 <File::open(FileOpenMode)>
c0012c34:	83 c4 10             	add    esp,0x10
c0012c37:	85 c0                	test   eax,eax
c0012c39:	74 08                	je     c0012c43 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0012c3b:	83 ec 0c             	sub    esp,0xc
c0012c3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c40:	53                   	push   ebx
c0012c41:	eb 5f                	jmp    c0012ca2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012c43:	52                   	push   edx
c0012c44:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012c48:	50                   	push   eax
c0012c49:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012c4d:	50                   	push   eax
c0012c4e:	53                   	push   ebx
c0012c4f:	e8 18 86 ff ff       	call   c000b26c <File::stat(unsigned long long*, bool*)>
c0012c54:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012c58:	83 c4 10             	add    esp,0x10
c0012c5b:	89 c1                	mov    ecx,eax
c0012c5d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012c61:	74 31                	je     c0012c94 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012c63:	83 ec 0c             	sub    esp,0xc
c0012c66:	50                   	push   eax
c0012c67:	e8 2e 4e ff ff       	call   c0007a9a <malloc>
c0012c6c:	89 c6                	mov    esi,eax
c0012c6e:	58                   	pop    eax
c0012c6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c71:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012c75:	52                   	push   edx
c0012c76:	56                   	push   esi
c0012c77:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012c7b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012c7f:	53                   	push   ebx
c0012c80:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012c83:	83 c4 20             	add    esp,0x20
c0012c86:	85 c0                	test   eax,eax
c0012c88:	75 0a                	jne    c0012c94 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012c8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c8e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012c92:	74 18                	je     c0012cac <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012c94:	83 ec 0c             	sub    esp,0xc
c0012c97:	53                   	push   ebx
c0012c98:	e8 81 83 ff ff       	call   c000b01e <File::close()>
c0012c9d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c9f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012ca2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ca5:	83 c4 10             	add    esp,0x10
c0012ca8:	31 c0                	xor    eax,eax
c0012caa:	eb 3b                	jmp    c0012ce7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0012cac:	83 ec 0c             	sub    esp,0xc
c0012caf:	53                   	push   ebx
c0012cb0:	e8 69 83 ff ff       	call   c000b01e <File::close()>
c0012cb5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cb7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012cba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012cbd:	83 c4 0c             	add    esp,0xc
c0012cc0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012cc7:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0012cce:	56                   	push   esi
c0012ccf:	e8 57 fd ff ff       	call   c0012a2b <Reg::findLineFromLoadedData(char*, char*, char*)>
c0012cd4:	89 34 24             	mov    DWORD PTR [esp],esi
c0012cd7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012cdb:	e8 ca 4d ff ff       	call   c0007aaa <free>
c0012ce0:	83 c4 10             	add    esp,0x10
c0012ce3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012ce7:	81 c4 20 01 00 00    	add    esp,0x120
c0012ced:	5b                   	pop    ebx
c0012cee:	5e                   	pop    esi
c0012cef:	5f                   	pop    edi
c0012cf0:	c3                   	ret    

c0012cf1 <Reg::getLine(char*, char*, char*)>:
c0012cf1:	57                   	push   edi
c0012cf2:	56                   	push   esi
c0012cf3:	53                   	push   ebx
c0012cf4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012cf8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012cfc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012d00:	57                   	push   edi
c0012d01:	56                   	push   esi
c0012d02:	53                   	push   ebx
c0012d03:	68 ac 0d 02 c0       	push   0xc0020dac
c0012d08:	e8 8f fe ff ff       	call   c0012b9c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012d0d:	83 c4 10             	add    esp,0x10
c0012d10:	84 c0                	test   al,al
c0012d12:	75 10                	jne    c0012d24 <Reg::getLine(char*, char*, char*)+0x33>
c0012d14:	57                   	push   edi
c0012d15:	56                   	push   esi
c0012d16:	53                   	push   ebx
c0012d17:	68 d1 0d 02 c0       	push   0xc0020dd1
c0012d1c:	e8 7b fe ff ff       	call   c0012b9c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012d21:	83 c4 10             	add    esp,0x10
c0012d24:	5b                   	pop    ebx
c0012d25:	5e                   	pop    esi
c0012d26:	5f                   	pop    edi
c0012d27:	c3                   	ret    

c0012d28 <Reg::readInt(char*, char*, int*)>:
c0012d28:	55                   	push   ebp
c0012d29:	57                   	push   edi
c0012d2a:	56                   	push   esi
c0012d2b:	53                   	push   ebx
c0012d2c:	81 ec f0 00 00 00    	sub    esp,0xf0
c0012d32:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012d36:	55                   	push   ebp
c0012d37:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012d3e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012d45:	e8 a7 ff ff ff       	call   c0012cf1 <Reg::getLine(char*, char*, char*)>
c0012d4a:	83 c4 10             	add    esp,0x10
c0012d4d:	84 c0                	test   al,al
c0012d4f:	0f 84 b6 00 00 00    	je     c0012e0b <Reg::readInt(char*, char*, int*)+0xe3>
c0012d55:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0012d5a:	83 fa 2b             	cmp    edx,0x2b
c0012d5d:	74 0c                	je     c0012d6b <Reg::readInt(char*, char*, int*)+0x43>
c0012d5f:	83 fa 2d             	cmp    edx,0x2d
c0012d62:	75 0e                	jne    c0012d72 <Reg::readInt(char*, char*, int*)+0x4a>
c0012d64:	ba 01 00 00 00       	mov    edx,0x1
c0012d69:	eb 0b                	jmp    c0012d76 <Reg::readInt(char*, char*, int*)+0x4e>
c0012d6b:	ba 01 00 00 00       	mov    edx,0x1
c0012d70:	eb 02                	jmp    c0012d74 <Reg::readInt(char*, char*, int*)+0x4c>
c0012d72:	31 d2                	xor    edx,edx
c0012d74:	31 c0                	xor    eax,eax
c0012d76:	be 0a 00 00 00       	mov    esi,0xa
c0012d7b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0012d80:	75 21                	jne    c0012da3 <Reg::readInt(char*, char*, int*)+0x7b>
c0012d82:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0012d87:	83 f9 78             	cmp    ecx,0x78
c0012d8a:	75 0a                	jne    c0012d96 <Reg::readInt(char*, char*, int*)+0x6e>
c0012d8c:	83 c2 02             	add    edx,0x2
c0012d8f:	be 10 00 00 00       	mov    esi,0x10
c0012d94:	eb 0d                	jmp    c0012da3 <Reg::readInt(char*, char*, int*)+0x7b>
c0012d96:	83 f9 62             	cmp    ecx,0x62
c0012d99:	75 08                	jne    c0012da3 <Reg::readInt(char*, char*, int*)+0x7b>
c0012d9b:	83 c2 02             	add    edx,0x2
c0012d9e:	be 02 00 00 00       	mov    esi,0x2
c0012da3:	01 d5                	add    ebp,edx
c0012da5:	31 d2                	xor    edx,edx
c0012da7:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0012dab:	83 f9 0d             	cmp    ecx,0xd
c0012dae:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0012db2:	0f 94 c3             	sete   bl
c0012db5:	85 c9                	test   ecx,ecx
c0012db7:	89 df                	mov    edi,ebx
c0012db9:	0f 94 c3             	sete   bl
c0012dbc:	09 df                	or     edi,ebx
c0012dbe:	89 fb                	mov    ebx,edi
c0012dc0:	83 e7 01             	and    edi,0x1
c0012dc3:	75 35                	jne    c0012dfa <Reg::readInt(char*, char*, int*)+0xd2>
c0012dc5:	0f af d6             	imul   edx,esi
c0012dc8:	83 fe 10             	cmp    esi,0x10
c0012dcb:	75 26                	jne    c0012df3 <Reg::readInt(char*, char*, int*)+0xcb>
c0012dcd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0012dd1:	83 ef 41             	sub    edi,0x41
c0012dd4:	89 fb                	mov    ebx,edi
c0012dd6:	80 fb 05             	cmp    bl,0x5
c0012dd9:	77 06                	ja     c0012de1 <Reg::readInt(char*, char*, int*)+0xb9>
c0012ddb:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0012ddf:	eb 16                	jmp    c0012df7 <Reg::readInt(char*, char*, int*)+0xcf>
c0012de1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012de5:	83 eb 61             	sub    ebx,0x61
c0012de8:	80 fb 05             	cmp    bl,0x5
c0012deb:	77 06                	ja     c0012df3 <Reg::readInt(char*, char*, int*)+0xcb>
c0012ded:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0012df1:	eb 04                	jmp    c0012df7 <Reg::readInt(char*, char*, int*)+0xcf>
c0012df3:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0012df7:	45                   	inc    ebp
c0012df8:	eb ad                	jmp    c0012da7 <Reg::readInt(char*, char*, int*)+0x7f>
c0012dfa:	84 c0                	test   al,al
c0012dfc:	74 02                	je     c0012e00 <Reg::readInt(char*, char*, int*)+0xd8>
c0012dfe:	f7 da                	neg    edx
c0012e00:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012e07:	89 10                	mov    DWORD PTR [eax],edx
c0012e09:	88 d8                	mov    al,bl
c0012e0b:	81 c4 ec 00 00 00    	add    esp,0xec
c0012e11:	5b                   	pop    ebx
c0012e12:	5e                   	pop    esi
c0012e13:	5f                   	pop    edi
c0012e14:	5d                   	pop    ebp
c0012e15:	c3                   	ret    

c0012e16 <Reg::readString(char*, char*, char*, int)>:
c0012e16:	57                   	push   edi
c0012e17:	56                   	push   esi
c0012e18:	53                   	push   ebx
c0012e19:	81 ec d4 00 00 00    	sub    esp,0xd4
c0012e1f:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0012e26:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0012e2a:	57                   	push   edi
c0012e2b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012e32:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012e39:	e8 b3 fe ff ff       	call   c0012cf1 <Reg::getLine(char*, char*, char*)>
c0012e3e:	83 c4 10             	add    esp,0x10
c0012e41:	89 c6                	mov    esi,eax
c0012e43:	84 c0                	test   al,al
c0012e45:	74 44                	je     c0012e8b <Reg::readString(char*, char*, char*, int)+0x75>
c0012e47:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0012e4e:	31 c0                	xor    eax,eax
c0012e50:	4a                   	dec    edx
c0012e51:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0012e54:	84 c9                	test   cl,cl
c0012e56:	74 0f                	je     c0012e67 <Reg::readString(char*, char*, char*, int)+0x51>
c0012e58:	39 c2                	cmp    edx,eax
c0012e5a:	7e 0b                	jle    c0012e67 <Reg::readString(char*, char*, char*, int)+0x51>
c0012e5c:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0012e5f:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012e64:	40                   	inc    eax
c0012e65:	eb ea                	jmp    c0012e51 <Reg::readString(char*, char*, char*, int)+0x3b>
c0012e67:	83 ec 0c             	sub    esp,0xc
c0012e6a:	53                   	push   ebx
c0012e6b:	e8 00 d7 fe ff       	call   c0000570 <strlen>
c0012e70:	83 c4 10             	add    esp,0x10
c0012e73:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012e78:	75 11                	jne    c0012e8b <Reg::readString(char*, char*, char*, int)+0x75>
c0012e7a:	83 ec 0c             	sub    esp,0xc
c0012e7d:	53                   	push   ebx
c0012e7e:	e8 ed d6 fe ff       	call   c0000570 <strlen>
c0012e83:	83 c4 10             	add    esp,0x10
c0012e86:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012e8b:	81 c4 d0 00 00 00    	add    esp,0xd0
c0012e91:	89 f0                	mov    eax,esi
c0012e93:	5b                   	pop    ebx
c0012e94:	5e                   	pop    esi
c0012e95:	5f                   	pop    edi
c0012e96:	c3                   	ret    

c0012e97 <Reg::readBool(char*, char*, bool*)>:
c0012e97:	83 ec 20             	sub    esp,0x20
c0012e9a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012e9e:	50                   	push   eax
c0012e9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ea3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ea7:	e8 7c fe ff ff       	call   c0012d28 <Reg::readInt(char*, char*, int*)>
c0012eac:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012eb1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012eb5:	0f 95 02             	setne  BYTE PTR [edx]
c0012eb8:	83 c4 2c             	add    esp,0x2c
c0012ebb:	c3                   	ret    

c0012ebc <Reg::readBoolWithDefault(char*, char*, bool)>:
c0012ebc:	53                   	push   ebx
c0012ebd:	83 ec 1c             	sub    esp,0x1c
c0012ec0:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0012ec4:	8d 44 24 13          	lea    eax,[esp+0x13]
c0012ec8:	50                   	push   eax
c0012ec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ecd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ed1:	e8 c1 ff ff ff       	call   c0012e97 <Reg::readBool(char*, char*, bool*)>
c0012ed6:	83 c4 10             	add    esp,0x10
c0012ed9:	84 c0                	test   al,al
c0012edb:	74 04                	je     c0012ee1 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0012edd:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0012ee1:	88 d8                	mov    al,bl
c0012ee3:	83 c4 18             	add    esp,0x18
c0012ee6:	5b                   	pop    ebx
c0012ee7:	c3                   	ret    

c0012ee8 <Reg::readIntWithDefault(char*, char*, int)>:
c0012ee8:	53                   	push   ebx
c0012ee9:	83 ec 1c             	sub    esp,0x1c
c0012eec:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012ef0:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012ef4:	50                   	push   eax
c0012ef5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ef9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012efd:	e8 26 fe ff ff       	call   c0012d28 <Reg::readInt(char*, char*, int*)>
c0012f02:	83 c4 10             	add    esp,0x10
c0012f05:	84 c0                	test   al,al
c0012f07:	74 04                	je     c0012f0d <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012f09:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f0d:	89 d8                	mov    eax,ebx
c0012f0f:	83 c4 18             	add    esp,0x18
c0012f12:	5b                   	pop    ebx
c0012f13:	c3                   	ret    

c0012f14 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012f14:	57                   	push   edi
c0012f15:	56                   	push   esi
c0012f16:	56                   	push   esi
c0012f17:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012f1b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012f1f:	56                   	push   esi
c0012f20:	57                   	push   edi
c0012f21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f29:	e8 e8 fe ff ff       	call   c0012e16 <Reg::readString(char*, char*, char*, int)>
c0012f2e:	83 c4 10             	add    esp,0x10
c0012f31:	84 c0                	test   al,al
c0012f33:	75 1a                	jne    c0012f4f <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012f35:	51                   	push   ecx
c0012f36:	56                   	push   esi
c0012f37:	6a 00                	push   0x0
c0012f39:	57                   	push   edi
c0012f3a:	e8 b1 d5 fe ff       	call   c00004f0 <memset>
c0012f3f:	8d 4e ff             	lea    ecx,[esi-0x1]
c0012f42:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012f46:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f48:	83 c4 10             	add    esp,0x10
c0012f4b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012f4f:	89 f8                	mov    eax,edi
c0012f51:	5a                   	pop    edx
c0012f52:	5e                   	pop    esi
c0012f53:	5f                   	pop    edi
c0012f54:	c3                   	ret    

c0012f55 <SysEject(regs*)>:
c0012f55:	83 ec 0c             	sub    esp,0xc
c0012f58:	83 ca ff             	or     edx,0xffffffff
c0012f5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f5f:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0012f62:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012f67:	83 e9 41             	sub    ecx,0x41
c0012f6a:	83 f9 19             	cmp    ecx,0x19
c0012f6d:	77 18                	ja     c0012f87 <SysEject(regs*)+0x32>
c0012f6f:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0012f76:	85 c9                	test   ecx,ecx
c0012f78:	74 0d                	je     c0012f87 <SysEject(regs*)+0x32>
c0012f7a:	83 ec 0c             	sub    esp,0xc
c0012f7d:	51                   	push   ecx
c0012f7e:	e8 ab a1 ff ff       	call   c000d12e <LogicalDisk::eject()>
c0012f83:	83 c4 10             	add    esp,0x10
c0012f86:	99                   	cdq    
c0012f87:	83 c4 0c             	add    esp,0xc
c0012f8a:	c3                   	ret    

c0012f8b <SysExit(regs*)>:
c0012f8b:	83 ec 18             	sub    esp,0x18
c0012f8e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f92:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012f95:	e8 16 2a 00 00       	call   c00159b0 <terminateTask(int)>
c0012f9a:	83 c8 ff             	or     eax,0xffffffff
c0012f9d:	83 c4 1c             	add    esp,0x1c
c0012fa0:	89 c2                	mov    edx,eax
c0012fa2:	c3                   	ret    

c0012fa3 <SysGetCwd(regs*)>:
c0012fa3:	83 ec 10             	sub    esp,0x10
c0012fa6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012faa:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0012fad:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012fb0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fb5:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012fb8:	e8 3d 7d ff ff       	call   c000acfa <Fs::getcwd(Process*, char*, int)>
c0012fbd:	83 c4 1c             	add    esp,0x1c
c0012fc0:	99                   	cdq    
c0012fc1:	c3                   	ret    

c0012fc2 <SysGetPID(regs*)>:
c0012fc2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fc7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012fca:	8b 00                	mov    eax,DWORD PTR [eax]
c0012fcc:	99                   	cdq    
c0012fcd:	c3                   	ret    

c0012fce <SysGetRAMData(regs*)>:
c0012fce:	8b 0d e8 4e 02 c0    	mov    ecx,DWORD PTR ds:0xc0024ee8
c0012fd4:	69 05 e4 4e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0024ee4,0xc8
c0012fde:	99                   	cdq    
c0012fdf:	f7 f9                	idiv   ecx
c0012fe1:	c1 e0 18             	shl    eax,0x18
c0012fe4:	09 c8                	or     eax,ecx
c0012fe6:	99                   	cdq    
c0012fe7:	c3                   	ret    

c0012fe8 <SysGetVGAPtr(regs*)>:
c0012fe8:	55                   	push   ebp
c0012fe9:	57                   	push   edi
c0012fea:	56                   	push   esi
c0012feb:	53                   	push   ebx
c0012fec:	83 ec 18             	sub    esp,0x18
c0012fef:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012ff3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012ff6:	e8 81 24 00 00       	call   c001547c <Thr::processFromPID(int)>
c0012ffb:	83 c4 10             	add    esp,0x10
c0012ffe:	89 c1                	mov    ecx,eax
c0013000:	b8 01 00 00 00       	mov    eax,0x1
c0013005:	85 c9                	test   ecx,ecx
c0013007:	74 57                	je     c0013060 <SysGetVGAPtr(regs*)+0x78>
c0013009:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c001300f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013013:	74 0c                	je     c0013021 <SysGetVGAPtr(regs*)+0x39>
c0013015:	83 ec 0c             	sub    esp,0xc
c0013018:	55                   	push   ebp
c0013019:	e8 11 57 ff ff       	call   c000872f <setActiveTerminal(VgaText*)>
c001301e:	83 c4 10             	add    esp,0x10
c0013021:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013024:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013027:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001302c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001302e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013031:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013034:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001303a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001303d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013040:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013046:	50                   	push   eax
c0013047:	50                   	push   eax
c0013048:	68 ec 0d 02 c0       	push   0xc0020dec
c001304d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013050:	05 a8 0f 00 00       	add    eax,0xfa8
c0013055:	50                   	push   eax
c0013056:	e8 e5 d5 fe ff       	call   c0000640 <strcpy>
c001305b:	83 c4 10             	add    esp,0x10
c001305e:	31 c0                	xor    eax,eax
c0013060:	83 c4 0c             	add    esp,0xc
c0013063:	31 d2                	xor    edx,edx
c0013065:	5b                   	pop    ebx
c0013066:	5e                   	pop    esi
c0013067:	5f                   	pop    edi
c0013068:	5d                   	pop    ebp
c0013069:	c3                   	ret    
c001306a:	66 90                	xchg   ax,ax

c001306c <SysKill(regs*)>:
c001306c:	53                   	push   ebx
c001306d:	83 ec 08             	sub    esp,0x8
c0013070:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013074:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013078:	75 16                	jne    c0013090 <SysKill(regs*)+0x24>
c001307a:	83 ec 0c             	sub    esp,0xc
c001307d:	68 f6 0d 02 c0       	push   0xc0020df6
c0013082:	e8 d8 d7 ff ff       	call   c001085f <KePanic(char const*)>
c0013087:	83 c4 10             	add    esp,0x10
c001308a:	e9 89 00 00 00       	jmp    c0013118 <SysKill(regs*)+0xac>
c001308f:	90                   	nop
c0013090:	83 ec 0c             	sub    esp,0xc
c0013093:	68 84 81 02 c0       	push   0xc0028184
c0013098:	e8 df ba 00 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001309d:	8d 76 00             	lea    esi,[esi+0x0]
c00130a0:	83 c4 10             	add    esp,0x10
c00130a3:	85 c0                	test   eax,eax
c00130a5:	74 19                	je     c00130c0 <SysKill(regs*)+0x54>
c00130a7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00130aa:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00130ad:	39 0a                	cmp    DWORD PTR [edx],ecx
c00130af:	74 33                	je     c00130e4 <SysKill(regs*)+0x78>
c00130b1:	52                   	push   edx
c00130b2:	52                   	push   edx
c00130b3:	50                   	push   eax
c00130b4:	68 84 81 02 c0       	push   0xc0028184
c00130b9:	e8 de bd 00 00       	call   c001ee9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00130be:	eb e0                	jmp    c00130a0 <SysKill(regs*)+0x34>
c00130c0:	83 ec 0c             	sub    esp,0xc
c00130c3:	68 78 81 02 c0       	push   0xc0028178
c00130c8:	e8 af ba 00 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00130cd:	8d 76 00             	lea    esi,[esi+0x0]
c00130d0:	83 c4 10             	add    esp,0x10
c00130d3:	85 c0                	test   eax,eax
c00130d5:	74 41                	je     c0013118 <SysKill(regs*)+0xac>
c00130d7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00130da:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00130dd:	39 0a                	cmp    DWORD PTR [edx],ecx
c00130df:	75 27                	jne    c0013108 <SysKill(regs*)+0x9c>
c00130e1:	8d 76 00             	lea    esi,[esi+0x0]
c00130e4:	51                   	push   ecx
c00130e5:	51                   	push   ecx
c00130e6:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00130e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00130f1:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00130f7:	e8 ff db ff ff       	call   c0010cfb <KeRaiseSignal(SigHandlerBlock*, int)>
c00130fc:	83 c4 10             	add    esp,0x10
c00130ff:	31 c0                	xor    eax,eax
c0013101:	31 d2                	xor    edx,edx
c0013103:	eb 1b                	jmp    c0013120 <SysKill(regs*)+0xb4>
c0013105:	8d 76 00             	lea    esi,[esi+0x0]
c0013108:	52                   	push   edx
c0013109:	52                   	push   edx
c001310a:	50                   	push   eax
c001310b:	68 78 81 02 c0       	push   0xc0028178
c0013110:	e8 87 bd 00 00       	call   c001ee9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013115:	eb b9                	jmp    c00130d0 <SysKill(regs*)+0x64>
c0013117:	90                   	nop
c0013118:	83 c8 ff             	or     eax,0xffffffff
c001311b:	89 c2                	mov    edx,eax
c001311d:	8d 76 00             	lea    esi,[esi+0x0]
c0013120:	83 c4 08             	add    esp,0x8
c0013123:	5b                   	pop    ebx
c0013124:	c3                   	ret    

c0013125 <SysLoadDLL(regs*)>:
c0013125:	56                   	push   esi
c0013126:	53                   	push   ebx
c0013127:	31 d2                	xor    edx,edx
c0013129:	51                   	push   ecx
c001312a:	b8 01 00 00 00       	mov    eax,0x1
c001312f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013133:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013137:	0f 84 8c 00 00 00    	je     c00131c9 <SysLoadDLL(regs*)+0xa4>
c001313d:	83 ec 0c             	sub    esp,0xc
c0013140:	68 14 01 00 00       	push   0x114
c0013145:	e8 50 49 ff ff       	call   c0007a9a <malloc>
c001314a:	83 c4 0c             	add    esp,0xc
c001314d:	89 c3                	mov    ebx,eax
c001314f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013154:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013157:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001315a:	53                   	push   ebx
c001315b:	e8 a4 7d ff ff       	call   c000af04 <File::File(char const*, Process*)>
c0013160:	83 c4 10             	add    esp,0x10
c0013163:	31 d2                	xor    edx,edx
c0013165:	b8 02 00 00 00       	mov    eax,0x2
c001316a:	85 db                	test   ebx,ebx
c001316c:	74 5b                	je     c00131c9 <SysLoadDLL(regs*)+0xa4>
c001316e:	83 ec 0c             	sub    esp,0xc
c0013171:	53                   	push   ebx
c0013172:	e8 b7 80 ff ff       	call   c000b22e <File::exists()>
c0013177:	83 c4 10             	add    esp,0x10
c001317a:	84 c0                	test   al,al
c001317c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001317e:	75 11                	jne    c0013191 <SysLoadDLL(regs*)+0x6c>
c0013180:	83 ec 0c             	sub    esp,0xc
c0013183:	53                   	push   ebx
c0013184:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013187:	83 c4 10             	add    esp,0x10
c001318a:	b8 03 00 00 00       	mov    eax,0x3
c001318f:	eb 36                	jmp    c00131c7 <SysLoadDLL(regs*)+0xa2>
c0013191:	83 ec 0c             	sub    esp,0xc
c0013194:	53                   	push   ebx
c0013195:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013198:	58                   	pop    eax
c0013199:	5a                   	pop    edx
c001319a:	6a 00                	push   0x0
c001319c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001319f:	e8 12 14 00 00       	call   c00145b6 <Thr::loadDLL(char const*, bool)>
c00131a4:	83 c4 10             	add    esp,0x10
c00131a7:	89 c1                	mov    ecx,eax
c00131a9:	31 d2                	xor    edx,edx
c00131ab:	b8 04 00 00 00       	mov    eax,0x4
c00131b0:	85 c9                	test   ecx,ecx
c00131b2:	74 15                	je     c00131c9 <SysLoadDLL(regs*)+0xa4>
c00131b4:	53                   	push   ebx
c00131b5:	53                   	push   ebx
c00131b6:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00131bc:	51                   	push   ecx
c00131bd:	e8 25 16 00 00       	call   c00147e7 <Thr::executeDLL(unsigned long, void*)>
c00131c2:	83 c4 10             	add    esp,0x10
c00131c5:	31 c0                	xor    eax,eax
c00131c7:	31 d2                	xor    edx,edx
c00131c9:	59                   	pop    ecx
c00131ca:	5b                   	pop    ebx
c00131cb:	5e                   	pop    esi
c00131cc:	c3                   	ret    

c00131cd <SysRead(regs*)>:
c00131cd:	57                   	push   edi
c00131ce:	56                   	push   esi
c00131cf:	53                   	push   ebx
c00131d0:	83 ec 10             	sub    esp,0x10
c00131d3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00131d7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00131da:	83 f8 02             	cmp    eax,0x2
c00131dd:	77 10                	ja     c00131ef <SysRead(regs*)+0x22>
c00131df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131e7:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00131ed:	eb 0e                	jmp    c00131fd <SysRead(regs*)+0x30>
c00131ef:	83 ec 0c             	sub    esp,0xc
c00131f2:	50                   	push   eax
c00131f3:	e8 b7 62 ff ff       	call   c00094af <getFromFileDescriptor(int)>
c00131f8:	83 c4 10             	add    esp,0x10
c00131fb:	89 c1                	mov    ecx,eax
c00131fd:	83 c8 ff             	or     eax,0xffffffff
c0013200:	85 c9                	test   ecx,ecx
c0013202:	89 c2                	mov    edx,eax
c0013204:	74 28                	je     c001322e <SysRead(regs*)+0x61>
c0013206:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001320e:	31 ff                	xor    edi,edi
c0013210:	83 ec 0c             	sub    esp,0xc
c0013213:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013215:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013219:	52                   	push   edx
c001321a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001321d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013220:	57                   	push   edi
c0013221:	56                   	push   esi
c0013222:	51                   	push   ecx
c0013223:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013226:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001322a:	83 c4 20             	add    esp,0x20
c001322d:	99                   	cdq    
c001322e:	83 c4 10             	add    esp,0x10
c0013231:	5b                   	pop    ebx
c0013232:	5e                   	pop    esi
c0013233:	5f                   	pop    edi
c0013234:	c3                   	ret    

c0013235 <SysRegisterSignal(regs*)>:
c0013235:	83 ec 18             	sub    esp,0x18
c0013238:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001323c:	6a 00                	push   0x0
c001323e:	6a 00                	push   0x0
c0013240:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013243:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013246:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001324b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001324e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013254:	e8 6c da ff ff       	call   c0010cc5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013259:	83 c4 2c             	add    esp,0x2c
c001325c:	99                   	cdq    
c001325d:	c3                   	ret    

c001325e <SysRegistryGetTypeFromPath(regs*)>:
c001325e:	57                   	push   edi
c001325f:	56                   	push   esi
c0013260:	53                   	push   ebx
c0013261:	81 ec 38 01 00 00    	sub    esp,0x138
c0013267:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c001326e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013271:	68 17 0e 02 c0       	push   0xc0020e17
c0013276:	e8 07 77 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c001327b:	5a                   	pop    edx
c001327c:	59                   	pop    ecx
c001327d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013280:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013283:	e8 4d f6 ff ff       	call   c00128d5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013288:	5f                   	pop    edi
c0013289:	89 c6                	mov    esi,eax
c001328b:	5a                   	pop    edx
c001328c:	50                   	push   eax
c001328d:	68 37 0e 02 c0       	push   0xc0020e37
c0013292:	e8 eb 76 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0013297:	83 c4 10             	add    esp,0x10
c001329a:	85 f6                	test   esi,esi
c001329c:	74 28                	je     c00132c6 <SysRegistryGetTypeFromPath(regs*)+0x68>
c001329e:	50                   	push   eax
c001329f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00132a3:	57                   	push   edi
c00132a4:	56                   	push   esi
c00132a5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00132a8:	e8 0c f2 ff ff       	call   c00124b9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00132ad:	83 c4 0c             	add    esp,0xc
c00132b0:	89 c3                	mov    ebx,eax
c00132b2:	57                   	push   edi
c00132b3:	50                   	push   eax
c00132b4:	68 3f 0e 02 c0       	push   0xc0020e3f
c00132b9:	e8 c4 76 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c00132be:	89 d8                	mov    eax,ebx
c00132c0:	83 c4 10             	add    esp,0x10
c00132c3:	99                   	cdq    
c00132c4:	eb 05                	jmp    c00132cb <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00132c6:	83 c8 ff             	or     eax,0xffffffff
c00132c9:	89 c2                	mov    edx,eax
c00132cb:	81 c4 30 01 00 00    	add    esp,0x130
c00132d1:	5b                   	pop    ebx
c00132d2:	5e                   	pop    esi
c00132d3:	5f                   	pop    edi
c00132d4:	c3                   	ret    

c00132d5 <SysRegistryReadExtent(regs*)>:
c00132d5:	83 ec 1c             	sub    esp,0x1c
c00132d8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00132dc:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00132df:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00132e2:	85 c0                	test   eax,eax
c00132e4:	79 1f                	jns    c0013305 <SysRegistryReadExtent(regs*)+0x30>
c00132e6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00132eb:	52                   	push   edx
c00132ec:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00132f0:	52                   	push   edx
c00132f1:	50                   	push   eax
c00132f2:	51                   	push   ecx
c00132f3:	e8 b3 f0 ff ff       	call   c00123ab <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00132f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013300:	83 c4 10             	add    esp,0x10
c0013303:	eb 14                	jmp    c0013319 <SysRegistryReadExtent(regs*)+0x44>
c0013305:	83 ec 04             	sub    esp,0x4
c0013308:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001330b:	50                   	push   eax
c001330c:	51                   	push   ecx
c001330d:	e8 33 eb ff ff       	call   c0011e45 <CmGetString(Reghive_Tag*, int, char*)>
c0013312:	83 c4 10             	add    esp,0x10
c0013315:	31 c0                	xor    eax,eax
c0013317:	31 d2                	xor    edx,edx
c0013319:	83 c4 1c             	add    esp,0x1c
c001331c:	c3                   	ret    

c001331d <SysRegistryPathToExtentLookup(regs*)>:
c001331d:	53                   	push   ebx
c001331e:	83 ec 10             	sub    esp,0x10
c0013321:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013325:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013328:	68 55 0e 02 c0       	push   0xc0020e55
c001332d:	e8 50 76 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0013332:	58                   	pop    eax
c0013333:	5a                   	pop    edx
c0013334:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013337:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001333a:	e8 96 f5 ff ff       	call   c00128d5 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001333f:	83 c4 18             	add    esp,0x18
c0013342:	99                   	cdq    
c0013343:	5b                   	pop    ebx
c0013344:	c3                   	ret    

c0013345 <SysRegistryEnterDirectory(regs*)>:
c0013345:	53                   	push   ebx
c0013346:	83 ec 10             	sub    esp,0x10
c0013349:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001334d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013350:	68 78 0e 02 c0       	push   0xc0020e78
c0013355:	e8 28 76 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c001335a:	58                   	pop    eax
c001335b:	5a                   	pop    edx
c001335c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001335f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013362:	e8 55 eb ff ff       	call   c0011ebc <CmEnterDirectory(Reghive_Tag*, int)>
c0013367:	83 c4 18             	add    esp,0x18
c001336a:	99                   	cdq    
c001336b:	5b                   	pop    ebx
c001336c:	c3                   	ret    

c001336d <SysRegistryGetNext(regs*)>:
c001336d:	53                   	push   ebx
c001336e:	83 ec 10             	sub    esp,0x10
c0013371:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013375:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013378:	68 96 0e 02 c0       	push   0xc0020e96
c001337d:	e8 00 76 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0013382:	58                   	pop    eax
c0013383:	5a                   	pop    edx
c0013384:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013387:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001338a:	e8 6c eb ff ff       	call   c0011efb <CmGetNext(Reghive_Tag*, int)>
c001338f:	83 c4 18             	add    esp,0x18
c0013392:	99                   	cdq    
c0013393:	5b                   	pop    ebx
c0013394:	c3                   	ret    

c0013395 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013395:	57                   	push   edi
c0013396:	56                   	push   esi
c0013397:	53                   	push   ebx
c0013398:	81 ec 34 01 00 00    	sub    esp,0x134
c001339e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00133a5:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00133a9:	57                   	push   edi
c00133aa:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00133ad:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00133b0:	e8 04 f1 ff ff       	call   c00124b9 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00133b5:	89 c3                	mov    ebx,eax
c00133b7:	58                   	pop    eax
c00133b8:	5a                   	pop    edx
c00133b9:	57                   	push   edi
c00133ba:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00133bd:	e8 7e d2 fe ff       	call   c0000640 <strcpy>
c00133c2:	89 d8                	mov    eax,ebx
c00133c4:	81 c4 40 01 00 00    	add    esp,0x140
c00133ca:	99                   	cdq    
c00133cb:	5b                   	pop    ebx
c00133cc:	5e                   	pop    esi
c00133cd:	5f                   	pop    edi
c00133ce:	c3                   	ret    

c00133cf <SysRegistryOpen(regs*)>:
c00133cf:	83 ec 18             	sub    esp,0x18
c00133d2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133d6:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00133d9:	e8 f7 e8 ff ff       	call   c0011cd5 <CmOpen(char const*)>
c00133de:	83 c4 1c             	add    esp,0x1c
c00133e1:	99                   	cdq    
c00133e2:	c3                   	ret    

c00133e3 <SysRegistryClose(regs*)>:
c00133e3:	83 ec 18             	sub    esp,0x18
c00133e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133ea:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00133ed:	e8 01 ea ff ff       	call   c0011df3 <CmClose(Reghive_Tag*)>
c00133f2:	31 c0                	xor    eax,eax
c00133f4:	31 d2                	xor    edx,edx
c00133f6:	83 c4 1c             	add    esp,0x1c
c00133f9:	c3                   	ret    

c00133fa <SysSbrk(regs*)>:
c00133fa:	56                   	push   esi
c00133fb:	53                   	push   ebx
c00133fc:	50                   	push   eax
c00133fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013402:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013406:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013409:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001340c:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013412:	85 db                	test   ebx,ebx
c0013414:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013417:	74 02                	je     c001341b <SysSbrk(regs*)+0x21>
c0013419:	79 06                	jns    c0013421 <SysSbrk(regs*)+0x27>
c001341b:	89 f0                	mov    eax,esi
c001341d:	31 d2                	xor    edx,edx
c001341f:	eb 2a                	jmp    c001344b <SysSbrk(regs*)+0x51>
c0013421:	83 c8 ff             	or     eax,0xffffffff
c0013424:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001342a:	89 c2                	mov    edx,eax
c001342c:	77 1d                	ja     c001344b <SysSbrk(regs*)+0x51>
c001342e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013434:	50                   	push   eax
c0013435:	c1 ea 0c             	shr    edx,0xc
c0013438:	68 07 0c 00 00       	push   0xc07
c001343d:	52                   	push   edx
c001343e:	51                   	push   ecx
c001343f:	e8 b2 69 ff ff       	call   c0009df6 <VAS::allocatePages(int, int)>
c0013444:	89 f0                	mov    eax,esi
c0013446:	31 d2                	xor    edx,edx
c0013448:	83 c4 10             	add    esp,0x10
c001344b:	59                   	pop    ecx
c001344c:	5b                   	pop    ebx
c001344d:	5e                   	pop    esi
c001344e:	c3                   	ret    

c001344f <SysSetCwd(regs*)>:
c001344f:	83 ec 14             	sub    esp,0x14
c0013452:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013456:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013459:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001345e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013461:	e8 67 7e ff ff       	call   c000b2cd <Fs::setcwd(Process*, char*)>
c0013466:	83 c4 1c             	add    esp,0x1c
c0013469:	99                   	cdq    
c001346a:	c3                   	ret    

c001346b <SysSetTime(regs*)>:
c001346b:	55                   	push   ebp
c001346c:	31 c9                	xor    ecx,ecx
c001346e:	57                   	push   edi
c001346f:	bd 0c 00 00 00       	mov    ebp,0xc
c0013474:	56                   	push   esi
c0013475:	53                   	push   ebx
c0013476:	31 db                	xor    ebx,ebx
c0013478:	83 ec 10             	sub    esp,0x10
c001347b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001347f:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013482:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013485:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013488:	89 c2                	mov    edx,eax
c001348a:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013490:	83 e2 1f             	and    edx,0x1f
c0013493:	c1 e7 10             	shl    edi,0x10
c0013496:	42                   	inc    edx
c0013497:	c1 e8 05             	shr    eax,0x5
c001349a:	88 d1                	mov    cl,dl
c001349c:	31 d2                	xor    edx,edx
c001349e:	f7 f5                	div    ebp
c00134a0:	89 dd                	mov    ebp,ebx
c00134a2:	88 d5                	mov    ch,dl
c00134a4:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00134aa:	0f b7 c1             	movzx  eax,cx
c00134ad:	31 d2                	xor    edx,edx
c00134af:	09 f8                	or     eax,edi
c00134b1:	bf 3c 00 00 00       	mov    edi,0x3c
c00134b6:	89 c1                	mov    ecx,eax
c00134b8:	89 f0                	mov    eax,esi
c00134ba:	f7 f7                	div    edi
c00134bc:	c1 e2 10             	shl    edx,0x10
c00134bf:	09 d5                	or     ebp,edx
c00134c1:	31 d2                	xor    edx,edx
c00134c3:	89 eb                	mov    ebx,ebp
c00134c5:	f7 f7                	div    edi
c00134c7:	bf 10 0e 00 00       	mov    edi,0xe10
c00134cc:	88 d7                	mov    bh,dl
c00134ce:	89 f0                	mov    eax,esi
c00134d0:	31 d2                	xor    edx,edx
c00134d2:	f7 f7                	div    edi
c00134d4:	bf 18 00 00 00       	mov    edi,0x18
c00134d9:	31 d2                	xor    edx,edx
c00134db:	f7 f7                	div    edi
c00134dd:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00134e2:	88 d3                	mov    bl,dl
c00134e4:	53                   	push   ebx
c00134e5:	51                   	push   ecx
c00134e6:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00134ec:	e8 d9 85 ff ff       	call   c000baca <Clock::setTimeInDatetimeLocal(datetime_t)>
c00134f1:	83 c4 1c             	add    esp,0x1c
c00134f4:	83 f0 01             	xor    eax,0x1
c00134f7:	5b                   	pop    ebx
c00134f8:	0f b6 c0             	movzx  eax,al
c00134fb:	5e                   	pop    esi
c00134fc:	31 d2                	xor    edx,edx
c00134fe:	5f                   	pop    edi
c00134ff:	5d                   	pop    ebp
c0013500:	c3                   	ret    

c0013501 <SysTimezone(regs*)>:
c0013501:	53                   	push   ebx
c0013502:	83 ec 08             	sub    esp,0x8
c0013505:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013509:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001350d:	75 17                	jne    c0013526 <SysTimezone(regs*)+0x25>
c001350f:	83 ec 0c             	sub    esp,0xc
c0013512:	68 ad 0e 02 c0       	push   0xc0020ead
c0013517:	e8 66 74 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c001351c:	83 c8 ff             	or     eax,0xffffffff
c001351f:	83 c4 10             	add    esp,0x10
c0013522:	89 c2                	mov    edx,eax
c0013524:	eb 20                	jmp    c0013546 <SysTimezone(regs*)+0x45>
c0013526:	83 ec 0c             	sub    esp,0xc
c0013529:	68 c2 0e 02 c0       	push   0xc0020ec2
c001352e:	e8 4f 74 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0013533:	58                   	pop    eax
c0013534:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013537:	e8 f8 82 ff ff       	call   c000b834 <User::loadClockSettings(int)>
c001353c:	83 c4 10             	add    esp,0x10
c001353f:	b8 01 00 00 00       	mov    eax,0x1
c0013544:	31 d2                	xor    edx,edx
c0013546:	83 c4 08             	add    esp,0x8
c0013549:	5b                   	pop    ebx
c001354a:	c3                   	ret    

c001354b <SysWrite(regs*)>:
c001354b:	57                   	push   edi
c001354c:	56                   	push   esi
c001354d:	53                   	push   ebx
c001354e:	83 ec 10             	sub    esp,0x10
c0013551:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013555:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013558:	83 f8 02             	cmp    eax,0x2
c001355b:	77 10                	ja     c001356d <SysWrite(regs*)+0x22>
c001355d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013562:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013565:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001356b:	eb 0e                	jmp    c001357b <SysWrite(regs*)+0x30>
c001356d:	83 ec 0c             	sub    esp,0xc
c0013570:	50                   	push   eax
c0013571:	e8 39 5f ff ff       	call   c00094af <getFromFileDescriptor(int)>
c0013576:	83 c4 10             	add    esp,0x10
c0013579:	89 c1                	mov    ecx,eax
c001357b:	83 c8 ff             	or     eax,0xffffffff
c001357e:	85 c9                	test   ecx,ecx
c0013580:	89 c2                	mov    edx,eax
c0013582:	74 28                	je     c00135ac <SysWrite(regs*)+0x61>
c0013584:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001358c:	31 ff                	xor    edi,edi
c001358e:	83 ec 0c             	sub    esp,0xc
c0013591:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013593:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013597:	52                   	push   edx
c0013598:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001359b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001359e:	57                   	push   edi
c001359f:	56                   	push   esi
c00135a0:	51                   	push   ecx
c00135a1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00135a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00135a8:	83 c4 20             	add    esp,0x20
c00135ab:	99                   	cdq    
c00135ac:	83 c4 10             	add    esp,0x10
c00135af:	5b                   	pop    ebx
c00135b0:	5e                   	pop    esi
c00135b1:	5f                   	pop    edi
c00135b2:	c3                   	ret    

c00135b3 <SysWsbe(regs*)>:
c00135b3:	57                   	push   edi
c00135b4:	b9 0b 00 00 00       	mov    ecx,0xb
c00135b9:	56                   	push   esi
c00135ba:	be 01 0f 02 c0       	mov    esi,0xc0020f01
c00135bf:	53                   	push   ebx
c00135c0:	83 ec 30             	sub    esp,0x30
c00135c3:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00135c7:	fc                   	cld    
c00135c8:	83 ec 0c             	sub    esp,0xc
c00135cb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00135cd:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00135d1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135d6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00135d9:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00135df:	8b 06                	mov    eax,DWORD PTR [esi]
c00135e1:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00135e4:	57                   	push   edi
c00135e5:	e8 86 cf fe ff       	call   c0000570 <strlen>
c00135ea:	5a                   	pop    edx
c00135eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00135ef:	52                   	push   edx
c00135f0:	31 d2                	xor    edx,edx
c00135f2:	57                   	push   edi
c00135f3:	52                   	push   edx
c00135f4:	50                   	push   eax
c00135f5:	56                   	push   esi
c00135f6:	ff d3                	call   ebx
c00135f8:	83 c4 14             	add    esp,0x14
c00135fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00135ff:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013602:	e8 a9 23 00 00       	call   c00159b0 <terminateTask(int)>
c0013607:	83 c4 40             	add    esp,0x40
c001360a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001360f:	5b                   	pop    ebx
c0013610:	31 d2                	xor    edx,edx
c0013612:	5e                   	pop    esi
c0013613:	5f                   	pop    edi
c0013614:	c3                   	ret    

c0013615 <SysYield(regs*)>:
c0013615:	83 ec 0c             	sub    esp,0xc
c0013618:	fa                   	cli    
c0013619:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001361f:	e8 ec 19 00 00       	call   c0015010 <schedule()>
c0013624:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0013629:	48                   	dec    eax
c001362a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001362f:	75 01                	jne    c0013632 <SysYield(regs*)+0x1d>
c0013631:	fb                   	sti    
c0013632:	31 c0                	xor    eax,eax
c0013634:	31 d2                	xor    edx,edx
c0013636:	83 c4 0c             	add    esp,0xc
c0013639:	c3                   	ret    

c001363a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001363a:	55                   	push   ebp
c001363b:	57                   	push   edi
c001363c:	56                   	push   esi
c001363d:	53                   	push   ebx
c001363e:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013644:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c001364c:	0f 95 c0             	setne  al
c001364f:	31 d2                	xor    edx,edx
c0013651:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013659:	0f 94 c2             	sete   dl
c001365c:	85 c2                	test   edx,eax
c001365e:	74 34                	je     c0013694 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0013660:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001366b:	74 27                	je     c0013694 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c001366d:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013674:	05 00 10 00 00       	add    eax,0x1000
c0013679:	89 c1                	mov    ecx,eax
c001367b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013680:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0013686:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c001368d:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0013694:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c001369b:	83 ec 0c             	sub    esp,0xc
c001369e:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00136a4:	6a 01                	push   0x1
c00136a6:	e8 5e 5f ff ff       	call   c0009609 <Virt::allocateKernelVirtualPages(int)>
c00136ab:	83 c4 10             	add    esp,0x10
c00136ae:	89 c3                	mov    ebx,eax
c00136b0:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00136b6:	0f 86 25 01 00 00    	jbe    c00137e1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00136bc:	c1 ee 0c             	shr    esi,0xc
c00136bf:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00136c6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00136ca:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00136d2:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00136d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00136dd:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00136e4:	29 ef                	sub    edi,ebp
c00136e6:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00136ea:	0f 83 f8 00 00 00    	jae    c00137e8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c00136f0:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00136f6:	76 05                	jbe    c00136fd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c00136f8:	bf 00 10 00 00       	mov    edi,0x1000
c00136fd:	83 ec 0c             	sub    esp,0xc
c0013700:	31 d2                	xor    edx,edx
c0013702:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013709:	8b 08                	mov    ecx,DWORD PTR [eax]
c001370b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001370f:	50                   	push   eax
c0013710:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013714:	56                   	push   esi
c0013715:	52                   	push   edx
c0013716:	57                   	push   edi
c0013717:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001371e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013721:	83 c4 20             	add    esp,0x20
c0013724:	85 c0                	test   eax,eax
c0013726:	75 06                	jne    c001372e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0013728:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001372c:	74 13                	je     c0013741 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c001372e:	83 ec 0c             	sub    esp,0xc
c0013731:	53                   	push   ebx
c0013732:	e8 ee 61 ff ff       	call   c0009925 <Virt::freeKernelVirtualPages(unsigned long)>
c0013737:	83 c4 10             	add    esp,0x10
c001373a:	31 c0                	xor    eax,eax
c001373c:	e9 7c 01 00 00       	jmp    c00138bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0013741:	fa                   	cli    
c0013742:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013748:	e8 52 46 ff ff       	call   c0007d9f <Phys::allocatePage()>
c001374d:	6a 07                	push   0x7
c001374f:	89 c7                	mov    edi,eax
c0013751:	53                   	push   ebx
c0013752:	50                   	push   eax
c0013753:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013758:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001375b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013761:	e8 8a 65 ff ff       	call   c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013766:	83 c4 0c             	add    esp,0xc
c0013769:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013770:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013776:	6a 00                	push   0x0
c0013778:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001377d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013780:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013786:	e8 cb 63 ff ff       	call   c0009b56 <VAS::mapOtherVASIn(bool, VAS*)>
c001378b:	58                   	pop    eax
c001378c:	5a                   	pop    edx
c001378d:	68 07 0c 00 00       	push   0xc07
c0013792:	55                   	push   ebp
c0013793:	57                   	push   edi
c0013794:	89 df                	mov    edi,ebx
c0013796:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001379d:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137a3:	6a 00                	push   0x0
c00137a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137aa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00137ad:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00137b3:	e8 22 69 ff ff       	call   c000a0da <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00137b8:	b9 00 10 00 00       	mov    ecx,0x1000
c00137bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00137bf:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00137c4:	83 c4 20             	add    esp,0x20
c00137c7:	48                   	dec    eax
c00137c8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00137cd:	85 c0                	test   eax,eax
c00137cf:	75 01                	jne    c00137d2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c00137d1:	fb                   	sti    
c00137d2:	81 c5 00 10 00 00    	add    ebp,0x1000
c00137d8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00137dc:	e9 f1 fe ff ff       	jmp    c00136d2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c00137e1:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00137e8:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00137ef:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00137f5:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00137fb:	0f 86 ae 00 00 00    	jbe    c00138af <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0013801:	fa                   	cli    
c0013802:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0013808:	c1 ee 0c             	shr    esi,0xc
c001380b:	51                   	push   ecx
c001380c:	31 ff                	xor    edi,edi
c001380e:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013815:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001381b:	6a 00                	push   0x0
c001381d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013822:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013825:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001382b:	e8 26 63 ff ff       	call   c0009b56 <VAS::mapOtherVASIn(bool, VAS*)>
c0013830:	83 c4 10             	add    esp,0x10
c0013833:	e8 67 45 ff ff       	call   c0007d9f <Phys::allocatePage()>
c0013838:	47                   	inc    edi
c0013839:	6a 07                	push   0x7
c001383b:	53                   	push   ebx
c001383c:	50                   	push   eax
c001383d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013841:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013847:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001384a:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013850:	e8 9b 64 ff ff       	call   c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013855:	58                   	pop    eax
c0013856:	5a                   	pop    edx
c0013857:	68 07 0c 00 00       	push   0xc07
c001385c:	55                   	push   ebp
c001385d:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013863:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013867:	50                   	push   eax
c0013868:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001386f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013875:	6a 00                	push   0x0
c0013877:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001387c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001387f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013885:	e8 50 68 ff ff       	call   c000a0da <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001388a:	83 c4 1c             	add    esp,0x1c
c001388d:	68 00 10 00 00       	push   0x1000
c0013892:	6a 00                	push   0x0
c0013894:	53                   	push   ebx
c0013895:	e8 56 cc fe ff       	call   c00004f0 <memset>
c001389a:	83 c4 10             	add    esp,0x10
c001389d:	39 fe                	cmp    esi,edi
c001389f:	77 92                	ja     c0013833 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c00138a1:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00138a6:	48                   	dec    eax
c00138a7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00138ac:	75 01                	jne    c00138af <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00138ae:	fb                   	sti    
c00138af:	83 ec 0c             	sub    esp,0xc
c00138b2:	53                   	push   ebx
c00138b3:	e8 6d 60 ff ff       	call   c0009925 <Virt::freeKernelVirtualPages(unsigned long)>
c00138b8:	83 c4 10             	add    esp,0x10
c00138bb:	b0 01                	mov    al,0x1
c00138bd:	81 c4 2c 10 00 00    	add    esp,0x102c
c00138c3:	5b                   	pop    ebx
c00138c4:	5e                   	pop    esi
c00138c5:	5f                   	pop    edi
c00138c6:	5d                   	pop    ebp
c00138c7:	c3                   	ret    

c00138c8 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00138c8:	55                   	push   ebp
c00138c9:	57                   	push   edi
c00138ca:	56                   	push   esi
c00138cb:	53                   	push   ebx
c00138cc:	83 ec 48             	sub    esp,0x48
c00138cf:	68 14 01 00 00       	push   0x114
c00138d4:	e8 c1 41 ff ff       	call   c0007a9a <malloc>
c00138d9:	83 c4 0c             	add    esp,0xc
c00138dc:	89 c6                	mov    esi,eax
c00138de:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00138e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00138e6:	50                   	push   eax
c00138e7:	e8 18 76 ff ff       	call   c000af04 <File::File(char const*, Process*)>
c00138ec:	58                   	pop    eax
c00138ed:	5a                   	pop    edx
c00138ee:	6a 01                	push   0x1
c00138f0:	56                   	push   esi
c00138f1:	e8 ca 76 ff ff       	call   c000afc0 <File::open(FileOpenMode)>
c00138f6:	83 c4 10             	add    esp,0x10
c00138f9:	85 c0                	test   eax,eax
c00138fb:	0f 85 43 01 00 00    	jne    c0013a44 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013901:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013909:	83 ec 0c             	sub    esp,0xc
c001390c:	6a 34                	push   0x34
c001390e:	e8 87 41 ff ff       	call   c0007a9a <malloc>
c0013913:	89 c3                	mov    ebx,eax
c0013915:	58                   	pop    eax
c0013916:	8b 06                	mov    eax,DWORD PTR [esi]
c0013918:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001391c:	57                   	push   edi
c001391d:	53                   	push   ebx
c001391e:	6a 00                	push   0x0
c0013920:	6a 34                	push   0x34
c0013922:	56                   	push   esi
c0013923:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013926:	83 c4 20             	add    esp,0x20
c0013929:	85 c0                	test   eax,eax
c001392b:	0f 85 13 01 00 00    	jne    c0013a44 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013931:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013937:	0f 85 07 01 00 00    	jne    c0013a44 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001393d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013940:	85 c0                	test   eax,eax
c0013942:	0f 84 fc 00 00 00    	je     c0013a44 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013948:	31 d2                	xor    edx,edx
c001394a:	55                   	push   ebp
c001394b:	52                   	push   edx
c001394c:	50                   	push   eax
c001394d:	56                   	push   esi
c001394e:	e8 2b 77 ff ff       	call   c000b07e <File::seek(unsigned long long)>
c0013953:	83 c4 10             	add    esp,0x10
c0013956:	85 c0                	test   eax,eax
c0013958:	0f 85 e6 00 00 00    	jne    c0013a44 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001395e:	83 ec 0c             	sub    esp,0xc
c0013961:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013964:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013968:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001396c:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013970:	0f af c2             	imul   eax,edx
c0013973:	50                   	push   eax
c0013974:	e8 21 41 ff ff       	call   c0007a9a <malloc>
c0013979:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001397b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001397f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013982:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013986:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001398a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001398e:	0f af c2             	imul   eax,edx
c0013991:	99                   	cdq    
c0013992:	52                   	push   edx
c0013993:	50                   	push   eax
c0013994:	56                   	push   esi
c0013995:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013998:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001399b:	83 c4 20             	add    esp,0x20
c001399e:	85 c0                	test   eax,eax
c00139a0:	0f 84 9e 00 00 00    	je     c0013a44 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00139a6:	31 d2                	xor    edx,edx
c00139a8:	51                   	push   ecx
c00139a9:	52                   	push   edx
c00139aa:	50                   	push   eax
c00139ab:	56                   	push   esi
c00139ac:	e8 cd 76 ff ff       	call   c000b07e <File::seek(unsigned long long)>
c00139b1:	83 c4 10             	add    esp,0x10
c00139b4:	85 c0                	test   eax,eax
c00139b6:	0f 85 88 00 00 00    	jne    c0013a44 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00139bc:	83 ec 0c             	sub    esp,0xc
c00139bf:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00139c3:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00139c7:	31 ed                	xor    ebp,ebp
c00139c9:	0f af c2             	imul   eax,edx
c00139cc:	50                   	push   eax
c00139cd:	e8 c8 40 ff ff       	call   c0007a9a <malloc>
c00139d2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00139d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00139d8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00139db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139df:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00139e3:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00139e7:	0f af c2             	imul   eax,edx
c00139ea:	99                   	cdq    
c00139eb:	52                   	push   edx
c00139ec:	50                   	push   eax
c00139ed:	56                   	push   esi
c00139ee:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00139f1:	83 c4 20             	add    esp,0x20
c00139f4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00139fc:	0f b7 fd             	movzx  edi,bp
c00139ff:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0013a03:	73 7d                	jae    c0013a82 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0013a05:	c1 e7 05             	shl    edi,0x5
c0013a08:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013a0c:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013a0f:	75 6b                	jne    c0013a7c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013a11:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013a18:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013a1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013a1f:	52                   	push   edx
c0013a20:	31 d2                	xor    edx,edx
c0013a22:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013a25:	52                   	push   edx
c0013a26:	50                   	push   eax
c0013a27:	56                   	push   esi
c0013a28:	e8 51 76 ff ff       	call   c000b07e <File::seek(unsigned long long)>
c0013a2d:	83 c4 10             	add    esp,0x10
c0013a30:	85 c0                	test   eax,eax
c0013a32:	74 17                	je     c0013a4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0013a34:	83 ec 0c             	sub    esp,0xc
c0013a37:	68 2d 0f 02 c0       	push   0xc0020f2d
c0013a3c:	e8 41 6f ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0013a41:	83 c4 10             	add    esp,0x10
c0013a44:	31 c0                	xor    eax,eax
c0013a46:	e9 87 00 00 00       	jmp    c0013ad2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0013a4b:	83 ec 0c             	sub    esp,0xc
c0013a4e:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013a51:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013a54:	50                   	push   eax
c0013a55:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013a59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a5d:	56                   	push   esi
c0013a5e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013a62:	e8 d3 fb ff ff       	call   c001363a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013a67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013a6b:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0013a6f:	83 c4 20             	add    esp,0x20
c0013a72:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0013a76:	73 04                	jae    c0013a7c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013a78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a7c:	45                   	inc    ebp
c0013a7d:	e9 7a ff ff ff       	jmp    c00139fc <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013a82:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0013a86:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013a8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a8e:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0013a94:	83 ec 0c             	sub    esp,0xc
c0013a97:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0013a9d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013aa2:	05 00 10 00 00       	add    eax,0x1000
c0013aa7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013aae:	e8 f7 3f ff ff       	call   c0007aaa <free>
c0013ab3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ab6:	e8 ef 3f ff ff       	call   c0007aaa <free>
c0013abb:	58                   	pop    eax
c0013abc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ac0:	e8 e5 3f ff ff       	call   c0007aaa <free>
c0013ac5:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ac8:	e8 51 75 ff ff       	call   c000b01e <File::close()>
c0013acd:	83 c4 10             	add    esp,0x10
c0013ad0:	b0 01                	mov    al,0x1
c0013ad2:	83 c4 3c             	add    esp,0x3c
c0013ad5:	5b                   	pop    ebx
c0013ad6:	5e                   	pop    esi
c0013ad7:	5f                   	pop    edi
c0013ad8:	5d                   	pop    ebp
c0013ad9:	c3                   	ret    

c0013ada <Thr::runtimeReferenceHelper()>:
c0013ada:	83 ec 18             	sub    esp,0x18
c0013add:	68 35 0f 02 c0       	push   0xc0020f35
c0013ae2:	e8 9b 6e ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0013ae7:	fa                   	cli    
c0013ae8:	83 c4 10             	add    esp,0x10
c0013aeb:	eb fe                	jmp    c0013aeb <Thr::runtimeReferenceHelper()+0x11>

c0013aed <Thr::getAddressOfKernelSymbol(char const*)>:
c0013aed:	57                   	push   edi
c0013aee:	56                   	push   esi
c0013aef:	53                   	push   ebx
c0013af0:	31 db                	xor    ebx,ebx
c0013af2:	39 1d 40 81 02 c0    	cmp    DWORD PTR ds:0xc0028140,ebx
c0013af8:	7e 3c                	jle    c0013b36 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013afa:	8b 34 9d c0 80 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd7f40]
c0013b01:	31 ff                	xor    edi,edi
c0013b03:	39 3c 9d c0 7f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8040],edi
c0013b0a:	7e 27                	jle    c0013b33 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013b0c:	50                   	push   eax
c0013b0d:	50                   	push   eax
c0013b0e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b12:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b14:	03 04 9d 40 80 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd7fc0]
c0013b1b:	50                   	push   eax
c0013b1c:	e8 2f cc fe ff       	call   c0000750 <strcmp>
c0013b21:	83 c4 10             	add    esp,0x10
c0013b24:	85 c0                	test   eax,eax
c0013b26:	75 05                	jne    c0013b2d <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013b28:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013b2b:	eb 0b                	jmp    c0013b38 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013b2d:	83 c6 10             	add    esi,0x10
c0013b30:	47                   	inc    edi
c0013b31:	eb d0                	jmp    c0013b03 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013b33:	43                   	inc    ebx
c0013b34:	eb bc                	jmp    c0013af2 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013b36:	31 c0                	xor    eax,eax
c0013b38:	5b                   	pop    ebx
c0013b39:	5e                   	pop    esi
c0013b3a:	5f                   	pop    edi
c0013b3b:	c3                   	ret    

c0013b3c <Thr::loadKernelSymbolTable(char const*)>:
c0013b3c:	55                   	push   ebp
c0013b3d:	57                   	push   edi
c0013b3e:	56                   	push   esi
c0013b3f:	53                   	push   ebx
c0013b40:	83 ec 68             	sub    esp,0x68
c0013b43:	8b 35 90 81 02 c0    	mov    esi,DWORD PTR ds:0xc0028190
c0013b49:	68 14 01 00 00       	push   0x114
c0013b4e:	e8 47 3f ff ff       	call   c0007a9a <malloc>
c0013b53:	83 c4 0c             	add    esp,0xc
c0013b56:	89 c3                	mov    ebx,eax
c0013b58:	56                   	push   esi
c0013b59:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013b5d:	50                   	push   eax
c0013b5e:	e8 a1 73 ff ff       	call   c000af04 <File::File(char const*, Process*)>
c0013b63:	5e                   	pop    esi
c0013b64:	5f                   	pop    edi
c0013b65:	6a 01                	push   0x1
c0013b67:	53                   	push   ebx
c0013b68:	e8 53 74 ff ff       	call   c000afc0 <File::open(FileOpenMode)>
c0013b6d:	83 c4 10             	add    esp,0x10
c0013b70:	85 c0                	test   eax,eax
c0013b72:	74 0a                	je     c0013b7e <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013b74:	83 ec 0c             	sub    esp,0xc
c0013b77:	68 57 0f 02 c0       	push   0xc0020f57
c0013b7c:	eb 34                	jmp    c0013bb2 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013b7e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013b86:	83 ec 0c             	sub    esp,0xc
c0013b89:	6a 34                	push   0x34
c0013b8b:	e8 0a 3f ff ff       	call   c0007a9a <malloc>
c0013b90:	59                   	pop    ecx
c0013b91:	89 c7                	mov    edi,eax
c0013b93:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013b97:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b99:	56                   	push   esi
c0013b9a:	57                   	push   edi
c0013b9b:	6a 00                	push   0x0
c0013b9d:	6a 34                	push   0x34
c0013b9f:	53                   	push   ebx
c0013ba0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013ba3:	83 c4 20             	add    esp,0x20
c0013ba6:	85 c0                	test   eax,eax
c0013ba8:	74 17                	je     c0013bc1 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013baa:	83 ec 0c             	sub    esp,0xc
c0013bad:	68 6e 0f 02 c0       	push   0xc0020f6e
c0013bb2:	e8 a8 cc ff ff       	call   c001085f <KePanic(char const*)>
c0013bb7:	83 c4 10             	add    esp,0x10
c0013bba:	31 c0                	xor    eax,eax
c0013bbc:	e9 31 02 00 00       	jmp    c0013df2 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013bc1:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013bc7:	75 e1                	jne    c0013baa <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013bc9:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013bcc:	85 c0                	test   eax,eax
c0013bce:	74 da                	je     c0013baa <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013bd0:	52                   	push   edx
c0013bd1:	31 d2                	xor    edx,edx
c0013bd3:	52                   	push   edx
c0013bd4:	50                   	push   eax
c0013bd5:	53                   	push   ebx
c0013bd6:	e8 a3 74 ff ff       	call   c000b07e <File::seek(unsigned long long)>
c0013bdb:	83 c4 10             	add    esp,0x10
c0013bde:	85 c0                	test   eax,eax
c0013be0:	75 c8                	jne    c0013baa <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013be2:	83 ec 0c             	sub    esp,0xc
c0013be5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013be9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013bed:	31 ed                	xor    ebp,ebp
c0013bef:	0f af c2             	imul   eax,edx
c0013bf2:	50                   	push   eax
c0013bf3:	e8 a2 3e ff ff       	call   c0007a9a <malloc>
c0013bf8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013bfa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013bfe:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c05:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013c09:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013c0d:	0f af c2             	imul   eax,edx
c0013c10:	99                   	cdq    
c0013c11:	52                   	push   edx
c0013c12:	50                   	push   eax
c0013c13:	53                   	push   ebx
c0013c14:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013c17:	83 c4 20             	add    esp,0x20
c0013c1a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013c22:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013c2a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0013c32:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013c3a:	0f b7 f5             	movzx  esi,bp
c0013c3d:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0013c41:	0f 83 a7 00 00 00    	jae    c0013cee <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0013c47:	6b f6 28             	imul   esi,esi,0x28
c0013c4a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0013c4e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013c51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c55:	50                   	push   eax
c0013c56:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c5a:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013c5e:	8b 16                	mov    edx,DWORD PTR [esi]
c0013c60:	6b c0 28             	imul   eax,eax,0x28
c0013c63:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0013c67:	89 d0                	mov    eax,edx
c0013c69:	31 d2                	xor    edx,edx
c0013c6b:	52                   	push   edx
c0013c6c:	50                   	push   eax
c0013c6d:	53                   	push   ebx
c0013c6e:	e8 0b 74 ff ff       	call   c000b07e <File::seek(unsigned long long)>
c0013c73:	83 c4 0c             	add    esp,0xc
c0013c76:	6a 20                	push   0x20
c0013c78:	6a 00                	push   0x0
c0013c7a:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013c7e:	52                   	push   edx
c0013c7f:	e8 6c c8 fe ff       	call   c00004f0 <memset>
c0013c84:	58                   	pop    eax
c0013c85:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c87:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013c8b:	51                   	push   ecx
c0013c8c:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013c90:	52                   	push   edx
c0013c91:	6a 00                	push   0x0
c0013c93:	6a 1f                	push   0x1f
c0013c95:	53                   	push   ebx
c0013c96:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c99:	83 c4 18             	add    esp,0x18
c0013c9c:	68 85 0f 02 c0       	push   0xc0020f85
c0013ca1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013ca5:	52                   	push   edx
c0013ca6:	e8 a5 ca fe ff       	call   c0000750 <strcmp>
c0013cab:	83 c4 10             	add    esp,0x10
c0013cae:	85 c0                	test   eax,eax
c0013cb0:	75 0f                	jne    c0013cc1 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013cb2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013cb5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cb9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013cc1:	50                   	push   eax
c0013cc2:	50                   	push   eax
c0013cc3:	68 8d 0f 02 c0       	push   0xc0020f8d
c0013cc8:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013ccc:	50                   	push   eax
c0013ccd:	e8 7e ca fe ff       	call   c0000750 <strcmp>
c0013cd2:	83 c4 10             	add    esp,0x10
c0013cd5:	85 c0                	test   eax,eax
c0013cd7:	75 0f                	jne    c0013ce8 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013cd9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013cdc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ce0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ce4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013ce8:	45                   	inc    ebp
c0013ce9:	e9 4c ff ff ff       	jmp    c0013c3a <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013cee:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013cf3:	75 10                	jne    c0013d05 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0013cf5:	83 ec 0c             	sub    esp,0xc
c0013cf8:	68 95 0f 02 c0       	push   0xc0020f95
c0013cfd:	e8 5d cb ff ff       	call   c001085f <KePanic(char const*)>
c0013d02:	83 c4 10             	add    esp,0x10
c0013d05:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013d0a:	75 10                	jne    c0013d1c <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0013d0c:	83 ec 0c             	sub    esp,0xc
c0013d0f:	68 95 0f 02 c0       	push   0xc0020f95
c0013d14:	e8 46 cb ff ff       	call   c001085f <KePanic(char const*)>
c0013d19:	83 c4 10             	add    esp,0x10
c0013d1c:	31 d2                	xor    edx,edx
c0013d1e:	50                   	push   eax
c0013d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d23:	52                   	push   edx
c0013d24:	50                   	push   eax
c0013d25:	53                   	push   ebx
c0013d26:	e8 53 73 ff ff       	call   c000b07e <File::seek(unsigned long long)>
c0013d2b:	5a                   	pop    edx
c0013d2c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013d30:	e8 65 3d ff ff       	call   c0007a9a <malloc>
c0013d35:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013d39:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d3d:	31 c9                	xor    ecx,ecx
c0013d3f:	5e                   	pop    esi
c0013d40:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d42:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0013d46:	55                   	push   ebp
c0013d47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d4b:	51                   	push   ecx
c0013d4c:	52                   	push   edx
c0013d4d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0013d51:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0013d55:	53                   	push   ebx
c0013d56:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d59:	83 c4 14             	add    esp,0x14
c0013d5c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013d60:	e8 35 3d ff ff       	call   c0007a9a <malloc>
c0013d65:	89 c6                	mov    esi,eax
c0013d67:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d69:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013d6c:	56                   	push   esi
c0013d6d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013d71:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013d75:	51                   	push   ecx
c0013d76:	52                   	push   edx
c0013d77:	53                   	push   ebx
c0013d78:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013d7f:	8b 15 40 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028140
c0013d85:	83 c4 1c             	add    esp,0x1c
c0013d88:	c1 e8 04             	shr    eax,0x4
c0013d8b:	89 04 95 c0 7f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8040],eax
c0013d92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d96:	31 d2                	xor    edx,edx
c0013d98:	52                   	push   edx
c0013d99:	50                   	push   eax
c0013d9a:	53                   	push   ebx
c0013d9b:	e8 de 72 ff ff       	call   c000b07e <File::seek(unsigned long long)>
c0013da0:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013da2:	31 d2                	xor    edx,edx
c0013da4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013da7:	56                   	push   esi
c0013da8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013dac:	52                   	push   edx
c0013dad:	50                   	push   eax
c0013dae:	53                   	push   ebx
c0013daf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013db2:	83 c4 14             	add    esp,0x14
c0013db5:	53                   	push   ebx
c0013db6:	e8 63 72 ff ff       	call   c000b01e <File::close()>
c0013dbb:	5d                   	pop    ebp
c0013dbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013dc0:	e8 e5 3c ff ff       	call   c0007aaa <free>
c0013dc5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013dc8:	e8 dd 3c ff ff       	call   c0007aaa <free>
c0013dcd:	a1 40 81 02 c0       	mov    eax,ds:0xc0028140
c0013dd2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013dd6:	8d 50 01             	lea    edx,[eax+0x1]
c0013dd9:	89 0c 85 c0 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f40],ecx
c0013de0:	89 34 85 40 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7fc0],esi
c0013de7:	89 15 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edx
c0013ded:	83 c4 10             	add    esp,0x10
c0013df0:	b0 01                	mov    al,0x1
c0013df2:	83 c4 5c             	add    esp,0x5c
c0013df5:	5b                   	pop    ebx
c0013df6:	5e                   	pop    esi
c0013df7:	5f                   	pop    edi
c0013df8:	5d                   	pop    ebp
c0013df9:	c3                   	ret    

c0013dfa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0013dfa:	55                   	push   ebp
c0013dfb:	57                   	push   edi
c0013dfc:	56                   	push   esi
c0013dfd:	53                   	push   ebx
c0013dfe:	81 ec 68 03 00 00    	sub    esp,0x368
c0013e04:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0013e0b:	8b 1d 90 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028190
c0013e11:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0013e15:	68 14 01 00 00       	push   0x114
c0013e1a:	e8 7b 3c ff ff       	call   c0007a9a <malloc>
c0013e1f:	83 c4 0c             	add    esp,0xc
c0013e22:	89 c5                	mov    ebp,eax
c0013e24:	53                   	push   ebx
c0013e25:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0013e2c:	50                   	push   eax
c0013e2d:	e8 d2 70 ff ff       	call   c000af04 <File::File(char const*, Process*)>
c0013e32:	5e                   	pop    esi
c0013e33:	5f                   	pop    edi
c0013e34:	6a 01                	push   0x1
c0013e36:	55                   	push   ebp
c0013e37:	e8 84 71 ff ff       	call   c000afc0 <File::open(FileOpenMode)>
c0013e3c:	83 c4 10             	add    esp,0x10
c0013e3f:	85 c0                	test   eax,eax
c0013e41:	0f 85 aa 06 00 00    	jne    c00144f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013e47:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0013e4f:	83 ec 0c             	sub    esp,0xc
c0013e52:	6a 34                	push   0x34
c0013e54:	e8 41 3c ff ff       	call   c0007a9a <malloc>
c0013e59:	5b                   	pop    ebx
c0013e5a:	89 c7                	mov    edi,eax
c0013e5c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013e60:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013e63:	53                   	push   ebx
c0013e64:	57                   	push   edi
c0013e65:	6a 00                	push   0x0
c0013e67:	6a 34                	push   0x34
c0013e69:	55                   	push   ebp
c0013e6a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e6d:	83 c4 20             	add    esp,0x20
c0013e70:	85 c0                	test   eax,eax
c0013e72:	0f 85 79 06 00 00    	jne    c00144f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013e78:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013e7e:	0f 85 6d 06 00 00    	jne    c00144f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013e84:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013e87:	85 c0                	test   eax,eax
c0013e89:	0f 84 62 06 00 00    	je     c00144f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013e8f:	31 d2                	xor    edx,edx
c0013e91:	51                   	push   ecx
c0013e92:	52                   	push   edx
c0013e93:	50                   	push   eax
c0013e94:	55                   	push   ebp
c0013e95:	e8 e4 71 ff ff       	call   c000b07e <File::seek(unsigned long long)>
c0013e9a:	83 c4 10             	add    esp,0x10
c0013e9d:	85 c0                	test   eax,eax
c0013e9f:	0f 85 4c 06 00 00    	jne    c00144f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013ea5:	83 ec 0c             	sub    esp,0xc
c0013ea8:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0013eab:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013eaf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013eb3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013eb7:	0f af c2             	imul   eax,edx
c0013eba:	50                   	push   eax
c0013ebb:	e8 da 3b ff ff       	call   c0007a9a <malloc>
c0013ec0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013ec3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013ec7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013eca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ece:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013ed2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013ed6:	0f af c2             	imul   eax,edx
c0013ed9:	99                   	cdq    
c0013eda:	52                   	push   edx
c0013edb:	50                   	push   eax
c0013edc:	55                   	push   ebp
c0013edd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013ee0:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0013ee3:	83 c4 20             	add    esp,0x20
c0013ee6:	85 c0                	test   eax,eax
c0013ee8:	0f 84 03 06 00 00    	je     c00144f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013eee:	52                   	push   edx
c0013eef:	31 d2                	xor    edx,edx
c0013ef1:	52                   	push   edx
c0013ef2:	50                   	push   eax
c0013ef3:	55                   	push   ebp
c0013ef4:	e8 85 71 ff ff       	call   c000b07e <File::seek(unsigned long long)>
c0013ef9:	83 c4 10             	add    esp,0x10
c0013efc:	85 c0                	test   eax,eax
c0013efe:	0f 85 ed 05 00 00    	jne    c00144f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f04:	83 ec 0c             	sub    esp,0xc
c0013f07:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013f0b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013f0f:	31 f6                	xor    esi,esi
c0013f11:	0f af c2             	imul   eax,edx
c0013f14:	50                   	push   eax
c0013f15:	e8 80 3b ff ff       	call   c0007a9a <malloc>
c0013f1a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013f1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013f21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f24:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013f28:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0013f2c:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0013f30:	0f af c2             	imul   eax,edx
c0013f33:	99                   	cdq    
c0013f34:	52                   	push   edx
c0013f35:	50                   	push   eax
c0013f36:	55                   	push   ebp
c0013f37:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013f3a:	83 c4 20             	add    esp,0x20
c0013f3d:	0f b7 de             	movzx  ebx,si
c0013f40:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0013f44:	0f 83 87 00 00 00    	jae    c0013fd1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0013f4a:	c1 e3 05             	shl    ebx,0x5
c0013f4d:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0013f51:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0013f54:	75 75                	jne    c0013fcb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0013f56:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013f59:	31 d2                	xor    edx,edx
c0013f5b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013f5f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013f62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013f66:	50                   	push   eax
c0013f67:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013f6a:	52                   	push   edx
c0013f6b:	50                   	push   eax
c0013f6c:	55                   	push   ebp
c0013f6d:	e8 0c 71 ff ff       	call   c000b07e <File::seek(unsigned long long)>
c0013f72:	83 c4 10             	add    esp,0x10
c0013f75:	85 c0                	test   eax,eax
c0013f77:	0f 85 74 05 00 00    	jne    c00144f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0013f7d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0013f84:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013f87:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0013f8b:	31 d2                	xor    edx,edx
c0013f8d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013f91:	83 ec 0c             	sub    esp,0xc
c0013f94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013f98:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013f9f:	50                   	push   eax
c0013fa0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013fa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fa8:	52                   	push   edx
c0013fa9:	50                   	push   eax
c0013faa:	55                   	push   ebp
c0013fab:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013fae:	83 c4 1c             	add    esp,0x1c
c0013fb1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0013fb4:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0013fb7:	50                   	push   eax
c0013fb8:	6a 00                	push   0x0
c0013fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fbe:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0013fc2:	50                   	push   eax
c0013fc3:	e8 28 c5 fe ff       	call   c00004f0 <memset>
c0013fc8:	83 c4 10             	add    esp,0x10
c0013fcb:	46                   	inc    esi
c0013fcc:	e9 6c ff ff ff       	jmp    c0013f3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0013fd1:	53                   	push   ebx
c0013fd2:	31 db                	xor    ebx,ebx
c0013fd4:	68 00 01 00 00       	push   0x100
c0013fd9:	6a 00                	push   0x0
c0013fdb:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0013fdf:	50                   	push   eax
c0013fe0:	e8 0b c5 fe ff       	call   c00004f0 <memset>
c0013fe5:	83 c4 0c             	add    esp,0xc
c0013fe8:	68 00 01 00 00       	push   0x100
c0013fed:	6a 00                	push   0x0
c0013fef:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0013ff6:	50                   	push   eax
c0013ff7:	e8 f4 c4 fe ff       	call   c00004f0 <memset>
c0013ffc:	83 c4 10             	add    esp,0x10
c0013fff:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014007:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001400f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014017:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001401f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014027:	0f b7 f3             	movzx  esi,bx
c001402a:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c001402e:	0f 83 2d 01 00 00    	jae    c0014161 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0014034:	6b f6 28             	imul   esi,esi,0x28
c0014037:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001403b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001403e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014042:	52                   	push   edx
c0014043:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014047:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001404b:	8b 06                	mov    eax,DWORD PTR [esi]
c001404d:	6b d2 28             	imul   edx,edx,0x28
c0014050:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014054:	31 d2                	xor    edx,edx
c0014056:	52                   	push   edx
c0014057:	50                   	push   eax
c0014058:	55                   	push   ebp
c0014059:	e8 20 70 ff ff       	call   c000b07e <File::seek(unsigned long long)>
c001405e:	83 c4 0c             	add    esp,0xc
c0014061:	6a 20                	push   0x20
c0014063:	6a 00                	push   0x0
c0014065:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001406c:	51                   	push   ecx
c001406d:	e8 7e c4 fe ff       	call   c00004f0 <memset>
c0014072:	59                   	pop    ecx
c0014073:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014076:	8d 54 24 58          	lea    edx,[esp+0x58]
c001407a:	52                   	push   edx
c001407b:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014082:	51                   	push   ecx
c0014083:	6a 00                	push   0x0
c0014085:	6a 1f                	push   0x1f
c0014087:	55                   	push   ebp
c0014088:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001408b:	83 c4 1c             	add    esp,0x1c
c001408e:	6a 09                	push   0x9
c0014090:	68 af 0f 02 c0       	push   0xc0020faf
c0014095:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001409c:	51                   	push   ecx
c001409d:	e8 de c2 fe ff       	call   c0000380 <memcmp>
c00140a2:	83 c4 10             	add    esp,0x10
c00140a5:	85 c0                	test   eax,eax
c00140a7:	75 21                	jne    c00140ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00140a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00140b1:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00140b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00140b9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00140bc:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00140c3:	89 d0                	mov    eax,edx
c00140c5:	40                   	inc    eax
c00140c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00140ca:	50                   	push   eax
c00140cb:	6a 09                	push   0x9
c00140cd:	68 b9 0f 02 c0       	push   0xc0020fb9
c00140d2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00140d9:	50                   	push   eax
c00140da:	e8 a1 c2 fe ff       	call   c0000380 <memcmp>
c00140df:	83 c4 10             	add    esp,0x10
c00140e2:	85 c0                	test   eax,eax
c00140e4:	75 21                	jne    c0014107 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00140e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140ea:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00140ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00140f2:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c00140f6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00140f9:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014100:	89 d0                	mov    eax,edx
c0014102:	40                   	inc    eax
c0014103:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014107:	50                   	push   eax
c0014108:	50                   	push   eax
c0014109:	68 85 0f 02 c0       	push   0xc0020f85
c001410e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014115:	50                   	push   eax
c0014116:	e8 35 c6 fe ff       	call   c0000750 <strcmp>
c001411b:	83 c4 10             	add    esp,0x10
c001411e:	85 c0                	test   eax,eax
c0014120:	75 0f                	jne    c0014131 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0014122:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014125:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014129:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001412d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014131:	50                   	push   eax
c0014132:	50                   	push   eax
c0014133:	68 8d 0f 02 c0       	push   0xc0020f8d
c0014138:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001413f:	50                   	push   eax
c0014140:	e8 0b c6 fe ff       	call   c0000750 <strcmp>
c0014145:	83 c4 10             	add    esp,0x10
c0014148:	85 c0                	test   eax,eax
c001414a:	75 0f                	jne    c001415b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001414c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001414f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014153:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014157:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001415b:	43                   	inc    ebx
c001415c:	e9 c6 fe ff ff       	jmp    c0014027 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014161:	31 d2                	xor    edx,edx
c0014163:	50                   	push   eax
c0014164:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014168:	52                   	push   edx
c0014169:	50                   	push   eax
c001416a:	55                   	push   ebp
c001416b:	e8 0e 6f ff ff       	call   c000b07e <File::seek(unsigned long long)>
c0014170:	58                   	pop    eax
c0014171:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014175:	e8 20 39 ff ff       	call   c0007a9a <malloc>
c001417a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001417d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014181:	31 d2                	xor    edx,edx
c0014183:	58                   	pop    eax
c0014184:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014188:	53                   	push   ebx
c0014189:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001418d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014191:	52                   	push   edx
c0014192:	50                   	push   eax
c0014193:	55                   	push   ebp
c0014194:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014197:	83 c4 14             	add    esp,0x14
c001419a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001419e:	e8 f7 38 ff ff       	call   c0007a9a <malloc>
c00141a3:	31 d2                	xor    edx,edx
c00141a5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00141a9:	83 c4 0c             	add    esp,0xc
c00141ac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00141b0:	52                   	push   edx
c00141b1:	50                   	push   eax
c00141b2:	55                   	push   ebp
c00141b3:	e8 c6 6e ff ff       	call   c000b07e <File::seek(unsigned long long)>
c00141b8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00141bb:	31 d2                	xor    edx,edx
c00141bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00141c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00141c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00141c8:	52                   	push   edx
c00141c9:	50                   	push   eax
c00141ca:	55                   	push   ebp
c00141cb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141ce:	83 c4 20             	add    esp,0x20
c00141d1:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c00141d6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00141de:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00141e2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141e6:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00141ea:	0f 84 05 03 00 00    	je     c00144f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c00141f0:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00141f7:	31 d2                	xor    edx,edx
c00141f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00141fd:	c1 e8 03             	shr    eax,0x3
c0014200:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0014204:	51                   	push   ecx
c0014205:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014209:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001420d:	52                   	push   edx
c001420e:	50                   	push   eax
c001420f:	55                   	push   ebp
c0014210:	e8 69 6e ff ff       	call   c000b07e <File::seek(unsigned long long)>
c0014215:	5b                   	pop    ebx
c0014216:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001421a:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014221:	e8 74 38 ff ff       	call   c0007a9a <malloc>
c0014226:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014229:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001422d:	31 d2                	xor    edx,edx
c001422f:	5e                   	pop    esi
c0014230:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014234:	50                   	push   eax
c0014235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014239:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001423d:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014244:	52                   	push   edx
c0014245:	50                   	push   eax
c0014246:	55                   	push   ebp
c0014247:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001424a:	83 c4 20             	add    esp,0x20
c001424d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014255:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014259:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c001425d:	0f 8d 76 02 00 00    	jge    c00144d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0014263:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014267:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001426b:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014270:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0014273:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014277:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001427b:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c001427f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014283:	c1 e8 08             	shr    eax,0x8
c0014286:	89 c6                	mov    esi,eax
c0014288:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001428c:	c1 e6 04             	shl    esi,0x4
c001428f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014293:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0014296:	85 db                	test   ebx,ebx
c0014298:	0f 85 b3 00 00 00    	jne    c0014351 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001429e:	83 ec 0c             	sub    esp,0xc
c00142a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00142a5:	03 06                	add    eax,DWORD PTR [esi]
c00142a7:	50                   	push   eax
c00142a8:	e8 40 f8 ff ff       	call   c0013aed <Thr::getAddressOfKernelSymbol(char const*)>
c00142ad:	83 c4 10             	add    esp,0x10
c00142b0:	89 c3                	mov    ebx,eax
c00142b2:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c00142b7:	85 c0                	test   eax,eax
c00142b9:	0f 85 92 00 00 00    	jne    c0014351 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00142bf:	83 ec 0c             	sub    esp,0xc
c00142c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00142c6:	03 06                	add    eax,DWORD PTR [esi]
c00142c8:	50                   	push   eax
c00142c9:	e8 7e c7 ff ff       	call   c0010a4c <KeResolveCompatibilitySymbol(char*)>
c00142ce:	83 c4 10             	add    esp,0x10
c00142d1:	89 c3                	mov    ebx,eax
c00142d3:	85 c0                	test   eax,eax
c00142d5:	75 7a                	jne    c0014351 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00142d7:	51                   	push   ecx
c00142d8:	51                   	push   ecx
c00142d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00142dd:	03 06                	add    eax,DWORD PTR [esi]
c00142df:	50                   	push   eax
c00142e0:	68 c3 0f 02 c0       	push   0xc0020fc3
c00142e5:	e8 98 66 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c00142ea:	58                   	pop    eax
c00142eb:	5a                   	pop    edx
c00142ec:	68 dd 0f 02 c0       	push   0xc0020fdd
c00142f1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00142f8:	50                   	push   eax
c00142f9:	e8 42 c3 fe ff       	call   c0000640 <strcpy>
c00142fe:	59                   	pop    ecx
c00142ff:	58                   	pop    eax
c0014300:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014304:	03 06                	add    eax,DWORD PTR [esi]
c0014306:	50                   	push   eax
c0014307:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001430e:	50                   	push   eax
c001430f:	e8 2c c5 fe ff       	call   c0000840 <strcat>
c0014314:	58                   	pop    eax
c0014315:	5a                   	pop    edx
c0014316:	68 73 10 02 c0       	push   0xc0021073
c001431b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014322:	50                   	push   eax
c0014323:	e8 18 c5 fe ff       	call   c0000840 <strcat>
c0014328:	83 c4 10             	add    esp,0x10
c001432b:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014330:	0f 84 5d 01 00 00    	je     c0014493 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014336:	83 ec 0c             	sub    esp,0xc
c0014339:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014340:	50                   	push   eax
c0014341:	e8 19 c5 ff ff       	call   c001085f <KePanic(char const*)>
c0014346:	83 c4 10             	add    esp,0x10
c0014349:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001434d:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0014351:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0014356:	83 f8 01             	cmp    eax,0x1
c0014359:	0f 85 8f 00 00 00    	jne    c00143ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c001435f:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014366:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001436a:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c001436e:	01 ce                	add    esi,ecx
c0014370:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014378:	0f 94 c0             	sete   al
c001437b:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014383:	0f 94 c2             	sete   dl
c0014386:	09 c2                	or     edx,eax
c0014388:	8b 06                	mov    eax,DWORD PTR [esi]
c001438a:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c001438f:	0f b6 d2             	movzx  edx,dl
c0014392:	74 41                	je     c00143d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0014394:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0014397:	85 d2                	test   edx,edx
c0014399:	75 15                	jne    c00143b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c001439b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001439f:	66 83 f8 0c          	cmp    ax,0xc
c00143a3:	76 05                	jbe    c00143aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c00143a5:	b8 0c 00 00 00       	mov    eax,0xc
c00143aa:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00143ae:	76 37                	jbe    c00143e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00143b0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00143b4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00143b9:	0f 84 d4 00 00 00    	je     c0014493 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00143bf:	83 ec 0c             	sub    esp,0xc
c00143c2:	68 f4 0f 02 c0       	push   0xc0020ff4
c00143c7:	e8 93 c4 ff ff       	call   c001085f <KePanic(char const*)>
c00143cc:	83 c4 10             	add    esp,0x10
c00143cf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00143d3:	eb 12                	jmp    c00143e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00143d5:	01 c1                	add    ecx,eax
c00143d7:	85 d2                	test   edx,edx
c00143d9:	75 0c                	jne    c00143e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00143db:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00143df:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00143e3:	77 02                	ja     c00143e7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00143e5:	01 d9                	add    ecx,ebx
c00143e7:	89 0e                	mov    DWORD PTR [esi],ecx
c00143e9:	e9 e2 00 00 00       	jmp    c00144d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00143ee:	83 f8 02             	cmp    eax,0x2
c00143f1:	75 77                	jne    c001446a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c00143f3:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00143fa:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c00143fe:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0014402:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001440a:	74 21                	je     c001442d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c001440c:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014414:	74 17                	je     c001442d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014416:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c001441a:	b8 0a 00 00 00       	mov    eax,0xa
c001441f:	83 fa 0e             	cmp    edx,0xe
c0014422:	77 03                	ja     c0014427 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0014424:	8d 42 fc             	lea    eax,[edx-0x4]
c0014427:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001442b:	76 17                	jbe    c0014444 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001442d:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014432:	74 5f                	je     c0014493 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014434:	83 ec 0c             	sub    esp,0xc
c0014437:	68 10 10 02 c0       	push   0xc0021010
c001443c:	e8 1e c4 ff ff       	call   c001085f <KePanic(char const*)>
c0014441:	83 c4 10             	add    esp,0x10
c0014444:	8b 06                	mov    eax,DWORD PTR [esi]
c0014446:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c001444b:	74 13                	je     c0014460 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c001444d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014451:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0014458:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c001445c:	01 d0                	add    eax,edx
c001445e:	eb 04                	jmp    c0014464 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0014460:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0014464:	01 c3                	add    ebx,eax
c0014466:	89 1e                	mov    DWORD PTR [esi],ebx
c0014468:	eb 66                	jmp    c00144d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001446a:	52                   	push   edx
c001446b:	52                   	push   edx
c001446c:	50                   	push   eax
c001446d:	68 2c 10 02 c0       	push   0xc002102c
c0014472:	e8 0b 65 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0014477:	83 c4 10             	add    esp,0x10
c001447a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001447f:	74 12                	je     c0014493 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014481:	83 ec 0c             	sub    esp,0xc
c0014484:	68 37 10 02 c0       	push   0xc0021037
c0014489:	e8 d1 c3 ff ff       	call   c001085f <KePanic(char const*)>
c001448e:	83 c4 10             	add    esp,0x10
c0014491:	eb 3d                	jmp    c00144d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014493:	83 ec 0c             	sub    esp,0xc
c0014496:	55                   	push   ebp
c0014497:	e8 82 6b ff ff       	call   c000b01e <File::close()>
c001449c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001449f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00144a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00144a5:	59                   	pop    ecx
c00144a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144aa:	e8 fb 35 ff ff       	call   c0007aaa <free>
c00144af:	5b                   	pop    ebx
c00144b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00144b4:	e8 f1 35 ff ff       	call   c0007aaa <free>
c00144b9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00144bc:	e8 e9 35 ff ff       	call   c0007aaa <free>
c00144c1:	5e                   	pop    esi
c00144c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144c6:	e8 df 35 ff ff       	call   c0007aaa <free>
c00144cb:	83 c4 10             	add    esp,0x10
c00144ce:	eb 21                	jmp    c00144f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00144d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00144d4:	e9 7c fd ff ff       	jmp    c0014255 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c00144d9:	83 ec 0c             	sub    esp,0xc
c00144dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144e0:	e8 c5 35 ff ff       	call   c0007aaa <free>
c00144e5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00144e9:	83 c4 10             	add    esp,0x10
c00144ec:	e9 f1 fc ff ff       	jmp    c00141e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c00144f1:	31 c0                	xor    eax,eax
c00144f3:	eb 33                	jmp    c0014528 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c00144f5:	83 ec 0c             	sub    esp,0xc
c00144f8:	55                   	push   ebp
c00144f9:	e8 20 6b ff ff       	call   c000b01e <File::close()>
c00144fe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014501:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014504:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014507:	58                   	pop    eax
c0014508:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001450c:	e8 99 35 ff ff       	call   c0007aaa <free>
c0014511:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014514:	e8 91 35 ff ff       	call   c0007aaa <free>
c0014519:	5a                   	pop    edx
c001451a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001451e:	e8 87 35 ff ff       	call   c0007aaa <free>
c0014523:	83 c4 10             	add    esp,0x10
c0014526:	b0 01                	mov    al,0x1
c0014528:	81 c4 5c 03 00 00    	add    esp,0x35c
c001452e:	5b                   	pop    ebx
c001452f:	5e                   	pop    esi
c0014530:	5f                   	pop    edi
c0014531:	5d                   	pop    ebp
c0014532:	c3                   	ret    

c0014533 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014533:	56                   	push   esi
c0014534:	31 d2                	xor    edx,edx
c0014536:	53                   	push   ebx
c0014537:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c001453d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014541:	39 d3                	cmp    ebx,edx
c0014543:	7e 1b                	jle    c0014560 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014545:	8b 04 95 c0 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8440]
c001454c:	39 c8                	cmp    eax,ecx
c001454e:	77 0d                	ja     c001455d <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014550:	8b 34 95 c0 79 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8640]
c0014557:	01 c6                	add    esi,eax
c0014559:	39 ce                	cmp    esi,ecx
c001455b:	77 05                	ja     c0014562 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001455d:	42                   	inc    edx
c001455e:	eb e1                	jmp    c0014541 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014560:	31 c0                	xor    eax,eax
c0014562:	5b                   	pop    ebx
c0014563:	5e                   	pop    esi
c0014564:	c3                   	ret    

c0014565 <Thr::getDriverNameFromAddress(unsigned long)>:
c0014565:	53                   	push   ebx
c0014566:	31 c0                	xor    eax,eax
c0014568:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001456c:	8b 1d a0 79 02 c0    	mov    ebx,DWORD PTR ds:0xc00279a0
c0014572:	39 c3                	cmp    ebx,eax
c0014574:	7e 22                	jle    c0014598 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0014576:	8b 14 85 c0 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8440]
c001457d:	39 ca                	cmp    edx,ecx
c001457f:	77 14                	ja     c0014595 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014581:	03 14 85 c0 79 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8640]
c0014588:	39 ca                	cmp    edx,ecx
c001458a:	76 09                	jbe    c0014595 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001458c:	8b 04 85 c0 7d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8240]
c0014593:	eb 05                	jmp    c001459a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0014595:	40                   	inc    eax
c0014596:	eb da                	jmp    c0014572 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0014598:	31 c0                	xor    eax,eax
c001459a:	5b                   	pop    ebx
c001459b:	c3                   	ret    

c001459c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001459c:	53                   	push   ebx
c001459d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00145a1:	53                   	push   ebx
c00145a2:	e8 8c ff ff ff       	call   c0014533 <Thr::getDriverBaseFromAddress(unsigned long)>
c00145a7:	5a                   	pop    edx
c00145a8:	31 d2                	xor    edx,edx
c00145aa:	85 c0                	test   eax,eax
c00145ac:	74 04                	je     c00145b2 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00145ae:	89 da                	mov    edx,ebx
c00145b0:	29 c2                	sub    edx,eax
c00145b2:	89 d0                	mov    eax,edx
c00145b4:	5b                   	pop    ebx
c00145b5:	c3                   	ret    

c00145b6 <Thr::loadDLL(char const*, bool)>:
c00145b6:	55                   	push   ebp
c00145b7:	57                   	push   edi
c00145b8:	56                   	push   esi
c00145b9:	53                   	push   ebx
c00145ba:	81 ec 34 01 00 00    	sub    esp,0x134
c00145c0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00145c7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00145ce:	56                   	push   esi
c00145cf:	68 4f 10 02 c0       	push   0xc002104f
c00145d4:	e8 a9 63 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c00145d9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00145e0:	e8 b5 34 ff ff       	call   c0007a9a <malloc>
c00145e5:	83 c4 0c             	add    esp,0xc
c00145e8:	89 c3                	mov    ebx,eax
c00145ea:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c00145f0:	56                   	push   esi
c00145f1:	50                   	push   eax
c00145f2:	e8 0d 69 ff ff       	call   c000af04 <File::File(char const*, Process*)>
c00145f7:	83 c4 10             	add    esp,0x10
c00145fa:	85 db                	test   ebx,ebx
c00145fc:	75 3c                	jne    c001463a <Thr::loadDLL(char const*, bool)+0x84>
c00145fe:	89 f8                	mov    eax,edi
c0014600:	84 c0                	test   al,al
c0014602:	0f 84 d2 01 00 00    	je     c00147da <Thr::loadDLL(char const*, bool)+0x224>
c0014608:	55                   	push   ebp
c0014609:	55                   	push   ebp
c001460a:	68 60 10 02 c0       	push   0xc0021060
c001460f:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0014613:	55                   	push   ebp
c0014614:	e8 27 c0 fe ff       	call   c0000640 <strcpy>
c0014619:	58                   	pop    eax
c001461a:	5a                   	pop    edx
c001461b:	56                   	push   esi
c001461c:	55                   	push   ebp
c001461d:	e8 1e c2 fe ff       	call   c0000840 <strcat>
c0014622:	59                   	pop    ecx
c0014623:	58                   	pop    eax
c0014624:	68 73 10 02 c0       	push   0xc0021073
c0014629:	55                   	push   ebp
c001462a:	e8 11 c2 fe ff       	call   c0000840 <strcat>
c001462f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014632:	e8 28 c2 ff ff       	call   c001085f <KePanic(char const*)>
c0014637:	83 c4 10             	add    esp,0x10
c001463a:	51                   	push   ecx
c001463b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001463f:	50                   	push   eax
c0014640:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014644:	50                   	push   eax
c0014645:	53                   	push   ebx
c0014646:	e8 21 6c ff ff       	call   c000b26c <File::stat(unsigned long long*, bool*)>
c001464b:	83 c4 10             	add    esp,0x10
c001464e:	85 db                	test   ebx,ebx
c0014650:	74 0c                	je     c001465e <Thr::loadDLL(char const*, bool)+0xa8>
c0014652:	83 ec 0c             	sub    esp,0xc
c0014655:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014657:	53                   	push   ebx
c0014658:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001465b:	83 c4 10             	add    esp,0x10
c001465e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014663:	75 0a                	jne    c001466f <Thr::loadDLL(char const*, bool)+0xb9>
c0014665:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014669:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001466d:	75 3c                	jne    c00146ab <Thr::loadDLL(char const*, bool)+0xf5>
c001466f:	89 f8                	mov    eax,edi
c0014671:	84 c0                	test   al,al
c0014673:	0f 84 49 01 00 00    	je     c00147c2 <Thr::loadDLL(char const*, bool)+0x20c>
c0014679:	51                   	push   ecx
c001467a:	51                   	push   ecx
c001467b:	68 60 10 02 c0       	push   0xc0021060
c0014680:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014684:	53                   	push   ebx
c0014685:	e8 b6 bf fe ff       	call   c0000640 <strcpy>
c001468a:	5d                   	pop    ebp
c001468b:	58                   	pop    eax
c001468c:	56                   	push   esi
c001468d:	53                   	push   ebx
c001468e:	e8 ad c1 fe ff       	call   c0000840 <strcat>
c0014693:	58                   	pop    eax
c0014694:	5a                   	pop    edx
c0014695:	68 73 10 02 c0       	push   0xc0021073
c001469a:	53                   	push   ebx
c001469b:	e8 a0 c1 fe ff       	call   c0000840 <strcat>
c00146a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146a3:	e8 b7 c1 ff ff       	call   c001085f <KePanic(char const*)>
c00146a8:	83 c4 10             	add    esp,0x10
c00146ab:	52                   	push   edx
c00146ac:	6a 03                	push   0x3
c00146ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146b2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00146b6:	05 ff 0f 00 00       	add    eax,0xfff
c00146bb:	83 d2 00             	adc    edx,0x0
c00146be:	0f ac d0 0c          	shrd   eax,edx,0xc
c00146c2:	50                   	push   eax
c00146c3:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c00146c9:	e8 28 57 ff ff       	call   c0009df6 <VAS::allocatePages(int, int)>
c00146ce:	59                   	pop    ecx
c00146cf:	89 c3                	mov    ebx,eax
c00146d1:	5d                   	pop    ebp
c00146d2:	50                   	push   eax
c00146d3:	68 ee fb 01 c0       	push   0xc001fbee
c00146d8:	e8 a5 62 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c00146dd:	89 34 24             	mov    DWORD PTR [esp],esi
c00146e0:	e8 8b be fe ff       	call   c0000570 <strlen>
c00146e5:	8b 2d a0 79 02 c0    	mov    ebp,DWORD PTR ds:0xc00279a0
c00146eb:	40                   	inc    eax
c00146ec:	89 04 24             	mov    DWORD PTR [esp],eax
c00146ef:	e8 a6 33 ff ff       	call   c0007a9a <malloc>
c00146f4:	89 04 ad c0 7d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8240],eax
c00146fb:	58                   	pop    eax
c00146fc:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014701:	5a                   	pop    edx
c0014702:	56                   	push   esi
c0014703:	ff 34 85 c0 7d 02 c0 	push   DWORD PTR [eax*4-0x3ffd8240]
c001470a:	e8 31 bf fe ff       	call   c0000640 <strcpy>
c001470f:	a1 a0 79 02 c0       	mov    eax,ds:0xc00279a0
c0014714:	8d 50 01             	lea    edx,[eax+0x1]
c0014717:	89 1c 85 c0 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8440],ebx
c001471e:	89 15 a0 79 02 c0    	mov    DWORD PTR ds:0xc00279a0,edx
c0014724:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014728:	83 c4 0c             	add    esp,0xc
c001472b:	89 14 85 c0 79 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8640],edx
c0014732:	6a 01                	push   0x1
c0014734:	53                   	push   ebx
c0014735:	56                   	push   esi
c0014736:	e8 bf f6 ff ff       	call   c0013dfa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001473b:	83 c4 10             	add    esp,0x10
c001473e:	0f b6 c0             	movzx  eax,al
c0014741:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014745:	85 c0                	test   eax,eax
c0014747:	0f 85 89 00 00 00    	jne    c00147d6 <Thr::loadDLL(char const*, bool)+0x220>
c001474d:	89 f8                	mov    eax,edi
c001474f:	84 c0                	test   al,al
c0014751:	74 73                	je     c00147c6 <Thr::loadDLL(char const*, bool)+0x210>
c0014753:	83 ec 0c             	sub    esp,0xc
c0014756:	68 75 10 02 c0       	push   0xc0021075
c001475b:	e8 ff c0 ff ff       	call   c001085f <KePanic(char const*)>
c0014760:	83 c4 10             	add    esp,0x10
c0014763:	eb 61                	jmp    c00147c6 <Thr::loadDLL(char const*, bool)+0x210>
c0014765:	50                   	push   eax
c0014766:	50                   	push   eax
c0014767:	89 e8                	mov    eax,ebp
c0014769:	c1 e0 0c             	shl    eax,0xc
c001476c:	01 d8                	add    eax,ebx
c001476e:	50                   	push   eax
c001476f:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c0014775:	e8 8c 51 ff ff       	call   c0009906 <VAS::getPageTableEntry(unsigned long)>
c001477a:	83 c4 10             	add    esp,0x10
c001477d:	8b 00                	mov    eax,DWORD PTR [eax]
c001477f:	a8 60                	test   al,0x60
c0014781:	75 11                	jne    c0014794 <Thr::loadDLL(char const*, bool)+0x1de>
c0014783:	83 ec 0c             	sub    esp,0xc
c0014786:	25 00 f0 ff ff       	and    eax,0xfffff000
c001478b:	50                   	push   eax
c001478c:	e8 a5 35 ff ff       	call   c0007d36 <Phys::freePage(unsigned long)>
c0014791:	83 c4 10             	add    esp,0x10
c0014794:	45                   	inc    ebp
c0014795:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014799:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001479d:	05 ff 0f 00 00       	add    eax,0xfff
c00147a2:	bf 00 00 00 00       	mov    edi,0x0
c00147a7:	83 d2 00             	adc    edx,0x0
c00147aa:	0f ac d0 0c          	shrd   eax,edx,0xc
c00147ae:	c1 ea 0c             	shr    edx,0xc
c00147b1:	39 c5                	cmp    ebp,eax
c00147b3:	89 d1                	mov    ecx,edx
c00147b5:	89 f8                	mov    eax,edi
c00147b7:	19 c8                	sbb    eax,ecx
c00147b9:	72 aa                	jb     c0014765 <Thr::loadDLL(char const*, bool)+0x1af>
c00147bb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00147c0:	75 18                	jne    c00147da <Thr::loadDLL(char const*, bool)+0x224>
c00147c2:	31 db                	xor    ebx,ebx
c00147c4:	eb 14                	jmp    c00147da <Thr::loadDLL(char const*, bool)+0x224>
c00147c6:	83 ec 0c             	sub    esp,0xc
c00147c9:	68 94 10 02 c0       	push   0xc0021094
c00147ce:	e8 8c c0 ff ff       	call   c001085f <KePanic(char const*)>
c00147d3:	83 c4 10             	add    esp,0x10
c00147d6:	31 ed                	xor    ebp,ebp
c00147d8:	eb bb                	jmp    c0014795 <Thr::loadDLL(char const*, bool)+0x1df>
c00147da:	81 c4 2c 01 00 00    	add    esp,0x12c
c00147e0:	89 d8                	mov    eax,ebx
c00147e2:	5b                   	pop    ebx
c00147e3:	5e                   	pop    esi
c00147e4:	5f                   	pop    edi
c00147e5:	5d                   	pop    ebp
c00147e6:	c3                   	ret    

c00147e7 <Thr::executeDLL(unsigned long, void*)>:
c00147e7:	56                   	push   esi
c00147e8:	53                   	push   ebx
c00147e9:	52                   	push   edx
c00147ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00147ee:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00147f2:	85 db                	test   ebx,ebx
c00147f4:	75 10                	jne    c0014806 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00147f6:	83 ec 0c             	sub    esp,0xc
c00147f9:	68 b0 10 02 c0       	push   0xc00210b0
c00147fe:	e8 5c c0 ff ff       	call   c001085f <KePanic(char const*)>
c0014803:	83 c4 10             	add    esp,0x10
c0014806:	50                   	push   eax
c0014807:	50                   	push   eax
c0014808:	53                   	push   ebx
c0014809:	68 da 10 02 c0       	push   0xc00210da
c001480e:	e8 6f 61 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0014813:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014817:	89 d8                	mov    eax,ebx
c0014819:	83 c4 14             	add    esp,0x14
c001481c:	5b                   	pop    ebx
c001481d:	5e                   	pop    esi
c001481e:	ff e0                	jmp    eax

c0014820 <userModeEntryPoint(void*)>:
c0014820:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0014825:	83 e8 01             	sub    eax,0x1
c0014828:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001482d:	75 01                	jne    c0014830 <userModeEntryPoint(void*)+0x10>
c001482f:	fb                   	sti    
c0014830:	fb                   	sti    
c0014831:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014836:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014839:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001483f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014843:	e9 f7 b9 fe ff       	jmp    c000023f <goToUsermode>

c0014848 <changeTSS>:
c0014848:	83 ec 14             	sub    esp,0x14
c001484b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014850:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014853:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014858:	c1 e2 15             	shl    edx,0x15
c001485b:	29 d0                	sub    eax,edx
c001485d:	50                   	push   eax
c001485e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0014863:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014869:	05 7c 11 00 00       	add    eax,0x117c
c001486e:	50                   	push   eax
c001486f:	e8 dc 46 ff ff       	call   c0008f50 <TSS::setESP(unsigned long)>
c0014874:	83 c4 1c             	add    esp,0x1c
c0014877:	c3                   	ret    

c0014878 <switchToThread(ThreadControlBlock*)>:
c0014878:	57                   	push   edi
c0014879:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c001487f:	56                   	push   esi
c0014880:	85 c9                	test   ecx,ecx
c0014882:	53                   	push   ebx
c0014883:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014887:	0f 85 8b 00 00 00    	jne    c0014918 <switchToThread(ThreadControlBlock*)+0xa0>
c001488d:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014891:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014897:	74 7b                	je     c0014914 <switchToThread(ThreadControlBlock*)+0x9c>
c0014899:	b8 00 04 00 00       	mov    eax,0x400
c001489e:	29 d0                	sub    eax,edx
c00148a0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00148a3:	d1 f8                	sar    eax,1
c00148a5:	01 d0                	add    eax,edx
c00148a7:	90                   	nop
c00148a8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00148ab:	e8 97 27 00 00       	call   c0017047 <HalQueryPerformanceCounter()>
c00148b0:	a3 a8 81 02 c0       	mov    ds:0xc00281a8,eax
c00148b5:	89 15 ac 81 02 c0    	mov    DWORD PTR ds:0xc00281ac,edx
c00148bb:	89 c6                	mov    esi,eax
c00148bd:	89 d7                	mov    edi,edx
c00148bf:	2b 35 98 81 02 c0    	sub    esi,DWORD PTR ds:0xc0028198
c00148c5:	a3 98 81 02 c0       	mov    ds:0xc0028198,eax
c00148ca:	1b 3d 9c 81 02 c0    	sbb    edi,DWORD PTR ds:0xc002819c
c00148d0:	89 35 a0 81 02 c0    	mov    DWORD PTR ds:0xc00281a0,esi
c00148d6:	89 3d a4 81 02 c0    	mov    DWORD PTR ds:0xc00281a4,edi
c00148dc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00148e2:	89 15 9c 81 02 c0    	mov    DWORD PTR ds:0xc002819c,edx
c00148e8:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00148eb:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00148ee:	01 c6                	add    esi,eax
c00148f0:	11 d7                	adc    edi,edx
c00148f2:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00148f5:	83 ec 0c             	sub    esp,0xc
c00148f8:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00148fb:	53                   	push   ebx
c00148fc:	e8 76 b9 fe ff       	call   c0000277 <switchToThreadASM>
c0014901:	0f 20 c0             	mov    eax,cr0
c0014904:	83 c8 08             	or     eax,0x8
c0014907:	0f 22 c0             	mov    cr0,eax
c001490a:	83 c4 10             	add    esp,0x10
c001490d:	5b                   	pop    ebx
c001490e:	5e                   	pop    esi
c001490f:	5f                   	pop    edi
c0014910:	c3                   	ret    
c0014911:	8d 76 00             	lea    esi,[esi+0x0]
c0014914:	31 c0                	xor    eax,eax
c0014916:	eb 90                	jmp    c00148a8 <switchToThread(ThreadControlBlock*)+0x30>
c0014918:	5b                   	pop    ebx
c0014919:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c0014923:	5e                   	pop    esi
c0014924:	5f                   	pop    edi
c0014925:	c3                   	ret    
c0014926:	66 90                	xchg   ax,ax

c0014928 <Process::addArgs(char**)>:
c0014928:	57                   	push   edi
c0014929:	56                   	push   esi
c001492a:	53                   	push   ebx
c001492b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001492f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0014933:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c001493d:	85 ff                	test   edi,edi
c001493f:	74 4f                	je     c0014990 <Process::addArgs(char**)+0x68>
c0014941:	8b 07                	mov    eax,DWORD PTR [edi]
c0014943:	85 c0                	test   eax,eax
c0014945:	74 49                	je     c0014990 <Process::addArgs(char**)+0x68>
c0014947:	31 db                	xor    ebx,ebx
c0014949:	8d 76 00             	lea    esi,[esi+0x0]
c001494c:	83 ec 0c             	sub    esp,0xc
c001494f:	50                   	push   eax
c0014950:	e8 1b bc fe ff       	call   c0000570 <strlen>
c0014955:	83 c0 01             	add    eax,0x1
c0014958:	89 04 24             	mov    DWORD PTR [esp],eax
c001495b:	e8 3a 31 ff ff       	call   c0007a9a <malloc>
c0014960:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0014967:	5a                   	pop    edx
c0014968:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001496b:	59                   	pop    ecx
c001496c:	83 c3 01             	add    ebx,0x1
c001496f:	52                   	push   edx
c0014970:	50                   	push   eax
c0014971:	e8 ca bc fe ff       	call   c0000640 <strcpy>
c0014976:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c001497c:	83 c4 10             	add    esp,0x10
c001497f:	83 c1 01             	add    ecx,0x1
c0014982:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0014988:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001498b:	85 c0                	test   eax,eax
c001498d:	75 bd                	jne    c001494c <Process::addArgs(char**)+0x24>
c001498f:	90                   	nop
c0014990:	5b                   	pop    ebx
c0014991:	5e                   	pop    esi
c0014992:	5f                   	pop    edi
c0014993:	c3                   	ret    

c0014994 <Process::Process(char const*, Process*, char**)>:
c0014994:	56                   	push   esi
c0014995:	53                   	push   ebx
c0014996:	83 ec 14             	sub    esp,0x14
c0014999:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001499d:	05 0c 02 00 00       	add    eax,0x20c
c00149a2:	bb 07 00 00 00       	mov    ebx,0x7
c00149a7:	89 c6                	mov    esi,eax
c00149a9:	8d 76 00             	lea    esi,[esi+0x0]
c00149ac:	85 db                	test   ebx,ebx
c00149ae:	78 14                	js     c00149c4 <Process::Process(char const*, Process*, char**)+0x30>
c00149b0:	83 ec 0c             	sub    esp,0xc
c00149b3:	56                   	push   esi
c00149b4:	e8 ef a4 00 00       	call   c001eea8 <ThreadControlBlock::ThreadControlBlock()>
c00149b9:	83 c4 10             	add    esp,0x10
c00149bc:	83 c6 5f             	add    esi,0x5f
c00149bf:	83 eb 01             	sub    ebx,0x1
c00149c2:	eb e8                	jmp    c00149ac <Process::Process(char const*, Process*, char**)+0x18>
c00149c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149c8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00149cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149d3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00149da:	83 ec 0c             	sub    esp,0xc
c00149dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00149e1:	e8 6e bc ff ff       	call   c0010654 <Krnl::newProcessEnv(Process*)>
c00149e6:	83 c4 10             	add    esp,0x10
c00149e9:	89 c2                	mov    edx,eax
c00149eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149ef:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00149f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00149f9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014a02:	a1 a0 22 02 c0       	mov    eax,ds:0xc00222a0
c0014a07:	8d 50 01             	lea    edx,[eax+0x1]
c0014a0a:	89 15 a0 22 02 c0    	mov    DWORD PTR ds:0xc00222a0,edx
c0014a10:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a14:	89 02                	mov    DWORD PTR [edx],eax
c0014a16:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014a1e:	83 ec 0c             	sub    esp,0xc
c0014a21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014a25:	e8 70 30 ff ff       	call   c0007a9a <malloc>
c0014a2a:	83 c4 10             	add    esp,0x10
c0014a2d:	89 c3                	mov    ebx,eax
c0014a2f:	83 ec 08             	sub    esp,0x8
c0014a32:	6a 00                	push   0x0
c0014a34:	53                   	push   ebx
c0014a35:	e8 96 57 ff ff       	call   c000a1d0 <VAS::VAS(bool)>
c0014a3a:	83 c4 10             	add    esp,0x10
c0014a3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a41:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014a47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a4b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014a55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a59:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014a5d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014a63:	e8 12 c2 ff ff       	call   c0010c7a <KeInitSignals()>
c0014a68:	89 c2                	mov    edx,eax
c0014a6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a6e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014a74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a78:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014a7e:	85 c0                	test   eax,eax
c0014a80:	74 42                	je     c0014ac4 <Process::Process(char const*, Process*, char**)+0x130>
c0014a82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a86:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014a8c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014a92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a96:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aa0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014aa6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ab0:	05 0c 01 00 00       	add    eax,0x10c
c0014ab5:	83 ec 08             	sub    esp,0x8
c0014ab8:	52                   	push   edx
c0014ab9:	50                   	push   eax
c0014aba:	e8 81 bb fe ff       	call   c0000640 <strcpy>
c0014abf:	83 c4 10             	add    esp,0x10
c0014ac2:	eb 64                	jmp    c0014b28 <Process::Process(char const*, Process*, char**)+0x194>
c0014ac4:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014acc:	83 ec 0c             	sub    esp,0xc
c0014acf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014ad3:	e8 c2 2f ff ff       	call   c0007a9a <malloc>
c0014ad8:	83 c4 10             	add    esp,0x10
c0014adb:	89 c3                	mov    ebx,eax
c0014add:	83 ec 08             	sub    esp,0x8
c0014ae0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ae4:	53                   	push   ebx
c0014ae5:	e8 52 41 ff ff       	call   c0008c3c <VgaText::VgaText(char const*)>
c0014aea:	83 c4 10             	add    esp,0x10
c0014aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014af1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014afb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b01:	83 ec 0c             	sub    esp,0xc
c0014b04:	50                   	push   eax
c0014b05:	e8 d0 39 ff ff       	call   c00084da <addToTerminalCycle(VgaText*)>
c0014b0a:	83 c4 10             	add    esp,0x10
c0014b0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b11:	05 0c 01 00 00       	add    eax,0x10c
c0014b16:	83 ec 08             	sub    esp,0x8
c0014b19:	68 f9 10 02 c0       	push   0xc00210f9
c0014b1e:	50                   	push   eax
c0014b1f:	e8 1c bb fe ff       	call   c0000640 <strcpy>
c0014b24:	83 c4 10             	add    esp,0x10
c0014b27:	90                   	nop
c0014b28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b2c:	83 c0 0c             	add    eax,0xc
c0014b2f:	83 ec 08             	sub    esp,0x8
c0014b32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b36:	50                   	push   eax
c0014b37:	e8 04 bb fe ff       	call   c0000640 <strcpy>
c0014b3c:	83 c4 10             	add    esp,0x10
c0014b3f:	83 ec 08             	sub    esp,0x8
c0014b42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014b46:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b4a:	e8 d9 fd ff ff       	call   c0014928 <Process::addArgs(char**)>
c0014b4f:	83 c4 10             	add    esp,0x10
c0014b52:	83 ec 08             	sub    esp,0x8
c0014b55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014b5d:	e8 66 ed ff ff       	call   c00138c8 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014b62:	83 c4 10             	add    esp,0x10
c0014b65:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014b69:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014b6d:	83 f0 01             	xor    eax,0x1
c0014b70:	88 c2                	mov    dl,al
c0014b72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b76:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014b7c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014b81:	83 ec 08             	sub    esp,0x8
c0014b84:	50                   	push   eax
c0014b85:	68 50 11 02 c0       	push   0xc0021150
c0014b8a:	e8 f3 5d ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0014b8f:	83 c4 10             	add    esp,0x10
c0014b92:	90                   	nop
c0014b93:	83 c4 14             	add    esp,0x14
c0014b96:	5b                   	pop    ebx
c0014b97:	5e                   	pop    esi
c0014b98:	c3                   	ret    
c0014b99:	90                   	nop
c0014b9a:	66 90                	xchg   ax,ax

c0014b9c <Process::Process(bool, char const*, Process*, char**)>:
c0014b9c:	56                   	push   esi
c0014b9d:	53                   	push   ebx
c0014b9e:	83 ec 24             	sub    esp,0x24
c0014ba1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014ba5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014ba9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bad:	05 0c 02 00 00       	add    eax,0x20c
c0014bb2:	bb 07 00 00 00       	mov    ebx,0x7
c0014bb7:	89 c6                	mov    esi,eax
c0014bb9:	8d 76 00             	lea    esi,[esi+0x0]
c0014bbc:	85 db                	test   ebx,ebx
c0014bbe:	78 14                	js     c0014bd4 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014bc0:	83 ec 0c             	sub    esp,0xc
c0014bc3:	56                   	push   esi
c0014bc4:	e8 df a2 00 00       	call   c001eea8 <ThreadControlBlock::ThreadControlBlock()>
c0014bc9:	83 c4 10             	add    esp,0x10
c0014bcc:	83 c6 5f             	add    esi,0x5f
c0014bcf:	83 eb 01             	sub    ebx,0x1
c0014bd2:	eb e8                	jmp    c0014bbc <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014bd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bd8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014bdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014be3:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014bea:	83 ec 0c             	sub    esp,0xc
c0014bed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014bf1:	e8 5e ba ff ff       	call   c0010654 <Krnl::newProcessEnv(Process*)>
c0014bf6:	83 c4 10             	add    esp,0x10
c0014bf9:	89 c2                	mov    edx,eax
c0014bfb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bff:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014c05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c09:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014c12:	a1 a0 22 02 c0       	mov    eax,ds:0xc00222a0
c0014c17:	8d 50 01             	lea    edx,[eax+0x1]
c0014c1a:	89 15 a0 22 02 c0    	mov    DWORD PTR ds:0xc00222a0,edx
c0014c20:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0014c24:	89 02                	mov    DWORD PTR [edx],eax
c0014c26:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0014c2e:	83 ec 0c             	sub    esp,0xc
c0014c31:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014c35:	e8 60 2e ff ff       	call   c0007a9a <malloc>
c0014c3a:	83 c4 10             	add    esp,0x10
c0014c3d:	89 c3                	mov    ebx,eax
c0014c3f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0014c44:	83 ec 08             	sub    esp,0x8
c0014c47:	50                   	push   eax
c0014c48:	53                   	push   ebx
c0014c49:	e8 82 55 ff ff       	call   c000a1d0 <VAS::VAS(bool)>
c0014c4e:	83 c4 10             	add    esp,0x10
c0014c51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c55:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014c5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c5f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014c69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c6d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014c71:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014c77:	e8 fe bf ff ff       	call   c0010c7a <KeInitSignals()>
c0014c7c:	89 c2                	mov    edx,eax
c0014c7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c82:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014c88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c8c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014c92:	85 c0                	test   eax,eax
c0014c94:	74 42                	je     c0014cd8 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0014c96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c9a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014ca0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014ca6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014caa:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014cb0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cb4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014cba:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014cc0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014cc4:	05 0c 01 00 00       	add    eax,0x10c
c0014cc9:	83 ec 08             	sub    esp,0x8
c0014ccc:	52                   	push   edx
c0014ccd:	50                   	push   eax
c0014cce:	e8 6d b9 fe ff       	call   c0000640 <strcpy>
c0014cd3:	83 c4 10             	add    esp,0x10
c0014cd6:	eb 64                	jmp    c0014d3c <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0014cd8:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0014ce0:	83 ec 0c             	sub    esp,0xc
c0014ce3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014ce7:	e8 ae 2d ff ff       	call   c0007a9a <malloc>
c0014cec:	83 c4 10             	add    esp,0x10
c0014cef:	89 c3                	mov    ebx,eax
c0014cf1:	83 ec 08             	sub    esp,0x8
c0014cf4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014cf8:	53                   	push   ebx
c0014cf9:	e8 3e 3f ff ff       	call   c0008c3c <VgaText::VgaText(char const*)>
c0014cfe:	83 c4 10             	add    esp,0x10
c0014d01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d05:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014d0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d0f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d15:	83 ec 0c             	sub    esp,0xc
c0014d18:	50                   	push   eax
c0014d19:	e8 bc 37 ff ff       	call   c00084da <addToTerminalCycle(VgaText*)>
c0014d1e:	83 c4 10             	add    esp,0x10
c0014d21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d25:	05 0c 01 00 00       	add    eax,0x10c
c0014d2a:	83 ec 08             	sub    esp,0x8
c0014d2d:	68 f9 10 02 c0       	push   0xc00210f9
c0014d32:	50                   	push   eax
c0014d33:	e8 08 b9 fe ff       	call   c0000640 <strcpy>
c0014d38:	83 c4 10             	add    esp,0x10
c0014d3b:	90                   	nop
c0014d3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014d40:	83 c0 0c             	add    eax,0xc
c0014d43:	83 ec 08             	sub    esp,0x8
c0014d46:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014d4a:	50                   	push   eax
c0014d4b:	e8 f0 b8 fe ff       	call   c0000640 <strcpy>
c0014d50:	83 c4 10             	add    esp,0x10
c0014d53:	83 ec 08             	sub    esp,0x8
c0014d56:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014d5a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014d5e:	e8 c5 fb ff ff       	call   c0014928 <Process::addArgs(char**)>
c0014d63:	83 c4 10             	add    esp,0x10
c0014d66:	90                   	nop
c0014d67:	83 c4 24             	add    esp,0x24
c0014d6a:	5b                   	pop    ebx
c0014d6b:	5e                   	pop    esi
c0014d6c:	c3                   	ret    
c0014d6d:	8d 76 00             	lea    esi,[esi+0x0]

c0014d70 <taskStartupFunction>:
c0014d70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d75:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0014d78:	c3                   	ret    
c0014d79:	90                   	nop
c0014d7a:	66 90                	xchg   ax,ax

c0014d7c <Semaphore::Semaphore(int)>:
c0014d7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d84:	89 10                	mov    DWORD PTR [eax],edx
c0014d86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d8a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014d91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014d95:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014d9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014da0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0014da7:	90                   	nop
c0014da8:	c3                   	ret    
c0014da9:	90                   	nop
c0014daa:	66 90                	xchg   ax,ax

c0014dac <Mutex::Mutex()>:
c0014dac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014db0:	6a 01                	push   0x1
c0014db2:	50                   	push   eax
c0014db3:	e8 c4 ff ff ff       	call   c0014d7c <Semaphore::Semaphore(int)>
c0014db8:	83 c4 08             	add    esp,0x8
c0014dbb:	90                   	nop
c0014dbc:	c3                   	ret    
c0014dbd:	90                   	nop
c0014dbe:	66 90                	xchg   ax,ax

c0014dc0 <Process::createThread(void (*)(void*), void*, int)>:
c0014dc0:	57                   	push   edi
c0014dc1:	31 c9                	xor    ecx,ecx
c0014dc3:	56                   	push   esi
c0014dc4:	53                   	push   ebx
c0014dc5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014dc9:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0014dd0:	89 f2                	mov    edx,esi
c0014dd2:	66 90                	xchg   ax,ax
c0014dd4:	0f b7 c2             	movzx  eax,dx
c0014dd7:	80 e2 01             	and    dl,0x1
c0014dda:	74 14                	je     c0014df0 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014ddc:	d1 f8                	sar    eax,1
c0014dde:	83 c1 01             	add    ecx,0x1
c0014de1:	89 c2                	mov    edx,eax
c0014de3:	83 f9 10             	cmp    ecx,0x10
c0014de6:	75 ec                	jne    c0014dd4 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0014de8:	31 db                	xor    ebx,ebx
c0014dea:	89 d8                	mov    eax,ebx
c0014dec:	5b                   	pop    ebx
c0014ded:	5e                   	pop    esi
c0014dee:	5f                   	pop    edi
c0014def:	c3                   	ret    
c0014df0:	b8 01 00 00 00       	mov    eax,0x1
c0014df5:	d3 e0                	shl    eax,cl
c0014df7:	09 c6                	or     esi,eax
c0014df9:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0014dfc:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0014e03:	01 c0                	add    eax,eax
c0014e05:	01 c8                	add    eax,ecx
c0014e07:	8d 04 80             	lea    eax,[eax+eax*4]
c0014e0a:	01 d8                	add    eax,ebx
c0014e0c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0014e13:	75 0b                	jne    c0014e20 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0014e15:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0014e1f:	90                   	nop
c0014e20:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014e26:	83 ec 0c             	sub    esp,0xc
c0014e29:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0014e2c:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0014e2f:	01 c0                	add    eax,eax
c0014e31:	01 c8                	add    eax,ecx
c0014e33:	8d 3c 80             	lea    edi,[eax+eax*4]
c0014e36:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0014e39:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0014e3f:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0014e45:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014e49:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0014e4f:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0014e55:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0014e5b:	89 ca                	mov    edx,ecx
c0014e5d:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0014e64:	f7 da                	neg    edx
c0014e66:	c1 e2 15             	shl    edx,0x15
c0014e69:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014e6f:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014e75:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014e79:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0014e83:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0014e89:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014e8d:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014e93:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0014e9d:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0014ea7:	68 00 01 00 00       	push   0x100
c0014eac:	e8 e9 2b ff ff       	call   c0007a9a <malloc>
c0014eb1:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0014eb4:	58                   	pop    eax
c0014eb5:	5a                   	pop    edx
c0014eb6:	53                   	push   ebx
c0014eb7:	68 84 81 02 c0       	push   0xc0028184
c0014ebc:	e8 7f 9d 00 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014ec1:	83 c4 10             	add    esp,0x10
c0014ec4:	89 d8                	mov    eax,ebx
c0014ec6:	5b                   	pop    ebx
c0014ec7:	5e                   	pop    esi
c0014ec8:	5f                   	pop    edi
c0014ec9:	c3                   	ret    
c0014eca:	66 90                	xchg   ax,ax

c0014ecc <Process::createUserThread()>:
c0014ecc:	83 ec 0c             	sub    esp,0xc
c0014ecf:	68 80 00 00 00       	push   0x80
c0014ed4:	6a 00                	push   0x0
c0014ed6:	68 20 48 01 c0       	push   0xc0014820
c0014edb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014edf:	50                   	push   eax
c0014ee0:	e8 db fe ff ff       	call   c0014dc0 <Process::createThread(void (*)(void*), void*, int)>
c0014ee5:	83 c4 1c             	add    esp,0x1c
c0014ee8:	c3                   	ret    
c0014ee9:	8d 76 00             	lea    esi,[esi+0x0]

c0014eec <setupMultitasking(void (*)())>:
c0014eec:	56                   	push   esi
c0014eed:	53                   	push   ebx
c0014eee:	83 ec 04             	sub    esp,0x4
c0014ef1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014ef5:	eb 11                	jmp    c0014f08 <setupMultitasking(void (*)())+0x1c>
c0014ef7:	90                   	nop
c0014ef8:	83 ec 0c             	sub    esp,0xc
c0014efb:	68 84 81 02 c0       	push   0xc0028184
c0014f00:	e8 7f 9c 00 00       	call   c001eb84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014f05:	83 c4 10             	add    esp,0x10
c0014f08:	83 ec 0c             	sub    esp,0xc
c0014f0b:	68 84 81 02 c0       	push   0xc0028184
c0014f10:	e8 4b 9c 00 00       	call   c001eb60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014f15:	83 c4 10             	add    esp,0x10
c0014f18:	84 c0                	test   al,al
c0014f1a:	74 dc                	je     c0014ef8 <setupMultitasking(void (*)())+0xc>
c0014f1c:	83 ec 0c             	sub    esp,0xc
c0014f1f:	68 24 07 00 00       	push   0x724
c0014f24:	e8 71 2b ff ff       	call   c0007a9a <malloc>
c0014f29:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0014f30:	89 c3                	mov    ebx,eax
c0014f32:	6a 00                	push   0x0
c0014f34:	68 fd 10 02 c0       	push   0xc00210fd
c0014f39:	6a 01                	push   0x1
c0014f3b:	50                   	push   eax
c0014f3c:	e8 5b fc ff ff       	call   c0014b9c <Process::Process(bool, char const*, Process*, char**)>
c0014f41:	83 c4 14             	add    esp,0x14
c0014f44:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0014f4a:	89 1d 90 81 02 c0    	mov    DWORD PTR ds:0xc0028190,ebx
c0014f50:	50                   	push   eax
c0014f51:	e8 d9 37 ff ff       	call   c000872f <setActiveTerminal(VgaText*)>
c0014f56:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0014f5d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0014f67:	83 c8 01             	or     eax,0x1
c0014f6a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0014f71:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014f77:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014f7a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0014f84:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0014f8a:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0014f90:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0014f9a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0014fa4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0014fae:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0014fb4:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0014fbe:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0014fc4:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0014fce:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0014fd5:	e8 c0 2a ff ff       	call   c0007a9a <malloc>
c0014fda:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0014fe0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0014fe6:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0014fec:	5a                   	pop    edx
c0014fed:	59                   	pop    ecx
c0014fee:	68 f9 10 02 c0       	push   0xc00210f9
c0014ff3:	50                   	push   eax
c0014ff4:	e8 47 b6 fe ff       	call   c0000640 <strcpy>
c0014ff9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015000:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015004:	83 c4 14             	add    esp,0x14
c0015007:	5b                   	pop    ebx
c0015008:	5e                   	pop    esi
c0015009:	e9 5b b2 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001500e:	66 90                	xchg   ax,ax

c0015010 <schedule()>:
c0015010:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c0015016:	85 d2                	test   edx,edx
c0015018:	74 0e                	je     c0015028 <schedule()+0x18>
c001501a:	c7 05 60 81 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x1
c0015024:	c3                   	ret    
c0015025:	8d 76 00             	lea    esi,[esi+0x0]
c0015028:	53                   	push   ebx
c0015029:	83 ec 14             	sub    esp,0x14
c001502c:	68 84 81 02 c0       	push   0xc0028184
c0015031:	e8 2a 9b 00 00       	call   c001eb60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015036:	83 c4 10             	add    esp,0x10
c0015039:	84 c0                	test   al,al
c001503b:	75 3f                	jne    c001507c <schedule()+0x6c>
c001503d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015042:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015045:	83 fa 01             	cmp    edx,0x1
c0015048:	74 3a                	je     c0015084 <schedule()+0x74>
c001504a:	66 90                	xchg   ax,ax
c001504c:	83 ec 0c             	sub    esp,0xc
c001504f:	68 84 81 02 c0       	push   0xc0028184
c0015054:	e8 23 9b 00 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015059:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015060:	89 c3                	mov    ebx,eax
c0015062:	e8 1d 9b 00 00       	call   c001eb84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015067:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001506e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015071:	e8 02 f8 ff ff       	call   c0014878 <switchToThread(ThreadControlBlock*)>
c0015076:	83 c4 10             	add    esp,0x10
c0015079:	8d 76 00             	lea    esi,[esi+0x0]
c001507c:	83 c4 08             	add    esp,0x8
c001507f:	5b                   	pop    ebx
c0015080:	c3                   	ret    
c0015081:	8d 76 00             	lea    esi,[esi+0x0]
c0015084:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001508b:	83 ec 08             	sub    esp,0x8
c001508e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015093:	50                   	push   eax
c0015094:	68 84 81 02 c0       	push   0xc0028184
c0015099:	e8 a2 9b 00 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001509e:	83 c4 10             	add    esp,0x10
c00150a1:	eb a9                	jmp    c001504c <schedule()+0x3c>
c00150a3:	90                   	nop

c00150a4 <Semaphore::tryAcquire()>:
c00150a4:	53                   	push   ebx
c00150a5:	83 ec 08             	sub    esp,0x8
c00150a8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00150ac:	fa                   	cli    
c00150ad:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00150b2:	8d 50 01             	lea    edx,[eax+0x1]
c00150b5:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00150bb:	8b 15 64 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028164
c00150c1:	8d 5a 01             	lea    ebx,[edx+0x1]
c00150c4:	89 1d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ebx
c00150ca:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c00150cd:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c00150cf:	7c 33                	jl     c0015104 <Semaphore::tryAcquire()+0x60>
c00150d1:	89 15 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,edx
c00150d7:	85 d2                	test   edx,edx
c00150d9:	75 0d                	jne    c00150e8 <Semaphore::tryAcquire()+0x44>
c00150db:	8b 15 60 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028160
c00150e1:	85 d2                	test   edx,edx
c00150e3:	75 6f                	jne    c0015154 <Semaphore::tryAcquire()+0xb0>
c00150e5:	8d 76 00             	lea    esi,[esi+0x0]
c00150e8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00150ed:	85 c0                	test   eax,eax
c00150ef:	74 0b                	je     c00150fc <Semaphore::tryAcquire()+0x58>
c00150f1:	8d 76 00             	lea    esi,[esi+0x0]
c00150f4:	31 c0                	xor    eax,eax
c00150f6:	83 c4 08             	add    esp,0x8
c00150f9:	5b                   	pop    ebx
c00150fa:	c3                   	ret    
c00150fb:	90                   	nop
c00150fc:	fb                   	sti    
c00150fd:	83 c4 08             	add    esp,0x8
c0015100:	5b                   	pop    ebx
c0015101:	c3                   	ret    
c0015102:	66 90                	xchg   ax,ax
c0015104:	83 c3 01             	add    ebx,0x1
c0015107:	89 15 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,edx
c001510d:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015110:	85 d2                	test   edx,edx
c0015112:	75 24                	jne    c0015138 <Semaphore::tryAcquire()+0x94>
c0015114:	8b 0d 60 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028160
c001511a:	85 c9                	test   ecx,ecx
c001511c:	74 1a                	je     c0015138 <Semaphore::tryAcquire()+0x94>
c001511e:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015128:	e8 e3 fe ff ff       	call   c0015010 <schedule()>
c001512d:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015132:	83 e8 01             	sub    eax,0x1
c0015135:	8d 76 00             	lea    esi,[esi+0x0]
c0015138:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001513d:	85 c0                	test   eax,eax
c001513f:	75 0b                	jne    c001514c <Semaphore::tryAcquire()+0xa8>
c0015141:	fb                   	sti    
c0015142:	b0 01                	mov    al,0x1
c0015144:	83 c4 08             	add    esp,0x8
c0015147:	5b                   	pop    ebx
c0015148:	c3                   	ret    
c0015149:	8d 76 00             	lea    esi,[esi+0x0]
c001514c:	b0 01                	mov    al,0x1
c001514e:	83 c4 08             	add    esp,0x8
c0015151:	5b                   	pop    ebx
c0015152:	c3                   	ret    
c0015153:	90                   	nop
c0015154:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c001515e:	e8 ad fe ff ff       	call   c0015010 <schedule()>
c0015163:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015168:	83 e8 01             	sub    eax,0x1
c001516b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015170:	85 c0                	test   eax,eax
c0015172:	75 80                	jne    c00150f4 <Semaphore::tryAcquire()+0x50>
c0015174:	eb 86                	jmp    c00150fc <Semaphore::tryAcquire()+0x58>
c0015176:	66 90                	xchg   ax,ax

c0015178 <Semaphore::assertLocked(char const*)>:
c0015178:	83 ec 0c             	sub    esp,0xc
c001517b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001517f:	fa                   	cli    
c0015180:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c0015186:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001518b:	83 c1 01             	add    ecx,0x1
c001518e:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c0015194:	8d 48 01             	lea    ecx,[eax+0x1]
c0015197:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c001519d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001519f:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00151a2:	7c 28                	jl     c00151cc <Semaphore::assertLocked(char const*)+0x54>
c00151a4:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00151a9:	85 c0                	test   eax,eax
c00151ab:	75 0b                	jne    c00151b8 <Semaphore::assertLocked(char const*)+0x40>
c00151ad:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00151b2:	85 c0                	test   eax,eax
c00151b4:	75 32                	jne    c00151e8 <Semaphore::assertLocked(char const*)+0x70>
c00151b6:	66 90                	xchg   ax,ax
c00151b8:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00151bd:	83 e8 01             	sub    eax,0x1
c00151c0:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00151c5:	75 01                	jne    c00151c8 <Semaphore::assertLocked(char const*)+0x50>
c00151c7:	fb                   	sti    
c00151c8:	83 c4 0c             	add    esp,0xc
c00151cb:	c3                   	ret    
c00151cc:	83 ec 0c             	sub    esp,0xc
c00151cf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151d3:	52                   	push   edx
c00151d4:	e8 86 b6 ff ff       	call   c001085f <KePanic(char const*)>
c00151d9:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c00151de:	83 c4 10             	add    esp,0x10
c00151e1:	83 e8 01             	sub    eax,0x1
c00151e4:	eb be                	jmp    c00151a4 <Semaphore::assertLocked(char const*)+0x2c>
c00151e6:	66 90                	xchg   ax,ax
c00151e8:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c00151f2:	e8 19 fe ff ff       	call   c0015010 <schedule()>
c00151f7:	eb bf                	jmp    c00151b8 <Semaphore::assertLocked(char const*)+0x40>
c00151f9:	8d 76 00             	lea    esi,[esi+0x0]

c00151fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00151fc:	83 ec 0c             	sub    esp,0xc
c00151ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015204:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015208:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001520b:	e8 00 fe ff ff       	call   c0015010 <schedule()>
c0015210:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015215:	83 e8 01             	sub    eax,0x1
c0015218:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001521d:	75 01                	jne    c0015220 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001521f:	fb                   	sti    
c0015220:	83 c4 0c             	add    esp,0xc
c0015223:	c3                   	ret    

c0015224 <blockTask(TaskState)>:
c0015224:	83 ec 0c             	sub    esp,0xc
c0015227:	fa                   	cli    
c0015228:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001522d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015231:	83 c0 01             	add    eax,0x1
c0015234:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015239:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001523e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015241:	e8 ca fd ff ff       	call   c0015010 <schedule()>
c0015246:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001524b:	83 e8 01             	sub    eax,0x1
c001524e:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015253:	75 03                	jne    c0015258 <blockTask(TaskState)+0x34>
c0015255:	fb                   	sti    
c0015256:	66 90                	xchg   ax,ax
c0015258:	83 c4 0c             	add    esp,0xc
c001525b:	c3                   	ret    

c001525c <waitTask(int, int*, int)>:
c001525c:	83 ec 18             	sub    esp,0x18
c001525f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015264:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015268:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001526b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001526f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015274:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015277:	6a 07                	push   0x7
c0015279:	e8 a6 ff ff ff       	call   c0015224 <blockTask(TaskState)>
c001527e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015283:	83 c4 10             	add    esp,0x10
c0015286:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015289:	85 d2                	test   edx,edx
c001528b:	74 0b                	je     c0015298 <waitTask(int, int*, int)+0x3c>
c001528d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015290:	89 02                	mov    DWORD PTR [edx],eax
c0015292:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015297:	90                   	nop
c0015298:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001529b:	83 c4 0c             	add    esp,0xc
c001529e:	c3                   	ret    
c001529f:	90                   	nop

c00152a0 <milliTenthSleepUntil(unsigned int)>:
c00152a0:	83 ec 0c             	sub    esp,0xc
c00152a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00152a7:	39 05 8c 74 02 c0    	cmp    DWORD PTR ds:0xc002748c,eax
c00152ad:	76 05                	jbe    c00152b4 <milliTenthSleepUntil(unsigned int)+0x14>
c00152af:	90                   	nop
c00152b0:	83 c4 0c             	add    esp,0xc
c00152b3:	c3                   	ret    
c00152b4:	fa                   	cli    
c00152b5:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00152bb:	83 ec 08             	sub    esp,0x8
c00152be:	83 c2 01             	add    edx,0x1
c00152c1:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00152c7:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00152cd:	83 c1 01             	add    ecx,0x1
c00152d0:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00152d6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00152dc:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00152df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152e4:	50                   	push   eax
c00152e5:	68 78 81 02 c0       	push   0xc0028178
c00152ea:	e8 51 99 00 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00152ef:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00152f6:	e8 29 ff ff ff       	call   c0015224 <blockTask(TaskState)>
c00152fb:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015300:	83 c4 10             	add    esp,0x10
c0015303:	83 e8 01             	sub    eax,0x1
c0015306:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c001530b:	85 c0                	test   eax,eax
c001530d:	75 09                	jne    c0015318 <milliTenthSleepUntil(unsigned int)+0x78>
c001530f:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015314:	85 c0                	test   eax,eax
c0015316:	75 14                	jne    c001532c <milliTenthSleepUntil(unsigned int)+0x8c>
c0015318:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001531d:	83 e8 01             	sub    eax,0x1
c0015320:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015325:	75 89                	jne    c00152b0 <milliTenthSleepUntil(unsigned int)+0x10>
c0015327:	fb                   	sti    
c0015328:	83 c4 0c             	add    esp,0xc
c001532b:	c3                   	ret    
c001532c:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015336:	e8 d5 fc ff ff       	call   c0015010 <schedule()>
c001533b:	eb db                	jmp    c0015318 <milliTenthSleepUntil(unsigned int)+0x78>
c001533d:	8d 76 00             	lea    esi,[esi+0x0]

c0015340 <milliTenthSleep(unsigned int)>:
c0015340:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015344:	a1 8c 74 02 c0       	mov    eax,ds:0xc002748c
c0015349:	01 c2                	add    edx,eax
c001534b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001534f:	e9 4c ff ff ff       	jmp    c00152a0 <milliTenthSleepUntil(unsigned int)>

c0015354 <sleep(unsigned int)>:
c0015354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015358:	8d 04 80             	lea    eax,[eax+eax*4]
c001535b:	8d 04 80             	lea    eax,[eax+eax*4]
c001535e:	8d 04 80             	lea    eax,[eax+eax*4]
c0015361:	8d 04 80             	lea    eax,[eax+eax*4]
c0015364:	c1 e0 04             	shl    eax,0x4
c0015367:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001536b:	eb d3                	jmp    c0015340 <milliTenthSleep(unsigned int)>
c001536d:	90                   	nop
c001536e:	66 90                	xchg   ax,ax

c0015370 <Semaphore::acquire()>:
c0015370:	83 ec 0c             	sub    esp,0xc
c0015373:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015377:	fa                   	cli    
c0015378:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001537d:	83 c0 01             	add    eax,0x1
c0015380:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015385:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001538a:	8d 48 01             	lea    ecx,[eax+0x1]
c001538d:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015393:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015396:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015398:	7d 2e                	jge    c00153c8 <Semaphore::acquire()+0x58>
c001539a:	83 c1 01             	add    ecx,0x1
c001539d:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00153a0:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c00153a5:	85 c0                	test   eax,eax
c00153a7:	75 0b                	jne    c00153b4 <Semaphore::acquire()+0x44>
c00153a9:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c00153ae:	85 c0                	test   eax,eax
c00153b0:	75 66                	jne    c0015418 <Semaphore::acquire()+0xa8>
c00153b2:	66 90                	xchg   ax,ax
c00153b4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00153b9:	83 e8 01             	sub    eax,0x1
c00153bc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00153c1:	75 01                	jne    c00153c4 <Semaphore::acquire()+0x54>
c00153c3:	fb                   	sti    
c00153c4:	83 c4 0c             	add    esp,0xc
c00153c7:	c3                   	ret    
c00153c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153cd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00153d4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00153d7:	85 c9                	test   ecx,ecx
c00153d9:	74 51                	je     c001542c <Semaphore::acquire()+0xbc>
c00153db:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00153de:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00153e4:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00153e7:	90                   	nop
c00153e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153ed:	83 ec 0c             	sub    esp,0xc
c00153f0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00153f3:	68 78 11 02 c0       	push   0xc0021178
c00153f8:	e8 85 55 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c00153fd:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015404:	e8 1b fe ff ff       	call   c0015224 <blockTask(TaskState)>
c0015409:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001540e:	83 c4 10             	add    esp,0x10
c0015411:	83 e8 01             	sub    eax,0x1
c0015414:	eb 8a                	jmp    c00153a0 <Semaphore::acquire()+0x30>
c0015416:	66 90                	xchg   ax,ax
c0015418:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015422:	e8 e9 fb ff ff       	call   c0015010 <schedule()>
c0015427:	eb 8b                	jmp    c00153b4 <Semaphore::acquire()+0x44>
c0015429:	8d 76 00             	lea    esi,[esi+0x0]
c001542c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015431:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015434:	eb b2                	jmp    c00153e8 <Semaphore::acquire()+0x78>
c0015436:	66 90                	xchg   ax,ax

c0015438 <taskReturned>:
c0015438:	83 ec 18             	sub    esp,0x18
c001543b:	68 98 11 02 c0       	push   0xc0021198
c0015440:	e8 1a b4 ff ff       	call   c001085f <KePanic(char const*)>
c0015445:	83 c4 10             	add    esp,0x10
c0015448:	83 ec 0c             	sub    esp,0xc
c001544b:	6a 02                	push   0x2
c001544d:	e8 d2 fd ff ff       	call   c0015224 <blockTask(TaskState)>
c0015452:	fa                   	cli    
c0015453:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015458:	83 c0 01             	add    eax,0x1
c001545b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015460:	e8 ab fb ff ff       	call   c0015010 <schedule()>
c0015465:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001546a:	83 c4 10             	add    esp,0x10
c001546d:	83 e8 01             	sub    eax,0x1
c0015470:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015475:	85 c0                	test   eax,eax
c0015477:	75 cf                	jne    c0015448 <taskReturned+0x10>
c0015479:	fb                   	sti    
c001547a:	eb cc                	jmp    c0015448 <taskReturned+0x10>

c001547c <Thr::processFromPID(int)>:
c001547c:	57                   	push   edi
c001547d:	56                   	push   esi
c001547e:	53                   	push   ebx
c001547f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015483:	fa                   	cli    
c0015484:	8b 0d 68 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028168
c001548a:	83 ec 0c             	sub    esp,0xc
c001548d:	83 c1 01             	add    ecx,0x1
c0015490:	68 84 81 02 c0       	push   0xc0028184
c0015495:	89 0d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ecx
c001549b:	e8 dc 96 00 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154a0:	83 c4 10             	add    esp,0x10
c00154a3:	89 c7                	mov    edi,eax
c00154a5:	eb 15                	jmp    c00154bc <Thr::processFromPID(int)+0x40>
c00154a7:	90                   	nop
c00154a8:	83 ec 0c             	sub    esp,0xc
c00154ab:	68 84 81 02 c0       	push   0xc0028184
c00154b0:	e8 c7 96 00 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154b5:	83 c4 10             	add    esp,0x10
c00154b8:	39 f8                	cmp    eax,edi
c00154ba:	74 50                	je     c001550c <Thr::processFromPID(int)+0x90>
c00154bc:	83 ec 0c             	sub    esp,0xc
c00154bf:	68 84 81 02 c0       	push   0xc0028184
c00154c4:	e8 b3 96 00 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154c9:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c00154d0:	89 c3                	mov    ebx,eax
c00154d2:	e8 ad 96 00 00       	call   c001eb84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00154d7:	58                   	pop    eax
c00154d8:	5a                   	pop    edx
c00154d9:	53                   	push   ebx
c00154da:	68 84 81 02 c0       	push   0xc0028184
c00154df:	e8 5c 97 00 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00154e4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00154e7:	83 c4 10             	add    esp,0x10
c00154ea:	39 30                	cmp    DWORD PTR [eax],esi
c00154ec:	75 ba                	jne    c00154a8 <Thr::processFromPID(int)+0x2c>
c00154ee:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00154f3:	83 e8 01             	sub    eax,0x1
c00154f6:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00154fb:	74 0b                	je     c0015508 <Thr::processFromPID(int)+0x8c>
c00154fd:	8d 76 00             	lea    esi,[esi+0x0]
c0015500:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015503:	5b                   	pop    ebx
c0015504:	5e                   	pop    esi
c0015505:	5f                   	pop    edi
c0015506:	c3                   	ret    
c0015507:	90                   	nop
c0015508:	fb                   	sti    
c0015509:	eb f5                	jmp    c0015500 <Thr::processFromPID(int)+0x84>
c001550b:	90                   	nop
c001550c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015511:	83 e8 01             	sub    eax,0x1
c0015514:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015519:	75 05                	jne    c0015520 <Thr::processFromPID(int)+0xa4>
c001551b:	fb                   	sti    
c001551c:	5b                   	pop    ebx
c001551d:	5e                   	pop    esi
c001551e:	5f                   	pop    edi
c001551f:	c3                   	ret    
c0015520:	5b                   	pop    ebx
c0015521:	31 c0                	xor    eax,eax
c0015523:	5e                   	pop    esi
c0015524:	5f                   	pop    edi
c0015525:	c3                   	ret    
c0015526:	66 90                	xchg   ax,ax

c0015528 <unblockTask(ThreadControlBlock*)>:
c0015528:	53                   	push   ebx
c0015529:	83 ec 08             	sub    esp,0x8
c001552c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015530:	fa                   	cli    
c0015531:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015536:	83 c0 01             	add    eax,0x1
c0015539:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001553e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015541:	85 c0                	test   eax,eax
c0015543:	74 67                	je     c00155ac <unblockTask(ThreadControlBlock*)+0x84>
c0015545:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015548:	83 f8 01             	cmp    eax,0x1
c001554b:	74 37                	je     c0015584 <unblockTask(ThreadControlBlock*)+0x5c>
c001554d:	83 ec 0c             	sub    esp,0xc
c0015550:	68 84 81 02 c0       	push   0xc0028184
c0015555:	e8 22 96 00 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001555a:	83 c4 10             	add    esp,0x10
c001555d:	85 c0                	test   eax,eax
c001555f:	75 1b                	jne    c001557c <unblockTask(ThreadControlBlock*)+0x54>
c0015561:	eb 5d                	jmp    c00155c0 <unblockTask(ThreadControlBlock*)+0x98>
c0015563:	90                   	nop
c0015564:	83 ec 08             	sub    esp,0x8
c0015567:	50                   	push   eax
c0015568:	68 84 81 02 c0       	push   0xc0028184
c001556d:	e8 2a 99 00 00       	call   c001ee9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0015572:	83 c4 10             	add    esp,0x10
c0015575:	85 c0                	test   eax,eax
c0015577:	74 47                	je     c00155c0 <unblockTask(ThreadControlBlock*)+0x98>
c0015579:	8d 76 00             	lea    esi,[esi+0x0]
c001557c:	39 c3                	cmp    ebx,eax
c001557e:	75 e4                	jne    c0015564 <unblockTask(ThreadControlBlock*)+0x3c>
c0015580:	eb 12                	jmp    c0015594 <unblockTask(ThreadControlBlock*)+0x6c>
c0015582:	66 90                	xchg   ax,ax
c0015584:	83 ec 0c             	sub    esp,0xc
c0015587:	68 1b 11 02 c0       	push   0xc002111b
c001558c:	e8 f1 53 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0015591:	83 c4 10             	add    esp,0x10
c0015594:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015599:	83 e8 01             	sub    eax,0x1
c001559c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00155a1:	75 01                	jne    c00155a4 <unblockTask(ThreadControlBlock*)+0x7c>
c00155a3:	fb                   	sti    
c00155a4:	83 c4 08             	add    esp,0x8
c00155a7:	5b                   	pop    ebx
c00155a8:	c3                   	ret    
c00155a9:	8d 76 00             	lea    esi,[esi+0x0]
c00155ac:	83 ec 0c             	sub    esp,0xc
c00155af:	68 04 11 02 c0       	push   0xc0021104
c00155b4:	e8 c9 53 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c00155b9:	83 c4 10             	add    esp,0x10
c00155bc:	eb d6                	jmp    c0015594 <unblockTask(ThreadControlBlock*)+0x6c>
c00155be:	66 90                	xchg   ax,ax
c00155c0:	83 ec 08             	sub    esp,0x8
c00155c3:	53                   	push   ebx
c00155c4:	68 84 81 02 c0       	push   0xc0028184
c00155c9:	e8 72 96 00 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00155ce:	83 c4 10             	add    esp,0x10
c00155d1:	eb c1                	jmp    c0015594 <unblockTask(ThreadControlBlock*)+0x6c>
c00155d3:	90                   	nop

c00155d4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00155d4:	55                   	push   ebp
c00155d5:	57                   	push   edi
c00155d6:	56                   	push   esi
c00155d7:	53                   	push   ebx
c00155d8:	83 ec 1c             	sub    esp,0x1c
c00155db:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00155df:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00155e2:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c00155e8:	85 ed                	test   ebp,ebp
c00155ea:	7e 28                	jle    c0015614 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c00155ec:	31 f6                	xor    esi,esi
c00155ee:	66 90                	xchg   ax,ax
c00155f0:	83 ec 0c             	sub    esp,0xc
c00155f3:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c00155fa:	83 c6 01             	add    esi,0x1
c00155fd:	57                   	push   edi
c00155fe:	e8 a7 24 ff ff       	call   c0007aaa <free>
c0015603:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015606:	83 c4 10             	add    esp,0x10
c0015609:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001560f:	7f df                	jg     c00155f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015611:	8d 76 00             	lea    esi,[esi+0x0]
c0015614:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001561e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015623:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0015626:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015629:	d3 c0                	rol    eax,cl
c001562b:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0015632:	21 c8                	and    eax,ecx
c0015634:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c001563b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001563e:	89 f7                	mov    edi,esi
c0015640:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0015648:	0f 85 72 01 00 00    	jne    c00157c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001564e:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0015654:	85 ed                	test   ebp,ebp
c0015656:	74 1c                	je     c0015674 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0015658:	83 ec 0c             	sub    esp,0xc
c001565b:	55                   	push   ebp
c001565c:	e8 0f af ff ff       	call   c0010570 <EnvVarContainer::~EnvVarContainer()>
c0015661:	59                   	pop    ecx
c0015662:	5e                   	pop    esi
c0015663:	6a 0c                	push   0xc
c0015665:	55                   	push   ebp
c0015666:	e8 ea 51 ff ff       	call   c000a855 <operator delete(void*, unsigned long)>
c001566b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001566e:	83 c4 10             	add    esp,0x10
c0015671:	89 f7                	mov    edi,esi
c0015673:	90                   	nop
c0015674:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001567a:	85 c0                	test   eax,eax
c001567c:	0f 84 b2 00 00 00    	je     c0015734 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0015682:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0015685:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015689:	31 c9                	xor    ecx,ecx
c001568b:	eb 17                	jmp    c00156a4 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c001568d:	8d 76 00             	lea    esi,[esi+0x0]
c0015690:	83 c1 01             	add    ecx,0x1
c0015693:	83 f9 10             	cmp    ecx,0x10
c0015696:	0f 84 98 00 00 00    	je     c0015734 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001569c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00156a2:	66 90                	xchg   ax,ax
c00156a4:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00156ab:	d3 fa                	sar    edx,cl
c00156ad:	80 e2 01             	and    dl,0x1
c00156b0:	74 de                	je     c0015690 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00156b2:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00156b5:	01 d2                	add    edx,edx
c00156b7:	01 ca                	add    edx,ecx
c00156b9:	8d 14 92             	lea    edx,[edx+edx*4]
c00156bc:	01 d0                	add    eax,edx
c00156be:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00156c4:	83 fd 07             	cmp    ebp,0x7
c00156c7:	75 c7                	jne    c0015690 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00156c9:	05 40 02 00 00       	add    eax,0x240
c00156ce:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00156d1:	83 fd ff             	cmp    ebp,0xffffffff
c00156d4:	0f 8c ee 00 00 00    	jl     c00157c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00156da:	0f 84 ac 01 00 00    	je     c001588c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c00156e0:	85 ed                	test   ebp,ebp
c00156e2:	0f 84 90 01 00 00    	je     c0015878 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c00156e8:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00156ea:	75 a4                	jne    c0015690 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00156ec:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00156f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00156f6:	01 d0                	add    eax,edx
c00156f8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00156fc:	83 ec 0c             	sub    esp,0xc
c00156ff:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0015705:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015708:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001570e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0015715:	50                   	push   eax
c0015716:	e8 0d fe ff ff       	call   c0015528 <unblockTask(ThreadControlBlock*)>
c001571b:	83 c4 10             	add    esp,0x10
c001571e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015721:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015725:	89 f7                	mov    edi,esi
c0015727:	83 c1 01             	add    ecx,0x1
c001572a:	83 f9 10             	cmp    ecx,0x10
c001572d:	0f 85 69 ff ff ff    	jne    c001569c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0015733:	90                   	nop
c0015734:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001573a:	85 c0                	test   eax,eax
c001573c:	74 62                	je     c00157a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001573e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0015744:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001574a:	74 54                	je     c00157a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c001574c:	83 ec 0c             	sub    esp,0xc
c001574f:	68 84 81 02 c0       	push   0xc0028184
c0015754:	e8 23 94 00 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015759:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015760:	89 c7                	mov    edi,eax
c0015762:	e8 f9 93 00 00       	call   c001eb60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015767:	83 c4 10             	add    esp,0x10
c001576a:	84 c0                	test   al,al
c001576c:	0f 84 ce 00 00 00    	je     c0015840 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0015772:	66 90                	xchg   ax,ax
c0015774:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015777:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001577d:	85 d2                	test   edx,edx
c001577f:	74 0f                	je     c0015790 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0015781:	83 ec 0c             	sub    esp,0xc
c0015784:	8b 02                	mov    eax,DWORD PTR [edx]
c0015786:	52                   	push   edx
c0015787:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001578a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001578d:	83 c4 10             	add    esp,0x10
c0015790:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001579a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001579d:	8d 76 00             	lea    esi,[esi+0x0]
c00157a0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00157a6:	85 db                	test   ebx,ebx
c00157a8:	74 16                	je     c00157c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00157aa:	83 ec 0c             	sub    esp,0xc
c00157ad:	53                   	push   ebx
c00157ae:	e8 cf 43 ff ff       	call   c0009b82 <VAS::~VAS()>
c00157b3:	58                   	pop    eax
c00157b4:	5a                   	pop    edx
c00157b5:	6a 14                	push   0x14
c00157b7:	53                   	push   ebx
c00157b8:	e8 98 50 ff ff       	call   c000a855 <operator delete(void*, unsigned long)>
c00157bd:	83 c4 10             	add    esp,0x10
c00157c0:	83 c4 1c             	add    esp,0x1c
c00157c3:	5b                   	pop    ebx
c00157c4:	5e                   	pop    esi
c00157c5:	5f                   	pop    edi
c00157c6:	5d                   	pop    ebp
c00157c7:	c3                   	ret    
c00157c8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00157cc:	83 ec 0c             	sub    esp,0xc
c00157cf:	68 cc 11 02 c0       	push   0xc00211cc
c00157d4:	e8 86 b0 ff ff       	call   c001085f <KePanic(char const*)>
c00157d9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00157dc:	83 c4 10             	add    esp,0x10
c00157df:	89 f7                	mov    edi,esi
c00157e1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00157e5:	e9 a6 fe ff ff       	jmp    c0015690 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00157ea:	66 90                	xchg   ax,ax
c00157ec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00157f2:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00157f8:	75 1e                	jne    c0015818 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00157fa:	83 ec 0c             	sub    esp,0xc
c00157fd:	68 34 12 02 c0       	push   0xc0021234
c0015802:	e8 7b 51 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0015807:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001580e:	e8 11 fa ff ff       	call   c0015224 <blockTask(TaskState)>
c0015813:	83 c4 10             	add    esp,0x10
c0015816:	66 90                	xchg   ax,ax
c0015818:	83 ec 08             	sub    esp,0x8
c001581b:	56                   	push   esi
c001581c:	68 84 81 02 c0       	push   0xc0028184
c0015821:	e8 1a 94 00 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015826:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c001582d:	e8 4a 93 00 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015832:	83 c4 10             	add    esp,0x10
c0015835:	39 f8                	cmp    eax,edi
c0015837:	0f 84 37 ff ff ff    	je     c0015774 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001583d:	8d 76 00             	lea    esi,[esi+0x0]
c0015840:	83 ec 0c             	sub    esp,0xc
c0015843:	68 84 81 02 c0       	push   0xc0028184
c0015848:	e8 2f 93 00 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001584d:	c7 04 24 84 81 02 c0 	mov    DWORD PTR [esp],0xc0028184
c0015854:	89 c6                	mov    esi,eax
c0015856:	e8 29 93 00 00       	call   c001eb84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001585b:	83 c4 10             	add    esp,0x10
c001585e:	39 f3                	cmp    ebx,esi
c0015860:	74 b6                	je     c0015818 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015862:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015865:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015868:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001586e:	75 a8                	jne    c0015818 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015870:	e9 77 ff ff ff       	jmp    c00157ec <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015875:	8d 76 00             	lea    esi,[esi+0x0]
c0015878:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001587c:	83 ec 0c             	sub    esp,0xc
c001587f:	68 00 12 02 c0       	push   0xc0021200
c0015884:	e9 4b ff ff ff       	jmp    c00157d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015889:	8d 76 00             	lea    esi,[esi+0x0]
c001588c:	8b 36                	mov    esi,DWORD PTR [esi]
c001588e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015892:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015895:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015898:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001589e:	01 d7                	add    edi,edx
c00158a0:	89 f8                	mov    eax,edi
c00158a2:	e9 51 fe ff ff       	jmp    c00156f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00158a7:	90                   	nop

c00158a8 <cleanerTaskFunction(void*)>:
c00158a8:	53                   	push   ebx
c00158a9:	83 ec 08             	sub    esp,0x8
c00158ac:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158b1:	83 e8 01             	sub    eax,0x1
c00158b4:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00158b9:	75 01                	jne    c00158bc <cleanerTaskFunction(void*)+0x14>
c00158bb:	fb                   	sti    
c00158bc:	fa                   	cli    
c00158bd:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00158c2:	80 3d 4c 81 02 c0 00 	cmp    BYTE PTR ds:0xc002814c,0x0
c00158c9:	8d 50 01             	lea    edx,[eax+0x1]
c00158cc:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00158d2:	0f 84 c4 00 00 00    	je     c001599c <cleanerTaskFunction(void*)+0xf4>
c00158d8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00158dd:	85 c0                	test   eax,eax
c00158df:	75 03                	jne    c00158e4 <cleanerTaskFunction(void*)+0x3c>
c00158e1:	fb                   	sti    
c00158e2:	66 90                	xchg   ax,ax
c00158e4:	c6 05 4c 81 02 c0 00 	mov    BYTE PTR ds:0xc002814c,0x0
c00158eb:	fa                   	cli    
c00158ec:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00158f2:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00158f8:	83 c2 01             	add    edx,0x1
c00158fb:	83 c1 01             	add    ecx,0x1
c00158fe:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015904:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c001590a:	fa                   	cli    
c001590b:	8b 1d 68 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028168
c0015911:	83 c3 01             	add    ebx,0x1
c0015914:	89 1d 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,ebx
c001591a:	eb 28                	jmp    c0015944 <cleanerTaskFunction(void*)+0x9c>
c001591c:	83 ec 0c             	sub    esp,0xc
c001591f:	68 6c 81 02 c0       	push   0xc002816c
c0015924:	e8 53 92 00 00       	call   c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015929:	c7 04 24 6c 81 02 c0 	mov    DWORD PTR [esp],0xc002816c
c0015930:	89 c3                	mov    ebx,eax
c0015932:	e8 4d 92 00 00       	call   c001eb84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015937:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001593a:	e8 95 fc ff ff       	call   c00155d4 <cleanupTerminatedTask(ThreadControlBlock*)>
c001593f:	83 c4 10             	add    esp,0x10
c0015942:	66 90                	xchg   ax,ax
c0015944:	83 ec 0c             	sub    esp,0xc
c0015947:	68 6c 81 02 c0       	push   0xc002816c
c001594c:	e8 0f 92 00 00       	call   c001eb60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015951:	83 c4 10             	add    esp,0x10
c0015954:	84 c0                	test   al,al
c0015956:	74 c4                	je     c001591c <cleanerTaskFunction(void*)+0x74>
c0015958:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001595d:	83 e8 01             	sub    eax,0x1
c0015960:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015965:	75 01                	jne    c0015968 <cleanerTaskFunction(void*)+0xc0>
c0015967:	fb                   	sti    
c0015968:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c001596d:	83 e8 01             	sub    eax,0x1
c0015970:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015975:	0f 85 31 ff ff ff    	jne    c00158ac <cleanerTaskFunction(void*)+0x4>
c001597b:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015980:	85 c0                	test   eax,eax
c0015982:	0f 84 24 ff ff ff    	je     c00158ac <cleanerTaskFunction(void*)+0x4>
c0015988:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015992:	e8 79 f6 ff ff       	call   c0015010 <schedule()>
c0015997:	e9 10 ff ff ff       	jmp    c00158ac <cleanerTaskFunction(void*)+0x4>
c001599c:	83 ec 0c             	sub    esp,0xc
c001599f:	6a 02                	push   0x2
c00159a1:	e8 56 f8 ff ff       	call   c00151fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00159a6:	83 c4 10             	add    esp,0x10
c00159a9:	e9 36 ff ff ff       	jmp    c00158e4 <cleanerTaskFunction(void*)+0x3c>
c00159ae:	66 90                	xchg   ax,ax

c00159b0 <terminateTask(int)>:
c00159b0:	83 ec 14             	sub    esp,0x14
c00159b3:	fa                   	cli    
c00159b4:	8b 15 68 81 02 c0    	mov    edx,DWORD PTR ds:0xc0028168
c00159ba:	8b 0d 64 81 02 c0    	mov    ecx,DWORD PTR ds:0xc0028164
c00159c0:	83 c2 01             	add    edx,0x1
c00159c3:	83 c1 01             	add    ecx,0x1
c00159c6:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c00159cc:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c00159d2:	fa                   	cli    
c00159d3:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c00159d8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00159dc:	83 c0 01             	add    eax,0x1
c00159df:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c00159e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159e9:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00159ec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159f1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00159f4:	50                   	push   eax
c00159f5:	68 6c 81 02 c0       	push   0xc002816c
c00159fa:	e8 41 92 00 00       	call   c001ec40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00159ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a04:	83 c4 10             	add    esp,0x10
c0015a07:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015a0e:	a1 48 81 02 c0       	mov    eax,ds:0xc0028148
c0015a13:	85 c0                	test   eax,eax
c0015a15:	74 65                	je     c0015a7c <terminateTask(int)+0xcc>
c0015a17:	83 ec 0c             	sub    esp,0xc
c0015a1a:	c6 05 4c 81 02 c0 01 	mov    BYTE PTR ds:0xc002814c,0x1
c0015a21:	50                   	push   eax
c0015a22:	e8 01 fb ff ff       	call   c0015528 <unblockTask(ThreadControlBlock*)>
c0015a27:	83 c4 10             	add    esp,0x10
c0015a2a:	66 90                	xchg   ax,ax
c0015a2c:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a31:	83 e8 01             	sub    eax,0x1
c0015a34:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a39:	75 01                	jne    c0015a3c <terminateTask(int)+0x8c>
c0015a3b:	fb                   	sti    
c0015a3c:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015a41:	83 e8 01             	sub    eax,0x1
c0015a44:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015a49:	75 09                	jne    c0015a54 <terminateTask(int)+0xa4>
c0015a4b:	83 3d 60 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028160,0x0
c0015a52:	75 3c                	jne    c0015a90 <terminateTask(int)+0xe0>
c0015a54:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a59:	83 e8 01             	sub    eax,0x1
c0015a5c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a61:	75 01                	jne    c0015a64 <terminateTask(int)+0xb4>
c0015a63:	fb                   	sti    
c0015a64:	fa                   	cli    
c0015a65:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015a6a:	83 c0 01             	add    eax,0x1
c0015a6d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015a72:	66 90                	xchg   ax,ax
c0015a74:	e8 97 f5 ff ff       	call   c0015010 <schedule()>
c0015a79:	eb d9                	jmp    c0015a54 <terminateTask(int)+0xa4>
c0015a7b:	90                   	nop
c0015a7c:	83 ec 0c             	sub    esp,0xc
c0015a7f:	68 32 11 02 c0       	push   0xc0021132
c0015a84:	e8 f9 4e ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0015a89:	83 c4 10             	add    esp,0x10
c0015a8c:	eb 9e                	jmp    c0015a2c <terminateTask(int)+0x7c>
c0015a8e:	66 90                	xchg   ax,ax
c0015a90:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015a9a:	eb d8                	jmp    c0015a74 <terminateTask(int)+0xc4>

c0015a9c <Thr::terminateFromIRQ(int)>:
c0015a9c:	83 ec 18             	sub    esp,0x18
c0015a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015aa3:	50                   	push   eax
c0015aa4:	e8 07 ff ff ff       	call   c00159b0 <terminateTask(int)>
c0015aa9:	90                   	nop
c0015aaa:	66 90                	xchg   ax,ax

c0015aac <Semaphore::release()>:
c0015aac:	83 ec 0c             	sub    esp,0xc
c0015aaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ab3:	fa                   	cli    
c0015ab4:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015ab9:	83 c0 01             	add    eax,0x1
c0015abc:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ac1:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015ac6:	8d 48 01             	lea    ecx,[eax+0x1]
c0015ac9:	89 0d 64 81 02 c0    	mov    DWORD PTR ds:0xc0028164,ecx
c0015acf:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015ad2:	85 c9                	test   ecx,ecx
c0015ad4:	74 42                	je     c0015b18 <Semaphore::release()+0x6c>
c0015ad6:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015ad9:	83 ec 0c             	sub    esp,0xc
c0015adc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015adf:	51                   	push   ecx
c0015ae0:	e8 43 fa ff ff       	call   c0015528 <unblockTask(ThreadControlBlock*)>
c0015ae5:	a1 64 81 02 c0       	mov    eax,ds:0xc0028164
c0015aea:	83 c4 10             	add    esp,0x10
c0015aed:	83 e8 01             	sub    eax,0x1
c0015af0:	a3 64 81 02 c0       	mov    ds:0xc0028164,eax
c0015af5:	85 c0                	test   eax,eax
c0015af7:	75 0b                	jne    c0015b04 <Semaphore::release()+0x58>
c0015af9:	a1 60 81 02 c0       	mov    eax,ds:0xc0028160
c0015afe:	85 c0                	test   eax,eax
c0015b00:	75 22                	jne    c0015b24 <Semaphore::release()+0x78>
c0015b02:	66 90                	xchg   ax,ax
c0015b04:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015b09:	83 e8 01             	sub    eax,0x1
c0015b0c:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015b11:	75 01                	jne    c0015b14 <Semaphore::release()+0x68>
c0015b13:	fb                   	sti    
c0015b14:	83 c4 0c             	add    esp,0xc
c0015b17:	c3                   	ret    
c0015b18:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015b1b:	83 e9 01             	sub    ecx,0x1
c0015b1e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015b21:	eb cd                	jmp    c0015af0 <Semaphore::release()+0x44>
c0015b23:	90                   	nop
c0015b24:	c7 05 60 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028160,0x0
c0015b2e:	e8 dd f4 ff ff       	call   c0015010 <schedule()>
c0015b33:	eb cf                	jmp    c0015b04 <Semaphore::release()+0x58>
c0015b35:	8d 76 00             	lea    esi,[esi+0x0]

c0015b38 <__static_initialization_and_destruction_0(int, int)>:
c0015b38:	83 ec 0c             	sub    esp,0xc
c0015b3b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015b40:	0f 85 8e 00 00 00    	jne    c0015bd4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015b46:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015b4e:	0f 85 80 00 00 00    	jne    c0015bd4 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015b54:	83 ec 0c             	sub    esp,0xc
c0015b57:	68 84 81 02 c0       	push   0xc0028184
c0015b5c:	e8 93 93 00 00       	call   c001eef4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b61:	83 c4 10             	add    esp,0x10
c0015b64:	83 ec 04             	sub    esp,0x4
c0015b67:	68 c8 1d 02 c0       	push   0xc0021dc8
c0015b6c:	68 84 81 02 c0       	push   0xc0028184
c0015b71:	68 a4 ee 01 c0       	push   0xc001eea4
c0015b76:	e8 8a 4c ff ff       	call   c000a805 <__cxa_atexit>
c0015b7b:	83 c4 10             	add    esp,0x10
c0015b7e:	83 ec 0c             	sub    esp,0xc
c0015b81:	68 78 81 02 c0       	push   0xc0028178
c0015b86:	e8 69 93 00 00       	call   c001eef4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015b8b:	83 c4 10             	add    esp,0x10
c0015b8e:	83 ec 04             	sub    esp,0x4
c0015b91:	68 c8 1d 02 c0       	push   0xc0021dc8
c0015b96:	68 78 81 02 c0       	push   0xc0028178
c0015b9b:	68 a4 ee 01 c0       	push   0xc001eea4
c0015ba0:	e8 60 4c ff ff       	call   c000a805 <__cxa_atexit>
c0015ba5:	83 c4 10             	add    esp,0x10
c0015ba8:	83 ec 0c             	sub    esp,0xc
c0015bab:	68 6c 81 02 c0       	push   0xc002816c
c0015bb0:	e8 3f 93 00 00       	call   c001eef4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015bb5:	83 c4 10             	add    esp,0x10
c0015bb8:	83 ec 04             	sub    esp,0x4
c0015bbb:	68 c8 1d 02 c0       	push   0xc0021dc8
c0015bc0:	68 6c 81 02 c0       	push   0xc002816c
c0015bc5:	68 a4 ee 01 c0       	push   0xc001eea4
c0015bca:	e8 36 4c ff ff       	call   c000a805 <__cxa_atexit>
c0015bcf:	83 c4 10             	add    esp,0x10
c0015bd2:	66 90                	xchg   ax,ax
c0015bd4:	90                   	nop
c0015bd5:	83 c4 0c             	add    esp,0xc
c0015bd8:	c3                   	ret    
c0015bd9:	8d 76 00             	lea    esi,[esi+0x0]

c0015bdc <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015bdc:	83 ec 0c             	sub    esp,0xc
c0015bdf:	83 ec 08             	sub    esp,0x8
c0015be2:	68 ff ff 00 00       	push   0xffff
c0015be7:	6a 01                	push   0x1
c0015be9:	e8 4a ff ff ff       	call   c0015b38 <__static_initialization_and_destruction_0(int, int)>
c0015bee:	83 c4 10             	add    esp,0x10
c0015bf1:	83 c4 0c             	add    esp,0xc
c0015bf4:	c3                   	ret    

c0015bf5 <Vm::inbv(unsigned short)>:
c0015bf5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015bf9:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015bfe:	75 06                	jne    c0015c06 <Vm::inbv(unsigned short)+0x11>
c0015c00:	a0 cc 81 02 c0       	mov    al,ds:0xc00281cc
c0015c05:	c3                   	ret    
c0015c06:	ec                   	in     al,dx
c0015c07:	c3                   	ret    

c0015c08 <Vm::outbv(unsigned short, unsigned char)>:
c0015c08:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c10:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015c15:	75 25                	jne    c0015c3c <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015c17:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015c1d:	8d 51 01             	lea    edx,[ecx+0x1]
c0015c20:	88 81 e0 81 02 c0    	mov    BYTE PTR [ecx-0x3ffd7e20],al
c0015c26:	89 15 cc 81 02 c0    	mov    DWORD PTR ds:0xc00281cc,edx
c0015c2c:	83 fa 20             	cmp    edx,0x20
c0015c2f:	75 0c                	jne    c0015c3d <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015c31:	c7 05 cc 81 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x1f
c0015c3b:	c3                   	ret    
c0015c3c:	ee                   	out    dx,al
c0015c3d:	c3                   	ret    

c0015c3e <Vm::realToLinear(unsigned short, unsigned short)>:
c0015c3e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015c43:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015c48:	c1 e0 04             	shl    eax,0x4
c0015c4b:	01 d0                	add    eax,edx
c0015c4d:	c3                   	ret    

c0015c4e <Vm::getSegment(unsigned int)>:
c0015c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c52:	c1 e8 10             	shr    eax,0x10
c0015c55:	c3                   	ret    

c0015c56 <Vm::getOffset(unsigned int)>:
c0015c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c5a:	c3                   	ret    

c0015c5b <Vm::mainloop2()>:
c0015c5b:	83 ec 18             	sub    esp,0x18
c0015c5e:	fa                   	cli    
c0015c5f:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015c65:	6a 02                	push   0x2
c0015c67:	c6 05 c5 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c5,0x1
c0015c6e:	e8 89 f5 ff ff       	call   c00151fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015c73:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c78:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015c7c:	52                   	push   edx
c0015c7d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015c81:	52                   	push   edx
c0015c82:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015c86:	52                   	push   edx
c0015c87:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015c8b:	50                   	push   eax
c0015c8c:	e8 7e a5 fe ff       	call   c000020f <goToVM86>
c0015c91:	83 c4 2c             	add    esp,0x2c
c0015c94:	c3                   	ret    

c0015c95 <Vm::mainVm8086Loop(void*)>:
c0015c95:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015c9a:	48                   	dec    eax
c0015c9b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015ca0:	75 01                	jne    c0015ca3 <Vm::mainVm8086Loop(void*)+0xe>
c0015ca2:	fb                   	sti    
c0015ca3:	eb b6                	jmp    c0015c5b <Vm::mainloop2()>

c0015ca5 <Vm::mainloop3(unsigned long)>:
c0015ca5:	83 ec 18             	sub    esp,0x18
c0015ca8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015cac:	fa                   	cli    
c0015cad:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015cb3:	6a 02                	push   0x2
c0015cb5:	c6 05 c4 81 02 c0 01 	mov    BYTE PTR ds:0xc00281c4,0x1
c0015cbc:	a3 c0 81 02 c0       	mov    ds:0xc00281c0,eax
c0015cc1:	e8 36 f5 ff ff       	call   c00151fc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015cc6:	83 c4 1c             	add    esp,0x1c
c0015cc9:	eb 90                	jmp    c0015c5b <Vm::mainloop2()>

c0015ccb <Vm::initialise8086()>:
c0015ccb:	83 ec 0c             	sub    esp,0xc
c0015cce:	68 80 00 00 00       	push   0x80
c0015cd3:	6a 00                	push   0x0
c0015cd5:	68 95 5c 01 c0       	push   0xc0015c95
c0015cda:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015ce0:	e8 db f0 ff ff       	call   c0014dc0 <Process::createThread(void (*)(void*), void*, int)>
c0015ce5:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015cec:	a3 c8 81 02 c0       	mov    ds:0xc00281c8,eax
c0015cf1:	68 00 01 00 00       	push   0x100
c0015cf6:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0015cfb:	6a 00                	push   0x0
c0015cfd:	6a 00                	push   0x0
c0015cff:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015d05:	e8 fa 42 ff ff       	call   c000a004 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015d0a:	83 c4 2c             	add    esp,0x2c
c0015d0d:	c3                   	ret    

c0015d0e <Vm::finish8086()>:
c0015d0e:	53                   	push   ebx
c0015d0f:	83 ec 08             	sub    esp,0x8
c0015d12:	fa                   	cli    
c0015d13:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015d19:	80 3d c4 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c4,0x0
c0015d20:	75 15                	jne    c0015d37 <Vm::finish8086()+0x29>
c0015d22:	e8 e9 f2 ff ff       	call   c0015010 <schedule()>
c0015d27:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d2c:	48                   	dec    eax
c0015d2d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015d32:	75 de                	jne    c0015d12 <Vm::finish8086()+0x4>
c0015d34:	fb                   	sti    
c0015d35:	eb db                	jmp    c0015d12 <Vm::finish8086()+0x4>
c0015d37:	83 ec 0c             	sub    esp,0xc
c0015d3a:	8b 1d c0 81 02 c0    	mov    ebx,DWORD PTR ds:0xc00281c0
c0015d40:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015d46:	c6 05 c4 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c4,0x0
c0015d4d:	e8 d6 f7 ff ff       	call   c0015528 <unblockTask(ThreadControlBlock*)>
c0015d52:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015d57:	83 c4 10             	add    esp,0x10
c0015d5a:	8d 50 ff             	lea    edx,[eax-0x1]
c0015d5d:	89 15 68 81 02 c0    	mov    DWORD PTR ds:0xc0028168,edx
c0015d63:	85 d2                	test   edx,edx
c0015d65:	75 01                	jne    c0015d68 <Vm::finish8086()+0x5a>
c0015d67:	fb                   	sti    
c0015d68:	89 d8                	mov    eax,ebx
c0015d6a:	83 c4 08             	add    esp,0x8
c0015d6d:	5b                   	pop    ebx
c0015d6e:	c3                   	ret    

c0015d6f <Vm::getOutput8086(unsigned char*)>:
c0015d6f:	57                   	push   edi
c0015d70:	8b 0d cc 81 02 c0    	mov    ecx,DWORD PTR ds:0xc00281cc
c0015d76:	56                   	push   esi
c0015d77:	be e0 81 02 c0       	mov    esi,0xc00281e0
c0015d7c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015d80:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015d82:	a1 cc 81 02 c0       	mov    eax,ds:0xc00281cc
c0015d87:	5e                   	pop    esi
c0015d88:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015d92:	5f                   	pop    edi
c0015d93:	c3                   	ret    

c0015d94 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015d94:	55                   	push   ebp
c0015d95:	57                   	push   edi
c0015d96:	56                   	push   esi
c0015d97:	53                   	push   ebx
c0015d98:	83 ec 0c             	sub    esp,0xc
c0015d9b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015d9f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015da3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0015da7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0015dab:	fa                   	cli    
c0015dac:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015db2:	80 3d c5 81 02 c0 00 	cmp    BYTE PTR ds:0xc00281c5,0x0
c0015db9:	75 15                	jne    c0015dd0 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0015dbb:	e8 50 f2 ff ff       	call   c0015010 <schedule()>
c0015dc0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015dc5:	48                   	dec    eax
c0015dc6:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015dcb:	75 de                	jne    c0015dab <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015dcd:	fb                   	sti    
c0015dce:	eb db                	jmp    c0015dab <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015dd0:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015dd5:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015ddf:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0015de3:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0015de7:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0015deb:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015def:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015df3:	0f b7 ff             	movzx  edi,di
c0015df6:	0f b7 f6             	movzx  esi,si
c0015df9:	50                   	push   eax
c0015dfa:	6a 20                	push   0x20
c0015dfc:	6a 00                	push   0x0
c0015dfe:	68 e0 81 02 c0       	push   0xc00281e0
c0015e03:	e8 e8 a6 fe ff       	call   c00004f0 <memset>
c0015e08:	5a                   	pop    edx
c0015e09:	59                   	pop    ecx
c0015e0a:	57                   	push   edi
c0015e0b:	56                   	push   esi
c0015e0c:	e8 2d fe ff ff       	call   c0015c3e <Vm::realToLinear(unsigned short, unsigned short)>
c0015e11:	83 c4 10             	add    esp,0x10
c0015e14:	89 c7                	mov    edi,eax
c0015e16:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015e1a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015e1e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015e20:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e25:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015e2c:	48                   	dec    eax
c0015e2d:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e32:	75 01                	jne    c0015e35 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015e34:	fb                   	sti    
c0015e35:	83 ec 0c             	sub    esp,0xc
c0015e38:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015e3e:	e8 e5 f6 ff ff       	call   c0015528 <unblockTask(ThreadControlBlock*)>
c0015e43:	83 c4 1c             	add    esp,0x1c
c0015e46:	b0 01                	mov    al,0x1
c0015e48:	5b                   	pop    ebx
c0015e49:	5e                   	pop    esi
c0015e4a:	5f                   	pop    edi
c0015e4b:	5d                   	pop    ebp
c0015e4c:	c3                   	ret    

c0015e4d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015e4d:	55                   	push   ebp
c0015e4e:	57                   	push   edi
c0015e4f:	56                   	push   esi
c0015e50:	53                   	push   ebx
c0015e51:	83 ec 2c             	sub    esp,0x2c
c0015e54:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0015e58:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0015e5c:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0015e60:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015e64:	fa                   	cli    
c0015e65:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c0015e6b:	0f b6 35 c5 81 02 c0 	movzx  esi,BYTE PTR ds:0xc00281c5
c0015e72:	89 f0                	mov    eax,esi
c0015e74:	84 c0                	test   al,al
c0015e76:	75 1d                	jne    c0015e95 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0015e78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015e7c:	e8 8f f1 ff ff       	call   c0015010 <schedule()>
c0015e81:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015e86:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e8a:	48                   	dec    eax
c0015e8b:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015e90:	75 d2                	jne    c0015e64 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015e92:	fb                   	sti    
c0015e93:	eb cf                	jmp    c0015e64 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015e95:	a1 c8 81 02 c0       	mov    eax,ds:0xc00281c8
c0015e9a:	c7 05 cc 81 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00281cc,0x0
c0015ea4:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0015ea8:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0015eac:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0015eb0:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0015eb4:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0015eb8:	50                   	push   eax
c0015eb9:	6a 20                	push   0x20
c0015ebb:	6a 00                	push   0x0
c0015ebd:	68 e0 81 02 c0       	push   0xc00281e0
c0015ec2:	e8 29 a6 fe ff       	call   c00004f0 <memset>
c0015ec7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015ece:	e8 c7 1b ff ff       	call   c0007a9a <malloc>
c0015ed3:	83 c4 0c             	add    esp,0xc
c0015ed6:	89 c3                	mov    ebx,eax
c0015ed8:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c0015ede:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015ee2:	50                   	push   eax
c0015ee3:	e8 1c 50 ff ff       	call   c000af04 <File::File(char const*, Process*)>
c0015ee8:	83 c4 10             	add    esp,0x10
c0015eeb:	85 db                	test   ebx,ebx
c0015eed:	75 0a                	jne    c0015ef9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0015eef:	83 ec 0c             	sub    esp,0xc
c0015ef2:	68 5c 12 02 c0       	push   0xc002125c
c0015ef7:	eb 2b                	jmp    c0015f24 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd7>
c0015ef9:	50                   	push   eax
c0015efa:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015efe:	50                   	push   eax
c0015eff:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015f03:	50                   	push   eax
c0015f04:	53                   	push   ebx
c0015f05:	e8 62 53 ff ff       	call   c000b26c <File::stat(unsigned long long*, bool*)>
c0015f0a:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015f0e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015f12:	83 c4 10             	add    esp,0x10
c0015f15:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0015f1a:	74 27                	je     c0015f43 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf6>
c0015f1c:	83 ec 0c             	sub    esp,0xc
c0015f1f:	68 70 12 02 c0       	push   0xc0021270
c0015f24:	e8 36 a9 ff ff       	call   c001085f <KePanic(char const*)>
c0015f29:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f2e:	83 c4 10             	add    esp,0x10
c0015f31:	48                   	dec    eax
c0015f32:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f37:	85 c0                	test   eax,eax
c0015f39:	75 01                	jne    c0015f3c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xef>
c0015f3b:	fb                   	sti    
c0015f3c:	31 f6                	xor    esi,esi
c0015f3e:	e9 8f 00 00 00       	jmp    c0015fd2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x185>
c0015f43:	51                   	push   ecx
c0015f44:	51                   	push   ecx
c0015f45:	6a 01                	push   0x1
c0015f47:	53                   	push   ebx
c0015f48:	e8 73 50 ff ff       	call   c000afc0 <File::open(FileOpenMode)>
c0015f4d:	83 c4 10             	add    esp,0x10
c0015f50:	85 c0                	test   eax,eax
c0015f52:	74 26                	je     c0015f7a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x12d>
c0015f54:	83 ec 0c             	sub    esp,0xc
c0015f57:	68 89 12 02 c0       	push   0xc0021289
c0015f5c:	e8 fe a8 ff ff       	call   c001085f <KePanic(char const*)>
c0015f61:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015f66:	83 c4 10             	add    esp,0x10
c0015f69:	48                   	dec    eax
c0015f6a:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015f6f:	85 c0                	test   eax,eax
c0015f71:	75 c9                	jne    c0015f3c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xef>
c0015f73:	fb                   	sti    
c0015f74:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015f78:	eb 58                	jmp    c0015fd2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x185>
c0015f7a:	0f b7 ed             	movzx  ebp,bp
c0015f7d:	50                   	push   eax
c0015f7e:	0f b7 ff             	movzx  edi,di
c0015f81:	50                   	push   eax
c0015f82:	55                   	push   ebp
c0015f83:	57                   	push   edi
c0015f84:	e8 b5 fc ff ff       	call   c0015c3e <Vm::realToLinear(unsigned short, unsigned short)>
c0015f89:	5a                   	pop    edx
c0015f8a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015f8c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0015f90:	51                   	push   ecx
c0015f91:	50                   	push   eax
c0015f92:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f96:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f9a:	53                   	push   ebx
c0015f9b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015f9e:	83 c4 14             	add    esp,0x14
c0015fa1:	53                   	push   ebx
c0015fa2:	e8 77 50 ff ff       	call   c000b01e <File::close()>
c0015fa7:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0015fac:	83 c4 10             	add    esp,0x10
c0015faf:	48                   	dec    eax
c0015fb0:	c6 05 c5 81 02 c0 00 	mov    BYTE PTR ds:0xc00281c5,0x0
c0015fb7:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0015fbc:	85 c0                	test   eax,eax
c0015fbe:	75 01                	jne    c0015fc1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x174>
c0015fc0:	fb                   	sti    
c0015fc1:	83 ec 0c             	sub    esp,0xc
c0015fc4:	ff 35 c8 81 02 c0    	push   DWORD PTR ds:0xc00281c8
c0015fca:	e8 59 f5 ff ff       	call   c0015528 <unblockTask(ThreadControlBlock*)>
c0015fcf:	83 c4 10             	add    esp,0x10
c0015fd2:	83 c4 2c             	add    esp,0x2c
c0015fd5:	89 f0                	mov    eax,esi
c0015fd7:	5b                   	pop    ebx
c0015fd8:	5e                   	pop    esi
c0015fd9:	5f                   	pop    edi
c0015fda:	5d                   	pop    ebp
c0015fdb:	c3                   	ret    

c0015fdc <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0015fdc:	57                   	push   edi
c0015fdd:	56                   	push   esi
c0015fde:	53                   	push   ebx
c0015fdf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015fe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fe7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015feb:	83 e8 06             	sub    eax,0x6
c0015fee:	0f b7 c0             	movzx  eax,ax
c0015ff1:	50                   	push   eax
c0015ff2:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0015ff7:	50                   	push   eax
c0015ff8:	e8 41 fc ff ff       	call   c0015c3e <Vm::realToLinear(unsigned short, unsigned short)>
c0015ffd:	5a                   	pop    edx
c0015ffe:	5e                   	pop    esi
c0015fff:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0016002:	8d 56 fa             	lea    edx,[esi-0x6]
c0016005:	8b 71 38             	mov    esi,DWORD PTR [ecx+0x38]
c0016008:	81 e2 ff ff 00 00    	and    edx,0xffff
c001600e:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0016011:	8d 56 02             	lea    edx,[esi+0x2]
c0016014:	66 89 10             	mov    WORD PTR [eax],dx
c0016017:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001601a:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001601e:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0016021:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016025:	89 d6                	mov    esi,edx
c0016027:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001602d:	81 e6 ff fd ff ff    	and    esi,0xfffffdff
c0016033:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0016037:	74 05                	je     c001603e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x62>
c0016039:	80 ce 02             	or     dh,0x2
c001603c:	89 d6                	mov    esi,edx
c001603e:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0016042:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016047:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001604b:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0016053:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0016056:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001605e:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0016061:	5b                   	pop    ebx
c0016062:	5e                   	pop    esi
c0016063:	5f                   	pop    edi
c0016064:	c3                   	ret    

c0016065 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016065:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001606a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001606f:	c1 e0 04             	shl    eax,0x4
c0016072:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016075:	c3                   	ret    

c0016076 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016076:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001607b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016080:	c1 e0 04             	shl    eax,0x4
c0016083:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016087:	c3                   	ret    

c0016088 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016088:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001608d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016092:	c1 e0 04             	shl    eax,0x4
c0016095:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016098:	c3                   	ret    

c0016099 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016099:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001609e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160a3:	c1 e0 04             	shl    eax,0x4
c00160a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160aa:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00160ad:	c3                   	ret    

c00160ae <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00160ae:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160b3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160b8:	c1 e0 04             	shl    eax,0x4
c00160bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160bf:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00160c3:	c3                   	ret    

c00160c4 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00160c4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00160c9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00160ce:	c1 e0 04             	shl    eax,0x4
c00160d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160d5:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00160d8:	c3                   	ret    

c00160d9 <Vm::faultHandler(regs*)>:
c00160d9:	55                   	push   ebp
c00160da:	57                   	push   edi
c00160db:	56                   	push   esi
c00160dc:	53                   	push   ebx
c00160dd:	83 ec 2c             	sub    esp,0x2c
c00160e0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00160e4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00160e7:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00160eb:	0f b7 f8             	movzx  edi,ax
c00160ee:	52                   	push   edx
c00160ef:	0f b7 c0             	movzx  eax,ax
c00160f2:	50                   	push   eax
c00160f3:	e8 46 fb ff ff       	call   c0015c3e <Vm::realToLinear(unsigned short, unsigned short)>
c00160f8:	5a                   	pop    edx
c00160f9:	59                   	pop    ecx
c00160fa:	89 c1                	mov    ecx,eax
c00160fc:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00160ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016103:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016108:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001610c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c001610f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016113:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016118:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001611c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016120:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016124:	e8 15 fb ff ff       	call   c0015c3e <Vm::realToLinear(unsigned short, unsigned short)>
c0016129:	5e                   	pop    esi
c001612a:	be 06 00 00 00       	mov    esi,0x6
c001612f:	5d                   	pop    ebp
c0016130:	31 ed                	xor    ebp,ebp
c0016132:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016137:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001613a:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016140:	0f 84 54 02 00 00    	je     c001639a <Vm::faultHandler(regs*)+0x2c1>
c0016146:	0f 87 94 00 00 00    	ja     c00161e0 <Vm::faultHandler(regs*)+0x107>
c001614c:	83 fa 66             	cmp    edx,0x66
c001614f:	0f 84 c2 01 00 00    	je     c0016317 <Vm::faultHandler(regs*)+0x23e>
c0016155:	77 47                	ja     c001619e <Vm::faultHandler(regs*)+0xc5>
c0016157:	83 fa 36             	cmp    edx,0x36
c001615a:	0f 84 aa 01 00 00    	je     c001630a <Vm::faultHandler(regs*)+0x231>
c0016160:	77 1a                	ja     c001617c <Vm::faultHandler(regs*)+0xa3>
c0016162:	83 fa 26             	cmp    edx,0x26
c0016165:	0f 84 78 01 00 00    	je     c00162e3 <Vm::faultHandler(regs*)+0x20a>
c001616b:	83 fa 2e             	cmp    edx,0x2e
c001616e:	0f 85 01 06 00 00    	jne    c0016775 <Vm::faultHandler(regs*)+0x69c>
c0016174:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016177:	31 f6                	xor    esi,esi
c0016179:	41                   	inc    ecx
c001617a:	eb bb                	jmp    c0016137 <Vm::faultHandler(regs*)+0x5e>
c001617c:	83 fa 64             	cmp    edx,0x64
c001617f:	0f 84 6b 01 00 00    	je     c00162f0 <Vm::faultHandler(regs*)+0x217>
c0016185:	0f 87 72 01 00 00    	ja     c00162fd <Vm::faultHandler(regs*)+0x224>
c001618b:	83 fa 3e             	cmp    edx,0x3e
c001618e:	0f 85 e1 05 00 00    	jne    c0016775 <Vm::faultHandler(regs*)+0x69c>
c0016194:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016197:	be 01 00 00 00       	mov    esi,0x1
c001619c:	eb db                	jmp    c0016179 <Vm::faultHandler(regs*)+0xa0>
c001619e:	83 fa 6d             	cmp    edx,0x6d
c00161a1:	0f 84 14 03 00 00    	je     c00164bb <Vm::faultHandler(regs*)+0x3e2>
c00161a7:	77 17                	ja     c00161c0 <Vm::faultHandler(regs*)+0xe7>
c00161a9:	83 fa 67             	cmp    edx,0x67
c00161ac:	0f 84 72 01 00 00    	je     c0016324 <Vm::faultHandler(regs*)+0x24b>
c00161b2:	83 fa 6c             	cmp    edx,0x6c
c00161b5:	0f 84 91 02 00 00    	je     c001644c <Vm::faultHandler(regs*)+0x373>
c00161bb:	e9 b5 05 00 00       	jmp    c0016775 <Vm::faultHandler(regs*)+0x69c>
c00161c0:	83 fa 6f             	cmp    edx,0x6f
c00161c3:	0f 84 1d 04 00 00    	je     c00165e6 <Vm::faultHandler(regs*)+0x50d>
c00161c9:	0f 82 7f 03 00 00    	jb     c001654e <Vm::faultHandler(regs*)+0x475>
c00161cf:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00161d5:	0f 84 56 01 00 00    	je     c0016331 <Vm::faultHandler(regs*)+0x258>
c00161db:	e9 95 05 00 00       	jmp    c0016775 <Vm::faultHandler(regs*)+0x69c>
c00161e0:	81 fa ec 00 00 00    	cmp    edx,0xec
c00161e6:	0f 84 31 05 00 00    	je     c001671d <Vm::faultHandler(regs*)+0x644>
c00161ec:	0f 87 89 00 00 00    	ja     c001627b <Vm::faultHandler(regs*)+0x1a2>
c00161f2:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00161f8:	0f 84 b0 04 00 00    	je     c00166ae <Vm::faultHandler(regs*)+0x5d5>
c00161fe:	77 58                	ja     c0016258 <Vm::faultHandler(regs*)+0x17f>
c0016200:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016206:	0f 84 ee 01 00 00    	je     c00163fa <Vm::faultHandler(regs*)+0x321>
c001620c:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016212:	0f 85 5d 05 00 00    	jne    c0016775 <Vm::faultHandler(regs*)+0x69c>
c0016218:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001621b:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001621e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0016222:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016225:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0016229:	81 ca 00 02 02 00    	or     edx,0x20200
c001622f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016232:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
c0016236:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001623c:	c1 e8 09             	shr    eax,0x9
c001623f:	83 e0 01             	and    eax,0x1
c0016242:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016245:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016248:	83 c0 06             	add    eax,0x6
c001624b:	25 ff ff 00 00       	and    eax,0xffff
c0016250:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016253:	e9 19 05 00 00       	jmp    c0016771 <Vm::faultHandler(regs*)+0x698>
c0016258:	81 fa e6 00 00 00    	cmp    edx,0xe6
c001625e:	0f 84 8f 04 00 00    	je     c00166f3 <Vm::faultHandler(regs*)+0x61a>
c0016264:	0f 82 60 04 00 00    	jb     c00166ca <Vm::faultHandler(regs*)+0x5f1>
c001626a:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016270:	0f 84 94 04 00 00    	je     c001670a <Vm::faultHandler(regs*)+0x631>
c0016276:	e9 fa 04 00 00       	jmp    c0016775 <Vm::faultHandler(regs*)+0x69c>
c001627b:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016281:	0f 84 d7 04 00 00    	je     c001675e <Vm::faultHandler(regs*)+0x685>
c0016287:	77 2e                	ja     c00162b7 <Vm::faultHandler(regs*)+0x1de>
c0016289:	81 fa ed 00 00 00    	cmp    edx,0xed
c001628f:	0f 84 a4 04 00 00    	je     c0016739 <Vm::faultHandler(regs*)+0x660>
c0016295:	81 fa ee 00 00 00    	cmp    edx,0xee
c001629b:	0f 85 d4 04 00 00    	jne    c0016775 <Vm::faultHandler(regs*)+0x69c>
c00162a1:	50                   	push   eax
c00162a2:	50                   	push   eax
c00162a3:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00162a7:	50                   	push   eax
c00162a8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00162ac:	50                   	push   eax
c00162ad:	e8 56 f9 ff ff       	call   c0015c08 <Vm::outbv(unsigned short, unsigned char)>
c00162b2:	e9 9f 04 00 00       	jmp    c0016756 <Vm::faultHandler(regs*)+0x67d>
c00162b7:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00162bd:	0f 84 6d 01 00 00    	je     c0016430 <Vm::faultHandler(regs*)+0x357>
c00162c3:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00162c9:	0f 84 6f 01 00 00    	je     c001643e <Vm::faultHandler(regs*)+0x365>
c00162cf:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00162d5:	0f 85 9a 04 00 00    	jne    c0016775 <Vm::faultHandler(regs*)+0x69c>
c00162db:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162de:	e9 96 fe ff ff       	jmp    c0016179 <Vm::faultHandler(regs*)+0xa0>
c00162e3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162e6:	be 02 00 00 00       	mov    esi,0x2
c00162eb:	e9 89 fe ff ff       	jmp    c0016179 <Vm::faultHandler(regs*)+0xa0>
c00162f0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00162f3:	be 03 00 00 00       	mov    esi,0x3
c00162f8:	e9 7c fe ff ff       	jmp    c0016179 <Vm::faultHandler(regs*)+0xa0>
c00162fd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016300:	be 04 00 00 00       	mov    esi,0x4
c0016305:	e9 6f fe ff ff       	jmp    c0016179 <Vm::faultHandler(regs*)+0xa0>
c001630a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001630d:	be 05 00 00 00       	mov    esi,0x5
c0016312:	e9 62 fe ff ff       	jmp    c0016179 <Vm::faultHandler(regs*)+0xa0>
c0016317:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001631a:	bd 01 00 00 00       	mov    ebp,0x1
c001631f:	e9 55 fe ff ff       	jmp    c0016179 <Vm::faultHandler(regs*)+0xa0>
c0016324:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016327:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001632c:	e9 48 fe ff ff       	jmp    c0016179 <Vm::faultHandler(regs*)+0xa0>
c0016331:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016334:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016338:	83 e5 01             	and    ebp,0x1
c001633b:	74 30                	je     c001636d <Vm::faultHandler(regs*)+0x294>
c001633d:	83 e9 04             	sub    ecx,0x4
c0016340:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016346:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001634c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001634f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016352:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016358:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001635c:	0f 84 0c 04 00 00    	je     c001676e <Vm::faultHandler(regs*)+0x695>
c0016362:	80 ce 02             	or     dh,0x2
c0016365:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016368:	e9 01 04 00 00       	jmp    c001676e <Vm::faultHandler(regs*)+0x695>
c001636d:	83 e9 02             	sub    ecx,0x2
c0016370:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016376:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016379:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001637d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016383:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016387:	74 05                	je     c001638e <Vm::faultHandler(regs*)+0x2b5>
c0016389:	80 ce 02             	or     dh,0x2
c001638c:	eb 03                	jmp    c0016391 <Vm::faultHandler(regs*)+0x2b8>
c001638e:	80 e6 fd             	and    dh,0xfd
c0016391:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016395:	e9 d4 03 00 00       	jmp    c001676e <Vm::faultHandler(regs*)+0x695>
c001639a:	83 e5 01             	and    ebp,0x1
c001639d:	74 2a                	je     c00163c9 <Vm::faultHandler(regs*)+0x2f0>
c001639f:	8b 10                	mov    edx,DWORD PTR [eax]
c00163a1:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00163a7:	81 ca 00 02 02 00    	or     edx,0x20200
c00163ad:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00163b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00163b2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163b8:	c1 e8 09             	shr    eax,0x9
c00163bb:	83 e0 01             	and    eax,0x1
c00163be:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00163c1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00163c4:	83 c0 04             	add    eax,0x4
c00163c7:	eb 24                	jmp    c00163ed <Vm::faultHandler(regs*)+0x314>
c00163c9:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00163cc:	81 ca 00 02 02 00    	or     edx,0x20200
c00163d2:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00163d5:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00163d8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00163de:	c1 e8 09             	shr    eax,0x9
c00163e1:	83 e0 01             	and    eax,0x1
c00163e4:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00163e7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00163ea:	83 c0 02             	add    eax,0x2
c00163ed:	25 ff ff 00 00       	and    eax,0xffff
c00163f2:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00163f5:	e9 74 03 00 00       	jmp    c001676e <Vm::faultHandler(regs*)+0x695>
c00163fa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00163fe:	3d ee 00 00 00       	cmp    eax,0xee
c0016403:	75 10                	jne    c0016415 <Vm::faultHandler(regs*)+0x33c>
c0016405:	83 ec 0c             	sub    esp,0xc
c0016408:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001640b:	e8 95 f8 ff ff       	call   c0015ca5 <Vm::mainloop3(unsigned long)>
c0016410:	e9 44 03 00 00       	jmp    c0016759 <Vm::faultHandler(regs*)+0x680>
c0016415:	83 ec 0c             	sub    esp,0xc
c0016418:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001641c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016420:	51                   	push   ecx
c0016421:	50                   	push   eax
c0016422:	53                   	push   ebx
c0016423:	e8 b4 fb ff ff       	call   c0015fdc <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016428:	83 c4 20             	add    esp,0x20
c001642b:	e9 41 03 00 00       	jmp    c0016771 <Vm::faultHandler(regs*)+0x698>
c0016430:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016435:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016439:	e9 30 03 00 00       	jmp    c001676e <Vm::faultHandler(regs*)+0x695>
c001643e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016443:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016447:	e9 22 03 00 00       	jmp    c001676e <Vm::faultHandler(regs*)+0x695>
c001644c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001644f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016454:	74 2b                	je     c0016481 <Vm::faultHandler(regs*)+0x3a8>
c0016456:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001645d:	76 22                	jbe    c0016481 <Vm::faultHandler(regs*)+0x3a8>
c001645f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016463:	50                   	push   eax
c0016464:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016468:	50                   	push   eax
c0016469:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001646d:	50                   	push   eax
c001646e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016472:	50                   	push   eax
c0016473:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016477:	50                   	push   eax
c0016478:	6a 6c                	push   0x6c
c001647a:	6a 6c                	push   0x6c
c001647c:	e9 bd 01 00 00       	jmp    c001663e <Vm::faultHandler(regs*)+0x565>
c0016481:	83 ec 0c             	sub    esp,0xc
c0016484:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016488:	0f b7 f6             	movzx  esi,si
c001648b:	50                   	push   eax
c001648c:	e8 64 f7 ff ff       	call   c0015bf5 <Vm::inbv(unsigned short)>
c0016491:	83 c4 0c             	add    esp,0xc
c0016494:	0f b6 c0             	movzx  eax,al
c0016497:	50                   	push   eax
c0016498:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001649c:	50                   	push   eax
c001649d:	56                   	push   esi
c001649e:	e8 f6 fb ff ff       	call   c0016099 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00164a3:	83 c4 10             	add    esp,0x10
c00164a6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164a9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00164ad:	74 03                	je     c00164b2 <Vm::faultHandler(regs*)+0x3d9>
c00164af:	48                   	dec    eax
c00164b0:	eb 01                	jmp    c00164b3 <Vm::faultHandler(regs*)+0x3da>
c00164b2:	40                   	inc    eax
c00164b3:	0f b7 c0             	movzx  eax,ax
c00164b6:	e9 8b 00 00 00       	jmp    c0016546 <Vm::faultHandler(regs*)+0x46d>
c00164bb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00164be:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00164c1:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00164c6:	74 29                	je     c00164f1 <Vm::faultHandler(regs*)+0x418>
c00164c8:	3d ff ff 00 00       	cmp    eax,0xffff
c00164cd:	76 22                	jbe    c00164f1 <Vm::faultHandler(regs*)+0x418>
c00164cf:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00164d3:	50                   	push   eax
c00164d4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00164d8:	50                   	push   eax
c00164d9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00164dd:	50                   	push   eax
c00164de:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00164e2:	50                   	push   eax
c00164e3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00164e7:	50                   	push   eax
c00164e8:	6a 6d                	push   0x6d
c00164ea:	6a 6d                	push   0x6d
c00164ec:	e9 4d 01 00 00       	jmp    c001663e <Vm::faultHandler(regs*)+0x565>
c00164f1:	0f b7 c8             	movzx  ecx,ax
c00164f4:	0f b7 f6             	movzx  esi,si
c00164f7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00164fa:	83 e5 01             	and    ebp,0x1
c00164fd:	74 20                	je     c001651f <Vm::faultHandler(regs*)+0x446>
c00164ff:	ed                   	in     eax,dx
c0016500:	55                   	push   ebp
c0016501:	50                   	push   eax
c0016502:	51                   	push   ecx
c0016503:	56                   	push   esi
c0016504:	e8 bb fb ff ff       	call   c00160c4 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016509:	83 c4 10             	add    esp,0x10
c001650c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001650f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016513:	74 05                	je     c001651a <Vm::faultHandler(regs*)+0x441>
c0016515:	83 e8 04             	sub    eax,0x4
c0016518:	eb 27                	jmp    c0016541 <Vm::faultHandler(regs*)+0x468>
c001651a:	83 c0 04             	add    eax,0x4
c001651d:	eb 22                	jmp    c0016541 <Vm::faultHandler(regs*)+0x468>
c001651f:	66 ed                	in     ax,dx
c0016521:	0f b7 c0             	movzx  eax,ax
c0016524:	57                   	push   edi
c0016525:	50                   	push   eax
c0016526:	51                   	push   ecx
c0016527:	56                   	push   esi
c0016528:	e8 81 fb ff ff       	call   c00160ae <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001652d:	83 c4 10             	add    esp,0x10
c0016530:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016533:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016537:	74 05                	je     c001653e <Vm::faultHandler(regs*)+0x465>
c0016539:	83 e8 02             	sub    eax,0x2
c001653c:	eb 03                	jmp    c0016541 <Vm::faultHandler(regs*)+0x468>
c001653e:	83 c0 02             	add    eax,0x2
c0016541:	25 ff ff 00 00       	and    eax,0xffff
c0016546:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016549:	e9 20 02 00 00       	jmp    c001676e <Vm::faultHandler(regs*)+0x695>
c001654e:	8d 46 ff             	lea    eax,[esi-0x1]
c0016551:	0f b6 f0             	movzx  esi,al
c0016554:	83 fe 05             	cmp    esi,0x5
c0016557:	77 23                	ja     c001657c <Vm::faultHandler(regs*)+0x4a3>
c0016559:	ff 24 b5 fc 12 02 c0 	jmp    DWORD PTR [esi*4-0x3ffded04]
c0016560:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0016565:	eb 15                	jmp    c001657c <Vm::faultHandler(regs*)+0x4a3>
c0016567:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001656b:	eb 0f                	jmp    c001657c <Vm::faultHandler(regs*)+0x4a3>
c001656d:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016571:	eb 09                	jmp    c001657c <Vm::faultHandler(regs*)+0x4a3>
c0016573:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0016577:	eb 03                	jmp    c001657c <Vm::faultHandler(regs*)+0x4a3>
c0016579:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001657c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001657f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016584:	74 29                	je     c00165af <Vm::faultHandler(regs*)+0x4d6>
c0016586:	3d ff ff 00 00       	cmp    eax,0xffff
c001658b:	76 22                	jbe    c00165af <Vm::faultHandler(regs*)+0x4d6>
c001658d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016591:	50                   	push   eax
c0016592:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016596:	50                   	push   eax
c0016597:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001659b:	50                   	push   eax
c001659c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00165a0:	50                   	push   eax
c00165a1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00165a5:	50                   	push   eax
c00165a6:	6a 6e                	push   0x6e
c00165a8:	6a 6e                	push   0x6e
c00165aa:	e9 8f 00 00 00       	jmp    c001663e <Vm::faultHandler(regs*)+0x565>
c00165af:	0f b7 c0             	movzx  eax,ax
c00165b2:	52                   	push   edx
c00165b3:	52                   	push   edx
c00165b4:	50                   	push   eax
c00165b5:	57                   	push   edi
c00165b6:	e8 aa fa ff ff       	call   c0016065 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00165bb:	59                   	pop    ecx
c00165bc:	0f b6 c0             	movzx  eax,al
c00165bf:	5e                   	pop    esi
c00165c0:	50                   	push   eax
c00165c1:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00165c5:	50                   	push   eax
c00165c6:	e8 3d f6 ff ff       	call   c0015c08 <Vm::outbv(unsigned short, unsigned char)>
c00165cb:	83 c4 10             	add    esp,0x10
c00165ce:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00165d1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00165d5:	74 03                	je     c00165da <Vm::faultHandler(regs*)+0x501>
c00165d7:	48                   	dec    eax
c00165d8:	eb 01                	jmp    c00165db <Vm::faultHandler(regs*)+0x502>
c00165da:	40                   	inc    eax
c00165db:	0f b7 c0             	movzx  eax,ax
c00165de:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00165e1:	e9 88 01 00 00       	jmp    c001676e <Vm::faultHandler(regs*)+0x695>
c00165e6:	8d 46 ff             	lea    eax,[esi-0x1]
c00165e9:	0f b6 f0             	movzx  esi,al
c00165ec:	83 fe 05             	cmp    esi,0x5
c00165ef:	77 1e                	ja     c001660f <Vm::faultHandler(regs*)+0x536>
c00165f1:	ff 24 b5 14 13 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdecec]
c00165f8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00165fc:	eb 11                	jmp    c001660f <Vm::faultHandler(regs*)+0x536>
c00165fe:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0016601:	eb 0c                	jmp    c001660f <Vm::faultHandler(regs*)+0x536>
c0016603:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0016606:	eb 07                	jmp    c001660f <Vm::faultHandler(regs*)+0x536>
c0016608:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001660b:	eb 02                	jmp    c001660f <Vm::faultHandler(regs*)+0x536>
c001660d:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001660f:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0016612:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016617:	74 37                	je     c0016650 <Vm::faultHandler(regs*)+0x577>
c0016619:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001661f:	76 2f                	jbe    c0016650 <Vm::faultHandler(regs*)+0x577>
c0016621:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016625:	50                   	push   eax
c0016626:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001662a:	50                   	push   eax
c001662b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001662f:	50                   	push   eax
c0016630:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016634:	50                   	push   eax
c0016635:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016639:	50                   	push   eax
c001663a:	6a 6f                	push   0x6f
c001663c:	6a 6f                	push   0x6f
c001663e:	68 a2 12 02 c0       	push   0xc00212a2
c0016643:	e8 3a 43 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0016648:	83 c4 20             	add    esp,0x20
c001664b:	e9 83 01 00 00       	jmp    c00167d3 <Vm::faultHandler(regs*)+0x6fa>
c0016650:	0f b7 d7             	movzx  edx,di
c0016653:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016656:	0f b7 c6             	movzx  eax,si
c0016659:	81 e1 00 04 00 00    	and    ecx,0x400
c001665f:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016662:	83 e5 01             	and    ebp,0x1
c0016665:	74 1d                	je     c0016684 <Vm::faultHandler(regs*)+0x5ab>
c0016667:	55                   	push   ebp
c0016668:	55                   	push   ebp
c0016669:	50                   	push   eax
c001666a:	52                   	push   edx
c001666b:	e8 18 fa ff ff       	call   c0016088 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016670:	83 c4 10             	add    esp,0x10
c0016673:	89 fa                	mov    edx,edi
c0016675:	ef                   	out    dx,eax
c0016676:	85 c9                	test   ecx,ecx
c0016678:	74 05                	je     c001667f <Vm::faultHandler(regs*)+0x5a6>
c001667a:	83 ee 04             	sub    esi,0x4
c001667d:	eb 21                	jmp    c00166a0 <Vm::faultHandler(regs*)+0x5c7>
c001667f:	83 c6 04             	add    esi,0x4
c0016682:	eb 1c                	jmp    c00166a0 <Vm::faultHandler(regs*)+0x5c7>
c0016684:	55                   	push   ebp
c0016685:	55                   	push   ebp
c0016686:	50                   	push   eax
c0016687:	52                   	push   edx
c0016688:	e8 e9 f9 ff ff       	call   c0016076 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001668d:	83 c4 10             	add    esp,0x10
c0016690:	89 fa                	mov    edx,edi
c0016692:	66 ef                	out    dx,ax
c0016694:	85 c9                	test   ecx,ecx
c0016696:	74 05                	je     c001669d <Vm::faultHandler(regs*)+0x5c4>
c0016698:	83 ee 02             	sub    esi,0x2
c001669b:	eb 03                	jmp    c00166a0 <Vm::faultHandler(regs*)+0x5c7>
c001669d:	83 c6 02             	add    esi,0x2
c00166a0:	81 e6 ff ff 00 00    	and    esi,0xffff
c00166a6:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00166a9:	e9 c0 00 00 00       	jmp    c001676e <Vm::faultHandler(regs*)+0x695>
c00166ae:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00166b5:	83 ec 0c             	sub    esp,0xc
c00166b8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00166bc:	50                   	push   eax
c00166bd:	e8 33 f5 ff ff       	call   c0015bf5 <Vm::inbv(unsigned short)>
c00166c2:	0f b6 c0             	movzx  eax,al
c00166c5:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00166c8:	eb 3a                	jmp    c0016704 <Vm::faultHandler(regs*)+0x62b>
c00166ca:	83 e5 01             	and    ebp,0x1
c00166cd:	74 07                	je     c00166d6 <Vm::faultHandler(regs*)+0x5fd>
c00166cf:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00166d3:	ed                   	in     eax,dx
c00166d4:	eb 14                	jmp    c00166ea <Vm::faultHandler(regs*)+0x611>
c00166d6:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00166d9:	66 31 f6             	xor    si,si
c00166dc:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00166df:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00166e3:	66 ed                	in     ax,dx
c00166e5:	0f b7 c0             	movzx  eax,ax
c00166e8:	09 f0                	or     eax,esi
c00166ea:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00166ed:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00166f1:	eb 7e                	jmp    c0016771 <Vm::faultHandler(regs*)+0x698>
c00166f3:	52                   	push   edx
c00166f4:	52                   	push   edx
c00166f5:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00166f9:	50                   	push   eax
c00166fa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00166fe:	50                   	push   eax
c00166ff:	e8 04 f5 ff ff       	call   c0015c08 <Vm::outbv(unsigned short, unsigned char)>
c0016704:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0016708:	eb 4f                	jmp    c0016759 <Vm::faultHandler(regs*)+0x680>
c001670a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001670d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0016711:	83 e5 01             	and    ebp,0x1
c0016714:	74 03                	je     c0016719 <Vm::faultHandler(regs*)+0x640>
c0016716:	ef                   	out    dx,eax
c0016717:	eb d4                	jmp    c00166ed <Vm::faultHandler(regs*)+0x614>
c0016719:	66 ef                	out    dx,ax
c001671b:	eb d0                	jmp    c00166ed <Vm::faultHandler(regs*)+0x614>
c001671d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016724:	83 ec 0c             	sub    esp,0xc
c0016727:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001672b:	50                   	push   eax
c001672c:	e8 c4 f4 ff ff       	call   c0015bf5 <Vm::inbv(unsigned short)>
c0016731:	0f b6 c0             	movzx  eax,al
c0016734:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016737:	eb 1d                	jmp    c0016756 <Vm::faultHandler(regs*)+0x67d>
c0016739:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001673c:	83 e5 01             	and    ebp,0x1
c001673f:	74 03                	je     c0016744 <Vm::faultHandler(regs*)+0x66b>
c0016741:	ed                   	in     eax,dx
c0016742:	eb 0d                	jmp    c0016751 <Vm::faultHandler(regs*)+0x678>
c0016744:	66 ed                	in     ax,dx
c0016746:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016749:	0f b7 c0             	movzx  eax,ax
c001674c:	66 31 d2             	xor    dx,dx
c001674f:	09 d0                	or     eax,edx
c0016751:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016754:	eb 18                	jmp    c001676e <Vm::faultHandler(regs*)+0x695>
c0016756:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016759:	83 c4 10             	add    esp,0x10
c001675c:	eb 13                	jmp    c0016771 <Vm::faultHandler(regs*)+0x698>
c001675e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016761:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016764:	83 e5 01             	and    ebp,0x1
c0016767:	74 03                	je     c001676c <Vm::faultHandler(regs*)+0x693>
c0016769:	ef                   	out    dx,eax
c001676a:	eb 02                	jmp    c001676e <Vm::faultHandler(regs*)+0x695>
c001676c:	66 ef                	out    dx,ax
c001676e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016771:	b0 01                	mov    al,0x1
c0016773:	eb 60                	jmp    c00167d5 <Vm::faultHandler(regs*)+0x6fc>
c0016775:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016779:	50                   	push   eax
c001677a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001677e:	50                   	push   eax
c001677f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016783:	50                   	push   eax
c0016784:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016788:	50                   	push   eax
c0016789:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001678d:	50                   	push   eax
c001678e:	52                   	push   edx
c001678f:	52                   	push   edx
c0016790:	68 cf 12 02 c0       	push   0xc00212cf
c0016795:	e8 e8 41 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c001679a:	83 c4 20             	add    esp,0x20
c001679d:	83 ec 0c             	sub    esp,0xc
c00167a0:	6a 60                	push   0x60
c00167a2:	e8 4e f4 ff ff       	call   c0015bf5 <Vm::inbv(unsigned short)>
c00167a7:	83 c4 10             	add    esp,0x10
c00167aa:	0f b6 d0             	movzx  edx,al
c00167ad:	83 fa 1c             	cmp    edx,0x1c
c00167b0:	74 05                	je     c00167b7 <Vm::faultHandler(regs*)+0x6de>
c00167b2:	83 fa 5a             	cmp    edx,0x5a
c00167b5:	75 e6                	jne    c001679d <Vm::faultHandler(regs*)+0x6c4>
c00167b7:	0f b6 c0             	movzx  eax,al
c00167ba:	83 f8 1c             	cmp    eax,0x1c
c00167bd:	74 05                	je     c00167c4 <Vm::faultHandler(regs*)+0x6eb>
c00167bf:	83 f8 5a             	cmp    eax,0x5a
c00167c2:	75 0f                	jne    c00167d3 <Vm::faultHandler(regs*)+0x6fa>
c00167c4:	83 ec 0c             	sub    esp,0xc
c00167c7:	6a 60                	push   0x60
c00167c9:	e8 27 f4 ff ff       	call   c0015bf5 <Vm::inbv(unsigned short)>
c00167ce:	83 c4 10             	add    esp,0x10
c00167d1:	eb e4                	jmp    c00167b7 <Vm::faultHandler(regs*)+0x6de>
c00167d3:	31 c0                	xor    eax,eax
c00167d5:	83 c4 2c             	add    esp,0x2c
c00167d8:	5b                   	pop    ebx
c00167d9:	5e                   	pop    esi
c00167da:	5f                   	pop    edi
c00167db:	5d                   	pop    ebp
c00167dc:	c3                   	ret    

c00167dd <noCopro(unsigned long)>:
c00167dd:	c3                   	ret    

c00167de <nmiHandler(regs*, void*)>:
c00167de:	83 ec 0c             	sub    esp,0xc
c00167e1:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00167e6:	83 ec 0c             	sub    esp,0xc
c00167e9:	50                   	push   eax
c00167ea:	e8 ad 0a ff ff       	call   c000729c <Computer::handleNMI()>
c00167ef:	83 c4 10             	add    esp,0x10
c00167f2:	90                   	nop
c00167f3:	83 c4 0c             	add    esp,0xc
c00167f6:	c3                   	ret    

c00167f7 <doubleFault(regs*, void*)>:
c00167f7:	55                   	push   ebp
c00167f8:	89 e5                	mov    ebp,esp
c00167fa:	83 ec 08             	sub    esp,0x8
c00167fd:	83 ec 0c             	sub    esp,0xc
c0016800:	68 2c 13 02 c0       	push   0xc002132c
c0016805:	e8 55 a0 ff ff       	call   c001085f <KePanic(char const*)>
c001680a:	83 c4 10             	add    esp,0x10
c001680d:	90                   	nop
c001680e:	c9                   	leave  
c001680f:	c3                   	ret    

c0016810 <displayDebugInfo(regs*)>:
c0016810:	83 ec 1c             	sub    esp,0x1c
c0016813:	0f 20 c0             	mov    eax,cr0
c0016816:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001681a:	0f 20 d0             	mov    eax,cr2
c001681d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016821:	0f 20 d8             	mov    eax,cr3
c0016824:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016828:	0f 20 e0             	mov    eax,cr4
c001682b:	89 04 24             	mov    DWORD PTR [esp],eax
c001682e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016832:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016835:	83 ec 08             	sub    esp,0x8
c0016838:	50                   	push   eax
c0016839:	68 48 13 02 c0       	push   0xc0021348
c001683e:	e8 3f 41 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0016843:	83 c4 10             	add    esp,0x10
c0016846:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001684a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001684d:	83 ec 08             	sub    esp,0x8
c0016850:	50                   	push   eax
c0016851:	68 39 13 02 c0       	push   0xc0021339
c0016856:	e8 27 41 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c001685b:	83 c4 10             	add    esp,0x10
c001685e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016862:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0016865:	83 ec 08             	sub    esp,0x8
c0016868:	50                   	push   eax
c0016869:	68 44 13 02 c0       	push   0xc0021344
c001686e:	e8 0f 41 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0016873:	83 c4 10             	add    esp,0x10
c0016876:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001687a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001687d:	83 ec 08             	sub    esp,0x8
c0016880:	50                   	push   eax
c0016881:	68 53 13 02 c0       	push   0xc0021353
c0016886:	e8 f7 40 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c001688b:	83 c4 10             	add    esp,0x10
c001688e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016892:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0016895:	83 ec 08             	sub    esp,0x8
c0016898:	50                   	push   eax
c0016899:	68 5e 13 02 c0       	push   0xc002135e
c001689e:	e8 df 40 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c00168a3:	83 c4 10             	add    esp,0x10
c00168a6:	83 ec 08             	sub    esp,0x8
c00168a9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00168ad:	68 69 13 02 c0       	push   0xc0021369
c00168b2:	e8 cb 40 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c00168b7:	83 c4 10             	add    esp,0x10
c00168ba:	83 ec 08             	sub    esp,0x8
c00168bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00168c1:	68 74 13 02 c0       	push   0xc0021374
c00168c6:	e8 b7 40 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c00168cb:	83 c4 10             	add    esp,0x10
c00168ce:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168d3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168d9:	83 ec 0c             	sub    esp,0xc
c00168dc:	50                   	push   eax
c00168dd:	e8 4d 1e ff ff       	call   c000872f <setActiveTerminal(VgaText*)>
c00168e2:	83 c4 10             	add    esp,0x10
c00168e5:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00168ea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168f0:	83 ec 08             	sub    esp,0x8
c00168f3:	68 7f 13 02 c0       	push   0xc002137f
c00168f8:	50                   	push   eax
c00168f9:	e8 7e 21 ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c00168fe:	83 c4 10             	add    esp,0x10
c0016901:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016906:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001690c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016910:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0016913:	83 ec 08             	sub    esp,0x8
c0016916:	52                   	push   edx
c0016917:	50                   	push   eax
c0016918:	e8 19 21 ff ff       	call   c0008a36 <VgaText::putx(unsigned int)>
c001691d:	83 c4 10             	add    esp,0x10
c0016920:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016925:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001692b:	83 ec 08             	sub    esp,0x8
c001692e:	68 8d 13 02 c0       	push   0xc002138d
c0016933:	50                   	push   eax
c0016934:	e8 43 21 ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0016939:	83 c4 10             	add    esp,0x10
c001693c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016941:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016947:	ba 00 20 00 c2       	mov    edx,0xc2002000
c001694c:	8b 12                	mov    edx,DWORD PTR [edx]
c001694e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016951:	83 c2 0c             	add    edx,0xc
c0016954:	83 ec 08             	sub    esp,0x8
c0016957:	52                   	push   edx
c0016958:	50                   	push   eax
c0016959:	e8 1e 21 ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c001695e:	83 c4 10             	add    esp,0x10
c0016961:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016966:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001696c:	83 ec 08             	sub    esp,0x8
c001696f:	68 96 13 02 c0       	push   0xc0021396
c0016974:	50                   	push   eax
c0016975:	e8 02 21 ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c001697a:	83 c4 10             	add    esp,0x10
c001697d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016982:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016988:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001698c:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001698f:	83 ec 08             	sub    esp,0x8
c0016992:	52                   	push   edx
c0016993:	50                   	push   eax
c0016994:	e8 9d 20 ff ff       	call   c0008a36 <VgaText::putx(unsigned int)>
c0016999:	83 c4 10             	add    esp,0x10
c001699c:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169a1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169a7:	83 ec 08             	sub    esp,0x8
c00169aa:	68 9e 13 02 c0       	push   0xc002139e
c00169af:	50                   	push   eax
c00169b0:	e8 c7 20 ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c00169b5:	83 c4 10             	add    esp,0x10
c00169b8:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169bd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169c3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00169c7:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00169ca:	83 ec 08             	sub    esp,0x8
c00169cd:	52                   	push   edx
c00169ce:	50                   	push   eax
c00169cf:	e8 62 20 ff ff       	call   c0008a36 <VgaText::putx(unsigned int)>
c00169d4:	83 c4 10             	add    esp,0x10
c00169d7:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169dc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169e2:	83 ec 08             	sub    esp,0x8
c00169e5:	68 a6 13 02 c0       	push   0xc00213a6
c00169ea:	50                   	push   eax
c00169eb:	e8 8c 20 ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c00169f0:	83 c4 10             	add    esp,0x10
c00169f3:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c00169f8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00169fe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a02:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0016a05:	83 ec 08             	sub    esp,0x8
c0016a08:	52                   	push   edx
c0016a09:	50                   	push   eax
c0016a0a:	e8 27 20 ff ff       	call   c0008a36 <VgaText::putx(unsigned int)>
c0016a0f:	83 c4 10             	add    esp,0x10
c0016a12:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a17:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a1d:	83 ec 08             	sub    esp,0x8
c0016a20:	68 ae 13 02 c0       	push   0xc00213ae
c0016a25:	50                   	push   eax
c0016a26:	e8 51 20 ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0016a2b:	83 c4 10             	add    esp,0x10
c0016a2e:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a33:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a39:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a3d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0016a40:	83 ec 08             	sub    esp,0x8
c0016a43:	52                   	push   edx
c0016a44:	50                   	push   eax
c0016a45:	e8 ec 1f ff ff       	call   c0008a36 <VgaText::putx(unsigned int)>
c0016a4a:	83 c4 10             	add    esp,0x10
c0016a4d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a52:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a58:	83 ec 08             	sub    esp,0x8
c0016a5b:	68 b6 13 02 c0       	push   0xc00213b6
c0016a60:	50                   	push   eax
c0016a61:	e8 16 20 ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0016a66:	83 c4 10             	add    esp,0x10
c0016a69:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a6e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a74:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a78:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0016a7b:	83 ec 08             	sub    esp,0x8
c0016a7e:	52                   	push   edx
c0016a7f:	50                   	push   eax
c0016a80:	e8 b1 1f ff ff       	call   c0008a36 <VgaText::putx(unsigned int)>
c0016a85:	83 c4 10             	add    esp,0x10
c0016a88:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016a8d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016a93:	83 ec 08             	sub    esp,0x8
c0016a96:	68 be 13 02 c0       	push   0xc00213be
c0016a9b:	50                   	push   eax
c0016a9c:	e8 db 1f ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0016aa1:	83 c4 10             	add    esp,0x10
c0016aa4:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016aa9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016aaf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016ab3:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016ab6:	83 ec 08             	sub    esp,0x8
c0016ab9:	52                   	push   edx
c0016aba:	50                   	push   eax
c0016abb:	e8 76 1f ff ff       	call   c0008a36 <VgaText::putx(unsigned int)>
c0016ac0:	83 c4 10             	add    esp,0x10
c0016ac3:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ac8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016ace:	83 ec 08             	sub    esp,0x8
c0016ad1:	68 c6 13 02 c0       	push   0xc00213c6
c0016ad6:	50                   	push   eax
c0016ad7:	e8 a0 1f ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0016adc:	83 c4 10             	add    esp,0x10
c0016adf:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016ae4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016aea:	83 ec 08             	sub    esp,0x8
c0016aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016af1:	50                   	push   eax
c0016af2:	e8 3f 1f ff ff       	call   c0008a36 <VgaText::putx(unsigned int)>
c0016af7:	83 c4 10             	add    esp,0x10
c0016afa:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016aff:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b05:	83 ec 08             	sub    esp,0x8
c0016b08:	68 cf 13 02 c0       	push   0xc00213cf
c0016b0d:	50                   	push   eax
c0016b0e:	e8 69 1f ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0016b13:	83 c4 10             	add    esp,0x10
c0016b16:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b1b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b21:	83 ec 08             	sub    esp,0x8
c0016b24:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b28:	50                   	push   eax
c0016b29:	e8 08 1f ff ff       	call   c0008a36 <VgaText::putx(unsigned int)>
c0016b2e:	83 c4 10             	add    esp,0x10
c0016b31:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b36:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b3c:	83 ec 08             	sub    esp,0x8
c0016b3f:	68 d7 13 02 c0       	push   0xc00213d7
c0016b44:	50                   	push   eax
c0016b45:	e8 32 1f ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0016b4a:	83 c4 10             	add    esp,0x10
c0016b4d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0016b52:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016b58:	83 ec 08             	sub    esp,0x8
c0016b5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016b5f:	50                   	push   eax
c0016b60:	e8 d1 1e ff ff       	call   c0008a36 <VgaText::putx(unsigned int)>
c0016b65:	83 c4 10             	add    esp,0x10
c0016b68:	fa                   	cli    
c0016b69:	f4                   	hlt    
c0016b6a:	eb fe                	jmp    c0016b6a <displayDebugInfo(regs*)+0x35a>

c0016b6c <HalSystemIdle()>:
c0016b6c:	56                   	push   esi
c0016b6d:	53                   	push   ebx
c0016b6e:	83 ec 14             	sub    esp,0x14
c0016b71:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016b76:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b7c:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016b82:	83 e0 04             	and    eax,0x4
c0016b85:	0f b6 c0             	movzx  eax,al
c0016b88:	85 c0                	test   eax,eax
c0016b8a:	0f 95 c0             	setne  al
c0016b8d:	0f b6 c0             	movzx  eax,al
c0016b90:	85 c0                	test   eax,eax
c0016b92:	74 4c                	je     c0016be0 <HalSystemIdle()+0x74>
c0016b94:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016b99:	83 ec 08             	sub    esp,0x8
c0016b9c:	68 e1 00 00 00       	push   0xe1
c0016ba1:	50                   	push   eax
c0016ba2:	e8 11 05 ff ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c0016ba7:	83 c4 10             	add    esp,0x10
c0016baa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016bb2:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016bb7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016bbb:	83 e2 02             	and    edx,0x2
c0016bbe:	89 d3                	mov    ebx,edx
c0016bc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016bc4:	83 e2 00             	and    edx,0x0
c0016bc7:	89 d6                	mov    esi,edx
c0016bc9:	56                   	push   esi
c0016bca:	53                   	push   ebx
c0016bcb:	68 e1 00 00 00       	push   0xe1
c0016bd0:	50                   	push   eax
c0016bd1:	e8 0e 05 ff ff       	call   c00070e4 <Computer::wrmsr(unsigned int, unsigned long long)>
c0016bd6:	83 c4 10             	add    esp,0x10
c0016bd9:	e8 b6 95 fe ff       	call   c0000194 <doTPAUSE>
c0016bde:	eb 01                	jmp    c0016be1 <HalSystemIdle()+0x75>
c0016be0:	f4                   	hlt    
c0016be1:	90                   	nop
c0016be2:	83 c4 14             	add    esp,0x14
c0016be5:	5b                   	pop    ebx
c0016be6:	5e                   	pop    esi
c0016be7:	c3                   	ret    

c0016be8 <displayProgramFault(char const*)>:
c0016be8:	83 ec 0c             	sub    esp,0xc
c0016beb:	83 ec 0c             	sub    esp,0xc
c0016bee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bf2:	e8 8b 3d ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0016bf7:	83 c4 10             	add    esp,0x10
c0016bfa:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016bff:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c01:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c04:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c0a:	85 c0                	test   eax,eax
c0016c0c:	74 21                	je     c0016c2f <displayProgramFault(char const*)+0x47>
c0016c0e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016c13:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c15:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016c18:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016c1e:	6a 04                	push   0x4
c0016c20:	6a 0f                	push   0xf
c0016c22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016c26:	50                   	push   eax
c0016c27:	e8 c2 1e ff ff       	call   c0008aee <VgaText::puts(char const*, VgaColour, VgaColour)>
c0016c2c:	83 c4 10             	add    esp,0x10
c0016c2f:	90                   	nop
c0016c30:	83 c4 0c             	add    esp,0xc
c0016c33:	c3                   	ret    

c0016c34 <gpFault(regs*, void*)>:
c0016c34:	83 ec 1c             	sub    esp,0x1c
c0016c37:	c7 05 10 82 02 c0 d9 60 01 c0 	mov    DWORD PTR ds:0xc0028210,0xc00160d9
c0016c41:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c0016c46:	85 c0                	test   eax,eax
c0016c48:	74 1e                	je     c0016c68 <gpFault(regs*, void*)+0x34>
c0016c4a:	a1 10 82 02 c0       	mov    eax,ds:0xc0028210
c0016c4f:	83 ec 0c             	sub    esp,0xc
c0016c52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c56:	ff d0                	call   eax
c0016c58:	83 c4 10             	add    esp,0x10
c0016c5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016c5f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016c64:	85 c0                	test   eax,eax
c0016c66:	75 2e                	jne    c0016c96 <gpFault(regs*, void*)+0x62>
c0016c68:	83 ec 0c             	sub    esp,0xc
c0016c6b:	68 df 13 02 c0       	push   0xc00213df
c0016c70:	e8 73 ff ff ff       	call   c0016be8 <displayProgramFault(char const*)>
c0016c75:	83 c4 10             	add    esp,0x10
c0016c78:	83 ec 0c             	sub    esp,0xc
c0016c7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c7f:	e8 8c fb ff ff       	call   c0016810 <displayDebugInfo(regs*)>
c0016c84:	83 c4 10             	add    esp,0x10
c0016c87:	83 ec 0c             	sub    esp,0xc
c0016c8a:	6a 00                	push   0x0
c0016c8c:	e8 0b ee ff ff       	call   c0015a9c <Thr::terminateFromIRQ(int)>
c0016c91:	83 c4 10             	add    esp,0x10
c0016c94:	eb 01                	jmp    c0016c97 <gpFault(regs*, void*)+0x63>
c0016c96:	90                   	nop
c0016c97:	83 c4 1c             	add    esp,0x1c
c0016c9a:	c3                   	ret    

c0016c9b <pgFault(regs*, void*)>:
c0016c9b:	83 ec 1c             	sub    esp,0x1c
c0016c9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ca2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016ca5:	0f 20 d0             	mov    eax,cr2
c0016ca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016cac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cb0:	83 ec 04             	sub    esp,0x4
c0016cb3:	52                   	push   edx
c0016cb4:	50                   	push   eax
c0016cb5:	68 bc 14 02 c0       	push   0xc00214bc
c0016cba:	e8 c3 3c ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0016cbf:	83 c4 10             	add    esp,0x10
c0016cc2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016cc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cc9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016ccc:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016cd2:	0f 20 d2             	mov    edx,cr2
c0016cd5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016cd9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016cdd:	83 ec 08             	sub    esp,0x8
c0016ce0:	52                   	push   edx
c0016ce1:	50                   	push   eax
c0016ce2:	e8 47 38 ff ff       	call   c000a52e <VAS::tryLoadBackOffDisk(unsigned long)>
c0016ce7:	83 c4 10             	add    esp,0x10
c0016cea:	0f b6 c0             	movzx  eax,al
c0016ced:	85 c0                	test   eax,eax
c0016cef:	75 2e                	jne    c0016d1f <pgFault(regs*, void*)+0x84>
c0016cf1:	83 ec 0c             	sub    esp,0xc
c0016cf4:	68 f8 13 02 c0       	push   0xc00213f8
c0016cf9:	e8 ea fe ff ff       	call   c0016be8 <displayProgramFault(char const*)>
c0016cfe:	83 c4 10             	add    esp,0x10
c0016d01:	83 ec 0c             	sub    esp,0xc
c0016d04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d08:	e8 03 fb ff ff       	call   c0016810 <displayDebugInfo(regs*)>
c0016d0d:	83 c4 10             	add    esp,0x10
c0016d10:	83 ec 0c             	sub    esp,0xc
c0016d13:	6a 00                	push   0x0
c0016d15:	e8 82 ed ff ff       	call   c0015a9c <Thr::terminateFromIRQ(int)>
c0016d1a:	83 c4 10             	add    esp,0x10
c0016d1d:	eb 01                	jmp    c0016d20 <pgFault(regs*, void*)+0x85>
c0016d1f:	90                   	nop
c0016d20:	83 c4 1c             	add    esp,0x1c
c0016d23:	c3                   	ret    

c0016d24 <otherISRHandler(regs*, void*)>:
c0016d24:	83 ec 0c             	sub    esp,0xc
c0016d27:	83 ec 0c             	sub    esp,0xc
c0016d2a:	68 e4 14 02 c0       	push   0xc00214e4
c0016d2f:	e8 b4 fe ff ff       	call   c0016be8 <displayProgramFault(char const*)>
c0016d34:	83 c4 10             	add    esp,0x10
c0016d37:	83 ec 0c             	sub    esp,0xc
c0016d3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d3e:	e8 cd fa ff ff       	call   c0016810 <displayDebugInfo(regs*)>
c0016d43:	83 c4 10             	add    esp,0x10
c0016d46:	83 ec 0c             	sub    esp,0xc
c0016d49:	6a 00                	push   0x0
c0016d4b:	e8 4c ed ff ff       	call   c0015a9c <Thr::terminateFromIRQ(int)>
c0016d50:	83 c4 10             	add    esp,0x10
c0016d53:	90                   	nop
c0016d54:	83 c4 0c             	add    esp,0xc
c0016d57:	c3                   	ret    

c0016d58 <opcodeFault(regs*, void*)>:
c0016d58:	55                   	push   ebp
c0016d59:	89 e5                	mov    ebp,esp
c0016d5b:	83 ec 08             	sub    esp,0x8
c0016d5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016d61:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d64:	83 ec 08             	sub    esp,0x8
c0016d67:	50                   	push   eax
c0016d68:	68 03 14 02 c0       	push   0xc0021403
c0016d6d:	e8 10 3c ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0016d72:	83 c4 10             	add    esp,0x10
c0016d75:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0016d7a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016d80:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0016d86:	0f b6 c0             	movzx  eax,al
c0016d89:	85 c0                	test   eax,eax
c0016d8b:	74 21                	je     c0016dae <opcodeFault(regs*, void*)+0x56>
c0016d8d:	83 ec 0c             	sub    esp,0xc
c0016d90:	68 0c 15 02 c0       	push   0xc002150c
c0016d95:	e8 e8 3b ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0016d9a:	83 c4 10             	add    esp,0x10
c0016d9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016da0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016da3:	8d 50 19             	lea    edx,[eax+0x19]
c0016da6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016da9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016dac:	eb 2b                	jmp    c0016dd9 <opcodeFault(regs*, void*)+0x81>
c0016dae:	83 ec 0c             	sub    esp,0xc
c0016db1:	68 11 14 02 c0       	push   0xc0021411
c0016db6:	e8 2d fe ff ff       	call   c0016be8 <displayProgramFault(char const*)>
c0016dbb:	83 c4 10             	add    esp,0x10
c0016dbe:	83 ec 0c             	sub    esp,0xc
c0016dc1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0016dc4:	e8 47 fa ff ff       	call   c0016810 <displayDebugInfo(regs*)>
c0016dc9:	83 c4 10             	add    esp,0x10
c0016dcc:	83 ec 0c             	sub    esp,0xc
c0016dcf:	6a 00                	push   0x0
c0016dd1:	e8 c6 ec ff ff       	call   c0015a9c <Thr::terminateFromIRQ(int)>
c0016dd6:	83 c4 10             	add    esp,0x10
c0016dd9:	c9                   	leave  
c0016dda:	c3                   	ret    

c0016ddb <i386SaveCoprocessor(void*)>:
c0016ddb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016ddf:	83 c0 3f             	add    eax,0x3f
c0016de2:	83 e0 c0             	and    eax,0xffffffc0
c0016de5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016de9:	ff 25 0c 82 02 c0    	jmp    DWORD PTR ds:0xc002820c

c0016def <i386LoadCoprocessor(void*)>:
c0016def:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016df3:	83 c0 3f             	add    eax,0x3f
c0016df6:	83 e0 c0             	and    eax,0xffffffc0
c0016df9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016dfd:	ff 25 08 82 02 c0    	jmp    DWORD PTR ds:0xc0028208

c0016e03 <x87EmulHandler(regs*, void*)>:
c0016e03:	53                   	push   ebx
c0016e04:	83 ec 08             	sub    esp,0x8
c0016e07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e0c:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0016e10:	74 10                	je     c0016e22 <x87EmulHandler(regs*, void*)+0x1f>
c0016e12:	83 ec 0c             	sub    esp,0xc
c0016e15:	68 1e 14 02 c0       	push   0xc002141e
c0016e1a:	e8 40 9a ff ff       	call   c001085f <KePanic(char const*)>
c0016e1f:	83 c4 10             	add    esp,0x10
c0016e22:	0f 20 c0             	mov    eax,cr0
c0016e25:	a8 08                	test   al,0x8
c0016e27:	74 59                	je     c0016e82 <x87EmulHandler(regs*, void*)+0x7f>
c0016e29:	0f 06                	clts   
c0016e2b:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016e30:	85 c0                	test   eax,eax
c0016e32:	74 0e                	je     c0016e42 <x87EmulHandler(regs*, void*)+0x3f>
c0016e34:	83 ec 0c             	sub    esp,0xc
c0016e37:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016e3a:	e8 9c ff ff ff       	call   c0016ddb <i386SaveCoprocessor(void*)>
c0016e3f:	83 c4 10             	add    esp,0x10
c0016e42:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0016e48:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0016e4c:	75 12                	jne    c0016e60 <x87EmulHandler(regs*, void*)+0x5d>
c0016e4e:	83 ec 0c             	sub    esp,0xc
c0016e51:	68 40 02 00 00       	push   0x240
c0016e56:	e8 3f 0c ff ff       	call   c0007a9a <malloc>
c0016e5b:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0016e5e:	eb 10                	jmp    c0016e70 <x87EmulHandler(regs*, void*)+0x6d>
c0016e60:	83 ec 0c             	sub    esp,0xc
c0016e63:	a1 04 82 02 c0       	mov    eax,ds:0xc0028204
c0016e68:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0016e6b:	e8 7f ff ff ff       	call   c0016def <i386LoadCoprocessor(void*)>
c0016e70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e75:	83 c4 10             	add    esp,0x10
c0016e78:	a3 04 82 02 c0       	mov    ds:0xc0028204,eax
c0016e7d:	83 c4 08             	add    esp,0x8
c0016e80:	5b                   	pop    ebx
c0016e81:	c3                   	ret    
c0016e82:	83 ec 0c             	sub    esp,0xc
c0016e85:	68 32 14 02 c0       	push   0xc0021432
c0016e8a:	e8 f3 3a ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0016e8f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016e97:	83 c4 18             	add    esp,0x18
c0016e9a:	5b                   	pop    ebx
c0016e9b:	e9 fc eb ff ff       	jmp    c0015a9c <Thr::terminateFromIRQ(int)>

c0016ea0 <HalInitialiseCoprocessor()>:
c0016ea0:	83 ec 10             	sub    esp,0x10
c0016ea3:	c7 05 04 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028204,0x0
c0016ead:	6a 00                	push   0x0
c0016eaf:	68 03 6e 01 c0       	push   0xc0016e03
c0016eb4:	6a 07                	push   0x7
c0016eb6:	e8 2f 54 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016ebb:	e8 c0 6f 00 00       	call   c001de80 <avxDetect>
c0016ec0:	83 c4 10             	add    esp,0x10
c0016ec3:	85 c0                	test   eax,eax
c0016ec5:	74 1c                	je     c0016ee3 <HalInitialiseCoprocessor()+0x43>
c0016ec7:	c7 05 0c 82 02 c0 aa de 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001deaa
c0016ed1:	c7 05 08 82 02 c0 bb de 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001debb
c0016edb:	83 c4 0c             	add    esp,0xc
c0016ede:	e9 e9 6f 00 00       	jmp    c001decc <avxInit>
c0016ee3:	e8 28 73 00 00       	call   c001e210 <absolutelyNoChanceInHell>
c0016ee8:	85 c0                	test   eax,eax
c0016eea:	74 1c                	je     c0016f08 <HalInitialiseCoprocessor()+0x68>
c0016eec:	c7 05 0c 82 02 c0 28 e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e228
c0016ef6:	c7 05 08 82 02 c0 30 e2 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001e230
c0016f00:	83 c4 0c             	add    esp,0xc
c0016f03:	e9 30 73 00 00       	jmp    c001e238 <sseInit>
c0016f08:	e8 49 73 00 00       	call   c001e256 <x87Detect>
c0016f0d:	85 c0                	test   eax,eax
c0016f0f:	74 1c                	je     c0016f2d <HalInitialiseCoprocessor()+0x8d>
c0016f11:	c7 05 0c 82 02 c0 71 e2 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc001e271
c0016f1b:	c7 05 08 82 02 c0 78 e2 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc001e278
c0016f25:	83 c4 0c             	add    esp,0xc
c0016f28:	e9 52 73 00 00       	jmp    c001e27f <x87Init>
c0016f2d:	c7 05 0c 82 02 c0 dd 67 01 c0 	mov    DWORD PTR ds:0xc002820c,0xc00167dd
c0016f37:	c7 05 08 82 02 c0 dd 67 01 c0 	mov    DWORD PTR ds:0xc0028208,0xc00167dd
c0016f41:	0f 20 c0             	mov    eax,cr0
c0016f44:	83 c8 04             	or     eax,0x4
c0016f47:	0f 22 c0             	mov    cr0,eax
c0016f4a:	83 c4 0c             	add    esp,0xc
c0016f4d:	c3                   	ret    

c0016f4e <HalPanic(char const*)>:
c0016f4e:	53                   	push   ebx
c0016f4f:	83 ec 10             	sub    esp,0x10
c0016f52:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016f56:	fa                   	cli    
c0016f57:	53                   	push   ebx
c0016f58:	68 48 14 02 c0       	push   0xc0021448
c0016f5d:	e8 20 3a ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0016f62:	83 c4 0c             	add    esp,0xc
c0016f65:	6a 01                	push   0x1
c0016f67:	6a 0f                	push   0xf
c0016f69:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f6f:	e8 16 16 ff ff       	call   c000858a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016f74:	58                   	pop    eax
c0016f75:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f7b:	e8 fa 17 ff ff       	call   c000877a <VgaText::clearScreen()>
c0016f80:	5a                   	pop    edx
c0016f81:	59                   	pop    ecx
c0016f82:	68 a0 fc 01 c0       	push   0xc001fca0
c0016f87:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f8d:	e8 30 16 ff ff       	call   c00085c2 <VgaText::setTitle(char*)>
c0016f92:	83 c4 0c             	add    esp,0xc
c0016f95:	6a 01                	push   0x1
c0016f97:	6a 0f                	push   0xf
c0016f99:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016f9f:	e8 e6 15 ff ff       	call   c000858a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016fa4:	58                   	pop    eax
c0016fa5:	5a                   	pop    edx
c0016fa6:	68 61 14 02 c0       	push   0xc0021461
c0016fab:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fb1:	e8 c6 1a ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0016fb6:	83 c4 0c             	add    esp,0xc
c0016fb9:	6a 0f                	push   0xf
c0016fbb:	6a 01                	push   0x1
c0016fbd:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fc3:	e8 c2 15 ff ff       	call   c000858a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016fc8:	59                   	pop    ecx
c0016fc9:	58                   	pop    eax
c0016fca:	68 6a 14 02 c0       	push   0xc002146a
c0016fcf:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fd5:	e8 a2 1a ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0016fda:	83 c4 0c             	add    esp,0xc
c0016fdd:	6a 01                	push   0x1
c0016fdf:	6a 0f                	push   0xf
c0016fe1:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016fe7:	e8 9e 15 ff ff       	call   c000858a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016fec:	58                   	pop    eax
c0016fed:	5a                   	pop    edx
c0016fee:	68 ae 14 02 c0       	push   0xc00214ae
c0016ff3:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c0016ff9:	e8 7e 1a ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0016ffe:	59                   	pop    ecx
c0016fff:	58                   	pop    eax
c0017000:	68 77 14 02 c0       	push   0xc0021477
c0017005:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001700b:	e8 6c 1a ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0017010:	58                   	pop    eax
c0017011:	5a                   	pop    edx
c0017012:	68 b1 14 02 c0       	push   0xc00214b1
c0017017:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001701d:	e8 5a 1a ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0017022:	59                   	pop    ecx
c0017023:	58                   	pop    eax
c0017024:	53                   	push   ebx
c0017025:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001702b:	e8 4c 1a ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0017030:	58                   	pop    eax
c0017031:	5a                   	pop    edx
c0017032:	68 ae 14 02 c0       	push   0xc00214ae
c0017037:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001703d:	e8 3a 1a ff ff       	call   c0008a7c <VgaText::puts(char const*)>
c0017042:	83 c4 10             	add    esp,0x10
c0017045:	eb fe                	jmp    c0017045 <HalPanic(char const*)+0xf7>

c0017047 <HalQueryPerformanceCounter()>:
c0017047:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001704c:	31 d2                	xor    edx,edx
c001704e:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017054:	31 c0                	xor    eax,eax
c0017056:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001705d:	74 02                	je     c0017061 <HalQueryPerformanceCounter()+0x1a>
c001705f:	0f 31                	rdtsc  
c0017061:	c3                   	ret    

c0017062 <HalInitialise()>:
c0017062:	53                   	push   ebx
c0017063:	83 ec 08             	sub    esp,0x8
c0017066:	e8 af 54 ff ff       	call   c000c51a <setupINTS()>
c001706b:	80 3d 80 77 02 c0 00 	cmp    BYTE PTR ds:0xc0027780,0x0
c0017072:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017077:	75 0f                	jne    c0017088 <HalInitialise()+0x26>
c0017079:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001707f:	83 e2 fe             	and    edx,0xfffffffe
c0017082:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017088:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001708e:	c6 05 00 82 02 c0 00 	mov    BYTE PTR ds:0xc0028200,0x0
c0017095:	83 e2 fe             	and    edx,0xfffffffe
c0017098:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001709e:	e8 a1 02 00 00       	call   c0017344 <picOpen()>
c00170a3:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c00170aa:	74 0a                	je     c00170b6 <HalInitialise()+0x54>
c00170ac:	e8 e3 01 00 00       	call   c0017294 <picDisable()>
c00170b1:	e8 40 67 00 00       	call   c001d7f6 <apicOpen()>
c00170b6:	bb 0f 00 00 00       	mov    ebx,0xf
c00170bb:	50                   	push   eax
c00170bc:	6a 00                	push   0x0
c00170be:	68 24 6d 01 c0       	push   0xc0016d24
c00170c3:	6a 00                	push   0x0
c00170c5:	e8 20 52 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170ca:	83 c4 0c             	add    esp,0xc
c00170cd:	6a 00                	push   0x0
c00170cf:	68 24 6d 01 c0       	push   0xc0016d24
c00170d4:	6a 01                	push   0x1
c00170d6:	e8 0f 52 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170db:	83 c4 0c             	add    esp,0xc
c00170de:	6a 00                	push   0x0
c00170e0:	68 de 67 01 c0       	push   0xc00167de
c00170e5:	6a 02                	push   0x2
c00170e7:	e8 fe 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170ec:	83 c4 0c             	add    esp,0xc
c00170ef:	6a 00                	push   0x0
c00170f1:	68 24 6d 01 c0       	push   0xc0016d24
c00170f6:	6a 03                	push   0x3
c00170f8:	e8 ed 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c00170fd:	83 c4 0c             	add    esp,0xc
c0017100:	6a 00                	push   0x0
c0017102:	68 24 6d 01 c0       	push   0xc0016d24
c0017107:	6a 04                	push   0x4
c0017109:	e8 dc 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c001710e:	83 c4 0c             	add    esp,0xc
c0017111:	6a 00                	push   0x0
c0017113:	68 24 6d 01 c0       	push   0xc0016d24
c0017118:	6a 05                	push   0x5
c001711a:	e8 cb 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c001711f:	83 c4 0c             	add    esp,0xc
c0017122:	6a 00                	push   0x0
c0017124:	68 58 6d 01 c0       	push   0xc0016d58
c0017129:	6a 06                	push   0x6
c001712b:	e8 ba 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017130:	83 c4 0c             	add    esp,0xc
c0017133:	6a 00                	push   0x0
c0017135:	68 f7 67 01 c0       	push   0xc00167f7
c001713a:	6a 08                	push   0x8
c001713c:	e8 a9 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017141:	83 c4 0c             	add    esp,0xc
c0017144:	6a 00                	push   0x0
c0017146:	68 24 6d 01 c0       	push   0xc0016d24
c001714b:	6a 09                	push   0x9
c001714d:	e8 98 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017152:	83 c4 0c             	add    esp,0xc
c0017155:	6a 00                	push   0x0
c0017157:	68 24 6d 01 c0       	push   0xc0016d24
c001715c:	6a 0a                	push   0xa
c001715e:	e8 87 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017163:	83 c4 0c             	add    esp,0xc
c0017166:	6a 00                	push   0x0
c0017168:	68 24 6d 01 c0       	push   0xc0016d24
c001716d:	6a 0b                	push   0xb
c001716f:	e8 76 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017174:	83 c4 0c             	add    esp,0xc
c0017177:	6a 00                	push   0x0
c0017179:	68 34 6c 01 c0       	push   0xc0016c34
c001717e:	6a 0d                	push   0xd
c0017180:	e8 65 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017185:	83 c4 0c             	add    esp,0xc
c0017188:	6a 00                	push   0x0
c001718a:	68 9b 6c 01 c0       	push   0xc0016c9b
c001718f:	6a 0e                	push   0xe
c0017191:	e8 54 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017196:	83 c4 10             	add    esp,0x10
c0017199:	50                   	push   eax
c001719a:	6a 00                	push   0x0
c001719c:	68 24 6d 01 c0       	push   0xc0016d24
c00171a1:	53                   	push   ebx
c00171a2:	43                   	inc    ebx
c00171a3:	e8 42 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171a8:	83 c4 10             	add    esp,0x10
c00171ab:	83 fb 1e             	cmp    ebx,0x1e
c00171ae:	75 e9                	jne    c0017199 <HalInitialise()+0x137>
c00171b0:	50                   	push   eax
c00171b1:	6a 00                	push   0x0
c00171b3:	68 3a 1b 01 c0       	push   0xc0011b3a
c00171b8:	6a 60                	push   0x60
c00171ba:	e8 2b 51 ff ff       	call   c000c2ea <installISRHandler(int, void (*)(regs*, void*), void*)>
c00171bf:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c00171c4:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00171ce:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00171d5:	e8 c0 08 ff ff       	call   c0007a9a <malloc>
c00171da:	89 04 24             	mov    DWORD PTR [esp],eax
c00171dd:	89 c3                	mov    ebx,eax
c00171df:	e8 3e 09 00 00       	call   c0017b22 <RTC::RTC()>
c00171e4:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00171ee:	5a                   	pop    edx
c00171ef:	59                   	pop    ecx
c00171f0:	53                   	push   ebx
c00171f1:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00171f7:	e8 ba 4b ff ff       	call   c000bdb6 <Device::addChild(Device*)>
c00171fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00171fe:	6a 00                	push   0x0
c0017200:	6a 00                	push   0x0
c0017202:	6a 00                	push   0x0
c0017204:	53                   	push   ebx
c0017205:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017208:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001720d:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017213:	83 c4 28             	add    esp,0x28
c0017216:	5b                   	pop    ebx
c0017217:	c3                   	ret    

c0017218 <HalMakeBeep(int)>:
c0017218:	53                   	push   ebx
c0017219:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001721d:	85 db                	test   ebx,ebx
c001721f:	75 07                	jne    c0017228 <HalMakeBeep(int)+0x10>
c0017221:	e4 61                	in     al,0x61
c0017223:	83 e0 fc             	and    eax,0xfffffffc
c0017226:	eb 26                	jmp    c001724e <HalMakeBeep(int)+0x36>
c0017228:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001722d:	99                   	cdq    
c001722e:	f7 fb                	idiv   ebx
c0017230:	89 c1                	mov    ecx,eax
c0017232:	b0 b6                	mov    al,0xb6
c0017234:	e6 43                	out    0x43,al
c0017236:	88 c8                	mov    al,cl
c0017238:	e6 42                	out    0x42,al
c001723a:	89 c8                	mov    eax,ecx
c001723c:	c1 e8 08             	shr    eax,0x8
c001723f:	e6 42                	out    0x42,al
c0017241:	e4 61                	in     al,0x61
c0017243:	89 c2                	mov    edx,eax
c0017245:	83 ca 03             	or     edx,0x3
c0017248:	38 d0                	cmp    al,dl
c001724a:	74 04                	je     c0017250 <HalMakeBeep(int)+0x38>
c001724c:	88 d0                	mov    al,dl
c001724e:	e6 61                	out    0x61,al
c0017250:	5b                   	pop    ebx
c0017251:	c3                   	ret    

c0017252 <HalGetRand()>:
c0017252:	31 c0                	xor    eax,eax
c0017254:	c3                   	ret    

c0017255 <HalEndOfInterrupt(int)>:
c0017255:	80 3d 00 82 02 c0 00 	cmp    BYTE PTR ds:0xc0028200,0x0
c001725c:	74 23                	je     c0017281 <HalEndOfInterrupt(int)+0x2c>
c001725e:	83 ec 14             	sub    esp,0x14
c0017261:	6a 1b                	push   0x1b
c0017263:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017269:	e8 4a fe fe ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c001726e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017273:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001727d:	83 c4 1c             	add    esp,0x1c
c0017280:	c3                   	ret    
c0017281:	e9 42 02 00 00       	jmp    c00174c8 <picEOI(int)>

c0017286 <HalRestart()>:
c0017286:	c3                   	ret    

c0017287 <HalShutdown()>:
c0017287:	c3                   	ret    

c0017288 <HalSleep()>:
c0017288:	c3                   	ret    
c0017289:	66 90                	xchg   ax,ax
c001728b:	90                   	nop

c001728c <picIoWait()>:
c001728c:	eb 00                	jmp    c001728e <picIoWait()+0x2>
c001728e:	eb 00                	jmp    c0017290 <picIoWait()+0x4>
c0017290:	90                   	nop
c0017291:	c3                   	ret    
c0017292:	66 90                	xchg   ax,ax

c0017294 <picDisable()>:
c0017294:	83 ec 10             	sub    esp,0x10
c0017297:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001729e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00172a3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00172a7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00172ac:	ee                   	out    dx,al
c00172ad:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00172b4:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00172b9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00172bd:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00172c2:	ee                   	out    dx,al
c00172c3:	90                   	nop
c00172c4:	83 c4 10             	add    esp,0x10
c00172c7:	c3                   	ret    

c00172c8 <picGetIRQReg(int)>:
c00172c8:	83 ec 10             	sub    esp,0x10
c00172cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00172cf:	0f b6 c0             	movzx  eax,al
c00172d2:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00172d9:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00172dd:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00172e1:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00172e6:	ee                   	out    dx,al
c00172e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00172eb:	0f b6 c0             	movzx  eax,al
c00172ee:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00172f5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00172f9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00172fd:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017302:	ee                   	out    dx,al
c0017303:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001730a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001730f:	89 c2                	mov    edx,eax
c0017311:	ec                   	in     al,dx
c0017312:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017316:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001731a:	0f b6 c0             	movzx  eax,al
c001731d:	c1 e0 08             	shl    eax,0x8
c0017320:	89 c1                	mov    ecx,eax
c0017322:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017329:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001732e:	89 c2                	mov    edx,eax
c0017330:	ec                   	in     al,dx
c0017331:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017335:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017339:	0f b6 c0             	movzx  eax,al
c001733c:	09 c8                	or     eax,ecx
c001733e:	83 c4 10             	add    esp,0x10
c0017341:	c3                   	ret    
c0017342:	66 90                	xchg   ax,ax

c0017344 <picOpen()>:
c0017344:	83 ec 50             	sub    esp,0x50
c0017347:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001734e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017353:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017357:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001735b:	ee                   	out    dx,al
c001735c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017363:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017368:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001736c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017370:	ee                   	out    dx,al
c0017371:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017379:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017381:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017388:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001738c:	89 c2                	mov    edx,eax
c001738e:	ec                   	in     al,dx
c001738f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017393:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017397:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001739b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00173a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00173a6:	89 c2                	mov    edx,eax
c00173a8:	ec                   	in     al,dx
c00173a9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00173ad:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00173b1:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00173b5:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00173bc:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00173c1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00173c5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00173c9:	ee                   	out    dx,al
c00173ca:	e8 bd fe ff ff       	call   c001728c <picIoWait()>
c00173cf:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00173d6:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00173db:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00173df:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00173e3:	ee                   	out    dx,al
c00173e4:	e8 a3 fe ff ff       	call   c001728c <picIoWait()>
c00173e9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00173ed:	0f b6 c0             	movzx  eax,al
c00173f0:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00173f7:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00173fb:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00173ff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017403:	ee                   	out    dx,al
c0017404:	e8 83 fe ff ff       	call   c001728c <picIoWait()>
c0017409:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001740d:	0f b6 c0             	movzx  eax,al
c0017410:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017417:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001741b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001741f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017423:	ee                   	out    dx,al
c0017424:	e8 63 fe ff ff       	call   c001728c <picIoWait()>
c0017429:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0017430:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017435:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017439:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001743d:	ee                   	out    dx,al
c001743e:	e8 49 fe ff ff       	call   c001728c <picIoWait()>
c0017443:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001744a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001744f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0017453:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017457:	ee                   	out    dx,al
c0017458:	e8 2f fe ff ff       	call   c001728c <picIoWait()>
c001745d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017464:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0017469:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001746d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017471:	ee                   	out    dx,al
c0017472:	e8 15 fe ff ff       	call   c001728c <picIoWait()>
c0017477:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001747e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0017483:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0017487:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001748b:	ee                   	out    dx,al
c001748c:	e8 fb fd ff ff       	call   c001728c <picIoWait()>
c0017491:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0017496:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001749d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00174a1:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00174a5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00174a9:	ee                   	out    dx,al
c00174aa:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00174af:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00174b6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00174ba:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00174be:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00174c2:	ee                   	out    dx,al
c00174c3:	90                   	nop
c00174c4:	83 c4 50             	add    esp,0x50
c00174c7:	c3                   	ret    

c00174c8 <picEOI(int)>:
c00174c8:	83 ec 10             	sub    esp,0x10
c00174cb:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00174d0:	75 1e                	jne    c00174f0 <picEOI(int)+0x28>
c00174d2:	6a 0b                	push   0xb
c00174d4:	e8 ef fd ff ff       	call   c00172c8 <picGetIRQReg(int)>
c00174d9:	83 c4 04             	add    esp,0x4
c00174dc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00174e1:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00174e6:	25 80 00 00 00       	and    eax,0x80
c00174eb:	74 73                	je     c0017560 <picEOI(int)+0x98>
c00174ed:	8d 76 00             	lea    esi,[esi+0x0]
c00174f0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00174f5:	75 31                	jne    c0017528 <picEOI(int)+0x60>
c00174f7:	6a 0b                	push   0xb
c00174f9:	e8 ca fd ff ff       	call   c00172c8 <picGetIRQReg(int)>
c00174fe:	83 c4 04             	add    esp,0x4
c0017501:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017506:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001750a:	98                   	cwde   
c001750b:	85 c0                	test   eax,eax
c001750d:	78 19                	js     c0017528 <picEOI(int)+0x60>
c001750f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0017516:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001751b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001751f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017524:	ee                   	out    dx,al
c0017525:	eb 3d                	jmp    c0017564 <picEOI(int)+0x9c>
c0017527:	90                   	nop
c0017528:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001752d:	7e 19                	jle    c0017548 <picEOI(int)+0x80>
c001752f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017536:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001753b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001753f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017544:	ee                   	out    dx,al
c0017545:	8d 76 00             	lea    esi,[esi+0x0]
c0017548:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001754f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0017554:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017558:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001755d:	ee                   	out    dx,al
c001755e:	eb 04                	jmp    c0017564 <picEOI(int)+0x9c>
c0017560:	90                   	nop
c0017561:	8d 76 00             	lea    esi,[esi+0x0]
c0017564:	83 c4 10             	add    esp,0x10
c0017567:	c3                   	ret    

c0017568 <RTC::open(int, int, void*)>:
c0017568:	31 c0                	xor    eax,eax
c001756a:	c3                   	ret    
c001756b:	90                   	nop

c001756c <RTC::close(int, int, void*)>:
c001756c:	31 c0                	xor    eax,eax
c001756e:	c3                   	ret    
c001756f:	90                   	nop

c0017570 <RTC::timeInSecondsUTC()>:
c0017570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017574:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001757a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017580:	c3                   	ret    
c0017581:	90                   	nop

c0017582 <RTC::timeInDatetimeUTC()>:
c0017582:	53                   	push   ebx
c0017583:	83 ec 14             	sub    esp,0x14
c0017586:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001758a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001758e:	8b 10                	mov    edx,DWORD PTR [eax]
c0017590:	50                   	push   eax
c0017591:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017594:	83 c4 0c             	add    esp,0xc
c0017597:	52                   	push   edx
c0017598:	50                   	push   eax
c0017599:	53                   	push   ebx
c001759a:	e8 8b 45 ff ff       	call   c000bb2a <secondsToDatetime(unsigned long long)>
c001759f:	89 d8                	mov    eax,ebx
c00175a1:	83 c4 14             	add    esp,0x14
c00175a4:	5b                   	pop    ebx
c00175a5:	c2 04 00             	ret    0x4

c00175a8 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00175a8:	56                   	push   esi
c00175a9:	53                   	push   ebx
c00175aa:	83 ec 14             	sub    esp,0x14
c00175ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00175b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00175b3:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00175b6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00175ba:	52                   	push   edx
c00175bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175c3:	50                   	push   eax
c00175c4:	e8 61 45 ff ff       	call   c000bb2a <secondsToDatetime(unsigned long long)>
c00175c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00175cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00175d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175d5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00175d9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00175dd:	89 f0                	mov    eax,esi
c00175df:	83 c4 20             	add    esp,0x20
c00175e2:	5b                   	pop    ebx
c00175e3:	5e                   	pop    esi
c00175e4:	ff e0                	jmp    eax

c00175e6 <RTC::~RTC()>:
c00175e6:	83 ec 0c             	sub    esp,0xc
c00175e9:	ba 4c 15 02 c0       	mov    edx,0xc002154c
c00175ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175f2:	89 10                	mov    DWORD PTR [eax],edx
c00175f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175f8:	83 ec 0c             	sub    esp,0xc
c00175fb:	50                   	push   eax
c00175fc:	e8 bb 42 ff ff       	call   c000b8bc <Clock::~Clock()>
c0017601:	83 c4 10             	add    esp,0x10
c0017604:	90                   	nop
c0017605:	83 c4 0c             	add    esp,0xc
c0017608:	c3                   	ret    
c0017609:	90                   	nop

c001760a <RTC::~RTC()>:
c001760a:	83 ec 0c             	sub    esp,0xc
c001760d:	83 ec 0c             	sub    esp,0xc
c0017610:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017614:	e8 cd ff ff ff       	call   c00175e6 <RTC::~RTC()>
c0017619:	83 c4 10             	add    esp,0x10
c001761c:	83 ec 08             	sub    esp,0x8
c001761f:	68 60 01 00 00       	push   0x160
c0017624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017628:	e8 28 32 ff ff       	call   c000a855 <operator delete(void*, unsigned long)>
c001762d:	83 c4 10             	add    esp,0x10
c0017630:	83 c4 0c             	add    esp,0xc
c0017633:	c3                   	ret    

c0017634 <RTC::get_update_in_progress_flag()>:
c0017634:	83 ec 14             	sub    esp,0x14
c0017637:	6a 0a                	push   0xa
c0017639:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001763f:	e8 2c fb fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017644:	83 c4 1c             	add    esp,0x1c
c0017647:	0f b6 c0             	movzx  eax,al
c001764a:	c1 e8 07             	shr    eax,0x7
c001764d:	c3                   	ret    

c001764e <RTC::completeRTCRefresh()>:
c001764e:	55                   	push   ebp
c001764f:	57                   	push   edi
c0017650:	56                   	push   esi
c0017651:	53                   	push   ebx
c0017652:	83 ec 3c             	sub    esp,0x3c
c0017655:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c001765b:	83 ec 0c             	sub    esp,0xc
c001765e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017662:	e8 cd ff ff ff       	call   c0017634 <RTC::get_update_in_progress_flag()>
c0017667:	83 c4 10             	add    esp,0x10
c001766a:	84 c0                	test   al,al
c001766c:	74 0e                	je     c001767c <RTC::completeRTCRefresh()+0x2e>
c001766e:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017674:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c001767a:	73 df                	jae    c001765b <RTC::completeRTCRefresh()+0xd>
c001767c:	51                   	push   ecx
c001767d:	51                   	push   ecx
c001767e:	6a 00                	push   0x0
c0017680:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017686:	e8 e5 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c001768b:	5b                   	pop    ebx
c001768c:	89 c7                	mov    edi,eax
c001768e:	5e                   	pop    esi
c001768f:	6a 02                	push   0x2
c0017691:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017697:	e8 d4 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c001769c:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00176a0:	5d                   	pop    ebp
c00176a1:	58                   	pop    eax
c00176a2:	6a 04                	push   0x4
c00176a4:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176aa:	e8 c1 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00176af:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00176b3:	58                   	pop    eax
c00176b4:	5a                   	pop    edx
c00176b5:	6a 07                	push   0x7
c00176b7:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176bd:	e8 ae fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00176c2:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00176c6:	59                   	pop    ecx
c00176c7:	5b                   	pop    ebx
c00176c8:	6a 08                	push   0x8
c00176ca:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176d0:	e8 9b fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00176d5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00176d9:	5e                   	pop    esi
c00176da:	5d                   	pop    ebp
c00176db:	6a 09                	push   0x9
c00176dd:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00176e3:	e8 88 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00176e8:	0f b6 c0             	movzx  eax,al
c00176eb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00176ef:	83 c4 10             	add    esp,0x10
c00176f2:	8b 1d 8c 74 02 c0    	mov    ebx,DWORD PTR ds:0xc002748c
c00176f8:	83 ec 0c             	sub    esp,0xc
c00176fb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00176ff:	e8 30 ff ff ff       	call   c0017634 <RTC::get_update_in_progress_flag()>
c0017704:	83 c4 10             	add    esp,0x10
c0017707:	84 c0                	test   al,al
c0017709:	74 0e                	je     c0017719 <RTC::completeRTCRefresh()+0xcb>
c001770b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0017711:	3b 05 8c 74 02 c0    	cmp    eax,DWORD PTR ds:0xc002748c
c0017717:	73 df                	jae    c00176f8 <RTC::completeRTCRefresh()+0xaa>
c0017719:	51                   	push   ecx
c001771a:	51                   	push   ecx
c001771b:	6a 00                	push   0x0
c001771d:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017723:	e8 48 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017728:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001772c:	5b                   	pop    ebx
c001772d:	5e                   	pop    esi
c001772e:	6a 02                	push   0x2
c0017730:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017736:	e8 35 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c001773b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001773f:	5d                   	pop    ebp
c0017740:	58                   	pop    eax
c0017741:	6a 04                	push   0x4
c0017743:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017749:	e8 22 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c001774e:	88 c3                	mov    bl,al
c0017750:	58                   	pop    eax
c0017751:	5a                   	pop    edx
c0017752:	6a 07                	push   0x7
c0017754:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001775a:	e8 11 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c001775f:	59                   	pop    ecx
c0017760:	89 c6                	mov    esi,eax
c0017762:	5d                   	pop    ebp
c0017763:	6a 08                	push   0x8
c0017765:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001776b:	e8 00 fa fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017770:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017774:	58                   	pop    eax
c0017775:	5a                   	pop    edx
c0017776:	6a 09                	push   0x9
c0017778:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c001777e:	e8 ed f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017783:	89 f9                	mov    ecx,edi
c0017785:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017789:	0f b6 e8             	movzx  ebp,al
c001778c:	83 c4 10             	add    esp,0x10
c001778f:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0017793:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017798:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001779d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00177a1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00177a5:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00177a9:	0f 94 c0             	sete   al
c00177ac:	0f b6 fb             	movzx  edi,bl
c00177af:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c00177b3:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00177b8:	0f 94 c2             	sete   dl
c00177bb:	21 d0                	and    eax,edx
c00177bd:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00177c1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00177c5:	0f 94 c2             	sete   dl
c00177c8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00177cc:	21 c2                	and    edx,eax
c00177ce:	89 f0                	mov    eax,esi
c00177d0:	0f b6 c0             	movzx  eax,al
c00177d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00177d7:	89 f0                	mov    eax,esi
c00177d9:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00177dd:	0f 94 c0             	sete   al
c00177e0:	21 d0                	and    eax,edx
c00177e2:	31 d2                	xor    edx,edx
c00177e4:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00177e8:	0f 94 c2             	sete   dl
c00177eb:	85 c2                	test   edx,eax
c00177ed:	75 27                	jne    c0017816 <RTC::completeRTCRefresh()+0x1c8>
c00177ef:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00177f3:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00177f7:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00177fb:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00177ff:	89 f0                	mov    eax,esi
c0017801:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017805:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017809:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001780d:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0017811:	e9 dc fe ff ff       	jmp    c00176f2 <RTC::completeRTCRefresh()+0xa4>
c0017816:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001781a:	75 d3                	jne    c00177ef <RTC::completeRTCRefresh()+0x1a1>
c001781c:	52                   	push   edx
c001781d:	52                   	push   edx
c001781e:	6a 0b                	push   0xb
c0017820:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017826:	e8 45 f9 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c001782b:	83 c4 10             	add    esp,0x10
c001782e:	a8 04                	test   al,0x4
c0017830:	75 7a                	jne    c00178ac <RTC::completeRTCRefresh()+0x25e>
c0017832:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017836:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001783a:	83 e1 0f             	and    ecx,0xf
c001783d:	c1 ea 04             	shr    edx,0x4
c0017840:	c1 ef 04             	shr    edi,0x4
c0017843:	6b d2 0a             	imul   edx,edx,0xa
c0017846:	83 e6 0f             	and    esi,0xf
c0017849:	01 d1                	add    ecx,edx
c001784b:	c1 ed 04             	shr    ebp,0x4
c001784e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0017852:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017856:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001785a:	c1 ea 04             	shr    edx,0x4
c001785d:	83 e1 0f             	and    ecx,0xf
c0017860:	6b d2 0a             	imul   edx,edx,0xa
c0017863:	6b ed 0a             	imul   ebp,ebp,0xa
c0017866:	01 d1                	add    ecx,edx
c0017868:	89 fa                	mov    edx,edi
c001786a:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001786e:	83 e2 07             	and    edx,0x7
c0017871:	89 d9                	mov    ecx,ebx
c0017873:	6b d2 0a             	imul   edx,edx,0xa
c0017876:	83 e1 0f             	and    ecx,0xf
c0017879:	83 e3 80             	and    ebx,0xffffff80
c001787c:	01 d1                	add    ecx,edx
c001787e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017882:	09 cb                	or     ebx,ecx
c0017884:	c1 ea 04             	shr    edx,0x4
c0017887:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001788b:	6b d2 0a             	imul   edx,edx,0xa
c001788e:	83 e1 0f             	and    ecx,0xf
c0017891:	01 d6                	add    esi,edx
c0017893:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017897:	c1 ea 04             	shr    edx,0x4
c001789a:	6b d2 0a             	imul   edx,edx,0xa
c001789d:	01 d1                	add    ecx,edx
c001789f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00178a3:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00178a7:	83 e2 0f             	and    edx,0xf
c00178aa:	01 d5                	add    ebp,edx
c00178ac:	a8 02                	test   al,0x2
c00178ae:	75 15                	jne    c00178c5 <RTC::completeRTCRefresh()+0x277>
c00178b0:	f6 c3 80             	test   bl,0x80
c00178b3:	74 10                	je     c00178c5 <RTC::completeRTCRefresh()+0x277>
c00178b5:	83 e3 7f             	and    ebx,0x7f
c00178b8:	b9 18 00 00 00       	mov    ecx,0x18
c00178bd:	8d 43 0c             	lea    eax,[ebx+0xc]
c00178c0:	99                   	cdq    
c00178c1:	f7 f9                	idiv   ecx
c00178c3:	88 d3                	mov    bl,dl
c00178c5:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00178cb:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00178d1:	77 06                	ja     c00178d9 <RTC::completeRTCRefresh()+0x28b>
c00178d3:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00178d9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00178de:	31 c9                	xor    ecx,ecx
c00178e0:	c1 e0 10             	shl    eax,0x10
c00178e3:	89 cd                	mov    ebp,ecx
c00178e5:	c1 e7 10             	shl    edi,0x10
c00178e8:	31 d2                	xor    edx,edx
c00178ea:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00178f0:	09 c5                	or     ebp,eax
c00178f2:	89 f0                	mov    eax,esi
c00178f4:	89 e9                	mov    ecx,ebp
c00178f6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00178fa:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00178fe:	88 c2                	mov    dl,al
c0017900:	88 d9                	mov    cl,bl
c0017902:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0017906:	0f b7 c2             	movzx  eax,dx
c0017909:	09 f8                	or     eax,edi
c001790b:	89 c2                	mov    edx,eax
c001790d:	50                   	push   eax
c001790e:	50                   	push   eax
c001790f:	51                   	push   ecx
c0017910:	52                   	push   edx
c0017911:	e8 95 40 ff ff       	call   c000b9ab <datetimeToSeconds(datetime_t)>
c0017916:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001791a:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0017920:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0017926:	83 c4 4c             	add    esp,0x4c
c0017929:	5b                   	pop    ebx
c001792a:	5e                   	pop    esi
c001792b:	5f                   	pop    edi
c001792c:	5d                   	pop    ebp
c001792d:	c3                   	ret    

c001792e <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001792e:	55                   	push   ebp
c001792f:	57                   	push   edi
c0017930:	56                   	push   esi
c0017931:	53                   	push   ebx
c0017932:	83 ec 30             	sub    esp,0x30
c0017935:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017939:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001793d:	6a 00                	push   0x0
c001793f:	6a 00                	push   0x0
c0017941:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017947:	e8 2c f9 fe ff       	call   c0007278 <Computer::writeCMOS(unsigned char, unsigned char)>
c001794c:	83 c4 0c             	add    esp,0xc
c001794f:	6a 00                	push   0x0
c0017951:	6a 02                	push   0x2
c0017953:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017959:	e8 1a f9 fe ff       	call   c0007278 <Computer::writeCMOS(unsigned char, unsigned char)>
c001795e:	31 d2                	xor    edx,edx
c0017960:	89 f9                	mov    ecx,edi
c0017962:	89 f8                	mov    eax,edi
c0017964:	c1 e9 10             	shr    ecx,0x10
c0017967:	0f b6 c4             	movzx  eax,ah
c001796a:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001796e:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0017972:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017976:	b9 64 00 00 00       	mov    ecx,0x64
c001797b:	89 f0                	mov    eax,esi
c001797d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017981:	89 f0                	mov    eax,esi
c0017983:	0f b6 c4             	movzx  eax,ah
c0017986:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001798a:	89 f0                	mov    eax,esi
c001798c:	c1 e8 10             	shr    eax,0x10
c001798f:	f7 f1                	div    ecx
c0017991:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017995:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0017999:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001799d:	59                   	pop    ecx
c001799e:	5b                   	pop    ebx
c001799f:	89 fb                	mov    ebx,edi
c00179a1:	6a 0b                	push   0xb
c00179a3:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c00179a9:	e8 c2 f7 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c00179ae:	83 c4 10             	add    esp,0x10
c00179b1:	89 c5                	mov    ebp,eax
c00179b3:	a8 04                	test   al,0x4
c00179b5:	75 6e                	jne    c0017a25 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00179b7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00179bb:	31 d2                	xor    edx,edx
c00179bd:	0f b6 c1             	movzx  eax,cl
c00179c0:	b9 0a 00 00 00       	mov    ecx,0xa
c00179c5:	f7 f1                	div    ecx
c00179c7:	c1 e0 04             	shl    eax,0x4
c00179ca:	09 d0                	or     eax,edx
c00179cc:	31 d2                	xor    edx,edx
c00179ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00179d2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00179d7:	f7 f1                	div    ecx
c00179d9:	c1 e0 04             	shl    eax,0x4
c00179dc:	09 d0                	or     eax,edx
c00179de:	31 d2                	xor    edx,edx
c00179e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179e4:	0f b6 c3             	movzx  eax,bl
c00179e7:	f7 f1                	div    ecx
c00179e9:	c1 e0 04             	shl    eax,0x4
c00179ec:	09 d0                	or     eax,edx
c00179ee:	31 d2                	xor    edx,edx
c00179f0:	89 c3                	mov    ebx,eax
c00179f2:	89 f0                	mov    eax,esi
c00179f4:	0f b6 c0             	movzx  eax,al
c00179f7:	f7 f1                	div    ecx
c00179f9:	c1 e0 04             	shl    eax,0x4
c00179fc:	09 d0                	or     eax,edx
c00179fe:	31 d2                	xor    edx,edx
c0017a00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a04:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017a09:	f7 f1                	div    ecx
c0017a0b:	c1 e0 04             	shl    eax,0x4
c0017a0e:	09 d0                	or     eax,edx
c0017a10:	31 d2                	xor    edx,edx
c0017a12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a1a:	f7 f1                	div    ecx
c0017a1c:	c1 e0 04             	shl    eax,0x4
c0017a1f:	09 d0                	or     eax,edx
c0017a21:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a25:	83 e5 02             	and    ebp,0x2
c0017a28:	75 1e                	jne    c0017a48 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a2a:	0f b6 c3             	movzx  eax,bl
c0017a2d:	83 f8 0b             	cmp    eax,0xb
c0017a30:	76 10                	jbe    c0017a42 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0017a32:	8d 53 f4             	lea    edx,[ebx-0xc]
c0017a35:	88 d3                	mov    bl,dl
c0017a37:	84 d2                	test   dl,dl
c0017a39:	75 02                	jne    c0017a3d <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0017a3b:	b3 0c                	mov    bl,0xc
c0017a3d:	83 cb 80             	or     ebx,0xffffff80
c0017a40:	eb 06                	jmp    c0017a48 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a42:	85 c0                	test   eax,eax
c0017a44:	75 02                	jne    c0017a48 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0017a46:	b3 0c                	mov    bl,0xc
c0017a48:	0f b6 db             	movzx  ebx,bl
c0017a4b:	50                   	push   eax
c0017a4c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0017a51:	52                   	push   edx
c0017a52:	6a 00                	push   0x0
c0017a54:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a5a:	e8 19 f8 fe ff       	call   c0007278 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a5f:	83 c4 0c             	add    esp,0xc
c0017a62:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0017a67:	50                   	push   eax
c0017a68:	6a 02                	push   0x2
c0017a6a:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a70:	e8 03 f8 fe ff       	call   c0007278 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a75:	83 c4 0c             	add    esp,0xc
c0017a78:	53                   	push   ebx
c0017a79:	6a 04                	push   0x4
c0017a7b:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a81:	e8 f2 f7 fe ff       	call   c0007278 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a86:	83 c4 0c             	add    esp,0xc
c0017a89:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0017a8e:	52                   	push   edx
c0017a8f:	6a 07                	push   0x7
c0017a91:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017a97:	e8 dc f7 fe ff       	call   c0007278 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017a9c:	83 c4 0c             	add    esp,0xc
c0017a9f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017aa4:	50                   	push   eax
c0017aa5:	6a 08                	push   0x8
c0017aa7:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017aad:	e8 c6 f7 fe ff       	call   c0007278 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ab2:	83 c4 0c             	add    esp,0xc
c0017ab5:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0017aba:	55                   	push   ebp
c0017abb:	6a 09                	push   0x9
c0017abd:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017ac3:	e8 b0 f7 fe ff       	call   c0007278 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ac8:	5a                   	pop    edx
c0017ac9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017acd:	e8 7c fb ff ff       	call   c001764e <RTC::completeRTCRefresh()>
c0017ad2:	83 c4 3c             	add    esp,0x3c
c0017ad5:	b0 01                	mov    al,0x1
c0017ad7:	5b                   	pop    ebx
c0017ad8:	5e                   	pop    esi
c0017ad9:	5f                   	pop    edi
c0017ada:	5d                   	pop    ebp
c0017adb:	c3                   	ret    

c0017adc <rtcIRQHandler(regs*, void*)>:
c0017adc:	53                   	push   ebx
c0017add:	83 ec 10             	sub    esp,0x10
c0017ae0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017ae4:	6a 0c                	push   0xc
c0017ae6:	ff 35 b8 4e 02 c0    	push   DWORD PTR ds:0xc0024eb8
c0017aec:	e8 7f f6 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017af1:	83 c4 10             	add    esp,0x10
c0017af4:	a8 80                	test   al,0x80
c0017af6:	74 24                	je     c0017b1c <rtcIRQHandler(regs*, void*)+0x40>
c0017af8:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017aff:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017b06:	66 ff 05 14 82 02 c0 	inc    WORD PTR ds:0xc0028214
c0017b0d:	75 0d                	jne    c0017b1c <rtcIRQHandler(regs*, void*)+0x40>
c0017b0f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017b13:	83 c4 08             	add    esp,0x8
c0017b16:	5b                   	pop    ebx
c0017b17:	e9 32 fb ff ff       	jmp    c001764e <RTC::completeRTCRefresh()>
c0017b1c:	83 c4 08             	add    esp,0x8
c0017b1f:	5b                   	pop    ebx
c0017b20:	c3                   	ret    
c0017b21:	90                   	nop

c0017b22 <RTC::RTC()>:
c0017b22:	83 ec 1c             	sub    esp,0x1c
c0017b25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b29:	83 ec 08             	sub    esp,0x8
c0017b2c:	68 2f 15 02 c0       	push   0xc002152f
c0017b31:	50                   	push   eax
c0017b32:	e8 4f 3d ff ff       	call   c000b886 <Clock::Clock(char const*)>
c0017b37:	83 c4 10             	add    esp,0x10
c0017b3a:	ba 4c 15 02 c0       	mov    edx,0xc002154c
c0017b3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b43:	89 10                	mov    DWORD PTR [eax],edx
c0017b45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b49:	83 ec 0c             	sub    esp,0xc
c0017b4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017b50:	6a 01                	push   0x1
c0017b52:	68 dc 7a 01 c0       	push   0xc0017adc
c0017b57:	6a 08                	push   0x8
c0017b59:	50                   	push   eax
c0017b5a:	e8 03 42 ff ff       	call   c000bd62 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0017b5f:	83 c4 20             	add    esp,0x20
c0017b62:	89 c2                	mov    edx,eax
c0017b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b68:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0017b6e:	fa                   	cli    
c0017b6f:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017b74:	83 c0 01             	add    eax,0x1
c0017b77:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017b7c:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017b81:	83 ec 08             	sub    esp,0x8
c0017b84:	6a 0b                	push   0xb
c0017b86:	50                   	push   eax
c0017b87:	e8 e4 f5 fe ff       	call   c0007170 <Computer::readCMOS(unsigned char)>
c0017b8c:	83 c4 10             	add    esp,0x10
c0017b8f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017b93:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c0017b98:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0017b9c:	83 ca 10             	or     edx,0x10
c0017b9f:	0f b6 d2             	movzx  edx,dl
c0017ba2:	83 ec 04             	sub    esp,0x4
c0017ba5:	52                   	push   edx
c0017ba6:	6a 0b                	push   0xb
c0017ba8:	50                   	push   eax
c0017ba9:	e8 ca f6 fe ff       	call   c0007278 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017bae:	83 c4 10             	add    esp,0x10
c0017bb1:	83 ec 0c             	sub    esp,0xc
c0017bb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bb8:	e8 91 fa ff ff       	call   c001764e <RTC::completeRTCRefresh()>
c0017bbd:	83 c4 10             	add    esp,0x10
c0017bc0:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017bc5:	83 e8 01             	sub    eax,0x1
c0017bc8:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c0017bcd:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c0017bd2:	85 c0                	test   eax,eax
c0017bd4:	75 01                	jne    c0017bd7 <RTC::RTC()+0xb5>
c0017bd6:	fb                   	sti    
c0017bd7:	90                   	nop
c0017bd8:	83 c4 1c             	add    esp,0x1c
c0017bdb:	c3                   	ret    

c0017bdc <HalConsoleScroll(int, int)>:
c0017bdc:	83 ec 10             	sub    esp,0x10
c0017bdf:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0017be7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017bef:	90                   	nop
c0017bf0:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017bf5:	0f 8f e1 00 00 00    	jg     c0017cdc <HalConsoleScroll(int, int)+0x100>
c0017bfb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017c03:	90                   	nop
c0017c04:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017c0c:	0f 8f be 00 00 00    	jg     c0017cd0 <HalConsoleScroll(int, int)+0xf4>
c0017c12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c16:	89 d0                	mov    eax,edx
c0017c18:	c1 e0 02             	shl    eax,0x2
c0017c1b:	01 d0                	add    eax,edx
c0017c1d:	c1 e0 05             	shl    eax,0x5
c0017c20:	89 c2                	mov    edx,eax
c0017c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c26:	01 d0                	add    eax,edx
c0017c28:	89 c2                	mov    edx,eax
c0017c2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c2e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c35:	89 d0                	mov    eax,edx
c0017c37:	c1 e0 02             	shl    eax,0x2
c0017c3a:	01 d0                	add    eax,edx
c0017c3c:	c1 e0 05             	shl    eax,0x5
c0017c3f:	89 c2                	mov    edx,eax
c0017c41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c45:	01 d0                	add    eax,edx
c0017c47:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0017c4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c51:	01 c2                	add    edx,eax
c0017c53:	8a 01                	mov    al,BYTE PTR [ecx]
c0017c55:	88 02                	mov    BYTE PTR [edx],al
c0017c57:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017c5c:	75 66                	jne    c0017cc4 <HalConsoleScroll(int, int)+0xe8>
c0017c5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c62:	83 e0 01             	and    eax,0x1
c0017c65:	74 39                	je     c0017ca0 <HalConsoleScroll(int, int)+0xc4>
c0017c67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c6b:	83 e0 0f             	and    eax,0xf
c0017c6e:	88 c2                	mov    dl,al
c0017c70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017c74:	c1 e0 04             	shl    eax,0x4
c0017c77:	09 d0                	or     eax,edx
c0017c79:	88 c1                	mov    cl,al
c0017c7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c7f:	89 d0                	mov    eax,edx
c0017c81:	c1 e0 02             	shl    eax,0x2
c0017c84:	01 d0                	add    eax,edx
c0017c86:	c1 e0 05             	shl    eax,0x5
c0017c89:	89 c2                	mov    edx,eax
c0017c8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c8f:	01 d0                	add    eax,edx
c0017c91:	89 c2                	mov    edx,eax
c0017c93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c97:	01 d0                	add    eax,edx
c0017c99:	88 ca                	mov    dl,cl
c0017c9b:	88 10                	mov    BYTE PTR [eax],dl
c0017c9d:	eb 25                	jmp    c0017cc4 <HalConsoleScroll(int, int)+0xe8>
c0017c9f:	90                   	nop
c0017ca0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ca4:	89 d0                	mov    eax,edx
c0017ca6:	c1 e0 02             	shl    eax,0x2
c0017ca9:	01 d0                	add    eax,edx
c0017cab:	c1 e0 05             	shl    eax,0x5
c0017cae:	89 c2                	mov    edx,eax
c0017cb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017cb4:	01 d0                	add    eax,edx
c0017cb6:	89 c2                	mov    edx,eax
c0017cb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cbc:	01 d0                	add    eax,edx
c0017cbe:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0017cc4:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0017cc9:	e9 36 ff ff ff       	jmp    c0017c04 <HalConsoleScroll(int, int)+0x28>
c0017cce:	66 90                	xchg   ax,ax
c0017cd0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0017cd5:	e9 16 ff ff ff       	jmp    c0017bf0 <HalConsoleScroll(int, int)+0x14>
c0017cda:	66 90                	xchg   ax,ax
c0017cdc:	90                   	nop
c0017cdd:	83 c4 10             	add    esp,0x10
c0017ce0:	c3                   	ret    
c0017ce1:	8d 76 00             	lea    esi,[esi+0x0]

c0017ce4 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017ce4:	83 ec 14             	sub    esp,0x14
c0017ce7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ceb:	88 04 24             	mov    BYTE PTR [esp],al
c0017cee:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017cf1:	0f b6 c0             	movzx  eax,al
c0017cf4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017cf8:	89 d1                	mov    ecx,edx
c0017cfa:	83 e1 0f             	and    ecx,0xf
c0017cfd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017d01:	c1 e2 04             	shl    edx,0x4
c0017d04:	0f b6 d2             	movzx  edx,dl
c0017d07:	09 ca                	or     edx,ecx
c0017d09:	c1 e2 08             	shl    edx,0x8
c0017d0c:	09 d0                	or     eax,edx
c0017d0e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0017d13:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017d1b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d1f:	89 d0                	mov    eax,edx
c0017d21:	c1 e0 02             	shl    eax,0x2
c0017d24:	01 d0                	add    eax,edx
c0017d26:	c1 e0 04             	shl    eax,0x4
c0017d29:	89 c2                	mov    edx,eax
c0017d2b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d2f:	01 d0                	add    eax,edx
c0017d31:	01 c0                	add    eax,eax
c0017d33:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0017d37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d3b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0017d40:	66 89 02             	mov    WORD PTR [edx],ax
c0017d43:	90                   	nop
c0017d44:	83 c4 14             	add    esp,0x14
c0017d47:	c3                   	ret    

c0017d48 <HalConsoleCursorUpdate(int, int)>:
c0017d48:	83 ec 20             	sub    esp,0x20
c0017d4b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d4f:	89 c2                	mov    edx,eax
c0017d51:	c1 e2 02             	shl    edx,0x2
c0017d54:	01 d0                	add    eax,edx
c0017d56:	c1 e0 04             	shl    eax,0x4
c0017d59:	89 c2                	mov    edx,eax
c0017d5b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d5f:	01 d0                	add    eax,edx
c0017d61:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0017d66:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0017d6d:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0017d72:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017d76:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017d7a:	ee                   	out    dx,al
c0017d7b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0017d80:	0f b6 c0             	movzx  eax,al
c0017d83:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0017d8a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0017d8e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017d92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d96:	ee                   	out    dx,al
c0017d97:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0017d9e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017da3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017da7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017dab:	ee                   	out    dx,al
c0017dac:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0017db1:	c1 e8 08             	shr    eax,0x8
c0017db4:	0f b6 c0             	movzx  eax,al
c0017db7:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017dbe:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017dc2:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017dc6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017dca:	ee                   	out    dx,al
c0017dcb:	90                   	nop
c0017dcc:	83 c4 20             	add    esp,0x20
c0017dcf:	c3                   	ret    

c0017dd0 <FAT::getName()>:
c0017dd0:	b8 80 15 02 c0       	mov    eax,0xc0021580
c0017dd5:	c3                   	ret    
c0017dd6:	66 90                	xchg   ax,ax

c0017dd8 <FAT::tell(void*, unsigned long long*)>:
c0017dd8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017ddd:	75 09                	jne    c0017de8 <FAT::tell(void*, unsigned long long*)+0x10>
c0017ddf:	b8 04 00 00 00       	mov    eax,0x4
c0017de4:	c3                   	ret    
c0017de5:	8d 76 00             	lea    esi,[esi+0x0]
c0017de8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017ded:	75 09                	jne    c0017df8 <FAT::tell(void*, unsigned long long*)+0x20>
c0017def:	b8 04 00 00 00       	mov    eax,0x4
c0017df4:	c3                   	ret    
c0017df5:	8d 76 00             	lea    esi,[esi+0x0]
c0017df8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017dfc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017dff:	ba 00 00 00 00       	mov    edx,0x0
c0017e04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e08:	89 01                	mov    DWORD PTR [ecx],eax
c0017e0a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e0d:	b8 00 00 00 00       	mov    eax,0x0
c0017e12:	c3                   	ret    
c0017e13:	90                   	nop

c0017e14 <FAT::stat(void*, unsigned long long*)>:
c0017e14:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017e19:	75 09                	jne    c0017e24 <FAT::stat(void*, unsigned long long*)+0x10>
c0017e1b:	b8 04 00 00 00       	mov    eax,0x4
c0017e20:	c3                   	ret    
c0017e21:	8d 76 00             	lea    esi,[esi+0x0]
c0017e24:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017e29:	75 09                	jne    c0017e34 <FAT::stat(void*, unsigned long long*)+0x20>
c0017e2b:	b8 04 00 00 00       	mov    eax,0x4
c0017e30:	c3                   	ret    
c0017e31:	8d 76 00             	lea    esi,[esi+0x0]
c0017e34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e38:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017e3b:	ba 00 00 00 00       	mov    edx,0x0
c0017e40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e44:	89 01                	mov    DWORD PTR [ecx],eax
c0017e46:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e49:	b8 00 00 00 00       	mov    eax,0x0
c0017e4e:	c3                   	ret    
c0017e4f:	90                   	nop

c0017e50 <FAT::~FAT()>:
c0017e50:	83 ec 0c             	sub    esp,0xc
c0017e53:	ba cc 15 02 c0       	mov    edx,0xc00215cc
c0017e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e5c:	89 10                	mov    DWORD PTR [eax],edx
c0017e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e62:	83 ec 0c             	sub    esp,0xc
c0017e65:	50                   	push   eax
c0017e66:	e8 5d 2e ff ff       	call   c000acc8 <Filesystem::~Filesystem()>
c0017e6b:	83 c4 10             	add    esp,0x10
c0017e6e:	90                   	nop
c0017e6f:	83 c4 0c             	add    esp,0xc
c0017e72:	c3                   	ret    
c0017e73:	90                   	nop

c0017e74 <FAT::~FAT()>:
c0017e74:	83 ec 0c             	sub    esp,0xc
c0017e77:	83 ec 0c             	sub    esp,0xc
c0017e7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e7e:	e8 cd ff ff ff       	call   c0017e50 <FAT::~FAT()>
c0017e83:	83 c4 10             	add    esp,0x10
c0017e86:	83 ec 08             	sub    esp,0x8
c0017e89:	6a 08                	push   0x8
c0017e8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e8f:	e8 c1 29 ff ff       	call   c000a855 <operator delete(void*, unsigned long)>
c0017e94:	83 c4 10             	add    esp,0x10
c0017e97:	83 c4 0c             	add    esp,0xc
c0017e9a:	c3                   	ret    
c0017e9b:	90                   	nop

c0017e9c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017e9c:	83 ec 1c             	sub    esp,0x1c
c0017e9f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0017ea6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0017eab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017eaf:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0017eb9:	75 35                	jne    c0017ef0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0017ebb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017ebf:	88 c2                	mov    dl,al
c0017ec1:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017ec6:	01 d0                	add    eax,edx
c0017ec8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017ecc:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017ed2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ed6:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017edd:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017ee2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ee6:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017eed:	eb 19                	jmp    c0017f08 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0017eef:	90                   	nop
c0017ef0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017ef4:	88 c2                	mov    dl,al
c0017ef6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017efa:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f01:	01 d0                	add    eax,edx
c0017f03:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017f07:	90                   	nop
c0017f08:	83 ec 04             	sub    esp,0x4
c0017f0b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017f0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017f13:	8d 44 24 15          	lea    eax,[esp+0x15]
c0017f17:	50                   	push   eax
c0017f18:	e8 b2 d0 fe ff       	call   c0004fcf <f_getlabel>
c0017f1d:	83 c4 10             	add    esp,0x10
c0017f20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f24:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017f29:	75 09                	jne    c0017f34 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0017f2b:	b8 00 00 00 00       	mov    eax,0x0
c0017f30:	eb 0a                	jmp    c0017f3c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0017f32:	66 90                	xchg   ax,ax
c0017f34:	b8 01 00 00 00       	mov    eax,0x1
c0017f39:	8d 76 00             	lea    esi,[esi+0x0]
c0017f3c:	83 c4 1c             	add    esp,0x1c
c0017f3f:	c3                   	ret    

c0017f40 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0017f40:	57                   	push   edi
c0017f41:	83 ec 58             	sub    esp,0x58
c0017f44:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0017f4c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0017f50:	b8 00 00 00 00       	mov    eax,0x0
c0017f55:	b9 0f 00 00 00       	mov    ecx,0xf
c0017f5a:	fc                   	cld    
c0017f5b:	89 d7                	mov    edi,edx
c0017f5d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0017f5f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017f63:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017f6a:	83 f8 ff             	cmp    eax,0xffffffff
c0017f6d:	75 35                	jne    c0017fa4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0017f6f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017f73:	88 c2                	mov    dl,al
c0017f75:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f7a:	01 d0                	add    eax,edx
c0017f7c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017f80:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0017f86:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017f8a:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0017f91:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0017f96:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0017f9a:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c0017fa1:	eb 19                	jmp    c0017fbc <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0017fa3:	90                   	nop
c0017fa4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017fa8:	88 c2                	mov    dl,al
c0017faa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017fae:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0017fb5:	01 d0                	add    eax,edx
c0017fb7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017fbb:	90                   	nop
c0017fbc:	83 ec 08             	sub    esp,0x8
c0017fbf:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0017fc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017fc7:	50                   	push   eax
c0017fc8:	e8 73 88 fe ff       	call   c0000840 <strcat>
c0017fcd:	83 c4 10             	add    esp,0x10
c0017fd0:	83 ec 0c             	sub    esp,0xc
c0017fd3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017fd7:	50                   	push   eax
c0017fd8:	e8 43 d1 fe ff       	call   c0005120 <f_setlabel>
c0017fdd:	83 c4 10             	add    esp,0x10
c0017fe0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017fe4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0017fe9:	75 09                	jne    c0017ff4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0017feb:	b8 00 00 00 00       	mov    eax,0x0
c0017ff0:	eb 0a                	jmp    c0017ffc <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0017ff2:	66 90                	xchg   ax,ax
c0017ff4:	b8 01 00 00 00       	mov    eax,0x1
c0017ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0017ffc:	83 c4 58             	add    esp,0x58
c0017fff:	5f                   	pop    edi
c0018000:	c3                   	ret    
c0018001:	90                   	nop
c0018002:	66 90                	xchg   ax,ax

c0018004 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018004:	83 ec 2c             	sub    esp,0x2c
c0018007:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001800f:	83 ec 08             	sub    esp,0x8
c0018012:	68 a4 15 02 c0       	push   0xc00215a4
c0018017:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001801b:	e8 30 87 fe ff       	call   c0000750 <strcmp>
c0018020:	83 c4 10             	add    esp,0x10
c0018023:	85 c0                	test   eax,eax
c0018025:	0f 94 c0             	sete   al
c0018028:	0f b6 c0             	movzx  eax,al
c001802b:	85 c0                	test   eax,eax
c001802d:	74 0d                	je     c001803c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001802f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018037:	e9 c0 00 00 00       	jmp    c00180fc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001803c:	83 ec 08             	sub    esp,0x8
c001803f:	68 96 15 02 c0       	push   0xc0021596
c0018044:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018048:	e8 03 87 fe ff       	call   c0000750 <strcmp>
c001804d:	83 c4 10             	add    esp,0x10
c0018050:	85 c0                	test   eax,eax
c0018052:	0f 94 c0             	sete   al
c0018055:	0f b6 c0             	movzx  eax,al
c0018058:	85 c0                	test   eax,eax
c001805a:	74 10                	je     c001806c <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001805c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018064:	e9 93 00 00 00       	jmp    c00180fc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018069:	8d 76 00             	lea    esi,[esi+0x0]
c001806c:	83 ec 08             	sub    esp,0x8
c001806f:	68 9c 15 02 c0       	push   0xc002159c
c0018074:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018078:	e8 d3 86 fe ff       	call   c0000750 <strcmp>
c001807d:	83 c4 10             	add    esp,0x10
c0018080:	85 c0                	test   eax,eax
c0018082:	0f 94 c0             	sete   al
c0018085:	0f b6 c0             	movzx  eax,al
c0018088:	85 c0                	test   eax,eax
c001808a:	74 0c                	je     c0018098 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001808c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018094:	eb 66                	jmp    c00180fc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018096:	66 90                	xchg   ax,ax
c0018098:	83 ec 08             	sub    esp,0x8
c001809b:	68 7c f3 01 c0       	push   0xc001f37c
c00180a0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180a4:	e8 a7 86 fe ff       	call   c0000750 <strcmp>
c00180a9:	83 c4 10             	add    esp,0x10
c00180ac:	85 c0                	test   eax,eax
c00180ae:	0f 94 c0             	sete   al
c00180b1:	0f b6 c0             	movzx  eax,al
c00180b4:	85 c0                	test   eax,eax
c00180b6:	74 0c                	je     c00180c4 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00180b8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00180c0:	eb 3a                	jmp    c00180fc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00180c2:	66 90                	xchg   ax,ax
c00180c4:	83 ec 08             	sub    esp,0x8
c00180c7:	68 a2 15 02 c0       	push   0xc00215a2
c00180cc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00180d0:	e8 7b 86 fe ff       	call   c0000750 <strcmp>
c00180d5:	83 c4 10             	add    esp,0x10
c00180d8:	85 c0                	test   eax,eax
c00180da:	0f 94 c0             	sete   al
c00180dd:	0f b6 c0             	movzx  eax,al
c00180e0:	85 c0                	test   eax,eax
c00180e2:	74 0c                	je     c00180f0 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00180e4:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00180ec:	eb 0e                	jmp    c00180fc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00180ee:	66 90                	xchg   ax,ax
c00180f0:	b8 08 00 00 00       	mov    eax,0x8
c00180f5:	e9 ea 00 00 00       	jmp    c00181e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00180fa:	66 90                	xchg   ax,ax
c00180fc:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018103:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018108:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001810c:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018113:	83 f8 ff             	cmp    eax,0xffffffff
c0018116:	75 34                	jne    c001814c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018118:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001811c:	88 c2                	mov    dl,al
c001811e:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018123:	01 d0                	add    eax,edx
c0018125:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018129:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c001812f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018133:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c001813a:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001813f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018143:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c001814a:	eb 18                	jmp    c0018164 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001814c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018150:	88 c2                	mov    dl,al
c0018152:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018156:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001815d:	01 d0                	add    eax,edx
c001815f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018163:	90                   	nop
c0018164:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018168:	88 04 24             	mov    BYTE PTR [esp],al
c001816b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001816f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018173:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001817b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018180:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018188:	83 ec 0c             	sub    esp,0xc
c001818b:	68 00 20 00 00       	push   0x2000
c0018190:	e8 05 f9 fe ff       	call   c0007a9a <malloc>
c0018195:	83 c4 10             	add    esp,0x10
c0018198:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001819c:	68 00 20 00 00       	push   0x2000
c00181a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00181a9:	50                   	push   eax
c00181aa:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00181ae:	50                   	push   eax
c00181af:	e8 69 d2 fe ff       	call   c000541d <f_mkfs>
c00181b4:	83 c4 10             	add    esp,0x10
c00181b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00181bb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00181c0:	75 0a                	jne    c00181cc <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00181c2:	b8 00 00 00 00       	mov    eax,0x0
c00181c7:	eb 1b                	jmp    c00181e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00181c9:	8d 76 00             	lea    esi,[esi+0x0]
c00181cc:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00181d1:	75 09                	jne    c00181dc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00181d3:	b8 09 00 00 00       	mov    eax,0x9
c00181d8:	eb 0a                	jmp    c00181e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00181da:	66 90                	xchg   ax,ax
c00181dc:	b8 01 00 00 00       	mov    eax,0x1
c00181e1:	8d 76 00             	lea    esi,[esi+0x0]
c00181e4:	83 c4 2c             	add    esp,0x2c
c00181e7:	c3                   	ret    

c00181e8 <FAT::tryMount(LogicalDisk*, int)>:
c00181e8:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00181ee:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00181f3:	83 f8 14             	cmp    eax,0x14
c00181f6:	75 18                	jne    c0018210 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00181f8:	83 ec 0c             	sub    esp,0xc
c00181fb:	68 a8 15 02 c0       	push   0xc00215a8
c0018200:	e8 5a 86 ff ff       	call   c001085f <KePanic(char const*)>
c0018205:	83 c4 10             	add    esp,0x10
c0018208:	b0 00                	mov    al,0x0
c001820a:	e9 ed 01 00 00       	jmp    c00183fc <FAT::tryMount(LogicalDisk*, int)+0x214>
c001820f:	90                   	nop
c0018210:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018217:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001821d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018223:	3d 00 02 00 00       	cmp    eax,0x200
c0018228:	74 0a                	je     c0018234 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001822a:	b0 00                	mov    al,0x0
c001822c:	e9 cb 01 00 00       	jmp    c00183fc <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018231:	8d 76 00             	lea    esi,[esi+0x0]
c0018234:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001823c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018243:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c001824a:	83 f8 ff             	cmp    eax,0xffffffff
c001824d:	74 09                	je     c0018258 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001824f:	b0 01                	mov    al,0x1
c0018251:	e9 a6 01 00 00       	jmp    c00183fc <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018256:	66 90                	xchg   ax,ax
c0018258:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018262:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001826a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018271:	88 c2                	mov    dl,al
c0018273:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c0018278:	01 d0                	add    eax,edx
c001827a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018281:	8b 15 20 82 02 c0    	mov    edx,DWORD PTR ds:0xc0028220
c0018287:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001828e:	89 14 85 40 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7dc0],edx
c0018295:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c001829a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00182a1:	89 14 85 c0 82 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7d40],edx
c00182a8:	83 ec 0c             	sub    esp,0xc
c00182ab:	68 34 02 00 00       	push   0x234
c00182b0:	e8 e5 f7 fe ff       	call   c0007a9a <malloc>
c00182b5:	83 c4 10             	add    esp,0x10
c00182b8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00182bf:	83 ec 04             	sub    esp,0x4
c00182c2:	6a 00                	push   0x0
c00182c4:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00182cb:	50                   	push   eax
c00182cc:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00182d3:	e8 20 b9 fe ff       	call   c0003bf8 <f_mount>
c00182d8:	83 c4 10             	add    esp,0x10
c00182db:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00182e2:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00182ea:	74 1c                	je     c0018308 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00182ec:	83 ec 0c             	sub    esp,0xc
c00182ef:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00182f6:	e8 bf f7 fe ff       	call   c0007aba <rfree>
c00182fb:	83 c4 10             	add    esp,0x10
c00182fe:	b0 00                	mov    al,0x0
c0018300:	e9 f7 00 00 00       	jmp    c00183fc <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018305:	8d 76 00             	lea    esi,[esi+0x0]
c0018308:	83 ec 04             	sub    esp,0x4
c001830b:	68 00 01 00 00       	push   0x100
c0018310:	6a 00                	push   0x0
c0018312:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018319:	50                   	push   eax
c001831a:	e8 d1 81 fe ff       	call   c00004f0 <memset>
c001831f:	83 c4 10             	add    esp,0x10
c0018322:	83 ec 08             	sub    esp,0x8
c0018325:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001832c:	50                   	push   eax
c001832d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018334:	50                   	push   eax
c0018335:	e8 06 85 fe ff       	call   c0000840 <strcat>
c001833a:	83 c4 10             	add    esp,0x10
c001833d:	83 ec 08             	sub    esp,0x8
c0018340:	68 b6 15 02 c0       	push   0xc00215b6
c0018345:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001834c:	50                   	push   eax
c001834d:	e8 ee 84 fe ff       	call   c0000840 <strcat>
c0018352:	83 c4 10             	add    esp,0x10
c0018355:	83 ec 04             	sub    esp,0x4
c0018358:	6a 01                	push   0x1
c001835a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018361:	50                   	push   eax
c0018362:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018366:	50                   	push   eax
c0018367:	e8 ee b8 fe ff       	call   c0003c5a <f_open>
c001836c:	83 c4 10             	add    esp,0x10
c001836f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018376:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001837d:	85 c0                	test   eax,eax
c001837f:	74 0b                	je     c001838c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018381:	78 31                	js     c00183b4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018383:	83 e8 04             	sub    eax,0x4
c0018386:	83 f8 01             	cmp    eax,0x1
c0018389:	77 29                	ja     c00183b4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001838b:	90                   	nop
c001838c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018394:	83 ec 0c             	sub    esp,0xc
c0018397:	8d 44 24 14          	lea    eax,[esp+0x14]
c001839b:	50                   	push   eax
c001839c:	e8 88 c0 fe ff       	call   c0004429 <f_close>
c00183a1:	83 c4 10             	add    esp,0x10
c00183a4:	90                   	nop
c00183a5:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00183ad:	85 c0                	test   eax,eax
c00183af:	74 43                	je     c00183f4 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00183b1:	eb 31                	jmp    c00183e4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00183b3:	90                   	nop
c00183b4:	83 ec 0c             	sub    esp,0xc
c00183b7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00183be:	e8 f7 f6 fe ff       	call   c0007aba <rfree>
c00183c3:	83 c4 10             	add    esp,0x10
c00183c6:	83 ec 04             	sub    esp,0x4
c00183c9:	6a 00                	push   0x0
c00183cb:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00183d2:	50                   	push   eax
c00183d3:	6a 00                	push   0x0
c00183d5:	e8 1e b8 fe ff       	call   c0003bf8 <f_mount>
c00183da:	83 c4 10             	add    esp,0x10
c00183dd:	b0 00                	mov    al,0x0
c00183df:	eb 1b                	jmp    c00183fc <FAT::tryMount(LogicalDisk*, int)+0x214>
c00183e1:	8d 76 00             	lea    esi,[esi+0x0]
c00183e4:	a1 20 82 02 c0       	mov    eax,ds:0xc0028220
c00183e9:	83 c0 01             	add    eax,0x1
c00183ec:	a3 20 82 02 c0       	mov    ds:0xc0028220,eax
c00183f1:	8d 76 00             	lea    esi,[esi+0x0]
c00183f4:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00183fb:	90                   	nop
c00183fc:	81 c4 4c 03 00 00    	add    esp,0x34c
c0018402:	c3                   	ret    
c0018403:	90                   	nop

c0018404 <FAT::allocateSwapfile(char const*, int)>:
c0018404:	55                   	push   ebp
c0018405:	57                   	push   edi
c0018406:	56                   	push   esi
c0018407:	53                   	push   ebx
c0018408:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001840e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018419:	83 ec 0c             	sub    esp,0xc
c001841c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0018423:	e8 72 f6 fe ff       	call   c0007a9a <malloc>
c0018428:	83 c4 10             	add    esp,0x10
c001842b:	89 c7                	mov    edi,eax
c001842d:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0018432:	83 ec 04             	sub    esp,0x4
c0018435:	50                   	push   eax
c0018436:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001843d:	57                   	push   edi
c001843e:	e8 c1 2a ff ff       	call   c000af04 <File::File(char const*, Process*)>
c0018443:	83 c4 10             	add    esp,0x10
c0018446:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001844d:	83 ec 04             	sub    esp,0x4
c0018450:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018454:	50                   	push   eax
c0018455:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018459:	50                   	push   eax
c001845a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018461:	e8 06 2e ff ff       	call   c000b26c <File::stat(unsigned long long*, bool*)>
c0018466:	83 c4 10             	add    esp,0x10
c0018469:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018470:	c1 e0 14             	shl    eax,0x14
c0018473:	89 c7                	mov    edi,eax
c0018475:	89 c5                	mov    ebp,eax
c0018477:	c1 fd 1f             	sar    ebp,0x1f
c001847a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001847e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018482:	89 f9                	mov    ecx,edi
c0018484:	31 c1                	xor    ecx,eax
c0018486:	89 cb                	mov    ebx,ecx
c0018488:	89 e9                	mov    ecx,ebp
c001848a:	31 d1                	xor    ecx,edx
c001848c:	89 ce                	mov    esi,ecx
c001848e:	89 f0                	mov    eax,esi
c0018490:	09 d8                	or     eax,ebx
c0018492:	0f 84 9c 00 00 00    	je     c0018534 <FAT::allocateSwapfile(char const*, int)+0x130>
c0018498:	83 ec 0c             	sub    esp,0xc
c001849b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00184a2:	e8 91 2c ff ff       	call   c000b138 <File::unlink()>
c00184a7:	83 c4 10             	add    esp,0x10
c00184aa:	83 ec 08             	sub    esp,0x8
c00184ad:	6a 12                	push   0x12
c00184af:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00184b6:	e8 05 2b ff ff       	call   c000afc0 <File::open(FileOpenMode)>
c00184bb:	83 c4 10             	add    esp,0x10
c00184be:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00184c5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00184cb:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00184d2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00184d9:	c1 e0 14             	shl    eax,0x14
c00184dc:	83 ec 04             	sub    esp,0x4
c00184df:	6a 01                	push   0x1
c00184e1:	50                   	push   eax
c00184e2:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00184e9:	e8 c2 cd fe ff       	call   c00052b0 <f_expand>
c00184ee:	83 c4 10             	add    esp,0x10
c00184f1:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00184f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00184fa:	83 c0 10             	add    eax,0x10
c00184fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00184ff:	83 ec 0c             	sub    esp,0xc
c0018502:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018506:	52                   	push   edx
c0018507:	8d 54 24 30          	lea    edx,[esp+0x30]
c001850b:	52                   	push   edx
c001850c:	6a 00                	push   0x0
c001850e:	68 00 04 00 00       	push   0x400
c0018513:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001851a:	ff d0                	call   eax
c001851c:	83 c4 20             	add    esp,0x20
c001851f:	83 ec 0c             	sub    esp,0xc
c0018522:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018529:	e8 f0 2a ff ff       	call   c000b01e <File::close()>
c001852e:	83 c4 10             	add    esp,0x10
c0018531:	8d 76 00             	lea    esi,[esi+0x0]
c0018534:	83 ec 08             	sub    esp,0x8
c0018537:	6a 01                	push   0x1
c0018539:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018540:	e8 7b 2a ff ff       	call   c000afc0 <File::open(FileOpenMode)>
c0018545:	83 c4 10             	add    esp,0x10
c0018548:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001854f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018551:	83 c0 0c             	add    eax,0xc
c0018554:	8b 00                	mov    eax,DWORD PTR [eax]
c0018556:	83 ec 0c             	sub    esp,0xc
c0018559:	8d 54 24 24          	lea    edx,[esp+0x24]
c001855d:	52                   	push   edx
c001855e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0018562:	52                   	push   edx
c0018563:	6a 00                	push   0x0
c0018565:	6a 04                	push   0x4
c0018567:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001856e:	ff d0                	call   eax
c0018570:	83 c4 20             	add    esp,0x20
c0018573:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001857a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018580:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0018587:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001858e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0018591:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0018598:	83 ec 0c             	sub    esp,0xc
c001859b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00185a2:	e8 77 2a ff ff       	call   c000b01e <File::close()>
c00185a7:	83 c4 10             	add    esp,0x10
c00185aa:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00185b1:	ba 00 00 00 00       	mov    edx,0x0
c00185b6:	81 c4 3c 04 00 00    	add    esp,0x43c
c00185bc:	5b                   	pop    ebx
c00185bd:	5e                   	pop    esi
c00185be:	5f                   	pop    edi
c00185bf:	5d                   	pop    ebp
c00185c0:	c3                   	ret    
c00185c1:	90                   	nop
c00185c2:	66 90                	xchg   ax,ax

c00185c4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00185c4:	57                   	push   edi
c00185c5:	56                   	push   esi
c00185c6:	53                   	push   ebx
c00185c7:	81 ec 50 02 00 00    	sub    esp,0x250
c00185cd:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00185d5:	74 0d                	je     c00185e4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00185d7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00185df:	75 0f                	jne    c00185f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00185e1:	8d 76 00             	lea    esi,[esi+0x0]
c00185e4:	b8 04 00 00 00       	mov    eax,0x4
c00185e9:	e9 3a 01 00 00       	jmp    c0018728 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00185ee:	66 90                	xchg   ax,ax
c00185f0:	83 ec 08             	sub    esp,0x8
c00185f3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00185fa:	50                   	push   eax
c00185fb:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0018602:	e8 ef c0 fe ff       	call   c00046f6 <f_readdir>
c0018607:	83 c4 10             	add    esp,0x10
c001860a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0018611:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0018618:	83 ec 0c             	sub    esp,0xc
c001861b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018622:	83 c0 16             	add    eax,0x16
c0018625:	50                   	push   eax
c0018626:	e8 45 7f fe ff       	call   c0000570 <strlen>
c001862b:	83 c4 10             	add    esp,0x10
c001862e:	ba 00 00 00 00       	mov    edx,0x0
c0018633:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018637:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001863b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0018642:	0f b6 c0             	movzx  eax,al
c0018645:	83 e0 10             	and    eax,0x10
c0018648:	74 0a                	je     c0018654 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001864a:	b8 02 00 00 00       	mov    eax,0x2
c001864f:	eb 0b                	jmp    c001865c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0018651:	8d 76 00             	lea    esi,[esi+0x0]
c0018654:	b8 01 00 00 00       	mov    eax,0x1
c0018659:	8d 76 00             	lea    esi,[esi+0x0]
c001865c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018660:	83 ec 08             	sub    esp,0x8
c0018663:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001866a:	83 c0 16             	add    eax,0x16
c001866d:	50                   	push   eax
c001866e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018672:	83 c0 10             	add    eax,0x10
c0018675:	50                   	push   eax
c0018676:	e8 c5 7f fe ff       	call   c0000640 <strcpy>
c001867b:	83 c4 10             	add    esp,0x10
c001867e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0018685:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001868c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018690:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0018697:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001869e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00186a5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00186ac:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00186b3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00186ba:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00186c1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00186c8:	89 c6                	mov    esi,eax
c00186ca:	89 d7                	mov    edi,edx
c00186cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00186ce:	89 c8                	mov    eax,ecx
c00186d0:	89 fa                	mov    edx,edi
c00186d2:	89 f3                	mov    ebx,esi
c00186d4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00186db:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00186e2:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00186e9:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00186f0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00186f6:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00186fd:	0f be c0             	movsx  eax,al
c0018700:	85 c0                	test   eax,eax
c0018702:	75 08                	jne    c001870c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0018704:	b8 07 00 00 00       	mov    eax,0x7
c0018709:	eb 1d                	jmp    c0018728 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001870b:	90                   	nop
c001870c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0018713:	85 c0                	test   eax,eax
c0018715:	75 09                	jne    c0018720 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0018717:	b8 00 00 00 00       	mov    eax,0x0
c001871c:	eb 0a                	jmp    c0018728 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001871e:	66 90                	xchg   ax,ax
c0018720:	b8 01 00 00 00       	mov    eax,0x1
c0018725:	8d 76 00             	lea    esi,[esi+0x0]
c0018728:	81 c4 50 02 00 00    	add    esp,0x250
c001872e:	5b                   	pop    ebx
c001872f:	5e                   	pop    esi
c0018730:	5f                   	pop    edi
c0018731:	c3                   	ret    
c0018732:	66 90                	xchg   ax,ax

c0018734 <FAT::read(void*, unsigned long, void*, int*)>:
c0018734:	83 ec 1c             	sub    esp,0x1c
c0018737:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001873c:	74 0a                	je     c0018748 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001873e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0018743:	75 0b                	jne    c0018750 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0018745:	8d 76 00             	lea    esi,[esi+0x0]
c0018748:	b8 04 00 00 00       	mov    eax,0x4
c001874d:	eb 41                	jmp    c0018790 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001874f:	90                   	nop
c0018750:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018754:	50                   	push   eax
c0018755:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018759:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001875d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018761:	e8 b7 b7 fe ff       	call   c0003f1d <f_read>
c0018766:	83 c4 10             	add    esp,0x10
c0018769:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001876d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018771:	89 c2                	mov    edx,eax
c0018773:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018777:	89 10                	mov    DWORD PTR [eax],edx
c0018779:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001877d:	85 c0                	test   eax,eax
c001877f:	75 07                	jne    c0018788 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0018781:	b8 00 00 00 00       	mov    eax,0x0
c0018786:	eb 08                	jmp    c0018790 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0018788:	b8 01 00 00 00       	mov    eax,0x1
c001878d:	8d 76 00             	lea    esi,[esi+0x0]
c0018790:	83 c4 1c             	add    esp,0x1c
c0018793:	c3                   	ret    

c0018794 <FAT::write(void*, unsigned long, void*, int*)>:
c0018794:	83 ec 1c             	sub    esp,0x1c
c0018797:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001879c:	74 0a                	je     c00187a8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001879e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00187a3:	75 0b                	jne    c00187b0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00187a5:	8d 76 00             	lea    esi,[esi+0x0]
c00187a8:	b8 04 00 00 00       	mov    eax,0x4
c00187ad:	eb 41                	jmp    c00187f0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00187af:	90                   	nop
c00187b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00187b4:	50                   	push   eax
c00187b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00187bd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00187c1:	e8 56 b9 fe ff       	call   c000411c <f_write>
c00187c6:	83 c4 10             	add    esp,0x10
c00187c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00187cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187d1:	89 c2                	mov    edx,eax
c00187d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00187d7:	89 10                	mov    DWORD PTR [eax],edx
c00187d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187dd:	85 c0                	test   eax,eax
c00187df:	75 07                	jne    c00187e8 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00187e1:	b8 00 00 00 00       	mov    eax,0x0
c00187e6:	eb 08                	jmp    c00187f0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00187e8:	b8 01 00 00 00       	mov    eax,0x1
c00187ed:	8d 76 00             	lea    esi,[esi+0x0]
c00187f0:	83 c4 1c             	add    esp,0x1c
c00187f3:	c3                   	ret    

c00187f4 <FAT::close(void*)>:
c00187f4:	83 ec 1c             	sub    esp,0x1c
c00187f7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00187fc:	75 0a                	jne    c0018808 <FAT::close(void*)+0x14>
c00187fe:	b8 04 00 00 00       	mov    eax,0x4
c0018803:	eb 3f                	jmp    c0018844 <FAT::close(void*)+0x50>
c0018805:	8d 76 00             	lea    esi,[esi+0x0]
c0018808:	83 ec 0c             	sub    esp,0xc
c001880b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001880f:	e8 15 bc fe ff       	call   c0004429 <f_close>
c0018814:	83 c4 10             	add    esp,0x10
c0018817:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001881b:	83 ec 0c             	sub    esp,0xc
c001881e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018822:	e8 83 f2 fe ff       	call   c0007aaa <free>
c0018827:	83 c4 10             	add    esp,0x10
c001882a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001882e:	85 c0                	test   eax,eax
c0018830:	75 0a                	jne    c001883c <FAT::close(void*)+0x48>
c0018832:	b8 00 00 00 00       	mov    eax,0x0
c0018837:	eb 0b                	jmp    c0018844 <FAT::close(void*)+0x50>
c0018839:	8d 76 00             	lea    esi,[esi+0x0]
c001883c:	b8 01 00 00 00       	mov    eax,0x1
c0018841:	8d 76 00             	lea    esi,[esi+0x0]
c0018844:	83 c4 1c             	add    esp,0x1c
c0018847:	c3                   	ret    

c0018848 <FAT::closeDir(void*)>:
c0018848:	83 ec 1c             	sub    esp,0x1c
c001884b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0018850:	75 0a                	jne    c001885c <FAT::closeDir(void*)+0x14>
c0018852:	b8 04 00 00 00       	mov    eax,0x4
c0018857:	eb 3f                	jmp    c0018898 <FAT::closeDir(void*)+0x50>
c0018859:	8d 76 00             	lea    esi,[esi+0x0]
c001885c:	83 ec 0c             	sub    esp,0xc
c001885f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018863:	e8 6c be fe ff       	call   c00046d4 <f_closedir>
c0018868:	83 c4 10             	add    esp,0x10
c001886b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001886f:	83 ec 0c             	sub    esp,0xc
c0018872:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018876:	e8 2f f2 fe ff       	call   c0007aaa <free>
c001887b:	83 c4 10             	add    esp,0x10
c001887e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018882:	85 c0                	test   eax,eax
c0018884:	75 0a                	jne    c0018890 <FAT::closeDir(void*)+0x48>
c0018886:	b8 00 00 00 00       	mov    eax,0x0
c001888b:	eb 0b                	jmp    c0018898 <FAT::closeDir(void*)+0x50>
c001888d:	8d 76 00             	lea    esi,[esi+0x0]
c0018890:	b8 01 00 00 00       	mov    eax,0x1
c0018895:	8d 76 00             	lea    esi,[esi+0x0]
c0018898:	83 c4 1c             	add    esp,0x1c
c001889b:	c3                   	ret    

c001889c <FAT::seek(void*, unsigned long long)>:
c001889c:	83 ec 2c             	sub    esp,0x2c
c001889f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00188a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00188a7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00188ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00188af:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00188b4:	75 0a                	jne    c00188c0 <FAT::seek(void*, unsigned long long)+0x24>
c00188b6:	b8 04 00 00 00       	mov    eax,0x4
c00188bb:	eb 33                	jmp    c00188f0 <FAT::seek(void*, unsigned long long)+0x54>
c00188bd:	8d 76 00             	lea    esi,[esi+0x0]
c00188c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188c4:	83 ec 08             	sub    esp,0x8
c00188c7:	50                   	push   eax
c00188c8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00188cc:	e8 87 bb fe ff       	call   c0004458 <f_lseek>
c00188d1:	83 c4 10             	add    esp,0x10
c00188d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00188d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00188dc:	85 c0                	test   eax,eax
c00188de:	75 08                	jne    c00188e8 <FAT::seek(void*, unsigned long long)+0x4c>
c00188e0:	b8 00 00 00 00       	mov    eax,0x0
c00188e5:	eb 09                	jmp    c00188f0 <FAT::seek(void*, unsigned long long)+0x54>
c00188e7:	90                   	nop
c00188e8:	b8 01 00 00 00       	mov    eax,0x1
c00188ed:	8d 76 00             	lea    esi,[esi+0x0]
c00188f0:	83 c4 2c             	add    esp,0x2c
c00188f3:	c3                   	ret    

c00188f4 <fatWrapperReadDisk>:
c00188f4:	53                   	push   ebx
c00188f5:	83 ec 18             	sub    esp,0x18
c00188f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188fc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018900:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018905:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c001890c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018910:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018914:	ba 00 00 00 00       	mov    edx,0x0
c0018919:	83 ec 0c             	sub    esp,0xc
c001891c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018920:	53                   	push   ebx
c0018921:	52                   	push   edx
c0018922:	50                   	push   eax
c0018923:	51                   	push   ecx
c0018924:	e8 6f 48 ff ff       	call   c000d198 <LogicalDisk::read(unsigned long long, int, void*)>
c0018929:	83 c4 20             	add    esp,0x20
c001892c:	83 c4 18             	add    esp,0x18
c001892f:	5b                   	pop    ebx
c0018930:	c3                   	ret    
c0018931:	8d 76 00             	lea    esi,[esi+0x0]

c0018934 <fatWrapperWriteDisk>:
c0018934:	53                   	push   ebx
c0018935:	83 ec 18             	sub    esp,0x18
c0018938:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001893c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018940:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018945:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c001894c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018950:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018954:	ba 00 00 00 00       	mov    edx,0x0
c0018959:	83 ec 0c             	sub    esp,0xc
c001895c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018960:	53                   	push   ebx
c0018961:	52                   	push   edx
c0018962:	50                   	push   eax
c0018963:	51                   	push   ecx
c0018964:	e8 9b 48 ff ff       	call   c000d204 <LogicalDisk::write(unsigned long long, int, void*)>
c0018969:	83 c4 20             	add    esp,0x20
c001896c:	83 c4 18             	add    esp,0x18
c001896f:	5b                   	pop    ebx
c0018970:	c3                   	ret    
c0018971:	8d 76 00             	lea    esi,[esi+0x0]

c0018974 <fatWrapperIoctl>:
c0018974:	53                   	push   ebx
c0018975:	83 ec 28             	sub    esp,0x28
c0018978:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001897c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018980:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018984:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018988:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001898d:	83 f8 02             	cmp    eax,0x2
c0018990:	75 32                	jne    c00189c4 <fatWrapperIoctl+0x50>
c0018992:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018996:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001899a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001899f:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c00189a6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00189ac:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00189b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00189b6:	66 89 02             	mov    WORD PTR [edx],ax
c00189b9:	b8 00 00 00 00       	mov    eax,0x0
c00189be:	e9 c5 00 00 00       	jmp    c0018a88 <fatWrapperIoctl+0x114>
c00189c3:	90                   	nop
c00189c4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189c9:	83 f8 01             	cmp    eax,0x1
c00189cc:	75 6a                	jne    c0018a38 <fatWrapperIoctl+0xc4>
c00189ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00189d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00189d6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00189db:	8b 04 85 20 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8be0]
c00189e2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00189e8:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00189ee:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00189f4:	89 c8                	mov    eax,ecx
c00189f6:	89 da                	mov    edx,ebx
c00189f8:	0f a4 c2 0a          	shld   edx,eax,0xa
c00189fc:	c1 e0 0a             	shl    eax,0xa
c00189ff:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0018a04:	8b 0c 8d 20 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8be0]
c0018a0b:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0018a11:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0018a17:	89 cb                	mov    ebx,ecx
c0018a19:	c1 fb 1f             	sar    ebx,0x1f
c0018a1c:	53                   	push   ebx
c0018a1d:	51                   	push   ecx
c0018a1e:	52                   	push   edx
c0018a1f:	50                   	push   eax
c0018a20:	e8 6b 5b 00 00       	call   c001e590 <__udivdi3>
c0018a25:	83 c4 10             	add    esp,0x10
c0018a28:	89 c2                	mov    edx,eax
c0018a2a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018a2e:	89 10                	mov    DWORD PTR [eax],edx
c0018a30:	b8 00 00 00 00       	mov    eax,0x0
c0018a35:	eb 51                	jmp    c0018a88 <fatWrapperIoctl+0x114>
c0018a37:	90                   	nop
c0018a38:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a3d:	85 c0                	test   eax,eax
c0018a3f:	75 07                	jne    c0018a48 <fatWrapperIoctl+0xd4>
c0018a41:	b8 00 00 00 00       	mov    eax,0x0
c0018a46:	eb 40                	jmp    c0018a88 <fatWrapperIoctl+0x114>
c0018a48:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a4d:	83 f8 03             	cmp    eax,0x3
c0018a50:	75 1a                	jne    c0018a6c <fatWrapperIoctl+0xf8>
c0018a52:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018a56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018a5a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a5e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0018a64:	b8 00 00 00 00       	mov    eax,0x0
c0018a69:	eb 1d                	jmp    c0018a88 <fatWrapperIoctl+0x114>
c0018a6b:	90                   	nop
c0018a6c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a71:	83 f8 04             	cmp    eax,0x4
c0018a74:	75 0a                	jne    c0018a80 <fatWrapperIoctl+0x10c>
c0018a76:	b8 00 00 00 00       	mov    eax,0x0
c0018a7b:	eb 0b                	jmp    c0018a88 <fatWrapperIoctl+0x114>
c0018a7d:	8d 76 00             	lea    esi,[esi+0x0]
c0018a80:	b8 04 00 00 00       	mov    eax,0x4
c0018a85:	8d 76 00             	lea    esi,[esi+0x0]
c0018a88:	83 c4 28             	add    esp,0x28
c0018a8b:	5b                   	pop    ebx
c0018a8c:	c3                   	ret    
c0018a8d:	90                   	nop
c0018a8e:	66 90                	xchg   ax,ax

c0018a90 <FAT::FAT()>:
c0018a90:	83 ec 1c             	sub    esp,0x1c
c0018a93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a97:	83 ec 0c             	sub    esp,0xc
c0018a9a:	50                   	push   eax
c0018a9b:	e8 04 22 ff ff       	call   c000aca4 <Filesystem::Filesystem()>
c0018aa0:	83 c4 10             	add    esp,0x10
c0018aa3:	ba cc 15 02 c0       	mov    edx,0xc00215cc
c0018aa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018aac:	89 10                	mov    DWORD PTR [eax],edx
c0018aae:	c7 05 20 82 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028220,0x0
c0018ab8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018ac0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018ac5:	7f 19                	jg     c0018ae0 <FAT::FAT()+0x50>
c0018ac7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018acb:	c7 04 85 40 82 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd7dc0],0xffffffff
c0018ad6:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018adb:	eb e3                	jmp    c0018ac0 <FAT::FAT()+0x30>
c0018add:	8d 76 00             	lea    esi,[esi+0x0]
c0018ae0:	90                   	nop
c0018ae1:	83 c4 1c             	add    esp,0x1c
c0018ae4:	c3                   	ret    
c0018ae5:	90                   	nop
c0018ae6:	66 90                	xchg   ax,ax

c0018ae8 <FAT::fixFilepath(char*)>:
c0018ae8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018aec:	8a 00                	mov    al,BYTE PTR [eax]
c0018aee:	0f be c0             	movsx  eax,al
c0018af1:	83 f8 40             	cmp    eax,0x40
c0018af4:	7e 2e                	jle    c0018b24 <FAT::fixFilepath(char*)+0x3c>
c0018af6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018afa:	8a 00                	mov    al,BYTE PTR [eax]
c0018afc:	83 e8 41             	sub    eax,0x41
c0018aff:	88 c2                	mov    dl,al
c0018b01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b05:	88 10                	mov    BYTE PTR [eax],dl
c0018b07:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b0b:	8a 00                	mov    al,BYTE PTR [eax]
c0018b0d:	0f be c0             	movsx  eax,al
c0018b10:	8b 04 85 40 82 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7dc0]
c0018b17:	83 c0 30             	add    eax,0x30
c0018b1a:	88 c2                	mov    dl,al
c0018b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018b20:	88 10                	mov    BYTE PTR [eax],dl
c0018b22:	66 90                	xchg   ax,ax
c0018b24:	90                   	nop
c0018b25:	c3                   	ret    
c0018b26:	66 90                	xchg   ax,ax

c0018b28 <FAT::open(char const*, void**, FileOpenMode)>:
c0018b28:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018b2e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018b36:	74 0c                	je     c0018b44 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0018b38:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018b40:	75 0e                	jne    c0018b50 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0018b42:	66 90                	xchg   ax,ax
c0018b44:	b8 04 00 00 00       	mov    eax,0x4
c0018b49:	e9 46 01 00 00       	jmp    c0018c94 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018b4e:	66 90                	xchg   ax,ax
c0018b50:	83 ec 08             	sub    esp,0x8
c0018b53:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018b5a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018b5e:	50                   	push   eax
c0018b5f:	e8 dc 7a fe ff       	call   c0000640 <strcpy>
c0018b64:	83 c4 10             	add    esp,0x10
c0018b67:	83 ec 08             	sub    esp,0x8
c0018b6a:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018b6e:	50                   	push   eax
c0018b6f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018b76:	e8 6d ff ff ff       	call   c0018ae8 <FAT::fixFilepath(char*)>
c0018b7b:	83 c4 10             	add    esp,0x10
c0018b7e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0018b86:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018b8d:	83 e0 01             	and    eax,0x1
c0018b90:	74 12                	je     c0018ba4 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0018b92:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018b99:	83 c8 01             	or     eax,0x1
c0018b9c:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018ba3:	90                   	nop
c0018ba4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018bab:	83 e0 04             	and    eax,0x4
c0018bae:	74 24                	je     c0018bd4 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0018bb0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018bb7:	83 c8 30             	or     eax,0x30
c0018bba:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018bc1:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018bc8:	83 c8 02             	or     eax,0x2
c0018bcb:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018bd2:	66 90                	xchg   ax,ax
c0018bd4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018bdb:	83 e0 02             	and    eax,0x2
c0018bde:	74 14                	je     c0018bf4 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018be0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018be7:	83 c8 02             	or     eax,0x2
c0018bea:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0018bf4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018bfb:	83 e0 08             	and    eax,0x8
c0018bfe:	74 14                	je     c0018c14 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0018c00:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c07:	83 c8 04             	or     eax,0x4
c0018c0a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c11:	8d 76 00             	lea    esi,[esi+0x0]
c0018c14:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018c1b:	83 e0 10             	and    eax,0x10
c0018c1e:	74 14                	je     c0018c34 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0018c20:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018c27:	83 c8 08             	or     eax,0x8
c0018c2a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0018c31:	8d 76 00             	lea    esi,[esi+0x0]
c0018c34:	83 ec 0c             	sub    esp,0xc
c0018c37:	68 28 02 00 00       	push   0x228
c0018c3c:	e8 59 ee fe ff       	call   c0007a9a <malloc>
c0018c41:	83 c4 10             	add    esp,0x10
c0018c44:	89 c2                	mov    edx,eax
c0018c46:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018c4d:	89 10                	mov    DWORD PTR [eax],edx
c0018c4f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0018c57:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018c5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c60:	83 ec 04             	sub    esp,0x4
c0018c63:	52                   	push   edx
c0018c64:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018c68:	52                   	push   edx
c0018c69:	50                   	push   eax
c0018c6a:	e8 eb af fe ff       	call   c0003c5a <f_open>
c0018c6f:	83 c4 10             	add    esp,0x10
c0018c72:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0018c79:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0018c81:	74 09                	je     c0018c8c <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0018c83:	b8 01 00 00 00       	mov    eax,0x1
c0018c88:	eb 0a                	jmp    c0018c94 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0018c8a:	66 90                	xchg   ax,ax
c0018c8c:	b8 00 00 00 00       	mov    eax,0x0
c0018c91:	8d 76 00             	lea    esi,[esi+0x0]
c0018c94:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018c9a:	c3                   	ret    
c0018c9b:	90                   	nop

c0018c9c <FAT::openDir(char const*, void**)>:
c0018c9c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018ca2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018caa:	74 0c                	je     c0018cb8 <FAT::openDir(char const*, void**)+0x1c>
c0018cac:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0018cb4:	75 0e                	jne    c0018cc4 <FAT::openDir(char const*, void**)+0x28>
c0018cb6:	66 90                	xchg   ax,ax
c0018cb8:	b8 04 00 00 00       	mov    eax,0x4
c0018cbd:	e9 82 00 00 00       	jmp    c0018d44 <FAT::openDir(char const*, void**)+0xa8>
c0018cc2:	66 90                	xchg   ax,ax
c0018cc4:	83 ec 08             	sub    esp,0x8
c0018cc7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018cce:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018cd2:	50                   	push   eax
c0018cd3:	e8 68 79 fe ff       	call   c0000640 <strcpy>
c0018cd8:	83 c4 10             	add    esp,0x10
c0018cdb:	83 ec 08             	sub    esp,0x8
c0018cde:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018ce2:	50                   	push   eax
c0018ce3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018cea:	e8 f9 fd ff ff       	call   c0018ae8 <FAT::fixFilepath(char*)>
c0018cef:	83 c4 10             	add    esp,0x10
c0018cf2:	83 ec 0c             	sub    esp,0xc
c0018cf5:	6a 30                	push   0x30
c0018cf7:	e8 9e ed fe ff       	call   c0007a9a <malloc>
c0018cfc:	83 c4 10             	add    esp,0x10
c0018cff:	89 c2                	mov    edx,eax
c0018d01:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d08:	89 10                	mov    DWORD PTR [eax],edx
c0018d0a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018d11:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d13:	83 ec 08             	sub    esp,0x8
c0018d16:	8d 54 24 14          	lea    edx,[esp+0x14]
c0018d1a:	52                   	push   edx
c0018d1b:	50                   	push   eax
c0018d1c:	e8 e8 b8 fe ff       	call   c0004609 <f_opendir>
c0018d21:	83 c4 10             	add    esp,0x10
c0018d24:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018d2b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0018d33:	74 07                	je     c0018d3c <FAT::openDir(char const*, void**)+0xa0>
c0018d35:	b8 01 00 00 00       	mov    eax,0x1
c0018d3a:	eb 08                	jmp    c0018d44 <FAT::openDir(char const*, void**)+0xa8>
c0018d3c:	b8 00 00 00 00       	mov    eax,0x0
c0018d41:	8d 76 00             	lea    esi,[esi+0x0]
c0018d44:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018d4a:	c3                   	ret    
c0018d4b:	90                   	nop

c0018d4c <FAT::stat(char const*, unsigned long long*, bool*)>:
c0018d4c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018d52:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0018d5a:	75 0c                	jne    c0018d68 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0018d5c:	b8 04 00 00 00       	mov    eax,0x4
c0018d61:	e9 d6 00 00 00       	jmp    c0018e3c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018d66:	66 90                	xchg   ax,ax
c0018d68:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0018d70:	75 0a                	jne    c0018d7c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0018d72:	b8 04 00 00 00       	mov    eax,0x4
c0018d77:	e9 c0 00 00 00       	jmp    c0018e3c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018d7c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0018d84:	75 0a                	jne    c0018d90 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0018d86:	b8 04 00 00 00       	mov    eax,0x4
c0018d8b:	e9 ac 00 00 00       	jmp    c0018e3c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018d90:	83 ec 08             	sub    esp,0x8
c0018d93:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018d9a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018da1:	50                   	push   eax
c0018da2:	e8 99 78 fe ff       	call   c0000640 <strcpy>
c0018da7:	83 c4 10             	add    esp,0x10
c0018daa:	83 ec 08             	sub    esp,0x8
c0018dad:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0018db4:	50                   	push   eax
c0018db5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0018dbc:	e8 27 fd ff ff       	call   c0018ae8 <FAT::fixFilepath(char*)>
c0018dc1:	83 c4 10             	add    esp,0x10
c0018dc4:	83 ec 08             	sub    esp,0x8
c0018dc7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dcb:	50                   	push   eax
c0018dcc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018dd3:	50                   	push   eax
c0018dd4:	e8 af b9 fe ff       	call   c0004788 <f_stat>
c0018dd9:	83 c4 10             	add    esp,0x10
c0018ddc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018de3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018dea:	85 c0                	test   eax,eax
c0018dec:	74 0a                	je     c0018df8 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0018dee:	83 f8 04             	cmp    eax,0x4
c0018df1:	74 39                	je     c0018e2c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0018df3:	eb 3f                	jmp    c0018e34 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0018df5:	8d 76 00             	lea    esi,[esi+0x0]
c0018df8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018dfc:	0f b6 c0             	movzx  eax,al
c0018dff:	83 e0 10             	and    eax,0x10
c0018e02:	0f 95 c2             	setne  dl
c0018e05:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0018e0c:	88 10                	mov    BYTE PTR [eax],dl
c0018e0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e12:	ba 00 00 00 00       	mov    edx,0x0
c0018e17:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0018e1e:	89 01                	mov    DWORD PTR [ecx],eax
c0018e20:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018e23:	b8 00 00 00 00       	mov    eax,0x0
c0018e28:	eb 12                	jmp    c0018e3c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e2a:	66 90                	xchg   ax,ax
c0018e2c:	b8 02 00 00 00       	mov    eax,0x2
c0018e31:	eb 09                	jmp    c0018e3c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018e33:	90                   	nop
c0018e34:	b8 01 00 00 00       	mov    eax,0x1
c0018e39:	8d 76 00             	lea    esi,[esi+0x0]
c0018e3c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018e42:	c3                   	ret    
c0018e43:	90                   	nop

c0018e44 <FAT::unlink(char const*)>:
c0018e44:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018e4a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018e52:	75 08                	jne    c0018e5c <FAT::unlink(char const*)+0x18>
c0018e54:	b8 04 00 00 00       	mov    eax,0x4
c0018e59:	eb 61                	jmp    c0018ebc <FAT::unlink(char const*)+0x78>
c0018e5b:	90                   	nop
c0018e5c:	83 ec 08             	sub    esp,0x8
c0018e5f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018e66:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e6a:	50                   	push   eax
c0018e6b:	e8 d0 77 fe ff       	call   c0000640 <strcpy>
c0018e70:	83 c4 10             	add    esp,0x10
c0018e73:	83 ec 08             	sub    esp,0x8
c0018e76:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018e7a:	50                   	push   eax
c0018e7b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018e82:	e8 61 fc ff ff       	call   c0018ae8 <FAT::fixFilepath(char*)>
c0018e87:	83 c4 10             	add    esp,0x10
c0018e8a:	83 ec 0c             	sub    esp,0xc
c0018e8d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e91:	50                   	push   eax
c0018e92:	e8 63 bb fe ff       	call   c00049fa <f_unlink>
c0018e97:	83 c4 10             	add    esp,0x10
c0018e9a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0018ea1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0018ea8:	85 c0                	test   eax,eax
c0018eaa:	75 08                	jne    c0018eb4 <FAT::unlink(char const*)+0x70>
c0018eac:	b8 00 00 00 00       	mov    eax,0x0
c0018eb1:	eb 09                	jmp    c0018ebc <FAT::unlink(char const*)+0x78>
c0018eb3:	90                   	nop
c0018eb4:	b8 01 00 00 00       	mov    eax,0x1
c0018eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0018ebc:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018ec2:	c3                   	ret    
c0018ec3:	90                   	nop

c0018ec4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0018ec4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018eca:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0018ed1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018ed8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018edc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018ee0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018ee8:	75 0a                	jne    c0018ef4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0018eea:	b8 04 00 00 00       	mov    eax,0x4
c0018eef:	e9 7c 01 00 00       	jmp    c0019070 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0018ef4:	83 ec 08             	sub    esp,0x8
c0018ef7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018efe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018f02:	50                   	push   eax
c0018f03:	e8 38 77 fe ff       	call   c0000640 <strcpy>
c0018f08:	83 c4 10             	add    esp,0x10
c0018f0b:	83 ec 08             	sub    esp,0x8
c0018f0e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018f12:	50                   	push   eax
c0018f13:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0018f1a:	e8 c9 fb ff ff       	call   c0018ae8 <FAT::fixFilepath(char*)>
c0018f1f:	83 c4 10             	add    esp,0x10
c0018f22:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0018f2a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0018f32:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f37:	83 e0 01             	and    eax,0x1
c0018f3a:	74 14                	je     c0018f50 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0018f3c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f43:	83 c8 01             	or     eax,0x1
c0018f46:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f4d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f50:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f55:	83 e0 02             	and    eax,0x2
c0018f58:	74 12                	je     c0018f6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0018f5a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f61:	83 c8 20             	or     eax,0x20
c0018f64:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f6b:	90                   	nop
c0018f6c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f71:	83 e0 04             	and    eax,0x4
c0018f74:	74 12                	je     c0018f88 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0018f76:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f7d:	83 c8 04             	or     eax,0x4
c0018f80:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018f87:	90                   	nop
c0018f88:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018f8d:	83 e0 08             	and    eax,0x8
c0018f90:	74 12                	je     c0018fa4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0018f92:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018f99:	83 c8 02             	or     eax,0x2
c0018f9c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0018fa3:	90                   	nop
c0018fa4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018fa9:	83 e0 01             	and    eax,0x1
c0018fac:	74 12                	je     c0018fc0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0018fae:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018fb5:	83 c8 01             	or     eax,0x1
c0018fb8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018fbf:	90                   	nop
c0018fc0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018fc5:	83 e0 02             	and    eax,0x2
c0018fc8:	74 12                	je     c0018fdc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0018fca:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018fd1:	83 c8 20             	or     eax,0x20
c0018fd4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018fdb:	90                   	nop
c0018fdc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018fe1:	83 e0 04             	and    eax,0x4
c0018fe4:	74 12                	je     c0018ff8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0018fe6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018fed:	83 c8 04             	or     eax,0x4
c0018ff0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0018ff7:	90                   	nop
c0018ff8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018ffd:	83 e0 08             	and    eax,0x8
c0019000:	74 12                	je     c0019014 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c0019002:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019009:	83 c8 02             	or     eax,0x2
c001900c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019013:	90                   	nop
c0019014:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001901b:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019022:	09 d0                	or     eax,edx
c0019024:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001902b:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019033:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001903b:	83 ec 04             	sub    esp,0x4
c001903e:	52                   	push   edx
c001903f:	50                   	push   eax
c0019040:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019044:	50                   	push   eax
c0019045:	e8 25 be fe ff       	call   c0004e6f <f_chmod>
c001904a:	83 c4 10             	add    esp,0x10
c001904d:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019054:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001905b:	85 c0                	test   eax,eax
c001905d:	75 09                	jne    c0019068 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001905f:	b8 00 00 00 00       	mov    eax,0x0
c0019064:	eb 0a                	jmp    c0019070 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019066:	66 90                	xchg   ax,ax
c0019068:	b8 01 00 00 00       	mov    eax,0x1
c001906d:	8d 76 00             	lea    esi,[esi+0x0]
c0019070:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019076:	c3                   	ret    
c0019077:	90                   	nop

c0019078 <FAT::rename(char const*, char const*)>:
c0019078:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001907e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019086:	74 0c                	je     c0019094 <FAT::rename(char const*, char const*)+0x1c>
c0019088:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019090:	75 0e                	jne    c00190a0 <FAT::rename(char const*, char const*)+0x28>
c0019092:	66 90                	xchg   ax,ax
c0019094:	b8 04 00 00 00       	mov    eax,0x4
c0019099:	e9 9e 00 00 00       	jmp    c001913c <FAT::rename(char const*, char const*)+0xc4>
c001909e:	66 90                	xchg   ax,ax
c00190a0:	83 ec 08             	sub    esp,0x8
c00190a3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00190aa:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00190b1:	50                   	push   eax
c00190b2:	e8 89 75 fe ff       	call   c0000640 <strcpy>
c00190b7:	83 c4 10             	add    esp,0x10
c00190ba:	83 ec 08             	sub    esp,0x8
c00190bd:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00190c4:	50                   	push   eax
c00190c5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00190cc:	e8 17 fa ff ff       	call   c0018ae8 <FAT::fixFilepath(char*)>
c00190d1:	83 c4 10             	add    esp,0x10
c00190d4:	83 ec 08             	sub    esp,0x8
c00190d7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00190de:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190e2:	50                   	push   eax
c00190e3:	e8 58 75 fe ff       	call   c0000640 <strcpy>
c00190e8:	83 c4 10             	add    esp,0x10
c00190eb:	83 ec 08             	sub    esp,0x8
c00190ee:	8d 44 24 14          	lea    eax,[esp+0x14]
c00190f2:	50                   	push   eax
c00190f3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00190fa:	e8 e9 f9 ff ff       	call   c0018ae8 <FAT::fixFilepath(char*)>
c00190ff:	83 c4 10             	add    esp,0x10
c0019102:	83 ec 08             	sub    esp,0x8
c0019105:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019109:	50                   	push   eax
c001910a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019111:	50                   	push   eax
c0019112:	e8 a0 bb fe ff       	call   c0004cb7 <f_rename>
c0019117:	83 c4 10             	add    esp,0x10
c001911a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019121:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019128:	85 c0                	test   eax,eax
c001912a:	75 08                	jne    c0019134 <FAT::rename(char const*, char const*)+0xbc>
c001912c:	b8 00 00 00 00       	mov    eax,0x0
c0019131:	eb 09                	jmp    c001913c <FAT::rename(char const*, char const*)+0xc4>
c0019133:	90                   	nop
c0019134:	b8 01 00 00 00       	mov    eax,0x1
c0019139:	8d 76 00             	lea    esi,[esi+0x0]
c001913c:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019142:	c3                   	ret    
c0019143:	90                   	nop

c0019144 <FAT::mkdir(char const*)>:
c0019144:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001914a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019152:	75 08                	jne    c001915c <FAT::mkdir(char const*)+0x18>
c0019154:	b8 04 00 00 00       	mov    eax,0x4
c0019159:	eb 61                	jmp    c00191bc <FAT::mkdir(char const*)+0x78>
c001915b:	90                   	nop
c001915c:	83 ec 08             	sub    esp,0x8
c001915f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019166:	8d 44 24 18          	lea    eax,[esp+0x18]
c001916a:	50                   	push   eax
c001916b:	e8 d0 74 fe ff       	call   c0000640 <strcpy>
c0019170:	83 c4 10             	add    esp,0x10
c0019173:	83 ec 08             	sub    esp,0x8
c0019176:	8d 44 24 14          	lea    eax,[esp+0x14]
c001917a:	50                   	push   eax
c001917b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019182:	e8 61 f9 ff ff       	call   c0018ae8 <FAT::fixFilepath(char*)>
c0019187:	83 c4 10             	add    esp,0x10
c001918a:	83 ec 0c             	sub    esp,0xc
c001918d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019191:	50                   	push   eax
c0019192:	e8 85 b9 fe ff       	call   c0004b1c <f_mkdir>
c0019197:	83 c4 10             	add    esp,0x10
c001919a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00191a1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00191a8:	85 c0                	test   eax,eax
c00191aa:	75 08                	jne    c00191b4 <FAT::mkdir(char const*)+0x70>
c00191ac:	b8 00 00 00 00       	mov    eax,0x0
c00191b1:	eb 09                	jmp    c00191bc <FAT::mkdir(char const*)+0x78>
c00191b3:	90                   	nop
c00191b4:	b8 01 00 00 00       	mov    eax,0x1
c00191b9:	8d 76 00             	lea    esi,[esi+0x0]
c00191bc:	81 c4 1c 01 00 00    	add    esp,0x11c
c00191c2:	c3                   	ret    
c00191c3:	90                   	nop

c00191c4 <FAT::exists(char const*)>:
c00191c4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00191ca:	83 ec 08             	sub    esp,0x8
c00191cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00191d4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00191d8:	50                   	push   eax
c00191d9:	e8 62 74 fe ff       	call   c0000640 <strcpy>
c00191de:	83 c4 10             	add    esp,0x10
c00191e1:	83 ec 08             	sub    esp,0x8
c00191e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00191e8:	50                   	push   eax
c00191e9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00191f0:	e8 f3 f8 ff ff       	call   c0018ae8 <FAT::fixFilepath(char*)>
c00191f5:	83 c4 10             	add    esp,0x10
c00191f8:	83 ec 08             	sub    esp,0x8
c00191fb:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019202:	50                   	push   eax
c0019203:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019207:	50                   	push   eax
c0019208:	e8 7b b5 fe ff       	call   c0004788 <f_stat>
c001920d:	83 c4 10             	add    esp,0x10
c0019210:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019217:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001921e:	85 c0                	test   eax,eax
c0019220:	75 06                	jne    c0019228 <FAT::exists(char const*)+0x64>
c0019222:	b0 01                	mov    al,0x1
c0019224:	eb 06                	jmp    c001922c <FAT::exists(char const*)+0x68>
c0019226:	66 90                	xchg   ax,ax
c0019228:	b0 00                	mov    al,0x0
c001922a:	66 90                	xchg   ax,ax
c001922c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019232:	c3                   	ret    
c0019233:	90                   	nop

c0019234 <isoReadDiscSectorHelper>:
c0019234:	83 ec 2c             	sub    esp,0x2c
c0019237:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001923b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001923f:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019244:	83 e8 41             	sub    eax,0x41
c0019247:	8b 0c 85 20 74 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8be0]
c001924e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019252:	ba 00 00 00 00       	mov    edx,0x0
c0019257:	83 ec 0c             	sub    esp,0xc
c001925a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001925e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019262:	52                   	push   edx
c0019263:	50                   	push   eax
c0019264:	51                   	push   ecx
c0019265:	e8 2e 3f ff ff       	call   c000d198 <LogicalDisk::read(unsigned long long, int, void*)>
c001926a:	83 c4 20             	add    esp,0x20
c001926d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019271:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019276:	74 0c                	je     c0019284 <isoReadDiscSectorHelper+0x50>
c0019278:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001927c:	c1 e0 0b             	shl    eax,0xb
c001927f:	eb 0b                	jmp    c001928c <isoReadDiscSectorHelper+0x58>
c0019281:	8d 76 00             	lea    esi,[esi+0x0]
c0019284:	b8 00 00 00 00       	mov    eax,0x0
c0019289:	8d 76 00             	lea    esi,[esi+0x0]
c001928c:	83 c4 2c             	add    esp,0x2c
c001928f:	c3                   	ret    

c0019290 <iso_kprintf>:
c0019290:	83 ec 0c             	sub    esp,0xc
c0019293:	83 ec 08             	sub    esp,0x8
c0019296:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001929a:	68 d9 0f 02 c0       	push   0xc0020fd9
c001929f:	e8 de 16 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c00192a4:	83 c4 10             	add    esp,0x10
c00192a7:	90                   	nop
c00192a8:	83 c4 0c             	add    esp,0xc
c00192ab:	c3                   	ret    

c00192ac <iso_kprintfd>:
c00192ac:	83 ec 0c             	sub    esp,0xc
c00192af:	83 ec 08             	sub    esp,0x8
c00192b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00192b6:	68 f7 ff 01 c0       	push   0xc001fff7
c00192bb:	e8 c2 16 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c00192c0:	83 c4 10             	add    esp,0x10
c00192c3:	90                   	nop
c00192c4:	83 c4 0c             	add    esp,0xc
c00192c7:	c3                   	ret    

c00192c8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00192c8:	b8 08 00 00 00       	mov    eax,0x8
c00192cd:	c3                   	ret    

c00192ce <ISO9660::getName()>:
c00192ce:	b8 2c 16 02 c0       	mov    eax,0xc002162c
c00192d3:	c3                   	ret    

c00192d4 <ISO9660::closeDir(void*)>:
c00192d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00192da:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00192dd:	90                   	nop

c00192de <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00192de:	b8 01 00 00 00       	mov    eax,0x1
c00192e3:	c3                   	ret    

c00192e4 <ISO9660::unlink(char const*)>:
c00192e4:	b8 01 00 00 00       	mov    eax,0x1
c00192e9:	c3                   	ret    

c00192ea <ISO9660::write(void*, unsigned long, void*, int*)>:
c00192ea:	b8 03 00 00 00       	mov    eax,0x3
c00192ef:	c3                   	ret    

c00192f0 <ISO9660::rename(char const*, char const*)>:
c00192f0:	b8 01 00 00 00       	mov    eax,0x1
c00192f5:	c3                   	ret    

c00192f6 <ISO9660::mkdir(char const*)>:
c00192f6:	b8 01 00 00 00       	mov    eax,0x1
c00192fb:	c3                   	ret    

c00192fc <ISO9660::~ISO9660()>:
c00192fc:	83 ec 0c             	sub    esp,0xc
c00192ff:	ba 6c 17 02 c0       	mov    edx,0xc002176c
c0019304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019308:	89 10                	mov    DWORD PTR [eax],edx
c001930a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001930e:	83 ec 0c             	sub    esp,0xc
c0019311:	50                   	push   eax
c0019312:	e8 b1 19 ff ff       	call   c000acc8 <Filesystem::~Filesystem()>
c0019317:	83 c4 10             	add    esp,0x10
c001931a:	90                   	nop
c001931b:	83 c4 0c             	add    esp,0xc
c001931e:	c3                   	ret    
c001931f:	90                   	nop

c0019320 <ISO9660::~ISO9660()>:
c0019320:	83 ec 0c             	sub    esp,0xc
c0019323:	83 ec 0c             	sub    esp,0xc
c0019326:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001932a:	e8 cd ff ff ff       	call   c00192fc <ISO9660::~ISO9660()>
c001932f:	83 c4 10             	add    esp,0x10
c0019332:	83 ec 08             	sub    esp,0x8
c0019335:	6a 08                	push   0x8
c0019337:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001933b:	e8 15 15 ff ff       	call   c000a855 <operator delete(void*, unsigned long)>
c0019340:	83 c4 10             	add    esp,0x10
c0019343:	83 c4 0c             	add    esp,0xc
c0019346:	c3                   	ret    
c0019347:	90                   	nop

c0019348 <ISO9660::exists(char const*)>:
c0019348:	83 ec 18             	sub    esp,0x18
c001934b:	68 47 16 02 c0       	push   0xc0021647
c0019350:	e8 0a 75 ff ff       	call   c001085f <KePanic(char const*)>
c0019355:	31 c0                	xor    eax,eax
c0019357:	83 c4 1c             	add    esp,0x1c
c001935a:	c3                   	ret    
c001935b:	90                   	nop

c001935c <ISO9660::open(char const*, void**, FileOpenMode)>:
c001935c:	56                   	push   esi
c001935d:	53                   	push   ebx
c001935e:	53                   	push   ebx
c001935f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019363:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019367:	85 db                	test   ebx,ebx
c0019369:	0f 84 ca 00 00 00    	je     c0019439 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001936f:	85 f6                	test   esi,esi
c0019371:	0f 84 c2 00 00 00    	je     c0019439 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019377:	b8 03 00 00 00       	mov    eax,0x3
c001937c:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019381:	0f 85 b7 00 00 00    	jne    c001943e <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019387:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019389:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019390:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c0019396:	74 1b                	je     c00193b3 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0019398:	85 c0                	test   eax,eax
c001939a:	74 10                	je     c00193ac <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001939c:	83 ec 0c             	sub    esp,0xc
c001939f:	68 65 16 02 c0       	push   0xc0021665
c00193a4:	e8 b6 74 ff ff       	call   c001085f <KePanic(char const*)>
c00193a9:	83 c4 10             	add    esp,0x10
c00193ac:	8a 03                	mov    al,BYTE PTR [ebx]
c00193ae:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00193b3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00193b6:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00193bd:	85 c0                	test   eax,eax
c00193bf:	74 09                	je     c00193ca <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c00193c1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00193c8:	74 48                	je     c0019412 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c00193ca:	83 ec 0c             	sub    esp,0xc
c00193cd:	68 75 16 02 c0       	push   0xc0021675
c00193d2:	e8 ab 15 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c00193d7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00193da:	83 c4 10             	add    esp,0x10
c00193dd:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00193e4:	85 c0                	test   eax,eax
c00193e6:	74 17                	je     c00193ff <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c00193e8:	83 ec 0c             	sub    esp,0xc
c00193eb:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00193f2:	68 95 16 02 c0       	push   0xc0021695
c00193f7:	e8 86 15 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c00193fc:	83 c4 10             	add    esp,0x10
c00193ff:	83 ec 0c             	sub    esp,0xc
c0019402:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019409:	50                   	push   eax
c001940a:	e8 37 d6 fe ff       	call   c0006a46 <init_percd>
c001940f:	83 c4 10             	add    esp,0x10
c0019412:	83 c3 03             	add    ebx,0x3
c0019415:	51                   	push   ecx
c0019416:	51                   	push   ecx
c0019417:	6a 00                	push   0x0
c0019419:	53                   	push   ebx
c001941a:	e8 ee d0 fe ff       	call   c000650d <iso_open>
c001941f:	83 c4 10             	add    esp,0x10
c0019422:	89 c2                	mov    edx,eax
c0019424:	b8 01 00 00 00       	mov    eax,0x1
c0019429:	83 fa ff             	cmp    edx,0xffffffff
c001942c:	74 10                	je     c001943e <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001942e:	83 c2 32             	add    edx,0x32
c0019431:	31 c0                	xor    eax,eax
c0019433:	01 d2                	add    edx,edx
c0019435:	89 16                	mov    DWORD PTR [esi],edx
c0019437:	eb 05                	jmp    c001943e <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019439:	b8 04 00 00 00       	mov    eax,0x4
c001943e:	5a                   	pop    edx
c001943f:	5b                   	pop    ebx
c0019440:	5e                   	pop    esi
c0019441:	c3                   	ret    

c0019442 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0019442:	53                   	push   ebx
c0019443:	83 ec 08             	sub    esp,0x8
c0019446:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001944a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001944e:	85 c0                	test   eax,eax
c0019450:	74 2d                	je     c001947f <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019452:	85 db                	test   ebx,ebx
c0019454:	74 29                	je     c001947f <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019456:	b9 02 00 00 00       	mov    ecx,0x2
c001945b:	52                   	push   edx
c001945c:	99                   	cdq    
c001945d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019461:	f7 f9                	idiv   ecx
c0019463:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019467:	83 e8 32             	sub    eax,0x32
c001946a:	50                   	push   eax
c001946b:	e8 45 d1 fe ff       	call   c00065b5 <iso_read>
c0019470:	83 c4 10             	add    esp,0x10
c0019473:	89 03                	mov    DWORD PTR [ebx],eax
c0019475:	09 d0                	or     eax,edx
c0019477:	0f 94 c0             	sete   al
c001947a:	0f b6 c0             	movzx  eax,al
c001947d:	eb 05                	jmp    c0019484 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001947f:	b8 04 00 00 00       	mov    eax,0x4
c0019484:	83 c4 08             	add    esp,0x8
c0019487:	5b                   	pop    ebx
c0019488:	c3                   	ret    
c0019489:	90                   	nop

c001948a <ISO9660::seek(void*, unsigned long long)>:
c001948a:	57                   	push   edi
c001948b:	56                   	push   esi
c001948c:	b8 04 00 00 00       	mov    eax,0x4
c0019491:	51                   	push   ecx
c0019492:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019496:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001949a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001949e:	85 d2                	test   edx,edx
c00194a0:	74 26                	je     c00194c8 <ISO9660::seek(void*, unsigned long long)+0x3e>
c00194a2:	6a 00                	push   0x0
c00194a4:	b9 02 00 00 00       	mov    ecx,0x2
c00194a9:	57                   	push   edi
c00194aa:	89 d0                	mov    eax,edx
c00194ac:	56                   	push   esi
c00194ad:	99                   	cdq    
c00194ae:	f7 f9                	idiv   ecx
c00194b0:	83 e8 32             	sub    eax,0x32
c00194b3:	50                   	push   eax
c00194b4:	e8 12 d2 fe ff       	call   c00066cb <iso_seek>
c00194b9:	83 c4 10             	add    esp,0x10
c00194bc:	31 f0                	xor    eax,esi
c00194be:	31 fa                	xor    edx,edi
c00194c0:	09 d0                	or     eax,edx
c00194c2:	0f 95 c0             	setne  al
c00194c5:	0f b6 c0             	movzx  eax,al
c00194c8:	5a                   	pop    edx
c00194c9:	5e                   	pop    esi
c00194ca:	5f                   	pop    edi
c00194cb:	c3                   	ret    

c00194cc <ISO9660::tell(void*, unsigned long long*)>:
c00194cc:	53                   	push   ebx
c00194cd:	83 ec 08             	sub    esp,0x8
c00194d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00194d4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00194d8:	85 c0                	test   eax,eax
c00194da:	74 24                	je     c0019500 <ISO9660::tell(void*, unsigned long long*)+0x34>
c00194dc:	85 db                	test   ebx,ebx
c00194de:	74 20                	je     c0019500 <ISO9660::tell(void*, unsigned long long*)+0x34>
c00194e0:	83 ec 0c             	sub    esp,0xc
c00194e3:	b9 02 00 00 00       	mov    ecx,0x2
c00194e8:	99                   	cdq    
c00194e9:	f7 f9                	idiv   ecx
c00194eb:	83 e8 32             	sub    eax,0x32
c00194ee:	50                   	push   eax
c00194ef:	e8 5b d2 fe ff       	call   c000674f <iso_tell>
c00194f4:	83 c4 10             	add    esp,0x10
c00194f7:	89 03                	mov    DWORD PTR [ebx],eax
c00194f9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00194fc:	31 c0                	xor    eax,eax
c00194fe:	eb 05                	jmp    c0019505 <ISO9660::tell(void*, unsigned long long*)+0x39>
c0019500:	b8 04 00 00 00       	mov    eax,0x4
c0019505:	83 c4 08             	add    esp,0x8
c0019508:	5b                   	pop    ebx
c0019509:	c3                   	ret    

c001950a <ISO9660::stat(void*, unsigned long long*)>:
c001950a:	53                   	push   ebx
c001950b:	83 ec 14             	sub    esp,0x14
c001950e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019512:	68 b9 16 02 c0       	push   0xc00216b9
c0019517:	e8 66 14 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c001951c:	83 c4 10             	add    esp,0x10
c001951f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019524:	74 2c                	je     c0019552 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0019526:	85 db                	test   ebx,ebx
c0019528:	74 28                	je     c0019552 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001952a:	83 ec 0c             	sub    esp,0xc
c001952d:	b9 02 00 00 00       	mov    ecx,0x2
c0019532:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019536:	99                   	cdq    
c0019537:	f7 f9                	idiv   ecx
c0019539:	83 e8 32             	sub    eax,0x32
c001953c:	50                   	push   eax
c001953d:	e8 3e d2 fe ff       	call   c0006780 <iso_total>
c0019542:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019549:	89 03                	mov    DWORD PTR [ebx],eax
c001954b:	83 c4 10             	add    esp,0x10
c001954e:	31 c0                	xor    eax,eax
c0019550:	eb 05                	jmp    c0019557 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0019552:	b8 04 00 00 00       	mov    eax,0x4
c0019557:	83 c4 08             	add    esp,0x8
c001955a:	5b                   	pop    ebx
c001955b:	c3                   	ret    

c001955c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001955c:	55                   	push   ebp
c001955d:	57                   	push   edi
c001955e:	56                   	push   esi
c001955f:	53                   	push   ebx
c0019560:	83 ec 18             	sub    esp,0x18
c0019563:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019567:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001956b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001956f:	68 c1 16 02 c0       	push   0xc00216c1
c0019574:	e8 09 14 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0019579:	83 c4 10             	add    esp,0x10
c001957c:	85 ff                	test   edi,edi
c001957e:	0f 94 c0             	sete   al
c0019581:	85 f6                	test   esi,esi
c0019583:	0f 94 c2             	sete   dl
c0019586:	09 d0                	or     eax,edx
c0019588:	a8 01                	test   al,0x1
c001958a:	0f 85 dd 00 00 00    	jne    c001966d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0019590:	85 db                	test   ebx,ebx
c0019592:	0f 84 d5 00 00 00    	je     c001966d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0019598:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001959b:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00195a1:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c00195a8:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00195af:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00195b1:	38 0d 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,cl
c00195b7:	74 1b                	je     c00195d4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c00195b9:	85 c0                	test   eax,eax
c00195bb:	74 10                	je     c00195cd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c00195bd:	83 ec 0c             	sub    esp,0xc
c00195c0:	68 65 16 02 c0       	push   0xc0021665
c00195c5:	e8 95 72 ff ff       	call   c001085f <KePanic(char const*)>
c00195ca:	83 c4 10             	add    esp,0x10
c00195cd:	8a 03                	mov    al,BYTE PTR [ebx]
c00195cf:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c00195d4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00195d7:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c00195de:	85 c0                	test   eax,eax
c00195e0:	74 09                	je     c00195eb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c00195e2:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00195e9:	74 51                	je     c001963c <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c00195eb:	83 ec 0c             	sub    esp,0xc
c00195ee:	68 c9 16 02 c0       	push   0xc00216c9
c00195f3:	e8 8a 13 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c00195f8:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00195fb:	83 c4 10             	add    esp,0x10
c00195fe:	83 3c 85 1c 73 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd8ce4],0x0
c0019606:	74 21                	je     c0019629 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c0019608:	83 ec 0c             	sub    esp,0xc
c001960b:	68 e9 16 02 c0       	push   0xc00216e9
c0019610:	e8 6d 13 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c0019615:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019618:	83 c4 10             	add    esp,0x10
c001961b:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c0019622:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019629:	83 ec 0c             	sub    esp,0xc
c001962c:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c0019633:	50                   	push   eax
c0019634:	e8 0d d4 fe ff       	call   c0006a46 <init_percd>
c0019639:	83 c4 10             	add    esp,0x10
c001963c:	83 c3 03             	add    ebx,0x3
c001963f:	52                   	push   edx
c0019640:	52                   	push   edx
c0019641:	6a 00                	push   0x0
c0019643:	53                   	push   ebx
c0019644:	e8 c4 ce fe ff       	call   c000650d <iso_open>
c0019649:	83 c4 10             	add    esp,0x10
c001964c:	89 c5                	mov    ebp,eax
c001964e:	83 f8 ff             	cmp    eax,0xffffffff
c0019651:	75 21                	jne    c0019674 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c0019653:	50                   	push   eax
c0019654:	50                   	push   eax
c0019655:	6a 01                	push   0x1
c0019657:	53                   	push   ebx
c0019658:	e8 b0 ce fe ff       	call   c000650d <iso_open>
c001965d:	83 c4 10             	add    esp,0x10
c0019660:	ba 02 00 00 00       	mov    edx,0x2
c0019665:	40                   	inc    eax
c0019666:	74 2b                	je     c0019693 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019668:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001966b:	eb 24                	jmp    c0019691 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001966d:	ba 04 00 00 00       	mov    edx,0x4
c0019672:	eb 1f                	jmp    c0019693 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0019674:	83 ec 0c             	sub    esp,0xc
c0019677:	50                   	push   eax
c0019678:	e8 03 d1 fe ff       	call   c0006780 <iso_total>
c001967d:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0019684:	89 07                	mov    DWORD PTR [edi],eax
c0019686:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019689:	e8 09 cf fe ff       	call   c0006597 <iso_close>
c001968e:	83 c4 10             	add    esp,0x10
c0019691:	31 d2                	xor    edx,edx
c0019693:	83 c4 0c             	add    esp,0xc
c0019696:	89 d0                	mov    eax,edx
c0019698:	5b                   	pop    ebx
c0019699:	5e                   	pop    esi
c001969a:	5f                   	pop    edi
c001969b:	5d                   	pop    ebp
c001969c:	c3                   	ret    
c001969d:	90                   	nop

c001969e <ISO9660::close(void*)>:
c001969e:	83 ec 0c             	sub    esp,0xc
c00196a1:	b8 04 00 00 00       	mov    eax,0x4
c00196a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00196aa:	85 d2                	test   edx,edx
c00196ac:	74 1b                	je     c00196c9 <ISO9660::close(void*)+0x2b>
c00196ae:	83 ec 0c             	sub    esp,0xc
c00196b1:	b9 02 00 00 00       	mov    ecx,0x2
c00196b6:	89 d0                	mov    eax,edx
c00196b8:	99                   	cdq    
c00196b9:	f7 f9                	idiv   ecx
c00196bb:	83 e8 32             	sub    eax,0x32
c00196be:	50                   	push   eax
c00196bf:	e8 d3 ce fe ff       	call   c0006597 <iso_close>
c00196c4:	83 c4 10             	add    esp,0x10
c00196c7:	31 c0                	xor    eax,eax
c00196c9:	83 c4 0c             	add    esp,0xc
c00196cc:	c3                   	ret    
c00196cd:	90                   	nop

c00196ce <ISO9660::openDir(char const*, void**)>:
c00196ce:	56                   	push   esi
c00196cf:	53                   	push   ebx
c00196d0:	50                   	push   eax
c00196d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00196d5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00196d9:	85 db                	test   ebx,ebx
c00196db:	0f 84 bd 00 00 00    	je     c001979e <ISO9660::openDir(char const*, void**)+0xd0>
c00196e1:	85 f6                	test   esi,esi
c00196e3:	0f 84 b5 00 00 00    	je     c001979e <ISO9660::openDir(char const*, void**)+0xd0>
c00196e9:	8a 13                	mov    dl,BYTE PTR [ebx]
c00196eb:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c00196f2:	38 15 20 83 02 c0    	cmp    BYTE PTR ds:0xc0028320,dl
c00196f8:	74 1b                	je     c0019715 <ISO9660::openDir(char const*, void**)+0x47>
c00196fa:	85 c0                	test   eax,eax
c00196fc:	74 10                	je     c001970e <ISO9660::openDir(char const*, void**)+0x40>
c00196fe:	83 ec 0c             	sub    esp,0xc
c0019701:	68 65 16 02 c0       	push   0xc0021665
c0019706:	e8 54 71 ff ff       	call   c001085f <KePanic(char const*)>
c001970b:	83 c4 10             	add    esp,0x10
c001970e:	8a 03                	mov    al,BYTE PTR [ebx]
c0019710:	a2 20 83 02 c0       	mov    ds:0xc0028320,al
c0019715:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019718:	8b 04 85 1c 73 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8ce4]
c001971f:	85 c0                	test   eax,eax
c0019721:	74 10                	je     c0019733 <ISO9660::openDir(char const*, void**)+0x65>
c0019723:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001972a:	74 1a                	je     c0019746 <ISO9660::openDir(char const*, void**)+0x78>
c001972c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019733:	83 ec 0c             	sub    esp,0xc
c0019736:	0f be 05 20 83 02 c0 	movsx  eax,BYTE PTR ds:0xc0028320
c001973d:	50                   	push   eax
c001973e:	e8 03 d3 fe ff       	call   c0006a46 <init_percd>
c0019743:	83 c4 10             	add    esp,0x10
c0019746:	83 c3 03             	add    ebx,0x3
c0019749:	50                   	push   eax
c001974a:	50                   	push   eax
c001974b:	6a 01                	push   0x1
c001974d:	53                   	push   ebx
c001974e:	e8 ba cd fe ff       	call   c000650d <iso_open>
c0019753:	83 c4 10             	add    esp,0x10
c0019756:	89 c3                	mov    ebx,eax
c0019758:	83 f8 ff             	cmp    eax,0xffffffff
c001975b:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c0019760:	75 1c                	jne    c001977e <ISO9660::openDir(char const*, void**)+0xb0>
c0019762:	53                   	push   ebx
c0019763:	53                   	push   ebx
c0019764:	68 0d 17 02 c0       	push   0xc002170d
c0019769:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001976f:	e8 08 f3 fe ff       	call   c0008a7c <VgaText::puts(char const*)>
c0019774:	83 c4 10             	add    esp,0x10
c0019777:	b8 01 00 00 00       	mov    eax,0x1
c001977c:	eb 25                	jmp    c00197a3 <ISO9660::openDir(char const*, void**)+0xd5>
c001977e:	01 db                	add    ebx,ebx
c0019780:	51                   	push   ecx
c0019781:	83 c3 65             	add    ebx,0x65
c0019784:	51                   	push   ecx
c0019785:	68 20 17 02 c0       	push   0xc0021720
c001978a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019790:	e8 e7 f2 fe ff       	call   c0008a7c <VgaText::puts(char const*)>
c0019795:	89 1e                	mov    DWORD PTR [esi],ebx
c0019797:	83 c4 10             	add    esp,0x10
c001979a:	31 c0                	xor    eax,eax
c001979c:	eb 05                	jmp    c00197a3 <ISO9660::openDir(char const*, void**)+0xd5>
c001979e:	b8 04 00 00 00       	mov    eax,0x4
c00197a3:	5a                   	pop    edx
c00197a4:	5b                   	pop    ebx
c00197a5:	5e                   	pop    esi
c00197a6:	c3                   	ret    
c00197a7:	90                   	nop

c00197a8 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00197a8:	55                   	push   ebp
c00197a9:	57                   	push   edi
c00197aa:	56                   	push   esi
c00197ab:	53                   	push   ebx
c00197ac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00197b2:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00197b9:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00197c0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00197c8:	0f 84 e7 00 00 00    	je     c00198b5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c00197ce:	85 db                	test   ebx,ebx
c00197d0:	0f 84 df 00 00 00    	je     c00198b5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c00197d6:	83 ec 0c             	sub    esp,0xc
c00197d9:	68 33 17 02 c0       	push   0xc0021733
c00197de:	e8 9f 11 ff ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c00197e3:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00197ea:	b9 02 00 00 00       	mov    ecx,0x2
c00197ef:	99                   	cdq    
c00197f0:	f7 f9                	idiv   ecx
c00197f2:	83 e8 32             	sub    eax,0x32
c00197f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00197f8:	e8 d5 cf fe ff       	call   c00067d2 <iso_readdir>
c00197fd:	83 c4 10             	add    esp,0x10
c0019800:	89 c6                	mov    esi,eax
c0019802:	85 c0                	test   eax,eax
c0019804:	75 37                	jne    c001983d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c0019806:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001980b:	56                   	push   esi
c001980c:	56                   	push   esi
c001980d:	68 3e 17 02 c0       	push   0xc002173e
c0019812:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0019818:	e8 5f f2 fe ff       	call   c0008a7c <VgaText::puts(char const*)>
c001981d:	83 c4 0c             	add    esp,0xc
c0019820:	68 10 01 00 00       	push   0x110
c0019825:	6a 00                	push   0x0
c0019827:	57                   	push   edi
c0019828:	e8 c3 6c fe ff       	call   c00004f0 <memset>
c001982d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019833:	83 c4 10             	add    esp,0x10
c0019836:	b8 01 00 00 00       	mov    eax,0x1
c001983b:	eb 7d                	jmp    c00198ba <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001983d:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0019843:	8d 68 08             	lea    ebp,[eax+0x8]
c0019846:	83 ec 0c             	sub    esp,0xc
c0019849:	55                   	push   ebp
c001984a:	e8 21 6d fe ff       	call   c0000570 <strlen>
c001984f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019857:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001985b:	83 c4 10             	add    esp,0x10
c001985e:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0019862:	75 0a                	jne    c001986e <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0019864:	b8 02 00 00 00       	mov    eax,0x2
c0019869:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001986c:	74 05                	je     c0019873 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001986e:	b8 01 00 00 00       	mov    eax,0x1
c0019873:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019877:	50                   	push   eax
c0019878:	50                   	push   eax
c0019879:	55                   	push   ebp
c001987a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001987e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0019882:	50                   	push   eax
c0019883:	e8 b8 6d fe ff       	call   c0000640 <strcpy>
c0019888:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001988f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019891:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0019897:	5a                   	pop    edx
c0019898:	a1 90 81 02 c0       	mov    eax,ds:0xc0028190
c001989d:	59                   	pop    ecx
c001989e:	68 51 17 02 c0       	push   0xc0021751
c00198a3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00198a9:	e8 ce f1 fe ff       	call   c0008a7c <VgaText::puts(char const*)>
c00198ae:	83 c4 10             	add    esp,0x10
c00198b1:	31 c0                	xor    eax,eax
c00198b3:	eb 05                	jmp    c00198ba <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c00198b5:	b8 04 00 00 00       	mov    eax,0x4
c00198ba:	81 c4 1c 01 00 00    	add    esp,0x11c
c00198c0:	5b                   	pop    ebx
c00198c1:	5e                   	pop    esi
c00198c2:	5f                   	pop    edi
c00198c3:	5d                   	pop    ebp
c00198c4:	c3                   	ret    

c00198c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00198c5:	57                   	push   edi
c00198c6:	56                   	push   esi
c00198c7:	53                   	push   ebx
c00198c8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00198cc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00198d0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00198d4:	39 35 24 83 02 c0    	cmp    DWORD PTR ds:0xc0028324,esi
c00198da:	0f be cb             	movsx  ecx,bl
c00198dd:	75 0b                	jne    c00198ea <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c00198df:	0f be 05 a4 22 02 c0 	movsx  eax,BYTE PTR ds:0xc00222a4
c00198e6:	39 c8                	cmp    eax,ecx
c00198e8:	74 47                	je     c0019931 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00198ea:	83 ec 0c             	sub    esp,0xc
c00198ed:	31 d2                	xor    edx,edx
c00198ef:	68 40 83 02 c0       	push   0xc0028340
c00198f4:	6a 01                	push   0x1
c00198f6:	52                   	push   edx
c00198f7:	56                   	push   esi
c00198f8:	ff 34 8d 1c 73 02 c0 	push   DWORD PTR [ecx*4-0x3ffd8ce4]
c00198ff:	e8 94 38 ff ff       	call   c000d198 <LogicalDisk::read(unsigned long long, int, void*)>
c0019904:	83 c4 20             	add    esp,0x20
c0019907:	85 c0                	test   eax,eax
c0019909:	75 0e                	jne    c0019919 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001990b:	89 35 24 83 02 c0    	mov    DWORD PTR ds:0xc0028324,esi
c0019911:	88 1d a4 22 02 c0    	mov    BYTE PTR ds:0xc00222a4,bl
c0019917:	eb 18                	jmp    c0019931 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c0019919:	50                   	push   eax
c001991a:	68 00 08 00 00       	push   0x800
c001991f:	6a 00                	push   0x0
c0019921:	57                   	push   edi
c0019922:	e8 c9 6b fe ff       	call   c00004f0 <memset>
c0019927:	83 c4 10             	add    esp,0x10
c001992a:	b8 01 00 00 00       	mov    eax,0x1
c001992f:	eb 0e                	jmp    c001993f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c0019931:	be 40 83 02 c0       	mov    esi,0xc0028340
c0019936:	b9 00 08 00 00       	mov    ecx,0x800
c001993b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001993d:	31 c0                	xor    eax,eax
c001993f:	5b                   	pop    ebx
c0019940:	5e                   	pop    esi
c0019941:	5f                   	pop    edi
c0019942:	c3                   	ret    
c0019943:	90                   	nop

c0019944 <ISO9660::tryMount(LogicalDisk*, int)>:
c0019944:	53                   	push   ebx
c0019945:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001994b:	c7 05 24 83 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0028324,0xdeadbeef
c0019955:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001995c:	8d 58 41             	lea    ebx,[eax+0x41]
c001995f:	0f be db             	movsx  ebx,bl
c0019962:	53                   	push   ebx
c0019963:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019967:	50                   	push   eax
c0019968:	6a 10                	push   0x10
c001996a:	e8 56 ff ff ff       	call   c00198c5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001996f:	83 c4 10             	add    esp,0x10
c0019972:	31 d2                	xor    edx,edx
c0019974:	85 c0                	test   eax,eax
c0019976:	75 33                	jne    c00199ab <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019978:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001997d:	75 2c                	jne    c00199ab <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001997f:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019984:	75 25                	jne    c00199ab <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019986:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001998b:	75 1e                	jne    c00199ab <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001998d:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019992:	75 17                	jne    c00199ab <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0019994:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019999:	75 10                	jne    c00199ab <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001999b:	83 ec 0c             	sub    esp,0xc
c001999e:	53                   	push   ebx
c001999f:	e8 a2 d0 fe ff       	call   c0006a46 <init_percd>
c00199a4:	83 c4 10             	add    esp,0x10
c00199a7:	40                   	inc    eax
c00199a8:	0f 95 c2             	setne  dl
c00199ab:	88 d0                	mov    al,dl
c00199ad:	81 c4 08 08 00 00    	add    esp,0x808
c00199b3:	5b                   	pop    ebx
c00199b4:	c3                   	ret    
c00199b5:	90                   	nop

c00199b6 <ISO9660::ISO9660()>:
c00199b6:	83 ec 0c             	sub    esp,0xc
c00199b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199bd:	83 ec 0c             	sub    esp,0xc
c00199c0:	50                   	push   eax
c00199c1:	e8 de 12 ff ff       	call   c000aca4 <Filesystem::Filesystem()>
c00199c6:	83 c4 10             	add    esp,0x10
c00199c9:	ba 6c 17 02 c0       	mov    edx,0xc002176c
c00199ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199d2:	89 10                	mov    DWORD PTR [eax],edx
c00199d4:	e8 7f d1 fe ff       	call   c0006b58 <fs_iso9660_init>
c00199d9:	90                   	nop
c00199da:	83 c4 0c             	add    esp,0xc
c00199dd:	c3                   	ret    

c00199de <SoundCard::beginPlayback()>:
c00199de:	c7 44 24 04 cc 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc00217cc
c00199e6:	e9 74 6e ff ff       	jmp    c001085f <KePanic(char const*)>
c00199eb:	90                   	nop

c00199ec <SoundCard::stopPlayback()>:
c00199ec:	c7 44 24 04 cc 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc00217cc
c00199f4:	e9 66 6e ff ff       	jmp    c001085f <KePanic(char const*)>
c00199f9:	90                   	nop

c00199fa <SoundCard::SoundCard(char const*)>:
c00199fa:	83 ec 1c             	sub    esp,0x1c
c00199fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a01:	83 ec 08             	sub    esp,0x8
c0019a04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019a08:	50                   	push   eax
c0019a09:	e8 40 25 ff ff       	call   c000bf4e <Device::Device(char const*)>
c0019a0e:	83 c4 10             	add    esp,0x10
c0019a11:	ba 18 18 02 c0       	mov    edx,0xc0021818
c0019a16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a1a:	89 10                	mov    DWORD PTR [eax],edx
c0019a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a20:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019a27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a2b:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0019a35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a39:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0019a43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a47:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0019a51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a55:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019a5f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019a67:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019a6c:	7f 1a                	jg     c0019a88 <SoundCard::SoundCard(char const*)+0x8e>
c0019a6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019a76:	83 c2 54             	add    edx,0x54
c0019a79:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0019a81:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019a86:	eb df                	jmp    c0019a67 <SoundCard::SoundCard(char const*)+0x6d>
c0019a88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a8c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019a93:	90                   	nop
c0019a94:	83 c4 1c             	add    esp,0x1c
c0019a97:	c3                   	ret    

c0019a98 <SoundCard::~SoundCard()>:
c0019a98:	83 ec 0c             	sub    esp,0xc
c0019a9b:	ba 18 18 02 c0       	mov    edx,0xc0021818
c0019aa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019aa4:	89 10                	mov    DWORD PTR [eax],edx
c0019aa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019aaa:	83 ec 0c             	sub    esp,0xc
c0019aad:	50                   	push   eax
c0019aae:	e8 05 22 ff ff       	call   c000bcb8 <Device::~Device()>
c0019ab3:	83 c4 10             	add    esp,0x10
c0019ab6:	90                   	nop
c0019ab7:	83 c4 0c             	add    esp,0xc
c0019aba:	c3                   	ret    
c0019abb:	90                   	nop

c0019abc <SoundCard::~SoundCard()>:
c0019abc:	83 ec 0c             	sub    esp,0xc
c0019abf:	83 ec 0c             	sub    esp,0xc
c0019ac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ac6:	e8 cd ff ff ff       	call   c0019a98 <SoundCard::~SoundCard()>
c0019acb:	83 c4 10             	add    esp,0x10
c0019ace:	83 ec 08             	sub    esp,0x8
c0019ad1:	68 e8 01 00 00       	push   0x1e8
c0019ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ada:	e8 76 0d ff ff       	call   c000a855 <operator delete(void*, unsigned long)>
c0019adf:	83 c4 10             	add    esp,0x10
c0019ae2:	83 c4 0c             	add    esp,0xc
c0019ae5:	c3                   	ret    

c0019ae6 <SoundCard::configureRates(int, int, int)>:
c0019ae6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019aea:	31 c0                	xor    eax,eax
c0019aec:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0019af3:	75 20                	jne    c0019b15 <SoundCard::configureRates(int, int, int)+0x2f>
c0019af5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019af9:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0019aff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019b03:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0019b09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b0d:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0019b13:	b0 01                	mov    al,0x1
c0019b15:	c3                   	ret    

c0019b16 <SoundCard::getSamples16(int, short*)>:
c0019b16:	55                   	push   ebp
c0019b17:	57                   	push   edi
c0019b18:	31 ff                	xor    edi,edi
c0019b1a:	56                   	push   esi
c0019b1b:	53                   	push   ebx
c0019b1c:	31 db                	xor    ebx,ebx
c0019b1e:	83 ec 10             	sub    esp,0x10
c0019b21:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0019b25:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019b29:	8d 04 36             	lea    eax,[esi+esi*1]
c0019b2c:	50                   	push   eax
c0019b2d:	6a 00                	push   0x0
c0019b2f:	55                   	push   ebp
c0019b30:	e8 bb 69 fe ff       	call   c00004f0 <memset>
c0019b35:	83 c4 10             	add    esp,0x10
c0019b38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019b3c:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0019b43:	85 c0                	test   eax,eax
c0019b45:	74 1b                	je     c0019b62 <SoundCard::getSamples16(int, short*)+0x4c>
c0019b47:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019b4b:	75 15                	jne    c0019b62 <SoundCard::getSamples16(int, short*)+0x4c>
c0019b4d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019b51:	55                   	push   ebp
c0019b52:	56                   	push   esi
c0019b53:	50                   	push   eax
c0019b54:	e8 f3 02 00 00       	call   c0019e4c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019b59:	83 c4 10             	add    esp,0x10
c0019b5c:	39 c7                	cmp    edi,eax
c0019b5e:	7d 02                	jge    c0019b62 <SoundCard::getSamples16(int, short*)+0x4c>
c0019b60:	89 c7                	mov    edi,eax
c0019b62:	43                   	inc    ebx
c0019b63:	83 fb 20             	cmp    ebx,0x20
c0019b66:	75 d0                	jne    c0019b38 <SoundCard::getSamples16(int, short*)+0x22>
c0019b68:	83 c4 0c             	add    esp,0xc
c0019b6b:	89 f8                	mov    eax,edi
c0019b6d:	5b                   	pop    ebx
c0019b6e:	5e                   	pop    esi
c0019b6f:	5f                   	pop    edi
c0019b70:	5d                   	pop    ebp
c0019b71:	c3                   	ret    

c0019b72 <SoundCard::getSamples32(int, int*)>:
c0019b72:	55                   	push   ebp
c0019b73:	57                   	push   edi
c0019b74:	31 ff                	xor    edi,edi
c0019b76:	56                   	push   esi
c0019b77:	31 f6                	xor    esi,esi
c0019b79:	53                   	push   ebx
c0019b7a:	83 ec 10             	sub    esp,0x10
c0019b7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019b81:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0019b85:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019b89:	c1 e0 02             	shl    eax,0x2
c0019b8c:	50                   	push   eax
c0019b8d:	6a 00                	push   0x0
c0019b8f:	55                   	push   ebp
c0019b90:	e8 5b 69 fe ff       	call   c00004f0 <memset>
c0019b95:	83 c4 10             	add    esp,0x10
c0019b98:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019b9f:	85 c0                	test   eax,eax
c0019ba1:	74 1b                	je     c0019bbe <SoundCard::getSamples32(int, int*)+0x4c>
c0019ba3:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019ba7:	75 15                	jne    c0019bbe <SoundCard::getSamples32(int, int*)+0x4c>
c0019ba9:	53                   	push   ebx
c0019baa:	55                   	push   ebp
c0019bab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019baf:	50                   	push   eax
c0019bb0:	e8 63 03 00 00       	call   c0019f18 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0019bb5:	83 c4 10             	add    esp,0x10
c0019bb8:	39 c6                	cmp    esi,eax
c0019bba:	7d 02                	jge    c0019bbe <SoundCard::getSamples32(int, int*)+0x4c>
c0019bbc:	89 c6                	mov    esi,eax
c0019bbe:	47                   	inc    edi
c0019bbf:	83 ff 20             	cmp    edi,0x20
c0019bc2:	75 d4                	jne    c0019b98 <SoundCard::getSamples32(int, int*)+0x26>
c0019bc4:	85 f6                	test   esi,esi
c0019bc6:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0019bcd:	75 0f                	jne    c0019bde <SoundCard::getSamples32(int, int*)+0x6c>
c0019bcf:	85 c0                	test   eax,eax
c0019bd1:	74 1b                	je     c0019bee <SoundCard::getSamples32(int, int*)+0x7c>
c0019bd3:	83 ec 0c             	sub    esp,0xc
c0019bd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019bd8:	53                   	push   ebx
c0019bd9:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0019bdc:	eb 0d                	jmp    c0019beb <SoundCard::getSamples32(int, int*)+0x79>
c0019bde:	85 c0                	test   eax,eax
c0019be0:	75 0c                	jne    c0019bee <SoundCard::getSamples32(int, int*)+0x7c>
c0019be2:	83 ec 0c             	sub    esp,0xc
c0019be5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019be7:	53                   	push   ebx
c0019be8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0019beb:	83 c4 10             	add    esp,0x10
c0019bee:	83 c4 0c             	add    esp,0xc
c0019bf1:	89 f0                	mov    eax,esi
c0019bf3:	5b                   	pop    ebx
c0019bf4:	5e                   	pop    esi
c0019bf5:	5f                   	pop    edi
c0019bf6:	5d                   	pop    ebp
c0019bf7:	c3                   	ret    

c0019bf8 <SoundCard::addChannel(SoundPort*)>:
c0019bf8:	83 ec 0c             	sub    esp,0xc
c0019bfb:	31 c0                	xor    eax,eax
c0019bfd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c01:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0019c09:	74 1b                	je     c0019c26 <SoundCard::addChannel(SoundPort*)+0x2e>
c0019c0b:	40                   	inc    eax
c0019c0c:	83 f8 20             	cmp    eax,0x20
c0019c0f:	75 f0                	jne    c0019c01 <SoundCard::addChannel(SoundPort*)+0x9>
c0019c11:	83 ec 0c             	sub    esp,0xc
c0019c14:	68 f1 17 02 c0       	push   0xc00217f1
c0019c19:	e8 41 6c ff ff       	call   c001085f <KePanic(char const*)>
c0019c1e:	83 c4 10             	add    esp,0x10
c0019c21:	83 c8 ff             	or     eax,0xffffffff
c0019c24:	eb 0b                	jmp    c0019c31 <SoundCard::addChannel(SoundPort*)+0x39>
c0019c26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019c2a:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0019c31:	83 c4 0c             	add    esp,0xc
c0019c34:	c3                   	ret    
c0019c35:	90                   	nop

c0019c36 <SoundCard::removeChannel(int)>:
c0019c36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019c3e:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019c49:	c3                   	ret    
c0019c4a:	66 90                	xchg   ax,ax

c0019c4c <SoundPort::SoundPort(int, int, int, int)>:
c0019c4c:	83 ec 0c             	sub    esp,0xc
c0019c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c53:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c5e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c66:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019c6a:	89 10                	mov    DWORD PTR [eax],edx
c0019c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c70:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019c74:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0019c77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c7b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c7f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019c82:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0019c87:	75 13                	jne    c0019c9c <SoundPort::SoundPort(int, int, int, int)+0x50>
c0019c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0019c8f:	05 a0 0f 00 00       	add    eax,0xfa0
c0019c94:	01 c0                	add    eax,eax
c0019c96:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019c9a:	66 90                	xchg   ax,ax
c0019c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ca0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019ca4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0019ca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cab:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0019cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cb6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019cb9:	c1 e0 02             	shl    eax,0x2
c0019cbc:	83 ec 0c             	sub    esp,0xc
c0019cbf:	50                   	push   eax
c0019cc0:	e8 d5 dd fe ff       	call   c0007a9a <malloc>
c0019cc5:	83 c4 10             	add    esp,0x10
c0019cc8:	89 c2                	mov    edx,eax
c0019cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cce:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0019cd1:	90                   	nop
c0019cd2:	83 c4 0c             	add    esp,0xc
c0019cd5:	c3                   	ret    
c0019cd6:	66 90                	xchg   ax,ax

c0019cd8 <SoundPort::~SoundPort()>:
c0019cd8:	83 ec 0c             	sub    esp,0xc
c0019cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cdf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019ce2:	85 c0                	test   eax,eax
c0019ce4:	74 1e                	je     c0019d04 <SoundPort::~SoundPort()+0x2c>
c0019ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019ced:	83 ec 0c             	sub    esp,0xc
c0019cf0:	50                   	push   eax
c0019cf1:	e8 b4 dd fe ff       	call   c0007aaa <free>
c0019cf6:	83 c4 10             	add    esp,0x10
c0019cf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cfd:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019d04:	90                   	nop
c0019d05:	83 c4 0c             	add    esp,0xc
c0019d08:	c3                   	ret    
c0019d09:	90                   	nop
c0019d0a:	66 90                	xchg   ax,ax

c0019d0c <SoundPort::unpause()>:
c0019d0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d10:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0019d14:	c3                   	ret    
c0019d15:	90                   	nop
c0019d16:	66 90                	xchg   ax,ax

c0019d18 <SoundPort::pause()>:
c0019d18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d1c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019d20:	c3                   	ret    
c0019d21:	90                   	nop
c0019d22:	66 90                	xchg   ax,ax

c0019d24 <SoundPort::getBufferUsed()>:
c0019d24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d28:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019d2b:	c3                   	ret    

c0019d2c <SoundPort::getBufferSize()>:
c0019d2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d30:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019d33:	c3                   	ret    

c0019d34 <SoundPort::buffer16(short*, int)>:
c0019d34:	55                   	push   ebp
c0019d35:	57                   	push   edi
c0019d36:	56                   	push   esi
c0019d37:	53                   	push   ebx
c0019d38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d3c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019d40:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0019d43:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0019d46:	74 68                	je     c0019db0 <SoundPort::buffer16(short*, int)+0x7c>
c0019d48:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019d4c:	85 c9                	test   ecx,ecx
c0019d4e:	7e 60                	jle    c0019db0 <SoundPort::buffer16(short*, int)+0x7c>
c0019d50:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0019d54:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019d57:	c1 e1 0f             	shl    ecx,0xf
c0019d5a:	8d 70 01             	lea    esi,[eax+0x1]
c0019d5d:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019d60:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0019d63:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d66:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019d69:	74 4d                	je     c0019db8 <SoundPort::buffer16(short*, int)+0x84>
c0019d6b:	31 f6                	xor    esi,esi
c0019d6d:	eb 21                	jmp    c0019d90 <SoundPort::buffer16(short*, int)+0x5c>
c0019d6f:	90                   	nop
c0019d70:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0019d75:	8d 79 01             	lea    edi,[ecx+0x1]
c0019d78:	c1 e3 0f             	shl    ebx,0xf
c0019d7b:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019d7e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019d81:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0019d84:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d87:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019d8a:	74 1c                	je     c0019da8 <SoundPort::buffer16(short*, int)+0x74>
c0019d8c:	89 c6                	mov    esi,eax
c0019d8e:	66 90                	xchg   ax,ax
c0019d90:	8d 46 01             	lea    eax,[esi+0x1]
c0019d93:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0019d97:	75 d7                	jne    c0019d70 <SoundPort::buffer16(short*, int)+0x3c>
c0019d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0019da0:	5b                   	pop    ebx
c0019da1:	5e                   	pop    esi
c0019da2:	5f                   	pop    edi
c0019da3:	5d                   	pop    ebp
c0019da4:	c3                   	ret    
c0019da5:	8d 76 00             	lea    esi,[esi+0x0]
c0019da8:	5b                   	pop    ebx
c0019da9:	8d 46 02             	lea    eax,[esi+0x2]
c0019dac:	5e                   	pop    esi
c0019dad:	5f                   	pop    edi
c0019dae:	5d                   	pop    ebp
c0019daf:	c3                   	ret    
c0019db0:	5b                   	pop    ebx
c0019db1:	31 c0                	xor    eax,eax
c0019db3:	5e                   	pop    esi
c0019db4:	5f                   	pop    edi
c0019db5:	5d                   	pop    ebp
c0019db6:	c3                   	ret    
c0019db7:	90                   	nop
c0019db8:	b8 01 00 00 00       	mov    eax,0x1
c0019dbd:	eb e1                	jmp    c0019da0 <SoundPort::buffer16(short*, int)+0x6c>
c0019dbf:	90                   	nop

c0019dc0 <SoundPort::buffer32(int*, int)>:
c0019dc0:	55                   	push   ebp
c0019dc1:	57                   	push   edi
c0019dc2:	56                   	push   esi
c0019dc3:	53                   	push   ebx
c0019dc4:	83 ec 04             	sub    esp,0x4
c0019dc7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019dcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019dcf:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019dd2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019dd6:	89 04 24             	mov    DWORD PTR [esp],eax
c0019dd9:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019ddc:	74 5a                	je     c0019e38 <SoundPort::buffer32(int*, int)+0x78>
c0019dde:	85 c0                	test   eax,eax
c0019de0:	7e 56                	jle    c0019e38 <SoundPort::buffer32(int*, int)+0x78>
c0019de2:	8d 71 01             	lea    esi,[ecx+0x1]
c0019de5:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0019de8:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019deb:	8b 37                	mov    esi,DWORD PTR [edi]
c0019ded:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0019df0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019df3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019df6:	74 4c                	je     c0019e44 <SoundPort::buffer32(int*, int)+0x84>
c0019df8:	31 f6                	xor    esi,esi
c0019dfa:	eb 1c                	jmp    c0019e18 <SoundPort::buffer32(int*, int)+0x58>
c0019dfc:	8d 69 01             	lea    ebp,[ecx+0x1]
c0019dff:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0019e02:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0019e05:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0019e08:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0019e0c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019e0f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019e12:	74 18                	je     c0019e2c <SoundPort::buffer32(int*, int)+0x6c>
c0019e14:	89 de                	mov    esi,ebx
c0019e16:	66 90                	xchg   ax,ax
c0019e18:	8d 5e 01             	lea    ebx,[esi+0x1]
c0019e1b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019e1e:	75 dc                	jne    c0019dfc <SoundPort::buffer32(int*, int)+0x3c>
c0019e20:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019e23:	90                   	nop
c0019e24:	83 c4 04             	add    esp,0x4
c0019e27:	5b                   	pop    ebx
c0019e28:	5e                   	pop    esi
c0019e29:	5f                   	pop    edi
c0019e2a:	5d                   	pop    ebp
c0019e2b:	c3                   	ret    
c0019e2c:	83 c4 04             	add    esp,0x4
c0019e2f:	8d 46 02             	lea    eax,[esi+0x2]
c0019e32:	5b                   	pop    ebx
c0019e33:	5e                   	pop    esi
c0019e34:	5f                   	pop    edi
c0019e35:	5d                   	pop    ebp
c0019e36:	c3                   	ret    
c0019e37:	90                   	nop
c0019e38:	83 c4 04             	add    esp,0x4
c0019e3b:	31 c0                	xor    eax,eax
c0019e3d:	5b                   	pop    ebx
c0019e3e:	5e                   	pop    esi
c0019e3f:	5f                   	pop    edi
c0019e40:	5d                   	pop    ebp
c0019e41:	c3                   	ret    
c0019e42:	66 90                	xchg   ax,ax
c0019e44:	b8 01 00 00 00       	mov    eax,0x1
c0019e49:	eb d9                	jmp    c0019e24 <SoundPort::buffer32(int*, int)+0x64>
c0019e4b:	90                   	nop

c0019e4c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019e4c:	57                   	push   edi
c0019e4d:	56                   	push   esi
c0019e4e:	53                   	push   ebx
c0019e4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e53:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0019e57:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0019e5d:	39 03                	cmp    DWORD PTR [ebx],eax
c0019e5f:	74 13                	je     c0019e74 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0019e61:	83 ec 0c             	sub    esp,0xc
c0019e64:	68 44 18 02 c0       	push   0xc0021844
c0019e69:	e8 f1 69 ff ff       	call   c001085f <KePanic(char const*)>
c0019e6e:	83 c4 10             	add    esp,0x10
c0019e71:	8d 76 00             	lea    esi,[esi+0x0]
c0019e74:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0019e7a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019e7d:	74 11                	je     c0019e90 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0019e7f:	83 ec 0c             	sub    esp,0xc
c0019e82:	68 83 18 02 c0       	push   0xc0021883
c0019e87:	e8 d3 69 ff ff       	call   c001085f <KePanic(char const*)>
c0019e8c:	83 c4 10             	add    esp,0x10
c0019e8f:	90                   	nop
c0019e90:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0019e96:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0019e99:	74 11                	je     c0019eac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0019e9b:	83 ec 0c             	sub    esp,0xc
c0019e9e:	68 83 18 02 c0       	push   0xc0021883
c0019ea3:	e8 b7 69 ff ff       	call   c001085f <KePanic(char const*)>
c0019ea8:	83 c4 10             	add    esp,0x10
c0019eab:	90                   	nop
c0019eac:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019eaf:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0019eb3:	7e 07                	jle    c0019ebc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0019eb5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0019ebc:	85 f6                	test   esi,esi
c0019ebe:	7e 2c                	jle    c0019eec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0019ec0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019ec4:	8d 3c 36             	lea    edi,[esi+esi*1]
c0019ec7:	31 c9                	xor    ecx,ecx
c0019ec9:	01 d7                	add    edi,edx
c0019ecb:	90                   	nop
c0019ecc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0019ecf:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0019ed2:	85 c0                	test   eax,eax
c0019ed4:	79 06                	jns    c0019edc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0019ed6:	05 ff 7f 00 00       	add    eax,0x7fff
c0019edb:	90                   	nop
c0019edc:	c1 f8 0f             	sar    eax,0xf
c0019edf:	83 c1 04             	add    ecx,0x4
c0019ee2:	66 01 02             	add    WORD PTR [edx],ax
c0019ee5:	83 c2 02             	add    edx,0x2
c0019ee8:	39 d7                	cmp    edi,edx
c0019eea:	75 e0                	jne    c0019ecc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0019eec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0019eef:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019ef2:	83 ec 04             	sub    esp,0x4
c0019ef5:	29 f0                	sub    eax,esi
c0019ef7:	c1 e0 02             	shl    eax,0x2
c0019efa:	50                   	push   eax
c0019efb:	8d 04 b2             	lea    eax,[edx+esi*4]
c0019efe:	50                   	push   eax
c0019eff:	52                   	push   edx
c0019f00:	e8 cb 64 fe ff       	call   c00003d0 <memmove>
c0019f05:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019f08:	83 c4 10             	add    esp,0x10
c0019f0b:	29 f0                	sub    eax,esi
c0019f0d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019f10:	89 f0                	mov    eax,esi
c0019f12:	5b                   	pop    ebx
c0019f13:	5e                   	pop    esi
c0019f14:	5f                   	pop    edi
c0019f15:	c3                   	ret    
c0019f16:	66 90                	xchg   ax,ax

c0019f18 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0019f18:	57                   	push   edi
c0019f19:	56                   	push   esi
c0019f1a:	53                   	push   ebx
c0019f1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019f23:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019f27:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0019f2d:	39 06                	cmp    DWORD PTR [esi],eax
c0019f2f:	74 13                	je     c0019f44 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0019f31:	83 ec 0c             	sub    esp,0xc
c0019f34:	68 64 18 02 c0       	push   0xc0021864
c0019f39:	e8 21 69 ff ff       	call   c001085f <KePanic(char const*)>
c0019f3e:	83 c4 10             	add    esp,0x10
c0019f41:	8d 76 00             	lea    esi,[esi+0x0]
c0019f44:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0019f4a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0019f4d:	74 11                	je     c0019f60 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0019f4f:	83 ec 0c             	sub    esp,0xc
c0019f52:	68 9f 18 02 c0       	push   0xc002189f
c0019f57:	e8 03 69 ff ff       	call   c001085f <KePanic(char const*)>
c0019f5c:	83 c4 10             	add    esp,0x10
c0019f5f:	90                   	nop
c0019f60:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0019f66:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0019f69:	74 11                	je     c0019f7c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0019f6b:	83 ec 0c             	sub    esp,0xc
c0019f6e:	68 9f 18 02 c0       	push   0xc002189f
c0019f73:	e8 e7 68 ff ff       	call   c001085f <KePanic(char const*)>
c0019f78:	83 c4 10             	add    esp,0x10
c0019f7b:	90                   	nop
c0019f7c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019f7f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0019f83:	7e 07                	jle    c0019f8c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0019f85:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019f89:	8d 76 00             	lea    esi,[esi+0x0]
c0019f8c:	85 ff                	test   edi,edi
c0019f8e:	7e 1c                	jle    c0019fac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0019f90:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0019f97:	31 c0                	xor    eax,eax
c0019f99:	8d 76 00             	lea    esi,[esi+0x0]
c0019f9c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0019f9f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0019fa2:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0019fa5:	83 c0 04             	add    eax,0x4
c0019fa8:	39 c1                	cmp    ecx,eax
c0019faa:	75 f0                	jne    c0019f9c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0019fac:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0019faf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019fb2:	83 ec 04             	sub    esp,0x4
c0019fb5:	29 f8                	sub    eax,edi
c0019fb7:	c1 e0 02             	shl    eax,0x2
c0019fba:	50                   	push   eax
c0019fbb:	8d 04 ba             	lea    eax,[edx+edi*4]
c0019fbe:	50                   	push   eax
c0019fbf:	52                   	push   edx
c0019fc0:	e8 0b 64 fe ff       	call   c00003d0 <memmove>
c0019fc5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019fc8:	83 c4 10             	add    esp,0x10
c0019fcb:	29 f8                	sub    eax,edi
c0019fcd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0019fd0:	89 f8                	mov    eax,edi
c0019fd2:	5b                   	pop    ebx
c0019fd3:	5e                   	pop    esi
c0019fd4:	5f                   	pop    edi
c0019fd5:	c3                   	ret    

c0019fd6 <PCI::open(int, int, void*)>:
c0019fd6:	83 ec 18             	sub    esp,0x18
c0019fd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019fdd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019fe1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019fe7:	8b 10                	mov    edx,DWORD PTR [eax]
c0019fe9:	50                   	push   eax
c0019fea:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0019fed:	31 c0                	xor    eax,eax
c0019fef:	83 c4 1c             	add    esp,0x1c
c0019ff2:	c3                   	ret    
c0019ff3:	90                   	nop

c0019ff4 <PCI::close(int, int, void*)>:
c0019ff4:	31 c0                	xor    eax,eax
c0019ff6:	c3                   	ret    
c0019ff7:	90                   	nop

c0019ff8 <PCI::PCI()>:
c0019ff8:	83 ec 0c             	sub    esp,0xc
c0019ffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fff:	83 ec 08             	sub    esp,0x8
c001a002:	68 bb 18 02 c0       	push   0xc00218bb
c001a007:	50                   	push   eax
c001a008:	e8 0b 17 ff ff       	call   c000b718 <Bus::Bus(char const*)>
c001a00d:	83 c4 10             	add    esp,0x10
c001a010:	ba 64 19 02 c0       	mov    edx,0xc0021964
c001a015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a019:	89 10                	mov    DWORD PTR [eax],edx
c001a01b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a01f:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001a029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a02d:	a3 40 8b 02 c0       	mov    ds:0xc0028b40,eax
c001a032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a036:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a03c:	0f b6 d0             	movzx  edx,al
c001a03f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a043:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001a04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a04e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a054:	0f b6 d0             	movzx  edx,al
c001a057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a05b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001a060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a064:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001a06a:	8d 50 01             	lea    edx,[eax+0x1]
c001a06d:	88 d1                	mov    cl,dl
c001a06f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a073:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001a079:	0f b6 d0             	movzx  edx,al
c001a07c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a080:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001a084:	83 c9 c0             	or     ecx,0xffffffc0
c001a087:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001a08b:	90                   	nop
c001a08c:	83 c4 0c             	add    esp,0xc
c001a08f:	c3                   	ret    

c001a090 <PCI::readBAR8(unsigned int, int)>:
c001a090:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a094:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a098:	f6 c2 01             	test   dl,0x1
c001a09b:	74 07                	je     c001a0a4 <PCI::readBAR8(unsigned int, int)+0x14>
c001a09d:	83 e2 fc             	and    edx,0xfffffffc
c001a0a0:	01 c2                	add    edx,eax
c001a0a2:	ec                   	in     al,dx
c001a0a3:	c3                   	ret    
c001a0a4:	83 e2 f0             	and    edx,0xfffffff0
c001a0a7:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001a0aa:	c3                   	ret    
c001a0ab:	90                   	nop

c001a0ac <PCI::readBAR16(unsigned int, int)>:
c001a0ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0b4:	f6 c2 01             	test   dl,0x1
c001a0b7:	74 08                	je     c001a0c1 <PCI::readBAR16(unsigned int, int)+0x15>
c001a0b9:	83 e2 fc             	and    edx,0xfffffffc
c001a0bc:	01 c2                	add    edx,eax
c001a0be:	66 ed                	in     ax,dx
c001a0c0:	c3                   	ret    
c001a0c1:	83 e2 f0             	and    edx,0xfffffff0
c001a0c4:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001a0c8:	c3                   	ret    
c001a0c9:	90                   	nop

c001a0ca <PCI::readBAR32(unsigned int, int)>:
c001a0ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0d2:	f6 c2 01             	test   dl,0x1
c001a0d5:	74 07                	je     c001a0de <PCI::readBAR32(unsigned int, int)+0x14>
c001a0d7:	83 e2 fc             	and    edx,0xfffffffc
c001a0da:	01 c2                	add    edx,eax
c001a0dc:	ed                   	in     eax,dx
c001a0dd:	c3                   	ret    
c001a0de:	83 e2 f0             	and    edx,0xfffffff0
c001a0e1:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001a0e4:	c3                   	ret    
c001a0e5:	90                   	nop

c001a0e6 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001a0e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a0ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0ee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a0f2:	f6 c2 01             	test   dl,0x1
c001a0f5:	74 07                	je     c001a0fe <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001a0f7:	83 e2 fc             	and    edx,0xfffffffc
c001a0fa:	01 ca                	add    edx,ecx
c001a0fc:	ee                   	out    dx,al
c001a0fd:	c3                   	ret    
c001a0fe:	83 e2 f0             	and    edx,0xfffffff0
c001a101:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001a104:	c3                   	ret    
c001a105:	90                   	nop

c001a106 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001a106:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a10a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a10e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a112:	f6 c2 01             	test   dl,0x1
c001a115:	74 08                	je     c001a11f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001a117:	83 e2 fc             	and    edx,0xfffffffc
c001a11a:	01 ca                	add    edx,ecx
c001a11c:	66 ef                	out    dx,ax
c001a11e:	c3                   	ret    
c001a11f:	83 e2 f0             	and    edx,0xfffffff0
c001a122:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001a126:	c3                   	ret    
c001a127:	90                   	nop

c001a128 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001a128:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a12c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a130:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a134:	f6 c2 01             	test   dl,0x1
c001a137:	74 07                	je     c001a140 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001a139:	83 e2 fc             	and    edx,0xfffffffc
c001a13c:	01 ca                	add    edx,ecx
c001a13e:	ef                   	out    dx,eax
c001a13f:	c3                   	ret    
c001a140:	83 e2 f0             	and    edx,0xfffffff0
c001a143:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001a146:	c3                   	ret    
c001a147:	90                   	nop

c001a148 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a148:	55                   	push   ebp
c001a149:	57                   	push   edi
c001a14a:	56                   	push   esi
c001a14b:	53                   	push   ebx
c001a14c:	83 ec 0c             	sub    esp,0xc
c001a14f:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001a154:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001a158:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a15c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a160:	83 fe 07             	cmp    esi,0x7
c001a163:	76 10                	jbe    c001a175 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001a165:	83 ec 0c             	sub    esp,0xc
c001a168:	68 c3 18 02 c0       	push   0xc00218c3
c001a16d:	e8 ed 66 ff ff       	call   c001085f <KePanic(char const*)>
c001a172:	83 c4 10             	add    esp,0x10
c001a175:	0f b6 db             	movzx  ebx,bl
c001a178:	83 fb 0f             	cmp    ebx,0xf
c001a17b:	76 10                	jbe    c001a18d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001a17d:	83 ec 0c             	sub    esp,0xc
c001a180:	68 f3 18 02 c0       	push   0xc00218f3
c001a185:	e8 d5 66 ff ff       	call   c001085f <KePanic(char const*)>
c001a18a:	83 c4 10             	add    esp,0x10
c001a18d:	8d 04 36             	lea    eax,[esi+esi*1]
c001a190:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a195:	83 c8 f0             	or     eax,0xfffffff0
c001a198:	ee                   	out    dx,al
c001a199:	ba fa 0c 00 00       	mov    edx,0xcfa
c001a19e:	89 e8                	mov    eax,ebp
c001a1a0:	ee                   	out    dx,al
c001a1a1:	83 c4 0c             	add    esp,0xc
c001a1a4:	89 d8                	mov    eax,ebx
c001a1a6:	89 f9                	mov    ecx,edi
c001a1a8:	c1 e0 08             	shl    eax,0x8
c001a1ab:	0f b6 d9             	movzx  ebx,cl
c001a1ae:	83 e3 fc             	and    ebx,0xfffffffc
c001a1b1:	09 d8                	or     eax,ebx
c001a1b3:	5b                   	pop    ebx
c001a1b4:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001a1b9:	5e                   	pop    esi
c001a1ba:	5f                   	pop    edi
c001a1bb:	5d                   	pop    ebp
c001a1bc:	c3                   	ret    
c001a1bd:	90                   	nop

c001a1be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a1be:	57                   	push   edi
c001a1bf:	56                   	push   esi
c001a1c0:	53                   	push   ebx
c001a1c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a1c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a1c9:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001a1cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a1d3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a1d7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a1db:	83 ff 01             	cmp    edi,0x1
c001a1de:	75 3f                	jne    c001a21f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001a1e0:	89 de                	mov    esi,ebx
c001a1e2:	0f b6 c0             	movzx  eax,al
c001a1e5:	81 e6 fc 00 00 00    	and    esi,0xfc
c001a1eb:	c1 e0 10             	shl    eax,0x10
c001a1ee:	0f b6 c9             	movzx  ecx,cl
c001a1f1:	09 f0                	or     eax,esi
c001a1f3:	c1 e1 08             	shl    ecx,0x8
c001a1f6:	0f b6 d2             	movzx  edx,dl
c001a1f9:	09 c8                	or     eax,ecx
c001a1fb:	c1 e2 0b             	shl    edx,0xb
c001a1fe:	09 d0                	or     eax,edx
c001a200:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a205:	0d 00 00 00 80       	or     eax,0x80000000
c001a20a:	ef                   	out    dx,eax
c001a20b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a210:	ed                   	in     eax,dx
c001a211:	83 e3 02             	and    ebx,0x2
c001a214:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a21b:	d3 e8                	shr    eax,cl
c001a21d:	eb 44                	jmp    c001a263 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a21f:	83 ff 02             	cmp    edi,0x2
c001a222:	75 2d                	jne    c001a251 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001a224:	83 ec 0c             	sub    esp,0xc
c001a227:	0f b6 c9             	movzx  ecx,cl
c001a22a:	0f b6 d2             	movzx  edx,dl
c001a22d:	0f b6 fb             	movzx  edi,bl
c001a230:	0f b6 c0             	movzx  eax,al
c001a233:	57                   	push   edi
c001a234:	51                   	push   ecx
c001a235:	52                   	push   edx
c001a236:	50                   	push   eax
c001a237:	56                   	push   esi
c001a238:	e8 0b ff ff ff       	call   c001a148 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a23d:	89 c2                	mov    edx,eax
c001a23f:	ed                   	in     eax,dx
c001a240:	83 e3 02             	and    ebx,0x2
c001a243:	83 c4 20             	add    esp,0x20
c001a246:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001a24d:	d3 e8                	shr    eax,cl
c001a24f:	eb 12                	jmp    c001a263 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001a251:	83 ec 0c             	sub    esp,0xc
c001a254:	68 23 19 02 c0       	push   0xc0021923
c001a259:	e8 01 66 ff ff       	call   c001085f <KePanic(char const*)>
c001a25e:	83 c4 10             	add    esp,0x10
c001a261:	31 c0                	xor    eax,eax
c001a263:	5b                   	pop    ebx
c001a264:	5e                   	pop    esi
c001a265:	5f                   	pop    edi
c001a266:	c3                   	ret    
c001a267:	90                   	nop

c001a268 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001a268:	83 ec 18             	sub    esp,0x18
c001a26b:	6a 00                	push   0x0
c001a26d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a272:	50                   	push   eax
c001a273:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a278:	50                   	push   eax
c001a279:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a27e:	50                   	push   eax
c001a27f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a283:	e8 36 ff ff ff       	call   c001a1be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a288:	83 c4 2c             	add    esp,0x2c
c001a28b:	c3                   	ret    

c001a28c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001a28c:	83 ec 18             	sub    esp,0x18
c001a28f:	6a 0e                	push   0xe
c001a291:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a296:	50                   	push   eax
c001a297:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a29c:	50                   	push   eax
c001a29d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a2a2:	50                   	push   eax
c001a2a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2a7:	e8 12 ff ff ff       	call   c001a1be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2ac:	83 c4 2c             	add    esp,0x2c
c001a2af:	0f b6 c0             	movzx  eax,al
c001a2b2:	c3                   	ret    
c001a2b3:	90                   	nop

c001a2b4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001a2b4:	55                   	push   ebp
c001a2b5:	57                   	push   edi
c001a2b6:	56                   	push   esi
c001a2b7:	53                   	push   ebx
c001a2b8:	83 ec 18             	sub    esp,0x18
c001a2bb:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001a2c0:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001a2c5:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001a2ca:	6a 0a                	push   0xa
c001a2cc:	56                   	push   esi
c001a2cd:	55                   	push   ebp
c001a2ce:	57                   	push   edi
c001a2cf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a2d3:	e8 e6 fe ff ff       	call   c001a1be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2d8:	83 c4 14             	add    esp,0x14
c001a2db:	89 c3                	mov    ebx,eax
c001a2dd:	6a 0a                	push   0xa
c001a2df:	0f b6 db             	movzx  ebx,bl
c001a2e2:	56                   	push   esi
c001a2e3:	55                   	push   ebp
c001a2e4:	57                   	push   edi
c001a2e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a2e9:	e8 d0 fe ff ff       	call   c001a1be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a2ee:	83 c4 2c             	add    esp,0x2c
c001a2f1:	25 00 ff 00 00       	and    eax,0xff00
c001a2f6:	09 d8                	or     eax,ebx
c001a2f8:	5b                   	pop    ebx
c001a2f9:	5e                   	pop    esi
c001a2fa:	5f                   	pop    edi
c001a2fb:	5d                   	pop    ebp
c001a2fc:	c3                   	ret    
c001a2fd:	90                   	nop

c001a2fe <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001a2fe:	83 ec 18             	sub    esp,0x18
c001a301:	6a 08                	push   0x8
c001a303:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a308:	50                   	push   eax
c001a309:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a30e:	50                   	push   eax
c001a30f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a314:	50                   	push   eax
c001a315:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a319:	e8 a0 fe ff ff       	call   c001a1be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a31e:	83 c4 2c             	add    esp,0x2c
c001a321:	0f b6 c4             	movzx  eax,ah
c001a324:	c3                   	ret    
c001a325:	90                   	nop

c001a326 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001a326:	83 ec 18             	sub    esp,0x18
c001a329:	6a 08                	push   0x8
c001a32b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a330:	50                   	push   eax
c001a331:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a336:	50                   	push   eax
c001a337:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a33c:	50                   	push   eax
c001a33d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a341:	e8 78 fe ff ff       	call   c001a1be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a346:	83 c4 2c             	add    esp,0x2c
c001a349:	c3                   	ret    

c001a34a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001a34a:	83 ec 18             	sub    esp,0x18
c001a34d:	6a 3c                	push   0x3c
c001a34f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a354:	50                   	push   eax
c001a355:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a35a:	50                   	push   eax
c001a35b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a360:	50                   	push   eax
c001a361:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a365:	e8 54 fe ff ff       	call   c001a1be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a36a:	83 c4 2c             	add    esp,0x2c
c001a36d:	c3                   	ret    

c001a36e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001a36e:	83 ec 18             	sub    esp,0x18
c001a371:	6a 18                	push   0x18
c001a373:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a378:	50                   	push   eax
c001a379:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a37e:	50                   	push   eax
c001a37f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a384:	50                   	push   eax
c001a385:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a389:	e8 30 fe ff ff       	call   c001a1be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a38e:	83 c4 2c             	add    esp,0x2c
c001a391:	0f b6 c4             	movzx  eax,ah
c001a394:	c3                   	ret    
c001a395:	90                   	nop

c001a396 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001a396:	55                   	push   ebp
c001a397:	57                   	push   edi
c001a398:	56                   	push   esi
c001a399:	53                   	push   ebx
c001a39a:	83 ec 28             	sub    esp,0x28
c001a39d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a3a1:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001a3a6:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001a3ab:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001a3b0:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001a3b7:	8d 43 12             	lea    eax,[ebx+0x12]
c001a3ba:	83 c3 10             	add    ebx,0x10
c001a3bd:	0f b6 c0             	movzx  eax,al
c001a3c0:	0f b6 db             	movzx  ebx,bl
c001a3c3:	50                   	push   eax
c001a3c4:	51                   	push   ecx
c001a3c5:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001a3c9:	57                   	push   edi
c001a3ca:	55                   	push   ebp
c001a3cb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a3cf:	e8 ea fd ff ff       	call   c001a1be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3d4:	83 c4 14             	add    esp,0x14
c001a3d7:	89 c6                	mov    esi,eax
c001a3d9:	53                   	push   ebx
c001a3da:	c1 e6 10             	shl    esi,0x10
c001a3dd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a3e1:	51                   	push   ecx
c001a3e2:	57                   	push   edi
c001a3e3:	55                   	push   ebp
c001a3e4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a3e8:	e8 d1 fd ff ff       	call   c001a1be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a3ed:	83 c4 3c             	add    esp,0x3c
c001a3f0:	0f b7 c0             	movzx  eax,ax
c001a3f3:	5b                   	pop    ebx
c001a3f4:	09 f0                	or     eax,esi
c001a3f6:	5e                   	pop    esi
c001a3f7:	5f                   	pop    edi
c001a3f8:	5d                   	pop    ebp
c001a3f9:	c3                   	ret    

c001a3fa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001a3fa:	55                   	push   ebp
c001a3fb:	57                   	push   edi
c001a3fc:	56                   	push   esi
c001a3fd:	53                   	push   ebx
c001a3fe:	83 ec 0c             	sub    esp,0xc
c001a401:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a405:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a409:	89 f5                	mov    ebp,esi
c001a40b:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001a411:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a415:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a419:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a41d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a421:	83 f9 01             	cmp    ecx,0x1
c001a424:	75 5d                	jne    c001a483 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001a426:	0f b6 c8             	movzx  ecx,al
c001a429:	0f b6 d2             	movzx  edx,dl
c001a42c:	c1 e1 10             	shl    ecx,0x10
c001a42f:	c1 e2 0b             	shl    edx,0xb
c001a432:	89 f0                	mov    eax,esi
c001a434:	25 fc 00 00 00       	and    eax,0xfc
c001a439:	09 c1                	or     ecx,eax
c001a43b:	89 e8                	mov    eax,ebp
c001a43d:	0f b6 c0             	movzx  eax,al
c001a440:	c1 e0 08             	shl    eax,0x8
c001a443:	09 c1                	or     ecx,eax
c001a445:	09 d1                	or     ecx,edx
c001a447:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a44c:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001a452:	89 c8                	mov    eax,ecx
c001a454:	ef                   	out    dx,eax
c001a455:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a45a:	ed                   	in     eax,dx
c001a45b:	0f b7 db             	movzx  ebx,bx
c001a45e:	83 e6 02             	and    esi,0x2
c001a461:	74 0a                	je     c001a46d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001a463:	0f b7 d0             	movzx  edx,ax
c001a466:	c1 e3 10             	shl    ebx,0x10
c001a469:	09 d3                	or     ebx,edx
c001a46b:	eb 05                	jmp    c001a472 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001a46d:	66 31 c0             	xor    ax,ax
c001a470:	09 c3                	or     ebx,eax
c001a472:	ba f8 0c 00 00       	mov    edx,0xcf8
c001a477:	89 c8                	mov    eax,ecx
c001a479:	ef                   	out    dx,eax
c001a47a:	ba fc 0c 00 00       	mov    edx,0xcfc
c001a47f:	89 d8                	mov    eax,ebx
c001a481:	eb 41                	jmp    c001a4c4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001a483:	83 f9 02             	cmp    ecx,0x2
c001a486:	75 45                	jne    c001a4cd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001a488:	83 ec 0c             	sub    esp,0xc
c001a48b:	0f b6 d2             	movzx  edx,dl
c001a48e:	89 f1                	mov    ecx,esi
c001a490:	0f b6 c0             	movzx  eax,al
c001a493:	0f b6 f1             	movzx  esi,cl
c001a496:	89 e9                	mov    ecx,ebp
c001a498:	56                   	push   esi
c001a499:	0f b6 c9             	movzx  ecx,cl
c001a49c:	51                   	push   ecx
c001a49d:	52                   	push   edx
c001a49e:	50                   	push   eax
c001a49f:	57                   	push   edi
c001a4a0:	e8 a3 fc ff ff       	call   c001a148 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a4a5:	89 c2                	mov    edx,eax
c001a4a7:	ed                   	in     eax,dx
c001a4a8:	83 c4 20             	add    esp,0x20
c001a4ab:	0f b7 db             	movzx  ebx,bx
c001a4ae:	f6 c2 02             	test   dl,0x2
c001a4b1:	74 0c                	je     c001a4bf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001a4b3:	0f b7 c8             	movzx  ecx,ax
c001a4b6:	89 d8                	mov    eax,ebx
c001a4b8:	c1 e0 10             	shl    eax,0x10
c001a4bb:	09 c8                	or     eax,ecx
c001a4bd:	eb 05                	jmp    c001a4c4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001a4bf:	66 31 c0             	xor    ax,ax
c001a4c2:	09 d8                	or     eax,ebx
c001a4c4:	ef                   	out    dx,eax
c001a4c5:	83 c4 0c             	add    esp,0xc
c001a4c8:	5b                   	pop    ebx
c001a4c9:	5e                   	pop    esi
c001a4ca:	5f                   	pop    edi
c001a4cb:	5d                   	pop    ebp
c001a4cc:	c3                   	ret    
c001a4cd:	c7 44 24 20 23 19 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021923
c001a4d5:	83 c4 0c             	add    esp,0xc
c001a4d8:	5b                   	pop    ebx
c001a4d9:	5e                   	pop    esi
c001a4da:	5f                   	pop    edi
c001a4db:	5d                   	pop    ebp
c001a4dc:	e9 7e 63 ff ff       	jmp    c001085f <KePanic(char const*)>
c001a4e1:	90                   	nop

c001a4e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001a4e2:	55                   	push   ebp
c001a4e3:	57                   	push   edi
c001a4e4:	56                   	push   esi
c001a4e5:	53                   	push   ebx
c001a4e6:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001a4ec:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001a4f3:	80 3d 4c 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028b4c,0x0
c001a4fa:	0f 85 bd 00 00 00    	jne    c001a5bd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001a500:	83 ec 0c             	sub    esp,0xc
c001a503:	68 14 01 00 00       	push   0x114
c001a508:	e8 8d d5 fe ff       	call   c0007a9a <malloc>
c001a50d:	83 c4 0c             	add    esp,0xc
c001a510:	89 c3                	mov    ebx,eax
c001a512:	ff 35 90 81 02 c0    	push   DWORD PTR ds:0xc0028190
c001a518:	68 29 19 02 c0       	push   0xc0021929
c001a51d:	50                   	push   eax
c001a51e:	e8 e1 09 ff ff       	call   c000af04 <File::File(char const*, Process*)>
c001a523:	83 c4 10             	add    esp,0x10
c001a526:	85 db                	test   ebx,ebx
c001a528:	0f 84 67 02 00 00    	je     c001a795 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a52e:	56                   	push   esi
c001a52f:	56                   	push   esi
c001a530:	6a 01                	push   0x1
c001a532:	53                   	push   ebx
c001a533:	e8 88 0a ff ff       	call   c000afc0 <File::open(FileOpenMode)>
c001a538:	83 c4 10             	add    esp,0x10
c001a53b:	85 c0                	test   eax,eax
c001a53d:	0f 85 52 02 00 00    	jne    c001a795 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a543:	52                   	push   edx
c001a544:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001a548:	50                   	push   eax
c001a549:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a54d:	50                   	push   eax
c001a54e:	53                   	push   ebx
c001a54f:	e8 18 0d ff ff       	call   c000b26c <File::stat(unsigned long long*, bool*)>
c001a554:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a558:	40                   	inc    eax
c001a559:	89 04 24             	mov    DWORD PTR [esp],eax
c001a55c:	e8 39 d5 fe ff       	call   c0007a9a <malloc>
c001a561:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a565:	a3 48 8b 02 c0       	mov    ds:0xc0028b48,eax
c001a56a:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001a56e:	59                   	pop    ecx
c001a56f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a571:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001a575:	51                   	push   ecx
c001a576:	50                   	push   eax
c001a577:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a57b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001a57f:	53                   	push   ebx
c001a580:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a583:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001a587:	83 c4 20             	add    esp,0x20
c001a58a:	89 c8                	mov    eax,ecx
c001a58c:	99                   	cdq    
c001a58d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001a591:	0f 85 fe 01 00 00    	jne    c001a795 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a597:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001a59b:	0f 85 f4 01 00 00    	jne    c001a795 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a5a1:	83 ec 0c             	sub    esp,0xc
c001a5a4:	53                   	push   ebx
c001a5a5:	e8 74 0a ff ff       	call   c000b01e <File::close()>
c001a5aa:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a5ae:	c6 05 4c 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b4c,0x1
c001a5b5:	a3 44 8b 02 c0       	mov    ds:0xc0028b44,eax
c001a5ba:	83 c4 10             	add    esp,0x10
c001a5bd:	a1 44 8b 02 c0       	mov    eax,ds:0xc0028b44
c001a5c2:	8b 1d 48 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028b48
c001a5c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a5cc:	31 f6                	xor    esi,esi
c001a5ce:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001a5d6:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001a5dd:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001a5e2:	31 c9                	xor    ecx,ecx
c001a5e4:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001a5ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001a5f1:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001a5f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a5fd:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001a605:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a609:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001a60d:	0f 8e 82 01 00 00    	jle    c001a795 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001a613:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001a616:	d4 40                	aam    0x40
c001a618:	d5 39                	aad    0x39
c001a61a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001a61e:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001a622:	d4 40                	aam    0x40
c001a624:	d5 39                	aad    0x39
c001a626:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a62a:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001a62e:	d4 40                	aam    0x40
c001a630:	d5 39                	aad    0x39
c001a632:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a636:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001a63a:	d4 40                	aam    0x40
c001a63c:	d5 39                	aad    0x39
c001a63e:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a642:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001a646:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001a64a:	3c 56                	cmp    al,0x56
c001a64c:	74 43                	je     c001a691 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001a64e:	d4 40                	aam    0x40
c001a650:	d5 39                	aad    0x39
c001a652:	8d 48 d0             	lea    ecx,[eax-0x30]
c001a655:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001a659:	0f b6 c9             	movzx  ecx,cl
c001a65c:	c1 e1 04             	shl    ecx,0x4
c001a65f:	d4 40                	aam    0x40
c001a661:	d5 39                	aad    0x39
c001a663:	83 e8 30             	sub    eax,0x30
c001a666:	0f b6 c0             	movzx  eax,al
c001a669:	09 c1                	or     ecx,eax
c001a66b:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001a66f:	c1 e1 04             	shl    ecx,0x4
c001a672:	d4 40                	aam    0x40
c001a674:	d5 39                	aad    0x39
c001a676:	83 e8 30             	sub    eax,0x30
c001a679:	0f b6 c0             	movzx  eax,al
c001a67c:	09 c1                	or     ecx,eax
c001a67e:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001a682:	c1 e1 04             	shl    ecx,0x4
c001a685:	d4 40                	aam    0x40
c001a687:	d5 39                	aad    0x39
c001a689:	83 e8 30             	sub    eax,0x30
c001a68c:	0f b6 c0             	movzx  eax,al
c001a68f:	09 c1                	or     ecx,eax
c001a691:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001a695:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001a699:	3c 58                	cmp    al,0x58
c001a69b:	74 47                	je     c001a6e4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001a69d:	d4 40                	aam    0x40
c001a69f:	d5 39                	aad    0x39
c001a6a1:	8d 50 d0             	lea    edx,[eax-0x30]
c001a6a4:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001a6a8:	0f b6 d2             	movzx  edx,dl
c001a6ab:	c1 e2 04             	shl    edx,0x4
c001a6ae:	d4 40                	aam    0x40
c001a6b0:	d5 39                	aad    0x39
c001a6b2:	83 e8 30             	sub    eax,0x30
c001a6b5:	0f b6 c0             	movzx  eax,al
c001a6b8:	09 c2                	or     edx,eax
c001a6ba:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001a6be:	c1 e2 04             	shl    edx,0x4
c001a6c1:	d4 40                	aam    0x40
c001a6c3:	d5 39                	aad    0x39
c001a6c5:	83 e8 30             	sub    eax,0x30
c001a6c8:	0f b6 c0             	movzx  eax,al
c001a6cb:	09 c2                	or     edx,eax
c001a6cd:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001a6d1:	c1 e2 04             	shl    edx,0x4
c001a6d4:	d4 40                	aam    0x40
c001a6d6:	d5 39                	aad    0x39
c001a6d8:	83 e8 30             	sub    eax,0x30
c001a6db:	0f b6 c0             	movzx  eax,al
c001a6de:	09 c2                	or     edx,eax
c001a6e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a6e4:	83 c6 10             	add    esi,0x10
c001a6e7:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001a6eb:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001a6ef:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001a6f3:	83 fa 0a             	cmp    edx,0xa
c001a6f6:	74 0b                	je     c001a703 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001a6f8:	47                   	inc    edi
c001a6f9:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001a6fd:	75 19                	jne    c001a718 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001a6ff:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001a703:	31 c0                	xor    eax,eax
c001a705:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001a70a:	0f 94 c0             	sete   al
c001a70d:	01 c6                	add    esi,eax
c001a70f:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001a714:	75 0b                	jne    c001a721 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001a716:	eb 14                	jmp    c001a72c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001a718:	46                   	inc    esi
c001a719:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001a71c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001a71f:	eb ca                	jmp    c001a6eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001a721:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001a726:	0f 85 dd fe ff ff    	jne    c001a609 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a72c:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001a731:	74 10                	je     c001a743 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001a733:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001a738:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001a73d:	0f 85 c6 fe ff ff    	jne    c001a609 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a743:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a747:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a74b:	83 e8 30             	sub    eax,0x30
c001a74e:	83 ef 30             	sub    edi,0x30
c001a751:	c1 e0 04             	shl    eax,0x4
c001a754:	09 f8                	or     eax,edi
c001a756:	0f b6 c0             	movzx  eax,al
c001a759:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a75d:	0f 85 a6 fe ff ff    	jne    c001a609 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a763:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001a76b:	83 e8 30             	sub    eax,0x30
c001a76e:	83 ef 30             	sub    edi,0x30
c001a771:	c1 e0 04             	shl    eax,0x4
c001a774:	09 f8                	or     eax,edi
c001a776:	0f b6 c0             	movzx  eax,al
c001a779:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001a77d:	0f 85 86 fe ff ff    	jne    c001a609 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001a783:	50                   	push   eax
c001a784:	50                   	push   eax
c001a785:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a789:	50                   	push   eax
c001a78a:	55                   	push   ebp
c001a78b:	e8 b0 5e fe ff       	call   c0000640 <strcpy>
c001a790:	83 c4 10             	add    esp,0x10
c001a793:	eb 06                	jmp    c001a79b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001a795:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001a799:	31 ed                	xor    ebp,ebp
c001a79b:	81 c4 4c 01 00 00    	add    esp,0x14c
c001a7a1:	89 e8                	mov    eax,ebp
c001a7a3:	5b                   	pop    ebx
c001a7a4:	5e                   	pop    esi
c001a7a5:	5f                   	pop    edi
c001a7a6:	5d                   	pop    ebp
c001a7a7:	c3                   	ret    

c001a7a8 <PCI::checkBus(unsigned char)>:
c001a7a8:	56                   	push   esi
c001a7a9:	53                   	push   ebx
c001a7aa:	31 db                	xor    ebx,ebx
c001a7ac:	51                   	push   ecx
c001a7ad:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001a7b2:	52                   	push   edx
c001a7b3:	53                   	push   ebx
c001a7b4:	43                   	inc    ebx
c001a7b5:	56                   	push   esi
c001a7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a7ba:	e8 03 03 00 00       	call   c001aac2 <PCI::checkDevice(unsigned char, unsigned char)>
c001a7bf:	83 c4 10             	add    esp,0x10
c001a7c2:	83 fb 20             	cmp    ebx,0x20
c001a7c5:	75 eb                	jne    c001a7b2 <PCI::checkBus(unsigned char)+0xa>
c001a7c7:	58                   	pop    eax
c001a7c8:	5b                   	pop    ebx
c001a7c9:	5e                   	pop    esi
c001a7ca:	c3                   	ret    
c001a7cb:	90                   	nop

c001a7cc <PCI::foundDevice(PCIDeviceInfo)>:
c001a7cc:	55                   	push   ebp
c001a7cd:	57                   	push   edi
c001a7ce:	56                   	push   esi
c001a7cf:	53                   	push   ebx
c001a7d0:	83 ec 1c             	sub    esp,0x1c
c001a7d3:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001a7d8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a7dc:	3d ff ff 00 00       	cmp    eax,0xffff
c001a7e1:	0f 84 57 01 00 00    	je     c001a93e <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001a7e7:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001a7ec:	66 3d 06 04          	cmp    ax,0x406
c001a7f0:	75 2c                	jne    c001a81e <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001a7f2:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001a7f7:	50                   	push   eax
c001a7f8:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001a7fd:	50                   	push   eax
c001a7fe:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001a803:	50                   	push   eax
c001a804:	53                   	push   ebx
c001a805:	e8 64 fb ff ff       	call   c001a36e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001a80a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a80e:	0f b6 c0             	movzx  eax,al
c001a811:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a815:	83 c4 2c             	add    esp,0x2c
c001a818:	5b                   	pop    ebx
c001a819:	5e                   	pop    esi
c001a81a:	5f                   	pop    edi
c001a81b:	5d                   	pop    ebp
c001a81c:	eb 8a                	jmp    c001a7a8 <PCI::checkBus(unsigned char)>
c001a81e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001a822:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001a828:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001a82c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001a830:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001a835:	85 d2                	test   edx,edx
c001a837:	74 36                	je     c001a86f <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001a839:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001a83c:	85 c9                	test   ecx,ecx
c001a83e:	74 2b                	je     c001a86b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001a840:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001a846:	31 ee                	xor    esi,ebp
c001a848:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001a84e:	75 1b                	jne    c001a86b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001a850:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001a854:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001a85a:	75 0f                	jne    c001a86b <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001a85c:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001a863:	39 f9                	cmp    ecx,edi
c001a865:	0f 84 d3 00 00 00    	je     c001a93e <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001a86b:	8b 12                	mov    edx,DWORD PTR [edx]
c001a86d:	eb c6                	jmp    c001a835 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001a86f:	3d 01 06 00 00       	cmp    eax,0x601
c001a874:	75 19                	jne    c001a88f <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001a876:	83 ec 0c             	sub    esp,0xc
c001a879:	68 64 01 00 00       	push   0x164
c001a87e:	e8 17 d2 fe ff       	call   c0007a9a <malloc>
c001a883:	89 c5                	mov    ebp,eax
c001a885:	89 04 24             	mov    DWORD PTR [esp],eax
c001a888:	e8 a1 0e 00 00       	call   c001b72e <SATABus::SATABus()>
c001a88d:	eb 1e                	jmp    c001a8ad <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001a88f:	3d 01 01 00 00       	cmp    eax,0x101
c001a894:	75 62                	jne    c001a8f8 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001a896:	83 ec 0c             	sub    esp,0xc
c001a899:	68 70 02 00 00       	push   0x270
c001a89e:	e8 f7 d1 fe ff       	call   c0007a9a <malloc>
c001a8a3:	89 c5                	mov    ebp,eax
c001a8a5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a8a8:	e8 e5 02 00 00       	call   c001ab92 <IDE::IDE()>
c001a8ad:	5f                   	pop    edi
c001a8ae:	58                   	pop    eax
c001a8af:	55                   	push   ebp
c001a8b0:	53                   	push   ebx
c001a8b1:	e8 00 15 ff ff       	call   c000bdb6 <Device::addChild(Device*)>
c001a8b6:	83 ec 1c             	sub    esp,0x1c
c001a8b9:	b9 09 00 00 00       	mov    ecx,0x9
c001a8be:	fc                   	cld    
c001a8bf:	89 e7                	mov    edi,esp
c001a8c1:	8d 74 24 60          	lea    esi,[esp+0x60]
c001a8c5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a8c7:	55                   	push   ebp
c001a8c8:	e8 2f 14 ff ff       	call   c000bcfc <Device::preOpenPCI(PCIDeviceInfo)>
c001a8cd:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a8d0:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001a8d4:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001a8dc:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001a8e4:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001a8ec:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001a8ef:	83 c4 4c             	add    esp,0x4c
c001a8f2:	5b                   	pop    ebx
c001a8f3:	5e                   	pop    esi
c001a8f4:	5f                   	pop    edi
c001a8f5:	5d                   	pop    ebp
c001a8f6:	ff e0                	jmp    eax
c001a8f8:	83 ec 0c             	sub    esp,0xc
c001a8fb:	68 58 01 00 00       	push   0x158
c001a900:	e8 95 d1 fe ff       	call   c0007a9a <malloc>
c001a905:	89 c5                	mov    ebp,eax
c001a907:	58                   	pop    eax
c001a908:	5a                   	pop    edx
c001a909:	68 42 19 02 c0       	push   0xc0021942
c001a90e:	55                   	push   ebp
c001a90f:	e8 40 17 ff ff       	call   c000c054 <DriverlessDevice::DriverlessDevice(char const*)>
c001a914:	59                   	pop    ecx
c001a915:	5e                   	pop    esi
c001a916:	55                   	push   ebp
c001a917:	53                   	push   ebx
c001a918:	e8 99 14 ff ff       	call   c000bdb6 <Device::addChild(Device*)>
c001a91d:	83 c4 10             	add    esp,0x10
c001a920:	b9 09 00 00 00       	mov    ecx,0x9
c001a925:	fc                   	cld    
c001a926:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001a92a:	89 fe                	mov    esi,edi
c001a92c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a92e:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001a932:	83 c4 1c             	add    esp,0x1c
c001a935:	5b                   	pop    ebx
c001a936:	5e                   	pop    esi
c001a937:	5f                   	pop    edi
c001a938:	5d                   	pop    ebp
c001a939:	e9 be 13 ff ff       	jmp    c000bcfc <Device::preOpenPCI(PCIDeviceInfo)>
c001a93e:	83 c4 1c             	add    esp,0x1c
c001a941:	5b                   	pop    ebx
c001a942:	5e                   	pop    esi
c001a943:	5f                   	pop    edi
c001a944:	5d                   	pop    ebp
c001a945:	c3                   	ret    

c001a946 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001a946:	55                   	push   ebp
c001a947:	57                   	push   edi
c001a948:	56                   	push   esi
c001a949:	53                   	push   ebx
c001a94a:	83 ec 68             	sub    esp,0x68
c001a94d:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001a951:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a958:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a95c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a963:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001a968:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a96c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a973:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001a978:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a97c:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001a981:	6a 0c                	push   0xc
c001a983:	57                   	push   edi
c001a984:	53                   	push   ebx
c001a985:	56                   	push   esi
c001a986:	55                   	push   ebp
c001a987:	e8 32 f8 ff ff       	call   c001a1be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a98c:	83 c4 20             	add    esp,0x20
c001a98f:	57                   	push   edi
c001a990:	53                   	push   ebx
c001a991:	56                   	push   esi
c001a992:	55                   	push   ebp
c001a993:	e8 1c f9 ff ff       	call   c001a2b4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001a998:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001a99d:	57                   	push   edi
c001a99e:	53                   	push   ebx
c001a99f:	56                   	push   esi
c001a9a0:	55                   	push   ebp
c001a9a1:	e8 a4 f9 ff ff       	call   c001a34a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001a9a6:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001a9aa:	83 c4 14             	add    esp,0x14
c001a9ad:	6a 3c                	push   0x3c
c001a9af:	57                   	push   edi
c001a9b0:	53                   	push   ebx
c001a9b1:	56                   	push   esi
c001a9b2:	55                   	push   ebp
c001a9b3:	e8 06 f8 ff ff       	call   c001a1be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a9b8:	0f b6 c4             	movzx  eax,ah
c001a9bb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a9bf:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001a9c3:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001a9c7:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001a9cc:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001a9d2:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001a9d8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001a9dc:	83 c4 20             	add    esp,0x20
c001a9df:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001a9e4:	74 30                	je     c001aa16 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001a9e6:	31 c0                	xor    eax,eax
c001a9e8:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a9ec:	7e 28                	jle    c001aa16 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001a9ee:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001a9f6:	39 cb                	cmp    ebx,ecx
c001a9f8:	75 19                	jne    c001aa13 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001a9fa:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001aa02:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001aa06:	75 0b                	jne    c001aa13 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001aa08:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001aa0f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001aa13:	40                   	inc    eax
c001aa14:	eb d2                	jmp    c001a9e8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001aa16:	31 d2                	xor    edx,edx
c001aa18:	83 ec 0c             	sub    esp,0xc
c001aa1b:	57                   	push   edi
c001aa1c:	53                   	push   ebx
c001aa1d:	56                   	push   esi
c001aa1e:	52                   	push   edx
c001aa1f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001aa23:	55                   	push   ebp
c001aa24:	e8 6d f9 ff ff       	call   c001a396 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa29:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aa2d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001aa31:	42                   	inc    edx
c001aa32:	83 c4 20             	add    esp,0x20
c001aa35:	83 fa 06             	cmp    edx,0x6
c001aa38:	75 de                	jne    c001aa18 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001aa3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aa3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa42:	c1 e2 08             	shl    edx,0x8
c001aa45:	83 ec 0c             	sub    esp,0xc
c001aa48:	0f b6 c4             	movzx  eax,ah
c001aa4b:	09 d0                	or     eax,edx
c001aa4d:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001aa52:	6a 02                	push   0x2
c001aa54:	57                   	push   edi
c001aa55:	53                   	push   ebx
c001aa56:	56                   	push   esi
c001aa57:	55                   	push   ebp
c001aa58:	e8 61 f7 ff ff       	call   c001a1be <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aa5d:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001aa62:	83 c4 20             	add    esp,0x20
c001aa65:	57                   	push   edi
c001aa66:	53                   	push   ebx
c001aa67:	56                   	push   esi
c001aa68:	55                   	push   ebp
c001aa69:	e8 90 f8 ff ff       	call   c001a2fe <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001aa6e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001aa72:	57                   	push   edi
c001aa73:	53                   	push   ebx
c001aa74:	56                   	push   esi
c001aa75:	55                   	push   ebp
c001aa76:	e8 ed f7 ff ff       	call   c001a268 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aa7b:	b9 09 00 00 00       	mov    ecx,0x9
c001aa80:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001aa85:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001aa89:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001aa8d:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001aa91:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001aa95:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001aa99:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001aa9d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001aaa1:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001aaa5:	83 ec 0c             	sub    esp,0xc
c001aaa8:	fc                   	cld    
c001aaa9:	89 e7                	mov    edi,esp
c001aaab:	8d 74 24 58          	lea    esi,[esp+0x58]
c001aaaf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001aab1:	55                   	push   ebp
c001aab2:	e8 15 fd ff ff       	call   c001a7cc <PCI::foundDevice(PCIDeviceInfo)>
c001aab7:	81 c4 8c 00 00 00    	add    esp,0x8c
c001aabd:	5b                   	pop    ebx
c001aabe:	5e                   	pop    esi
c001aabf:	5f                   	pop    edi
c001aac0:	5d                   	pop    ebp
c001aac1:	c3                   	ret    

c001aac2 <PCI::checkDevice(unsigned char, unsigned char)>:
c001aac2:	55                   	push   ebp
c001aac3:	57                   	push   edi
c001aac4:	56                   	push   esi
c001aac5:	53                   	push   ebx
c001aac6:	83 ec 0c             	sub    esp,0xc
c001aac9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001aacd:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001aad2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001aad7:	6a 00                	push   0x0
c001aad9:	56                   	push   esi
c001aada:	57                   	push   edi
c001aadb:	55                   	push   ebp
c001aadc:	e8 87 f7 ff ff       	call   c001a268 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001aae1:	6a 00                	push   0x0
c001aae3:	56                   	push   esi
c001aae4:	57                   	push   edi
c001aae5:	55                   	push   ebp
c001aae6:	e8 5b fe ff ff       	call   c001a946 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001aaeb:	83 c4 20             	add    esp,0x20
c001aaee:	6a 00                	push   0x0
c001aaf0:	56                   	push   esi
c001aaf1:	57                   	push   edi
c001aaf2:	55                   	push   ebp
c001aaf3:	e8 94 f7 ff ff       	call   c001a28c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001aaf8:	83 c4 10             	add    esp,0x10
c001aafb:	a8 80                	test   al,0x80
c001aafd:	74 2d                	je     c001ab2c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001aaff:	bb 01 00 00 00       	mov    ebx,0x1
c001ab04:	53                   	push   ebx
c001ab05:	56                   	push   esi
c001ab06:	57                   	push   edi
c001ab07:	55                   	push   ebp
c001ab08:	e8 5b f7 ff ff       	call   c001a268 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab0d:	83 c4 10             	add    esp,0x10
c001ab10:	0f b7 c0             	movzx  eax,ax
c001ab13:	3d ff ff 00 00       	cmp    eax,0xffff
c001ab18:	74 0c                	je     c001ab26 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001ab1a:	53                   	push   ebx
c001ab1b:	56                   	push   esi
c001ab1c:	57                   	push   edi
c001ab1d:	55                   	push   ebp
c001ab1e:	e8 23 fe ff ff       	call   c001a946 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ab23:	83 c4 10             	add    esp,0x10
c001ab26:	43                   	inc    ebx
c001ab27:	83 fb 08             	cmp    ebx,0x8
c001ab2a:	75 d8                	jne    c001ab04 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001ab2c:	83 c4 0c             	add    esp,0xc
c001ab2f:	5b                   	pop    ebx
c001ab30:	5e                   	pop    esi
c001ab31:	5f                   	pop    edi
c001ab32:	5d                   	pop    ebp
c001ab33:	c3                   	ret    

c001ab34 <PCI::detect()>:
c001ab34:	56                   	push   esi
c001ab35:	53                   	push   ebx
c001ab36:	53                   	push   ebx
c001ab37:	31 db                	xor    ebx,ebx
c001ab39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab3d:	6a 00                	push   0x0
c001ab3f:	6a 00                	push   0x0
c001ab41:	6a 00                	push   0x0
c001ab43:	56                   	push   esi
c001ab44:	e8 43 f7 ff ff       	call   c001a28c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ab49:	83 c4 10             	add    esp,0x10
c001ab4c:	a8 80                	test   al,0x80
c001ab4e:	75 21                	jne    c001ab71 <PCI::detect()+0x3d>
c001ab50:	51                   	push   ecx
c001ab51:	51                   	push   ecx
c001ab52:	6a 00                	push   0x0
c001ab54:	56                   	push   esi
c001ab55:	e8 4e fc ff ff       	call   c001a7a8 <PCI::checkBus(unsigned char)>
c001ab5a:	83 c4 10             	add    esp,0x10
c001ab5d:	eb 2a                	jmp    c001ab89 <PCI::detect()+0x55>
c001ab5f:	52                   	push   edx
c001ab60:	52                   	push   edx
c001ab61:	53                   	push   ebx
c001ab62:	43                   	inc    ebx
c001ab63:	56                   	push   esi
c001ab64:	e8 3f fc ff ff       	call   c001a7a8 <PCI::checkBus(unsigned char)>
c001ab69:	83 c4 10             	add    esp,0x10
c001ab6c:	83 fb 08             	cmp    ebx,0x8
c001ab6f:	74 18                	je     c001ab89 <PCI::detect()+0x55>
c001ab71:	53                   	push   ebx
c001ab72:	6a 00                	push   0x0
c001ab74:	6a 00                	push   0x0
c001ab76:	56                   	push   esi
c001ab77:	e8 ec f6 ff ff       	call   c001a268 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ab7c:	83 c4 10             	add    esp,0x10
c001ab7f:	0f b7 c0             	movzx  eax,ax
c001ab82:	3d ff ff 00 00       	cmp    eax,0xffff
c001ab87:	74 d6                	je     c001ab5f <PCI::detect()+0x2b>
c001ab89:	58                   	pop    eax
c001ab8a:	5b                   	pop    ebx
c001ab8b:	5e                   	pop    esi
c001ab8c:	c3                   	ret    
c001ab8d:	90                   	nop

c001ab8e <IDE::close(int, int, void*)>:
c001ab8e:	83 c8 ff             	or     eax,0xffffffff
c001ab91:	c3                   	ret    

c001ab92 <IDE::IDE()>:
c001ab92:	83 ec 0c             	sub    esp,0xc
c001ab95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab99:	83 ec 08             	sub    esp,0x8
c001ab9c:	68 88 19 02 c0       	push   0xc0021988
c001aba1:	50                   	push   eax
c001aba2:	e8 51 15 ff ff       	call   c000c0f8 <HardDiskController::HardDiskController(char const*)>
c001aba7:	83 c4 10             	add    esp,0x10
c001abaa:	ba 18 1a 02 c0       	mov    edx,0xc0021a18
c001abaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abb3:	89 10                	mov    DWORD PTR [eax],edx
c001abb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abb9:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001abc0:	90                   	nop
c001abc1:	83 c4 0c             	add    esp,0xc
c001abc4:	c3                   	ret    
c001abc5:	90                   	nop

c001abc6 <IDE::prepareInterrupt(unsigned char)>:
c001abc6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001abcb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001abcf:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001abd7:	c3                   	ret    

c001abd8 <selectDrive(unsigned char, unsigned char)>:
c001abd8:	c3                   	ret    
c001abd9:	90                   	nop

c001abda <IDE::getBase(unsigned char)>:
c001abda:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001abdf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abe3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001abeb:	c3                   	ret    

c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001abec:	55                   	push   ebp
c001abed:	57                   	push   edi
c001abee:	56                   	push   esi
c001abef:	53                   	push   ebx
c001abf0:	83 ec 1c             	sub    esp,0x1c
c001abf3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001abf7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001abfb:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001abfe:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ac02:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac06:	80 f9 03             	cmp    cl,0x3
c001ac09:	77 4f                	ja     c001ac5a <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001ac0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ac0f:	0f b6 fa             	movzx  edi,dl
c001ac12:	0f b6 db             	movzx  ebx,bl
c001ac15:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001ac18:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001ac1d:	80 ca 80             	or     dl,0x80
c001ac20:	52                   	push   edx
c001ac21:	6a 0c                	push   0xc
c001ac23:	57                   	push   edi
c001ac24:	56                   	push   esi
c001ac25:	e8 c2 ff ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac2a:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ac2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac33:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ac37:	ee                   	out    dx,al
c001ac38:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ac3d:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001ac41:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ac45:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ac49:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ac51:	83 c4 2c             	add    esp,0x2c
c001ac54:	5b                   	pop    ebx
c001ac55:	5e                   	pop    esi
c001ac56:	5f                   	pop    edi
c001ac57:	5d                   	pop    ebp
c001ac58:	eb 92                	jmp    c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ac5a:	0f b6 cb             	movzx  ecx,bl
c001ac5d:	83 f9 07             	cmp    ecx,0x7
c001ac60:	77 12                	ja     c001ac74 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001ac62:	0f b6 d2             	movzx  edx,dl
c001ac65:	0f b6 db             	movzx  ebx,bl
c001ac68:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001ac70:	01 da                	add    edx,ebx
c001ac72:	eb 2f                	jmp    c001aca3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ac74:	83 f9 0d             	cmp    ecx,0xd
c001ac77:	77 13                	ja     c001ac8c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001ac79:	0f b6 d2             	movzx  edx,dl
c001ac7c:	0f b6 db             	movzx  ebx,bl
c001ac7f:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001ac86:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001ac8a:	eb 17                	jmp    c001aca3 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001ac8c:	83 f9 15             	cmp    ecx,0x15
c001ac8f:	77 13                	ja     c001aca4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001ac91:	0f b6 d2             	movzx  edx,dl
c001ac94:	0f b6 db             	movzx  ebx,bl
c001ac97:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001ac9f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001aca3:	ee                   	out    dx,al
c001aca4:	83 c4 1c             	add    esp,0x1c
c001aca7:	5b                   	pop    ebx
c001aca8:	5e                   	pop    esi
c001aca9:	5f                   	pop    edi
c001acaa:	5d                   	pop    ebp
c001acab:	c3                   	ret    

c001acac <IDE::read(unsigned char, unsigned char)>:
c001acac:	55                   	push   ebp
c001acad:	57                   	push   edi
c001acae:	56                   	push   esi
c001acaf:	53                   	push   ebx
c001acb0:	83 ec 1c             	sub    esp,0x1c
c001acb3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001acb7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001acbb:	8d 43 f8             	lea    eax,[ebx-0x8]
c001acbe:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001acc2:	3c 03                	cmp    al,0x3
c001acc4:	77 40                	ja     c001ad06 <IDE::read(unsigned char, unsigned char)+0x5a>
c001acc6:	0f b6 f9             	movzx  edi,cl
c001acc9:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001accc:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001acd1:	0c 80                	or     al,0x80
c001acd3:	50                   	push   eax
c001acd4:	6a 0c                	push   0xc
c001acd6:	57                   	push   edi
c001acd7:	56                   	push   esi
c001acd8:	e8 0f ff ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001acdd:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001ace2:	0f b6 d3             	movzx  edx,bl
c001ace5:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ace9:	ec                   	in     al,dx
c001acea:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001acee:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001acf3:	52                   	push   edx
c001acf4:	6a 0c                	push   0xc
c001acf6:	57                   	push   edi
c001acf7:	56                   	push   esi
c001acf8:	e8 ef fe ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001acfd:	83 c4 20             	add    esp,0x20
c001ad00:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ad04:	eb 4c                	jmp    c001ad52 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ad06:	0f b6 d3             	movzx  edx,bl
c001ad09:	83 fa 07             	cmp    edx,0x7
c001ad0c:	77 12                	ja     c001ad20 <IDE::read(unsigned char, unsigned char)+0x74>
c001ad0e:	0f b6 c9             	movzx  ecx,cl
c001ad11:	0f b6 d3             	movzx  edx,bl
c001ad14:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001ad1c:	01 c2                	add    edx,eax
c001ad1e:	eb 31                	jmp    c001ad51 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ad20:	83 fa 0d             	cmp    edx,0xd
c001ad23:	77 13                	ja     c001ad38 <IDE::read(unsigned char, unsigned char)+0x8c>
c001ad25:	0f b6 c9             	movzx  ecx,cl
c001ad28:	0f b6 d3             	movzx  edx,bl
c001ad2b:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001ad32:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ad36:	eb 19                	jmp    c001ad51 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ad38:	31 c0                	xor    eax,eax
c001ad3a:	83 fa 15             	cmp    edx,0x15
c001ad3d:	77 13                	ja     c001ad52 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ad3f:	0f b6 c9             	movzx  ecx,cl
c001ad42:	0f b6 d3             	movzx  edx,bl
c001ad45:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001ad4d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ad51:	ec                   	in     al,dx
c001ad52:	83 c4 1c             	add    esp,0x1c
c001ad55:	5b                   	pop    ebx
c001ad56:	5e                   	pop    esi
c001ad57:	5f                   	pop    edi
c001ad58:	5d                   	pop    ebp
c001ad59:	c3                   	ret    

c001ad5a <IDE::waitInterrupt(unsigned char)>:
c001ad5a:	55                   	push   ebp
c001ad5b:	57                   	push   edi
c001ad5c:	56                   	push   esi
c001ad5d:	53                   	push   ebx
c001ad5e:	31 db                	xor    ebx,ebx
c001ad60:	83 ec 0c             	sub    esp,0xc
c001ad63:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ad67:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ad6c:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ad74:	89 e8                	mov    eax,ebp
c001ad76:	84 c0                	test   al,al
c001ad78:	75 30                	jne    c001adaa <IDE::waitInterrupt(unsigned char)+0x50>
c001ad7a:	50                   	push   eax
c001ad7b:	6a 0c                	push   0xc
c001ad7d:	56                   	push   esi
c001ad7e:	57                   	push   edi
c001ad7f:	e8 28 ff ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001ad84:	83 c4 10             	add    esp,0x10
c001ad87:	a8 01                	test   al,0x1
c001ad89:	75 27                	jne    c001adb2 <IDE::waitInterrupt(unsigned char)+0x58>
c001ad8b:	f6 c3 04             	test   bl,0x4
c001ad8e:	75 12                	jne    c001ada2 <IDE::waitInterrupt(unsigned char)+0x48>
c001ad90:	83 fb 32             	cmp    ebx,0x32
c001ad93:	7e 0d                	jle    c001ada2 <IDE::waitInterrupt(unsigned char)+0x48>
c001ad95:	83 ec 0c             	sub    esp,0xc
c001ad98:	6a 64                	push   0x64
c001ad9a:	e8 a1 a5 ff ff       	call   c0015340 <milliTenthSleep(unsigned int)>
c001ad9f:	83 c4 10             	add    esp,0x10
c001ada2:	83 fb 3c             	cmp    ebx,0x3c
c001ada5:	74 0b                	je     c001adb2 <IDE::waitInterrupt(unsigned char)+0x58>
c001ada7:	43                   	inc    ebx
c001ada8:	eb c2                	jmp    c001ad6c <IDE::waitInterrupt(unsigned char)+0x12>
c001adaa:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001adb2:	83 c4 0c             	add    esp,0xc
c001adb5:	89 e8                	mov    eax,ebp
c001adb7:	5b                   	pop    ebx
c001adb8:	5e                   	pop    esi
c001adb9:	5f                   	pop    edi
c001adba:	5d                   	pop    ebp
c001adbb:	c3                   	ret    

c001adbc <ideChannel0IRQHandler(regs*, void*)>:
c001adbc:	83 ec 10             	sub    esp,0x10
c001adbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001adc3:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001adca:	6a 07                	push   0x7
c001adcc:	6a 00                	push   0x0
c001adce:	50                   	push   eax
c001adcf:	e8 d8 fe ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001add4:	83 c4 1c             	add    esp,0x1c
c001add7:	c3                   	ret    

c001add8 <ideChannel1IRQHandler(regs*, void*)>:
c001add8:	83 ec 10             	sub    esp,0x10
c001addb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001addf:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ade6:	6a 07                	push   0x7
c001ade8:	6a 01                	push   0x1
c001adea:	50                   	push   eax
c001adeb:	e8 bc fe ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001adf0:	83 c4 1c             	add    esp,0x1c
c001adf3:	c3                   	ret    

c001adf4 <IDE::enableIRQs(unsigned char, bool)>:
c001adf4:	57                   	push   edi
c001adf5:	b8 02 00 00 00       	mov    eax,0x2
c001adfa:	56                   	push   esi
c001adfb:	53                   	push   ebx
c001adfc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ae00:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ae04:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ae09:	74 02                	je     c001ae0d <IDE::enableIRQs(unsigned char, bool)+0x19>
c001ae0b:	31 c0                	xor    eax,eax
c001ae0d:	0f b6 db             	movzx  ebx,bl
c001ae10:	bf 04 00 00 00       	mov    edi,0x4
c001ae15:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001ae1c:	50                   	push   eax
c001ae1d:	6a 0c                	push   0xc
c001ae1f:	53                   	push   ebx
c001ae20:	56                   	push   esi
c001ae21:	e8 c6 fd ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ae26:	83 c4 10             	add    esp,0x10
c001ae29:	50                   	push   eax
c001ae2a:	6a 0c                	push   0xc
c001ae2c:	53                   	push   ebx
c001ae2d:	56                   	push   esi
c001ae2e:	e8 79 fe ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001ae33:	83 c4 10             	add    esp,0x10
c001ae36:	4f                   	dec    edi
c001ae37:	75 f0                	jne    c001ae29 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001ae39:	5b                   	pop    ebx
c001ae3a:	5e                   	pop    esi
c001ae3b:	5f                   	pop    edi
c001ae3c:	c3                   	ret    
c001ae3d:	90                   	nop

c001ae3e <IDE::open(int, int, void*)>:
c001ae3e:	55                   	push   ebp
c001ae3f:	57                   	push   edi
c001ae40:	56                   	push   esi
c001ae41:	53                   	push   ebx
c001ae42:	83 ec 1c             	sub    esp,0x1c
c001ae45:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ae49:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ae52:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ae5b:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ae62:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ae69:	0f 85 de 02 00 00    	jne    c001b14d <IDE::open(int, int, void*)+0x30f>
c001ae6f:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ae75:	88 04 24             	mov    BYTE PTR [esp],al
c001ae78:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ae7b:	83 e0 7f             	and    eax,0x7f
c001ae7e:	83 f8 05             	cmp    eax,0x5
c001ae81:	74 05                	je     c001ae88 <IDE::open(int, int, void*)+0x4a>
c001ae83:	83 f8 0f             	cmp    eax,0xf
c001ae86:	75 32                	jne    c001aeba <IDE::open(int, int, void*)+0x7c>
c001ae88:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ae8e:	83 e0 fc             	and    eax,0xfffffffc
c001ae91:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ae98:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ae9e:	83 e0 fc             	and    eax,0xfffffffc
c001aea1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001aea8:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001aeae:	83 e0 fc             	and    eax,0xfffffffc
c001aeb1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001aeb8:	eb 14                	jmp    c001aece <IDE::open(int, int, void*)+0x90>
c001aeba:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001aec4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001aece:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001aed5:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001aedc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aee0:	89 c6                	mov    esi,eax
c001aee2:	bf f8 0c 00 00       	mov    edi,0xcf8
c001aee7:	c1 e6 10             	shl    esi,0x10
c001aeea:	89 e8                	mov    eax,ebp
c001aeec:	89 fa                	mov    edx,edi
c001aeee:	c1 e0 0b             	shl    eax,0xb
c001aef1:	09 f0                	or     eax,esi
c001aef3:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001aefa:	c1 e6 08             	shl    esi,0x8
c001aefd:	09 c6                	or     esi,eax
c001aeff:	89 f0                	mov    eax,esi
c001af01:	0d 08 00 00 80       	or     eax,0x80000008
c001af06:	ef                   	out    dx,eax
c001af07:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001af0c:	89 ca                	mov    edx,ecx
c001af0e:	ed                   	in     eax,dx
c001af0f:	c1 e8 10             	shr    eax,0x10
c001af12:	3d ff ff 00 00       	cmp    eax,0xffff
c001af17:	0f 84 f9 00 00 00    	je     c001b016 <IDE::open(int, int, void*)+0x1d8>
c001af1d:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001af23:	89 fa                	mov    edx,edi
c001af25:	89 f0                	mov    eax,esi
c001af27:	ef                   	out    dx,eax
c001af28:	b0 fe                	mov    al,0xfe
c001af2a:	89 ca                	mov    edx,ecx
c001af2c:	ee                   	out    dx,al
c001af2d:	89 f0                	mov    eax,esi
c001af2f:	89 fa                	mov    edx,edi
c001af31:	ef                   	out    dx,eax
c001af32:	89 ca                	mov    edx,ecx
c001af34:	ed                   	in     eax,dx
c001af35:	3c fe                	cmp    al,0xfe
c001af37:	0f 85 a9 00 00 00    	jne    c001afe6 <IDE::open(int, int, void*)+0x1a8>
c001af3d:	8b 15 b8 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024eb8
c001af43:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001af4a:	74 33                	je     c001af7f <IDE::open(int, int, void*)+0x141>
c001af4c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001af52:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001af56:	40                   	inc    eax
c001af57:	83 ec 0c             	sub    esp,0xc
c001af5a:	0f b6 c0             	movzx  eax,al
c001af5d:	50                   	push   eax
c001af5e:	55                   	push   ebp
c001af5f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af63:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001af69:	51                   	push   ecx
c001af6a:	e8 b9 3d ff ff       	call   c000ed28 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001af6f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001af74:	83 c4 1c             	add    esp,0x1c
c001af77:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001af7d:	eb 0a                	jmp    c001af89 <IDE::open(int, int, void*)+0x14b>
c001af7f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001af89:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001af90:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001af97:	c1 e1 10             	shl    ecx,0x10
c001af9a:	c1 e0 08             	shl    eax,0x8
c001af9d:	bf f8 0c 00 00       	mov    edi,0xcf8
c001afa2:	09 c1                	or     ecx,eax
c001afa4:	89 fa                	mov    edx,edi
c001afa6:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001afad:	c1 e0 0b             	shl    eax,0xb
c001afb0:	09 c1                	or     ecx,eax
c001afb2:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001afb8:	89 c8                	mov    eax,ecx
c001afba:	ef                   	out    dx,eax
c001afbb:	be fc 0c 00 00       	mov    esi,0xcfc
c001afc0:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001afc6:	89 f2                	mov    edx,esi
c001afc8:	ee                   	out    dx,al
c001afc9:	89 c8                	mov    eax,ecx
c001afcb:	89 fa                	mov    edx,edi
c001afcd:	ef                   	out    dx,eax
c001afce:	89 f2                	mov    edx,esi
c001afd0:	ed                   	in     eax,dx
c001afd1:	0f b6 c0             	movzx  eax,al
c001afd4:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001afda:	74 4a                	je     c001b026 <IDE::open(int, int, void*)+0x1e8>
c001afdc:	83 ec 0c             	sub    esp,0xc
c001afdf:	68 a0 19 02 c0       	push   0xc00219a0
c001afe4:	eb 38                	jmp    c001b01e <IDE::open(int, int, void*)+0x1e0>
c001afe6:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001afef:	75 1b                	jne    c001b00c <IDE::open(int, int, void*)+0x1ce>
c001aff1:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001aff5:	3d 80 00 00 00       	cmp    eax,0x80
c001affa:	74 07                	je     c001b003 <IDE::open(int, int, void*)+0x1c5>
c001affc:	3d 8a 00 00 00       	cmp    eax,0x8a
c001b001:	75 09                	jne    c001b00c <IDE::open(int, int, void*)+0x1ce>
c001b003:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b00a:	eb 1a                	jmp    c001b026 <IDE::open(int, int, void*)+0x1e8>
c001b00c:	83 ec 0c             	sub    esp,0xc
c001b00f:	68 a8 19 02 c0       	push   0xc00219a8
c001b014:	eb 08                	jmp    c001b01e <IDE::open(int, int, void*)+0x1e0>
c001b016:	83 ec 0c             	sub    esp,0xc
c001b019:	68 d9 19 02 c0       	push   0xc00219d9
c001b01e:	e8 3c 58 ff ff       	call   c001085f <KePanic(char const*)>
c001b023:	83 c4 10             	add    esp,0x10
c001b026:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001b02d:	74 1a                	je     c001b049 <IDE::open(int, int, void*)+0x20b>
c001b02f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b035:	83 e0 fc             	and    eax,0xfffffffc
c001b038:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b03f:	83 c0 08             	add    eax,0x8
c001b042:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b049:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b04f:	89 c2                	mov    edx,eax
c001b051:	83 e2 0f             	and    edx,0xf
c001b054:	83 fa 08             	cmp    edx,0x8
c001b057:	75 0a                	jne    c001b063 <IDE::open(int, int, void*)+0x225>
c001b059:	83 e8 02             	sub    eax,0x2
c001b05c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b063:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b069:	89 c2                	mov    edx,eax
c001b06b:	83 e2 0f             	and    edx,0xf
c001b06e:	83 fa 08             	cmp    edx,0x8
c001b071:	75 0a                	jne    c001b07d <IDE::open(int, int, void*)+0x23f>
c001b073:	83 e8 02             	sub    eax,0x2
c001b076:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b07d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b084:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b08b:	89 d0                	mov    eax,edx
c001b08d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b090:	8d 7a 01             	lea    edi,[edx+0x1]
c001b093:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b097:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b09b:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b09f:	83 e1 3f             	and    ecx,0x3f
c001b0a2:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b0a6:	89 f9                	mov    ecx,edi
c001b0a8:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b0af:	0f b6 c9             	movzx  ecx,cl
c001b0b2:	8d 78 02             	lea    edi,[eax+0x2]
c001b0b5:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b0b8:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b0bc:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001b0c0:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b0c4:	83 e2 3f             	and    edx,0x3f
c001b0c7:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b0cb:	89 f9                	mov    ecx,edi
c001b0cd:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001b0d3:	0f b6 d1             	movzx  edx,cl
c001b0d6:	8d 78 03             	lea    edi,[eax+0x3]
c001b0d9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b0dc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b0e0:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001b0e4:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001b0e8:	83 e1 3f             	and    ecx,0x3f
c001b0eb:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001b0ef:	89 f9                	mov    ecx,edi
c001b0f1:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001b0f7:	0f b6 c9             	movzx  ecx,cl
c001b0fa:	8d 78 04             	lea    edi,[eax+0x4]
c001b0fd:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b100:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001b104:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001b108:	89 fa                	mov    edx,edi
c001b10a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001b110:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001b114:	83 e2 3f             	and    edx,0x3f
c001b117:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001b11b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001b122:	66 85 f6             	test   si,si
c001b125:	74 65                	je     c001b18c <IDE::open(int, int, void*)+0x34e>
c001b127:	89 f9                	mov    ecx,edi
c001b129:	83 c0 05             	add    eax,0x5
c001b12c:	0f b6 d1             	movzx  edx,cl
c001b12f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b132:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b136:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001b13a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001b140:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001b144:	83 e0 3f             	and    eax,0x3f
c001b147:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001b14b:	eb 3f                	jmp    c001b18c <IDE::open(int, int, void*)+0x34e>
c001b14d:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001b153:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b15a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b161:	05 06 02 00 00       	add    eax,0x206
c001b166:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b16d:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001b174:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b17b:	05 06 02 00 00       	add    eax,0x206
c001b180:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b187:	e9 bd fe ff ff       	jmp    c001b049 <IDE::open(int, int, void*)+0x20b>
c001b18c:	50                   	push   eax
c001b18d:	50                   	push   eax
c001b18e:	6a 00                	push   0x0
c001b190:	53                   	push   ebx
c001b191:	e8 30 fa ff ff       	call   c001abc6 <IDE::prepareInterrupt(unsigned char)>
c001b196:	5a                   	pop    edx
c001b197:	59                   	pop    ecx
c001b198:	6a 01                	push   0x1
c001b19a:	53                   	push   ebx
c001b19b:	e8 26 fa ff ff       	call   c001abc6 <IDE::prepareInterrupt(unsigned char)>
c001b1a0:	83 c4 0c             	add    esp,0xc
c001b1a3:	6a 00                	push   0x0
c001b1a5:	6a 00                	push   0x0
c001b1a7:	53                   	push   ebx
c001b1a8:	e8 47 fc ff ff       	call   c001adf4 <IDE::enableIRQs(unsigned char, bool)>
c001b1ad:	83 c4 0c             	add    esp,0xc
c001b1b0:	6a 00                	push   0x0
c001b1b2:	6a 01                	push   0x1
c001b1b4:	53                   	push   ebx
c001b1b5:	e8 3a fc ff ff       	call   c001adf4 <IDE::enableIRQs(unsigned char, bool)>
c001b1ba:	83 c4 10             	add    esp,0x10
c001b1bd:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001b1c4:	74 34                	je     c001b1fa <IDE::open(int, int, void*)+0x3bc>
c001b1c6:	83 ec 0c             	sub    esp,0xc
c001b1c9:	53                   	push   ebx
c001b1ca:	6a 01                	push   0x1
c001b1cc:	68 bc ad 01 c0       	push   0xc001adbc
c001b1d1:	6a 0e                	push   0xe
c001b1d3:	53                   	push   ebx
c001b1d4:	e8 89 0b ff ff       	call   c000bd62 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b1d9:	83 c4 14             	add    esp,0x14
c001b1dc:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b1e2:	53                   	push   ebx
c001b1e3:	6a 01                	push   0x1
c001b1e5:	68 d8 ad 01 c0       	push   0xc001add8
c001b1ea:	6a 0f                	push   0xf
c001b1ec:	53                   	push   ebx
c001b1ed:	e8 70 0b ff ff       	call   c000bd62 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b1f2:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001b1f8:	eb 38                	jmp    c001b232 <IDE::open(int, int, void*)+0x3f4>
c001b1fa:	83 ec 0c             	sub    esp,0xc
c001b1fd:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001b207:	53                   	push   ebx
c001b208:	6a 00                	push   0x0
c001b20a:	68 bc ad 01 c0       	push   0xc001adbc
c001b20f:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001b215:	53                   	push   ebx
c001b216:	e8 47 0b ff ff       	call   c000bd62 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b21b:	83 c4 14             	add    esp,0x14
c001b21e:	53                   	push   ebx
c001b21f:	6a 00                	push   0x0
c001b221:	68 d8 ad 01 c0       	push   0xc001add8
c001b226:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001b22c:	53                   	push   ebx
c001b22d:	e8 30 0b ff ff       	call   c000bd62 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b232:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b234:	83 c4 20             	add    esp,0x20
c001b237:	83 ec 0c             	sub    esp,0xc
c001b23a:	53                   	push   ebx
c001b23b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b23e:	83 c4 0c             	add    esp,0xc
c001b241:	6a 07                	push   0x7
c001b243:	6a 00                	push   0x0
c001b245:	53                   	push   ebx
c001b246:	e8 61 fa ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001b24b:	83 c4 0c             	add    esp,0xc
c001b24e:	6a 07                	push   0x7
c001b250:	6a 01                	push   0x1
c001b252:	53                   	push   ebx
c001b253:	e8 54 fa ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001b258:	83 c4 0c             	add    esp,0xc
c001b25b:	6a 01                	push   0x1
c001b25d:	6a 00                	push   0x0
c001b25f:	53                   	push   ebx
c001b260:	e8 8f fb ff ff       	call   c001adf4 <IDE::enableIRQs(unsigned char, bool)>
c001b265:	83 c4 0c             	add    esp,0xc
c001b268:	6a 01                	push   0x1
c001b26a:	6a 01                	push   0x1
c001b26c:	53                   	push   ebx
c001b26d:	e8 82 fb ff ff       	call   c001adf4 <IDE::enableIRQs(unsigned char, bool)>
c001b272:	83 c4 2c             	add    esp,0x2c
c001b275:	31 c0                	xor    eax,eax
c001b277:	5b                   	pop    ebx
c001b278:	5e                   	pop    esi
c001b279:	5f                   	pop    edi
c001b27a:	5d                   	pop    ebp
c001b27b:	c3                   	ret    

c001b27c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001b27c:	55                   	push   ebp
c001b27d:	57                   	push   edi
c001b27e:	56                   	push   esi
c001b27f:	53                   	push   ebx
c001b280:	83 ec 1c             	sub    esp,0x1c
c001b283:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b287:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b28b:	8d 42 f8             	lea    eax,[edx-0x8]
c001b28e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b292:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b296:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001b29a:	3c 03                	cmp    al,0x3
c001b29c:	77 5a                	ja     c001b2f8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001b29e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b2a2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b2a6:	0f b6 db             	movzx  ebx,bl
c001b2a9:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001b2ac:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b2b1:	0c 80                	or     al,0x80
c001b2b3:	50                   	push   eax
c001b2b4:	6a 0c                	push   0xc
c001b2b6:	53                   	push   ebx
c001b2b7:	56                   	push   esi
c001b2b8:	e8 2f f9 ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b2bd:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b2c2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b2c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b2ca:	0f b6 d2             	movzx  edx,dl
c001b2cd:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b2d1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b2d3:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b2d8:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001b2dc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b2e0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b2e4:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b2ec:	83 c4 2c             	add    esp,0x2c
c001b2ef:	5b                   	pop    ebx
c001b2f0:	5e                   	pop    esi
c001b2f1:	5f                   	pop    edi
c001b2f2:	5d                   	pop    ebp
c001b2f3:	e9 f4 f8 ff ff       	jmp    c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b2f8:	0f b6 c2             	movzx  eax,dl
c001b2fb:	83 f8 07             	cmp    eax,0x7
c001b2fe:	77 12                	ja     c001b312 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001b300:	0f b6 c2             	movzx  eax,dl
c001b303:	0f b6 db             	movzx  ebx,bl
c001b306:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001b30e:	01 c2                	add    edx,eax
c001b310:	eb 2f                	jmp    c001b341 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b312:	83 f8 0d             	cmp    eax,0xd
c001b315:	77 13                	ja     c001b32a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001b317:	0f b6 db             	movzx  ebx,bl
c001b31a:	0f b6 d2             	movzx  edx,dl
c001b31d:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001b324:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b328:	eb 17                	jmp    c001b341 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001b32a:	83 f8 15             	cmp    eax,0x15
c001b32d:	77 14                	ja     c001b343 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001b32f:	0f b6 db             	movzx  ebx,bl
c001b332:	0f b6 d2             	movzx  edx,dl
c001b335:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001b33d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b341:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001b343:	83 c4 1c             	add    esp,0x1c
c001b346:	5b                   	pop    ebx
c001b347:	5e                   	pop    esi
c001b348:	5f                   	pop    edi
c001b349:	5d                   	pop    ebp
c001b34a:	c3                   	ret    
c001b34b:	90                   	nop

c001b34c <IDE::detect()>:
c001b34c:	55                   	push   ebp
c001b34d:	57                   	push   edi
c001b34e:	56                   	push   esi
c001b34f:	53                   	push   ebx
c001b350:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b356:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001b35d:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001b364:	0f 85 a4 02 00 00    	jne    c001b60e <IDE::detect()+0x2c2>
c001b36a:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001b371:	31 f6                	xor    esi,esi
c001b373:	31 ed                	xor    ebp,ebp
c001b375:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b37d:	89 e8                	mov    eax,ebp
c001b37f:	c1 e0 06             	shl    eax,0x6
c001b382:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001b38a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b38e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b392:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b396:	c1 e0 04             	shl    eax,0x4
c001b399:	83 c8 a0             	or     eax,0xffffffa0
c001b39c:	0f b6 c0             	movzx  eax,al
c001b39f:	50                   	push   eax
c001b3a0:	6a 06                	push   0x6
c001b3a2:	56                   	push   esi
c001b3a3:	53                   	push   ebx
c001b3a4:	e8 43 f8 ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b3a9:	83 c4 0c             	add    esp,0xc
c001b3ac:	6a 0c                	push   0xc
c001b3ae:	56                   	push   esi
c001b3af:	53                   	push   ebx
c001b3b0:	e8 f7 f8 ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001b3b5:	83 c4 0c             	add    esp,0xc
c001b3b8:	6a 0c                	push   0xc
c001b3ba:	56                   	push   esi
c001b3bb:	53                   	push   ebx
c001b3bc:	e8 eb f8 ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001b3c1:	83 c4 0c             	add    esp,0xc
c001b3c4:	6a 0c                	push   0xc
c001b3c6:	56                   	push   esi
c001b3c7:	53                   	push   ebx
c001b3c8:	e8 df f8 ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001b3cd:	83 c4 0c             	add    esp,0xc
c001b3d0:	6a 0c                	push   0xc
c001b3d2:	56                   	push   esi
c001b3d3:	53                   	push   ebx
c001b3d4:	e8 d3 f8 ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001b3d9:	68 ec 00 00 00       	push   0xec
c001b3de:	6a 07                	push   0x7
c001b3e0:	56                   	push   esi
c001b3e1:	53                   	push   ebx
c001b3e2:	e8 05 f8 ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b3e7:	83 c4 1c             	add    esp,0x1c
c001b3ea:	6a 0c                	push   0xc
c001b3ec:	56                   	push   esi
c001b3ed:	53                   	push   ebx
c001b3ee:	e8 b9 f8 ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001b3f3:	83 c4 0c             	add    esp,0xc
c001b3f6:	6a 0c                	push   0xc
c001b3f8:	56                   	push   esi
c001b3f9:	53                   	push   ebx
c001b3fa:	e8 ad f8 ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001b3ff:	83 c4 0c             	add    esp,0xc
c001b402:	6a 0c                	push   0xc
c001b404:	56                   	push   esi
c001b405:	53                   	push   ebx
c001b406:	e8 a1 f8 ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001b40b:	83 c4 0c             	add    esp,0xc
c001b40e:	6a 0c                	push   0xc
c001b410:	56                   	push   esi
c001b411:	53                   	push   ebx
c001b412:	e8 95 f8 ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001b417:	83 c4 0c             	add    esp,0xc
c001b41a:	6a 0c                	push   0xc
c001b41c:	56                   	push   esi
c001b41d:	53                   	push   ebx
c001b41e:	e8 89 f8 ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001b423:	83 c4 10             	add    esp,0x10
c001b426:	84 c0                	test   al,al
c001b428:	0f 84 60 01 00 00    	je     c001b58e <IDE::detect()+0x242>
c001b42e:	31 ff                	xor    edi,edi
c001b430:	50                   	push   eax
c001b431:	6a 0c                	push   0xc
c001b433:	56                   	push   esi
c001b434:	53                   	push   ebx
c001b435:	e8 72 f8 ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001b43a:	83 c4 10             	add    esp,0x10
c001b43d:	a8 01                	test   al,0x1
c001b43f:	0f 85 6a 01 00 00    	jne    c001b5af <IDE::detect()+0x263>
c001b445:	a8 80                	test   al,0x80
c001b447:	75 04                	jne    c001b44d <IDE::detect()+0x101>
c001b449:	a8 08                	test   al,0x8
c001b44b:	75 23                	jne    c001b470 <IDE::detect()+0x124>
c001b44d:	47                   	inc    edi
c001b44e:	81 ff 17 01 00 00    	cmp    edi,0x117
c001b454:	7e da                	jle    c001b430 <IDE::detect()+0xe4>
c001b456:	83 ec 0c             	sub    esp,0xc
c001b459:	6a 32                	push   0x32
c001b45b:	e8 e0 9e ff ff       	call   c0015340 <milliTenthSleep(unsigned int)>
c001b460:	83 c4 10             	add    esp,0x10
c001b463:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001b469:	75 c5                	jne    c001b430 <IDE::detect()+0xe4>
c001b46b:	e9 3f 01 00 00       	jmp    c001b5af <IDE::detect()+0x263>
c001b470:	31 c9                	xor    ecx,ecx
c001b472:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001b476:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b47a:	83 ec 0c             	sub    esp,0xc
c001b47d:	68 80 00 00 00       	push   0x80
c001b482:	57                   	push   edi
c001b483:	6a 00                	push   0x0
c001b485:	56                   	push   esi
c001b486:	53                   	push   ebx
c001b487:	e8 f0 fd ff ff       	call   c001b27c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001b48c:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001b491:	89 e8                	mov    eax,ebp
c001b493:	89 d1                	mov    ecx,edx
c001b495:	c1 e0 06             	shl    eax,0x6
c001b498:	01 d8                	add    eax,ebx
c001b49a:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001b4a1:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001b4a8:	89 f2                	mov    edx,esi
c001b4aa:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001b4b0:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001b4b4:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001b4ba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b4be:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001b4c5:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001b4cd:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001b4d4:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001b4dc:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001b4e2:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001b4e9:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001b4ef:	8d 54 24 58          	lea    edx,[esp+0x58]
c001b4f3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b4f7:	83 c4 20             	add    esp,0x20
c001b4fa:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001b4fd:	83 c0 02             	add    eax,0x2
c001b500:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001b506:	83 c7 02             	add    edi,0x2
c001b509:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001b50c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001b512:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001b516:	75 e2                	jne    c001b4fa <IDE::detect()+0x1ae>
c001b518:	89 e8                	mov    eax,ebp
c001b51a:	c1 e0 06             	shl    eax,0x6
c001b51d:	01 d8                	add    eax,ebx
c001b51f:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001b526:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001b52d:	c1 ea 09             	shr    edx,0x9
c001b530:	83 e2 01             	and    edx,0x1
c001b533:	80 e1 01             	and    cl,0x1
c001b536:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001b53c:	75 22                	jne    c001b560 <IDE::detect()+0x214>
c001b53e:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001b545:	74 46                	je     c001b58d <IDE::detect()+0x241>
c001b547:	83 ec 0c             	sub    esp,0xc
c001b54a:	68 7c 01 00 00       	push   0x17c
c001b54f:	e8 46 c5 fe ff       	call   c0007a9a <malloc>
c001b554:	89 c7                	mov    edi,eax
c001b556:	89 04 24             	mov    DWORD PTR [esp],eax
c001b559:	e8 1a 05 00 00       	call   c001ba78 <ATA::ATA()>
c001b55e:	eb 17                	jmp    c001b577 <IDE::detect()+0x22b>
c001b560:	83 ec 0c             	sub    esp,0xc
c001b563:	68 84 01 00 00       	push   0x184
c001b568:	e8 2d c5 fe ff       	call   c0007a9a <malloc>
c001b56d:	89 c7                	mov    edi,eax
c001b56f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b572:	e8 45 0e 00 00       	call   c001c3bc <ATAPI::ATAPI()>
c001b577:	5a                   	pop    edx
c001b578:	59                   	pop    ecx
c001b579:	57                   	push   edi
c001b57a:	53                   	push   ebx
c001b57b:	e8 36 08 ff ff       	call   c000bdb6 <Device::addChild(Device*)>
c001b580:	8b 07                	mov    eax,DWORD PTR [edi]
c001b582:	53                   	push   ebx
c001b583:	55                   	push   ebp
c001b584:	6a 00                	push   0x0
c001b586:	57                   	push   edi
c001b587:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b58a:	83 c4 20             	add    esp,0x20
c001b58d:	45                   	inc    ebp
c001b58e:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001b593:	74 0d                	je     c001b5a2 <IDE::detect()+0x256>
c001b595:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001b59d:	e9 db fd ff ff       	jmp    c001b37d <IDE::detect()+0x31>
c001b5a2:	4e                   	dec    esi
c001b5a3:	74 69                	je     c001b60e <IDE::detect()+0x2c2>
c001b5a5:	be 01 00 00 00       	mov    esi,0x1
c001b5aa:	e9 c6 fd ff ff       	jmp    c001b375 <IDE::detect()+0x29>
c001b5af:	50                   	push   eax
c001b5b0:	6a 04                	push   0x4
c001b5b2:	56                   	push   esi
c001b5b3:	53                   	push   ebx
c001b5b4:	e8 f3 f6 ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001b5b9:	83 c4 0c             	add    esp,0xc
c001b5bc:	89 c7                	mov    edi,eax
c001b5be:	6a 05                	push   0x5
c001b5c0:	56                   	push   esi
c001b5c1:	53                   	push   ebx
c001b5c2:	e8 e5 f6 ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001b5c7:	83 c4 10             	add    esp,0x10
c001b5ca:	89 f9                	mov    ecx,edi
c001b5cc:	0f b6 c0             	movzx  eax,al
c001b5cf:	0f b6 f9             	movzx  edi,cl
c001b5d2:	83 ff 14             	cmp    edi,0x14
c001b5d5:	75 07                	jne    c001b5de <IDE::detect()+0x292>
c001b5d7:	3d eb 00 00 00       	cmp    eax,0xeb
c001b5dc:	eb 0a                	jmp    c001b5e8 <IDE::detect()+0x29c>
c001b5de:	3d 96 00 00 00       	cmp    eax,0x96
c001b5e3:	75 a9                	jne    c001b58e <IDE::detect()+0x242>
c001b5e5:	83 ff 69             	cmp    edi,0x69
c001b5e8:	75 a4                	jne    c001b58e <IDE::detect()+0x242>
c001b5ea:	68 a1 00 00 00       	push   0xa1
c001b5ef:	6a 07                	push   0x7
c001b5f1:	56                   	push   esi
c001b5f2:	53                   	push   ebx
c001b5f3:	e8 f4 f5 ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b5f8:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001b5ff:	e8 3c 9d ff ff       	call   c0015340 <milliTenthSleep(unsigned int)>
c001b604:	83 c4 10             	add    esp,0x10
c001b607:	b1 01                	mov    cl,0x1
c001b609:	e9 64 fe ff ff       	jmp    c001b472 <IDE::detect()+0x126>
c001b60e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b614:	5b                   	pop    ebx
c001b615:	5e                   	pop    esi
c001b616:	5f                   	pop    edi
c001b617:	5d                   	pop    ebp
c001b618:	c3                   	ret    
c001b619:	90                   	nop

c001b61a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001b61a:	55                   	push   ebp
c001b61b:	57                   	push   edi
c001b61c:	56                   	push   esi
c001b61d:	53                   	push   ebx
c001b61e:	83 ec 1c             	sub    esp,0x1c
c001b621:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b625:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001b629:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b62d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001b631:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b635:	88 c3                	mov    bl,al
c001b637:	25 ff 00 00 00       	and    eax,0xff
c001b63c:	0f 84 88 00 00 00    	je     c001b6ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b642:	83 ec 0c             	sub    esp,0xc
c001b645:	89 c7                	mov    edi,eax
c001b647:	68 03 1a 02 c0       	push   0xc0021a03
c001b64c:	e8 31 f3 fe ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c001b651:	83 c4 10             	add    esp,0x10
c001b654:	83 ff 01             	cmp    edi,0x1
c001b657:	74 6b                	je     c001b6c4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001b659:	83 ff 02             	cmp    edi,0x2
c001b65c:	75 58                	jne    c001b6b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001b65e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001b663:	01 ff                	add    edi,edi
c001b665:	50                   	push   eax
c001b666:	09 fe                	or     esi,edi
c001b668:	6a 01                	push   0x1
c001b66a:	89 f0                	mov    eax,esi
c001b66c:	0f b6 f0             	movzx  esi,al
c001b66f:	c1 e6 06             	shl    esi,0x6
c001b672:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001b67a:	50                   	push   eax
c001b67b:	55                   	push   ebp
c001b67c:	e8 2b f6 ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001b681:	83 c4 10             	add    esp,0x10
c001b684:	a8 01                	test   al,0x1
c001b686:	74 02                	je     c001b68a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001b688:	b3 07                	mov    bl,0x7
c001b68a:	a8 02                	test   al,0x2
c001b68c:	74 02                	je     c001b690 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001b68e:	b3 03                	mov    bl,0x3
c001b690:	a8 04                	test   al,0x4
c001b692:	74 02                	je     c001b696 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001b694:	b3 14                	mov    bl,0x14
c001b696:	a8 08                	test   al,0x8
c001b698:	74 02                	je     c001b69c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001b69a:	b3 03                	mov    bl,0x3
c001b69c:	a8 10                	test   al,0x10
c001b69e:	74 02                	je     c001b6a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001b6a0:	b3 15                	mov    bl,0x15
c001b6a2:	a8 20                	test   al,0x20
c001b6a4:	74 02                	je     c001b6a8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001b6a6:	b3 03                	mov    bl,0x3
c001b6a8:	a8 40                	test   al,0x40
c001b6aa:	74 02                	je     c001b6ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001b6ac:	b3 16                	mov    bl,0x16
c001b6ae:	a8 80                	test   al,0x80
c001b6b0:	74 18                	je     c001b6ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6b2:	b3 0d                	mov    bl,0xd
c001b6b4:	eb 14                	jmp    c001b6ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6b6:	83 ff 03             	cmp    edi,0x3
c001b6b9:	74 0d                	je     c001b6c8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001b6bb:	83 ff 04             	cmp    edi,0x4
c001b6be:	75 0a                	jne    c001b6ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6c0:	b3 08                	mov    bl,0x8
c001b6c2:	eb 06                	jmp    c001b6ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6c4:	b3 13                	mov    bl,0x13
c001b6c6:	eb 02                	jmp    c001b6ca <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001b6c8:	b3 17                	mov    bl,0x17
c001b6ca:	83 c4 1c             	add    esp,0x1c
c001b6cd:	88 d8                	mov    al,bl
c001b6cf:	5b                   	pop    ebx
c001b6d0:	5e                   	pop    esi
c001b6d1:	5f                   	pop    edi
c001b6d2:	5d                   	pop    ebp
c001b6d3:	c3                   	ret    

c001b6d4 <IDE::polling(unsigned char, unsigned int)>:
c001b6d4:	57                   	push   edi
c001b6d5:	56                   	push   esi
c001b6d6:	53                   	push   ebx
c001b6d7:	bb 04 00 00 00       	mov    ebx,0x4
c001b6dc:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001b6e0:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b6e5:	52                   	push   edx
c001b6e6:	6a 0c                	push   0xc
c001b6e8:	56                   	push   esi
c001b6e9:	57                   	push   edi
c001b6ea:	e8 bd f5 ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001b6ef:	83 c4 10             	add    esp,0x10
c001b6f2:	4b                   	dec    ebx
c001b6f3:	75 f0                	jne    c001b6e5 <IDE::polling(unsigned char, unsigned int)+0x11>
c001b6f5:	bb a0 86 01 00       	mov    ebx,0x186a0
c001b6fa:	50                   	push   eax
c001b6fb:	6a 0c                	push   0xc
c001b6fd:	56                   	push   esi
c001b6fe:	57                   	push   edi
c001b6ff:	e8 a8 f5 ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001b704:	83 c4 10             	add    esp,0x10
c001b707:	a8 01                	test   al,0x1
c001b709:	75 17                	jne    c001b722 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b70b:	a8 20                	test   al,0x20
c001b70d:	75 0f                	jne    c001b71e <IDE::polling(unsigned char, unsigned int)+0x4a>
c001b70f:	4b                   	dec    ebx
c001b710:	74 10                	je     c001b722 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001b712:	a8 80                	test   al,0x80
c001b714:	75 e4                	jne    c001b6fa <IDE::polling(unsigned char, unsigned int)+0x26>
c001b716:	a8 08                	test   al,0x8
c001b718:	74 e0                	je     c001b6fa <IDE::polling(unsigned char, unsigned int)+0x26>
c001b71a:	31 c0                	xor    eax,eax
c001b71c:	eb 06                	jmp    c001b724 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b71e:	b0 01                	mov    al,0x1
c001b720:	eb 02                	jmp    c001b724 <IDE::polling(unsigned char, unsigned int)+0x50>
c001b722:	b0 02                	mov    al,0x2
c001b724:	5b                   	pop    ebx
c001b725:	5e                   	pop    esi
c001b726:	5f                   	pop    edi
c001b727:	c3                   	ret    

c001b728 <SATABus::close(int, int, void*)>:
c001b728:	31 c0                	xor    eax,eax
c001b72a:	c3                   	ret    
c001b72b:	90                   	nop

c001b72c <SATABus::detect()>:
c001b72c:	c3                   	ret    
c001b72d:	90                   	nop

c001b72e <SATABus::SATABus()>:
c001b72e:	83 ec 0c             	sub    esp,0xc
c001b731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b735:	83 ec 08             	sub    esp,0x8
c001b738:	68 3c 1a 02 c0       	push   0xc0021a3c
c001b73d:	50                   	push   eax
c001b73e:	e8 b5 09 ff ff       	call   c000c0f8 <HardDiskController::HardDiskController(char const*)>
c001b743:	83 c4 10             	add    esp,0x10
c001b746:	ba 68 1a 02 c0       	mov    edx,0xc0021a68
c001b74b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b74f:	89 10                	mov    DWORD PTR [eax],edx
c001b751:	83 ec 0c             	sub    esp,0xc
c001b754:	6a 50                	push   0x50
c001b756:	e8 13 c7 fe ff       	call   c0007e6e <Phys::allocateContiguousPages(int)>
c001b75b:	83 c4 10             	add    esp,0x10
c001b75e:	89 c2                	mov    edx,eax
c001b760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b764:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b76a:	83 ec 0c             	sub    esp,0xc
c001b76d:	6a 50                	push   0x50
c001b76f:	e8 95 de fe ff       	call   c0009609 <Virt::allocateKernelVirtualPages(int)>
c001b774:	83 c4 10             	add    esp,0x10
c001b777:	89 c2                	mov    edx,eax
c001b779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b77d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b783:	a1 b0 4f 02 c0       	mov    eax,ds:0xc0024fb0
c001b788:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b78c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001b792:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b796:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b79c:	83 ec 0c             	sub    esp,0xc
c001b79f:	6a 03                	push   0x3
c001b7a1:	6a 50                	push   0x50
c001b7a3:	51                   	push   ecx
c001b7a4:	52                   	push   edx
c001b7a5:	50                   	push   eax
c001b7a6:	e8 59 e8 fe ff       	call   c000a004 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001b7ab:	83 c4 20             	add    esp,0x20
c001b7ae:	90                   	nop
c001b7af:	83 c4 0c             	add    esp,0xc
c001b7b2:	c3                   	ret    
c001b7b3:	90                   	nop

c001b7b4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b7b8:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001b7bb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b7be:	09 c2                	or     edx,eax
c001b7c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7c4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b7ca:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b7cc:	31 c0                	xor    eax,eax
c001b7ce:	c1 e9 08             	shr    ecx,0x8
c001b7d1:	83 e1 0f             	and    ecx,0xf
c001b7d4:	39 c8                	cmp    eax,ecx
c001b7d6:	74 0a                	je     c001b7e2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001b7d8:	f6 c2 01             	test   dl,0x1
c001b7db:	74 08                	je     c001b7e5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001b7dd:	d1 ea                	shr    edx,1
c001b7df:	40                   	inc    eax
c001b7e0:	eb f2                	jmp    c001b7d4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001b7e2:	83 c8 ff             	or     eax,0xffffffff
c001b7e5:	c3                   	ret    

c001b7e6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001b7e6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b7ea:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b7ed:	89 c2                	mov    edx,eax
c001b7ef:	c1 ea 08             	shr    edx,0x8
c001b7f2:	83 e2 0f             	and    edx,0xf
c001b7f5:	4a                   	dec    edx
c001b7f6:	75 32                	jne    c001b82a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b7f8:	83 e0 0f             	and    eax,0xf
c001b7fb:	83 f8 03             	cmp    eax,0x3
c001b7fe:	75 2a                	jne    c001b82a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001b800:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001b803:	b8 02 00 00 00       	mov    eax,0x2
c001b808:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001b80e:	74 1c                	je     c001b82c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b810:	b8 04 00 00 00       	mov    eax,0x4
c001b815:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001b81b:	74 0f                	je     c001b82c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001b81d:	31 c0                	xor    eax,eax
c001b81f:	83 fa 03             	cmp    edx,0x3
c001b822:	0f 94 c0             	sete   al
c001b825:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001b829:	c3                   	ret    
c001b82a:	31 c0                	xor    eax,eax
c001b82c:	c3                   	ret    
c001b82d:	90                   	nop

c001b82e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001b82e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b832:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b835:	0f ba e2 0f          	bt     edx,0xf
c001b839:	72 f7                	jb     c001b832 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001b83b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b83e:	83 ca 10             	or     edx,0x10
c001b841:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b844:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b847:	83 ca 01             	or     edx,0x1
c001b84a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b84d:	c3                   	ret    

c001b84e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001b84e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b852:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b855:	83 e2 fe             	and    edx,0xfffffffe
c001b858:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b85b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b85e:	83 e2 ef             	and    edx,0xffffffef
c001b861:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001b864:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b867:	0f ba e2 0e          	bt     edx,0xe
c001b86b:	72 f7                	jb     c001b864 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b86d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001b870:	0f ba e2 0f          	bt     edx,0xf
c001b874:	72 ee                	jb     c001b864 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001b876:	c3                   	ret    
c001b877:	90                   	nop

c001b878 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001b878:	55                   	push   ebp
c001b879:	57                   	push   edi
c001b87a:	56                   	push   esi
c001b87b:	53                   	push   ebx
c001b87c:	83 ec 1c             	sub    esp,0x1c
c001b87f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b883:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b887:	53                   	push   ebx
c001b888:	56                   	push   esi
c001b889:	e8 c0 ff ff ff       	call   c001b84e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b88e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001b892:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b898:	83 ec 0c             	sub    esp,0xc
c001b89b:	c1 e5 0a             	shl    ebp,0xa
c001b89e:	01 e8                	add    eax,ebp
c001b8a0:	89 03                	mov    DWORD PTR [ebx],eax
c001b8a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b8a4:	68 00 04 00 00       	push   0x400
c001b8a9:	6a 00                	push   0x0
c001b8ab:	50                   	push   eax
c001b8ac:	e8 3f 4c fe ff       	call   c00004f0 <memset>
c001b8b1:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001b8b7:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001b8bb:	01 e8                	add    eax,ebp
c001b8bd:	83 c4 1c             	add    esp,0x1c
c001b8c0:	89 03                	mov    DWORD PTR [ebx],eax
c001b8c2:	c1 e2 08             	shl    edx,0x8
c001b8c5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b8cc:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001b8d2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001b8d8:	01 f8                	add    eax,edi
c001b8da:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b8dd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001b8e0:	68 00 01 00 00       	push   0x100
c001b8e5:	6a 00                	push   0x0
c001b8e7:	50                   	push   eax
c001b8e8:	e8 03 4c fe ff       	call   c00004f0 <memset>
c001b8ed:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001b8f3:	01 fa                	add    edx,edi
c001b8f5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001b8f9:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001b8fc:	c1 e7 0d             	shl    edi,0xd
c001b8ff:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b906:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001b90c:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001b912:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b916:	31 ff                	xor    edi,edi
c001b918:	83 c4 10             	add    esp,0x10
c001b91b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001b921:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b925:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001b92b:	83 c5 20             	add    ebp,0x20
c001b92e:	01 f8                	add    eax,edi
c001b930:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b933:	52                   	push   edx
c001b934:	68 00 01 00 00       	push   0x100
c001b939:	6a 00                	push   0x0
c001b93b:	50                   	push   eax
c001b93c:	e8 af 4b fe ff       	call   c00004f0 <memset>
c001b941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b945:	83 c4 10             	add    esp,0x10
c001b948:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001b94e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001b955:	01 f8                	add    eax,edi
c001b957:	81 c7 00 01 00 00    	add    edi,0x100
c001b95d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b960:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001b966:	75 b3                	jne    c001b91b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001b968:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b96f:	50                   	push   eax
c001b970:	50                   	push   eax
c001b971:	53                   	push   ebx
c001b972:	56                   	push   esi
c001b973:	e8 b6 fe ff ff       	call   c001b82e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b978:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001b97f:	83 c4 2c             	add    esp,0x2c
c001b982:	5b                   	pop    ebx
c001b983:	5e                   	pop    esi
c001b984:	5f                   	pop    edi
c001b985:	5d                   	pop    ebp
c001b986:	c3                   	ret    
c001b987:	90                   	nop

c001b988 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001b988:	55                   	push   ebp
c001b989:	57                   	push   edi
c001b98a:	56                   	push   esi
c001b98b:	53                   	push   ebx
c001b98c:	31 db                	xor    ebx,ebx
c001b98e:	83 ec 0c             	sub    esp,0xc
c001b991:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b995:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b999:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001b99c:	f7 c7 01 00 00 00    	test   edi,0x1
c001b9a2:	74 7a                	je     c001ba1e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b9a4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b9a8:	89 d8                	mov    eax,ebx
c001b9aa:	c1 e0 07             	shl    eax,0x7
c001b9ad:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001b9b4:	55                   	push   ebp
c001b9b5:	56                   	push   esi
c001b9b6:	e8 2b fe ff ff       	call   c001b7e6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001b9bb:	5a                   	pop    edx
c001b9bc:	83 f8 01             	cmp    eax,0x1
c001b9bf:	59                   	pop    ecx
c001b9c0:	75 21                	jne    c001b9e3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001b9c2:	50                   	push   eax
c001b9c3:	53                   	push   ebx
c001b9c4:	55                   	push   ebp
c001b9c5:	56                   	push   esi
c001b9c6:	e8 ad fe ff ff       	call   c001b878 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b9cb:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001b9d2:	e8 c3 c0 fe ff       	call   c0007a9a <malloc>
c001b9d7:	89 c5                	mov    ebp,eax
c001b9d9:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9dc:	e8 99 10 00 00       	call   c001ca7a <SATA::SATA()>
c001b9e1:	eb 24                	jmp    c001ba07 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001b9e3:	83 f8 04             	cmp    eax,0x4
c001b9e6:	75 36                	jne    c001ba1e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001b9e8:	51                   	push   ecx
c001b9e9:	53                   	push   ebx
c001b9ea:	55                   	push   ebp
c001b9eb:	56                   	push   esi
c001b9ec:	e8 87 fe ff ff       	call   c001b878 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b9f1:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001b9f8:	e8 9d c0 fe ff       	call   c0007a9a <malloc>
c001b9fd:	89 c5                	mov    ebp,eax
c001b9ff:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba02:	e8 d5 17 00 00       	call   c001d1dc <SATAPI::SATAPI()>
c001ba07:	58                   	pop    eax
c001ba08:	5a                   	pop    edx
c001ba09:	55                   	push   ebp
c001ba0a:	56                   	push   esi
c001ba0b:	e8 a6 03 ff ff       	call   c000bdb6 <Device::addChild(Device*)>
c001ba10:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ba13:	56                   	push   esi
c001ba14:	6a 00                	push   0x0
c001ba16:	53                   	push   ebx
c001ba17:	55                   	push   ebp
c001ba18:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba1b:	83 c4 20             	add    esp,0x20
c001ba1e:	d1 ef                	shr    edi,1
c001ba20:	43                   	inc    ebx
c001ba21:	83 fb 20             	cmp    ebx,0x20
c001ba24:	0f 85 72 ff ff ff    	jne    c001b99c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001ba2a:	83 c4 0c             	add    esp,0xc
c001ba2d:	5b                   	pop    ebx
c001ba2e:	5e                   	pop    esi
c001ba2f:	5f                   	pop    edi
c001ba30:	5d                   	pop    ebp
c001ba31:	c3                   	ret    

c001ba32 <SATABus::open(int, int, void*)>:
c001ba32:	83 ec 14             	sub    esp,0x14
c001ba35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba39:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001ba3f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ba45:	52                   	push   edx
c001ba46:	50                   	push   eax
c001ba47:	e8 3c ff ff ff       	call   c001b988 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001ba4c:	31 c0                	xor    eax,eax
c001ba4e:	83 c4 1c             	add    esp,0x1c
c001ba51:	c3                   	ret    

c001ba52 <ATA::close(int, int, void*)>:
c001ba52:	83 ec 0c             	sub    esp,0xc
c001ba55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba59:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ba5f:	85 c0                	test   eax,eax
c001ba61:	74 0c                	je     c001ba6f <ATA::close(int, int, void*)+0x1d>
c001ba63:	83 ec 0c             	sub    esp,0xc
c001ba66:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba68:	50                   	push   eax
c001ba69:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ba6c:	83 c4 10             	add    esp,0x10
c001ba6f:	31 c0                	xor    eax,eax
c001ba71:	83 c4 0c             	add    esp,0xc
c001ba74:	c3                   	ret    
c001ba75:	90                   	nop

c001ba76 <ATA::powerSaving(PowerSavingLevel)>:
c001ba76:	c3                   	ret    
c001ba77:	90                   	nop

c001ba78 <ATA::ATA()>:
c001ba78:	83 ec 0c             	sub    esp,0xc
c001ba7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba7f:	83 ec 04             	sub    esp,0x4
c001ba82:	68 00 02 00 00       	push   0x200
c001ba87:	68 35 1b 02 c0       	push   0xc0021b35
c001ba8c:	50                   	push   eax
c001ba8d:	e8 f0 06 ff ff       	call   c000c182 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ba92:	83 c4 10             	add    esp,0x10
c001ba95:	ba a8 1a 02 c0       	mov    edx,0xc0021aa8
c001ba9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba9e:	89 10                	mov    DWORD PTR [eax],edx
c001baa0:	90                   	nop
c001baa1:	83 c4 0c             	add    esp,0xc
c001baa4:	c3                   	ret    
c001baa5:	90                   	nop

c001baa6 <ATA::flush(bool)>:
c001baa6:	53                   	push   ebx
c001baa7:	83 ec 08             	sub    esp,0x8
c001baaa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001baae:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bab3:	83 f8 01             	cmp    eax,0x1
c001bab6:	19 c0                	sbb    eax,eax
c001bab8:	83 e0 fd             	and    eax,0xfffffffd
c001babb:	05 ea 00 00 00       	add    eax,0xea
c001bac0:	50                   	push   eax
c001bac1:	6a 07                	push   0x7
c001bac3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001baca:	50                   	push   eax
c001bacb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bad1:	e8 16 f1 ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bad6:	83 c4 0c             	add    esp,0xc
c001bad9:	6a 00                	push   0x0
c001badb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bae2:	50                   	push   eax
c001bae3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bae9:	e8 e6 fb ff ff       	call   c001b6d4 <IDE::polling(unsigned char, unsigned int)>
c001baee:	83 c4 18             	add    esp,0x18
c001baf1:	5b                   	pop    ebx
c001baf2:	c3                   	ret    
c001baf3:	90                   	nop

c001baf4 <ATA::readyForCommand()>:
c001baf4:	56                   	push   esi
c001baf5:	53                   	push   ebx
c001baf6:	53                   	push   ebx
c001baf7:	31 db                	xor    ebx,ebx
c001baf9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bafd:	51                   	push   ecx
c001bafe:	6a 0c                	push   0xc
c001bb00:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001bb07:	50                   	push   eax
c001bb08:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001bb0e:	e8 99 f1 ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001bb13:	83 c4 10             	add    esp,0x10
c001bb16:	a8 88                	test   al,0x88
c001bb18:	74 1f                	je     c001bb39 <ATA::readyForCommand()+0x45>
c001bb1a:	43                   	inc    ebx
c001bb1b:	83 fb 63             	cmp    ebx,0x63
c001bb1e:	7e dd                	jle    c001bafd <ATA::readyForCommand()+0x9>
c001bb20:	83 ec 0c             	sub    esp,0xc
c001bb23:	6a 0a                	push   0xa
c001bb25:	e8 16 98 ff ff       	call   c0015340 <milliTenthSleep(unsigned int)>
c001bb2a:	83 c4 10             	add    esp,0x10
c001bb2d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001bb33:	75 c8                	jne    c001bafd <ATA::readyForCommand()+0x9>
c001bb35:	31 c0                	xor    eax,eax
c001bb37:	eb 02                	jmp    c001bb3b <ATA::readyForCommand()+0x47>
c001bb39:	b0 01                	mov    al,0x1
c001bb3b:	5a                   	pop    edx
c001bb3c:	5b                   	pop    ebx
c001bb3d:	5e                   	pop    esi
c001bb3e:	c3                   	ret    
c001bb3f:	90                   	nop

c001bb40 <ATA::access(unsigned long long, int, void*, bool)>:
c001bb40:	55                   	push   ebp
c001bb41:	57                   	push   edi
c001bb42:	56                   	push   esi
c001bb43:	53                   	push   ebx
c001bb44:	83 ec 2c             	sub    esp,0x2c
c001bb47:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bb4b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bb4f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bb53:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bb57:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001bb5b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bb5f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bb63:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001bb69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb6d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bb73:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bb77:	c1 e0 06             	shl    eax,0x6
c001bb7a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001bb82:	74 5d                	je     c001bbe1 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001bb84:	89 fa                	mov    edx,edi
c001bb86:	89 f0                	mov    eax,esi
c001bb88:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001bb8c:	c1 ea 1c             	shr    edx,0x1c
c001bb8f:	89 d1                	mov    ecx,edx
c001bb91:	09 c1                	or     ecx,eax
c001bb93:	74 25                	je     c001bbba <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001bb95:	31 ed                	xor    ebp,ebp
c001bb97:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001bb9e:	89 fa                	mov    edx,edi
c001bba0:	89 f0                	mov    eax,esi
c001bba2:	0f ad d0             	shrd   eax,edx,cl
c001bba5:	d3 ea                	shr    edx,cl
c001bba7:	f6 c1 20             	test   cl,0x20
c001bbaa:	74 02                	je     c001bbae <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001bbac:	89 d0                	mov    eax,edx
c001bbae:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001bbb2:	45                   	inc    ebp
c001bbb3:	83 fd 06             	cmp    ebp,0x6
c001bbb6:	75 df                	jne    c001bb97 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001bbb8:	eb 76                	jmp    c001bc30 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001bbba:	89 f0                	mov    eax,esi
c001bbbc:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001bbc1:	89 fa                	mov    edx,edi
c001bbc3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bbca:	0f ac d0 10          	shrd   eax,edx,0x10
c001bbce:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bbd3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bbd7:	c1 ee 18             	shr    esi,0x18
c001bbda:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001bbdf:	eb 56                	jmp    c001bc37 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001bbe1:	6a 00                	push   0x0
c001bbe3:	6a 3f                	push   0x3f
c001bbe5:	57                   	push   edi
c001bbe6:	56                   	push   esi
c001bbe7:	e8 a4 2a 00 00       	call   c001e690 <__umoddi3>
c001bbec:	83 c4 10             	add    esp,0x10
c001bbef:	40                   	inc    eax
c001bbf0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001bbf4:	6a 00                	push   0x0
c001bbf6:	68 f0 03 00 00       	push   0x3f0
c001bbfb:	57                   	push   edi
c001bbfc:	56                   	push   esi
c001bbfd:	e8 8e 29 00 00       	call   c001e590 <__udivdi3>
c001bc02:	83 c4 10             	add    esp,0x10
c001bc05:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001bc0a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001bc11:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001bc16:	6a 00                	push   0x0
c001bc18:	6a 3f                	push   0x3f
c001bc1a:	57                   	push   edi
c001bc1b:	56                   	push   esi
c001bc1c:	e8 6f 29 00 00       	call   c001e590 <__udivdi3>
c001bc21:	83 c4 10             	add    esp,0x10
c001bc24:	83 e0 0f             	and    eax,0xf
c001bc27:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001bc2c:	89 c6                	mov    esi,eax
c001bc2e:	eb 07                	jmp    c001bc37 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001bc30:	31 f6                	xor    esi,esi
c001bc32:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001bc37:	bf 01 00 00 00       	mov    edi,0x1
c001bc3c:	50                   	push   eax
c001bc3d:	6a 00                	push   0x0
c001bc3f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bc46:	50                   	push   eax
c001bc47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bc4b:	e8 a4 f1 ff ff       	call   c001adf4 <IDE::enableIRQs(unsigned char, bool)>
c001bc50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc53:	e8 9c fe ff ff       	call   c001baf4 <ATA::readyForCommand()>
c001bc58:	83 c4 10             	add    esp,0x10
c001bc5b:	84 c0                	test   al,al
c001bc5d:	0f 84 69 02 00 00    	je     c001becc <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001bc63:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001bc69:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bc6f:	c1 e0 04             	shl    eax,0x4
c001bc72:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001bc79:	09 c6                	or     esi,eax
c001bc7b:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001bc80:	75 05                	jne    c001bc87 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001bc82:	83 ce a0             	or     esi,0xffffffa0
c001bc85:	eb 03                	jmp    c001bc8a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001bc87:	83 ce e0             	or     esi,0xffffffe0
c001bc8a:	89 f0                	mov    eax,esi
c001bc8c:	0f b6 f0             	movzx  esi,al
c001bc8f:	56                   	push   esi
c001bc90:	6a 06                	push   0x6
c001bc92:	51                   	push   ecx
c001bc93:	52                   	push   edx
c001bc94:	e8 53 ef ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc99:	83 c4 10             	add    esp,0x10
c001bc9c:	6a 00                	push   0x0
c001bc9e:	6a 01                	push   0x1
c001bca0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bca7:	50                   	push   eax
c001bca8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bcae:	e8 39 ef ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcb3:	83 c4 10             	add    esp,0x10
c001bcb6:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001bcbb:	83 f8 02             	cmp    eax,0x2
c001bcbe:	75 6e                	jne    c001bd2e <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001bcc0:	6a 00                	push   0x0
c001bcc2:	6a 08                	push   0x8
c001bcc4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bccb:	50                   	push   eax
c001bccc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bcd2:	e8 15 ef ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcd7:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001bcdc:	50                   	push   eax
c001bcdd:	6a 09                	push   0x9
c001bcdf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bce6:	50                   	push   eax
c001bce7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bced:	e8 fa ee ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcf2:	83 c4 20             	add    esp,0x20
c001bcf5:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001bcfa:	50                   	push   eax
c001bcfb:	6a 0a                	push   0xa
c001bcfd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd04:	50                   	push   eax
c001bd05:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd0b:	e8 dc ee ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd10:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001bd15:	50                   	push   eax
c001bd16:	6a 0b                	push   0xb
c001bd18:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd1f:	50                   	push   eax
c001bd20:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd26:	e8 c1 ee ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd2b:	83 c4 20             	add    esp,0x20
c001bd2e:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001bd33:	50                   	push   eax
c001bd34:	6a 02                	push   0x2
c001bd36:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd3d:	50                   	push   eax
c001bd3e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd44:	e8 a3 ee ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd49:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001bd4e:	50                   	push   eax
c001bd4f:	6a 03                	push   0x3
c001bd51:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd58:	50                   	push   eax
c001bd59:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd5f:	e8 88 ee ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd64:	83 c4 20             	add    esp,0x20
c001bd67:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001bd6c:	50                   	push   eax
c001bd6d:	6a 04                	push   0x4
c001bd6f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd76:	50                   	push   eax
c001bd77:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd7d:	e8 6a ee ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd82:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bd87:	50                   	push   eax
c001bd88:	6a 05                	push   0x5
c001bd8a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bd91:	50                   	push   eax
c001bd92:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bd98:	e8 4f ee ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd9d:	83 c4 20             	add    esp,0x20
c001bda0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001bda5:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001bdaa:	74 11                	je     c001bdbd <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001bdac:	b8 30 00 00 00       	mov    eax,0x30
c001bdb1:	83 fa 02             	cmp    edx,0x2
c001bdb4:	75 16                	jne    c001bdcc <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001bdb6:	b8 34 00 00 00       	mov    eax,0x34
c001bdbb:	eb 0f                	jmp    c001bdcc <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001bdbd:	b8 20 00 00 00       	mov    eax,0x20
c001bdc2:	83 fa 02             	cmp    edx,0x2
c001bdc5:	75 05                	jne    c001bdcc <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001bdc7:	b8 24 00 00 00       	mov    eax,0x24
c001bdcc:	50                   	push   eax
c001bdcd:	6a 07                	push   0x7
c001bdcf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bdd6:	50                   	push   eax
c001bdd7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bddd:	e8 0a ee ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bde2:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001bde6:	83 c4 10             	add    esp,0x10
c001bde9:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001bdee:	85 f6                	test   esi,esi
c001bdf0:	0f 84 b3 00 00 00    	je     c001bea9 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001bdf6:	50                   	push   eax
c001bdf7:	6a 01                	push   0x1
c001bdf9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be00:	50                   	push   eax
c001be01:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be07:	e8 c8 f8 ff ff       	call   c001b6d4 <IDE::polling(unsigned char, unsigned int)>
c001be0c:	83 c4 10             	add    esp,0x10
c001be0f:	0f b6 f8             	movzx  edi,al
c001be12:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001be18:	85 ff                	test   edi,edi
c001be1a:	74 1d                	je     c001be39 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001be1c:	57                   	push   edi
c001be1d:	0f b6 d2             	movzx  edx,dl
c001be20:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001be27:	50                   	push   eax
c001be28:	52                   	push   edx
c001be29:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be2f:	e8 e6 f7 ff ff       	call   c001b61a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001be34:	e9 90 00 00 00       	jmp    c001bec9 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001be39:	85 ed                	test   ebp,ebp
c001be3b:	74 3b                	je     c001be78 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001be3d:	31 c9                	xor    ecx,ecx
c001be3f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001be43:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001be47:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001be4b:	50                   	push   eax
c001be4c:	50                   	push   eax
c001be4d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001be54:	50                   	push   eax
c001be55:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be5b:	e8 7a ed ff ff       	call   c001abda <IDE::getBase(unsigned char)>
c001be60:	89 c2                	mov    edx,eax
c001be62:	89 f8                	mov    eax,edi
c001be64:	66 ef                	out    dx,ax
c001be66:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001be6a:	83 c4 10             	add    esp,0x10
c001be6d:	41                   	inc    ecx
c001be6e:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001be74:	75 c9                	jne    c001be3f <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001be76:	eb 23                	jmp    c001be9b <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001be78:	0f b6 d2             	movzx  edx,dl
c001be7b:	51                   	push   ecx
c001be7c:	51                   	push   ecx
c001be7d:	52                   	push   edx
c001be7e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001be84:	e8 51 ed ff ff       	call   c001abda <IDE::getBase(unsigned char)>
c001be89:	b9 00 01 00 00       	mov    ecx,0x100
c001be8e:	89 c2                	mov    edx,eax
c001be90:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001be94:	fc                   	cld    
c001be95:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001be98:	83 c4 10             	add    esp,0x10
c001be9b:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001bea3:	4e                   	dec    esi
c001bea4:	e9 45 ff ff ff       	jmp    c001bdee <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001bea9:	31 ff                	xor    edi,edi
c001beab:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001beb0:	74 1a                	je     c001becc <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001beb2:	50                   	push   eax
c001beb3:	50                   	push   eax
c001beb4:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001beb9:	83 f8 02             	cmp    eax,0x2
c001bebc:	0f 94 c0             	sete   al
c001bebf:	0f b6 c0             	movzx  eax,al
c001bec2:	50                   	push   eax
c001bec3:	53                   	push   ebx
c001bec4:	e8 dd fb ff ff       	call   c001baa6 <ATA::flush(bool)>
c001bec9:	83 c4 10             	add    esp,0x10
c001becc:	83 c4 2c             	add    esp,0x2c
c001becf:	89 f8                	mov    eax,edi
c001bed1:	5b                   	pop    ebx
c001bed2:	5e                   	pop    esi
c001bed3:	5f                   	pop    edi
c001bed4:	5d                   	pop    ebp
c001bed5:	c3                   	ret    

c001bed6 <ATA::detectCHS()>:
c001bed6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001beda:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001bee0:	c1 e0 06             	shl    eax,0x6
c001bee3:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001bee9:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001bef3:	c7 44 24 04 8c 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021a8c
c001befb:	e9 5f 49 ff ff       	jmp    c001085f <KePanic(char const*)>

c001bf00 <ATA::open(int, int, void*)>:
c001bf00:	53                   	push   ebx
c001bf01:	83 ec 08             	sub    esp,0x8
c001bf04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bf0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf10:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bf16:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bf1c:	c1 e0 06             	shl    eax,0x6
c001bf1f:	01 d0                	add    eax,edx
c001bf21:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001bf28:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001bf2e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001bf35:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001bf3f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001bf45:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001bf4c:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001bf53:	75 0c                	jne    c001bf61 <ATA::open(int, int, void*)+0x61>
c001bf55:	83 ec 0c             	sub    esp,0xc
c001bf58:	53                   	push   ebx
c001bf59:	e8 78 ff ff ff       	call   c001bed6 <ATA::detectCHS()>
c001bf5e:	83 c4 10             	add    esp,0x10
c001bf61:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001bf67:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001bf6d:	c1 e0 06             	shl    eax,0x6
c001bf70:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001bf77:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001bf81:	d1 e8                	shr    eax,1
c001bf83:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001bf89:	6a 04                	push   0x4
c001bf8b:	6a 0c                	push   0xc
c001bf8d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bf94:	50                   	push   eax
c001bf95:	52                   	push   edx
c001bf96:	e8 51 ec ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf9b:	90                   	nop
c001bf9c:	90                   	nop
c001bf9d:	6a 00                	push   0x0
c001bf9f:	6a 0c                	push   0xc
c001bfa1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bfa8:	50                   	push   eax
c001bfa9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bfaf:	e8 38 ec ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfb4:	83 c4 14             	add    esp,0x14
c001bfb7:	53                   	push   ebx
c001bfb8:	e8 2d 02 ff ff       	call   c000c1ea <PhysicalDisk::startCache()>
c001bfbd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bfc0:	e8 69 14 ff ff       	call   c000d42e <createPartitionsForDisk(PhysicalDisk*)>
c001bfc5:	31 c0                	xor    eax,eax
c001bfc7:	83 c4 18             	add    esp,0x18
c001bfca:	5b                   	pop    ebx
c001bfcb:	c3                   	ret    

c001bfcc <combineCharAndColour(char, unsigned char)>:
c001bfcc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bfd1:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001bfd7:	c1 e0 08             	shl    eax,0x8
c001bfda:	09 d0                	or     eax,edx
c001bfdc:	c3                   	ret    

c001bfdd <combineColours(unsigned char, unsigned char)>:
c001bfdd:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bfe2:	c1 e0 04             	shl    eax,0x4
c001bfe5:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001bfe9:	c3                   	ret    

c001bfea <ATA::read(unsigned long long, int, void*)>:
c001bfea:	55                   	push   ebp
c001bfeb:	57                   	push   edi
c001bfec:	56                   	push   esi
c001bfed:	be 04 00 00 00       	mov    esi,0x4
c001bff2:	53                   	push   ebx
c001bff3:	83 ec 0c             	sub    esp,0xc
c001bff6:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001bffa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bffe:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c001:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c005:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c009:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c00f:	0f 87 a1 01 00 00    	ja     c001c1b6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c015:	be 06 00 00 00       	mov    esi,0x6
c001c01a:	85 c9                	test   ecx,ecx
c001c01c:	0f 84 94 01 00 00    	je     c001c1b6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c022:	55                   	push   ebp
c001c023:	55                   	push   ebp
c001c024:	6a 00                	push   0x0
c001c026:	51                   	push   ecx
c001c027:	53                   	push   ebx
c001c028:	52                   	push   edx
c001c029:	50                   	push   eax
c001c02a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c02e:	e8 0d fb ff ff       	call   c001bb40 <ATA::access(unsigned long long, int, void*, bool)>
c001c033:	83 c4 20             	add    esp,0x20
c001c036:	89 c6                	mov    esi,eax
c001c038:	85 c0                	test   eax,eax
c001c03a:	0f 85 71 01 00 00    	jne    c001c1b1 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001c040:	03 1d 54 8b 02 c0    	add    ebx,DWORD PTR ds:0xc0028b54
c001c046:	89 da                	mov    edx,ebx
c001c048:	50                   	push   eax
c001c049:	bd 10 27 00 00       	mov    ebp,0x2710
c001c04e:	50                   	push   eax
c001c04f:	89 1d 54 8b 02 c0    	mov    DWORD PTR ds:0xc0028b54,ebx
c001c055:	6a 0f                	push   0xf
c001c057:	6a 00                	push   0x0
c001c059:	e8 7f ff ff ff       	call   c001bfdd <combineColours(unsigned char, unsigned char)>
c001c05e:	59                   	pop    ecx
c001c05f:	b9 0a 00 00 00       	mov    ecx,0xa
c001c064:	5b                   	pop    ebx
c001c065:	0f b6 d8             	movzx  ebx,al
c001c068:	89 d0                	mov    eax,edx
c001c06a:	53                   	push   ebx
c001c06b:	99                   	cdq    
c001c06c:	f7 fd                	idiv   ebp
c001c06e:	99                   	cdq    
c001c06f:	f7 f9                	idiv   ecx
c001c071:	83 c2 30             	add    edx,0x30
c001c074:	0f b6 d2             	movzx  edx,dl
c001c077:	52                   	push   edx
c001c078:	e8 4f ff ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001c07d:	5f                   	pop    edi
c001c07e:	bf e8 03 00 00       	mov    edi,0x3e8
c001c083:	5a                   	pop    edx
c001c084:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c08a:	53                   	push   ebx
c001c08b:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c090:	99                   	cdq    
c001c091:	f7 ff                	idiv   edi
c001c093:	99                   	cdq    
c001c094:	f7 f9                	idiv   ecx
c001c096:	8d 42 30             	lea    eax,[edx+0x30]
c001c099:	0f b6 c0             	movzx  eax,al
c001c09c:	50                   	push   eax
c001c09d:	e8 2a ff ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001c0a2:	5f                   	pop    edi
c001c0a3:	bf 64 00 00 00       	mov    edi,0x64
c001c0a8:	5a                   	pop    edx
c001c0a9:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c0af:	53                   	push   ebx
c001c0b0:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c0b5:	99                   	cdq    
c001c0b6:	f7 ff                	idiv   edi
c001c0b8:	99                   	cdq    
c001c0b9:	f7 f9                	idiv   ecx
c001c0bb:	8d 42 30             	lea    eax,[edx+0x30]
c001c0be:	0f b6 c0             	movzx  eax,al
c001c0c1:	50                   	push   eax
c001c0c2:	e8 05 ff ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001c0c7:	5a                   	pop    edx
c001c0c8:	5a                   	pop    edx
c001c0c9:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c0cf:	53                   	push   ebx
c001c0d0:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c0d5:	99                   	cdq    
c001c0d6:	f7 f9                	idiv   ecx
c001c0d8:	99                   	cdq    
c001c0d9:	f7 f9                	idiv   ecx
c001c0db:	8d 42 30             	lea    eax,[edx+0x30]
c001c0de:	0f b6 c0             	movzx  eax,al
c001c0e1:	50                   	push   eax
c001c0e2:	e8 e5 fe ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001c0e7:	5a                   	pop    edx
c001c0e8:	5a                   	pop    edx
c001c0e9:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c0ef:	53                   	push   ebx
c001c0f0:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c0f5:	99                   	cdq    
c001c0f6:	f7 f9                	idiv   ecx
c001c0f8:	83 c2 30             	add    edx,0x30
c001c0fb:	0f b6 d2             	movzx  edx,dl
c001c0fe:	52                   	push   edx
c001c0ff:	e8 c8 fe ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001c104:	5a                   	pop    edx
c001c105:	5a                   	pop    edx
c001c106:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c10c:	53                   	push   ebx
c001c10d:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c112:	99                   	cdq    
c001c113:	f7 fd                	idiv   ebp
c001c115:	99                   	cdq    
c001c116:	f7 f9                	idiv   ecx
c001c118:	8d 42 30             	lea    eax,[edx+0x30]
c001c11b:	0f b6 c0             	movzx  eax,al
c001c11e:	50                   	push   eax
c001c11f:	e8 a8 fe ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001c124:	5d                   	pop    ebp
c001c125:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c12a:	5a                   	pop    edx
c001c12b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c131:	53                   	push   ebx
c001c132:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c137:	99                   	cdq    
c001c138:	f7 fd                	idiv   ebp
c001c13a:	99                   	cdq    
c001c13b:	f7 f9                	idiv   ecx
c001c13d:	8d 42 30             	lea    eax,[edx+0x30]
c001c140:	0f b6 c0             	movzx  eax,al
c001c143:	50                   	push   eax
c001c144:	e8 83 fe ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001c149:	5d                   	pop    ebp
c001c14a:	5a                   	pop    edx
c001c14b:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c151:	53                   	push   ebx
c001c152:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c157:	99                   	cdq    
c001c158:	f7 ff                	idiv   edi
c001c15a:	99                   	cdq    
c001c15b:	f7 f9                	idiv   ecx
c001c15d:	8d 42 30             	lea    eax,[edx+0x30]
c001c160:	0f b6 c0             	movzx  eax,al
c001c163:	50                   	push   eax
c001c164:	e8 63 fe ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001c169:	5f                   	pop    edi
c001c16a:	5d                   	pop    ebp
c001c16b:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c171:	53                   	push   ebx
c001c172:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c177:	99                   	cdq    
c001c178:	f7 f9                	idiv   ecx
c001c17a:	99                   	cdq    
c001c17b:	f7 f9                	idiv   ecx
c001c17d:	8d 42 30             	lea    eax,[edx+0x30]
c001c180:	0f b6 c0             	movzx  eax,al
c001c183:	50                   	push   eax
c001c184:	e8 43 fe ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001c189:	5a                   	pop    edx
c001c18a:	5f                   	pop    edi
c001c18b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c191:	53                   	push   ebx
c001c192:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c197:	99                   	cdq    
c001c198:	f7 f9                	idiv   ecx
c001c19a:	83 c2 30             	add    edx,0x30
c001c19d:	0f b6 d2             	movzx  edx,dl
c001c1a0:	52                   	push   edx
c001c1a1:	e8 26 fe ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001c1a6:	83 c4 10             	add    esp,0x10
c001c1a9:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c1af:	eb 05                	jmp    c001c1b6 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001c1b1:	be 01 00 00 00       	mov    esi,0x1
c001c1b6:	83 c4 0c             	add    esp,0xc
c001c1b9:	89 f0                	mov    eax,esi
c001c1bb:	5b                   	pop    ebx
c001c1bc:	5e                   	pop    esi
c001c1bd:	5f                   	pop    edi
c001c1be:	5d                   	pop    ebp
c001c1bf:	c3                   	ret    

c001c1c0 <ATA::write(unsigned long long, int, void*)>:
c001c1c0:	55                   	push   ebp
c001c1c1:	57                   	push   edi
c001c1c2:	56                   	push   esi
c001c1c3:	be 04 00 00 00       	mov    esi,0x4
c001c1c8:	53                   	push   ebx
c001c1c9:	83 ec 0c             	sub    esp,0xc
c001c1cc:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c1d0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c1d4:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c1d7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c1db:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c1df:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c1e5:	0f 87 9c 01 00 00    	ja     c001c387 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c1eb:	be 06 00 00 00       	mov    esi,0x6
c001c1f0:	85 c9                	test   ecx,ecx
c001c1f2:	0f 84 8f 01 00 00    	je     c001c387 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c1f8:	55                   	push   ebp
c001c1f9:	55                   	push   ebp
c001c1fa:	6a 01                	push   0x1
c001c1fc:	51                   	push   ecx
c001c1fd:	53                   	push   ebx
c001c1fe:	52                   	push   edx
c001c1ff:	50                   	push   eax
c001c200:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c204:	e8 37 f9 ff ff       	call   c001bb40 <ATA::access(unsigned long long, int, void*, bool)>
c001c209:	83 c4 20             	add    esp,0x20
c001c20c:	89 c6                	mov    esi,eax
c001c20e:	85 c0                	test   eax,eax
c001c210:	0f 85 6c 01 00 00    	jne    c001c382 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001c216:	01 1d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebx
c001c21c:	bd 10 27 00 00       	mov    ebp,0x2710
c001c221:	50                   	push   eax
c001c222:	50                   	push   eax
c001c223:	6a 0f                	push   0xf
c001c225:	6a 00                	push   0x0
c001c227:	e8 b1 fd ff ff       	call   c001bfdd <combineColours(unsigned char, unsigned char)>
c001c22c:	5a                   	pop    edx
c001c22d:	0f b6 d8             	movzx  ebx,al
c001c230:	59                   	pop    ecx
c001c231:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c236:	53                   	push   ebx
c001c237:	b9 0a 00 00 00       	mov    ecx,0xa
c001c23c:	99                   	cdq    
c001c23d:	f7 fd                	idiv   ebp
c001c23f:	99                   	cdq    
c001c240:	f7 f9                	idiv   ecx
c001c242:	8d 42 30             	lea    eax,[edx+0x30]
c001c245:	0f b6 c0             	movzx  eax,al
c001c248:	50                   	push   eax
c001c249:	e8 7e fd ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001c24e:	5f                   	pop    edi
c001c24f:	bf e8 03 00 00       	mov    edi,0x3e8
c001c254:	5a                   	pop    edx
c001c255:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c25b:	53                   	push   ebx
c001c25c:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c261:	99                   	cdq    
c001c262:	f7 ff                	idiv   edi
c001c264:	99                   	cdq    
c001c265:	f7 f9                	idiv   ecx
c001c267:	8d 42 30             	lea    eax,[edx+0x30]
c001c26a:	0f b6 c0             	movzx  eax,al
c001c26d:	50                   	push   eax
c001c26e:	e8 59 fd ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001c273:	5f                   	pop    edi
c001c274:	bf 64 00 00 00       	mov    edi,0x64
c001c279:	5a                   	pop    edx
c001c27a:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c280:	53                   	push   ebx
c001c281:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c286:	99                   	cdq    
c001c287:	f7 ff                	idiv   edi
c001c289:	99                   	cdq    
c001c28a:	f7 f9                	idiv   ecx
c001c28c:	8d 42 30             	lea    eax,[edx+0x30]
c001c28f:	0f b6 c0             	movzx  eax,al
c001c292:	50                   	push   eax
c001c293:	e8 34 fd ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001c298:	5a                   	pop    edx
c001c299:	5a                   	pop    edx
c001c29a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c2a0:	53                   	push   ebx
c001c2a1:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c2a6:	99                   	cdq    
c001c2a7:	f7 f9                	idiv   ecx
c001c2a9:	99                   	cdq    
c001c2aa:	f7 f9                	idiv   ecx
c001c2ac:	8d 42 30             	lea    eax,[edx+0x30]
c001c2af:	0f b6 c0             	movzx  eax,al
c001c2b2:	50                   	push   eax
c001c2b3:	e8 14 fd ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001c2b8:	5a                   	pop    edx
c001c2b9:	5a                   	pop    edx
c001c2ba:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c2c0:	53                   	push   ebx
c001c2c1:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001c2c6:	99                   	cdq    
c001c2c7:	f7 f9                	idiv   ecx
c001c2c9:	8d 42 30             	lea    eax,[edx+0x30]
c001c2cc:	0f b6 c0             	movzx  eax,al
c001c2cf:	50                   	push   eax
c001c2d0:	e8 f7 fc ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001c2d5:	5a                   	pop    edx
c001c2d6:	5a                   	pop    edx
c001c2d7:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c2dd:	53                   	push   ebx
c001c2de:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c2e3:	99                   	cdq    
c001c2e4:	f7 fd                	idiv   ebp
c001c2e6:	99                   	cdq    
c001c2e7:	f7 f9                	idiv   ecx
c001c2e9:	8d 42 30             	lea    eax,[edx+0x30]
c001c2ec:	0f b6 c0             	movzx  eax,al
c001c2ef:	50                   	push   eax
c001c2f0:	e8 d7 fc ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001c2f5:	5d                   	pop    ebp
c001c2f6:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c2fb:	5a                   	pop    edx
c001c2fc:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c302:	53                   	push   ebx
c001c303:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c308:	99                   	cdq    
c001c309:	f7 fd                	idiv   ebp
c001c30b:	99                   	cdq    
c001c30c:	f7 f9                	idiv   ecx
c001c30e:	8d 42 30             	lea    eax,[edx+0x30]
c001c311:	0f b6 c0             	movzx  eax,al
c001c314:	50                   	push   eax
c001c315:	e8 b2 fc ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001c31a:	5d                   	pop    ebp
c001c31b:	5a                   	pop    edx
c001c31c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c322:	53                   	push   ebx
c001c323:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c328:	99                   	cdq    
c001c329:	f7 ff                	idiv   edi
c001c32b:	99                   	cdq    
c001c32c:	f7 f9                	idiv   ecx
c001c32e:	8d 42 30             	lea    eax,[edx+0x30]
c001c331:	0f b6 c0             	movzx  eax,al
c001c334:	50                   	push   eax
c001c335:	e8 92 fc ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001c33a:	5f                   	pop    edi
c001c33b:	5d                   	pop    ebp
c001c33c:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c342:	53                   	push   ebx
c001c343:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c348:	99                   	cdq    
c001c349:	f7 f9                	idiv   ecx
c001c34b:	99                   	cdq    
c001c34c:	f7 f9                	idiv   ecx
c001c34e:	8d 42 30             	lea    eax,[edx+0x30]
c001c351:	0f b6 c0             	movzx  eax,al
c001c354:	50                   	push   eax
c001c355:	e8 72 fc ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001c35a:	5a                   	pop    edx
c001c35b:	5f                   	pop    edi
c001c35c:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c362:	53                   	push   ebx
c001c363:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001c368:	99                   	cdq    
c001c369:	f7 f9                	idiv   ecx
c001c36b:	83 c2 30             	add    edx,0x30
c001c36e:	0f b6 d2             	movzx  edx,dl
c001c371:	52                   	push   edx
c001c372:	e8 55 fc ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001c377:	83 c4 10             	add    esp,0x10
c001c37a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c380:	eb 05                	jmp    c001c387 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001c382:	be 01 00 00 00       	mov    esi,0x1
c001c387:	83 c4 0c             	add    esp,0xc
c001c38a:	89 f0                	mov    eax,esi
c001c38c:	5b                   	pop    ebx
c001c38d:	5e                   	pop    esi
c001c38e:	5f                   	pop    edi
c001c38f:	5d                   	pop    ebp
c001c390:	c3                   	ret    
c001c391:	90                   	nop

c001c392 <ATAPI::write(unsigned long long, int, void*)>:
c001c392:	b8 03 00 00 00       	mov    eax,0x3
c001c397:	c3                   	ret    

c001c398 <ATAPI::close(int, int, void*)>:
c001c398:	83 ec 0c             	sub    esp,0xc
c001c39b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c39f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c3a5:	85 c0                	test   eax,eax
c001c3a7:	74 0c                	je     c001c3b5 <ATAPI::close(int, int, void*)+0x1d>
c001c3a9:	83 ec 0c             	sub    esp,0xc
c001c3ac:	8b 10                	mov    edx,DWORD PTR [eax]
c001c3ae:	50                   	push   eax
c001c3af:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c3b2:	83 c4 10             	add    esp,0x10
c001c3b5:	31 c0                	xor    eax,eax
c001c3b7:	83 c4 0c             	add    esp,0xc
c001c3ba:	c3                   	ret    
c001c3bb:	90                   	nop

c001c3bc <ATAPI::ATAPI()>:
c001c3bc:	83 ec 0c             	sub    esp,0xc
c001c3bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3c3:	83 ec 04             	sub    esp,0x4
c001c3c6:	68 00 08 00 00       	push   0x800
c001c3cb:	68 d5 1b 02 c0       	push   0xc0021bd5
c001c3d0:	50                   	push   eax
c001c3d1:	e8 ac fd fe ff       	call   c000c182 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c3d6:	83 c4 10             	add    esp,0x10
c001c3d9:	ba f0 1a 02 c0       	mov    edx,0xc0021af0
c001c3de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3e2:	89 10                	mov    DWORD PTR [eax],edx
c001c3e4:	90                   	nop
c001c3e5:	83 c4 0c             	add    esp,0xc
c001c3e8:	c3                   	ret    
c001c3e9:	90                   	nop

c001c3ea <ATAPI::readyForCommand()>:
c001c3ea:	56                   	push   esi
c001c3eb:	53                   	push   ebx
c001c3ec:	53                   	push   ebx
c001c3ed:	31 db                	xor    ebx,ebx
c001c3ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c3f3:	51                   	push   ecx
c001c3f4:	6a 0c                	push   0xc
c001c3f6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c3fd:	50                   	push   eax
c001c3fe:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c404:	e8 a3 e8 ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001c409:	83 c4 10             	add    esp,0x10
c001c40c:	a8 88                	test   al,0x88
c001c40e:	74 25                	je     c001c435 <ATAPI::readyForCommand()+0x4b>
c001c410:	43                   	inc    ebx
c001c411:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001c417:	7e da                	jle    c001c3f3 <ATAPI::readyForCommand()+0x9>
c001c419:	83 ec 0c             	sub    esp,0xc
c001c41c:	68 5e 01 00 00       	push   0x15e
c001c421:	e8 1a 8f ff ff       	call   c0015340 <milliTenthSleep(unsigned int)>
c001c426:	83 c4 10             	add    esp,0x10
c001c429:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001c42f:	75 c2                	jne    c001c3f3 <ATAPI::readyForCommand()+0x9>
c001c431:	31 c0                	xor    eax,eax
c001c433:	eb 02                	jmp    c001c437 <ATAPI::readyForCommand()+0x4d>
c001c435:	b0 01                	mov    al,0x1
c001c437:	5a                   	pop    edx
c001c438:	5b                   	pop    ebx
c001c439:	5e                   	pop    esi
c001c43a:	c3                   	ret    
c001c43b:	90                   	nop

c001c43c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c43c:	55                   	push   ebp
c001c43d:	57                   	push   edi
c001c43e:	56                   	push   esi
c001c43f:	53                   	push   ebx
c001c440:	83 ec 20             	sub    esp,0x20
c001c443:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c447:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001c44b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c44f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c453:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c457:	6a 01                	push   0x1
c001c459:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c460:	50                   	push   eax
c001c461:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c467:	e8 88 e9 ff ff       	call   c001adf4 <IDE::enableIRQs(unsigned char, bool)>
c001c46c:	5e                   	pop    esi
c001c46d:	58                   	pop    eax
c001c46e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c475:	50                   	push   eax
c001c476:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c47c:	e8 45 e7 ff ff       	call   c001abc6 <IDE::prepareInterrupt(unsigned char)>
c001c481:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c484:	e8 61 ff ff ff       	call   c001c3ea <ATAPI::readyForCommand()>
c001c489:	83 c4 10             	add    esp,0x10
c001c48c:	84 c0                	test   al,al
c001c48e:	75 0a                	jne    c001c49a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001c490:	bb 01 00 00 00       	mov    ebx,0x1
c001c495:	e9 60 02 00 00       	jmp    c001c6fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c49a:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001c4a0:	c1 e0 04             	shl    eax,0x4
c001c4a3:	0f b6 c0             	movzx  eax,al
c001c4a6:	50                   	push   eax
c001c4a7:	6a 06                	push   0x6
c001c4a9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4b0:	50                   	push   eax
c001c4b1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4b7:	e8 30 e7 ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4bc:	6a 00                	push   0x0
c001c4be:	6a 01                	push   0x1
c001c4c0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4c7:	50                   	push   eax
c001c4c8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4ce:	e8 19 e7 ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4d3:	83 c4 20             	add    esp,0x20
c001c4d6:	0f b6 c3             	movzx  eax,bl
c001c4d9:	0f b6 df             	movzx  ebx,bh
c001c4dc:	50                   	push   eax
c001c4dd:	6a 04                	push   0x4
c001c4df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4e6:	50                   	push   eax
c001c4e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c4ed:	e8 fa e6 ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4f2:	53                   	push   ebx
c001c4f3:	6a 05                	push   0x5
c001c4f5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c4fc:	50                   	push   eax
c001c4fd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c503:	e8 e4 e6 ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c508:	83 c4 20             	add    esp,0x20
c001c50b:	68 a0 00 00 00       	push   0xa0
c001c510:	6a 07                	push   0x7
c001c512:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c519:	50                   	push   eax
c001c51a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c520:	e8 c7 e6 ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c525:	83 c4 0c             	add    esp,0xc
c001c528:	6a 01                	push   0x1
c001c52a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c531:	50                   	push   eax
c001c532:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c538:	e8 97 f1 ff ff       	call   c001b6d4 <IDE::polling(unsigned char, unsigned int)>
c001c53d:	83 c4 10             	add    esp,0x10
c001c540:	0f b6 d8             	movzx  ebx,al
c001c543:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001c549:	85 db                	test   ebx,ebx
c001c54b:	74 20                	je     c001c56d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001c54d:	53                   	push   ebx
c001c54e:	0f b6 c0             	movzx  eax,al
c001c551:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001c558:	52                   	push   edx
c001c559:	50                   	push   eax
c001c55a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c560:	e8 b5 f0 ff ff       	call   c001b61a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c565:	83 c4 10             	add    esp,0x10
c001c568:	e9 8d 01 00 00       	jmp    c001c6fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c56d:	0f b6 c0             	movzx  eax,al
c001c570:	53                   	push   ebx
c001c571:	53                   	push   ebx
c001c572:	50                   	push   eax
c001c573:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c579:	e8 5c e6 ff ff       	call   c001abda <IDE::getBase(unsigned char)>
c001c57e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c582:	b9 06 00 00 00       	mov    ecx,0x6
c001c587:	89 c2                	mov    edx,eax
c001c589:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c58c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c590:	83 c4 10             	add    esp,0x10
c001c593:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001c598:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c59c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c5a2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c5a9:	85 db                	test   ebx,ebx
c001c5ab:	0f 84 ec 00 00 00    	je     c001c69d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001c5b1:	51                   	push   ecx
c001c5b2:	51                   	push   ecx
c001c5b3:	52                   	push   edx
c001c5b4:	50                   	push   eax
c001c5b5:	e8 a0 e7 ff ff       	call   c001ad5a <IDE::waitInterrupt(unsigned char)>
c001c5ba:	83 c4 10             	add    esp,0x10
c001c5bd:	84 c0                	test   al,al
c001c5bf:	0f 84 cb fe ff ff    	je     c001c490 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c5c5:	56                   	push   esi
c001c5c6:	56                   	push   esi
c001c5c7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5ce:	50                   	push   eax
c001c5cf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5d5:	e8 ec e5 ff ff       	call   c001abc6 <IDE::prepareInterrupt(unsigned char)>
c001c5da:	83 c4 0c             	add    esp,0xc
c001c5dd:	6a 04                	push   0x4
c001c5df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c5e6:	50                   	push   eax
c001c5e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c5ed:	e8 ba e6 ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001c5f2:	83 c4 0c             	add    esp,0xc
c001c5f5:	89 c6                	mov    esi,eax
c001c5f7:	6a 05                	push   0x5
c001c5f9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c600:	50                   	push   eax
c001c601:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c607:	e8 a0 e6 ff ff       	call   c001acac <IDE::read(unsigned char, unsigned char)>
c001c60c:	89 f1                	mov    ecx,esi
c001c60e:	0f b6 c0             	movzx  eax,al
c001c611:	0f b6 f1             	movzx  esi,cl
c001c614:	c1 e0 08             	shl    eax,0x8
c001c617:	09 c6                	or     esi,eax
c001c619:	d1 fe                	sar    esi,1
c001c61b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001c61f:	83 c4 10             	add    esp,0x10
c001c622:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001c627:	74 41                	je     c001c66a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001c629:	31 c9                	xor    ecx,ecx
c001c62b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c631:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c638:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001c63c:	75 0a                	jne    c001c648 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001c63e:	01 c9                	add    ecx,ecx
c001c640:	01 cd                	add    ebp,ecx
c001c642:	4b                   	dec    ebx
c001c643:	e9 54 ff ff ff       	jmp    c001c59c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001c648:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001c64d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c651:	51                   	push   ecx
c001c652:	51                   	push   ecx
c001c653:	52                   	push   edx
c001c654:	50                   	push   eax
c001c655:	e8 80 e5 ff ff       	call   c001abda <IDE::getBase(unsigned char)>
c001c65a:	89 c2                	mov    edx,eax
c001c65c:	89 f0                	mov    eax,esi
c001c65e:	66 ef                	out    dx,ax
c001c660:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c664:	83 c4 10             	add    esp,0x10
c001c667:	41                   	inc    ecx
c001c668:	eb c1                	jmp    c001c62b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001c66a:	31 f6                	xor    esi,esi
c001c66c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c672:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c679:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001c67d:	75 06                	jne    c001c685 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001c67f:	01 f6                	add    esi,esi
c001c681:	01 f5                	add    ebp,esi
c001c683:	eb bd                	jmp    c001c642 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001c685:	51                   	push   ecx
c001c686:	51                   	push   ecx
c001c687:	52                   	push   edx
c001c688:	50                   	push   eax
c001c689:	e8 4c e5 ff ff       	call   c001abda <IDE::getBase(unsigned char)>
c001c68e:	89 c2                	mov    edx,eax
c001c690:	66 ed                	in     ax,dx
c001c692:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001c697:	83 c4 10             	add    esp,0x10
c001c69a:	46                   	inc    esi
c001c69b:	eb cf                	jmp    c001c66c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001c69d:	51                   	push   ecx
c001c69e:	51                   	push   ecx
c001c69f:	52                   	push   edx
c001c6a0:	50                   	push   eax
c001c6a1:	e8 b4 e6 ff ff       	call   c001ad5a <IDE::waitInterrupt(unsigned char)>
c001c6a6:	83 c4 10             	add    esp,0x10
c001c6a9:	84 c0                	test   al,al
c001c6ab:	0f 84 df fd ff ff    	je     c001c490 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c6b1:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c6b6:	52                   	push   edx
c001c6b7:	52                   	push   edx
c001c6b8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c6bf:	50                   	push   eax
c001c6c0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c6c6:	e8 fb e4 ff ff       	call   c001abc6 <IDE::prepareInterrupt(unsigned char)>
c001c6cb:	83 c4 10             	add    esp,0x10
c001c6ce:	50                   	push   eax
c001c6cf:	50                   	push   eax
c001c6d0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c6d7:	50                   	push   eax
c001c6d8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c6de:	e8 f7 e4 ff ff       	call   c001abda <IDE::getBase(unsigned char)>
c001c6e3:	8d 50 07             	lea    edx,[eax+0x7]
c001c6e6:	ec                   	in     al,dx
c001c6e7:	83 c4 10             	add    esp,0x10
c001c6ea:	a8 88                	test   al,0x88
c001c6ec:	74 0a                	je     c001c6f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001c6ee:	4b                   	dec    ebx
c001c6ef:	75 dd                	jne    c001c6ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001c6f1:	bb 02 00 00 00       	mov    ebx,0x2
c001c6f6:	eb 02                	jmp    c001c6fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001c6f8:	31 db                	xor    ebx,ebx
c001c6fa:	83 c4 1c             	add    esp,0x1c
c001c6fd:	89 d8                	mov    eax,ebx
c001c6ff:	5b                   	pop    ebx
c001c700:	5e                   	pop    esi
c001c701:	5f                   	pop    edi
c001c702:	5d                   	pop    ebp
c001c703:	c3                   	ret    

c001c704 <ATAPI::diskRemoved()>:
c001c704:	53                   	push   ebx
c001c705:	83 ec 14             	sub    esp,0x14
c001c708:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c70c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c713:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001c719:	e8 00 0a ff ff       	call   c000d11e <LogicalDisk::unmount()>
c001c71e:	58                   	pop    eax
c001c71f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001c725:	e8 d6 13 ff ff       	call   c000db00 <VCache::writeWriteBuffer()>
c001c72a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001c730:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c734:	83 c4 18             	add    esp,0x18
c001c737:	5b                   	pop    ebx
c001c738:	e9 b3 13 ff ff       	jmp    c000daf0 <VCache::invalidateReadBuffer()>
c001c73d:	90                   	nop

c001c73e <ATAPI::eject()>:
c001c73e:	57                   	push   edi
c001c73f:	b9 03 00 00 00       	mov    ecx,0x3
c001c744:	53                   	push   ebx
c001c745:	83 ec 14             	sub    esp,0x14
c001c748:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c74c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c750:	fc                   	cld    
c001c751:	31 c0                	xor    eax,eax
c001c753:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c755:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001c75a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001c75f:	50                   	push   eax
c001c760:	50                   	push   eax
c001c761:	6a 00                	push   0x0
c001c763:	6a 00                	push   0x0
c001c765:	6a 00                	push   0x0
c001c767:	6a 02                	push   0x2
c001c769:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c76d:	50                   	push   eax
c001c76e:	53                   	push   ebx
c001c76f:	e8 c8 fc ff ff       	call   c001c43c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c774:	83 c4 14             	add    esp,0x14
c001c777:	53                   	push   ebx
c001c778:	e8 87 ff ff ff       	call   c001c704 <ATAPI::diskRemoved()>
c001c77d:	83 c4 24             	add    esp,0x24
c001c780:	31 c0                	xor    eax,eax
c001c782:	5b                   	pop    ebx
c001c783:	5f                   	pop    edi
c001c784:	c3                   	ret    
c001c785:	90                   	nop

c001c786 <ATAPI::diskInserted()>:
c001c786:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c78a:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001c791:	c3                   	ret    

c001c792 <ATAPI::detectMedia()>:
c001c792:	56                   	push   esi
c001c793:	53                   	push   ebx
c001c794:	83 ec 28             	sub    esp,0x28
c001c797:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c79b:	6a 0c                	push   0xc
c001c79d:	6a 00                	push   0x0
c001c79f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001c7a3:	56                   	push   esi
c001c7a4:	e8 47 3d fe ff       	call   c00004f0 <memset>
c001c7a9:	58                   	pop    eax
c001c7aa:	5a                   	pop    edx
c001c7ab:	6a 00                	push   0x0
c001c7ad:	6a 00                	push   0x0
c001c7af:	6a 00                	push   0x0
c001c7b1:	6a 00                	push   0x0
c001c7b3:	56                   	push   esi
c001c7b4:	53                   	push   ebx
c001c7b5:	e8 82 fc ff ff       	call   c001c43c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c7ba:	83 c4 1c             	add    esp,0x1c
c001c7bd:	6a 0c                	push   0xc
c001c7bf:	6a 00                	push   0x0
c001c7c1:	56                   	push   esi
c001c7c2:	e8 29 3d fe ff       	call   c00004f0 <memset>
c001c7c7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001c7cc:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001c7d1:	59                   	pop    ecx
c001c7d2:	58                   	pop    eax
c001c7d3:	6a 01                	push   0x1
c001c7d5:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001c7d9:	50                   	push   eax
c001c7da:	6a 00                	push   0x0
c001c7dc:	6a 12                	push   0x12
c001c7de:	56                   	push   esi
c001c7df:	53                   	push   ebx
c001c7e0:	e8 57 fc ff ff       	call   c001c43c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c7e5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001c7e9:	83 c4 20             	add    esp,0x20
c001c7ec:	83 e0 7f             	and    eax,0x7f
c001c7ef:	83 f8 70             	cmp    eax,0x70
c001c7f2:	74 15                	je     c001c809 <ATAPI::detectMedia()+0x77>
c001c7f4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c7fb:	75 0c                	jne    c001c809 <ATAPI::detectMedia()+0x77>
c001c7fd:	83 ec 0c             	sub    esp,0xc
c001c800:	53                   	push   ebx
c001c801:	e8 80 ff ff ff       	call   c001c786 <ATAPI::diskInserted()>
c001c806:	83 c4 10             	add    esp,0x10
c001c809:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c80d:	83 e0 0f             	and    eax,0xf
c001c810:	83 f8 02             	cmp    eax,0x2
c001c813:	75 1b                	jne    c001c830 <ATAPI::detectMedia()+0x9e>
c001c815:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001c81a:	75 2d                	jne    c001c849 <ATAPI::detectMedia()+0xb7>
c001c81c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c823:	74 24                	je     c001c849 <ATAPI::detectMedia()+0xb7>
c001c825:	83 ec 0c             	sub    esp,0xc
c001c828:	53                   	push   ebx
c001c829:	e8 d6 fe ff ff       	call   c001c704 <ATAPI::diskRemoved()>
c001c82e:	eb 16                	jmp    c001c846 <ATAPI::detectMedia()+0xb4>
c001c830:	85 c0                	test   eax,eax
c001c832:	75 15                	jne    c001c849 <ATAPI::detectMedia()+0xb7>
c001c834:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c83b:	75 0c                	jne    c001c849 <ATAPI::detectMedia()+0xb7>
c001c83d:	83 ec 0c             	sub    esp,0xc
c001c840:	53                   	push   ebx
c001c841:	e8 40 ff ff ff       	call   c001c786 <ATAPI::diskInserted()>
c001c846:	83 c4 10             	add    esp,0x10
c001c849:	83 c4 24             	add    esp,0x24
c001c84c:	5b                   	pop    ebx
c001c84d:	5e                   	pop    esi
c001c84e:	c3                   	ret    
c001c84f:	90                   	nop

c001c850 <ATAPI::open(int, int, void*)>:
c001c850:	56                   	push   esi
c001c851:	53                   	push   ebx
c001c852:	50                   	push   eax
c001c853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c857:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c85b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c85f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c865:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c86b:	c1 e0 06             	shl    eax,0x6
c001c86e:	01 d0                	add    eax,edx
c001c870:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001c877:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001c87d:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001c884:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001c88e:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001c894:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001c89b:	6a 04                	push   0x4
c001c89d:	6a 0c                	push   0xc
c001c89f:	51                   	push   ecx
c001c8a0:	52                   	push   edx
c001c8a1:	e8 46 e3 ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8a6:	90                   	nop
c001c8a7:	90                   	nop
c001c8a8:	6a 00                	push   0x0
c001c8aa:	6a 0c                	push   0xc
c001c8ac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8b3:	50                   	push   eax
c001c8b4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8ba:	e8 2d e3 ff ff       	call   c001abec <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8bf:	83 c4 14             	add    esp,0x14
c001c8c2:	68 78 01 00 00       	push   0x178
c001c8c7:	e8 ce b1 fe ff       	call   c0007a9a <malloc>
c001c8cc:	83 c4 0c             	add    esp,0xc
c001c8cf:	89 c6                	mov    esi,eax
c001c8d1:	6a 00                	push   0x0
c001c8d3:	68 ff ff ff 7f       	push   0x7fffffff
c001c8d8:	6a 00                	push   0x0
c001c8da:	6a 00                	push   0x0
c001c8dc:	53                   	push   ebx
c001c8dd:	68 87 1c 02 c0       	push   0xc0021c87
c001c8e2:	50                   	push   eax
c001c8e3:	e8 74 06 ff ff       	call   c000cf5c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c8e8:	83 c4 14             	add    esp,0x14
c001c8eb:	56                   	push   esi
c001c8ec:	e8 2b 07 ff ff       	call   c000d01c <LogicalDisk::assignDriveLetter()>
c001c8f1:	5a                   	pop    edx
c001c8f2:	0f be c0             	movsx  eax,al
c001c8f5:	59                   	pop    ecx
c001c8f6:	50                   	push   eax
c001c8f7:	68 d8 1a 02 c0       	push   0xc0021ad8
c001c8fc:	e8 81 e0 fe ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c001c901:	58                   	pop    eax
c001c902:	5a                   	pop    edx
c001c903:	56                   	push   esi
c001c904:	53                   	push   ebx
c001c905:	e8 ac f4 fe ff       	call   c000bdb6 <Device::addChild(Device*)>
c001c90a:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001c910:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c913:	e8 d2 f8 fe ff       	call   c000c1ea <PhysicalDisk::startCache()>
c001c918:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001c91f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c922:	e8 6b fe ff ff       	call   c001c792 <ATAPI::detectMedia()>
c001c927:	83 c4 14             	add    esp,0x14
c001c92a:	31 c0                	xor    eax,eax
c001c92c:	5b                   	pop    ebx
c001c92d:	5e                   	pop    esi
c001c92e:	c3                   	ret    
c001c92f:	90                   	nop

c001c930 <ATAPI::read(unsigned long long, int, void*)>:
c001c930:	55                   	push   ebp
c001c931:	57                   	push   edi
c001c932:	56                   	push   esi
c001c933:	53                   	push   ebx
c001c934:	83 ec 1c             	sub    esp,0x1c
c001c937:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c93b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c93f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c943:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c94a:	74 3c                	je     c001c988 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001c94c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001c950:	b9 03 00 00 00       	mov    ecx,0x3
c001c955:	fc                   	cld    
c001c956:	31 c0                	xor    eax,eax
c001c958:	0f ce                	bswap  esi
c001c95a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c95c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001c961:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001c965:	89 e8                	mov    eax,ebp
c001c967:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001c96b:	50                   	push   eax
c001c96c:	50                   	push   eax
c001c96d:	55                   	push   ebp
c001c96e:	c1 e5 0b             	shl    ebp,0xb
c001c971:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c975:	6a 00                	push   0x0
c001c977:	55                   	push   ebp
c001c978:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c97c:	50                   	push   eax
c001c97d:	53                   	push   ebx
c001c97e:	e8 b9 fa ff ff       	call   c001c43c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001c983:	83 c4 20             	add    esp,0x20
c001c986:	eb 1a                	jmp    c001c9a2 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001c988:	83 ec 0c             	sub    esp,0xc
c001c98b:	53                   	push   ebx
c001c98c:	e8 01 fe ff ff       	call   c001c792 <ATAPI::detectMedia()>
c001c991:	83 c4 10             	add    esp,0x10
c001c994:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001c99b:	75 af                	jne    c001c94c <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001c99d:	b8 02 00 00 00       	mov    eax,0x2
c001c9a2:	83 c4 1c             	add    esp,0x1c
c001c9a5:	5b                   	pop    ebx
c001c9a6:	5e                   	pop    esi
c001c9a7:	5f                   	pop    edi
c001c9a8:	5d                   	pop    ebp
c001c9a9:	c3                   	ret    

c001c9aa <SATA::close(int, int, void*)>:
c001c9aa:	83 ec 0c             	sub    esp,0xc
c001c9ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9b1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c9b7:	85 c0                	test   eax,eax
c001c9b9:	74 0c                	je     c001c9c7 <SATA::close(int, int, void*)+0x1d>
c001c9bb:	83 ec 0c             	sub    esp,0xc
c001c9be:	8b 10                	mov    edx,DWORD PTR [eax]
c001c9c0:	50                   	push   eax
c001c9c1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c9c4:	83 c4 10             	add    esp,0x10
c001c9c7:	31 c0                	xor    eax,eax
c001c9c9:	83 c4 0c             	add    esp,0xc
c001c9cc:	c3                   	ret    
c001c9cd:	90                   	nop

c001c9ce <SATA::powerSaving(PowerSavingLevel)>:
c001c9ce:	c3                   	ret    
c001c9cf:	90                   	nop

c001c9d0 <SATA::open(int, int, void*)>:
c001c9d0:	56                   	push   esi
c001c9d1:	53                   	push   ebx
c001c9d2:	50                   	push   eax
c001c9d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c9d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c9db:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c9e5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001c9eb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001c9f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c9f9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ca03:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ca09:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ca10:	e8 8a b3 fe ff       	call   c0007d9f <Phys::allocatePage()>
c001ca15:	89 c6                	mov    esi,eax
c001ca17:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ca1d:	81 c6 00 10 00 00    	add    esi,0x1000
c001ca23:	e8 77 b3 fe ff       	call   c0007d9f <Phys::allocatePage()>
c001ca28:	39 c6                	cmp    esi,eax
c001ca2a:	74 10                	je     c001ca3c <SATA::open(int, int, void*)+0x6c>
c001ca2c:	83 ec 0c             	sub    esp,0xc
c001ca2f:	68 20 1b 02 c0       	push   0xc0021b20
c001ca34:	e8 26 3e ff ff       	call   c001085f <KePanic(char const*)>
c001ca39:	83 c4 10             	add    esp,0x10
c001ca3c:	83 ec 0c             	sub    esp,0xc
c001ca3f:	6a 02                	push   0x2
c001ca41:	e8 c3 cb fe ff       	call   c0009609 <Virt::allocateKernelVirtualPages(int)>
c001ca46:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ca4c:	6a 03                	push   0x3
c001ca4e:	50                   	push   eax
c001ca4f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ca55:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001ca5b:	e8 90 d2 fe ff       	call   c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca60:	83 c4 14             	add    esp,0x14
c001ca63:	53                   	push   ebx
c001ca64:	e8 81 f7 fe ff       	call   c000c1ea <PhysicalDisk::startCache()>
c001ca69:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ca6c:	e8 bd 09 ff ff       	call   c000d42e <createPartitionsForDisk(PhysicalDisk*)>
c001ca71:	83 c4 14             	add    esp,0x14
c001ca74:	31 c0                	xor    eax,eax
c001ca76:	5b                   	pop    ebx
c001ca77:	5e                   	pop    esi
c001ca78:	c3                   	ret    
c001ca79:	90                   	nop

c001ca7a <SATA::SATA()>:
c001ca7a:	83 ec 0c             	sub    esp,0xc
c001ca7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca81:	83 ec 04             	sub    esp,0x4
c001ca84:	68 00 02 00 00       	push   0x200
c001ca89:	68 34 1b 02 c0       	push   0xc0021b34
c001ca8e:	50                   	push   eax
c001ca8f:	e8 ee f6 fe ff       	call   c000c182 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ca94:	83 c4 10             	add    esp,0x10
c001ca97:	ba a4 1b 02 c0       	mov    edx,0xc0021ba4
c001ca9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caa0:	89 10                	mov    DWORD PTR [eax],edx
c001caa2:	90                   	nop
c001caa3:	83 c4 0c             	add    esp,0xc
c001caa6:	c3                   	ret    
c001caa7:	90                   	nop

c001caa8 <SATA::access(unsigned long long, int, void*, bool)>:
c001caa8:	55                   	push   ebp
c001caa9:	57                   	push   edi
c001caaa:	56                   	push   esi
c001caab:	53                   	push   ebx
c001caac:	83 ec 2c             	sub    esp,0x2c
c001caaf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001cab3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cab7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cabb:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cabf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cac3:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001cac8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cacc:	7e 10                	jle    c001cade <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001cace:	83 ec 0c             	sub    esp,0xc
c001cad1:	68 44 1b 02 c0       	push   0xc0021b44
c001cad6:	e8 84 3d ff ff       	call   c001085f <KePanic(char const*)>
c001cadb:	83 c4 10             	add    esp,0x10
c001cade:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cae4:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001caea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001caf0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001caf4:	89 d0                	mov    eax,edx
c001caf6:	c1 e0 07             	shl    eax,0x7
c001caf9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001cafd:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001cb07:	51                   	push   ecx
c001cb08:	8d 42 02             	lea    eax,[edx+0x2]
c001cb0b:	51                   	push   ecx
c001cb0c:	c1 e0 07             	shl    eax,0x7
c001cb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cb13:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001cb17:	50                   	push   eax
c001cb18:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001cb1e:	e8 91 ec ff ff       	call   c001b7b4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001cb23:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb27:	83 c4 10             	add    esp,0x10
c001cb2a:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001cb2f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cb33:	0f 84 57 01 00 00    	je     c001cc90 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001cb39:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cb3d:	c1 e0 09             	shl    eax,0x9
c001cb40:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cb45:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb49:	74 0e                	je     c001cb59 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001cb4b:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001cb51:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001cb55:	89 c1                	mov    ecx,eax
c001cb57:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cb59:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cb5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001cb63:	8d 42 02             	lea    eax,[edx+0x2]
c001cb66:	c1 e0 07             	shl    eax,0x7
c001cb69:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001cb6d:	8b 00                	mov    eax,DWORD PTR [eax]
c001cb6f:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001cb75:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001cb7b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cb7f:	c1 e1 05             	shl    ecx,0x5
c001cb82:	01 c8                	add    eax,ecx
c001cb84:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cb88:	83 e1 01             	and    ecx,0x1
c001cb8b:	89 ce                	mov    esi,ecx
c001cb8d:	8a 08                	mov    cl,BYTE PTR [eax]
c001cb8f:	c1 e6 06             	shl    esi,0x6
c001cb92:	83 e1 bf             	and    ecx,0xffffffbf
c001cb95:	09 f1                	or     ecx,esi
c001cb97:	88 08                	mov    BYTE PTR [eax],cl
c001cb99:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cb9b:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001cba1:	81 c9 05 00 01 00    	or     ecx,0x10005
c001cba7:	89 08                	mov    DWORD PTR [eax],ecx
c001cba9:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001cbaf:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001cbb5:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001cbbb:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001cbbe:	50                   	push   eax
c001cbbf:	68 90 00 00 00       	push   0x90
c001cbc4:	6a 00                	push   0x0
c001cbc6:	56                   	push   esi
c001cbc7:	e8 24 39 fe ff       	call   c00004f0 <memset>
c001cbcc:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cbd2:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001cbd8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cbdc:	83 c4 10             	add    esp,0x10
c001cbdf:	48                   	dec    eax
c001cbe0:	25 ff ff 3f 00       	and    eax,0x3fffff
c001cbe5:	89 c1                	mov    ecx,eax
c001cbe7:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001cbed:	25 00 00 c0 ff       	and    eax,0xffc00000
c001cbf2:	09 c8                	or     eax,ecx
c001cbf4:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001cbfa:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001cc00:	83 c8 80             	or     eax,0xffffff80
c001cc03:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001cc09:	66 8b 06             	mov    ax,WORD PTR [esi]
c001cc0c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc10:	25 00 7f 00 00       	and    eax,0x7f00
c001cc15:	0d 27 80 ff ff       	or     eax,0xffff8027
c001cc1a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cc1f:	66 89 06             	mov    WORD PTR [esi],ax
c001cc22:	b0 35                	mov    al,0x35
c001cc24:	75 02                	jne    c001cc28 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001cc26:	b0 25                	mov    al,0x25
c001cc28:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001cc2b:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001cc2f:	89 e8                	mov    eax,ebp
c001cc31:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001cc35:	c1 e8 10             	shr    eax,0x10
c001cc38:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001cc3b:	89 e8                	mov    eax,ebp
c001cc3d:	c1 e8 18             	shr    eax,0x18
c001cc40:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001cc43:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001cc47:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001cc4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc4e:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001cc51:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001cc55:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001cc59:	89 d6                	mov    esi,edx
c001cc5b:	31 c0                	xor    eax,eax
c001cc5d:	c1 e6 07             	shl    esi,0x7
c001cc60:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cc64:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001cc6a:	80 e1 88             	and    cl,0x88
c001cc6d:	74 0a                	je     c001cc79 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001cc6f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cc74:	74 0a                	je     c001cc80 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001cc76:	40                   	inc    eax
c001cc77:	eb eb                	jmp    c001cc64 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001cc79:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001cc7e:	75 17                	jne    c001cc97 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001cc80:	83 ec 0c             	sub    esp,0xc
c001cc83:	68 7d 1b 02 c0       	push   0xc0021b7d
c001cc88:	e8 f5 dc fe ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c001cc8d:	83 c4 10             	add    esp,0x10
c001cc90:	b8 01 00 00 00       	mov    eax,0x1
c001cc95:	eb 5d                	jmp    c001ccf4 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001cc97:	b8 01 00 00 00       	mov    eax,0x1
c001cc9c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001cca0:	c1 e2 07             	shl    edx,0x7
c001cca3:	d3 e0                	shl    eax,cl
c001cca5:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001cca9:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ccaf:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ccb5:	85 c8                	test   eax,ecx
c001ccb7:	74 16                	je     c001cccf <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001ccb9:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ccbf:	0f ba e1 1e          	bt     ecx,0x1e
c001ccc3:	73 ea                	jae    c001ccaf <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001ccc5:	83 ec 0c             	sub    esp,0xc
c001ccc8:	68 8b 1b 02 c0       	push   0xc0021b8b
c001cccd:	eb b9                	jmp    c001cc88 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001cccf:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ccd5:	0f ba e0 1e          	bt     eax,0x1e
c001ccd9:	72 b5                	jb     c001cc90 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001ccdb:	31 c0                	xor    eax,eax
c001ccdd:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001cce2:	75 10                	jne    c001ccf4 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001cce4:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ccea:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ccee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ccf2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ccf4:	83 c4 2c             	add    esp,0x2c
c001ccf7:	5b                   	pop    ebx
c001ccf8:	5e                   	pop    esi
c001ccf9:	5f                   	pop    edi
c001ccfa:	5d                   	pop    ebp
c001ccfb:	c3                   	ret    

c001ccfc <SATA::read(unsigned long long, int, void*)>:
c001ccfc:	55                   	push   ebp
c001ccfd:	57                   	push   edi
c001ccfe:	56                   	push   esi
c001ccff:	be 04 00 00 00       	mov    esi,0x4
c001cd04:	53                   	push   ebx
c001cd05:	83 ec 0c             	sub    esp,0xc
c001cd08:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cd0c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd10:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cd13:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd17:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd1b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cd21:	0f 87 1a 02 00 00    	ja     c001cf41 <SATA::read(unsigned long long, int, void*)+0x245>
c001cd27:	be 06 00 00 00       	mov    esi,0x6
c001cd2c:	85 c9                	test   ecx,ecx
c001cd2e:	0f 84 0d 02 00 00    	je     c001cf41 <SATA::read(unsigned long long, int, void*)+0x245>
c001cd34:	56                   	push   esi
c001cd35:	56                   	push   esi
c001cd36:	6a 00                	push   0x0
c001cd38:	51                   	push   ecx
c001cd39:	53                   	push   ebx
c001cd3a:	52                   	push   edx
c001cd3b:	50                   	push   eax
c001cd3c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd40:	e8 63 fd ff ff       	call   c001caa8 <SATA::access(unsigned long long, int, void*, bool)>
c001cd45:	83 c4 20             	add    esp,0x20
c001cd48:	89 c6                	mov    esi,eax
c001cd4a:	85 c0                	test   eax,eax
c001cd4c:	0f 85 ea 01 00 00    	jne    c001cf3c <SATA::read(unsigned long long, int, void*)+0x240>
c001cd52:	01 1d 54 8b 02 c0    	add    DWORD PTR ds:0xc0028b54,ebx
c001cd58:	bb 0a 00 00 00       	mov    ebx,0xa
c001cd5d:	50                   	push   eax
c001cd5e:	50                   	push   eax
c001cd5f:	6a 0f                	push   0xf
c001cd61:	6a 00                	push   0x0
c001cd63:	e8 75 f2 ff ff       	call   c001bfdd <combineColours(unsigned char, unsigned char)>
c001cd68:	5a                   	pop    edx
c001cd69:	0f b6 c0             	movzx  eax,al
c001cd6c:	59                   	pop    ecx
c001cd6d:	b9 10 27 00 00       	mov    ecx,0x2710
c001cd72:	50                   	push   eax
c001cd73:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cd78:	99                   	cdq    
c001cd79:	f7 f9                	idiv   ecx
c001cd7b:	99                   	cdq    
c001cd7c:	f7 fb                	idiv   ebx
c001cd7e:	8d 42 30             	lea    eax,[edx+0x30]
c001cd81:	0f b6 c0             	movzx  eax,al
c001cd84:	50                   	push   eax
c001cd85:	e8 42 f2 ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001cd8a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cd90:	5f                   	pop    edi
c001cd91:	5d                   	pop    ebp
c001cd92:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cd97:	6a 0f                	push   0xf
c001cd99:	6a 00                	push   0x0
c001cd9b:	e8 3d f2 ff ff       	call   c001bfdd <combineColours(unsigned char, unsigned char)>
c001cda0:	5a                   	pop    edx
c001cda1:	0f b6 c0             	movzx  eax,al
c001cda4:	59                   	pop    ecx
c001cda5:	50                   	push   eax
c001cda6:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cdab:	99                   	cdq    
c001cdac:	f7 fd                	idiv   ebp
c001cdae:	99                   	cdq    
c001cdaf:	f7 fb                	idiv   ebx
c001cdb1:	8d 42 30             	lea    eax,[edx+0x30]
c001cdb4:	0f b6 c0             	movzx  eax,al
c001cdb7:	50                   	push   eax
c001cdb8:	e8 0f f2 ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001cdbd:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cdc3:	5f                   	pop    edi
c001cdc4:	bf 64 00 00 00       	mov    edi,0x64
c001cdc9:	58                   	pop    eax
c001cdca:	6a 0f                	push   0xf
c001cdcc:	6a 00                	push   0x0
c001cdce:	e8 0a f2 ff ff       	call   c001bfdd <combineColours(unsigned char, unsigned char)>
c001cdd3:	5a                   	pop    edx
c001cdd4:	0f b6 c0             	movzx  eax,al
c001cdd7:	59                   	pop    ecx
c001cdd8:	50                   	push   eax
c001cdd9:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cdde:	99                   	cdq    
c001cddf:	f7 ff                	idiv   edi
c001cde1:	99                   	cdq    
c001cde2:	f7 fb                	idiv   ebx
c001cde4:	8d 42 30             	lea    eax,[edx+0x30]
c001cde7:	0f b6 c0             	movzx  eax,al
c001cdea:	50                   	push   eax
c001cdeb:	e8 dc f1 ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001cdf0:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cdf6:	58                   	pop    eax
c001cdf7:	5a                   	pop    edx
c001cdf8:	6a 0f                	push   0xf
c001cdfa:	6a 00                	push   0x0
c001cdfc:	e8 dc f1 ff ff       	call   c001bfdd <combineColours(unsigned char, unsigned char)>
c001ce01:	59                   	pop    ecx
c001ce02:	0f b6 c0             	movzx  eax,al
c001ce05:	5a                   	pop    edx
c001ce06:	50                   	push   eax
c001ce07:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce0c:	99                   	cdq    
c001ce0d:	f7 fb                	idiv   ebx
c001ce0f:	99                   	cdq    
c001ce10:	f7 fb                	idiv   ebx
c001ce12:	8d 42 30             	lea    eax,[edx+0x30]
c001ce15:	0f b6 c0             	movzx  eax,al
c001ce18:	50                   	push   eax
c001ce19:	e8 ae f1 ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001ce1e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ce24:	59                   	pop    ecx
c001ce25:	58                   	pop    eax
c001ce26:	6a 0f                	push   0xf
c001ce28:	6a 00                	push   0x0
c001ce2a:	e8 ae f1 ff ff       	call   c001bfdd <combineColours(unsigned char, unsigned char)>
c001ce2f:	5a                   	pop    edx
c001ce30:	0f b6 c0             	movzx  eax,al
c001ce33:	59                   	pop    ecx
c001ce34:	50                   	push   eax
c001ce35:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001ce3a:	99                   	cdq    
c001ce3b:	f7 fb                	idiv   ebx
c001ce3d:	8d 42 30             	lea    eax,[edx+0x30]
c001ce40:	0f b6 c0             	movzx  eax,al
c001ce43:	50                   	push   eax
c001ce44:	e8 83 f1 ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001ce49:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ce4f:	58                   	pop    eax
c001ce50:	5a                   	pop    edx
c001ce51:	6a 0f                	push   0xf
c001ce53:	6a 00                	push   0x0
c001ce55:	e8 83 f1 ff ff       	call   c001bfdd <combineColours(unsigned char, unsigned char)>
c001ce5a:	59                   	pop    ecx
c001ce5b:	0f b6 c0             	movzx  eax,al
c001ce5e:	5a                   	pop    edx
c001ce5f:	b9 10 27 00 00       	mov    ecx,0x2710
c001ce64:	50                   	push   eax
c001ce65:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ce6a:	99                   	cdq    
c001ce6b:	f7 f9                	idiv   ecx
c001ce6d:	99                   	cdq    
c001ce6e:	f7 fb                	idiv   ebx
c001ce70:	8d 42 30             	lea    eax,[edx+0x30]
c001ce73:	0f b6 c0             	movzx  eax,al
c001ce76:	50                   	push   eax
c001ce77:	e8 50 f1 ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001ce7c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ce82:	59                   	pop    ecx
c001ce83:	58                   	pop    eax
c001ce84:	6a 0f                	push   0xf
c001ce86:	6a 00                	push   0x0
c001ce88:	e8 50 f1 ff ff       	call   c001bfdd <combineColours(unsigned char, unsigned char)>
c001ce8d:	5a                   	pop    edx
c001ce8e:	0f b6 c0             	movzx  eax,al
c001ce91:	59                   	pop    ecx
c001ce92:	50                   	push   eax
c001ce93:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001ce98:	99                   	cdq    
c001ce99:	f7 fd                	idiv   ebp
c001ce9b:	99                   	cdq    
c001ce9c:	f7 fb                	idiv   ebx
c001ce9e:	8d 42 30             	lea    eax,[edx+0x30]
c001cea1:	0f b6 c0             	movzx  eax,al
c001cea4:	50                   	push   eax
c001cea5:	e8 22 f1 ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001ceaa:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ceb0:	5d                   	pop    ebp
c001ceb1:	58                   	pop    eax
c001ceb2:	6a 0f                	push   0xf
c001ceb4:	6a 00                	push   0x0
c001ceb6:	e8 22 f1 ff ff       	call   c001bfdd <combineColours(unsigned char, unsigned char)>
c001cebb:	5a                   	pop    edx
c001cebc:	0f b6 c0             	movzx  eax,al
c001cebf:	59                   	pop    ecx
c001cec0:	50                   	push   eax
c001cec1:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cec6:	99                   	cdq    
c001cec7:	f7 ff                	idiv   edi
c001cec9:	99                   	cdq    
c001ceca:	f7 fb                	idiv   ebx
c001cecc:	8d 42 30             	lea    eax,[edx+0x30]
c001cecf:	0f b6 c0             	movzx  eax,al
c001ced2:	50                   	push   eax
c001ced3:	e8 f4 f0 ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001ced8:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cede:	5f                   	pop    edi
c001cedf:	5d                   	pop    ebp
c001cee0:	6a 0f                	push   0xf
c001cee2:	6a 00                	push   0x0
c001cee4:	e8 f4 f0 ff ff       	call   c001bfdd <combineColours(unsigned char, unsigned char)>
c001cee9:	5a                   	pop    edx
c001ceea:	0f b6 c0             	movzx  eax,al
c001ceed:	59                   	pop    ecx
c001ceee:	50                   	push   eax
c001ceef:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cef4:	99                   	cdq    
c001cef5:	f7 fb                	idiv   ebx
c001cef7:	99                   	cdq    
c001cef8:	f7 fb                	idiv   ebx
c001cefa:	8d 42 30             	lea    eax,[edx+0x30]
c001cefd:	0f b6 c0             	movzx  eax,al
c001cf00:	50                   	push   eax
c001cf01:	e8 c6 f0 ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001cf06:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cf0c:	5f                   	pop    edi
c001cf0d:	5d                   	pop    ebp
c001cf0e:	6a 0f                	push   0xf
c001cf10:	6a 00                	push   0x0
c001cf12:	e8 c6 f0 ff ff       	call   c001bfdd <combineColours(unsigned char, unsigned char)>
c001cf17:	5a                   	pop    edx
c001cf18:	0f b6 c0             	movzx  eax,al
c001cf1b:	59                   	pop    ecx
c001cf1c:	50                   	push   eax
c001cf1d:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001cf22:	99                   	cdq    
c001cf23:	f7 fb                	idiv   ebx
c001cf25:	83 c2 30             	add    edx,0x30
c001cf28:	0f b6 d2             	movzx  edx,dl
c001cf2b:	52                   	push   edx
c001cf2c:	e8 9b f0 ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001cf31:	83 c4 10             	add    esp,0x10
c001cf34:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf3a:	eb 05                	jmp    c001cf41 <SATA::read(unsigned long long, int, void*)+0x245>
c001cf3c:	be 01 00 00 00       	mov    esi,0x1
c001cf41:	83 c4 0c             	add    esp,0xc
c001cf44:	89 f0                	mov    eax,esi
c001cf46:	5b                   	pop    ebx
c001cf47:	5e                   	pop    esi
c001cf48:	5f                   	pop    edi
c001cf49:	5d                   	pop    ebp
c001cf4a:	c3                   	ret    
c001cf4b:	90                   	nop

c001cf4c <SATA::write(unsigned long long, int, void*)>:
c001cf4c:	55                   	push   ebp
c001cf4d:	b8 04 00 00 00       	mov    eax,0x4
c001cf52:	57                   	push   edi
c001cf53:	56                   	push   esi
c001cf54:	53                   	push   ebx
c001cf55:	83 ec 1c             	sub    esp,0x1c
c001cf58:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001cf5c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001cf60:	8d 75 ff             	lea    esi,[ebp-0x1]
c001cf63:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001cf67:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001cf6b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001cf71:	0f 87 32 02 00 00    	ja     c001d1a9 <SATA::write(unsigned long long, int, void*)+0x25d>
c001cf77:	b8 06 00 00 00       	mov    eax,0x6
c001cf7c:	85 ff                	test   edi,edi
c001cf7e:	0f 84 25 02 00 00    	je     c001d1a9 <SATA::write(unsigned long long, int, void*)+0x25d>
c001cf84:	89 ee                	mov    esi,ebp
c001cf86:	c1 e6 09             	shl    esi,0x9
c001cf89:	01 fe                	add    esi,edi
c001cf8b:	89 c8                	mov    eax,ecx
c001cf8d:	89 da                	mov    edx,ebx
c001cf8f:	83 c0 01             	add    eax,0x1
c001cf92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cf96:	83 d2 00             	adc    edx,0x0
c001cf99:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cf9d:	50                   	push   eax
c001cf9e:	50                   	push   eax
c001cf9f:	6a 01                	push   0x1
c001cfa1:	57                   	push   edi
c001cfa2:	81 c7 00 02 00 00    	add    edi,0x200
c001cfa8:	6a 01                	push   0x1
c001cfaa:	53                   	push   ebx
c001cfab:	51                   	push   ecx
c001cfac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cfb0:	e8 f3 fa ff ff       	call   c001caa8 <SATA::access(unsigned long long, int, void*, bool)>
c001cfb5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001cfb9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cfbd:	83 c4 20             	add    esp,0x20
c001cfc0:	39 f7                	cmp    edi,esi
c001cfc2:	75 c7                	jne    c001cf8b <SATA::write(unsigned long long, int, void*)+0x3f>
c001cfc4:	bb 0a 00 00 00       	mov    ebx,0xa
c001cfc9:	01 2d 50 8b 02 c0    	add    DWORD PTR ds:0xc0028b50,ebp
c001cfcf:	bd 10 27 00 00       	mov    ebp,0x2710
c001cfd4:	50                   	push   eax
c001cfd5:	50                   	push   eax
c001cfd6:	6a 0f                	push   0xf
c001cfd8:	6a 00                	push   0x0
c001cfda:	e8 fe ef ff ff       	call   c001bfdd <combineColours(unsigned char, unsigned char)>
c001cfdf:	5a                   	pop    edx
c001cfe0:	0f b6 c0             	movzx  eax,al
c001cfe3:	59                   	pop    ecx
c001cfe4:	50                   	push   eax
c001cfe5:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001cfea:	99                   	cdq    
c001cfeb:	f7 fd                	idiv   ebp
c001cfed:	99                   	cdq    
c001cfee:	f7 fb                	idiv   ebx
c001cff0:	8d 42 30             	lea    eax,[edx+0x30]
c001cff3:	0f b6 c0             	movzx  eax,al
c001cff6:	50                   	push   eax
c001cff7:	e8 d0 ef ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001cffc:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d002:	5e                   	pop    esi
c001d003:	5f                   	pop    edi
c001d004:	bf e8 03 00 00       	mov    edi,0x3e8
c001d009:	6a 0f                	push   0xf
c001d00b:	6a 00                	push   0x0
c001d00d:	e8 cb ef ff ff       	call   c001bfdd <combineColours(unsigned char, unsigned char)>
c001d012:	5a                   	pop    edx
c001d013:	0f b6 c0             	movzx  eax,al
c001d016:	59                   	pop    ecx
c001d017:	50                   	push   eax
c001d018:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d01d:	99                   	cdq    
c001d01e:	f7 ff                	idiv   edi
c001d020:	99                   	cdq    
c001d021:	f7 fb                	idiv   ebx
c001d023:	8d 42 30             	lea    eax,[edx+0x30]
c001d026:	0f b6 c0             	movzx  eax,al
c001d029:	50                   	push   eax
c001d02a:	e8 9d ef ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001d02f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d035:	5e                   	pop    esi
c001d036:	be 64 00 00 00       	mov    esi,0x64
c001d03b:	58                   	pop    eax
c001d03c:	6a 0f                	push   0xf
c001d03e:	6a 00                	push   0x0
c001d040:	e8 98 ef ff ff       	call   c001bfdd <combineColours(unsigned char, unsigned char)>
c001d045:	5a                   	pop    edx
c001d046:	0f b6 c0             	movzx  eax,al
c001d049:	59                   	pop    ecx
c001d04a:	50                   	push   eax
c001d04b:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d050:	99                   	cdq    
c001d051:	f7 fe                	idiv   esi
c001d053:	99                   	cdq    
c001d054:	f7 fb                	idiv   ebx
c001d056:	8d 42 30             	lea    eax,[edx+0x30]
c001d059:	0f b6 c0             	movzx  eax,al
c001d05c:	50                   	push   eax
c001d05d:	e8 6a ef ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001d062:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d068:	58                   	pop    eax
c001d069:	5a                   	pop    edx
c001d06a:	6a 0f                	push   0xf
c001d06c:	6a 00                	push   0x0
c001d06e:	e8 6a ef ff ff       	call   c001bfdd <combineColours(unsigned char, unsigned char)>
c001d073:	59                   	pop    ecx
c001d074:	0f b6 c0             	movzx  eax,al
c001d077:	5a                   	pop    edx
c001d078:	50                   	push   eax
c001d079:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d07e:	99                   	cdq    
c001d07f:	f7 fb                	idiv   ebx
c001d081:	99                   	cdq    
c001d082:	f7 fb                	idiv   ebx
c001d084:	8d 42 30             	lea    eax,[edx+0x30]
c001d087:	0f b6 c0             	movzx  eax,al
c001d08a:	50                   	push   eax
c001d08b:	e8 3c ef ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001d090:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d096:	59                   	pop    ecx
c001d097:	58                   	pop    eax
c001d098:	6a 0f                	push   0xf
c001d09a:	6a 00                	push   0x0
c001d09c:	e8 3c ef ff ff       	call   c001bfdd <combineColours(unsigned char, unsigned char)>
c001d0a1:	5a                   	pop    edx
c001d0a2:	0f b6 c0             	movzx  eax,al
c001d0a5:	59                   	pop    ecx
c001d0a6:	50                   	push   eax
c001d0a7:	a1 54 8b 02 c0       	mov    eax,ds:0xc0028b54
c001d0ac:	99                   	cdq    
c001d0ad:	f7 fb                	idiv   ebx
c001d0af:	83 c2 30             	add    edx,0x30
c001d0b2:	0f b6 d2             	movzx  edx,dl
c001d0b5:	52                   	push   edx
c001d0b6:	e8 11 ef ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001d0bb:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d0c1:	58                   	pop    eax
c001d0c2:	5a                   	pop    edx
c001d0c3:	6a 0f                	push   0xf
c001d0c5:	6a 00                	push   0x0
c001d0c7:	e8 11 ef ff ff       	call   c001bfdd <combineColours(unsigned char, unsigned char)>
c001d0cc:	59                   	pop    ecx
c001d0cd:	0f b6 c0             	movzx  eax,al
c001d0d0:	5a                   	pop    edx
c001d0d1:	50                   	push   eax
c001d0d2:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d0d7:	99                   	cdq    
c001d0d8:	f7 fd                	idiv   ebp
c001d0da:	99                   	cdq    
c001d0db:	f7 fb                	idiv   ebx
c001d0dd:	8d 42 30             	lea    eax,[edx+0x30]
c001d0e0:	0f b6 c0             	movzx  eax,al
c001d0e3:	50                   	push   eax
c001d0e4:	e8 e3 ee ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001d0e9:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d0ef:	59                   	pop    ecx
c001d0f0:	5d                   	pop    ebp
c001d0f1:	6a 0f                	push   0xf
c001d0f3:	6a 00                	push   0x0
c001d0f5:	e8 e3 ee ff ff       	call   c001bfdd <combineColours(unsigned char, unsigned char)>
c001d0fa:	5a                   	pop    edx
c001d0fb:	0f b6 c0             	movzx  eax,al
c001d0fe:	59                   	pop    ecx
c001d0ff:	50                   	push   eax
c001d100:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d105:	99                   	cdq    
c001d106:	f7 ff                	idiv   edi
c001d108:	99                   	cdq    
c001d109:	f7 fb                	idiv   ebx
c001d10b:	8d 42 30             	lea    eax,[edx+0x30]
c001d10e:	0f b6 c0             	movzx  eax,al
c001d111:	50                   	push   eax
c001d112:	e8 b5 ee ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001d117:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d11d:	5f                   	pop    edi
c001d11e:	5d                   	pop    ebp
c001d11f:	6a 0f                	push   0xf
c001d121:	6a 00                	push   0x0
c001d123:	e8 b5 ee ff ff       	call   c001bfdd <combineColours(unsigned char, unsigned char)>
c001d128:	5a                   	pop    edx
c001d129:	0f b6 c0             	movzx  eax,al
c001d12c:	59                   	pop    ecx
c001d12d:	50                   	push   eax
c001d12e:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d133:	99                   	cdq    
c001d134:	f7 fe                	idiv   esi
c001d136:	99                   	cdq    
c001d137:	f7 fb                	idiv   ebx
c001d139:	8d 42 30             	lea    eax,[edx+0x30]
c001d13c:	0f b6 c0             	movzx  eax,al
c001d13f:	50                   	push   eax
c001d140:	e8 87 ee ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001d145:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d14b:	5e                   	pop    esi
c001d14c:	5f                   	pop    edi
c001d14d:	6a 0f                	push   0xf
c001d14f:	6a 00                	push   0x0
c001d151:	e8 87 ee ff ff       	call   c001bfdd <combineColours(unsigned char, unsigned char)>
c001d156:	5d                   	pop    ebp
c001d157:	0f b6 c0             	movzx  eax,al
c001d15a:	5a                   	pop    edx
c001d15b:	50                   	push   eax
c001d15c:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d161:	99                   	cdq    
c001d162:	f7 fb                	idiv   ebx
c001d164:	99                   	cdq    
c001d165:	f7 fb                	idiv   ebx
c001d167:	8d 42 30             	lea    eax,[edx+0x30]
c001d16a:	0f b6 c0             	movzx  eax,al
c001d16d:	50                   	push   eax
c001d16e:	e8 59 ee ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001d173:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d179:	59                   	pop    ecx
c001d17a:	5e                   	pop    esi
c001d17b:	6a 0f                	push   0xf
c001d17d:	6a 00                	push   0x0
c001d17f:	e8 59 ee ff ff       	call   c001bfdd <combineColours(unsigned char, unsigned char)>
c001d184:	5f                   	pop    edi
c001d185:	0f b6 c0             	movzx  eax,al
c001d188:	5d                   	pop    ebp
c001d189:	50                   	push   eax
c001d18a:	a1 50 8b 02 c0       	mov    eax,ds:0xc0028b50
c001d18f:	99                   	cdq    
c001d190:	f7 fb                	idiv   ebx
c001d192:	83 c2 30             	add    edx,0x30
c001d195:	0f b6 d2             	movzx  edx,dl
c001d198:	52                   	push   edx
c001d199:	e8 2e ee ff ff       	call   c001bfcc <combineCharAndColour(char, unsigned char)>
c001d19e:	83 c4 10             	add    esp,0x10
c001d1a1:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d1a7:	31 c0                	xor    eax,eax
c001d1a9:	83 c4 1c             	add    esp,0x1c
c001d1ac:	5b                   	pop    ebx
c001d1ad:	5e                   	pop    esi
c001d1ae:	5f                   	pop    edi
c001d1af:	5d                   	pop    ebp
c001d1b0:	c3                   	ret    
c001d1b1:	90                   	nop

c001d1b2 <SATAPI::write(unsigned long long, int, void*)>:
c001d1b2:	b8 03 00 00 00       	mov    eax,0x3
c001d1b7:	c3                   	ret    

c001d1b8 <SATAPI::close(int, int, void*)>:
c001d1b8:	83 ec 0c             	sub    esp,0xc
c001d1bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1bf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d1c5:	85 c0                	test   eax,eax
c001d1c7:	74 0c                	je     c001d1d5 <SATAPI::close(int, int, void*)+0x1d>
c001d1c9:	83 ec 0c             	sub    esp,0xc
c001d1cc:	8b 10                	mov    edx,DWORD PTR [eax]
c001d1ce:	50                   	push   eax
c001d1cf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d1d2:	83 c4 10             	add    esp,0x10
c001d1d5:	31 c0                	xor    eax,eax
c001d1d7:	83 c4 0c             	add    esp,0xc
c001d1da:	c3                   	ret    
c001d1db:	90                   	nop

c001d1dc <SATAPI::SATAPI()>:
c001d1dc:	83 ec 0c             	sub    esp,0xc
c001d1df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1e3:	83 ec 04             	sub    esp,0x4
c001d1e6:	68 00 08 00 00       	push   0x800
c001d1eb:	68 d4 1b 02 c0       	push   0xc0021bd4
c001d1f0:	50                   	push   eax
c001d1f1:	e8 8c ef fe ff       	call   c000c182 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d1f6:	83 c4 10             	add    esp,0x10
c001d1f9:	ba c8 1c 02 c0       	mov    edx,0xc0021cc8
c001d1fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d202:	89 10                	mov    DWORD PTR [eax],edx
c001d204:	90                   	nop
c001d205:	83 c4 0c             	add    esp,0xc
c001d208:	c3                   	ret    
c001d209:	90                   	nop

c001d20a <SATAPI::diskRemoved()>:
c001d20a:	c3                   	ret    
c001d20b:	90                   	nop

c001d20c <SATAPI::diskInserted()>:
c001d20c:	83 ec 18             	sub    esp,0x18
c001d20f:	68 e0 1b 02 c0       	push   0xc0021be0
c001d214:	e8 69 d7 fe ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c001d219:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d21d:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001d224:	83 c4 1c             	add    esp,0x1c
c001d227:	c3                   	ret    

c001d228 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001d228:	55                   	push   ebp
c001d229:	57                   	push   edi
c001d22a:	56                   	push   esi
c001d22b:	53                   	push   ebx
c001d22c:	83 ec 34             	sub    esp,0x34
c001d22f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001d233:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d237:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001d23b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d23f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d243:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001d249:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d24f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d253:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001d259:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d25d:	83 c0 02             	add    eax,0x2
c001d260:	c1 e0 07             	shl    eax,0x7
c001d263:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d267:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d26b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d26f:	c1 e0 07             	shl    eax,0x7
c001d272:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d276:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d27a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d284:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d288:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d28e:	e8 21 e5 ff ff       	call   c001b7b4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d293:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d297:	83 c4 10             	add    esp,0x10
c001d29a:	b8 01 00 00 00       	mov    eax,0x1
c001d29f:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d2a4:	0f 84 53 02 00 00    	je     c001d4fd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001d2aa:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d2b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001d2b6:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d2bc:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d2c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d2c6:	c1 e1 05             	shl    ecx,0x5
c001d2c9:	01 c8                	add    eax,ecx
c001d2cb:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d2cd:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001d2d3:	81 c9 25 00 01 00    	or     ecx,0x10025
c001d2d9:	89 08                	mov    DWORD PTR [eax],ecx
c001d2db:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001d2e1:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001d2e7:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001d2ed:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001d2f0:	8d 7b 40             	lea    edi,[ebx+0x40]
c001d2f3:	50                   	push   eax
c001d2f4:	68 90 00 00 00       	push   0x90
c001d2f9:	6a 00                	push   0x0
c001d2fb:	53                   	push   ebx
c001d2fc:	e8 ef 31 fe ff       	call   c00004f0 <memset>
c001d301:	b9 0c 00 00 00       	mov    ecx,0xc
c001d306:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001d30a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d30c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001d312:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001d316:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001d31c:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001d320:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001d324:	48                   	dec    eax
c001d325:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d32a:	89 c1                	mov    ecx,eax
c001d32c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001d332:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d337:	09 c8                	or     eax,ecx
c001d339:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001d33f:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001d345:	83 c8 80             	or     eax,0xffffff80
c001d348:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001d34e:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001d351:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d355:	25 00 7f 00 00       	and    eax,0x7f00
c001d35a:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001d35e:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d363:	66 89 03             	mov    WORD PTR [ebx],ax
c001d366:	89 d0                	mov    eax,edx
c001d368:	c1 ea 18             	shr    edx,0x18
c001d36b:	c1 e8 10             	shr    eax,0x10
c001d36e:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001d371:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001d374:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d378:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001d37b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d37f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001d382:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001d386:	83 c4 10             	add    esp,0x10
c001d389:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001d38d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d391:	31 c0                	xor    eax,eax
c001d393:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001d399:	80 e1 88             	and    cl,0x88
c001d39c:	74 0a                	je     c001d3a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001d39e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d3a3:	74 0a                	je     c001d3af <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001d3a5:	40                   	inc    eax
c001d3a6:	eb eb                	jmp    c001d393 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001d3a8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d3ad:	75 43                	jne    c001d3f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001d3af:	83 ec 0c             	sub    esp,0xc
c001d3b2:	68 f8 1b 02 c0       	push   0xc0021bf8
c001d3b7:	e8 c6 d5 fe ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c001d3bc:	58                   	pop    eax
c001d3bd:	5a                   	pop    edx
c001d3be:	68 0d 1c 02 c0       	push   0xc0021c0d
c001d3c3:	ff 35 04 4f 02 c0    	push   DWORD PTR ds:0xc0024f04
c001d3c9:	e8 ae b6 fe ff       	call   c0008a7c <VgaText::puts(char const*)>
c001d3ce:	59                   	pop    ecx
c001d3cf:	5b                   	pop    ebx
c001d3d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d3d4:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d3da:	e8 6f e4 ff ff       	call   c001b84e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d3df:	5e                   	pop    esi
c001d3e0:	5f                   	pop    edi
c001d3e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001d3e5:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001d3eb:	e8 3e e4 ff ff       	call   c001b82e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d3f0:	eb 48                	jmp    c001d43a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001d3f2:	be 01 00 00 00       	mov    esi,0x1
c001d3f7:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d3fb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d3ff:	d3 e6                	shl    esi,cl
c001d401:	c1 e7 07             	shl    edi,0x7
c001d404:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001d40a:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001d40f:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001d413:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001d419:	85 c6                	test   esi,eax
c001d41b:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001d421:	0f 84 a3 00 00 00    	je     c001d4ca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001d427:	0f ba e0 1e          	bt     eax,0x1e
c001d42b:	73 1a                	jae    c001d447 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001d42d:	83 ec 0c             	sub    esp,0xc
c001d430:	68 1f 1c 02 c0       	push   0xc0021c1f
c001d435:	e8 48 d5 fe ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c001d43a:	83 c4 10             	add    esp,0x10
c001d43d:	b8 01 00 00 00       	mov    eax,0x1
c001d442:	e9 b6 00 00 00       	jmp    c001d4fd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001d447:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001d44d:	83 f8 0d             	cmp    eax,0xd
c001d450:	77 0a                	ja     c001d45c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001d452:	83 ec 0c             	sub    esp,0xc
c001d455:	68 c8 00 00 00       	push   0xc8
c001d45a:	eb 28                	jmp    c001d484 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001d45c:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001d462:	83 f8 0d             	cmp    eax,0xd
c001d465:	77 0a                	ja     c001d471 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001d467:	83 ec 0c             	sub    esp,0xc
c001d46a:	68 58 02 00 00       	push   0x258
c001d46f:	eb 13                	jmp    c001d484 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001d471:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001d477:	83 f8 06             	cmp    eax,0x6
c001d47a:	77 10                	ja     c001d48c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001d47c:	83 ec 0c             	sub    esp,0xc
c001d47f:	68 dc 05 00 00       	push   0x5dc
c001d484:	e8 b7 7e ff ff       	call   c0015340 <milliTenthSleep(unsigned int)>
c001d489:	83 c4 10             	add    esp,0x10
c001d48c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d490:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001d493:	75 06                	jne    c001d49b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001d495:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001d499:	74 15                	je     c001d4b0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001d49b:	83 fb 06             	cmp    ebx,0x6
c001d49e:	77 10                	ja     c001d4b0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001d4a0:	83 ec 0c             	sub    esp,0xc
c001d4a3:	68 c4 09 00 00       	push   0x9c4
c001d4a8:	e8 93 7e ff ff       	call   c0015340 <milliTenthSleep(unsigned int)>
c001d4ad:	83 c4 10             	add    esp,0x10
c001d4b0:	43                   	inc    ebx
c001d4b1:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001d4b7:	0f 85 56 ff ff ff    	jne    c001d413 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001d4bd:	83 ec 0c             	sub    esp,0xc
c001d4c0:	68 32 1c 02 c0       	push   0xc0021c32
c001d4c5:	e9 6b ff ff ff       	jmp    c001d435 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001d4ca:	0f ba e0 1e          	bt     eax,0x1e
c001d4ce:	73 0d                	jae    c001d4dd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001d4d0:	83 ec 0c             	sub    esp,0xc
c001d4d3:	68 46 1c 02 c0       	push   0xc0021c46
c001d4d8:	e9 58 ff ff ff       	jmp    c001d435 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001d4dd:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001d4e2:	74 17                	je     c001d4fb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d4e4:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001d4e9:	74 10                	je     c001d4fb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001d4eb:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001d4f1:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001d4f5:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001d4f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d4fb:	31 c0                	xor    eax,eax
c001d4fd:	83 c4 2c             	add    esp,0x2c
c001d500:	5b                   	pop    ebx
c001d501:	5e                   	pop    esi
c001d502:	5f                   	pop    edi
c001d503:	5d                   	pop    ebp
c001d504:	c3                   	ret    
c001d505:	90                   	nop

c001d506 <SATAPI::eject()>:
c001d506:	57                   	push   edi
c001d507:	b9 03 00 00 00       	mov    ecx,0x3
c001d50c:	83 ec 18             	sub    esp,0x18
c001d50f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d513:	fc                   	cld    
c001d514:	31 c0                	xor    eax,eax
c001d516:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d518:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d51d:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d522:	50                   	push   eax
c001d523:	6a 00                	push   0x0
c001d525:	6a 00                	push   0x0
c001d527:	6a 00                	push   0x0
c001d529:	6a 00                	push   0x0
c001d52b:	6a 02                	push   0x2
c001d52d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d531:	50                   	push   eax
c001d532:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d536:	e8 ed fc ff ff       	call   c001d228 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d53b:	31 c0                	xor    eax,eax
c001d53d:	83 c4 38             	add    esp,0x38
c001d540:	5f                   	pop    edi
c001d541:	c3                   	ret    

c001d542 <SATAPI::detectMedia()>:
c001d542:	53                   	push   ebx
c001d543:	83 ec 14             	sub    esp,0x14
c001d546:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d54a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d550:	e8 ab 05 ff ff       	call   c000db00 <VCache::writeWriteBuffer()>
c001d555:	59                   	pop    ecx
c001d556:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d55c:	e8 8f 05 ff ff       	call   c000daf0 <VCache::invalidateReadBuffer()>
c001d561:	c7 04 24 5b 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c5b
c001d568:	e8 15 d4 fe ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c001d56d:	83 c4 10             	add    esp,0x10
c001d570:	31 c0                	xor    eax,eax
c001d572:	8b 14 85 20 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8be0]
c001d579:	85 d2                	test   edx,edx
c001d57b:	74 0f                	je     c001d58c <SATAPI::detectMedia()+0x4a>
c001d57d:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001d583:	75 07                	jne    c001d58c <SATAPI::detectMedia()+0x4a>
c001d585:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001d58c:	40                   	inc    eax
c001d58d:	83 f8 1a             	cmp    eax,0x1a
c001d590:	75 e0                	jne    c001d572 <SATAPI::detectMedia()+0x30>
c001d592:	83 c4 08             	add    esp,0x8
c001d595:	5b                   	pop    ebx
c001d596:	c3                   	ret    
c001d597:	90                   	nop

c001d598 <SATAPI::open(int, int, void*)>:
c001d598:	56                   	push   esi
c001d599:	53                   	push   ebx
c001d59a:	51                   	push   ecx
c001d59b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d59f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5a3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d5ad:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d5b3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d5bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d5c1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d5cb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d5d1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d5d8:	e8 c2 a7 fe ff       	call   c0007d9f <Phys::allocatePage()>
c001d5dd:	89 c6                	mov    esi,eax
c001d5df:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001d5e5:	81 c6 00 10 00 00    	add    esi,0x1000
c001d5eb:	e8 af a7 fe ff       	call   c0007d9f <Phys::allocatePage()>
c001d5f0:	39 c6                	cmp    esi,eax
c001d5f2:	74 10                	je     c001d604 <SATAPI::open(int, int, void*)+0x6c>
c001d5f4:	83 ec 0c             	sub    esp,0xc
c001d5f7:	68 70 1c 02 c0       	push   0xc0021c70
c001d5fc:	e8 5e 32 ff ff       	call   c001085f <KePanic(char const*)>
c001d601:	83 c4 10             	add    esp,0x10
c001d604:	83 ec 0c             	sub    esp,0xc
c001d607:	6a 02                	push   0x2
c001d609:	e8 fb bf fe ff       	call   c0009609 <Virt::allocateKernelVirtualPages(int)>
c001d60e:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001d614:	6a 03                	push   0x3
c001d616:	50                   	push   eax
c001d617:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001d61d:	ff 35 b0 4f 02 c0    	push   DWORD PTR ds:0xc0024fb0
c001d623:	e8 c8 c6 fe ff       	call   c0009cf0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d628:	83 c4 14             	add    esp,0x14
c001d62b:	68 78 01 00 00       	push   0x178
c001d630:	e8 65 a4 fe ff       	call   c0007a9a <malloc>
c001d635:	83 c4 0c             	add    esp,0xc
c001d638:	89 c6                	mov    esi,eax
c001d63a:	6a 00                	push   0x0
c001d63c:	68 ff ff ff 7f       	push   0x7fffffff
c001d641:	6a 00                	push   0x0
c001d643:	6a 00                	push   0x0
c001d645:	53                   	push   ebx
c001d646:	68 86 1c 02 c0       	push   0xc0021c86
c001d64b:	50                   	push   eax
c001d64c:	e8 0b f9 fe ff       	call   c000cf5c <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d651:	83 c4 14             	add    esp,0x14
c001d654:	56                   	push   esi
c001d655:	e8 c2 f9 fe ff       	call   c000d01c <LogicalDisk::assignDriveLetter()>
c001d65a:	5a                   	pop    edx
c001d65b:	0f be c0             	movsx  eax,al
c001d65e:	59                   	pop    ecx
c001d65f:	50                   	push   eax
c001d660:	68 d8 1a 02 c0       	push   0xc0021ad8
c001d665:	e8 18 d3 fe ff       	call   c000a982 <Dbg::kprintf(char const*, ...)>
c001d66a:	58                   	pop    eax
c001d66b:	5a                   	pop    edx
c001d66c:	56                   	push   esi
c001d66d:	53                   	push   ebx
c001d66e:	e8 43 e7 fe ff       	call   c000bdb6 <Device::addChild(Device*)>
c001d673:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001d679:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d67c:	e8 69 eb fe ff       	call   c000c1ea <PhysicalDisk::startCache()>
c001d681:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001d688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d68b:	e8 b2 fe ff ff       	call   c001d542 <SATAPI::detectMedia()>
c001d690:	83 c4 14             	add    esp,0x14
c001d693:	31 c0                	xor    eax,eax
c001d695:	5b                   	pop    ebx
c001d696:	5e                   	pop    esi
c001d697:	c3                   	ret    

c001d698 <SATAPI::read(unsigned long long, int, void*)>:
c001d698:	57                   	push   edi
c001d699:	56                   	push   esi
c001d69a:	53                   	push   ebx
c001d69b:	83 ec 30             	sub    esp,0x30
c001d69e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001d6a2:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001d6a6:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001d6aa:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d6ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d6b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d6b6:	83 fe 04             	cmp    esi,0x4
c001d6b9:	7e 10                	jle    c001d6cb <SATAPI::read(unsigned long long, int, void*)+0x33>
c001d6bb:	83 ec 0c             	sub    esp,0xc
c001d6be:	68 94 1c 02 c0       	push   0xc0021c94
c001d6c3:	e8 97 31 ff ff       	call   c001085f <KePanic(char const*)>
c001d6c8:	83 c4 10             	add    esp,0x10
c001d6cb:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d6d1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d6d7:	51                   	push   ecx
c001d6d8:	50                   	push   eax
c001d6d9:	83 c0 02             	add    eax,0x2
c001d6dc:	c1 e0 07             	shl    eax,0x7
c001d6df:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001d6e5:	50                   	push   eax
c001d6e6:	52                   	push   edx
c001d6e7:	e8 8c e1 ff ff       	call   c001b878 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d6ec:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001d6f0:	b9 03 00 00 00       	mov    ecx,0x3
c001d6f5:	fc                   	cld    
c001d6f6:	31 c0                	xor    eax,eax
c001d6f8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d6fa:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001d6ff:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001d704:	83 c4 0c             	add    esp,0xc
c001d707:	6a 00                	push   0x0
c001d709:	6a 00                	push   0x0
c001d70b:	6a 00                	push   0x0
c001d70d:	6a 00                	push   0x0
c001d70f:	6a 02                	push   0x2
c001d711:	8d 44 24 30          	lea    eax,[esp+0x30]
c001d715:	50                   	push   eax
c001d716:	53                   	push   ebx
c001d717:	e8 0c fb ff ff       	call   c001d228 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d71c:	83 c4 20             	add    esp,0x20
c001d71f:	85 c0                	test   eax,eax
c001d721:	75 44                	jne    c001d767 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001d723:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001d727:	b9 03 00 00 00       	mov    ecx,0x3
c001d72c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d72e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d732:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001d737:	0f c8                	bswap  eax
c001d739:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001d73d:	89 f0                	mov    eax,esi
c001d73f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001d743:	50                   	push   eax
c001d744:	56                   	push   esi
c001d745:	c1 e6 0b             	shl    esi,0xb
c001d748:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001d74c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d750:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d754:	56                   	push   esi
c001d755:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d759:	50                   	push   eax
c001d75a:	53                   	push   ebx
c001d75b:	e8 c8 fa ff ff       	call   c001d228 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001d760:	83 c4 20             	add    esp,0x20
c001d763:	85 c0                	test   eax,eax
c001d765:	74 14                	je     c001d77b <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001d767:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d76b:	83 ec 0c             	sub    esp,0xc
c001d76e:	53                   	push   ebx
c001d76f:	e8 ce fd ff ff       	call   c001d542 <SATAPI::detectMedia()>
c001d774:	83 c4 10             	add    esp,0x10
c001d777:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d77b:	83 c4 30             	add    esp,0x30
c001d77e:	5b                   	pop    ebx
c001d77f:	5e                   	pop    esi
c001d780:	5f                   	pop    edi
c001d781:	c3                   	ret    

c001d782 <IOAPIC::close(int, int, void*)>:
c001d782:	b8 00 00 00 00       	mov    eax,0x0
c001d787:	c3                   	ret    

c001d788 <apicGetBase()>:
c001d788:	55                   	push   ebp
c001d789:	89 e5                	mov    ebp,esp
c001d78b:	83 ec 18             	sub    esp,0x18
c001d78e:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d793:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001d799:	83 e0 08             	and    eax,0x8
c001d79c:	0f b6 c0             	movzx  eax,al
c001d79f:	85 c0                	test   eax,eax
c001d7a1:	75 07                	jne    c001d7aa <apicGetBase()+0x22>
c001d7a3:	b8 00 00 00 00       	mov    eax,0x0
c001d7a8:	eb 21                	jmp    c001d7cb <apicGetBase()+0x43>
c001d7aa:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d7af:	83 ec 08             	sub    esp,0x8
c001d7b2:	6a 1b                	push   0x1b
c001d7b4:	50                   	push   eax
c001d7b5:	e8 fe 98 fe ff       	call   c00070b8 <Computer::rdmsr(unsigned int)>
c001d7ba:	83 c4 10             	add    esp,0x10
c001d7bd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d7c0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d7c3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d7c6:	25 00 00 ff ff       	and    eax,0xffff0000
c001d7cb:	c9                   	leave  
c001d7cc:	c3                   	ret    
c001d7cd:	90                   	nop

c001d7ce <IOAPIC::IOAPIC()>:
c001d7ce:	83 ec 0c             	sub    esp,0xc
c001d7d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7d5:	83 ec 08             	sub    esp,0x8
c001d7d8:	68 f8 1c 02 c0       	push   0xc0021cf8
c001d7dd:	50                   	push   eax
c001d7de:	e8 6b e7 fe ff       	call   c000bf4e <Device::Device(char const*)>
c001d7e3:	83 c4 10             	add    esp,0x10
c001d7e6:	ba 08 1d 02 c0       	mov    edx,0xc0021d08
c001d7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d7ef:	89 10                	mov    DWORD PTR [eax],edx
c001d7f1:	90                   	nop
c001d7f2:	83 c4 0c             	add    esp,0xc
c001d7f5:	c3                   	ret    

c001d7f6 <apicOpen()>:
c001d7f6:	55                   	push   ebp
c001d7f7:	89 e5                	mov    ebp,esp
c001d7f9:	53                   	push   ebx
c001d7fa:	83 ec 34             	sub    esp,0x34
c001d7fd:	a0 a0 8b 02 c0       	mov    al,ds:0xc0028ba0
c001d802:	83 f0 01             	xor    eax,0x1
c001d805:	0f b6 c0             	movzx  eax,al
c001d808:	85 c0                	test   eax,eax
c001d80a:	0f 84 a3 00 00 00    	je     c001d8b3 <apicOpen()+0xbd>
c001d810:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d814:	a0 80 77 02 c0       	mov    al,ds:0xc0027780
c001d819:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d81d:	0f b6 c0             	movzx  eax,al
c001d820:	39 c2                	cmp    edx,eax
c001d822:	0f 83 84 00 00 00    	jae    c001d8ac <apicOpen()+0xb6>
c001d828:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001d82f:	83 ec 0c             	sub    esp,0xc
c001d832:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001d835:	e8 60 a2 fe ff       	call   c0007a9a <malloc>
c001d83a:	83 c4 10             	add    esp,0x10
c001d83d:	89 c3                	mov    ebx,eax
c001d83f:	83 ec 0c             	sub    esp,0xc
c001d842:	53                   	push   ebx
c001d843:	e8 86 ff ff ff       	call   c001d7ce <IOAPIC::IOAPIC()>
c001d848:	83 c4 10             	add    esp,0x10
c001d84b:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001d84e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001d852:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d855:	89 14 85 80 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7480],edx
c001d85c:	a1 60 8b 02 c0       	mov    eax,ds:0xc0028b60
c001d861:	83 c0 01             	add    eax,0x1
c001d864:	a3 60 8b 02 c0       	mov    ds:0xc0028b60,eax
c001d869:	a1 b8 4e 02 c0       	mov    eax,ds:0xc0024eb8
c001d86e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001d874:	83 ec 08             	sub    esp,0x8
c001d877:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d87a:	50                   	push   eax
c001d87b:	e8 36 e5 fe ff       	call   c000bdb6 <Device::addChild(Device*)>
c001d880:	83 c4 10             	add    esp,0x10
c001d883:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d886:	8b 00                	mov    eax,DWORD PTR [eax]
c001d888:	83 c0 08             	add    eax,0x8
c001d88b:	8b 00                	mov    eax,DWORD PTR [eax]
c001d88d:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001d891:	6a 00                	push   0x0
c001d893:	6a 00                	push   0x0
c001d895:	52                   	push   edx
c001d896:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001d899:	ff d0                	call   eax
c001d89b:	83 c4 10             	add    esp,0x10
c001d89e:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d8a1:	83 c0 01             	add    eax,0x1
c001d8a4:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001d8a7:	e9 68 ff ff ff       	jmp    c001d814 <apicOpen()+0x1e>
c001d8ac:	c6 05 a0 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028ba0,0x1
c001d8b3:	e8 d0 fe ff ff       	call   c001d788 <apicGetBase()>
c001d8b8:	05 f0 00 00 00       	add    eax,0xf0
c001d8bd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d8c0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d8c3:	8b 00                	mov    eax,DWORD PTR [eax]
c001d8c5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d8c8:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001d8cf:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001d8d6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001d8d9:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d8dc:	89 10                	mov    DWORD PTR [eax],edx
c001d8de:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d8e5:	a1 d0 76 02 c0       	mov    eax,ds:0xc00276d0
c001d8ea:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d8ed:	7d 7c                	jge    c001d96b <apicOpen()+0x175>
c001d8ef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d8f2:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d8f9:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001d8fc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d8ff:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d906:	c1 e8 08             	shr    eax,0x8
c001d909:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001d90d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d910:	8b 04 85 e0 76 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8920]
c001d917:	c1 e8 18             	shr    eax,0x18
c001d91a:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001d91d:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001d921:	3d ff 00 00 00       	cmp    eax,0xff
c001d926:	75 3a                	jne    c001d962 <apicOpen()+0x16c>
c001d928:	e8 5b fe ff ff       	call   c001d788 <apicGetBase()>
c001d92d:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001d931:	83 fa 01             	cmp    edx,0x1
c001d934:	75 07                	jne    c001d93d <apicOpen()+0x147>
c001d936:	ba 60 03 00 00       	mov    edx,0x360
c001d93b:	eb 05                	jmp    c001d942 <apicOpen()+0x14c>
c001d93d:	ba 50 03 00 00       	mov    edx,0x350
c001d942:	01 d0                	add    eax,edx
c001d944:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d947:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d94a:	8b 00                	mov    eax,DWORD PTR [eax]
c001d94c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001d94f:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001d956:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001d95a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d95d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d960:	89 10                	mov    DWORD PTR [eax],edx
c001d962:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001d966:	e9 7a ff ff ff       	jmp    c001d8e5 <apicOpen()+0xef>
c001d96b:	90                   	nop
c001d96c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d96f:	c9                   	leave  
c001d970:	c3                   	ret    
c001d971:	90                   	nop

c001d972 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d972:	55                   	push   ebp
c001d973:	89 e5                	mov    ebp,esp
c001d975:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d978:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d97e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d981:	72 1d                	jb     c001d9a0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d983:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d986:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d98c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d98f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d995:	01 d0                	add    eax,edx
c001d997:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d99a:	73 04                	jae    c001d9a0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d99c:	b0 01                	mov    al,0x1
c001d99e:	eb 02                	jmp    c001d9a2 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d9a0:	b0 00                	mov    al,0x0
c001d9a2:	5d                   	pop    ebp
c001d9a3:	c3                   	ret    

c001d9a4 <IOAPIC::read(int)>:
c001d9a4:	55                   	push   ebp
c001d9a5:	89 e5                	mov    ebp,esp
c001d9a7:	83 ec 10             	sub    esp,0x10
c001d9aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9ad:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d9b3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d9b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d9b9:	0f b6 d0             	movzx  edx,al
c001d9bc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9bf:	89 10                	mov    DWORD PTR [eax],edx
c001d9c1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d9c4:	83 c0 10             	add    eax,0x10
c001d9c7:	8b 00                	mov    eax,DWORD PTR [eax]
c001d9c9:	c9                   	leave  
c001d9ca:	c3                   	ret    
c001d9cb:	90                   	nop

c001d9cc <IOAPIC::open(int, int, void*)>:
c001d9cc:	55                   	push   ebp
c001d9cd:	89 e5                	mov    ebp,esp
c001d9cf:	57                   	push   edi
c001d9d0:	56                   	push   esi
c001d9d1:	53                   	push   ebx
c001d9d2:	83 ec 04             	sub    esp,0x4
c001d9d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9d8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d9db:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d9e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9e4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d9ea:	8b 14 85 c0 77 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8840]
c001d9f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9f4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d9fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d9fd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001da03:	8b 14 85 40 78 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd87c0]
c001da0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da0d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001da13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da16:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001da1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da1f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001da25:	0f b6 f0             	movzx  esi,al
c001da28:	89 d0                	mov    eax,edx
c001da2a:	ba 00 00 00 00       	mov    edx,0x0
c001da2f:	89 c7                	mov    edi,eax
c001da31:	83 e7 ff             	and    edi,0xffffffff
c001da34:	89 f9                	mov    ecx,edi
c001da36:	0f b6 da             	movzx  ebx,dl
c001da39:	89 c8                	mov    eax,ecx
c001da3b:	89 da                	mov    edx,ebx
c001da3d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001da40:	8d 5e 08             	lea    ebx,[esi+0x8]
c001da43:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001da47:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001da4b:	83 e0 00             	and    eax,0x0
c001da4e:	09 d0                	or     eax,edx
c001da50:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001da54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da57:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001da5d:	8d 50 01             	lea    edx,[eax+0x1]
c001da60:	88 d1                	mov    cl,dl
c001da62:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001da65:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001da6b:	0f b6 d0             	movzx  edx,al
c001da6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da71:	83 c2 08             	add    edx,0x8
c001da74:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001da78:	0f b6 c9             	movzx  ecx,cl
c001da7b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001da81:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001da85:	6a 01                	push   0x1
c001da87:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da8a:	e8 15 ff ff ff       	call   c001d9a4 <IOAPIC::read(int)>
c001da8f:	83 c4 08             	add    esp,0x8
c001da92:	c1 f8 10             	sar    eax,0x10
c001da95:	0f b6 c0             	movzx  eax,al
c001da98:	8d 50 01             	lea    edx,[eax+0x1]
c001da9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001da9e:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001daa4:	b8 00 00 00 00       	mov    eax,0x0
c001daa9:	8d 65 f4             	lea    esp,[ebp-0xc]
c001daac:	5b                   	pop    ebx
c001daad:	5e                   	pop    esi
c001daae:	5f                   	pop    edi
c001daaf:	5d                   	pop    ebp
c001dab0:	c3                   	ret    
c001dab1:	90                   	nop

c001dab2 <IOAPIC::write(int, int)>:
c001dab2:	55                   	push   ebp
c001dab3:	89 e5                	mov    ebp,esp
c001dab5:	83 ec 10             	sub    esp,0x10
c001dab8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dabb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001dac1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001dac4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dac7:	0f b6 d0             	movzx  edx,al
c001daca:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dacd:	89 10                	mov    DWORD PTR [eax],edx
c001dacf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dad2:	8d 50 10             	lea    edx,[eax+0x10]
c001dad5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001dad8:	89 02                	mov    DWORD PTR [edx],eax
c001dada:	90                   	nop
c001dadb:	c9                   	leave  
c001dadc:	c3                   	ret    
c001dadd:	90                   	nop

c001dade <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001dade:	55                   	push   ebp
c001dadf:	89 e5                	mov    ebp,esp
c001dae1:	53                   	push   ebx
c001dae2:	83 ec 2c             	sub    esp,0x2c
c001dae5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dae8:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001daeb:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001daee:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001daf1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001daf4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001daf7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001dafa:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001dafd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001db00:	88 d8                	mov    al,bl
c001db02:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001db05:	88 c8                	mov    al,cl
c001db07:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001db0a:	88 d0                	mov    al,dl
c001db0c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001db0f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001db13:	83 c0 08             	add    eax,0x8
c001db16:	01 c0                	add    eax,eax
c001db18:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001db1b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001db1f:	83 c0 08             	add    eax,0x8
c001db22:	01 c0                	add    eax,eax
c001db24:	83 c0 01             	add    eax,0x1
c001db27:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001db2a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001db2d:	50                   	push   eax
c001db2e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db31:	e8 6e fe ff ff       	call   c001d9a4 <IOAPIC::read(int)>
c001db36:	83 c4 08             	add    esp,0x8
c001db39:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001db3c:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001db43:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001db46:	c1 e0 18             	shl    eax,0x18
c001db49:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001db4c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001db4f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001db52:	52                   	push   edx
c001db53:	50                   	push   eax
c001db54:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db57:	e8 56 ff ff ff       	call   c001dab2 <IOAPIC::write(int, int)>
c001db5c:	83 c4 0c             	add    esp,0xc
c001db5f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001db62:	50                   	push   eax
c001db63:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001db66:	e8 39 fe ff ff       	call   c001d9a4 <IOAPIC::read(int)>
c001db6b:	83 c4 08             	add    esp,0x8
c001db6e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001db71:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001db78:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001db7f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001db86:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001db8a:	85 c0                	test   eax,eax
c001db8c:	74 09                	je     c001db97 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001db8e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001db95:	eb 07                	jmp    c001db9e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001db97:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001db9e:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001dba2:	85 c0                	test   eax,eax
c001dba4:	74 09                	je     c001dbaf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001dba6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001dbad:	eb 07                	jmp    c001dbb6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001dbaf:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001dbb6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001dbbd:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001dbc1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001dbc4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001dbc7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dbca:	52                   	push   edx
c001dbcb:	50                   	push   eax
c001dbcc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dbcf:	e8 de fe ff ff       	call   c001dab2 <IOAPIC::write(int, int)>
c001dbd4:	83 c4 0c             	add    esp,0xc
c001dbd7:	90                   	nop
c001dbd8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001dbdb:	c9                   	leave  
c001dbdc:	c3                   	ret    
c001dbdd:	66 90                	xchg   ax,ax
c001dbdf:	90                   	nop

c001dbe0 <APICTimer::close(int, int, void*)>:
c001dbe0:	b8 00 00 00 00       	mov    eax,0x0
c001dbe5:	c3                   	ret    
c001dbe6:	66 90                	xchg   ax,ax

c001dbe8 <apicTimerHandler(regs*, void*)>:
c001dbe8:	83 ec 0c             	sub    esp,0xc
c001dbeb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dbef:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dbf1:	b8 10 27 00 00       	mov    eax,0x2710
c001dbf6:	ba 00 00 00 00       	mov    edx,0x0
c001dbfb:	f7 f1                	div    ecx
c001dbfd:	83 ec 0c             	sub    esp,0xc
c001dc00:	50                   	push   eax
c001dc01:	e8 12 fc fe ff       	call   c000d818 <timerHandler(unsigned int)>
c001dc06:	83 c4 10             	add    esp,0x10
c001dc09:	90                   	nop
c001dc0a:	83 c4 0c             	add    esp,0xc
c001dc0d:	c3                   	ret    
c001dc0e:	66 90                	xchg   ax,ax

c001dc10 <APICTimer::open(int, int, void*)>:
c001dc10:	83 ec 0c             	sub    esp,0xc
c001dc13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc17:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc19:	83 c0 24             	add    eax,0x24
c001dc1c:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc1e:	83 ec 08             	sub    esp,0x8
c001dc21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc29:	ff d0                	call   eax
c001dc2b:	83 c4 10             	add    esp,0x10
c001dc2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc32:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dc36:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dc3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc44:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001dc4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dc4e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001dc54:	83 ec 0c             	sub    esp,0xc
c001dc57:	51                   	push   ecx
c001dc58:	6a 01                	push   0x1
c001dc5a:	68 e8 db 01 c0       	push   0xc001dbe8
c001dc5f:	52                   	push   edx
c001dc60:	50                   	push   eax
c001dc61:	e8 fc e0 fe ff       	call   c000bd62 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc66:	83 c4 20             	add    esp,0x20
c001dc69:	89 c2                	mov    edx,eax
c001dc6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc6f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dc75:	b8 00 00 00 00       	mov    eax,0x0
c001dc7a:	83 c4 0c             	add    esp,0xc
c001dc7d:	c3                   	ret    
c001dc7e:	66 90                	xchg   ax,ax

c001dc80 <APICTimer::write(int)>:
c001dc80:	83 ec 0c             	sub    esp,0xc
c001dc83:	83 ec 0c             	sub    esp,0xc
c001dc86:	68 2c 1d 02 c0       	push   0xc0021d2c
c001dc8b:	e8 cf 2b ff ff       	call   c001085f <KePanic(char const*)>
c001dc90:	83 c4 10             	add    esp,0x10
c001dc93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc97:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dc9b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dca1:	90                   	nop
c001dca2:	83 c4 0c             	add    esp,0xc
c001dca5:	c3                   	ret    
c001dca6:	66 90                	xchg   ax,ax

c001dca8 <APICTimer::APICTimer()>:
c001dca8:	83 ec 0c             	sub    esp,0xc
c001dcab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcaf:	83 ec 08             	sub    esp,0x8
c001dcb2:	68 3c 1d 02 c0       	push   0xc0021d3c
c001dcb7:	50                   	push   eax
c001dcb8:	e8 8f fa fe ff       	call   c000d74c <Timer::Timer(char const*)>
c001dcbd:	83 c4 10             	add    esp,0x10
c001dcc0:	ba 50 1d 02 c0       	mov    edx,0xc0021d50
c001dcc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcc9:	89 10                	mov    DWORD PTR [eax],edx
c001dccb:	90                   	nop
c001dccc:	83 c4 0c             	add    esp,0xc
c001dccf:	c3                   	ret    

c001dcd0 <PIT::write(int)>:
c001dcd0:	83 ec 10             	sub    esp,0x10
c001dcd3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dcd7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dcdb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dce1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dce5:	a3 a4 8b 02 c0       	mov    ds:0xc0028ba4,eax
c001dcea:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001dcef:	89 c2                	mov    edx,eax
c001dcf1:	c1 fa 1f             	sar    edx,0x1f
c001dcf4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001dcf8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dcfc:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001dd03:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001dd08:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001dd0c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001dd11:	ee                   	out    dx,al
c001dd12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd16:	0f b6 c0             	movzx  eax,al
c001dd19:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001dd20:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001dd24:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001dd28:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001dd2d:	ee                   	out    dx,al
c001dd2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd32:	c1 f8 08             	sar    eax,0x8
c001dd35:	0f b6 c0             	movzx  eax,al
c001dd38:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001dd3f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001dd43:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001dd47:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001dd4c:	ee                   	out    dx,al
c001dd4d:	90                   	nop
c001dd4e:	83 c4 10             	add    esp,0x10
c001dd51:	c3                   	ret    
c001dd52:	66 90                	xchg   ax,ax

c001dd54 <pitHandler(regs*, void*)>:
c001dd54:	83 ec 0c             	sub    esp,0xc
c001dd57:	8b 0d a4 8b 02 c0    	mov    ecx,DWORD PTR ds:0xc0028ba4
c001dd5d:	b8 10 27 00 00       	mov    eax,0x2710
c001dd62:	89 c2                	mov    edx,eax
c001dd64:	c1 fa 1f             	sar    edx,0x1f
c001dd67:	f7 f9                	idiv   ecx
c001dd69:	83 ec 0c             	sub    esp,0xc
c001dd6c:	50                   	push   eax
c001dd6d:	e8 a6 fa fe ff       	call   c000d818 <timerHandler(unsigned int)>
c001dd72:	83 c4 10             	add    esp,0x10
c001dd75:	90                   	nop
c001dd76:	83 c4 0c             	add    esp,0xc
c001dd79:	c3                   	ret    
c001dd7a:	66 90                	xchg   ax,ax

c001dd7c <PIT::open(int, int, void*)>:
c001dd7c:	83 ec 0c             	sub    esp,0xc
c001dd7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd83:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd85:	83 c0 24             	add    eax,0x24
c001dd88:	8b 00                	mov    eax,DWORD PTR [eax]
c001dd8a:	83 ec 08             	sub    esp,0x8
c001dd8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd95:	ff d0                	call   eax
c001dd97:	83 c4 10             	add    esp,0x10
c001dd9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd9e:	83 ec 0c             	sub    esp,0xc
c001dda1:	6a 00                	push   0x0
c001dda3:	6a 01                	push   0x1
c001dda5:	68 54 dd 01 c0       	push   0xc001dd54
c001ddaa:	6a 00                	push   0x0
c001ddac:	50                   	push   eax
c001ddad:	e8 b0 df fe ff       	call   c000bd62 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ddb2:	83 c4 20             	add    esp,0x20
c001ddb5:	89 c2                	mov    edx,eax
c001ddb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddbb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ddc1:	b8 00 00 00 00       	mov    eax,0x0
c001ddc6:	83 c4 0c             	add    esp,0xc
c001ddc9:	c3                   	ret    
c001ddca:	66 90                	xchg   ax,ax

c001ddcc <PIT::close(int, int, void*)>:
c001ddcc:	83 ec 0c             	sub    esp,0xc
c001ddcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddd3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001dddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dde1:	6a 01                	push   0x1
c001dde3:	68 54 dd 01 c0       	push   0xc001dd54
c001dde8:	6a 00                	push   0x0
c001ddea:	50                   	push   eax
c001ddeb:	e8 a8 df fe ff       	call   c000bd98 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ddf0:	83 c4 10             	add    esp,0x10
c001ddf3:	b8 00 00 00 00       	mov    eax,0x0
c001ddf8:	83 c4 0c             	add    esp,0xc
c001ddfb:	c3                   	ret    

c001ddfc <PIT::PIT()>:
c001ddfc:	83 ec 0c             	sub    esp,0xc
c001ddff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de03:	83 ec 08             	sub    esp,0x8
c001de06:	68 78 1d 02 c0       	push   0xc0021d78
c001de0b:	50                   	push   eax
c001de0c:	e8 3b f9 fe ff       	call   c000d74c <Timer::Timer(char const*)>
c001de11:	83 c4 10             	add    esp,0x10
c001de14:	ba a0 1d 02 c0       	mov    edx,0xc0021da0
c001de19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de1d:	89 10                	mov    DWORD PTR [eax],edx
c001de1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de23:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de29:	0f b6 d0             	movzx  edx,al
c001de2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de30:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001de37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de3b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de41:	0f b6 d0             	movzx  edx,al
c001de44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de48:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001de4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de51:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001de57:	8d 50 01             	lea    edx,[eax+0x1]
c001de5a:	88 d1                	mov    cl,dl
c001de5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001de60:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001de66:	0f b6 d0             	movzx  edx,al
c001de69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de6d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001de71:	83 e1 3f             	and    ecx,0x3f
c001de74:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001de78:	90                   	nop
c001de79:	83 c4 0c             	add    esp,0xc
c001de7c:	c3                   	ret    
c001de7d:	66 90                	xchg   ax,ax
c001de7f:	90                   	nop

c001de80 <avxDetect>:
c001de80:	b8 01 00 00 00       	mov    eax,0x1
c001de85:	0f a2                	cpuid  
c001de87:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001de8d:	74 15                	je     c001dea4 <avxDetect.noAVX>
c001de8f:	b8 01 00 00 00       	mov    eax,0x1
c001de94:	0f a2                	cpuid  
c001de96:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001de9c:	74 06                	je     c001dea4 <avxDetect.noAVX>
c001de9e:	b8 01 00 00 00       	mov    eax,0x1
c001dea3:	c3                   	ret    

c001dea4 <avxDetect.noAVX>:
c001dea4:	b8 00 00 00 00       	mov    eax,0x0
c001dea9:	c3                   	ret    

c001deaa <avxSave>:
c001deaa:	53                   	push   ebx
c001deab:	52                   	push   edx
c001deac:	31 c0                	xor    eax,eax
c001deae:	48                   	dec    eax
c001deaf:	89 c2                	mov    edx,eax
c001deb1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001deb5:	0f ae 23             	xsave  [ebx]
c001deb8:	5a                   	pop    edx
c001deb9:	5b                   	pop    ebx
c001deba:	c3                   	ret    

c001debb <avxLoad>:
c001debb:	53                   	push   ebx
c001debc:	52                   	push   edx
c001debd:	31 c0                	xor    eax,eax
c001debf:	48                   	dec    eax
c001dec0:	89 c2                	mov    edx,eax
c001dec2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dec6:	0f ae 2b             	xrstor [ebx]
c001dec9:	5a                   	pop    edx
c001deca:	5b                   	pop    ebx
c001decb:	c3                   	ret    

c001decc <avxInit>:
c001decc:	e8 67 03 00 00       	call   c001e238 <sseInit>
c001ded1:	50                   	push   eax
c001ded2:	51                   	push   ecx
c001ded3:	0f 20 e0             	mov    eax,cr4
c001ded6:	0d 00 00 04 00       	or     eax,0x40000
c001dedb:	0f 22 e0             	mov    cr4,eax
c001dede:	31 c9                	xor    ecx,ecx
c001dee0:	0f 01 d0             	xgetbv 
c001dee3:	0d 07 00 00 00       	or     eax,0x7
c001dee8:	0f 01 d1             	xsetbv 
c001deeb:	59                   	pop    ecx
c001deec:	58                   	pop    eax
c001deed:	c3                   	ret    

c001deee <avxClose>:
c001deee:	c3                   	ret    

c001deef <wouldSheSayYes>:
c001deef:	c3                   	ret    
c001def0:	49                   	dec    ecx
c001def1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001def5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001def9:	75 20                	jne    c001df1b <isr0+0xb>
c001defb:	4e                   	dec    esi
c001defc:	79 61                	jns    c001df5f <isr7+0x3>
c001defe:	68 2e 2e 2e 00       	push   0x2e2e2e
c001df03:	66 90                	xchg   ax,ax
c001df05:	66 90                	xchg   ax,ax
c001df07:	66 90                	xchg   ax,ax
c001df09:	66 90                	xchg   ax,ax
c001df0b:	66 90                	xchg   ax,ax
c001df0d:	66 90                	xchg   ax,ax
c001df0f:	90                   	nop

c001df10 <isr0>:
c001df10:	fa                   	cli    
c001df11:	68 00 00 00 00       	push   0x0
c001df16:	68 00 00 00 00       	push   0x0
c001df1b:	e9 56 01 00 00       	jmp    c001e076 <int_common_stub>

c001df20 <isr1>:
c001df20:	fa                   	cli    
c001df21:	6a 00                	push   0x0
c001df23:	6a 01                	push   0x1
c001df25:	e9 4c 01 00 00       	jmp    c001e076 <int_common_stub>

c001df2a <isr2>:
c001df2a:	fa                   	cli    
c001df2b:	6a 00                	push   0x0
c001df2d:	6a 02                	push   0x2
c001df2f:	e9 42 01 00 00       	jmp    c001e076 <int_common_stub>

c001df34 <isr3>:
c001df34:	fa                   	cli    
c001df35:	6a 00                	push   0x0
c001df37:	6a 03                	push   0x3
c001df39:	e9 38 01 00 00       	jmp    c001e076 <int_common_stub>

c001df3e <isr4>:
c001df3e:	fa                   	cli    
c001df3f:	6a 00                	push   0x0
c001df41:	6a 04                	push   0x4
c001df43:	e9 2e 01 00 00       	jmp    c001e076 <int_common_stub>

c001df48 <isr5>:
c001df48:	fa                   	cli    
c001df49:	6a 00                	push   0x0
c001df4b:	6a 05                	push   0x5
c001df4d:	e9 24 01 00 00       	jmp    c001e076 <int_common_stub>

c001df52 <isr6>:
c001df52:	fa                   	cli    
c001df53:	6a 00                	push   0x0
c001df55:	6a 06                	push   0x6
c001df57:	e9 1a 01 00 00       	jmp    c001e076 <int_common_stub>

c001df5c <isr7>:
c001df5c:	fa                   	cli    
c001df5d:	6a 00                	push   0x0
c001df5f:	6a 07                	push   0x7
c001df61:	e9 10 01 00 00       	jmp    c001e076 <int_common_stub>

c001df66 <isr8>:
c001df66:	fa                   	cli    
c001df67:	6a 08                	push   0x8
c001df69:	e9 08 01 00 00       	jmp    c001e076 <int_common_stub>

c001df6e <isr9>:
c001df6e:	fa                   	cli    
c001df6f:	6a 00                	push   0x0
c001df71:	6a 09                	push   0x9
c001df73:	e9 fe 00 00 00       	jmp    c001e076 <int_common_stub>

c001df78 <isr10>:
c001df78:	fa                   	cli    
c001df79:	6a 0a                	push   0xa
c001df7b:	e9 f6 00 00 00       	jmp    c001e076 <int_common_stub>

c001df80 <isr11>:
c001df80:	fa                   	cli    
c001df81:	6a 0b                	push   0xb
c001df83:	e9 ee 00 00 00       	jmp    c001e076 <int_common_stub>

c001df88 <isr12>:
c001df88:	fa                   	cli    
c001df89:	6a 0c                	push   0xc
c001df8b:	e9 e6 00 00 00       	jmp    c001e076 <int_common_stub>

c001df90 <isr13>:
c001df90:	fa                   	cli    
c001df91:	6a 0d                	push   0xd
c001df93:	53                   	push   ebx
c001df94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001df98:	81 fb 66 e1 01 c0    	cmp    ebx,0xc001e166
c001df9e:	5b                   	pop    ebx
c001df9f:	0f 84 c3 01 00 00    	je     c001e168 <finishSignal2>
c001dfa5:	e9 cc 00 00 00       	jmp    c001e076 <int_common_stub>

c001dfaa <isr14>:
c001dfaa:	fa                   	cli    
c001dfab:	6a 0e                	push   0xe
c001dfad:	e9 c4 00 00 00       	jmp    c001e076 <int_common_stub>

c001dfb2 <isr15>:
c001dfb2:	fa                   	cli    
c001dfb3:	6a 00                	push   0x0
c001dfb5:	6a 0f                	push   0xf
c001dfb7:	e9 ba 00 00 00       	jmp    c001e076 <int_common_stub>

c001dfbc <isr16>:
c001dfbc:	fa                   	cli    
c001dfbd:	6a 00                	push   0x0
c001dfbf:	6a 10                	push   0x10
c001dfc1:	e9 b0 00 00 00       	jmp    c001e076 <int_common_stub>

c001dfc6 <isr17>:
c001dfc6:	fa                   	cli    
c001dfc7:	6a 00                	push   0x0
c001dfc9:	6a 11                	push   0x11
c001dfcb:	e9 a6 00 00 00       	jmp    c001e076 <int_common_stub>

c001dfd0 <isr18>:
c001dfd0:	fa                   	cli    
c001dfd1:	6a 00                	push   0x0
c001dfd3:	6a 12                	push   0x12
c001dfd5:	e9 9c 00 00 00       	jmp    c001e076 <int_common_stub>

c001dfda <irq3>:
c001dfda:	fa                   	cli    
c001dfdb:	6a 00                	push   0x0
c001dfdd:	6a 23                	push   0x23
c001dfdf:	e9 92 00 00 00       	jmp    c001e076 <int_common_stub>

c001dfe4 <irq4>:
c001dfe4:	fa                   	cli    
c001dfe5:	6a 00                	push   0x0
c001dfe7:	6a 24                	push   0x24
c001dfe9:	e9 88 00 00 00       	jmp    c001e076 <int_common_stub>

c001dfee <irq5>:
c001dfee:	fa                   	cli    
c001dfef:	6a 00                	push   0x0
c001dff1:	6a 25                	push   0x25
c001dff3:	e9 7e 00 00 00       	jmp    c001e076 <int_common_stub>

c001dff8 <irq6>:
c001dff8:	fa                   	cli    
c001dff9:	6a 00                	push   0x0
c001dffb:	6a 26                	push   0x26
c001dffd:	e9 74 00 00 00       	jmp    c001e076 <int_common_stub>

c001e002 <irq7>:
c001e002:	fa                   	cli    
c001e003:	6a 00                	push   0x0
c001e005:	6a 27                	push   0x27
c001e007:	e9 6a 00 00 00       	jmp    c001e076 <int_common_stub>

c001e00c <irq8>:
c001e00c:	fa                   	cli    
c001e00d:	6a 00                	push   0x0
c001e00f:	6a 28                	push   0x28
c001e011:	e9 60 00 00 00       	jmp    c001e076 <int_common_stub>

c001e016 <irq9>:
c001e016:	fa                   	cli    
c001e017:	6a 00                	push   0x0
c001e019:	6a 29                	push   0x29
c001e01b:	e9 56 00 00 00       	jmp    c001e076 <int_common_stub>

c001e020 <irq10>:
c001e020:	fa                   	cli    
c001e021:	6a 00                	push   0x0
c001e023:	6a 2a                	push   0x2a
c001e025:	e9 4c 00 00 00       	jmp    c001e076 <int_common_stub>

c001e02a <irq11>:
c001e02a:	fa                   	cli    
c001e02b:	6a 00                	push   0x0
c001e02d:	6a 2b                	push   0x2b
c001e02f:	e9 42 00 00 00       	jmp    c001e076 <int_common_stub>

c001e034 <irq12>:
c001e034:	fa                   	cli    
c001e035:	6a 00                	push   0x0
c001e037:	6a 2c                	push   0x2c
c001e039:	e9 38 00 00 00       	jmp    c001e076 <int_common_stub>

c001e03e <irq13>:
c001e03e:	fa                   	cli    
c001e03f:	6a 00                	push   0x0
c001e041:	6a 2d                	push   0x2d
c001e043:	e9 2e 00 00 00       	jmp    c001e076 <int_common_stub>

c001e048 <irq14>:
c001e048:	fa                   	cli    
c001e049:	6a 00                	push   0x0
c001e04b:	6a 2e                	push   0x2e
c001e04d:	e9 24 00 00 00       	jmp    c001e076 <int_common_stub>

c001e052 <irq15>:
c001e052:	fa                   	cli    
c001e053:	6a 00                	push   0x0
c001e055:	6a 2f                	push   0x2f
c001e057:	e9 1a 00 00 00       	jmp    c001e076 <int_common_stub>

c001e05c <irq1>:
c001e05c:	fa                   	cli    
c001e05d:	6a 00                	push   0x0
c001e05f:	6a 21                	push   0x21
c001e061:	eb 13                	jmp    c001e076 <int_common_stub>

c001e063 <irq2>:
c001e063:	fa                   	cli    
c001e064:	6a 00                	push   0x0
c001e066:	6a 22                	push   0x22
c001e068:	eb 0c                	jmp    c001e076 <int_common_stub>

c001e06a <isr96>:
c001e06a:	6a 00                	push   0x0
c001e06c:	6a 60                	push   0x60
c001e06e:	fb                   	sti    
c001e06f:	eb 37                	jmp    c001e0a8 <syscall_common_stub>

c001e071 <irq0>:
c001e071:	fa                   	cli    
c001e072:	6a 00                	push   0x0
c001e074:	6a 20                	push   0x20

c001e076 <int_common_stub>:
c001e076:	60                   	pusha  
c001e077:	1e                   	push   ds
c001e078:	06                   	push   es
c001e079:	0f a0                	push   fs
c001e07b:	0f a8                	push   gs
c001e07d:	66 b8 10 00          	mov    ax,0x10
c001e081:	66 8e d8             	mov    ds,ax
c001e084:	66 8e c0             	mov    es,ax
c001e087:	66 8e e0             	mov    fs,ax
c001e08a:	66 8e e8             	mov    gs,ax
c001e08d:	54                   	push   esp
c001e08e:	fc                   	cld    
c001e08f:	e8 cc e1 fe ff       	call   c000c260 <int_handler>
c001e094:	81 c4 04 00 00 00    	add    esp,0x4
c001e09a:	0f a9                	pop    gs
c001e09c:	0f a1                	pop    fs
c001e09e:	07                   	pop    es
c001e09f:	1f                   	pop    ds
c001e0a0:	61                   	popa   
c001e0a1:	81 c4 08 00 00 00    	add    esp,0x8
c001e0a7:	cf                   	iret   

c001e0a8 <syscall_common_stub>:
c001e0a8:	60                   	pusha  
c001e0a9:	1e                   	push   ds
c001e0aa:	06                   	push   es
c001e0ab:	0f a0                	push   fs
c001e0ad:	0f a8                	push   gs
c001e0af:	66 b8 10 00          	mov    ax,0x10
c001e0b3:	66 8e d8             	mov    ds,ax
c001e0b6:	66 8e c0             	mov    es,ax
c001e0b9:	66 8e e0             	mov    fs,ax
c001e0bc:	66 8e e8             	mov    gs,ax
c001e0bf:	54                   	push   esp
c001e0c0:	fc                   	cld    
c001e0c1:	e8 9a e1 fe ff       	call   c000c260 <int_handler>
c001e0c6:	81 c4 04 00 00 00    	add    esp,0x4
c001e0cc:	0f a9                	pop    gs
c001e0ce:	0f a1                	pop    fs
c001e0d0:	07                   	pop    es
c001e0d1:	1f                   	pop    ds
c001e0d2:	e8 90 2d ff ff       	call   c0010e67 <KiCheckSignalZ>
c001e0d7:	3d 00 00 00 00       	cmp    eax,0x0
c001e0dc:	0f 84 c0 00 00 00    	je     c001e1a2 <skipSignals>
c001e0e2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001e0e7:	61                   	popa   
c001e0e8:	53                   	push   ebx
c001e0e9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001e0ef:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001e0f2:	5b                   	pop    ebx
c001e0f3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001e0f8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001e0fb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001e0fe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e101:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001e104:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001e107:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001e10a:	81 c4 08 00 00 00    	add    esp,0x8
c001e110:	5e                   	pop    esi
c001e111:	5b                   	pop    ebx
c001e112:	59                   	pop    ecx
c001e113:	5a                   	pop    edx
c001e114:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001e117:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001e11a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001e11d:	52                   	push   edx
c001e11e:	51                   	push   ecx
c001e11f:	53                   	push   ebx
c001e120:	56                   	push   esi
c001e121:	81 ec 08 00 00 00    	sub    esp,0x8
c001e127:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001e12a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001e12d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001e130:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e133:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e136:	60                   	pusha  
c001e137:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001e13d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001e140:	89 e3                	mov    ebx,esp
c001e142:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001e145:	52                   	push   edx
c001e146:	68 66 e1 01 c0       	push   0xc001e166
c001e14b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001e14e:	89 dc                	mov    esp,ebx
c001e150:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001e153:	68 23 00 00 00       	push   0x23
c001e158:	51                   	push   ecx
c001e159:	68 02 02 00 00       	push   0x202
c001e15e:	68 1b 00 00 00       	push   0x1b
c001e163:	ff 36                	push   DWORD PTR [esi]
c001e165:	cf                   	iret   

c001e166 <finishSignal>:
c001e166:	cd 0f                	int    0xf

c001e168 <finishSignal2>:
c001e168:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001e16e:	e8 71 2d ff ff       	call   c0010ee4 <KiFinishSignalZ>
c001e173:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001e179:	68 23 00 00 00       	push   0x23
c001e17e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001e181:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001e184:	68 1b 00 00 00       	push   0x1b
c001e189:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001e18c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e18f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001e192:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001e195:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e198:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001e19b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001e19e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001e1a1:	cf                   	iret   

c001e1a2 <skipSignals>:
c001e1a2:	61                   	popa   
c001e1a3:	81 c4 08 00 00 00    	add    esp,0x8
c001e1a9:	cf                   	iret   
c001e1aa:	90                   	nop
c001e1ab:	90                   	nop

c001e1ac <irq16>:
c001e1ac:	fa                   	cli    
c001e1ad:	6a 00                	push   0x0
c001e1af:	6a 30                	push   0x30
c001e1b1:	e9 c0 fe ff ff       	jmp    c001e076 <int_common_stub>

c001e1b6 <irq17>:
c001e1b6:	fa                   	cli    
c001e1b7:	6a 00                	push   0x0
c001e1b9:	6a 31                	push   0x31
c001e1bb:	e9 b6 fe ff ff       	jmp    c001e076 <int_common_stub>

c001e1c0 <irq18>:
c001e1c0:	fa                   	cli    
c001e1c1:	6a 00                	push   0x0
c001e1c3:	6a 32                	push   0x32
c001e1c5:	e9 ac fe ff ff       	jmp    c001e076 <int_common_stub>

c001e1ca <irq19>:
c001e1ca:	fa                   	cli    
c001e1cb:	6a 00                	push   0x0
c001e1cd:	6a 33                	push   0x33
c001e1cf:	e9 a2 fe ff ff       	jmp    c001e076 <int_common_stub>

c001e1d4 <irq20>:
c001e1d4:	fa                   	cli    
c001e1d5:	6a 00                	push   0x0
c001e1d7:	6a 34                	push   0x34
c001e1d9:	e9 98 fe ff ff       	jmp    c001e076 <int_common_stub>

c001e1de <irq21>:
c001e1de:	fa                   	cli    
c001e1df:	6a 00                	push   0x0
c001e1e1:	6a 35                	push   0x35
c001e1e3:	e9 8e fe ff ff       	jmp    c001e076 <int_common_stub>

c001e1e8 <irq22>:
c001e1e8:	fa                   	cli    
c001e1e9:	6a 00                	push   0x0
c001e1eb:	6a 36                	push   0x36
c001e1ed:	e9 84 fe ff ff       	jmp    c001e076 <int_common_stub>

c001e1f2 <irq23>:
c001e1f2:	fa                   	cli    
c001e1f3:	6a 00                	push   0x0
c001e1f5:	6a 37                	push   0x37
c001e1f7:	e9 7a fe ff ff       	jmp    c001e076 <int_common_stub>
c001e1fc:	66 90                	xchg   ax,ax
c001e1fe:	66 90                	xchg   ax,ax

c001e200 <i386GetRDRAND>:
c001e200:	b9 64 00 00 00       	mov    ecx,0x64

c001e205 <retry>:
c001e205:	0f c7 f0             	rdrand eax
c001e208:	72 05                	jb     c001e20f <retry.done>
c001e20a:	e2 f9                	loop   c001e205 <retry>

c001e20c <retry.fail>:
c001e20c:	31 c0                	xor    eax,eax
c001e20e:	c3                   	ret    

c001e20f <retry.done>:
c001e20f:	c3                   	ret    

c001e210 <absolutelyNoChanceInHell>:
c001e210:	b8 01 00 00 00       	mov    eax,0x1
c001e215:	0f a2                	cpuid  
c001e217:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e21d:	74 06                	je     c001e225 <sseDetect.noSSE>
c001e21f:	b8 01 00 00 00       	mov    eax,0x1
c001e224:	c3                   	ret    

c001e225 <sseDetect.noSSE>:
c001e225:	31 c0                	xor    eax,eax
c001e227:	c3                   	ret    

c001e228 <sseSave>:
c001e228:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e22c:	0f ae 00             	fxsave [eax]
c001e22f:	c3                   	ret    

c001e230 <sseLoad>:
c001e230:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e234:	0f ae 08             	fxrstor [eax]
c001e237:	c3                   	ret    

c001e238 <sseInit>:
c001e238:	e8 42 00 00 00       	call   c001e27f <x87Init>
c001e23d:	0f 20 e0             	mov    eax,cr4
c001e240:	66 0d 00 06          	or     ax,0x600
c001e244:	0f 22 e0             	mov    cr4,eax
c001e247:	c3                   	ret    

c001e248 <sseClose>:
c001e248:	c3                   	ret    
c001e249:	66 90                	xchg   ax,ax
c001e24b:	66 90                	xchg   ax,ax
c001e24d:	66 90                	xchg   ax,ax
c001e24f:	90                   	nop

c001e250 <value_37F>:
c001e250:	7f 03                	jg     c001e255 <value_37A+0x1>

c001e252 <value_37E>:
c001e252:	7e 03                	jle    c001e257 <x87Detect+0x1>

c001e254 <value_37A>:
c001e254:	7a 03                	jp     c001e259 <x87Detect+0x3>

c001e256 <x87Detect>:
c001e256:	b8 01 00 00 00       	mov    eax,0x1
c001e25b:	0f a2                	cpuid  
c001e25d:	f7 c2 01 00 00 00    	test   edx,0x1
c001e263:	74 06                	je     c001e26b <x87Detect.nox87>
c001e265:	b8 01 00 00 00       	mov    eax,0x1
c001e26a:	c3                   	ret    

c001e26b <x87Detect.nox87>:
c001e26b:	b8 00 00 00 00       	mov    eax,0x0
c001e270:	c3                   	ret    

c001e271 <x87Save>:
c001e271:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e275:	dd 30                	fnsave [eax]
c001e277:	c3                   	ret    

c001e278 <x87Load>:
c001e278:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e27c:	dd 20                	frstor [eax]
c001e27e:	c3                   	ret    

c001e27f <x87Init>:
c001e27f:	0f 20 c0             	mov    eax,cr0
c001e282:	66 25 fb ff          	and    ax,0xfffb
c001e286:	66 0d 22 00          	or     ax,0x22
c001e28a:	0f 22 c0             	mov    cr0,eax
c001e28d:	db e3                	fninit 
c001e28f:	0f 06                	clts   
c001e291:	d9 2d 54 e2 01 c0    	fldcw  WORD PTR ds:0xc001e254
c001e297:	c3                   	ret    

c001e298 <x87Close>:
c001e298:	c3                   	ret    
c001e299:	66 90                	xchg   ax,ax
c001e29b:	90                   	nop

c001e29c <__do_global_ctors_aux>:
c001e29c:	a1 50 f2 01 c0       	mov    eax,ds:0xc001f250
c001e2a1:	83 f8 ff             	cmp    eax,0xffffffff
c001e2a4:	74 1a                	je     c001e2c0 <__do_global_ctors_aux+0x24>
c001e2a6:	55                   	push   ebp
c001e2a7:	89 e5                	mov    ebp,esp
c001e2a9:	53                   	push   ebx
c001e2aa:	52                   	push   edx
c001e2ab:	bb 50 f2 01 c0       	mov    ebx,0xc001f250
c001e2b0:	ff d0                	call   eax
c001e2b2:	83 eb 04             	sub    ebx,0x4
c001e2b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e2b7:	83 f8 ff             	cmp    eax,0xffffffff
c001e2ba:	75 f4                	jne    c001e2b0 <__do_global_ctors_aux+0x14>
c001e2bc:	58                   	pop    eax
c001e2bd:	5b                   	pop    ebx
c001e2be:	5d                   	pop    ebp
c001e2bf:	c3                   	ret    
c001e2c0:	c3                   	ret    
c001e2c1:	66 90                	xchg   ax,ax
c001e2c3:	90                   	nop

c001e2c4 <__divdi3>:
c001e2c4:	55                   	push   ebp
c001e2c5:	57                   	push   edi
c001e2c6:	56                   	push   esi
c001e2c7:	53                   	push   ebx
c001e2c8:	83 ec 1c             	sub    esp,0x1c
c001e2cb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e2cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e2d3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e2d6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e2da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e2de:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e2e2:	85 db                	test   ebx,ebx
c001e2e4:	0f 88 8e 00 00 00    	js     c001e378 <__divdi3+0xb4>
c001e2ea:	89 dd                	mov    ebp,ebx
c001e2ec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e2f4:	89 d3                	mov    ebx,edx
c001e2f6:	85 d2                	test   edx,edx
c001e2f8:	79 0d                	jns    c001e307 <__divdi3+0x43>
c001e2fa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e2fe:	f7 d8                	neg    eax
c001e300:	83 d2 00             	adc    edx,0x0
c001e303:	f7 da                	neg    edx
c001e305:	89 d3                	mov    ebx,edx
c001e307:	89 c7                	mov    edi,eax
c001e309:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e30c:	85 db                	test   ebx,ebx
c001e30e:	75 48                	jne    c001e358 <__divdi3+0x94>
c001e310:	39 ef                	cmp    edi,ebp
c001e312:	76 24                	jbe    c001e338 <__divdi3+0x74>
c001e314:	89 ea                	mov    edx,ebp
c001e316:	f7 f7                	div    edi
c001e318:	89 c1                	mov    ecx,eax
c001e31a:	31 f6                	xor    esi,esi
c001e31c:	89 c8                	mov    eax,ecx
c001e31e:	89 f2                	mov    edx,esi
c001e320:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e324:	85 c9                	test   ecx,ecx
c001e326:	74 07                	je     c001e32f <__divdi3+0x6b>
c001e328:	f7 d8                	neg    eax
c001e32a:	83 d2 00             	adc    edx,0x0
c001e32d:	f7 da                	neg    edx
c001e32f:	83 c4 1c             	add    esp,0x1c
c001e332:	5b                   	pop    ebx
c001e333:	5e                   	pop    esi
c001e334:	5f                   	pop    edi
c001e335:	5d                   	pop    ebp
c001e336:	c3                   	ret    
c001e337:	90                   	nop
c001e338:	85 ff                	test   edi,edi
c001e33a:	75 0b                	jne    c001e347 <__divdi3+0x83>
c001e33c:	b8 01 00 00 00       	mov    eax,0x1
c001e341:	31 d2                	xor    edx,edx
c001e343:	f7 f3                	div    ebx
c001e345:	89 c7                	mov    edi,eax
c001e347:	31 d2                	xor    edx,edx
c001e349:	89 e8                	mov    eax,ebp
c001e34b:	f7 f7                	div    edi
c001e34d:	89 c6                	mov    esi,eax
c001e34f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e352:	f7 f7                	div    edi
c001e354:	89 c1                	mov    ecx,eax
c001e356:	eb c4                	jmp    c001e31c <__divdi3+0x58>
c001e358:	39 eb                	cmp    ebx,ebp
c001e35a:	77 3c                	ja     c001e398 <__divdi3+0xd4>
c001e35c:	0f bd f3             	bsr    esi,ebx
c001e35f:	83 f6 1f             	xor    esi,0x1f
c001e362:	75 40                	jne    c001e3a4 <__divdi3+0xe0>
c001e364:	39 eb                	cmp    ebx,ebp
c001e366:	72 09                	jb     c001e371 <__divdi3+0xad>
c001e368:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e36b:	0f 87 97 00 00 00    	ja     c001e408 <__divdi3+0x144>
c001e371:	b9 01 00 00 00       	mov    ecx,0x1
c001e376:	eb a4                	jmp    c001e31c <__divdi3+0x58>
c001e378:	f7 d9                	neg    ecx
c001e37a:	83 d3 00             	adc    ebx,0x0
c001e37d:	f7 db                	neg    ebx
c001e37f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e382:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e386:	89 dd                	mov    ebp,ebx
c001e388:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e390:	e9 5f ff ff ff       	jmp    c001e2f4 <__divdi3+0x30>
c001e395:	8d 76 00             	lea    esi,[esi+0x0]
c001e398:	31 f6                	xor    esi,esi
c001e39a:	31 c9                	xor    ecx,ecx
c001e39c:	e9 7b ff ff ff       	jmp    c001e31c <__divdi3+0x58>
c001e3a1:	8d 76 00             	lea    esi,[esi+0x0]
c001e3a4:	b8 20 00 00 00       	mov    eax,0x20
c001e3a9:	29 f0                	sub    eax,esi
c001e3ab:	89 f1                	mov    ecx,esi
c001e3ad:	d3 e3                	shl    ebx,cl
c001e3af:	89 fa                	mov    edx,edi
c001e3b1:	88 c1                	mov    cl,al
c001e3b3:	d3 ea                	shr    edx,cl
c001e3b5:	09 da                	or     edx,ebx
c001e3b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e3bb:	89 f1                	mov    ecx,esi
c001e3bd:	d3 e7                	shl    edi,cl
c001e3bf:	89 eb                	mov    ebx,ebp
c001e3c1:	88 c1                	mov    cl,al
c001e3c3:	d3 eb                	shr    ebx,cl
c001e3c5:	89 f1                	mov    ecx,esi
c001e3c7:	d3 e5                	shl    ebp,cl
c001e3c9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e3cc:	88 c1                	mov    cl,al
c001e3ce:	d3 ea                	shr    edx,cl
c001e3d0:	09 d5                	or     ebp,edx
c001e3d2:	89 e8                	mov    eax,ebp
c001e3d4:	89 da                	mov    edx,ebx
c001e3d6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e3da:	89 d3                	mov    ebx,edx
c001e3dc:	89 c5                	mov    ebp,eax
c001e3de:	f7 e7                	mul    edi
c001e3e0:	39 d3                	cmp    ebx,edx
c001e3e2:	72 18                	jb     c001e3fc <__divdi3+0x138>
c001e3e4:	74 0a                	je     c001e3f0 <__divdi3+0x12c>
c001e3e6:	89 e9                	mov    ecx,ebp
c001e3e8:	31 f6                	xor    esi,esi
c001e3ea:	e9 2d ff ff ff       	jmp    c001e31c <__divdi3+0x58>
c001e3ef:	90                   	nop
c001e3f0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e3f3:	89 f1                	mov    ecx,esi
c001e3f5:	d3 e7                	shl    edi,cl
c001e3f7:	39 c7                	cmp    edi,eax
c001e3f9:	73 eb                	jae    c001e3e6 <__divdi3+0x122>
c001e3fb:	90                   	nop
c001e3fc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e3ff:	31 f6                	xor    esi,esi
c001e401:	e9 16 ff ff ff       	jmp    c001e31c <__divdi3+0x58>
c001e406:	66 90                	xchg   ax,ax
c001e408:	31 c9                	xor    ecx,ecx
c001e40a:	e9 0d ff ff ff       	jmp    c001e31c <__divdi3+0x58>
c001e40f:	90                   	nop

c001e410 <__moddi3>:
c001e410:	55                   	push   ebp
c001e411:	57                   	push   edi
c001e412:	56                   	push   esi
c001e413:	53                   	push   ebx
c001e414:	83 ec 2c             	sub    esp,0x2c
c001e417:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e41b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e41f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e423:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e427:	85 db                	test   ebx,ebx
c001e429:	0f 88 85 00 00 00    	js     c001e4b4 <__moddi3+0xa4>
c001e42f:	89 de                	mov    esi,ebx
c001e431:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e439:	89 d7                	mov    edi,edx
c001e43b:	85 d2                	test   edx,edx
c001e43d:	79 09                	jns    c001e448 <__moddi3+0x38>
c001e43f:	f7 d8                	neg    eax
c001e441:	83 d2 00             	adc    edx,0x0
c001e444:	f7 da                	neg    edx
c001e446:	89 d7                	mov    edi,edx
c001e448:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e44c:	89 cd                	mov    ebp,ecx
c001e44e:	85 ff                	test   edi,edi
c001e450:	75 52                	jne    c001e4a4 <__moddi3+0x94>
c001e452:	89 c3                	mov    ebx,eax
c001e454:	39 f0                	cmp    eax,esi
c001e456:	76 24                	jbe    c001e47c <__moddi3+0x6c>
c001e458:	89 c8                	mov    eax,ecx
c001e45a:	89 f2                	mov    edx,esi
c001e45c:	f7 f3                	div    ebx
c001e45e:	89 d6                	mov    esi,edx
c001e460:	89 f0                	mov    eax,esi
c001e462:	31 d2                	xor    edx,edx
c001e464:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e468:	85 c9                	test   ecx,ecx
c001e46a:	74 07                	je     c001e473 <__moddi3+0x63>
c001e46c:	f7 d8                	neg    eax
c001e46e:	83 d2 00             	adc    edx,0x0
c001e471:	f7 da                	neg    edx
c001e473:	83 c4 2c             	add    esp,0x2c
c001e476:	5b                   	pop    ebx
c001e477:	5e                   	pop    esi
c001e478:	5f                   	pop    edi
c001e479:	5d                   	pop    ebp
c001e47a:	c3                   	ret    
c001e47b:	90                   	nop
c001e47c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e480:	85 db                	test   ebx,ebx
c001e482:	75 0d                	jne    c001e491 <__moddi3+0x81>
c001e484:	b8 01 00 00 00       	mov    eax,0x1
c001e489:	31 d2                	xor    edx,edx
c001e48b:	f7 f7                	div    edi
c001e48d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e491:	89 f0                	mov    eax,esi
c001e493:	31 d2                	xor    edx,edx
c001e495:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e499:	f7 f7                	div    edi
c001e49b:	89 e8                	mov    eax,ebp
c001e49d:	f7 f7                	div    edi
c001e49f:	89 d6                	mov    esi,edx
c001e4a1:	eb bd                	jmp    c001e460 <__moddi3+0x50>
c001e4a3:	90                   	nop
c001e4a4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e4a8:	39 f7                	cmp    edi,esi
c001e4aa:	76 20                	jbe    c001e4cc <__moddi3+0xbc>
c001e4ac:	89 c8                	mov    eax,ecx
c001e4ae:	89 f2                	mov    edx,esi
c001e4b0:	eb b2                	jmp    c001e464 <__moddi3+0x54>
c001e4b2:	66 90                	xchg   ax,ax
c001e4b4:	f7 d9                	neg    ecx
c001e4b6:	83 d3 00             	adc    ebx,0x0
c001e4b9:	f7 db                	neg    ebx
c001e4bb:	89 de                	mov    esi,ebx
c001e4bd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e4c5:	e9 6f ff ff ff       	jmp    c001e439 <__moddi3+0x29>
c001e4ca:	66 90                	xchg   ax,ax
c001e4cc:	0f bd c7             	bsr    eax,edi
c001e4cf:	83 f0 1f             	xor    eax,0x1f
c001e4d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e4d6:	75 24                	jne    c001e4fc <__moddi3+0xec>
c001e4d8:	39 f7                	cmp    edi,esi
c001e4da:	72 06                	jb     c001e4e2 <__moddi3+0xd2>
c001e4dc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e4e0:	77 0c                	ja     c001e4ee <__moddi3+0xde>
c001e4e2:	89 e9                	mov    ecx,ebp
c001e4e4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e4e8:	19 fe                	sbb    esi,edi
c001e4ea:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e4ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e4f2:	89 f2                	mov    edx,esi
c001e4f4:	e9 6b ff ff ff       	jmp    c001e464 <__moddi3+0x54>
c001e4f9:	8d 76 00             	lea    esi,[esi+0x0]
c001e4fc:	b8 20 00 00 00       	mov    eax,0x20
c001e501:	89 c2                	mov    edx,eax
c001e503:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e507:	29 da                	sub    edx,ebx
c001e509:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e50d:	88 d9                	mov    cl,bl
c001e50f:	d3 e7                	shl    edi,cl
c001e511:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e515:	88 d1                	mov    cl,dl
c001e517:	d3 e8                	shr    eax,cl
c001e519:	09 c7                	or     edi,eax
c001e51b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e51f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e523:	89 d8                	mov    eax,ebx
c001e525:	88 d9                	mov    cl,bl
c001e527:	d3 e7                	shl    edi,cl
c001e529:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e52d:	89 f3                	mov    ebx,esi
c001e52f:	88 d1                	mov    cl,dl
c001e531:	d3 eb                	shr    ebx,cl
c001e533:	89 c7                	mov    edi,eax
c001e535:	88 c1                	mov    cl,al
c001e537:	d3 e6                	shl    esi,cl
c001e539:	89 e8                	mov    eax,ebp
c001e53b:	88 d1                	mov    cl,dl
c001e53d:	d3 e8                	shr    eax,cl
c001e53f:	09 f0                	or     eax,esi
c001e541:	89 f9                	mov    ecx,edi
c001e543:	d3 e5                	shl    ebp,cl
c001e545:	89 da                	mov    edx,ebx
c001e547:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e54b:	89 d3                	mov    ebx,edx
c001e54d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e551:	89 c6                	mov    esi,eax
c001e553:	89 d1                	mov    ecx,edx
c001e555:	39 d3                	cmp    ebx,edx
c001e557:	72 27                	jb     c001e580 <__moddi3+0x170>
c001e559:	74 21                	je     c001e57c <__moddi3+0x16c>
c001e55b:	29 f5                	sub    ebp,esi
c001e55d:	19 cb                	sbb    ebx,ecx
c001e55f:	89 de                	mov    esi,ebx
c001e561:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e565:	d3 e6                	shl    esi,cl
c001e567:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e56b:	89 f9                	mov    ecx,edi
c001e56d:	d3 ed                	shr    ebp,cl
c001e56f:	09 ee                	or     esi,ebp
c001e571:	89 f0                	mov    eax,esi
c001e573:	d3 eb                	shr    ebx,cl
c001e575:	89 da                	mov    edx,ebx
c001e577:	e9 e8 fe ff ff       	jmp    c001e464 <__moddi3+0x54>
c001e57c:	39 c5                	cmp    ebp,eax
c001e57e:	73 db                	jae    c001e55b <__moddi3+0x14b>
c001e580:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e584:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e588:	89 d1                	mov    ecx,edx
c001e58a:	89 c6                	mov    esi,eax
c001e58c:	eb cd                	jmp    c001e55b <__moddi3+0x14b>
c001e58e:	66 90                	xchg   ax,ax

c001e590 <__udivdi3>:
c001e590:	55                   	push   ebp
c001e591:	57                   	push   edi
c001e592:	56                   	push   esi
c001e593:	53                   	push   ebx
c001e594:	83 ec 1c             	sub    esp,0x1c
c001e597:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e59b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e59f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e5a3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e5a7:	85 d2                	test   edx,edx
c001e5a9:	75 41                	jne    c001e5ec <__udivdi3+0x5c>
c001e5ab:	39 f7                	cmp    edi,esi
c001e5ad:	76 15                	jbe    c001e5c4 <__udivdi3+0x34>
c001e5af:	89 e8                	mov    eax,ebp
c001e5b1:	89 f2                	mov    edx,esi
c001e5b3:	f7 f7                	div    edi
c001e5b5:	31 db                	xor    ebx,ebx
c001e5b7:	89 da                	mov    edx,ebx
c001e5b9:	83 c4 1c             	add    esp,0x1c
c001e5bc:	5b                   	pop    ebx
c001e5bd:	5e                   	pop    esi
c001e5be:	5f                   	pop    edi
c001e5bf:	5d                   	pop    ebp
c001e5c0:	c3                   	ret    
c001e5c1:	8d 76 00             	lea    esi,[esi+0x0]
c001e5c4:	89 f9                	mov    ecx,edi
c001e5c6:	85 ff                	test   edi,edi
c001e5c8:	75 0b                	jne    c001e5d5 <__udivdi3+0x45>
c001e5ca:	b8 01 00 00 00       	mov    eax,0x1
c001e5cf:	31 d2                	xor    edx,edx
c001e5d1:	f7 f7                	div    edi
c001e5d3:	89 c1                	mov    ecx,eax
c001e5d5:	31 d2                	xor    edx,edx
c001e5d7:	89 f0                	mov    eax,esi
c001e5d9:	f7 f1                	div    ecx
c001e5db:	89 c3                	mov    ebx,eax
c001e5dd:	89 e8                	mov    eax,ebp
c001e5df:	f7 f1                	div    ecx
c001e5e1:	89 da                	mov    edx,ebx
c001e5e3:	83 c4 1c             	add    esp,0x1c
c001e5e6:	5b                   	pop    ebx
c001e5e7:	5e                   	pop    esi
c001e5e8:	5f                   	pop    edi
c001e5e9:	5d                   	pop    ebp
c001e5ea:	c3                   	ret    
c001e5eb:	90                   	nop
c001e5ec:	39 f2                	cmp    edx,esi
c001e5ee:	77 1c                	ja     c001e60c <__udivdi3+0x7c>
c001e5f0:	0f bd da             	bsr    ebx,edx
c001e5f3:	83 f3 1f             	xor    ebx,0x1f
c001e5f6:	75 24                	jne    c001e61c <__udivdi3+0x8c>
c001e5f8:	39 f2                	cmp    edx,esi
c001e5fa:	72 08                	jb     c001e604 <__udivdi3+0x74>
c001e5fc:	39 ef                	cmp    edi,ebp
c001e5fe:	0f 87 84 00 00 00    	ja     c001e688 <__udivdi3+0xf8>
c001e604:	b8 01 00 00 00       	mov    eax,0x1
c001e609:	eb ac                	jmp    c001e5b7 <__udivdi3+0x27>
c001e60b:	90                   	nop
c001e60c:	31 db                	xor    ebx,ebx
c001e60e:	31 c0                	xor    eax,eax
c001e610:	89 da                	mov    edx,ebx
c001e612:	83 c4 1c             	add    esp,0x1c
c001e615:	5b                   	pop    ebx
c001e616:	5e                   	pop    esi
c001e617:	5f                   	pop    edi
c001e618:	5d                   	pop    ebp
c001e619:	c3                   	ret    
c001e61a:	66 90                	xchg   ax,ax
c001e61c:	b8 20 00 00 00       	mov    eax,0x20
c001e621:	29 d8                	sub    eax,ebx
c001e623:	88 d9                	mov    cl,bl
c001e625:	d3 e2                	shl    edx,cl
c001e627:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e62b:	89 fa                	mov    edx,edi
c001e62d:	88 c1                	mov    cl,al
c001e62f:	d3 ea                	shr    edx,cl
c001e631:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e635:	09 d1                	or     ecx,edx
c001e637:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e63b:	88 d9                	mov    cl,bl
c001e63d:	d3 e7                	shl    edi,cl
c001e63f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e643:	89 f7                	mov    edi,esi
c001e645:	88 c1                	mov    cl,al
c001e647:	d3 ef                	shr    edi,cl
c001e649:	88 d9                	mov    cl,bl
c001e64b:	d3 e6                	shl    esi,cl
c001e64d:	89 ea                	mov    edx,ebp
c001e64f:	88 c1                	mov    cl,al
c001e651:	d3 ea                	shr    edx,cl
c001e653:	09 d6                	or     esi,edx
c001e655:	89 f0                	mov    eax,esi
c001e657:	89 fa                	mov    edx,edi
c001e659:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e65d:	89 d7                	mov    edi,edx
c001e65f:	89 c6                	mov    esi,eax
c001e661:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e665:	39 d7                	cmp    edi,edx
c001e667:	72 13                	jb     c001e67c <__udivdi3+0xec>
c001e669:	74 09                	je     c001e674 <__udivdi3+0xe4>
c001e66b:	89 f0                	mov    eax,esi
c001e66d:	31 db                	xor    ebx,ebx
c001e66f:	e9 43 ff ff ff       	jmp    c001e5b7 <__udivdi3+0x27>
c001e674:	88 d9                	mov    cl,bl
c001e676:	d3 e5                	shl    ebp,cl
c001e678:	39 c5                	cmp    ebp,eax
c001e67a:	73 ef                	jae    c001e66b <__udivdi3+0xdb>
c001e67c:	8d 46 ff             	lea    eax,[esi-0x1]
c001e67f:	31 db                	xor    ebx,ebx
c001e681:	e9 31 ff ff ff       	jmp    c001e5b7 <__udivdi3+0x27>
c001e686:	66 90                	xchg   ax,ax
c001e688:	31 c0                	xor    eax,eax
c001e68a:	e9 28 ff ff ff       	jmp    c001e5b7 <__udivdi3+0x27>
c001e68f:	90                   	nop

c001e690 <__umoddi3>:
c001e690:	55                   	push   ebp
c001e691:	57                   	push   edi
c001e692:	56                   	push   esi
c001e693:	53                   	push   ebx
c001e694:	83 ec 1c             	sub    esp,0x1c
c001e697:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e69b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e69f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e6a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e6a7:	89 da                	mov    edx,ebx
c001e6a9:	85 c0                	test   eax,eax
c001e6ab:	75 37                	jne    c001e6e4 <__umoddi3+0x54>
c001e6ad:	39 df                	cmp    edi,ebx
c001e6af:	76 13                	jbe    c001e6c4 <__umoddi3+0x34>
c001e6b1:	89 f0                	mov    eax,esi
c001e6b3:	f7 f7                	div    edi
c001e6b5:	89 d0                	mov    eax,edx
c001e6b7:	31 d2                	xor    edx,edx
c001e6b9:	83 c4 1c             	add    esp,0x1c
c001e6bc:	5b                   	pop    ebx
c001e6bd:	5e                   	pop    esi
c001e6be:	5f                   	pop    edi
c001e6bf:	5d                   	pop    ebp
c001e6c0:	c3                   	ret    
c001e6c1:	8d 76 00             	lea    esi,[esi+0x0]
c001e6c4:	89 fd                	mov    ebp,edi
c001e6c6:	85 ff                	test   edi,edi
c001e6c8:	75 0b                	jne    c001e6d5 <__umoddi3+0x45>
c001e6ca:	b8 01 00 00 00       	mov    eax,0x1
c001e6cf:	31 d2                	xor    edx,edx
c001e6d1:	f7 f7                	div    edi
c001e6d3:	89 c5                	mov    ebp,eax
c001e6d5:	89 d8                	mov    eax,ebx
c001e6d7:	31 d2                	xor    edx,edx
c001e6d9:	f7 f5                	div    ebp
c001e6db:	89 f0                	mov    eax,esi
c001e6dd:	f7 f5                	div    ebp
c001e6df:	89 d0                	mov    eax,edx
c001e6e1:	eb d4                	jmp    c001e6b7 <__umoddi3+0x27>
c001e6e3:	90                   	nop
c001e6e4:	89 f1                	mov    ecx,esi
c001e6e6:	39 d8                	cmp    eax,ebx
c001e6e8:	76 0a                	jbe    c001e6f4 <__umoddi3+0x64>
c001e6ea:	89 f0                	mov    eax,esi
c001e6ec:	83 c4 1c             	add    esp,0x1c
c001e6ef:	5b                   	pop    ebx
c001e6f0:	5e                   	pop    esi
c001e6f1:	5f                   	pop    edi
c001e6f2:	5d                   	pop    ebp
c001e6f3:	c3                   	ret    
c001e6f4:	0f bd e8             	bsr    ebp,eax
c001e6f7:	83 f5 1f             	xor    ebp,0x1f
c001e6fa:	75 1c                	jne    c001e718 <__umoddi3+0x88>
c001e6fc:	39 d8                	cmp    eax,ebx
c001e6fe:	72 04                	jb     c001e704 <__umoddi3+0x74>
c001e700:	39 f7                	cmp    edi,esi
c001e702:	77 08                	ja     c001e70c <__umoddi3+0x7c>
c001e704:	89 da                	mov    edx,ebx
c001e706:	29 fe                	sub    esi,edi
c001e708:	19 c2                	sbb    edx,eax
c001e70a:	89 f1                	mov    ecx,esi
c001e70c:	89 c8                	mov    eax,ecx
c001e70e:	83 c4 1c             	add    esp,0x1c
c001e711:	5b                   	pop    ebx
c001e712:	5e                   	pop    esi
c001e713:	5f                   	pop    edi
c001e714:	5d                   	pop    ebp
c001e715:	c3                   	ret    
c001e716:	66 90                	xchg   ax,ax
c001e718:	ba 20 00 00 00       	mov    edx,0x20
c001e71d:	29 ea                	sub    edx,ebp
c001e71f:	89 e9                	mov    ecx,ebp
c001e721:	d3 e0                	shl    eax,cl
c001e723:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e727:	89 f8                	mov    eax,edi
c001e729:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e72d:	88 d1                	mov    cl,dl
c001e72f:	d3 e8                	shr    eax,cl
c001e731:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e735:	09 c1                	or     ecx,eax
c001e737:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e73b:	89 e9                	mov    ecx,ebp
c001e73d:	d3 e7                	shl    edi,cl
c001e73f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e743:	89 d8                	mov    eax,ebx
c001e745:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e749:	88 d1                	mov    cl,dl
c001e74b:	d3 e8                	shr    eax,cl
c001e74d:	89 c7                	mov    edi,eax
c001e74f:	89 e9                	mov    ecx,ebp
c001e751:	d3 e3                	shl    ebx,cl
c001e753:	89 f0                	mov    eax,esi
c001e755:	88 d1                	mov    cl,dl
c001e757:	d3 e8                	shr    eax,cl
c001e759:	09 d8                	or     eax,ebx
c001e75b:	89 e9                	mov    ecx,ebp
c001e75d:	d3 e6                	shl    esi,cl
c001e75f:	89 f3                	mov    ebx,esi
c001e761:	89 fa                	mov    edx,edi
c001e763:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e767:	89 d1                	mov    ecx,edx
c001e769:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e76d:	89 c6                	mov    esi,eax
c001e76f:	89 d7                	mov    edi,edx
c001e771:	39 d1                	cmp    ecx,edx
c001e773:	72 27                	jb     c001e79c <__umoddi3+0x10c>
c001e775:	74 21                	je     c001e798 <__umoddi3+0x108>
c001e777:	89 ca                	mov    edx,ecx
c001e779:	29 f3                	sub    ebx,esi
c001e77b:	19 fa                	sbb    edx,edi
c001e77d:	89 d0                	mov    eax,edx
c001e77f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e783:	d3 e0                	shl    eax,cl
c001e785:	89 e9                	mov    ecx,ebp
c001e787:	d3 eb                	shr    ebx,cl
c001e789:	09 d8                	or     eax,ebx
c001e78b:	d3 ea                	shr    edx,cl
c001e78d:	83 c4 1c             	add    esp,0x1c
c001e790:	5b                   	pop    ebx
c001e791:	5e                   	pop    esi
c001e792:	5f                   	pop    edi
c001e793:	5d                   	pop    ebp
c001e794:	c3                   	ret    
c001e795:	8d 76 00             	lea    esi,[esi+0x0]
c001e798:	39 c3                	cmp    ebx,eax
c001e79a:	73 db                	jae    c001e777 <__umoddi3+0xe7>
c001e79c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e7a0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e7a4:	89 d7                	mov    edi,edx
c001e7a6:	89 c6                	mov    esi,eax
c001e7a8:	eb cd                	jmp    c001e777 <__umoddi3+0xe7>

Disassembly of section .init:

c001e7aa <_init>:
c001e7aa:	55                   	push   ebp
c001e7ab:	89 e5                	mov    ebp,esp
c001e7ad:	e8 42 19 fe ff       	call   c00000f4 <frame_dummy>
c001e7b2:	e8 e5 fa ff ff       	call   c001e29c <__do_global_ctors_aux>
c001e7b7:	5d                   	pop    ebp
c001e7b8:	c3                   	ret    

Disassembly of section .fini:

c001e7b9 <_fini>:
c001e7b9:	55                   	push   ebp
c001e7ba:	89 e5                	mov    ebp,esp
c001e7bc:	e8 c3 18 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001e7c1:	5d                   	pop    ebp
c001e7c2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e7c4 <Computer::~Computer()>:
c001e7c4:	83 ec 0c             	sub    esp,0xc
c001e7c7:	ba b0 fa 01 c0       	mov    edx,0xc001fab0
c001e7cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7d0:	89 10                	mov    DWORD PTR [eax],edx
c001e7d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7d6:	83 ec 0c             	sub    esp,0xc
c001e7d9:	50                   	push   eax
c001e7da:	e8 d9 d4 fe ff       	call   c000bcb8 <Device::~Device()>
c001e7df:	83 c4 10             	add    esp,0x10
c001e7e2:	90                   	nop
c001e7e3:	83 c4 0c             	add    esp,0xc
c001e7e6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e7e8 <Computer::~Computer()>:
c001e7e8:	83 ec 0c             	sub    esp,0xc
c001e7eb:	83 ec 0c             	sub    esp,0xc
c001e7ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7f2:	e8 cd ff ff ff       	call   c001e7c4 <Computer::~Computer()>
c001e7f7:	83 c4 10             	add    esp,0x10
c001e7fa:	83 ec 08             	sub    esp,0x8
c001e7fd:	68 70 01 00 00       	push   0x170
c001e802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e806:	e8 4a c0 fe ff       	call   c000a855 <operator delete(void*, unsigned long)>
c001e80b:	83 c4 10             	add    esp,0x10
c001e80e:	83 c4 0c             	add    esp,0xc
c001e811:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e812 <idleCommon()>:
c001e812:	83 ec 0c             	sub    esp,0xc
c001e815:	fa                   	cli    
c001e816:	ff 05 68 81 02 c0    	inc    DWORD PTR ds:0xc0028168
c001e81c:	e8 ef 67 ff ff       	call   c0015010 <schedule()>
c001e821:	a1 68 81 02 c0       	mov    eax,ds:0xc0028168
c001e826:	48                   	dec    eax
c001e827:	a3 68 81 02 c0       	mov    ds:0xc0028168,eax
c001e82c:	75 01                	jne    c001e82f <idleCommon()+0x1d>
c001e82e:	fb                   	sti    
c001e82f:	83 c4 0c             	add    esp,0xc
c001e832:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e834 <LinkedList<UnixFile>::~LinkedList()>:
c001e834:	90                   	nop
c001e835:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e836 <LinkedList<UnixFile>::LinkedList()>:
c001e836:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e83a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e844:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e84b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e84f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e856:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e85a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e864:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e86b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e86f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e876:	90                   	nop
c001e877:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e878 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e878:	83 ec 0c             	sub    esp,0xc
c001e87b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e880:	75 10                	jne    c001e892 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001e882:	83 ec 0c             	sub    esp,0xc
c001e885:	68 c4 fc 01 c0       	push   0xc001fcc4
c001e88a:	e8 d0 1f ff ff       	call   c001085f <KePanic(char const*)>
c001e88f:	83 c4 10             	add    esp,0x10
c001e892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e896:	8b 00                	mov    eax,DWORD PTR [eax]
c001e898:	85 c0                	test   eax,eax
c001e89a:	74 34                	je     c001e8d0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8a3:	85 c0                	test   eax,eax
c001e8a5:	74 29                	je     c001e8d0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001e8a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e8b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8bd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e8c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e8ce:	eb 65                	jmp    c001e935 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e8d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8d6:	85 c0                	test   eax,eax
c001e8d8:	75 4b                	jne    c001e925 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e8da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e8e1:	85 c0                	test   eax,eax
c001e8e3:	75 40                	jne    c001e925 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001e8e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8ed:	89 10                	mov    DWORD PTR [eax],edx
c001e8ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8f7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e8fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e901:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e90c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e90f:	85 c0                	test   eax,eax
c001e911:	74 22                	je     c001e935 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e913:	83 ec 0c             	sub    esp,0xc
c001e916:	68 e6 fc 01 c0       	push   0xc001fce6
c001e91b:	e8 3f 1f ff ff       	call   c001085f <KePanic(char const*)>
c001e920:	83 c4 10             	add    esp,0x10
c001e923:	eb 10                	jmp    c001e935 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001e925:	83 ec 0c             	sub    esp,0xc
c001e928:	68 f0 fc 01 c0       	push   0xc001fcf0
c001e92d:	e8 2d 1f ff ff       	call   c001085f <KePanic(char const*)>
c001e932:	83 c4 10             	add    esp,0x10
c001e935:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e939:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e93c:	8d 50 01             	lea    edx,[eax+0x1]
c001e93f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e943:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e946:	90                   	nop
c001e947:	83 c4 0c             	add    esp,0xc
c001e94a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e94c <LinkedList<UnixFile>::getFirstElement()>:
c001e94c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e950:	8b 00                	mov    eax,DWORD PTR [eax]
c001e952:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e954 <LinkedList<UnixFile>::removeFirst()>:
c001e954:	83 ec 0c             	sub    esp,0xc
c001e957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e95b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e95d:	85 c0                	test   eax,eax
c001e95f:	75 12                	jne    c001e973 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e961:	83 ec 0c             	sub    esp,0xc
c001e964:	68 fc fc 01 c0       	push   0xc001fcfc
c001e969:	e8 f1 1e ff ff       	call   c001085f <KePanic(char const*)>
c001e96e:	83 c4 10             	add    esp,0x10
c001e971:	eb 7e                	jmp    c001e9f1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001e973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e977:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e97a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e97d:	85 c0                	test   eax,eax
c001e97f:	74 10                	je     c001e991 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001e981:	83 ec 0c             	sub    esp,0xc
c001e984:	68 47 fd 01 c0       	push   0xc001fd47
c001e989:	e8 d1 1e ff ff       	call   c001085f <KePanic(char const*)>
c001e98e:	83 c4 10             	add    esp,0x10
c001e991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e995:	8b 00                	mov    eax,DWORD PTR [eax]
c001e997:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e99a:	85 c0                	test   eax,eax
c001e99c:	75 33                	jne    c001e9d1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001e99e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9ba:	83 f8 01             	cmp    eax,0x1
c001e9bd:	74 21                	je     c001e9e0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e9bf:	83 ec 0c             	sub    esp,0xc
c001e9c2:	68 20 fd 01 c0       	push   0xc001fd20
c001e9c7:	e8 93 1e ff ff       	call   c001085f <KePanic(char const*)>
c001e9cc:	83 c4 10             	add    esp,0x10
c001e9cf:	eb 0f                	jmp    c001e9e0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e9d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9d7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e9da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9de:	89 10                	mov    DWORD PTR [eax],edx
c001e9e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9e7:	8d 50 ff             	lea    edx,[eax-0x1]
c001e9ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e9f1:	83 c4 0c             	add    esp,0xc
c001e9f4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001e9f6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001e9f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e9fa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9fd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001e9fe <DriverlessDevice::~DriverlessDevice()>:
c001e9fe:	ba 9c 03 02 c0       	mov    edx,0xc002039c
c001ea03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea07:	89 10                	mov    DWORD PTR [eax],edx
c001ea09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea0d:	50                   	push   eax
c001ea0e:	e8 a5 d2 fe ff       	call   c000bcb8 <Device::~Device()>
c001ea13:	83 c4 04             	add    esp,0x4
c001ea16:	90                   	nop
c001ea17:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001ea18 <DriverlessDevice::~DriverlessDevice()>:
c001ea18:	83 ec 0c             	sub    esp,0xc
c001ea1b:	83 ec 0c             	sub    esp,0xc
c001ea1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea22:	e8 d7 ff ff ff       	call   c001e9fe <DriverlessDevice::~DriverlessDevice()>
c001ea27:	83 c4 10             	add    esp,0x10
c001ea2a:	83 ec 08             	sub    esp,0x8
c001ea2d:	68 58 01 00 00       	push   0x158
c001ea32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea36:	e8 1a be fe ff       	call   c000a855 <operator delete(void*, unsigned long)>
c001ea3b:	83 c4 10             	add    esp,0x10
c001ea3e:	83 c4 0c             	add    esp,0xc
c001ea41:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ea42 <LinkedList<Device>::addElement(Device*)>:
c001ea42:	83 ec 0c             	sub    esp,0xc
c001ea45:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ea4a:	75 10                	jne    c001ea5c <LinkedList<Device>::addElement(Device*)+0x1a>
c001ea4c:	83 ec 0c             	sub    esp,0xc
c001ea4f:	68 c4 fc 01 c0       	push   0xc001fcc4
c001ea54:	e8 06 1e ff ff       	call   c001085f <KePanic(char const*)>
c001ea59:	83 c4 10             	add    esp,0x10
c001ea5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea60:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea62:	85 c0                	test   eax,eax
c001ea64:	74 3a                	je     c001eaa0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ea66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea6d:	85 c0                	test   eax,eax
c001ea6f:	74 2f                	je     c001eaa0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001ea71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea7c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ea82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ea8a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ea8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ea94:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ea9e:	eb 68                	jmp    c001eb08 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eaa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa4:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaa6:	85 c0                	test   eax,eax
c001eaa8:	75 4e                	jne    c001eaf8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eaaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eab1:	85 c0                	test   eax,eax
c001eab3:	75 43                	jne    c001eaf8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001eab5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eabd:	89 10                	mov    DWORD PTR [eax],edx
c001eabf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eac7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eaca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eace:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ead1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001eadb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eadf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eae2:	85 c0                	test   eax,eax
c001eae4:	74 22                	je     c001eb08 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eae6:	83 ec 0c             	sub    esp,0xc
c001eae9:	68 e6 fc 01 c0       	push   0xc001fce6
c001eaee:	e8 6c 1d ff ff       	call   c001085f <KePanic(char const*)>
c001eaf3:	83 c4 10             	add    esp,0x10
c001eaf6:	eb 10                	jmp    c001eb08 <LinkedList<Device>::addElement(Device*)+0xc6>
c001eaf8:	83 ec 0c             	sub    esp,0xc
c001eafb:	68 f0 fc 01 c0       	push   0xc001fcf0
c001eb00:	e8 5a 1d ff ff       	call   c001085f <KePanic(char const*)>
c001eb05:	83 c4 10             	add    esp,0x10
c001eb08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb0c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb0f:	8d 50 01             	lea    edx,[eax+0x1]
c001eb12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb16:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eb19:	90                   	nop
c001eb1a:	83 c4 0c             	add    esp,0xc
c001eb1d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001eb1e <LinkedList<Device>::LinkedList()>:
c001eb1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb22:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eb28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb2c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eb33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb37:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb42:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eb48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eb53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb57:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb5e:	90                   	nop
c001eb5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001eb60 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001eb60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb64:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb66:	85 c0                	test   eax,eax
c001eb68:	75 0e                	jne    c001eb78 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001eb6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb71:	85 c0                	test   eax,eax
c001eb73:	75 03                	jne    c001eb78 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001eb75:	b0 01                	mov    al,0x1
c001eb77:	c3                   	ret    
c001eb78:	b0 00                	mov    al,0x0
c001eb7a:	90                   	nop
c001eb7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001eb7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001eb7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb80:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001eb84 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001eb84:	83 ec 0c             	sub    esp,0xc
c001eb87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb8d:	85 c0                	test   eax,eax
c001eb8f:	75 17                	jne    c001eba8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001eb91:	83 ec 0c             	sub    esp,0xc
c001eb94:	68 fc fc 01 c0       	push   0xc001fcfc
c001eb99:	e8 c1 1c ff ff       	call   c001085f <KePanic(char const*)>
c001eb9e:	83 c4 10             	add    esp,0x10
c001eba1:	e9 96 00 00 00       	jmp    c001ec3c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001eba6:	66 90                	xchg   ax,ax
c001eba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebaf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ebb2:	85 c0                	test   eax,eax
c001ebb4:	0f 95 c0             	setne  al
c001ebb7:	0f b6 c0             	movzx  eax,al
c001ebba:	85 c0                	test   eax,eax
c001ebbc:	74 12                	je     c001ebd0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001ebbe:	83 ec 0c             	sub    esp,0xc
c001ebc1:	68 47 fd 01 c0       	push   0xc001fd47
c001ebc6:	e8 94 1c ff ff       	call   c001085f <KePanic(char const*)>
c001ebcb:	83 c4 10             	add    esp,0x10
c001ebce:	66 90                	xchg   ax,ax
c001ebd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebd4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebd6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ebd9:	85 c0                	test   eax,eax
c001ebdb:	0f 94 c0             	sete   al
c001ebde:	0f b6 c0             	movzx  eax,al
c001ebe1:	85 c0                	test   eax,eax
c001ebe3:	74 33                	je     c001ec18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001ebe5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebe9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ebef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebf3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ebfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebfe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec01:	83 f8 01             	cmp    eax,0x1
c001ec04:	74 22                	je     c001ec28 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ec06:	83 ec 0c             	sub    esp,0xc
c001ec09:	68 20 fd 01 c0       	push   0xc001fd20
c001ec0e:	e8 4c 1c ff ff       	call   c001085f <KePanic(char const*)>
c001ec13:	83 c4 10             	add    esp,0x10
c001ec16:	eb 10                	jmp    c001ec28 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001ec18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec1c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec1e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ec21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec25:	89 10                	mov    DWORD PTR [eax],edx
c001ec27:	90                   	nop
c001ec28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec2c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec2f:	8d 50 ff             	lea    edx,[eax-0x1]
c001ec32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec36:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ec39:	8d 76 00             	lea    esi,[esi+0x0]
c001ec3c:	83 c4 0c             	add    esp,0xc
c001ec3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ec40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ec40:	83 ec 0c             	sub    esp,0xc
c001ec43:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ec48:	75 12                	jne    c001ec5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ec4a:	83 ec 0c             	sub    esp,0xc
c001ec4d:	68 c4 fc 01 c0       	push   0xc001fcc4
c001ec52:	e8 08 1c ff ff       	call   c001085f <KePanic(char const*)>
c001ec57:	83 c4 10             	add    esp,0x10
c001ec5a:	66 90                	xchg   ax,ax
c001ec5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec60:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec62:	85 c0                	test   eax,eax
c001ec64:	74 36                	je     c001ec9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ec66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec6d:	85 c0                	test   eax,eax
c001ec6f:	74 2b                	je     c001ec9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ec71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec7c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ec7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ec87:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ec8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ec91:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ec98:	eb 6a                	jmp    c001ed04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ec9a:	66 90                	xchg   ax,ax
c001ec9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eca0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eca2:	85 c0                	test   eax,eax
c001eca4:	75 4e                	jne    c001ecf4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001eca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ecad:	85 c0                	test   eax,eax
c001ecaf:	75 43                	jne    c001ecf4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ecb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecb9:	89 10                	mov    DWORD PTR [eax],edx
c001ecbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecbf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ecc3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ecc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eccd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ecd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecd8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ecdb:	85 c0                	test   eax,eax
c001ecdd:	74 25                	je     c001ed04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ecdf:	83 ec 0c             	sub    esp,0xc
c001ece2:	68 e6 fc 01 c0       	push   0xc001fce6
c001ece7:	e8 73 1b ff ff       	call   c001085f <KePanic(char const*)>
c001ecec:	83 c4 10             	add    esp,0x10
c001ecef:	eb 13                	jmp    c001ed04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ecf1:	8d 76 00             	lea    esi,[esi+0x0]
c001ecf4:	83 ec 0c             	sub    esp,0xc
c001ecf7:	68 f0 fc 01 c0       	push   0xc001fcf0
c001ecfc:	e8 5e 1b ff ff       	call   c001085f <KePanic(char const*)>
c001ed01:	83 c4 10             	add    esp,0x10
c001ed04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed08:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed0b:	8d 50 01             	lea    edx,[eax+0x1]
c001ed0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed12:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed15:	90                   	nop
c001ed16:	83 c4 0c             	add    esp,0xc
c001ed19:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ed1c <ACPI::~ACPI()>:
c001ed1c:	83 ec 0c             	sub    esp,0xc
c001ed1f:	ba 68 09 02 c0       	mov    edx,0xc0020968
c001ed24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed28:	89 10                	mov    DWORD PTR [eax],edx
c001ed2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed2e:	83 ec 0c             	sub    esp,0xc
c001ed31:	50                   	push   eax
c001ed32:	e8 81 cf fe ff       	call   c000bcb8 <Device::~Device()>
c001ed37:	83 c4 10             	add    esp,0x10
c001ed3a:	90                   	nop
c001ed3b:	83 c4 0c             	add    esp,0xc
c001ed3e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ed40 <ACPI::~ACPI()>:
c001ed40:	83 ec 0c             	sub    esp,0xc
c001ed43:	83 ec 0c             	sub    esp,0xc
c001ed46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed4a:	e8 cd ff ff ff       	call   c001ed1c <ACPI::~ACPI()>
c001ed4f:	83 c4 10             	add    esp,0x10
c001ed52:	83 ec 08             	sub    esp,0x8
c001ed55:	68 64 12 00 00       	push   0x1264
c001ed5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed5e:	e8 f2 ba fe ff       	call   c000a855 <operator delete(void*, unsigned long)>
c001ed63:	83 c4 10             	add    esp,0x10
c001ed66:	83 c4 0c             	add    esp,0xc
c001ed69:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001ed6c <LinkedList<Device>::~LinkedList()>:
c001ed6c:	90                   	nop
c001ed6d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001ed70 <LinkedList<Device>::isEmpty()>:
c001ed70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed74:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed76:	85 c0                	test   eax,eax
c001ed78:	75 0e                	jne    c001ed88 <LinkedList<Device>::isEmpty()+0x18>
c001ed7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed81:	85 c0                	test   eax,eax
c001ed83:	75 03                	jne    c001ed88 <LinkedList<Device>::isEmpty()+0x18>
c001ed85:	b0 01                	mov    al,0x1
c001ed87:	c3                   	ret    
c001ed88:	b0 00                	mov    al,0x0
c001ed8a:	90                   	nop
c001ed8b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001ed8c <LinkedList<Device>::getFirstElement()>:
c001ed8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ed90:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed92:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ed94 <LinkedList<Device>::removeFirst()>:
c001ed94:	83 ec 0c             	sub    esp,0xc
c001ed97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed9b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed9d:	85 c0                	test   eax,eax
c001ed9f:	75 17                	jne    c001edb8 <LinkedList<Device>::removeFirst()+0x24>
c001eda1:	83 ec 0c             	sub    esp,0xc
c001eda4:	68 fc fc 01 c0       	push   0xc001fcfc
c001eda9:	e8 b1 1a ff ff       	call   c001085f <KePanic(char const*)>
c001edae:	83 c4 10             	add    esp,0x10
c001edb1:	e9 92 00 00 00       	jmp    c001ee48 <LinkedList<Device>::removeFirst()+0xb4>
c001edb6:	66 90                	xchg   ax,ax
c001edb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001edbf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001edc5:	85 c0                	test   eax,eax
c001edc7:	74 13                	je     c001eddc <LinkedList<Device>::removeFirst()+0x48>
c001edc9:	83 ec 0c             	sub    esp,0xc
c001edcc:	68 47 fd 01 c0       	push   0xc001fd47
c001edd1:	e8 89 1a ff ff       	call   c001085f <KePanic(char const*)>
c001edd6:	83 c4 10             	add    esp,0x10
c001edd9:	8d 76 00             	lea    esi,[esi+0x0]
c001eddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede0:	8b 00                	mov    eax,DWORD PTR [eax]
c001ede2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ede8:	85 c0                	test   eax,eax
c001edea:	75 34                	jne    c001ee20 <LinkedList<Device>::removeFirst()+0x8c>
c001edec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edf0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001edf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edfa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ee01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee05:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee08:	83 f8 01             	cmp    eax,0x1
c001ee0b:	74 27                	je     c001ee34 <LinkedList<Device>::removeFirst()+0xa0>
c001ee0d:	83 ec 0c             	sub    esp,0xc
c001ee10:	68 20 fd 01 c0       	push   0xc001fd20
c001ee15:	e8 45 1a ff ff       	call   c001085f <KePanic(char const*)>
c001ee1a:	83 c4 10             	add    esp,0x10
c001ee1d:	eb 15                	jmp    c001ee34 <LinkedList<Device>::removeFirst()+0xa0>
c001ee1f:	90                   	nop
c001ee20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee24:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee26:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ee2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee30:	89 10                	mov    DWORD PTR [eax],edx
c001ee32:	66 90                	xchg   ax,ax
c001ee34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee38:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee3b:	8d 50 ff             	lea    edx,[eax-0x1]
c001ee3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee42:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ee45:	8d 76 00             	lea    esi,[esi+0x0]
c001ee48:	83 c4 0c             	add    esp,0xc
c001ee4b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ee4c <CPU::~CPU()>:
c001ee4c:	83 ec 0c             	sub    esp,0xc
c001ee4f:	ba 04 0b 02 c0       	mov    edx,0xc0020b04
c001ee54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee58:	89 10                	mov    DWORD PTR [eax],edx
c001ee5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee5e:	83 ec 0c             	sub    esp,0xc
c001ee61:	50                   	push   eax
c001ee62:	e8 51 ce fe ff       	call   c000bcb8 <Device::~Device()>
c001ee67:	83 c4 10             	add    esp,0x10
c001ee6a:	90                   	nop
c001ee6b:	83 c4 0c             	add    esp,0xc
c001ee6e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ee70 <CPU::~CPU()>:
c001ee70:	83 ec 0c             	sub    esp,0xc
c001ee73:	83 ec 0c             	sub    esp,0xc
c001ee76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee7a:	e8 cd ff ff ff       	call   c001ee4c <CPU::~CPU()>
c001ee7f:	83 c4 10             	add    esp,0x10
c001ee82:	83 ec 08             	sub    esp,0x8
c001ee85:	68 94 11 00 00       	push   0x1194
c001ee8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee8e:	e8 c2 b9 fe ff       	call   c000a855 <operator delete(void*, unsigned long)>
c001ee93:	83 c4 10             	add    esp,0x10
c001ee96:	83 c4 0c             	add    esp,0xc
c001ee99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ee9c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ee9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001eea0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001eea3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001eea4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001eea4:	90                   	nop
c001eea5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001eea8 <ThreadControlBlock::ThreadControlBlock()>:
c001eea8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eeac:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eeb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eeb7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001eebe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eec2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001eec9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eecd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001eed4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eed8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001eedf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eee3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001eee7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eeeb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001eeef:	90                   	nop
c001eef0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001eef4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001eef4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eef8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eefe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef02:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef0d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef18:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ef1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef22:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ef29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef2d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ef34:	90                   	nop
c001ef35:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ef36 <PCI::~PCI()>:
c001ef36:	83 ec 0c             	sub    esp,0xc
c001ef39:	ba 64 19 02 c0       	mov    edx,0xc0021964
c001ef3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef42:	89 10                	mov    DWORD PTR [eax],edx
c001ef44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef48:	83 ec 0c             	sub    esp,0xc
c001ef4b:	50                   	push   eax
c001ef4c:	e8 ff c7 fe ff       	call   c000b750 <Bus::~Bus()>
c001ef51:	83 c4 10             	add    esp,0x10
c001ef54:	90                   	nop
c001ef55:	83 c4 0c             	add    esp,0xc
c001ef58:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ef5a <PCI::~PCI()>:
c001ef5a:	83 ec 0c             	sub    esp,0xc
c001ef5d:	83 ec 0c             	sub    esp,0xc
c001ef60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef64:	e8 cd ff ff ff       	call   c001ef36 <PCI::~PCI()>
c001ef69:	83 c4 10             	add    esp,0x10
c001ef6c:	83 ec 08             	sub    esp,0x8
c001ef6f:	68 5c 01 00 00       	push   0x15c
c001ef74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef78:	e8 d8 b8 fe ff       	call   c000a855 <operator delete(void*, unsigned long)>
c001ef7d:	83 c4 10             	add    esp,0x10
c001ef80:	83 c4 0c             	add    esp,0xc
c001ef83:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001ef84 <IDE::~IDE()>:
c001ef84:	83 ec 0c             	sub    esp,0xc
c001ef87:	ba 18 1a 02 c0       	mov    edx,0xc0021a18
c001ef8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef90:	89 10                	mov    DWORD PTR [eax],edx
c001ef92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef96:	83 ec 0c             	sub    esp,0xc
c001ef99:	50                   	push   eax
c001ef9a:	e8 91 d1 fe ff       	call   c000c130 <HardDiskController::~HardDiskController()>
c001ef9f:	83 c4 10             	add    esp,0x10
c001efa2:	90                   	nop
c001efa3:	83 c4 0c             	add    esp,0xc
c001efa6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001efa8 <IDE::~IDE()>:
c001efa8:	83 ec 0c             	sub    esp,0xc
c001efab:	83 ec 0c             	sub    esp,0xc
c001efae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efb2:	e8 cd ff ff ff       	call   c001ef84 <IDE::~IDE()>
c001efb7:	83 c4 10             	add    esp,0x10
c001efba:	83 ec 08             	sub    esp,0x8
c001efbd:	68 70 02 00 00       	push   0x270
c001efc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001efc6:	e8 8a b8 fe ff       	call   c000a855 <operator delete(void*, unsigned long)>
c001efcb:	83 c4 10             	add    esp,0x10
c001efce:	83 c4 0c             	add    esp,0xc
c001efd1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001efd2 <SATABus::~SATABus()>:
c001efd2:	83 ec 0c             	sub    esp,0xc
c001efd5:	ba 68 1a 02 c0       	mov    edx,0xc0021a68
c001efda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efde:	89 10                	mov    DWORD PTR [eax],edx
c001efe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe4:	83 ec 0c             	sub    esp,0xc
c001efe7:	50                   	push   eax
c001efe8:	e8 43 d1 fe ff       	call   c000c130 <HardDiskController::~HardDiskController()>
c001efed:	83 c4 10             	add    esp,0x10
c001eff0:	90                   	nop
c001eff1:	83 c4 0c             	add    esp,0xc
c001eff4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001eff6 <SATABus::~SATABus()>:
c001eff6:	83 ec 0c             	sub    esp,0xc
c001eff9:	83 ec 0c             	sub    esp,0xc
c001effc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f000:	e8 cd ff ff ff       	call   c001efd2 <SATABus::~SATABus()>
c001f005:	83 c4 10             	add    esp,0x10
c001f008:	83 ec 08             	sub    esp,0x8
c001f00b:	68 64 01 00 00       	push   0x164
c001f010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f014:	e8 3c b8 fe ff       	call   c000a855 <operator delete(void*, unsigned long)>
c001f019:	83 c4 10             	add    esp,0x10
c001f01c:	83 c4 0c             	add    esp,0xc
c001f01f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f020 <ATA::~ATA()>:
c001f020:	83 ec 0c             	sub    esp,0xc
c001f023:	ba a8 1a 02 c0       	mov    edx,0xc0021aa8
c001f028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f02c:	89 10                	mov    DWORD PTR [eax],edx
c001f02e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f032:	83 ec 0c             	sub    esp,0xc
c001f035:	50                   	push   eax
c001f036:	e8 d7 d1 fe ff       	call   c000c212 <PhysicalDisk::~PhysicalDisk()>
c001f03b:	83 c4 10             	add    esp,0x10
c001f03e:	90                   	nop
c001f03f:	83 c4 0c             	add    esp,0xc
c001f042:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f044 <ATA::~ATA()>:
c001f044:	83 ec 0c             	sub    esp,0xc
c001f047:	83 ec 0c             	sub    esp,0xc
c001f04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f04e:	e8 cd ff ff ff       	call   c001f020 <ATA::~ATA()>
c001f053:	83 c4 10             	add    esp,0x10
c001f056:	83 ec 08             	sub    esp,0x8
c001f059:	68 7c 01 00 00       	push   0x17c
c001f05e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f062:	e8 ee b7 fe ff       	call   c000a855 <operator delete(void*, unsigned long)>
c001f067:	83 c4 10             	add    esp,0x10
c001f06a:	83 c4 0c             	add    esp,0xc
c001f06d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f06e <ATAPI::~ATAPI()>:
c001f06e:	83 ec 0c             	sub    esp,0xc
c001f071:	ba f0 1a 02 c0       	mov    edx,0xc0021af0
c001f076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f07a:	89 10                	mov    DWORD PTR [eax],edx
c001f07c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f080:	83 ec 0c             	sub    esp,0xc
c001f083:	50                   	push   eax
c001f084:	e8 89 d1 fe ff       	call   c000c212 <PhysicalDisk::~PhysicalDisk()>
c001f089:	83 c4 10             	add    esp,0x10
c001f08c:	90                   	nop
c001f08d:	83 c4 0c             	add    esp,0xc
c001f090:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f092 <ATAPI::~ATAPI()>:
c001f092:	83 ec 0c             	sub    esp,0xc
c001f095:	83 ec 0c             	sub    esp,0xc
c001f098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f09c:	e8 cd ff ff ff       	call   c001f06e <ATAPI::~ATAPI()>
c001f0a1:	83 c4 10             	add    esp,0x10
c001f0a4:	83 ec 08             	sub    esp,0x8
c001f0a7:	68 84 01 00 00       	push   0x184
c001f0ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0b0:	e8 a0 b7 fe ff       	call   c000a855 <operator delete(void*, unsigned long)>
c001f0b5:	83 c4 10             	add    esp,0x10
c001f0b8:	83 c4 0c             	add    esp,0xc
c001f0bb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001f0bc <SATA::~SATA()>:
c001f0bc:	83 ec 0c             	sub    esp,0xc
c001f0bf:	ba a4 1b 02 c0       	mov    edx,0xc0021ba4
c001f0c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c8:	89 10                	mov    DWORD PTR [eax],edx
c001f0ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0ce:	83 ec 0c             	sub    esp,0xc
c001f0d1:	50                   	push   eax
c001f0d2:	e8 3b d1 fe ff       	call   c000c212 <PhysicalDisk::~PhysicalDisk()>
c001f0d7:	83 c4 10             	add    esp,0x10
c001f0da:	90                   	nop
c001f0db:	83 c4 0c             	add    esp,0xc
c001f0de:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001f0e0 <SATA::~SATA()>:
c001f0e0:	83 ec 0c             	sub    esp,0xc
c001f0e3:	83 ec 0c             	sub    esp,0xc
c001f0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0ea:	e8 cd ff ff ff       	call   c001f0bc <SATA::~SATA()>
c001f0ef:	83 c4 10             	add    esp,0x10
c001f0f2:	83 ec 08             	sub    esp,0x8
c001f0f5:	68 7c 01 00 00       	push   0x17c
c001f0fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0fe:	e8 52 b7 fe ff       	call   c000a855 <operator delete(void*, unsigned long)>
c001f103:	83 c4 10             	add    esp,0x10
c001f106:	83 c4 0c             	add    esp,0xc
c001f109:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001f10a <SATAPI::~SATAPI()>:
c001f10a:	83 ec 0c             	sub    esp,0xc
c001f10d:	ba c8 1c 02 c0       	mov    edx,0xc0021cc8
c001f112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f116:	89 10                	mov    DWORD PTR [eax],edx
c001f118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f11c:	83 ec 0c             	sub    esp,0xc
c001f11f:	50                   	push   eax
c001f120:	e8 ed d0 fe ff       	call   c000c212 <PhysicalDisk::~PhysicalDisk()>
c001f125:	83 c4 10             	add    esp,0x10
c001f128:	90                   	nop
c001f129:	83 c4 0c             	add    esp,0xc
c001f12c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001f12e <SATAPI::~SATAPI()>:
c001f12e:	83 ec 0c             	sub    esp,0xc
c001f131:	83 ec 0c             	sub    esp,0xc
c001f134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f138:	e8 cd ff ff ff       	call   c001f10a <SATAPI::~SATAPI()>
c001f13d:	83 c4 10             	add    esp,0x10
c001f140:	83 ec 08             	sub    esp,0x8
c001f143:	68 84 01 00 00       	push   0x184
c001f148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f14c:	e8 04 b7 fe ff       	call   c000a855 <operator delete(void*, unsigned long)>
c001f151:	83 c4 10             	add    esp,0x10
c001f154:	83 c4 0c             	add    esp,0xc
c001f157:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f158 <IOAPIC::~IOAPIC()>:
c001f158:	83 ec 0c             	sub    esp,0xc
c001f15b:	ba 08 1d 02 c0       	mov    edx,0xc0021d08
c001f160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f164:	89 10                	mov    DWORD PTR [eax],edx
c001f166:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f16a:	83 ec 0c             	sub    esp,0xc
c001f16d:	50                   	push   eax
c001f16e:	e8 45 cb fe ff       	call   c000bcb8 <Device::~Device()>
c001f173:	83 c4 10             	add    esp,0x10
c001f176:	90                   	nop
c001f177:	83 c4 0c             	add    esp,0xc
c001f17a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f17c <IOAPIC::~IOAPIC()>:
c001f17c:	83 ec 0c             	sub    esp,0xc
c001f17f:	83 ec 0c             	sub    esp,0xc
c001f182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f186:	e8 cd ff ff ff       	call   c001f158 <IOAPIC::~IOAPIC()>
c001f18b:	83 c4 10             	add    esp,0x10
c001f18e:	83 ec 08             	sub    esp,0x8
c001f191:	68 68 01 00 00       	push   0x168
c001f196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f19a:	e8 b6 b6 fe ff       	call   c000a855 <operator delete(void*, unsigned long)>
c001f19f:	83 c4 10             	add    esp,0x10
c001f1a2:	83 c4 0c             	add    esp,0xc
c001f1a5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f1a8 <APICTimer::~APICTimer()>:
c001f1a8:	83 ec 0c             	sub    esp,0xc
c001f1ab:	ba 50 1d 02 c0       	mov    edx,0xc0021d50
c001f1b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1b4:	89 10                	mov    DWORD PTR [eax],edx
c001f1b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1ba:	83 ec 0c             	sub    esp,0xc
c001f1bd:	50                   	push   eax
c001f1be:	e8 c1 e5 fe ff       	call   c000d784 <Timer::~Timer()>
c001f1c3:	83 c4 10             	add    esp,0x10
c001f1c6:	90                   	nop
c001f1c7:	83 c4 0c             	add    esp,0xc
c001f1ca:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f1cc <APICTimer::~APICTimer()>:
c001f1cc:	83 ec 0c             	sub    esp,0xc
c001f1cf:	83 ec 0c             	sub    esp,0xc
c001f1d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1d6:	e8 cd ff ff ff       	call   c001f1a8 <APICTimer::~APICTimer()>
c001f1db:	83 c4 10             	add    esp,0x10
c001f1de:	83 ec 08             	sub    esp,0x8
c001f1e1:	68 60 01 00 00       	push   0x160
c001f1e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1ea:	e8 66 b6 fe ff       	call   c000a855 <operator delete(void*, unsigned long)>
c001f1ef:	83 c4 10             	add    esp,0x10
c001f1f2:	83 c4 0c             	add    esp,0xc
c001f1f5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f1f8 <PIT::~PIT()>:
c001f1f8:	83 ec 0c             	sub    esp,0xc
c001f1fb:	ba a0 1d 02 c0       	mov    edx,0xc0021da0
c001f200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f204:	89 10                	mov    DWORD PTR [eax],edx
c001f206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f20a:	83 ec 0c             	sub    esp,0xc
c001f20d:	50                   	push   eax
c001f20e:	e8 71 e5 fe ff       	call   c000d784 <Timer::~Timer()>
c001f213:	83 c4 10             	add    esp,0x10
c001f216:	90                   	nop
c001f217:	83 c4 0c             	add    esp,0xc
c001f21a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f21c <PIT::~PIT()>:
c001f21c:	83 ec 0c             	sub    esp,0xc
c001f21f:	83 ec 0c             	sub    esp,0xc
c001f222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f226:	e8 cd ff ff ff       	call   c001f1f8 <PIT::~PIT()>
c001f22b:	83 c4 10             	add    esp,0x10
c001f22e:	83 ec 08             	sub    esp,0x8
c001f231:	68 5c 01 00 00       	push   0x15c
c001f236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f23a:	e8 16 b6 fe ff       	call   c000a855 <operator delete(void*, unsigned long)>
c001f23f:	83 c4 10             	add    esp,0x10
c001f242:	83 c4 0c             	add    esp,0xc
c001f245:	c3                   	ret    

Disassembly of section userkernel:

c0023000 <KiDefaultSignalHandlerAbort(int)>:
c0023000:	57                   	push   edi
c0023001:	b9 07 00 00 00       	mov    ecx,0x7
c0023006:	56                   	push   esi
c0023007:	be f5 0b 02 c0       	mov    esi,0xc0020bf5
c002300c:	83 ec 24             	sub    esp,0x24
c002300f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023013:	fc                   	cld    
c0023014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002301a:	50                   	push   eax
c002301b:	6a 00                	push   0x0
c002301d:	6a 38                	push   0x38
c002301f:	6a 01                	push   0x1
c0023021:	e8 2c 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0023026:	83 c4 34             	add    esp,0x34
c0023029:	5e                   	pop    esi
c002302a:	5f                   	pop    edi
c002302b:	c3                   	ret    

c002302c <KiDefaultSignalHandlerTerminate(int)>:
c002302c:	57                   	push   edi
c002302d:	b9 08 00 00 00       	mov    ecx,0x8
c0023032:	56                   	push   esi
c0023033:	be 11 0c 02 c0       	mov    esi,0xc0020c11
c0023038:	83 ec 24             	sub    esp,0x24
c002303b:	89 e7                	mov    edi,esp
c002303d:	fc                   	cld    
c002303e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023040:	54                   	push   esp
c0023041:	6a 00                	push   0x0
c0023043:	6a 37                	push   0x37
c0023045:	6a 01                	push   0x1
c0023047:	e8 06 00 00 00       	call   c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002304c:	83 c4 34             	add    esp,0x34
c002304f:	5e                   	pop    esi
c0023050:	5f                   	pop    edi
c0023051:	c3                   	ret    

c0023052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0023052:	53                   	push   ebx
c0023053:	83 ec 10             	sub    esp,0x10
c0023056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002305a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002305e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023066:	cd 60                	int    0x60
c0023068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002306c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	5b                   	pop    ebx
c002307c:	c3                   	ret    

Disassembly of section align_previous:

c0024000 <DO_NOT_DELETE()>:
c0024000:	c3                   	ret    
