
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 15 f4 00 00       	call   c000f435 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 d3 4f 02 00       	call   c0024ff8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 90 5b 02 c0       	mov    ebx,0xc0025b90
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 9c 5b 02 c0    	cmp    ebx,0xc0025b9c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 ac 99 02 c0       	mov    eax,0xc00299ac
c0000049:	3d ac 99 02 c0       	cmp    eax,0xc00299ac
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 ac 99 02 c0       	push   0xc00299ac
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 ac 99 02 c0       	mov    eax,0xc00299ac
c0000075:	2d ac 99 02 c0       	sub    eax,0xc00299ac
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 ac 99 02 c0       	push   0xc00299ac
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d dc 9f 02 c0 00 	cmp    BYTE PTR ds:0xc0029fdc,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb a4 5b 02 c0       	mov    ebx,0xc0025ba4
c00000bb:	81 eb a0 5b 02 c0    	sub    ebx,0xc0025ba0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be a0 5b 02 c0       	mov    esi,0xc0025ba0
c00000ca:	a1 e0 9f 02 c0       	mov    eax,ds:0xc0029fe0
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 e0 9f 02 c0       	mov    ds:0xc0029fe0,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 e0 9f 02 c0       	mov    eax,ds:0xc0029fe0
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 ac 99 02 c0       	push   0xc00299ac
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 dc 9f 02 c0 01 	mov    BYTE PTR ds:0xc0029fdc,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 e4 9f 02 c0       	push   0xc0029fe4
c000012c:	68 ac 99 02 c0       	push   0xc00299ac
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <goToVM86>:
c0000299:	fa                   	cli    
c000029a:	55                   	push   ebp
c000029b:	89 e5                	mov    ebp,esp
c000029d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002a0:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002a3:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002a6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002a9:	25 ff ff 00 00       	and    eax,0xffff
c00002ae:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002b4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002ba:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002c0:	52                   	push   edx
c00002c1:	51                   	push   ecx
c00002c2:	68 02 02 02 00       	push   0x20202
c00002c7:	53                   	push   ebx
c00002c8:	50                   	push   eax
c00002c9:	cf                   	iret   

c00002ca <goToUsermode>:
c00002ca:	fa                   	cli    
c00002cb:	55                   	push   ebp
c00002cc:	89 e5                	mov    ebp,esp
c00002ce:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002d1:	66 b8 23 00          	mov    ax,0x23
c00002d5:	66 8e d8             	mov    ds,ax
c00002d8:	66 8e c0             	mov    es,ax
c00002db:	66 8e e0             	mov    fs,ax
c00002de:	66 8e e8             	mov    gs,ax
c00002e1:	89 e0                	mov    eax,esp
c00002e3:	68 23 00 00 00       	push   0x23
c00002e8:	50                   	push   eax
c00002e9:	68 02 02 00 00       	push   0x202
c00002ee:	68 1b 00 00 00       	push   0x1b
c00002f3:	53                   	push   ebx
c00002f4:	cf                   	iret   

c00002f5 <switchToThreadASMFirstTime>:
c00002f5:	9c                   	pushf  
c00002f6:	fa                   	cli    
c00002f7:	50                   	push   eax
c00002f8:	53                   	push   ebx
c00002f9:	51                   	push   ecx
c00002fa:	52                   	push   edx
c00002fb:	56                   	push   esi
c00002fc:	57                   	push   edi
c00002fd:	55                   	push   ebp
c00002fe:	e9 11 00 00 00       	jmp    c0000314 <commonThreadSwitch>

c0000303 <switchToThreadASM>:
c0000303:	9c                   	pushf  
c0000304:	50                   	push   eax
c0000305:	53                   	push   ebx
c0000306:	51                   	push   ecx
c0000307:	52                   	push   edx
c0000308:	56                   	push   esi
c0000309:	57                   	push   edi
c000030a:	55                   	push   ebp
c000030b:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000311:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000314 <commonThreadSwitch>:
c0000314:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000318:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000031e:	8b 06                	mov    eax,DWORD PTR [esi]
c0000320:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000323:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000326:	0f 20 d9             	mov    ecx,cr3
c0000329:	39 c8                	cmp    eax,ecx
c000032b:	74 03                	je     c0000330 <commonThreadSwitch.doneVAS>
c000032d:	0f 22 d8             	mov    cr3,eax

c0000330 <commonThreadSwitch.doneVAS>:
c0000330:	85 d2                	test   edx,edx
c0000332:	74 4e                	je     c0000382 <commonThreadSwitch.notFirstTime>
c0000334:	fa                   	cli    
c0000335:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000338:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c000033d:	60                   	pusha  
c000033e:	e8 e1 1c 01 00       	call   c0012024 <mapVASFirstTime>
c0000343:	61                   	popa   
c0000344:	89 c4                	mov    esp,eax
c0000346:	56                   	push   esi
c0000347:	52                   	push   edx
c0000348:	e8 13 b2 01 00       	call   c001b560 <changeTSS>
c000034d:	5a                   	pop    edx
c000034e:	5e                   	pop    esi
c000034f:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000356:	81 fa 01 00 00 00    	cmp    edx,0x1
c000035c:	74 39                	je     c0000397 <commonThreadSwitch.cameOffAFork>
c000035e:	5d                   	pop    ebp
c000035f:	5f                   	pop    edi
c0000360:	5e                   	pop    esi
c0000361:	59                   	pop    ecx
c0000362:	59                   	pop    ecx
c0000363:	5b                   	pop    ebx
c0000364:	58                   	pop    eax
c0000365:	81 c4 04 00 00 00    	add    esp,0x4
c000036b:	6a 02                	push   0x2
c000036d:	9d                   	popf   
c000036e:	52                   	push   edx
c000036f:	e8 ff b5 01 00       	call   c001b973 <taskStartupFunction>
c0000374:	5a                   	pop    edx
c0000375:	50                   	push   eax
c0000376:	ff d2                	call   edx
c0000378:	e8 a5 bb 01 00       	call   c001bf22 <taskReturned>
c000037d:	e9 fb ff ff ff       	jmp    c000037d <commonThreadSwitch.doneVAS+0x4d>

c0000382 <commonThreadSwitch.notFirstTime>:
c0000382:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000385:	56                   	push   esi
c0000386:	52                   	push   edx
c0000387:	e8 d4 b1 01 00       	call   c001b560 <changeTSS>
c000038c:	5a                   	pop    edx
c000038d:	5e                   	pop    esi
c000038e:	5d                   	pop    ebp
c000038f:	5f                   	pop    edi
c0000390:	5e                   	pop    esi
c0000391:	5a                   	pop    edx
c0000392:	59                   	pop    ecx
c0000393:	5b                   	pop    ebx
c0000394:	58                   	pop    eax
c0000395:	9d                   	popf   
c0000396:	c3                   	ret    

c0000397 <commonThreadSwitch.cameOffAFork>:
c0000397:	31 c0                	xor    eax,eax
c0000399:	31 d2                	xor    edx,edx
c000039b:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c000039e:	e9 82 02 00 00       	jmp    c0000625 <offAForkJumpThingy>

c00003a3 <detectCPUID>:
c00003a3:	9c                   	pushf  
c00003a4:	9c                   	pushf  
c00003a5:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00003ac:	9d                   	popf   
c00003ad:	9c                   	pushf  
c00003ae:	58                   	pop    eax
c00003af:	33 04 24             	xor    eax,DWORD PTR [esp]
c00003b2:	9d                   	popf   
c00003b3:	25 00 00 20 00       	and    eax,0x200000
c00003b8:	c3                   	ret    

c00003b9 <asmQuickAcquireLock>:
c00003b9:	55                   	push   ebp
c00003ba:	89 e5                	mov    ebp,esp
c00003bc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003bf <asmQuickAcquireLock.retry>:
c00003bf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003c4:	72 02                	jb     c00003c8 <asmQuickAcquireLock.spin_with_pause>
c00003c6:	fa                   	cli    
c00003c7:	c3                   	ret    

c00003c8 <asmQuickAcquireLock.spin_with_pause>:
c00003c8:	f3 90                	pause  
c00003ca:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003d0:	75 f6                	jne    c00003c8 <asmQuickAcquireLock.spin_with_pause>
c00003d2:	e9 e8 ff ff ff       	jmp    c00003bf <asmQuickAcquireLock.retry>

c00003d7 <asmQuickReleaseLock>:
c00003d7:	55                   	push   ebp
c00003d8:	89 e5                	mov    ebp,esp
c00003da:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003e1:	5d                   	pop    ebp
c00003e2:	c3                   	ret    

c00003e3 <asmAcquireLock>:
c00003e3:	55                   	push   ebp
c00003e4:	89 e5                	mov    ebp,esp
c00003e6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003e9 <asmAcquireLock.retry>:
c00003e9:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003ee:	72 05                	jb     c00003f5 <asmAcquireLock.spin_with_pause>
c00003f0:	9c                   	pushf  
c00003f1:	58                   	pop    eax
c00003f2:	fa                   	cli    
c00003f3:	5d                   	pop    ebp
c00003f4:	c3                   	ret    

c00003f5 <asmAcquireLock.spin_with_pause>:
c00003f5:	f3 90                	pause  
c00003f7:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003fd:	75 f6                	jne    c00003f5 <asmAcquireLock.spin_with_pause>
c00003ff:	e9 e5 ff ff ff       	jmp    c00003e9 <asmAcquireLock.retry>

c0000404 <asmReleaseLock>:
c0000404:	55                   	push   ebp
c0000405:	89 e5                	mov    ebp,esp
c0000407:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000040a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000040d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000413:	52                   	push   edx
c0000414:	9d                   	popf   
c0000415:	5d                   	pop    ebp
c0000416:	c3                   	ret    

c0000417 <loadGDT>:
c0000417:	0f 01 15 10 a4 02 c0 	lgdtd  ds:0xc002a410
c000041e:	66 b8 10 00          	mov    ax,0x10
c0000422:	66 8e d8             	mov    ds,ax
c0000425:	66 8e c0             	mov    es,ax
c0000428:	66 8e e0             	mov    fs,ax
c000042b:	66 8e e8             	mov    gs,ax
c000042e:	66 8e d0             	mov    ss,ax
c0000431:	e9 00 00 00 00       	jmp    c0000436 <flush2>

c0000436 <flush2>:
c0000436:	c3                   	ret    

c0000437 <isr0>:
c0000437:	fa                   	cli    
c0000438:	68 00 00 00 00       	push   0x0
c000043d:	68 00 00 00 00       	push   0x0
c0000442:	e9 a2 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000447 <isr1>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 01                	push   0x1
c000044c:	e9 98 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000451 <isr2>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 02                	push   0x2
c0000456:	e9 8e 01 00 00       	jmp    c00005e9 <int_common_stub>

c000045b <isr3>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 03                	push   0x3
c0000460:	e9 84 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000465 <isr4>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 04                	push   0x4
c000046a:	e9 7a 01 00 00       	jmp    c00005e9 <int_common_stub>

c000046f <isr5>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 05                	push   0x5
c0000474:	e9 70 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000479 <isr6>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 06                	push   0x6
c000047e:	e9 66 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000483 <isr7>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 07                	push   0x7
c0000488:	e9 5c 01 00 00       	jmp    c00005e9 <int_common_stub>

c000048d <isr8>:
c000048d:	fa                   	cli    
c000048e:	6a 08                	push   0x8
c0000490:	e9 54 01 00 00       	jmp    c00005e9 <int_common_stub>

c0000495 <isr9>:
c0000495:	fa                   	cli    
c0000496:	6a 00                	push   0x0
c0000498:	6a 09                	push   0x9
c000049a:	e9 4a 01 00 00       	jmp    c00005e9 <int_common_stub>

c000049f <isr10>:
c000049f:	fa                   	cli    
c00004a0:	6a 0a                	push   0xa
c00004a2:	e9 42 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004a7 <isr11>:
c00004a7:	fa                   	cli    
c00004a8:	6a 0b                	push   0xb
c00004aa:	e9 3a 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004af <isr12>:
c00004af:	fa                   	cli    
c00004b0:	6a 0c                	push   0xc
c00004b2:	e9 32 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004b7 <isr13>:
c00004b7:	fa                   	cli    
c00004b8:	6a 0d                	push   0xd
c00004ba:	e9 2a 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004bf <isr14>:
c00004bf:	fa                   	cli    
c00004c0:	6a 0e                	push   0xe
c00004c2:	e9 22 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004c7 <isr15>:
c00004c7:	fa                   	cli    
c00004c8:	6a 00                	push   0x0
c00004ca:	6a 0f                	push   0xf
c00004cc:	e9 18 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004d1 <isr16>:
c00004d1:	fa                   	cli    
c00004d2:	6a 00                	push   0x0
c00004d4:	6a 10                	push   0x10
c00004d6:	e9 0e 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004db <isr17>:
c00004db:	fa                   	cli    
c00004dc:	6a 00                	push   0x0
c00004de:	6a 11                	push   0x11
c00004e0:	e9 04 01 00 00       	jmp    c00005e9 <int_common_stub>

c00004e5 <isr18>:
c00004e5:	fa                   	cli    
c00004e6:	6a 00                	push   0x0
c00004e8:	6a 12                	push   0x12
c00004ea:	e9 fa 00 00 00       	jmp    c00005e9 <int_common_stub>

c00004ef <isr96>:
c00004ef:	fa                   	cli    
c00004f0:	6a 00                	push   0x0
c00004f2:	6a 60                	push   0x60
c00004f4:	e9 10 01 00 00       	jmp    c0000609 <syscall_common_stub>

c00004f9 <irq0>:
c00004f9:	fa                   	cli    
c00004fa:	6a 00                	push   0x0
c00004fc:	6a 20                	push   0x20
c00004fe:	e9 e6 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000503 <irq1>:
c0000503:	fa                   	cli    
c0000504:	6a 00                	push   0x0
c0000506:	6a 21                	push   0x21
c0000508:	e9 dc 00 00 00       	jmp    c00005e9 <int_common_stub>

c000050d <irq2>:
c000050d:	fa                   	cli    
c000050e:	6a 00                	push   0x0
c0000510:	6a 22                	push   0x22
c0000512:	e9 d2 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000517 <irq3>:
c0000517:	fa                   	cli    
c0000518:	6a 00                	push   0x0
c000051a:	6a 23                	push   0x23
c000051c:	e9 c8 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000521 <irq4>:
c0000521:	fa                   	cli    
c0000522:	6a 00                	push   0x0
c0000524:	6a 24                	push   0x24
c0000526:	e9 be 00 00 00       	jmp    c00005e9 <int_common_stub>

c000052b <irq5>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 25                	push   0x25
c0000530:	e9 b4 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000535 <irq6>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 26                	push   0x26
c000053a:	e9 aa 00 00 00       	jmp    c00005e9 <int_common_stub>

c000053f <irq7>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 27                	push   0x27
c0000544:	e9 a0 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000549 <irq8>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 28                	push   0x28
c000054e:	e9 96 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000553 <irq9>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 29                	push   0x29
c0000558:	e9 8c 00 00 00       	jmp    c00005e9 <int_common_stub>

c000055d <irq10>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 2a                	push   0x2a
c0000562:	e9 82 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000567 <irq11>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 2b                	push   0x2b
c000056c:	e9 78 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000571 <irq12>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 2c                	push   0x2c
c0000576:	e9 6e 00 00 00       	jmp    c00005e9 <int_common_stub>

c000057b <irq13>:
c000057b:	fa                   	cli    
c000057c:	6a 00                	push   0x0
c000057e:	6a 2d                	push   0x2d
c0000580:	e9 64 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000585 <irq14>:
c0000585:	fa                   	cli    
c0000586:	6a 00                	push   0x0
c0000588:	6a 2e                	push   0x2e
c000058a:	e9 5a 00 00 00       	jmp    c00005e9 <int_common_stub>

c000058f <irq15>:
c000058f:	fa                   	cli    
c0000590:	6a 00                	push   0x0
c0000592:	6a 2f                	push   0x2f
c0000594:	e9 50 00 00 00       	jmp    c00005e9 <int_common_stub>

c0000599 <irq16>:
c0000599:	fa                   	cli    
c000059a:	6a 00                	push   0x0
c000059c:	6a 30                	push   0x30
c000059e:	e9 46 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005a3 <irq17>:
c00005a3:	fa                   	cli    
c00005a4:	6a 00                	push   0x0
c00005a6:	6a 31                	push   0x31
c00005a8:	e9 3c 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005ad <irq18>:
c00005ad:	fa                   	cli    
c00005ae:	6a 00                	push   0x0
c00005b0:	6a 32                	push   0x32
c00005b2:	e9 32 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005b7 <irq19>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 33                	push   0x33
c00005bc:	e9 28 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005c1 <irq20>:
c00005c1:	fa                   	cli    
c00005c2:	6a 00                	push   0x0
c00005c4:	6a 34                	push   0x34
c00005c6:	e9 1e 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005cb <irq21>:
c00005cb:	fa                   	cli    
c00005cc:	6a 00                	push   0x0
c00005ce:	6a 35                	push   0x35
c00005d0:	e9 14 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005d5 <irq22>:
c00005d5:	fa                   	cli    
c00005d6:	6a 00                	push   0x0
c00005d8:	6a 36                	push   0x36
c00005da:	e9 0a 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005df <irq23>:
c00005df:	fa                   	cli    
c00005e0:	6a 00                	push   0x0
c00005e2:	6a 37                	push   0x37
c00005e4:	e9 00 00 00 00       	jmp    c00005e9 <int_common_stub>

c00005e9 <int_common_stub>:
c00005e9:	60                   	pusha  
c00005ea:	1e                   	push   ds
c00005eb:	06                   	push   es
c00005ec:	0f a0                	push   fs
c00005ee:	0f a8                	push   gs
c00005f0:	89 e1                	mov    ecx,esp
c00005f2:	51                   	push   ecx
c00005f3:	b9 07 3f 01 c0       	mov    ecx,0xc0013f07
c00005f8:	ff d1                	call   ecx
c00005fa:	59                   	pop    ecx
c00005fb:	0f a9                	pop    gs
c00005fd:	0f a1                	pop    fs
c00005ff:	07                   	pop    es
c0000600:	1f                   	pop    ds
c0000601:	61                   	popa   
c0000602:	81 c4 08 00 00 00    	add    esp,0x8
c0000608:	cf                   	iret   

c0000609 <syscall_common_stub>:
c0000609:	60                   	pusha  
c000060a:	1e                   	push   ds
c000060b:	06                   	push   es
c000060c:	0f a0                	push   fs
c000060e:	0f a8                	push   gs
c0000610:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000616:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000619:	89 e1                	mov    ecx,esp
c000061b:	51                   	push   ecx
c000061c:	fb                   	sti    
c000061d:	b9 07 3f 01 c0       	mov    ecx,0xc0013f07
c0000622:	ff d1                	call   ecx
c0000624:	59                   	pop    ecx

c0000625 <offAForkJumpThingy>:
c0000625:	0f a9                	pop    gs
c0000627:	0f a1                	pop    fs
c0000629:	07                   	pop    es
c000062a:	1f                   	pop    ds
c000062b:	61                   	popa   
c000062c:	81 c4 08 00 00 00    	add    esp,0x8
c0000632:	cf                   	iret   

c0000633 <memcmp>:
c0000633:	56                   	push   esi
c0000634:	53                   	push   ebx
c0000635:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000639:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000641:	01 d6                	add    esi,edx
c0000643:	39 f2                	cmp    edx,esi
c0000645:	74 0e                	je     c0000655 <memcmp+0x22>
c0000647:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c000064a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000064d:	38 c8                	cmp    al,cl
c000064f:	75 08                	jne    c0000659 <memcmp+0x26>
c0000651:	42                   	inc    edx
c0000652:	43                   	inc    ebx
c0000653:	eb ee                	jmp    c0000643 <memcmp+0x10>
c0000655:	31 c0                	xor    eax,eax
c0000657:	eb 02                	jmp    c000065b <memcmp+0x28>
c0000659:	29 c8                	sub    eax,ecx
c000065b:	5b                   	pop    ebx
c000065c:	5e                   	pop    esi
c000065d:	c3                   	ret    

c000065e <memmove>:
c000065e:	56                   	push   esi
c000065f:	53                   	push   ebx
c0000660:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000664:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000668:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000066c:	39 c8                	cmp    eax,ecx
c000066e:	73 12                	jae    c0000682 <memmove+0x24>
c0000670:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000673:	89 c3                	mov    ebx,eax
c0000675:	39 f1                	cmp    ecx,esi
c0000677:	74 1a                	je     c0000693 <memmove+0x35>
c0000679:	8a 11                	mov    dl,BYTE PTR [ecx]
c000067b:	43                   	inc    ebx
c000067c:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000067f:	41                   	inc    ecx
c0000680:	eb f3                	jmp    c0000675 <memmove+0x17>
c0000682:	76 0f                	jbe    c0000693 <memmove+0x35>
c0000684:	85 d2                	test   edx,edx
c0000686:	74 0b                	je     c0000693 <memmove+0x35>
c0000688:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000068c:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c0000690:	4a                   	dec    edx
c0000691:	eb f1                	jmp    c0000684 <memmove+0x26>
c0000693:	5b                   	pop    ebx
c0000694:	5e                   	pop    esi
c0000695:	c3                   	ret    

c0000696 <memcpy>:
c0000696:	57                   	push   edi
c0000697:	56                   	push   esi
c0000698:	53                   	push   ebx
c0000699:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000069d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00006a1:	89 da                	mov    edx,ebx
c00006a3:	89 d9                	mov    ecx,ebx
c00006a5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00006a9:	83 e2 fc             	and    edx,0xfffffffc
c00006ac:	c1 e9 02             	shr    ecx,0x2
c00006af:	89 c7                	mov    edi,eax
c00006b1:	fc                   	cld    
c00006b2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006b4:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006b7:	01 c2                	add    edx,eax
c00006b9:	01 de                	add    esi,ebx
c00006bb:	39 f1                	cmp    ecx,esi
c00006bd:	74 09                	je     c00006c8 <memcpy+0x32>
c00006bf:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006c1:	42                   	inc    edx
c00006c2:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006c5:	41                   	inc    ecx
c00006c6:	eb f3                	jmp    c00006bb <memcpy+0x25>
c00006c8:	5b                   	pop    ebx
c00006c9:	5e                   	pop    esi
c00006ca:	5f                   	pop    edi
c00006cb:	c3                   	ret    

c00006cc <memset>:
c00006cc:	53                   	push   ebx
c00006cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006d5:	89 c2                	mov    edx,eax
c00006d7:	01 c1                	add    ecx,eax
c00006d9:	39 ca                	cmp    edx,ecx
c00006db:	74 0a                	je     c00006e7 <memset+0x1b>
c00006dd:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006e1:	42                   	inc    edx
c00006e2:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006e5:	eb f2                	jmp    c00006d9 <memset+0xd>
c00006e7:	5b                   	pop    ebx
c00006e8:	c3                   	ret    

c00006e9 <strlen>:
c00006e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006ed:	31 c0                	xor    eax,eax
c00006ef:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006f3:	74 03                	je     c00006f8 <strlen+0xf>
c00006f5:	40                   	inc    eax
c00006f6:	eb f7                	jmp    c00006ef <strlen+0x6>
c00006f8:	c3                   	ret    

c00006f9 <strpbrk>:
c00006f9:	53                   	push   ebx
c00006fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006fe:	8a 08                	mov    cl,BYTE PTR [eax]
c0000700:	84 c9                	test   cl,cl
c0000702:	74 14                	je     c0000718 <strpbrk+0x1f>
c0000704:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000708:	8a 1a                	mov    bl,BYTE PTR [edx]
c000070a:	84 db                	test   bl,bl
c000070c:	74 07                	je     c0000715 <strpbrk+0x1c>
c000070e:	38 cb                	cmp    bl,cl
c0000710:	74 08                	je     c000071a <strpbrk+0x21>
c0000712:	42                   	inc    edx
c0000713:	eb f3                	jmp    c0000708 <strpbrk+0xf>
c0000715:	40                   	inc    eax
c0000716:	eb e6                	jmp    c00006fe <strpbrk+0x5>
c0000718:	31 c0                	xor    eax,eax
c000071a:	5b                   	pop    ebx
c000071b:	c3                   	ret    

c000071c <strtok>:
c000071c:	56                   	push   esi
c000071d:	53                   	push   ebx
c000071e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000722:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000726:	85 db                	test   ebx,ebx
c0000728:	75 0e                	jne    c0000738 <strtok+0x1c>
c000072a:	8b 1d fc 9f 02 c0    	mov    ebx,DWORD PTR ds:0xc0029ffc
c0000730:	85 db                	test   ebx,ebx
c0000732:	75 04                	jne    c0000738 <strtok+0x1c>
c0000734:	31 db                	xor    ebx,ebx
c0000736:	eb 2e                	jmp    c0000766 <strtok+0x4a>
c0000738:	56                   	push   esi
c0000739:	53                   	push   ebx
c000073a:	e8 ba ff ff ff       	call   c00006f9 <strpbrk>
c000073f:	5a                   	pop    edx
c0000740:	a3 fc 9f 02 c0       	mov    ds:0xc0029ffc,eax
c0000745:	59                   	pop    ecx
c0000746:	a1 fc 9f 02 c0       	mov    eax,ds:0xc0029ffc
c000074b:	39 d8                	cmp    eax,ebx
c000074d:	75 07                	jne    c0000756 <strtok+0x3a>
c000074f:	43                   	inc    ebx
c0000750:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000754:	eb e2                	jmp    c0000738 <strtok+0x1c>
c0000756:	85 c0                	test   eax,eax
c0000758:	74 da                	je     c0000734 <strtok+0x18>
c000075a:	8d 50 01             	lea    edx,[eax+0x1]
c000075d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000760:	89 15 fc 9f 02 c0    	mov    DWORD PTR ds:0xc0029ffc,edx
c0000766:	89 d8                	mov    eax,ebx
c0000768:	5b                   	pop    ebx
c0000769:	5e                   	pop    esi
c000076a:	c3                   	ret    

c000076b <strcpy>:
c000076b:	53                   	push   ebx
c000076c:	31 d2                	xor    edx,edx
c000076e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000772:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000776:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000779:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000077c:	84 c9                	test   cl,cl
c000077e:	74 06                	je     c0000786 <strcpy+0x1b>
c0000780:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000783:	42                   	inc    edx
c0000784:	eb ec                	jmp    c0000772 <strcpy+0x7>
c0000786:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000789:	5b                   	pop    ebx
c000078a:	c3                   	ret    

c000078b <strncpy>:
c000078b:	56                   	push   esi
c000078c:	53                   	push   ebx
c000078d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000791:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000795:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000799:	89 c3                	mov    ebx,eax
c000079b:	85 c9                	test   ecx,ecx
c000079d:	74 1a                	je     c00007b9 <strncpy+0x2e>
c000079f:	46                   	inc    esi
c00007a0:	43                   	inc    ebx
c00007a1:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00007a4:	49                   	dec    ecx
c00007a5:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00007a8:	84 d2                	test   dl,dl
c00007aa:	75 ef                	jne    c000079b <strncpy+0x10>
c00007ac:	31 d2                	xor    edx,edx
c00007ae:	39 d1                	cmp    ecx,edx
c00007b0:	74 07                	je     c00007b9 <strncpy+0x2e>
c00007b2:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007b6:	42                   	inc    edx
c00007b7:	eb f5                	jmp    c00007ae <strncpy+0x23>
c00007b9:	5b                   	pop    ebx
c00007ba:	5e                   	pop    esi
c00007bb:	c3                   	ret    

c00007bc <strcmp>:
c00007bc:	31 c9                	xor    ecx,ecx
c00007be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007c6:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007ca:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007ce:	38 d0                	cmp    al,dl
c00007d0:	75 08                	jne    c00007da <strcmp+0x1e>
c00007d2:	41                   	inc    ecx
c00007d3:	84 c0                	test   al,al
c00007d5:	75 e7                	jne    c00007be <strcmp+0x2>
c00007d7:	31 c0                	xor    eax,eax
c00007d9:	c3                   	ret    
c00007da:	29 d0                	sub    eax,edx
c00007dc:	c3                   	ret    

c00007dd <strchr>:
c00007dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007e1:	8a 10                	mov    dl,BYTE PTR [eax]
c00007e3:	84 d2                	test   dl,dl
c00007e5:	74 09                	je     c00007f0 <strchr+0x13>
c00007e7:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007eb:	74 05                	je     c00007f2 <strchr+0x15>
c00007ed:	40                   	inc    eax
c00007ee:	eb f1                	jmp    c00007e1 <strchr+0x4>
c00007f0:	31 c0                	xor    eax,eax
c00007f2:	c3                   	ret    

c00007f3 <strncmp>:
c00007f3:	56                   	push   esi
c00007f4:	53                   	push   ebx
c00007f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007f9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000801:	01 d6                	add    esi,edx
c0000803:	39 f2                	cmp    edx,esi
c0000805:	74 12                	je     c0000819 <strncmp+0x26>
c0000807:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c000080a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000080d:	38 c8                	cmp    al,cl
c000080f:	75 0c                	jne    c000081d <strncmp+0x2a>
c0000811:	42                   	inc    edx
c0000812:	84 c0                	test   al,al
c0000814:	74 03                	je     c0000819 <strncmp+0x26>
c0000816:	43                   	inc    ebx
c0000817:	eb ea                	jmp    c0000803 <strncmp+0x10>
c0000819:	31 c0                	xor    eax,eax
c000081b:	eb 02                	jmp    c000081f <strncmp+0x2c>
c000081d:	29 c8                	sub    eax,ecx
c000081f:	5b                   	pop    ebx
c0000820:	5e                   	pop    esi
c0000821:	c3                   	ret    

c0000822 <strcat>:
c0000822:	53                   	push   ebx
c0000823:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000827:	89 c1                	mov    ecx,eax
c0000829:	8d 51 01             	lea    edx,[ecx+0x1]
c000082c:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000830:	74 04                	je     c0000836 <strcat+0x14>
c0000832:	89 d1                	mov    ecx,edx
c0000834:	eb f3                	jmp    c0000829 <strcat+0x7>
c0000836:	31 d2                	xor    edx,edx
c0000838:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000083c:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000083f:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000842:	42                   	inc    edx
c0000843:	84 db                	test   bl,bl
c0000845:	75 f1                	jne    c0000838 <strcat+0x16>
c0000847:	5b                   	pop    ebx
c0000848:	c3                   	ret    

c0000849 <strncat>:
c0000849:	56                   	push   esi
c000084a:	53                   	push   ebx
c000084b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000084f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000853:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000857:	89 c2                	mov    edx,eax
c0000859:	85 db                	test   ebx,ebx
c000085b:	74 23                	je     c0000880 <strncat+0x37>
c000085d:	8d 72 01             	lea    esi,[edx+0x1]
c0000860:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000864:	74 04                	je     c000086a <strncat+0x21>
c0000866:	89 f2                	mov    edx,esi
c0000868:	eb f3                	jmp    c000085d <strncat+0x14>
c000086a:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000086d:	41                   	inc    ecx
c000086e:	42                   	inc    edx
c000086f:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 07                	je     c0000880 <strncat+0x37>
c0000879:	39 f1                	cmp    ecx,esi
c000087b:	75 f0                	jne    c000086d <strncat+0x24>
c000087d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000880:	5b                   	pop    ebx
c0000881:	5e                   	pop    esi
c0000882:	c3                   	ret    

c0000883 <strstr>:
c0000883:	57                   	push   edi
c0000884:	56                   	push   esi
c0000885:	53                   	push   ebx
c0000886:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000088a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000088e:	57                   	push   edi
c000088f:	e8 55 fe ff ff       	call   c00006e9 <strlen>
c0000894:	59                   	pop    ecx
c0000895:	89 c6                	mov    esi,eax
c0000897:	85 c0                	test   eax,eax
c0000899:	74 1f                	je     c00008ba <strstr+0x37>
c000089b:	53                   	push   ebx
c000089c:	e8 48 fe ff ff       	call   c00006e9 <strlen>
c00008a1:	5a                   	pop    edx
c00008a2:	39 f0                	cmp    eax,esi
c00008a4:	72 12                	jb     c00008b8 <strstr+0x35>
c00008a6:	56                   	push   esi
c00008a7:	57                   	push   edi
c00008a8:	53                   	push   ebx
c00008a9:	e8 85 fd ff ff       	call   c0000633 <memcmp>
c00008ae:	83 c4 0c             	add    esp,0xc
c00008b1:	85 c0                	test   eax,eax
c00008b3:	74 05                	je     c00008ba <strstr+0x37>
c00008b5:	43                   	inc    ebx
c00008b6:	eb e3                	jmp    c000089b <strstr+0x18>
c00008b8:	31 db                	xor    ebx,ebx
c00008ba:	89 d8                	mov    eax,ebx
c00008bc:	5b                   	pop    ebx
c00008bd:	5e                   	pop    esi
c00008be:	5f                   	pop    edi
c00008bf:	c3                   	ret    

c00008c0 <toupper>:
c00008c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008c4:	0f b6 d0             	movzx  edx,al
c00008c7:	f6 82 c0 5b 02 c0 02 	test   BYTE PTR [edx-0x3ffda440],0x2
c00008ce:	74 03                	je     c00008d3 <toupper+0x13>
c00008d0:	83 e8 20             	sub    eax,0x20
c00008d3:	c3                   	ret    

c00008d4 <tolower>:
c00008d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d8:	0f b6 d0             	movzx  edx,al
c00008db:	f6 82 c0 5b 02 c0 01 	test   BYTE PTR [edx-0x3ffda440],0x1
c00008e2:	74 03                	je     c00008e7 <tolower+0x13>
c00008e4:	83 c0 20             	add    eax,0x20
c00008e7:	c3                   	ret    

c00008e8 <simple_strtoul>:
c00008e8:	55                   	push   ebp
c00008e9:	57                   	push   edi
c00008ea:	56                   	push   esi
c00008eb:	53                   	push   ebx
c00008ec:	83 ec 08             	sub    esp,0x8
c00008ef:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008f3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008f7:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008fa:	f6 82 c0 5b 02 c0 08 	test   BYTE PTR [edx-0x3ffda440],0x8
c0000901:	74 03                	je     c0000906 <simple_strtoul+0x1e>
c0000903:	41                   	inc    ecx
c0000904:	eb f1                	jmp    c00008f7 <simple_strtoul+0xf>
c0000906:	80 fa 09             	cmp    dl,0x9
c0000909:	74 f8                	je     c0000903 <simple_strtoul+0x1b>
c000090b:	80 fa 2d             	cmp    dl,0x2d
c000090e:	75 0b                	jne    c000091b <simple_strtoul+0x33>
c0000910:	41                   	inc    ecx
c0000911:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000919:	eb 0e                	jmp    c0000929 <simple_strtoul+0x41>
c000091b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000923:	80 fa 2b             	cmp    dl,0x2b
c0000926:	75 01                	jne    c0000929 <simple_strtoul+0x41>
c0000928:	41                   	inc    ecx
c0000929:	85 f6                	test   esi,esi
c000092b:	75 22                	jne    c000094f <simple_strtoul+0x67>
c000092d:	be 0a 00 00 00       	mov    esi,0xa
c0000932:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000935:	75 5a                	jne    c0000991 <simple_strtoul+0xa9>
c0000937:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000093b:	50                   	push   eax
c000093c:	e8 93 ff ff ff       	call   c00008d4 <tolower>
c0000941:	5a                   	pop    edx
c0000942:	83 f8 78             	cmp    eax,0x78
c0000945:	74 03                	je     c000094a <simple_strtoul+0x62>
c0000947:	41                   	inc    ecx
c0000948:	eb 16                	jmp    c0000960 <simple_strtoul+0x78>
c000094a:	83 c1 02             	add    ecx,0x2
c000094d:	eb 22                	jmp    c0000971 <simple_strtoul+0x89>
c000094f:	8d 46 fe             	lea    eax,[esi-0x2]
c0000952:	83 f8 22             	cmp    eax,0x22
c0000955:	0f 87 b7 00 00 00    	ja     c0000a12 <simple_strtoul+0x12a>
c000095b:	83 fe 08             	cmp    esi,0x8
c000095e:	75 0c                	jne    c000096c <simple_strtoul+0x84>
c0000960:	be 08 00 00 00       	mov    esi,0x8
c0000965:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000968:	75 27                	jne    c0000991 <simple_strtoul+0xa9>
c000096a:	eb 1f                	jmp    c000098b <simple_strtoul+0xa3>
c000096c:	83 fe 10             	cmp    esi,0x10
c000096f:	75 20                	jne    c0000991 <simple_strtoul+0xa9>
c0000971:	be 10 00 00 00       	mov    esi,0x10
c0000976:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000979:	75 16                	jne    c0000991 <simple_strtoul+0xa9>
c000097b:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000097f:	50                   	push   eax
c0000980:	e8 4f ff ff ff       	call   c00008d4 <tolower>
c0000985:	5d                   	pop    ebp
c0000986:	83 f8 78             	cmp    eax,0x78
c0000989:	74 03                	je     c000098e <simple_strtoul+0xa6>
c000098b:	41                   	inc    ecx
c000098c:	eb 03                	jmp    c0000991 <simple_strtoul+0xa9>
c000098e:	83 c1 02             	add    ecx,0x2
c0000991:	31 ed                	xor    ebp,ebp
c0000993:	31 db                	xor    ebx,ebx
c0000995:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000099c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000099e:	84 d2                	test   dl,dl
c00009a0:	74 27                	je     c00009c9 <simple_strtoul+0xe1>
c00009a2:	0f b6 fa             	movzx  edi,dl
c00009a5:	f6 87 c0 5b 02 c0 04 	test   BYTE PTR [edi-0x3ffda440],0x4
c00009ac:	74 05                	je     c00009b3 <simple_strtoul+0xcb>
c00009ae:	83 ef 30             	sub    edi,0x30
c00009b1:	eb 22                	jmp    c00009d5 <simple_strtoul+0xed>
c00009b3:	0f be d2             	movsx  edx,dl
c00009b6:	52                   	push   edx
c00009b7:	e8 04 ff ff ff       	call   c00008c0 <toupper>
c00009bc:	5f                   	pop    edi
c00009bd:	0f b6 d0             	movzx  edx,al
c00009c0:	f6 82 c0 5b 02 c0 01 	test   BYTE PTR [edx-0x3ffda440],0x1
c00009c7:	75 09                	jne    c00009d2 <simple_strtoul+0xea>
c00009c9:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009ce:	75 2d                	jne    c00009fd <simple_strtoul+0x115>
c00009d0:	eb 57                	jmp    c0000a29 <simple_strtoul+0x141>
c00009d2:	8d 78 c9             	lea    edi,[eax-0x37]
c00009d5:	39 f7                	cmp    edi,esi
c00009d7:	73 f0                	jae    c00009c9 <simple_strtoul+0xe1>
c00009d9:	31 d2                	xor    edx,edx
c00009db:	89 f8                	mov    eax,edi
c00009dd:	f7 d0                	not    eax
c00009df:	f7 f6                	div    esi
c00009e1:	39 d8                	cmp    eax,ebx
c00009e3:	72 0e                	jb     c00009f3 <simple_strtoul+0x10b>
c00009e5:	0f af de             	imul   ebx,esi
c00009e8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009ef:	01 fb                	add    ebx,edi
c00009f1:	eb 07                	jmp    c00009fa <simple_strtoul+0x112>
c00009f3:	bd 01 00 00 00       	mov    ebp,0x1
c00009f8:	31 db                	xor    ebx,ebx
c00009fa:	41                   	inc    ecx
c00009fb:	eb 9f                	jmp    c000099c <simple_strtoul+0xb4>
c00009fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a00:	09 d8                	or     eax,ebx
c0000a02:	75 1f                	jne    c0000a23 <simple_strtoul+0x13b>
c0000a04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a08:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a0c:	31 db                	xor    ebx,ebx
c0000a0e:	89 38                	mov    DWORD PTR [eax],edi
c0000a10:	eb 17                	jmp    c0000a29 <simple_strtoul+0x141>
c0000a12:	31 db                	xor    ebx,ebx
c0000a14:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a19:	74 14                	je     c0000a2f <simple_strtoul+0x147>
c0000a1b:	31 ed                	xor    ebp,ebp
c0000a1d:	85 c9                	test   ecx,ecx
c0000a1f:	75 e3                	jne    c0000a04 <simple_strtoul+0x11c>
c0000a21:	31 db                	xor    ebx,ebx
c0000a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a27:	89 08                	mov    DWORD PTR [eax],ecx
c0000a29:	4d                   	dec    ebp
c0000a2a:	75 03                	jne    c0000a2f <simple_strtoul+0x147>
c0000a2c:	83 cb ff             	or     ebx,0xffffffff
c0000a2f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a34:	75 02                	jne    c0000a38 <simple_strtoul+0x150>
c0000a36:	f7 db                	neg    ebx
c0000a38:	83 c4 08             	add    esp,0x8
c0000a3b:	89 d8                	mov    eax,ebx
c0000a3d:	5b                   	pop    ebx
c0000a3e:	5e                   	pop    esi
c0000a3f:	5f                   	pop    edi
c0000a40:	5d                   	pop    ebp
c0000a41:	c3                   	ret    

c0000a42 <largebin_index>:
c0000a42:	89 c2                	mov    edx,eax
c0000a44:	c1 ea 08             	shr    edx,0x8
c0000a47:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a4d:	77 10                	ja     c0000a5f <largebin_index+0x1d>
c0000a4f:	0f bd d2             	bsr    edx,edx
c0000a52:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a55:	d3 e8                	shr    eax,cl
c0000a57:	83 e0 03             	and    eax,0x3
c0000a5a:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a5e:	c3                   	ret    
c0000a5f:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a64:	c3                   	ret    

c0000a65 <malloc_init_state>:
c0000a65:	53                   	push   ebx
c0000a66:	8d 50 34             	lea    edx,[eax+0x34]
c0000a69:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a6f:	89 d1                	mov    ecx,edx
c0000a71:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a74:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a77:	83 c2 08             	add    edx,0x8
c0000a7a:	39 da                	cmp    edx,ebx
c0000a7c:	75 f3                	jne    c0000a71 <malloc_init_state+0xc>
c0000a7e:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a80:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a8a:	83 e2 03             	and    edx,0x3
c0000a8d:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a97:	83 ca 48             	or     edx,0x48
c0000a9a:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000aa4:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000aae:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ab5:	89 10                	mov    DWORD PTR [eax],edx
c0000ab7:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000aba:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ac4:	5b                   	pop    ebx
c0000ac5:	c3                   	ret    

c0000ac6 <malloc_consolidate>:
c0000ac6:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ac8:	85 d2                	test   edx,edx
c0000aca:	0f 84 d8 00 00 00    	je     c0000ba8 <malloc_consolidate+0xe2>
c0000ad0:	55                   	push   ebp
c0000ad1:	83 e2 fd             	and    edx,0xfffffffd
c0000ad4:	57                   	push   edi
c0000ad5:	89 c5                	mov    ebp,eax
c0000ad7:	56                   	push   esi
c0000ad8:	8d 78 34             	lea    edi,[eax+0x34]
c0000adb:	53                   	push   ebx
c0000adc:	83 ec 10             	sub    esp,0x10
c0000adf:	89 10                	mov    DWORD PTR [eax],edx
c0000ae1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ae5:	c1 ea 03             	shr    edx,0x3
c0000ae8:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000aec:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000af0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000af3:	85 d2                	test   edx,edx
c0000af5:	0f 84 98 00 00 00    	je     c0000b93 <malloc_consolidate+0xcd>
c0000afb:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000b02:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000b05:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000b08:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b0c:	89 f9                	mov    ecx,edi
c0000b0e:	83 e1 fe             	and    ecx,0xfffffffe
c0000b11:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b14:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b17:	83 e3 fc             	and    ebx,0xfffffffc
c0000b1a:	83 e7 01             	and    edi,0x1
c0000b1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b20:	75 14                	jne    c0000b36 <malloc_consolidate+0x70>
c0000b22:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b24:	29 fa                	sub    edx,edi
c0000b26:	01 f9                	add    ecx,edi
c0000b28:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b2b:	89 fb                	mov    ebx,edi
c0000b2d:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b30:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b33:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b36:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b39:	74 40                	je     c0000b7b <malloc_consolidate+0xb5>
c0000b3b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b3e:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b41:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b45:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b48:	83 e7 01             	and    edi,0x1
c0000b4b:	75 0e                	jne    c0000b5b <malloc_consolidate+0x95>
c0000b4d:	01 d9                	add    ecx,ebx
c0000b4f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b52:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b55:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b58:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b5b:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b5e:	89 ce                	mov    esi,ecx
c0000b60:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b63:	83 ce 01             	or     esi,0x1
c0000b66:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b69:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b6c:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b6f:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b73:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b76:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b79:	eb 0c                	jmp    c0000b87 <malloc_consolidate+0xc1>
c0000b7b:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b7e:	83 c9 01             	or     ecx,0x1
c0000b81:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b84:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b87:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b8b:	85 d2                	test   edx,edx
c0000b8d:	0f 85 6f ff ff ff    	jne    c0000b02 <malloc_consolidate+0x3c>
c0000b93:	83 c5 04             	add    ebp,0x4
c0000b96:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b9a:	0f 85 50 ff ff ff    	jne    c0000af0 <malloc_consolidate+0x2a>
c0000ba0:	83 c4 10             	add    esp,0x10
c0000ba3:	5b                   	pop    ebx
c0000ba4:	5e                   	pop    esi
c0000ba5:	5f                   	pop    edi
c0000ba6:	5d                   	pop    ebp
c0000ba7:	c3                   	ret    
c0000ba8:	e9 b8 fe ff ff       	jmp    c0000a65 <malloc_init_state>

c0000bad <dlfree>:
c0000bad:	57                   	push   edi
c0000bae:	56                   	push   esi
c0000baf:	53                   	push   ebx
c0000bb0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000bb4:	85 db                	test   ebx,ebx
c0000bb6:	0f 84 e2 00 00 00    	je     c0000c9e <dlfree+0xf1>
c0000bbc:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bbf:	8b 0d 00 a0 02 c0    	mov    ecx,DWORD PTR ds:0xc002a000
c0000bc5:	89 f0                	mov    eax,esi
c0000bc7:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bca:	83 e0 fc             	and    eax,0xfffffffc
c0000bcd:	39 c1                	cmp    ecx,eax
c0000bcf:	72 24                	jb     c0000bf5 <dlfree+0x48>
c0000bd1:	83 c9 03             	or     ecx,0x3
c0000bd4:	c1 e8 03             	shr    eax,0x3
c0000bd7:	89 0d 00 a0 02 c0    	mov    DWORD PTR ds:0xc002a000,ecx
c0000bdd:	83 e8 02             	sub    eax,0x2
c0000be0:	8b 0c 85 04 a0 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5ffc]
c0000be7:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000be9:	89 14 85 04 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ffc],edx
c0000bf0:	e9 a9 00 00 00       	jmp    c0000c9e <dlfree+0xf1>
c0000bf5:	83 e6 02             	and    esi,0x2
c0000bf8:	0f 85 a0 00 00 00    	jne    c0000c9e <dlfree+0xf1>
c0000bfe:	83 c9 01             	or     ecx,0x1
c0000c01:	8d 34 02             	lea    esi,[edx+eax*1]
c0000c04:	89 0d 00 a0 02 c0    	mov    DWORD PTR ds:0xc002a000,ecx
c0000c0a:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c0d:	83 e1 fc             	and    ecx,0xfffffffc
c0000c10:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c14:	75 13                	jne    c0000c29 <dlfree+0x7c>
c0000c16:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c19:	29 da                	sub    edx,ebx
c0000c1b:	01 d8                	add    eax,ebx
c0000c1d:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c20:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c23:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c26:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c29:	39 35 2c a0 02 c0    	cmp    DWORD PTR ds:0xc002a02c,esi
c0000c2f:	74 40                	je     c0000c71 <dlfree+0xc4>
c0000c31:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c35:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c38:	80 e3 01             	and    bl,0x1
c0000c3b:	75 0e                	jne    c0000c4b <dlfree+0x9e>
c0000c3d:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c40:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c43:	01 c8                	add    eax,ecx
c0000c45:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c48:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c4b:	8b 0d 3c a0 02 c0    	mov    ecx,DWORD PTR ds:0xc002a03c
c0000c51:	c7 42 0c 34 a0 02 c0 	mov    DWORD PTR [edx+0xc],0xc002a034
c0000c58:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c5b:	89 15 3c a0 02 c0    	mov    DWORD PTR ds:0xc002a03c,edx
c0000c61:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c64:	89 c1                	mov    ecx,eax
c0000c66:	83 c9 01             	or     ecx,0x1
c0000c69:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c6c:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c6f:	eb 10                	jmp    c0000c81 <dlfree+0xd4>
c0000c71:	01 c8                	add    eax,ecx
c0000c73:	89 c1                	mov    ecx,eax
c0000c75:	83 c9 01             	or     ecx,0x1
c0000c78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c7b:	89 15 2c a0 02 c0    	mov    DWORD PTR ds:0xc002a02c,edx
c0000c81:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c86:	76 16                	jbe    c0000c9e <dlfree+0xf1>
c0000c88:	f6 05 00 a0 02 c0 02 	test   BYTE PTR ds:0xc002a000,0x2
c0000c8f:	74 0d                	je     c0000c9e <dlfree+0xf1>
c0000c91:	5b                   	pop    ebx
c0000c92:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0000c97:	5e                   	pop    esi
c0000c98:	5f                   	pop    edi
c0000c99:	e9 28 fe ff ff       	jmp    c0000ac6 <malloc_consolidate>
c0000c9e:	5b                   	pop    ebx
c0000c9f:	5e                   	pop    esi
c0000ca0:	5f                   	pop    edi
c0000ca1:	c3                   	ret    

c0000ca2 <sYSMALLOc>:
c0000ca2:	55                   	push   ebp
c0000ca3:	57                   	push   edi
c0000ca4:	56                   	push   esi
c0000ca5:	53                   	push   ebx
c0000ca6:	89 d3                	mov    ebx,edx
c0000ca8:	83 ec 2c             	sub    esp,0x2c
c0000cab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000caf:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000cb5:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000cb8:	8d 42 ff             	lea    eax,[edx-0x1]
c0000cbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000cbf:	74 1f                	je     c0000ce0 <sYSMALLOc+0x3e>
c0000cc1:	89 d8                	mov    eax,ebx
c0000cc3:	e8 fe fd ff ff       	call   c0000ac6 <malloc_consolidate>
c0000cc8:	83 ec 0c             	sub    esp,0xc
c0000ccb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ccf:	83 e8 07             	sub    eax,0x7
c0000cd2:	50                   	push   eax
c0000cd3:	e8 30 02 00 00       	call   c0000f08 <dlmalloc>
c0000cd8:	83 c4 10             	add    esp,0x10
c0000cdb:	e9 20 02 00 00       	jmp    c0000f00 <sYSMALLOc+0x25e>
c0000ce0:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ce3:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ce9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000cec:	83 e0 fc             	and    eax,0xfffffffc
c0000cef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000cf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cf7:	83 c0 10             	add    eax,0x10
c0000cfa:	01 c1                	add    ecx,eax
c0000cfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000d00:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000d07:	74 04                	je     c0000d0d <sYSMALLOc+0x6b>
c0000d09:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000d0d:	f7 da                	neg    edx
c0000d0f:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000d13:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000d17:	21 d1                	and    ecx,edx
c0000d19:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000d1d:	7f 07                	jg     c0000d26 <sYSMALLOc+0x84>
c0000d1f:	31 c0                	xor    eax,eax
c0000d21:	e9 da 01 00 00       	jmp    c0000f00 <sYSMALLOc+0x25e>
c0000d26:	83 ec 0c             	sub    esp,0xc
c0000d29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d2d:	e8 61 e2 00 00       	call   c000ef93 <sbrk>
c0000d32:	83 c4 10             	add    esp,0x10
c0000d35:	89 c6                	mov    esi,eax
c0000d37:	83 f8 ff             	cmp    eax,0xffffffff
c0000d3a:	74 e3                	je     c0000d1f <sYSMALLOc+0x7d>
c0000d3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d40:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d44:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d47:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d4d:	39 f1                	cmp    ecx,esi
c0000d4f:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d55:	75 13                	jne    c0000d6a <sYSMALLOc+0xc8>
c0000d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d5b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d5f:	83 c8 01             	or     eax,0x1
c0000d62:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d65:	e9 3e 01 00 00       	jmp    c0000ea8 <sYSMALLOc+0x206>
c0000d6a:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d70:	88 d0                	mov    al,dl
c0000d72:	83 e0 01             	and    eax,0x1
c0000d75:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d7a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d7e:	0f 95 c0             	setne  al
c0000d81:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d85:	39 f1                	cmp    ecx,esi
c0000d87:	76 12                	jbe    c0000d9b <sYSMALLOc+0xf9>
c0000d89:	84 c0                	test   al,al
c0000d8b:	74 0e                	je     c0000d9b <sYSMALLOc+0xf9>
c0000d8d:	83 e2 fe             	and    edx,0xfffffffe
c0000d90:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d96:	e9 83 00 00 00       	jmp    c0000e1e <sYSMALLOc+0x17c>
c0000d9b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000da0:	74 7c                	je     c0000e1e <sYSMALLOc+0x17c>
c0000da2:	84 c0                	test   al,al
c0000da4:	74 0c                	je     c0000db2 <sYSMALLOc+0x110>
c0000da6:	89 f0                	mov    eax,esi
c0000da8:	29 c8                	sub    eax,ecx
c0000daa:	01 e8                	add    eax,ebp
c0000dac:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000db2:	89 f2                	mov    edx,esi
c0000db4:	83 e2 07             	and    edx,0x7
c0000db7:	74 0c                	je     c0000dc5 <sYSMALLOc+0x123>
c0000db9:	b8 08 00 00 00       	mov    eax,0x8
c0000dbe:	29 d0                	sub    eax,edx
c0000dc0:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000dc3:	eb 04                	jmp    c0000dc9 <sYSMALLOc+0x127>
c0000dc5:	89 f5                	mov    ebp,esi
c0000dc7:	31 c0                	xor    eax,eax
c0000dc9:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000dcd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000dd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dd5:	01 c1                	add    ecx,eax
c0000dd7:	83 ec 0c             	sub    esp,0xc
c0000dda:	01 f1                	add    ecx,esi
c0000ddc:	01 ca                	add    edx,ecx
c0000dde:	29 c8                	sub    eax,ecx
c0000de0:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000de4:	01 c2                	add    edx,eax
c0000de6:	52                   	push   edx
c0000de7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000deb:	e8 a3 e1 00 00       	call   c000ef93 <sbrk>
c0000df0:	83 c4 10             	add    esp,0x10
c0000df3:	83 f8 ff             	cmp    eax,0xffffffff
c0000df6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000dfa:	75 0f                	jne    c0000e0b <sYSMALLOc+0x169>
c0000dfc:	83 ec 0c             	sub    esp,0xc
c0000dff:	6a 00                	push   0x0
c0000e01:	e8 8d e1 00 00       	call   c000ef93 <sbrk>
c0000e06:	83 c4 10             	add    esp,0x10
c0000e09:	eb 30                	jmp    c0000e3b <sYSMALLOc+0x199>
c0000e0b:	39 c6                	cmp    esi,eax
c0000e0d:	76 33                	jbe    c0000e42 <sYSMALLOc+0x1a0>
c0000e0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e13:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e1a:	01 f0                	add    eax,esi
c0000e1c:	eb 1d                	jmp    c0000e3b <sYSMALLOc+0x199>
c0000e1e:	83 ec 0c             	sub    esp,0xc
c0000e21:	89 f5                	mov    ebp,esi
c0000e23:	6a 00                	push   0x0
c0000e25:	e8 69 e1 00 00       	call   c000ef93 <sbrk>
c0000e2a:	89 c2                	mov    edx,eax
c0000e2c:	29 f2                	sub    edx,esi
c0000e2e:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e32:	83 c4 10             	add    esp,0x10
c0000e35:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e3b:	31 d2                	xor    edx,edx
c0000e3d:	83 f8 ff             	cmp    eax,0xffffffff
c0000e40:	74 66                	je     c0000ea8 <sYSMALLOc+0x206>
c0000e42:	29 e8                	sub    eax,ebp
c0000e44:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e47:	01 d0                	add    eax,edx
c0000e49:	83 c8 01             	or     eax,0x1
c0000e4c:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e4f:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e55:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e5a:	74 4c                	je     c0000ea8 <sYSMALLOc+0x206>
c0000e5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e60:	83 e8 0c             	sub    eax,0xc
c0000e63:	83 e0 f8             	and    eax,0xfffffff8
c0000e66:	89 c2                	mov    edx,eax
c0000e68:	83 ca 01             	or     edx,0x1
c0000e6b:	83 f8 0f             	cmp    eax,0xf
c0000e6e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e71:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e79:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e81:	76 25                	jbe    c0000ea8 <sYSMALLOc+0x206>
c0000e83:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e89:	83 ec 0c             	sub    esp,0xc
c0000e8c:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e96:	83 c7 08             	add    edi,0x8
c0000e99:	57                   	push   edi
c0000e9a:	e8 0e fd ff ff       	call   c0000bad <dlfree>
c0000e9f:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000ea5:	83 c4 10             	add    esp,0x10
c0000ea8:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000eae:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000eb4:	73 06                	jae    c0000ebc <sYSMALLOc+0x21a>
c0000eb6:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000ebc:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000ec2:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000ec8:	73 06                	jae    c0000ed0 <sYSMALLOc+0x22e>
c0000eca:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ed0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ed3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ed6:	83 e2 fc             	and    edx,0xfffffffc
c0000ed9:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000edd:	0f 82 3c fe ff ff    	jb     c0000d1f <sYSMALLOc+0x7d>
c0000ee3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ee7:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000eea:	29 fa                	sub    edx,edi
c0000eec:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000eef:	83 ca 01             	or     edx,0x1
c0000ef2:	89 fb                	mov    ebx,edi
c0000ef4:	83 c0 08             	add    eax,0x8
c0000ef7:	83 cb 01             	or     ebx,0x1
c0000efa:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000efd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000f00:	83 c4 2c             	add    esp,0x2c
c0000f03:	5b                   	pop    ebx
c0000f04:	5e                   	pop    esi
c0000f05:	5f                   	pop    edi
c0000f06:	5d                   	pop    ebp
c0000f07:	c3                   	ret    

c0000f08 <dlmalloc>:
c0000f08:	55                   	push   ebp
c0000f09:	57                   	push   edi
c0000f0a:	56                   	push   esi
c0000f0b:	53                   	push   ebx
c0000f0c:	83 ec 1c             	sub    esp,0x1c
c0000f0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f13:	83 f8 df             	cmp    eax,0xffffffdf
c0000f16:	0f 87 70 03 00 00    	ja     c000128c <dlmalloc+0x384>
c0000f1c:	83 c0 0b             	add    eax,0xb
c0000f1f:	be 10 00 00 00       	mov    esi,0x10
c0000f24:	83 f8 0f             	cmp    eax,0xf
c0000f27:	76 05                	jbe    c0000f2e <dlmalloc+0x26>
c0000f29:	83 e0 f8             	and    eax,0xfffffff8
c0000f2c:	89 c6                	mov    esi,eax
c0000f2e:	8b 3d 00 a0 02 c0    	mov    edi,DWORD PTR ds:0xc002a000
c0000f34:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f3a:	75 17                	jne    c0000f53 <dlmalloc+0x4b>
c0000f3c:	85 ff                	test   edi,edi
c0000f3e:	0f 85 05 03 00 00    	jne    c0001249 <dlmalloc+0x341>
c0000f44:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0000f49:	e8 78 fb ff ff       	call   c0000ac6 <malloc_consolidate>
c0000f4e:	e9 f6 02 00 00       	jmp    c0001249 <dlmalloc+0x341>
c0000f53:	39 f7                	cmp    edi,esi
c0000f55:	72 1f                	jb     c0000f76 <dlmalloc+0x6e>
c0000f57:	89 f2                	mov    edx,esi
c0000f59:	c1 ea 03             	shr    edx,0x3
c0000f5c:	83 ea 02             	sub    edx,0x2
c0000f5f:	8b 04 95 04 a0 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5ffc]
c0000f66:	85 c0                	test   eax,eax
c0000f68:	74 0c                	je     c0000f76 <dlmalloc+0x6e>
c0000f6a:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f6d:	89 0c 95 04 a0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5ffc],ecx
c0000f74:	eb 30                	jmp    c0000fa6 <dlmalloc+0x9e>
c0000f76:	89 f0                	mov    eax,esi
c0000f78:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f7e:	77 2e                	ja     c0000fae <dlmalloc+0xa6>
c0000f80:	c1 e8 03             	shr    eax,0x3
c0000f83:	8d 14 c5 34 a0 02 c0 	lea    edx,[eax*8-0x3ffd5fcc]
c0000f8a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f8e:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f91:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f94:	39 c3                	cmp    ebx,eax
c0000f96:	74 2e                	je     c0000fc6 <dlmalloc+0xbe>
c0000f98:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f9b:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000fa0:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000fa3:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000fa6:	83 c0 08             	add    eax,0x8
c0000fa9:	e9 e0 02 00 00       	jmp    c000128e <dlmalloc+0x386>
c0000fae:	e8 8f fa ff ff       	call   c0000a42 <largebin_index>
c0000fb3:	83 e7 02             	and    edi,0x2
c0000fb6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fba:	74 0a                	je     c0000fc6 <dlmalloc+0xbe>
c0000fbc:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0000fc1:	e8 00 fb ff ff       	call   c0000ac6 <malloc_consolidate>
c0000fc6:	8d 46 10             	lea    eax,[esi+0x10]
c0000fc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fcd:	8b 1d 40 a0 02 c0    	mov    ebx,DWORD PTR ds:0xc002a040
c0000fd3:	81 fb 34 a0 02 c0    	cmp    ebx,0xc002a034
c0000fd9:	0f 84 13 01 00 00    	je     c00010f2 <dlmalloc+0x1ea>
c0000fdf:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fe2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fe5:	83 e7 fc             	and    edi,0xfffffffc
c0000fe8:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fee:	77 4c                	ja     c000103c <dlmalloc+0x134>
c0000ff0:	3d 34 a0 02 c0       	cmp    eax,0xc002a034
c0000ff5:	75 45                	jne    c000103c <dlmalloc+0x134>
c0000ff7:	39 1d 30 a0 02 c0    	cmp    DWORD PTR ds:0xc002a030,ebx
c0000ffd:	75 3d                	jne    c000103c <dlmalloc+0x134>
c0000fff:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001003:	73 37                	jae    c000103c <dlmalloc+0x134>
c0001005:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001008:	89 fa                	mov    edx,edi
c000100a:	a3 3c a0 02 c0       	mov    ds:0xc002a03c,eax
c000100f:	a3 40 a0 02 c0       	mov    ds:0xc002a040,eax
c0001014:	a3 30 a0 02 c0       	mov    ds:0xc002a030,eax
c0001019:	29 f2                	sub    edx,esi
c000101b:	c7 40 08 34 a0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a034
c0001022:	c7 40 0c 34 a0 02 c0 	mov    DWORD PTR [eax+0xc],0xc002a034
c0001029:	83 ce 01             	or     esi,0x1
c000102c:	89 d1                	mov    ecx,edx
c000102e:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001031:	83 c9 01             	or     ecx,0x1
c0001034:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001037:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000103a:	eb 15                	jmp    c0001051 <dlmalloc+0x149>
c000103c:	a3 40 a0 02 c0       	mov    ds:0xc002a040,eax
c0001041:	39 fe                	cmp    esi,edi
c0001043:	c7 40 08 34 a0 02 c0 	mov    DWORD PTR [eax+0x8],0xc002a034
c000104a:	75 0d                	jne    c0001059 <dlmalloc+0x151>
c000104c:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001051:	8d 43 08             	lea    eax,[ebx+0x8]
c0001054:	e9 35 02 00 00       	jmp    c000128e <dlmalloc+0x386>
c0001059:	89 f8                	mov    eax,edi
c000105b:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001061:	77 19                	ja     c000107c <dlmalloc+0x174>
c0001063:	c1 e8 03             	shr    eax,0x3
c0001066:	8d 14 00             	lea    edx,[eax+eax*1]
c0001069:	83 c2 0d             	add    edx,0xd
c000106c:	8d 2c 95 f8 9f 02 c0 	lea    ebp,[edx*4-0x3ffd6008]
c0001073:	8b 14 95 00 a0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6000]
c000107a:	eb 46                	jmp    c00010c2 <dlmalloc+0x1ba>
c000107c:	e8 c1 f9 ff ff       	call   c0000a42 <largebin_index>
c0001081:	8d 14 00             	lea    edx,[eax+eax*1]
c0001084:	83 c2 0d             	add    edx,0xd
c0001087:	8d 0c 95 00 a0 02 c0 	lea    ecx,[edx*4-0x3ffd6000]
c000108e:	8b 14 95 00 a0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6000]
c0001095:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001098:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000109c:	89 d5                	mov    ebp,edx
c000109e:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00010a2:	74 1e                	je     c00010c2 <dlmalloc+0x1ba>
c00010a4:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00010a7:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010aa:	77 12                	ja     c00010be <dlmalloc+0x1b6>
c00010ac:	83 cf 01             	or     edi,0x1
c00010af:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010b2:	76 05                	jbe    c00010b9 <dlmalloc+0x1b1>
c00010b4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010b7:	eb f6                	jmp    c00010af <dlmalloc+0x1a7>
c00010b9:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010bc:	eb 04                	jmp    c00010c2 <dlmalloc+0x1ba>
c00010be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010c2:	89 c7                	mov    edi,eax
c00010c4:	88 c1                	mov    cl,al
c00010c6:	c1 ff 05             	sar    edi,0x5
c00010c9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010cd:	bf 01 00 00 00       	mov    edi,0x1
c00010d2:	d3 e7                	shl    edi,cl
c00010d4:	89 f8                	mov    eax,edi
c00010d6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010da:	09 04 bd 34 a3 02 c0 	or     DWORD PTR [edi*4-0x3ffd5ccc],eax
c00010e1:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010e4:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010e7:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010ea:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010ed:	e9 db fe ff ff       	jmp    c0000fcd <dlmalloc+0xc5>
c00010f2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010f8:	76 78                	jbe    c0001172 <dlmalloc+0x26a>
c00010fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010fe:	8d 04 c5 34 a0 02 c0 	lea    eax,[eax*8-0x3ffd5fcc]
c0001105:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001108:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000110b:	39 ca                	cmp    edx,ecx
c000110d:	74 63                	je     c0001172 <dlmalloc+0x26a>
c000110f:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001112:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001115:	83 e3 fc             	and    ebx,0xfffffffc
c0001118:	39 de                	cmp    esi,ebx
c000111a:	77 52                	ja     c000116e <dlmalloc+0x266>
c000111c:	89 df                	mov    edi,ebx
c000111e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001121:	29 f7                	sub    edi,esi
c0001123:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001126:	01 d3                	add    ebx,edx
c0001128:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000112b:	83 ff 0f             	cmp    edi,0xf
c000112e:	8d 42 08             	lea    eax,[edx+0x8]
c0001131:	77 09                	ja     c000113c <dlmalloc+0x234>
c0001133:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001137:	e9 52 01 00 00       	jmp    c000128e <dlmalloc+0x386>
c000113c:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000113f:	83 ce 01             	or     esi,0x1
c0001142:	89 0d 3c a0 02 c0    	mov    DWORD PTR ds:0xc002a03c,ecx
c0001148:	89 0d 40 a0 02 c0    	mov    DWORD PTR ds:0xc002a040,ecx
c000114e:	c7 41 08 34 a0 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002a034
c0001155:	c7 41 0c 34 a0 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002a034
c000115c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000115f:	89 fa                	mov    edx,edi
c0001161:	83 ca 01             	or     edx,0x1
c0001164:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001167:	89 3b                	mov    DWORD PTR [ebx],edi
c0001169:	e9 20 01 00 00       	jmp    c000128e <dlmalloc+0x386>
c000116e:	89 c2                	mov    edx,eax
c0001170:	eb 99                	jmp    c000110b <dlmalloc+0x203>
c0001172:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001176:	b8 01 00 00 00       	mov    eax,0x1
c000117b:	41                   	inc    ecx
c000117c:	89 cb                	mov    ebx,ecx
c000117e:	8d 14 cd 2c a0 02 c0 	lea    edx,[ecx*8-0x3ffd5fd4]
c0001185:	c1 eb 05             	shr    ebx,0x5
c0001188:	d3 e0                	shl    eax,cl
c000118a:	8b 3c 9d 34 a3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd5ccc]
c0001191:	39 f8                	cmp    eax,edi
c0001193:	77 04                	ja     c0001199 <dlmalloc+0x291>
c0001195:	85 c0                	test   eax,eax
c0001197:	75 26                	jne    c00011bf <dlmalloc+0x2b7>
c0001199:	43                   	inc    ebx
c000119a:	83 fb 02             	cmp    ebx,0x2
c000119d:	0f 87 a6 00 00 00    	ja     c0001249 <dlmalloc+0x341>
c00011a3:	8b 3c 9d 34 a3 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd5ccc]
c00011aa:	85 ff                	test   edi,edi
c00011ac:	74 eb                	je     c0001199 <dlmalloc+0x291>
c00011ae:	89 d8                	mov    eax,ebx
c00011b0:	c1 e0 06             	shl    eax,0x6
c00011b3:	8d 14 85 2c a0 02 c0 	lea    edx,[eax*4-0x3ffd5fd4]
c00011ba:	b8 01 00 00 00       	mov    eax,0x1
c00011bf:	85 f8                	test   eax,edi
c00011c1:	75 07                	jne    c00011ca <dlmalloc+0x2c2>
c00011c3:	83 c2 08             	add    edx,0x8
c00011c6:	01 c0                	add    eax,eax
c00011c8:	eb f5                	jmp    c00011bf <dlmalloc+0x2b7>
c00011ca:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011cd:	39 ca                	cmp    edx,ecx
c00011cf:	75 14                	jne    c00011e5 <dlmalloc+0x2dd>
c00011d1:	89 c1                	mov    ecx,eax
c00011d3:	83 c2 08             	add    edx,0x8
c00011d6:	f7 d1                	not    ecx
c00011d8:	01 c0                	add    eax,eax
c00011da:	21 cf                	and    edi,ecx
c00011dc:	89 3c 9d 34 a3 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd5ccc],edi
c00011e3:	eb ac                	jmp    c0001191 <dlmalloc+0x289>
c00011e5:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011e8:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011eb:	83 e0 fc             	and    eax,0xfffffffc
c00011ee:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011f1:	89 c3                	mov    ebx,eax
c00011f3:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011f6:	29 f3                	sub    ebx,esi
c00011f8:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011fb:	83 fb 0f             	cmp    ebx,0xf
c00011fe:	8d 41 08             	lea    eax,[ecx+0x8]
c0001201:	77 09                	ja     c000120c <dlmalloc+0x304>
c0001203:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001207:	e9 82 00 00 00       	jmp    c000128e <dlmalloc+0x386>
c000120c:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000120f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001215:	89 3d 3c a0 02 c0    	mov    DWORD PTR ds:0xc002a03c,edi
c000121b:	89 3d 40 a0 02 c0    	mov    DWORD PTR ds:0xc002a040,edi
c0001221:	c7 47 08 34 a0 02 c0 	mov    DWORD PTR [edi+0x8],0xc002a034
c0001228:	c7 47 0c 34 a0 02 c0 	mov    DWORD PTR [edi+0xc],0xc002a034
c000122f:	77 06                	ja     c0001237 <dlmalloc+0x32f>
c0001231:	89 3d 30 a0 02 c0    	mov    DWORD PTR ds:0xc002a030,edi
c0001237:	83 ce 01             	or     esi,0x1
c000123a:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000123d:	89 d9                	mov    ecx,ebx
c000123f:	83 c9 01             	or     ecx,0x1
c0001242:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001245:	89 1a                	mov    DWORD PTR [edx],ebx
c0001247:	eb 45                	jmp    c000128e <dlmalloc+0x386>
c0001249:	a1 2c a0 02 c0       	mov    eax,ds:0xc002a02c
c000124e:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001251:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001254:	83 e2 fc             	and    edx,0xfffffffc
c0001257:	39 d1                	cmp    ecx,edx
c0001259:	77 1e                	ja     c0001279 <dlmalloc+0x371>
c000125b:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000125e:	89 f3                	mov    ebx,esi
c0001260:	89 0d 2c a0 02 c0    	mov    DWORD PTR ds:0xc002a02c,ecx
c0001266:	83 cb 01             	or     ebx,0x1
c0001269:	29 f2                	sub    edx,esi
c000126b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000126e:	83 ca 01             	or     edx,0x1
c0001271:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001274:	e9 2d fd ff ff       	jmp    c0000fa6 <dlmalloc+0x9e>
c0001279:	83 c4 1c             	add    esp,0x1c
c000127c:	89 f0                	mov    eax,esi
c000127e:	5b                   	pop    ebx
c000127f:	ba 00 a0 02 c0       	mov    edx,0xc002a000
c0001284:	5e                   	pop    esi
c0001285:	5f                   	pop    edi
c0001286:	5d                   	pop    ebp
c0001287:	e9 16 fa ff ff       	jmp    c0000ca2 <sYSMALLOc>
c000128c:	31 c0                	xor    eax,eax
c000128e:	83 c4 1c             	add    esp,0x1c
c0001291:	5b                   	pop    ebx
c0001292:	5e                   	pop    esi
c0001293:	5f                   	pop    edi
c0001294:	5d                   	pop    ebp
c0001295:	c3                   	ret    

c0001296 <iALLOc>:
c0001296:	55                   	push   ebp
c0001297:	89 c5                	mov    ebp,eax
c0001299:	57                   	push   edi
c000129a:	56                   	push   esi
c000129b:	53                   	push   ebx
c000129c:	83 ec 2c             	sub    esp,0x2c
c000129f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00012a3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012ab:	83 3d 00 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a000,0x0
c00012b2:	75 12                	jne    c00012c6 <iALLOc+0x30>
c00012b4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012b8:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c00012bd:	e8 04 f8 ff ff       	call   c0000ac6 <malloc_consolidate>
c00012c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012c6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012cb:	74 12                	je     c00012df <iALLOc+0x49>
c00012cd:	85 ed                	test   ebp,ebp
c00012cf:	0f 84 64 01 00 00    	je     c0001439 <iALLOc+0x1a3>
c00012d5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012dd:	eb 33                	jmp    c0001312 <iALLOc+0x7c>
c00012df:	85 ed                	test   ebp,ebp
c00012e1:	75 14                	jne    c00012f7 <iALLOc+0x61>
c00012e3:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012eb:	83 c4 2c             	add    esp,0x2c
c00012ee:	5b                   	pop    ebx
c00012ef:	5e                   	pop    esi
c00012f0:	5f                   	pop    edi
c00012f1:	5d                   	pop    ebp
c00012f2:	e9 11 fc ff ff       	jmp    c0000f08 <dlmalloc>
c00012f7:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012fe:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001306:	83 f8 0f             	cmp    eax,0xf
c0001309:	76 07                	jbe    c0001312 <iALLOc+0x7c>
c000130b:	83 e0 f8             	and    eax,0xfffffff8
c000130e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001312:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001317:	75 09                	jne    c0001322 <iALLOc+0x8c>
c0001319:	89 d0                	mov    eax,edx
c000131b:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000131e:	31 f6                	xor    esi,esi
c0001320:	eb 3b                	jmp    c000135d <iALLOc+0xc7>
c0001322:	8b 02                	mov    eax,DWORD PTR [edx]
c0001324:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000132c:	83 c0 0b             	add    eax,0xb
c000132f:	83 f8 0f             	cmp    eax,0xf
c0001332:	76 07                	jbe    c000133b <iALLOc+0xa5>
c0001334:	83 e0 f8             	and    eax,0xfffffff8
c0001337:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000133b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000133f:	0f af f5             	imul   esi,ebp
c0001342:	eb 25                	jmp    c0001369 <iALLOc+0xd3>
c0001344:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001346:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001349:	bb 10 00 00 00       	mov    ebx,0x10
c000134e:	83 f9 0f             	cmp    ecx,0xf
c0001351:	76 05                	jbe    c0001358 <iALLOc+0xc2>
c0001353:	83 e1 f8             	and    ecx,0xfffffff8
c0001356:	89 cb                	mov    ebx,ecx
c0001358:	01 de                	add    esi,ebx
c000135a:	83 c0 04             	add    eax,0x4
c000135d:	39 c7                	cmp    edi,eax
c000135f:	75 e3                	jne    c0001344 <iALLOc+0xae>
c0001361:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001369:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000136d:	8b 1d 54 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a354
c0001373:	83 ec 0c             	sub    esp,0xc
c0001376:	c7 05 54 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a354,0x0
c0001380:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001384:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001388:	50                   	push   eax
c0001389:	e8 7a fb ff ff       	call   c0000f08 <dlmalloc>
c000138e:	83 c4 10             	add    esp,0x10
c0001391:	89 1d 54 a3 02 c0    	mov    DWORD PTR ds:0xc002a354,ebx
c0001397:	85 c0                	test   eax,eax
c0001399:	0f 84 92 00 00 00    	je     c0001431 <iALLOc+0x19b>
c000139f:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00013a2:	8d 78 f8             	lea    edi,[eax-0x8]
c00013a5:	83 e3 fc             	and    ebx,0xfffffffc
c00013a8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013ac:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013b1:	74 1e                	je     c00013d1 <iALLOc+0x13b>
c00013b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013b7:	89 d9                	mov    ecx,ebx
c00013b9:	52                   	push   edx
c00013ba:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013be:	83 e9 04             	sub    ecx,0x4
c00013c1:	51                   	push   ecx
c00013c2:	6a 00                	push   0x0
c00013c4:	50                   	push   eax
c00013c5:	e8 02 f3 ff ff       	call   c00006cc <memset>
c00013ca:	83 c4 10             	add    esp,0x10
c00013cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013d1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d6:	75 14                	jne    c00013ec <iALLOc+0x156>
c00013d8:	8d 04 37             	lea    eax,[edi+esi*1]
c00013db:	29 f3                	sub    ebx,esi
c00013dd:	8d 48 08             	lea    ecx,[eax+0x8]
c00013e0:	83 cb 01             	or     ebx,0x1
c00013e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013e7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013ea:	89 f3                	mov    ebx,esi
c00013ec:	31 c0                	xor    eax,eax
c00013ee:	4d                   	dec    ebp
c00013ef:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013f2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013f6:	39 c5                	cmp    ebp,eax
c00013f8:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013fb:	74 2c                	je     c0001429 <iALLOc+0x193>
c00013fd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001401:	85 c9                	test   ecx,ecx
c0001403:	75 15                	jne    c000141a <iALLOc+0x184>
c0001405:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001408:	8d 71 0b             	lea    esi,[ecx+0xb]
c000140b:	b9 10 00 00 00       	mov    ecx,0x10
c0001410:	83 fe 0f             	cmp    esi,0xf
c0001413:	76 05                	jbe    c000141a <iALLOc+0x184>
c0001415:	83 e6 f8             	and    esi,0xfffffff8
c0001418:	89 f1                	mov    ecx,esi
c000141a:	89 ce                	mov    esi,ecx
c000141c:	29 cb                	sub    ebx,ecx
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	40                   	inc    eax
c0001422:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001425:	01 cf                	add    edi,ecx
c0001427:	eb c6                	jmp    c00013ef <iALLOc+0x159>
c0001429:	83 cb 01             	or     ebx,0x1
c000142c:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000142f:	eb 08                	jmp    c0001439 <iALLOc+0x1a3>
c0001431:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000143d:	83 c4 2c             	add    esp,0x2c
c0001440:	5b                   	pop    ebx
c0001441:	5e                   	pop    esi
c0001442:	5f                   	pop    edi
c0001443:	5d                   	pop    ebp
c0001444:	c3                   	ret    

c0001445 <dlrealloc>:
c0001445:	55                   	push   ebp
c0001446:	57                   	push   edi
c0001447:	56                   	push   esi
c0001448:	53                   	push   ebx
c0001449:	83 ec 1c             	sub    esp,0x1c
c000144c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001450:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001454:	85 db                	test   ebx,ebx
c0001456:	75 10                	jne    c0001468 <dlrealloc+0x23>
c0001458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000145c:	83 c4 1c             	add    esp,0x1c
c000145f:	5b                   	pop    ebx
c0001460:	5e                   	pop    esi
c0001461:	5f                   	pop    edi
c0001462:	5d                   	pop    ebp
c0001463:	e9 a0 fa ff ff       	jmp    c0000f08 <dlmalloc>
c0001468:	83 f8 df             	cmp    eax,0xffffffdf
c000146b:	76 07                	jbe    c0001474 <dlrealloc+0x2f>
c000146d:	31 db                	xor    ebx,ebx
c000146f:	e9 7c 01 00 00       	jmp    c00015f0 <dlrealloc+0x1ab>
c0001474:	83 c0 0b             	add    eax,0xb
c0001477:	bf 10 00 00 00       	mov    edi,0x10
c000147c:	83 f8 0f             	cmp    eax,0xf
c000147f:	76 05                	jbe    c0001486 <dlrealloc+0x41>
c0001481:	83 e0 f8             	and    eax,0xfffffff8
c0001484:	89 c7                	mov    edi,eax
c0001486:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001489:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000148c:	89 c6                	mov    esi,eax
c000148e:	83 e6 fc             	and    esi,0xfffffffc
c0001491:	a8 02                	test   al,0x2
c0001493:	75 d8                	jne    c000146d <dlrealloc+0x28>
c0001495:	39 f7                	cmp    edi,esi
c0001497:	0f 86 15 01 00 00    	jbe    c00015b2 <dlrealloc+0x16d>
c000149d:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00014a1:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00014a4:	39 15 2c a0 02 c0    	cmp    DWORD PTR ds:0xc002a02c,edx
c00014aa:	75 33                	jne    c00014df <dlrealloc+0x9a>
c00014ac:	83 e1 fc             	and    ecx,0xfffffffc
c00014af:	01 f1                	add    ecx,esi
c00014b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014b5:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014b8:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014bc:	77 49                	ja     c0001507 <dlrealloc+0xc2>
c00014be:	01 fd                	add    ebp,edi
c00014c0:	83 e0 01             	and    eax,0x1
c00014c3:	09 f8                	or     eax,edi
c00014c5:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014c8:	89 2d 2c a0 02 c0    	mov    DWORD PTR ds:0xc002a02c,ebp
c00014ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014d2:	29 f8                	sub    eax,edi
c00014d4:	83 c8 01             	or     eax,0x1
c00014d7:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014da:	e9 11 01 00 00       	jmp    c00015f0 <dlrealloc+0x1ab>
c00014df:	89 c8                	mov    eax,ecx
c00014e1:	83 e0 fe             	and    eax,0xfffffffe
c00014e4:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014e9:	75 1c                	jne    c0001507 <dlrealloc+0xc2>
c00014eb:	83 e1 fc             	and    ecx,0xfffffffc
c00014ee:	01 f1                	add    ecx,esi
c00014f0:	39 cf                	cmp    edi,ecx
c00014f2:	77 13                	ja     c0001507 <dlrealloc+0xc2>
c00014f4:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014f7:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014fa:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014fd:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001500:	89 ce                	mov    esi,ecx
c0001502:	e9 ab 00 00 00       	jmp    c00015b2 <dlrealloc+0x16d>
c0001507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000150b:	8d 47 f9             	lea    eax,[edi-0x7]
c000150e:	83 ec 0c             	sub    esp,0xc
c0001511:	50                   	push   eax
c0001512:	e8 f1 f9 ff ff       	call   c0000f08 <dlmalloc>
c0001517:	83 c4 10             	add    esp,0x10
c000151a:	89 c1                	mov    ecx,eax
c000151c:	85 c0                	test   eax,eax
c000151e:	0f 84 49 ff ff ff    	je     c000146d <dlrealloc+0x28>
c0001524:	8d 40 f8             	lea    eax,[eax-0x8]
c0001527:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000152b:	39 c2                	cmp    edx,eax
c000152d:	75 0a                	jne    c0001539 <dlrealloc+0xf4>
c000152f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001532:	83 e0 fc             	and    eax,0xfffffffc
c0001535:	01 c6                	add    esi,eax
c0001537:	eb 79                	jmp    c00015b2 <dlrealloc+0x16d>
c0001539:	83 ee 04             	sub    esi,0x4
c000153c:	83 fe 27             	cmp    esi,0x27
c000153f:	76 16                	jbe    c0001557 <dlrealloc+0x112>
c0001541:	50                   	push   eax
c0001542:	56                   	push   esi
c0001543:	53                   	push   ebx
c0001544:	51                   	push   ecx
c0001545:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001549:	e8 48 f1 ff ff       	call   c0000696 <memcpy>
c000154e:	83 c4 10             	add    esp,0x10
c0001551:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001555:	eb 43                	jmp    c000159a <dlrealloc+0x155>
c0001557:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001559:	83 fe 13             	cmp    esi,0x13
c000155c:	89 01                	mov    DWORD PTR [ecx],eax
c000155e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001561:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001564:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001567:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000156a:	76 2e                	jbe    c000159a <dlrealloc+0x155>
c000156c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000156f:	83 fe 1b             	cmp    esi,0x1b
c0001572:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001575:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001578:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000157b:	76 1d                	jbe    c000159a <dlrealloc+0x155>
c000157d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0001580:	83 fe 23             	cmp    esi,0x23
c0001583:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001586:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001589:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000158c:	76 0c                	jbe    c000159a <dlrealloc+0x155>
c000158e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001591:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001594:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001597:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c000159a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000159e:	83 ec 0c             	sub    esp,0xc
c00015a1:	53                   	push   ebx
c00015a2:	e8 06 f6 ff ff       	call   c0000bad <dlfree>
c00015a7:	83 c4 10             	add    esp,0x10
c00015aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015ae:	89 cb                	mov    ebx,ecx
c00015b0:	eb 3e                	jmp    c00015f0 <dlrealloc+0x1ab>
c00015b2:	89 f2                	mov    edx,esi
c00015b4:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015b7:	29 fa                	sub    edx,edi
c00015b9:	83 e1 01             	and    ecx,0x1
c00015bc:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015c0:	83 fa 0f             	cmp    edx,0xf
c00015c3:	77 0b                	ja     c00015d0 <dlrealloc+0x18b>
c00015c5:	09 ce                	or     esi,ecx
c00015c7:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015ca:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015ce:	eb 20                	jmp    c00015f0 <dlrealloc+0x1ab>
c00015d0:	01 fd                	add    ebp,edi
c00015d2:	83 ec 0c             	sub    esp,0xc
c00015d5:	09 cf                	or     edi,ecx
c00015d7:	83 ca 01             	or     edx,0x1
c00015da:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015dd:	83 c5 08             	add    ebp,0x8
c00015e0:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015e3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015e7:	55                   	push   ebp
c00015e8:	e8 c0 f5 ff ff       	call   c0000bad <dlfree>
c00015ed:	83 c4 10             	add    esp,0x10
c00015f0:	83 c4 1c             	add    esp,0x1c
c00015f3:	89 d8                	mov    eax,ebx
c00015f5:	5b                   	pop    ebx
c00015f6:	5e                   	pop    esi
c00015f7:	5f                   	pop    edi
c00015f8:	5d                   	pop    ebp
c00015f9:	c3                   	ret    

c00015fa <dlmemalign>:
c00015fa:	55                   	push   ebp
c00015fb:	57                   	push   edi
c00015fc:	56                   	push   esi
c00015fd:	53                   	push   ebx
c00015fe:	83 ec 0c             	sub    esp,0xc
c0001601:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001605:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001609:	83 fa 08             	cmp    edx,0x8
c000160c:	77 10                	ja     c000161e <dlmemalign+0x24>
c000160e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001612:	83 c4 0c             	add    esp,0xc
c0001615:	5b                   	pop    ebx
c0001616:	5e                   	pop    esi
c0001617:	5f                   	pop    edi
c0001618:	5d                   	pop    ebp
c0001619:	e9 ea f8 ff ff       	jmp    c0000f08 <dlmalloc>
c000161e:	bf 10 00 00 00       	mov    edi,0x10
c0001623:	83 fa 0f             	cmp    edx,0xf
c0001626:	76 13                	jbe    c000163b <dlmemalign+0x41>
c0001628:	8d 4a ff             	lea    ecx,[edx-0x1]
c000162b:	85 d1                	test   ecx,edx
c000162d:	75 04                	jne    c0001633 <dlmemalign+0x39>
c000162f:	89 d7                	mov    edi,edx
c0001631:	eb 08                	jmp    c000163b <dlmemalign+0x41>
c0001633:	39 d7                	cmp    edi,edx
c0001635:	73 04                	jae    c000163b <dlmemalign+0x41>
c0001637:	01 ff                	add    edi,edi
c0001639:	eb f8                	jmp    c0001633 <dlmemalign+0x39>
c000163b:	83 f8 df             	cmp    eax,0xffffffdf
c000163e:	76 07                	jbe    c0001647 <dlmemalign+0x4d>
c0001640:	31 c0                	xor    eax,eax
c0001642:	e9 ce 00 00 00       	jmp    c0001715 <dlmemalign+0x11b>
c0001647:	83 c0 0b             	add    eax,0xb
c000164a:	bd 10 00 00 00       	mov    ebp,0x10
c000164f:	83 f8 0f             	cmp    eax,0xf
c0001652:	76 05                	jbe    c0001659 <dlmemalign+0x5f>
c0001654:	83 e0 f8             	and    eax,0xfffffff8
c0001657:	89 c5                	mov    ebp,eax
c0001659:	83 ec 0c             	sub    esp,0xc
c000165c:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001660:	50                   	push   eax
c0001661:	e8 a2 f8 ff ff       	call   c0000f08 <dlmalloc>
c0001666:	83 c4 10             	add    esp,0x10
c0001669:	89 c1                	mov    ecx,eax
c000166b:	85 c0                	test   eax,eax
c000166d:	74 d1                	je     c0001640 <dlmemalign+0x46>
c000166f:	31 d2                	xor    edx,edx
c0001671:	8d 70 f8             	lea    esi,[eax-0x8]
c0001674:	f7 f7                	div    edi
c0001676:	85 d2                	test   edx,edx
c0001678:	74 62                	je     c00016dc <dlmemalign+0xe2>
c000167a:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000167e:	89 f8                	mov    eax,edi
c0001680:	f7 d8                	neg    eax
c0001682:	21 c3                	and    ebx,eax
c0001684:	83 eb 08             	sub    ebx,0x8
c0001687:	89 d8                	mov    eax,ebx
c0001689:	29 f0                	sub    eax,esi
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	77 02                	ja     c0001692 <dlmemalign+0x98>
c0001690:	01 fb                	add    ebx,edi
c0001692:	89 d8                	mov    eax,ebx
c0001694:	29 f0                	sub    eax,esi
c0001696:	89 c6                	mov    esi,eax
c0001698:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000169b:	89 c2                	mov    edx,eax
c000169d:	83 e2 fc             	and    edx,0xfffffffc
c00016a0:	29 f2                	sub    edx,esi
c00016a2:	a8 02                	test   al,0x2
c00016a4:	74 10                	je     c00016b6 <dlmemalign+0xbc>
c00016a6:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016a9:	83 ca 02             	or     edx,0x2
c00016ac:	8d 43 08             	lea    eax,[ebx+0x8]
c00016af:	89 33                	mov    DWORD PTR [ebx],esi
c00016b1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016b4:	eb 5f                	jmp    c0001715 <dlmemalign+0x11b>
c00016b6:	83 ec 0c             	sub    esp,0xc
c00016b9:	89 d0                	mov    eax,edx
c00016bb:	83 c8 01             	or     eax,0x1
c00016be:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016c1:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016c6:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016c9:	83 e0 01             	and    eax,0x1
c00016cc:	09 f0                	or     eax,esi
c00016ce:	89 de                	mov    esi,ebx
c00016d0:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016d3:	51                   	push   ecx
c00016d4:	e8 d4 f4 ff ff       	call   c0000bad <dlfree>
c00016d9:	83 c4 10             	add    esp,0x10
c00016dc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016df:	a8 02                	test   al,0x2
c00016e1:	75 2f                	jne    c0001712 <dlmemalign+0x118>
c00016e3:	83 e0 fc             	and    eax,0xfffffffc
c00016e6:	8d 55 10             	lea    edx,[ebp+0x10]
c00016e9:	39 c2                	cmp    edx,eax
c00016eb:	73 25                	jae    c0001712 <dlmemalign+0x118>
c00016ed:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016f0:	83 ec 0c             	sub    esp,0xc
c00016f3:	29 e8                	sub    eax,ebp
c00016f5:	83 c2 08             	add    edx,0x8
c00016f8:	83 c8 01             	or     eax,0x1
c00016fb:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016fe:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001701:	83 e0 01             	and    eax,0x1
c0001704:	09 c5                	or     ebp,eax
c0001706:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001709:	52                   	push   edx
c000170a:	e8 9e f4 ff ff       	call   c0000bad <dlfree>
c000170f:	83 c4 10             	add    esp,0x10
c0001712:	8d 46 08             	lea    eax,[esi+0x8]
c0001715:	83 c4 0c             	add    esp,0xc
c0001718:	5b                   	pop    ebx
c0001719:	5e                   	pop    esi
c000171a:	5f                   	pop    edi
c000171b:	5d                   	pop    ebp
c000171c:	c3                   	ret    

c000171d <dlcalloc>:
c000171d:	53                   	push   ebx
c000171e:	83 ec 14             	sub    esp,0x14
c0001721:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001725:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000172a:	50                   	push   eax
c000172b:	e8 d8 f7 ff ff       	call   c0000f08 <dlmalloc>
c0001730:	83 c4 10             	add    esp,0x10
c0001733:	89 c3                	mov    ebx,eax
c0001735:	85 c0                	test   eax,eax
c0001737:	74 77                	je     c00017b0 <dlcalloc+0x93>
c0001739:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000173c:	89 d0                	mov    eax,edx
c000173e:	83 e0 fc             	and    eax,0xfffffffc
c0001741:	80 e2 02             	and    dl,0x2
c0001744:	75 5a                	jne    c00017a0 <dlcalloc+0x83>
c0001746:	83 e8 04             	sub    eax,0x4
c0001749:	83 f8 27             	cmp    eax,0x27
c000174c:	76 03                	jbe    c0001751 <dlcalloc+0x34>
c000174e:	51                   	push   ecx
c000174f:	eb 53                	jmp    c00017a4 <dlcalloc+0x87>
c0001751:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001757:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000175e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001765:	83 f8 13             	cmp    eax,0x13
c0001768:	76 46                	jbe    c00017b0 <dlcalloc+0x93>
c000176a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001771:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001778:	83 f8 1b             	cmp    eax,0x1b
c000177b:	76 33                	jbe    c00017b0 <dlcalloc+0x93>
c000177d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001784:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000178b:	83 f8 23             	cmp    eax,0x23
c000178e:	76 20                	jbe    c00017b0 <dlcalloc+0x93>
c0001790:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001797:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000179e:	eb 10                	jmp    c00017b0 <dlcalloc+0x93>
c00017a0:	83 e8 08             	sub    eax,0x8
c00017a3:	52                   	push   edx
c00017a4:	50                   	push   eax
c00017a5:	6a 00                	push   0x0
c00017a7:	53                   	push   ebx
c00017a8:	e8 1f ef ff ff       	call   c00006cc <memset>
c00017ad:	83 c4 10             	add    esp,0x10
c00017b0:	89 d8                	mov    eax,ebx
c00017b2:	83 c4 08             	add    esp,0x8
c00017b5:	5b                   	pop    ebx
c00017b6:	c3                   	ret    

c00017b7 <dlcfree>:
c00017b7:	e9 f1 f3 ff ff       	jmp    c0000bad <dlfree>

c00017bc <dlindependent_calloc>:
c00017bc:	83 ec 28             	sub    esp,0x28
c00017bf:	b9 03 00 00 00       	mov    ecx,0x3
c00017c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017cc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017d0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017d8:	e8 b9 fa ff ff       	call   c0001296 <iALLOc>
c00017dd:	83 c4 2c             	add    esp,0x2c
c00017e0:	c3                   	ret    

c00017e1 <dlindependent_comalloc>:
c00017e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017e9:	31 c9                	xor    ecx,ecx
c00017eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017ef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017f3:	e9 9e fa ff ff       	jmp    c0001296 <iALLOc>

c00017f8 <dlvalloc>:
c00017f8:	83 ec 0c             	sub    esp,0xc
c00017fb:	83 3d 00 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a000,0x0
c0001802:	75 0a                	jne    c000180e <dlvalloc+0x16>
c0001804:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0001809:	e8 b8 f2 ff ff       	call   c0000ac6 <malloc_consolidate>
c000180e:	50                   	push   eax
c000180f:	50                   	push   eax
c0001810:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001814:	ff 35 5c a3 02 c0    	push   DWORD PTR ds:0xc002a35c
c000181a:	e8 db fd ff ff       	call   c00015fa <dlmemalign>
c000181f:	83 c4 1c             	add    esp,0x1c
c0001822:	c3                   	ret    

c0001823 <dlpvalloc>:
c0001823:	83 ec 0c             	sub    esp,0xc
c0001826:	83 3d 00 a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a000,0x0
c000182d:	75 0a                	jne    c0001839 <dlpvalloc+0x16>
c000182f:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c0001834:	e8 8d f2 ff ff       	call   c0000ac6 <malloc_consolidate>
c0001839:	a1 5c a3 02 c0       	mov    eax,ds:0xc002a35c
c000183e:	89 c1                	mov    ecx,eax
c0001840:	52                   	push   edx
c0001841:	f7 d9                	neg    ecx
c0001843:	52                   	push   edx
c0001844:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001848:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000184c:	21 ca                	and    edx,ecx
c000184e:	52                   	push   edx
c000184f:	50                   	push   eax
c0001850:	e8 a5 fd ff ff       	call   c00015fa <dlmemalign>
c0001855:	83 c4 1c             	add    esp,0x1c
c0001858:	c3                   	ret    

c0001859 <dlmalloc_trim>:
c0001859:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c000185e:	e8 63 f2 ff ff       	call   c0000ac6 <malloc_consolidate>
c0001863:	31 c0                	xor    eax,eax
c0001865:	c3                   	ret    

c0001866 <dlmalloc_usable_size>:
c0001866:	53                   	push   ebx
c0001867:	31 c0                	xor    eax,eax
c0001869:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000186d:	85 c9                	test   ecx,ecx
c000186f:	74 24                	je     c0001895 <dlmalloc_usable_size+0x2f>
c0001871:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001874:	f6 c2 02             	test   dl,0x2
c0001877:	74 08                	je     c0001881 <dlmalloc_usable_size+0x1b>
c0001879:	83 e2 fc             	and    edx,0xfffffffc
c000187c:	8d 42 f8             	lea    eax,[edx-0x8]
c000187f:	eb 14                	jmp    c0001895 <dlmalloc_usable_size+0x2f>
c0001881:	89 d3                	mov    ebx,edx
c0001883:	31 c0                	xor    eax,eax
c0001885:	83 e3 fe             	and    ebx,0xfffffffe
c0001888:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000188d:	74 06                	je     c0001895 <dlmalloc_usable_size+0x2f>
c000188f:	83 e2 fc             	and    edx,0xfffffffc
c0001892:	8d 42 fc             	lea    eax,[edx-0x4]
c0001895:	5b                   	pop    ebx
c0001896:	c3                   	ret    

c0001897 <dlmallinfo>:
c0001897:	55                   	push   ebp
c0001898:	57                   	push   edi
c0001899:	56                   	push   esi
c000189a:	53                   	push   ebx
c000189b:	83 ec 08             	sub    esp,0x8
c000189e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00018a2:	83 3d 2c a0 02 c0 00 	cmp    DWORD PTR ds:0xc002a02c,0x0
c00018a9:	75 0a                	jne    c00018b5 <dlmallinfo+0x1e>
c00018ab:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c00018b0:	e8 11 f2 ff ff       	call   c0000ac6 <malloc_consolidate>
c00018b5:	a1 2c a0 02 c0       	mov    eax,ds:0xc002a02c
c00018ba:	31 ed                	xor    ebp,ebp
c00018bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018bf:	31 c9                	xor    ecx,ecx
c00018c1:	83 e0 fc             	and    eax,0xfffffffc
c00018c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018c8:	31 c0                	xor    eax,eax
c00018ca:	8b 14 85 04 a0 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5ffc]
c00018d1:	85 d2                	test   edx,edx
c00018d3:	74 0e                	je     c00018e3 <dlmallinfo+0x4c>
c00018d5:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018d8:	45                   	inc    ebp
c00018d9:	83 e6 fc             	and    esi,0xfffffffc
c00018dc:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018df:	01 f1                	add    ecx,esi
c00018e1:	eb ee                	jmp    c00018d1 <dlmallinfo+0x3a>
c00018e3:	40                   	inc    eax
c00018e4:	83 f8 0a             	cmp    eax,0xa
c00018e7:	75 e1                	jne    c00018ca <dlmallinfo+0x33>
c00018e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ed:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018f4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018f7:	b8 34 a0 02 c0       	mov    eax,0xc002a034
c00018fc:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018ff:	39 f0                	cmp    eax,esi
c0001901:	74 10                	je     c0001913 <dlmallinfo+0x7c>
c0001903:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001906:	ff 04 24             	inc    DWORD PTR [esp]
c0001909:	83 e7 fc             	and    edi,0xfffffffc
c000190c:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000190f:	01 fa                	add    edx,edi
c0001911:	eb ec                	jmp    c00018ff <dlmallinfo+0x68>
c0001913:	83 c0 08             	add    eax,0x8
c0001916:	3d 2c a3 02 c0       	cmp    eax,0xc002a32c
c000191b:	75 df                	jne    c00018fc <dlmallinfo+0x65>
c000191d:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001920:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001923:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001926:	a1 68 a3 02 c0       	mov    eax,ds:0xc002a368
c000192b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000192e:	89 03                	mov    DWORD PTR [ebx],eax
c0001930:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001933:	8b 35 50 a3 02 c0    	mov    esi,DWORD PTR ds:0xc002a350
c0001939:	29 d0                	sub    eax,edx
c000193b:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000193e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001941:	8b 35 64 a3 02 c0    	mov    esi,DWORD PTR ds:0xc002a364
c0001947:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000194b:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000194e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001951:	8b 35 74 a3 02 c0    	mov    esi,DWORD PTR ds:0xc002a374
c0001957:	89 d8                	mov    eax,ebx
c0001959:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000195c:	83 c4 08             	add    esp,0x8
c000195f:	5b                   	pop    ebx
c0001960:	5e                   	pop    esi
c0001961:	5f                   	pop    edi
c0001962:	5d                   	pop    ebp
c0001963:	c2 04 00             	ret    0x4

c0001966 <dlmalloc_stats>:
c0001966:	83 ec 30             	sub    esp,0x30
c0001969:	8d 44 24 08          	lea    eax,[esp+0x8]
c000196d:	50                   	push   eax
c000196e:	e8 24 ff ff ff       	call   c0001897 <dlmallinfo>
c0001973:	83 c4 30             	add    esp,0x30
c0001976:	c3                   	ret    

c0001977 <dlmallopt>:
c0001977:	56                   	push   esi
c0001978:	b8 00 a0 02 c0       	mov    eax,0xc002a000
c000197d:	53                   	push   ebx
c000197e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001982:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001986:	e8 3b f1 ff ff       	call   c0000ac6 <malloc_consolidate>
c000198b:	8d 46 04             	lea    eax,[esi+0x4]
c000198e:	83 f8 05             	cmp    eax,0x5
c0001991:	77 67                	ja     c00019fa <dlmallopt+0x83>
c0001993:	ff 24 85 c4 5c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda33c]
c000199a:	83 fb 50             	cmp    ebx,0x50
c000199d:	77 5b                	ja     c00019fa <dlmallopt+0x83>
c000199f:	ba 08 00 00 00       	mov    edx,0x8
c00019a4:	85 db                	test   ebx,ebx
c00019a6:	74 12                	je     c00019ba <dlmallopt+0x43>
c00019a8:	83 c3 0b             	add    ebx,0xb
c00019ab:	ba 10 00 00 00       	mov    edx,0x10
c00019b0:	83 fb 0f             	cmp    ebx,0xf
c00019b3:	76 05                	jbe    c00019ba <dlmallopt+0x43>
c00019b5:	89 da                	mov    edx,ebx
c00019b7:	83 e2 f8             	and    edx,0xfffffff8
c00019ba:	a1 00 a0 02 c0       	mov    eax,ds:0xc002a000
c00019bf:	83 e0 03             	and    eax,0x3
c00019c2:	09 d0                	or     eax,edx
c00019c4:	a3 00 a0 02 c0       	mov    ds:0xc002a000,eax
c00019c9:	eb 31                	jmp    c00019fc <dlmallopt+0x85>
c00019cb:	89 1d 44 a3 02 c0    	mov    DWORD PTR ds:0xc002a344,ebx
c00019d1:	eb 06                	jmp    c00019d9 <dlmallopt+0x62>
c00019d3:	89 1d 48 a3 02 c0    	mov    DWORD PTR ds:0xc002a348,ebx
c00019d9:	be 01 00 00 00       	mov    esi,0x1
c00019de:	eb 1c                	jmp    c00019fc <dlmallopt+0x85>
c00019e0:	89 1d 4c a3 02 c0    	mov    DWORD PTR ds:0xc002a34c,ebx
c00019e6:	eb f1                	jmp    c00019d9 <dlmallopt+0x62>
c00019e8:	31 f6                	xor    esi,esi
c00019ea:	85 db                	test   ebx,ebx
c00019ec:	75 0e                	jne    c00019fc <dlmallopt+0x85>
c00019ee:	c7 05 54 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a354,0x0
c00019f8:	eb df                	jmp    c00019d9 <dlmallopt+0x62>
c00019fa:	31 f6                	xor    esi,esi
c00019fc:	89 f0                	mov    eax,esi
c00019fe:	5b                   	pop    ebx
c00019ff:	5e                   	pop    esi
c0001a00:	c3                   	ret    

c0001a01 <disk_status>:
c0001a01:	31 c0                	xor    eax,eax
c0001a03:	c3                   	ret    

c0001a04 <disk_initialize>:
c0001a04:	31 c0                	xor    eax,eax
c0001a06:	c3                   	ret    

c0001a07 <disk_read>:
c0001a07:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a0c:	0f b6 04 85 80 b9 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4680]
c0001a14:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a18:	e9 6f cb 01 00       	jmp    c001e58c <fatWrapperReadDisk>

c0001a1d <disk_write>:
c0001a1d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a22:	0f b6 04 85 80 b9 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4680]
c0001a2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a2e:	e9 a0 cb 01 00       	jmp    c001e5d3 <fatWrapperWriteDisk>

c0001a33 <disk_ioctl>:
c0001a33:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a3c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a41:	0f b6 04 85 80 b9 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd4680]
c0001a49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a4d:	e9 c8 cb 01 00       	jmp    c001e61a <fatWrapperIoctl>

c0001a52 <ld_word>:
c0001a52:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a56:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a59:	c1 e2 08             	shl    edx,0x8
c0001a5c:	09 d0                	or     eax,edx
c0001a5e:	c3                   	ret    

c0001a5f <ld_dword>:
c0001a5f:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a63:	89 d1                	mov    ecx,edx
c0001a65:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a69:	c1 e1 08             	shl    ecx,0x8
c0001a6c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a6f:	09 ca                	or     edx,ecx
c0001a71:	c1 e2 08             	shl    edx,0x8
c0001a74:	09 d0                	or     eax,edx
c0001a76:	c3                   	ret    

c0001a77 <ld_qword>:
c0001a77:	57                   	push   edi
c0001a78:	56                   	push   esi
c0001a79:	53                   	push   ebx
c0001a7a:	31 db                	xor    ebx,ebx
c0001a7c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a7f:	89 df                	mov    edi,ebx
c0001a81:	89 ce                	mov    esi,ecx
c0001a83:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a87:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a8b:	c1 e6 08             	shl    esi,0x8
c0001a8e:	09 f2                	or     edx,esi
c0001a90:	89 d6                	mov    esi,edx
c0001a92:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a9a:	c1 e6 08             	shl    esi,0x8
c0001a9d:	09 f2                	or     edx,esi
c0001a9f:	89 d6                	mov    esi,edx
c0001aa1:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001aa5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aa9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001aac:	c1 e6 08             	shl    esi,0x8
c0001aaf:	89 fb                	mov    ebx,edi
c0001ab1:	09 f2                	or     edx,esi
c0001ab3:	89 d1                	mov    ecx,edx
c0001ab5:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ab9:	c1 e1 08             	shl    ecx,0x8
c0001abc:	89 da                	mov    edx,ebx
c0001abe:	09 c8                	or     eax,ecx
c0001ac0:	5b                   	pop    ebx
c0001ac1:	5e                   	pop    esi
c0001ac2:	5f                   	pop    edi
c0001ac3:	c3                   	ret    

c0001ac4 <st_word>:
c0001ac4:	66 89 10             	mov    WORD PTR [eax],dx
c0001ac7:	c3                   	ret    

c0001ac8 <st_dword>:
c0001ac8:	89 10                	mov    DWORD PTR [eax],edx
c0001aca:	c3                   	ret    

c0001acb <st_qword>:
c0001acb:	89 10                	mov    DWORD PTR [eax],edx
c0001acd:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ad0:	c3                   	ret    

c0001ad1 <mem_cpy>:
c0001ad1:	85 c9                	test   ecx,ecx
c0001ad3:	74 10                	je     c0001ae5 <mem_cpy+0x14>
c0001ad5:	57                   	push   edi
c0001ad6:	01 c1                	add    ecx,eax
c0001ad8:	56                   	push   esi
c0001ad9:	89 c7                	mov    edi,eax
c0001adb:	89 d6                	mov    esi,edx
c0001add:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ade:	39 f9                	cmp    ecx,edi
c0001ae0:	75 fb                	jne    c0001add <mem_cpy+0xc>
c0001ae2:	5e                   	pop    esi
c0001ae3:	5f                   	pop    edi
c0001ae4:	c3                   	ret    
c0001ae5:	c3                   	ret    

c0001ae6 <mem_set>:
c0001ae6:	01 c1                	add    ecx,eax
c0001ae8:	40                   	inc    eax
c0001ae9:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001aec:	39 c8                	cmp    eax,ecx
c0001aee:	75 f8                	jne    c0001ae8 <mem_set+0x2>
c0001af0:	c3                   	ret    

c0001af1 <mem_cmp>:
c0001af1:	57                   	push   edi
c0001af2:	56                   	push   esi
c0001af3:	89 c6                	mov    esi,eax
c0001af5:	53                   	push   ebx
c0001af6:	46                   	inc    esi
c0001af7:	42                   	inc    edx
c0001af8:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001afc:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001b00:	29 fb                	sub    ebx,edi
c0001b02:	89 cf                	mov    edi,ecx
c0001b04:	29 f7                	sub    edi,esi
c0001b06:	01 c7                	add    edi,eax
c0001b08:	74 04                	je     c0001b0e <mem_cmp+0x1d>
c0001b0a:	85 db                	test   ebx,ebx
c0001b0c:	74 e8                	je     c0001af6 <mem_cmp+0x5>
c0001b0e:	89 d8                	mov    eax,ebx
c0001b10:	5b                   	pop    ebx
c0001b11:	5e                   	pop    esi
c0001b12:	5f                   	pop    edi
c0001b13:	c3                   	ret    

c0001b14 <chk_chr>:
c0001b14:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b17:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b1a:	74 07                	je     c0001b23 <chk_chr+0xf>
c0001b1c:	39 d1                	cmp    ecx,edx
c0001b1e:	74 03                	je     c0001b23 <chk_chr+0xf>
c0001b20:	40                   	inc    eax
c0001b21:	eb f1                	jmp    c0001b14 <chk_chr>
c0001b23:	89 c8                	mov    eax,ecx
c0001b25:	c3                   	ret    

c0001b26 <dbc_1st>:
c0001b26:	31 c0                	xor    eax,eax
c0001b28:	c3                   	ret    

c0001b29 <dbc_2nd>:
c0001b29:	31 c0                	xor    eax,eax
c0001b2b:	c3                   	ret    

c0001b2c <tchar2uni>:
c0001b2c:	57                   	push   edi
c0001b2d:	89 c7                	mov    edi,eax
c0001b2f:	56                   	push   esi
c0001b30:	53                   	push   ebx
c0001b31:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b33:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b35:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b38:	84 c9                	test   cl,cl
c0001b3a:	78 0a                	js     c0001b46 <tchar2uni+0x1a>
c0001b3c:	0f b6 d1             	movzx  edx,cl
c0001b3f:	89 f3                	mov    ebx,esi
c0001b41:	e9 9f 00 00 00       	jmp    c0001be5 <tchar2uni+0xb9>
c0001b46:	88 ca                	mov    dl,cl
c0001b48:	83 e2 e0             	and    edx,0xffffffe0
c0001b4b:	80 fa c0             	cmp    dl,0xc0
c0001b4e:	75 0c                	jne    c0001b5c <tchar2uni+0x30>
c0001b50:	89 ca                	mov    edx,ecx
c0001b52:	b9 01 00 00 00       	mov    ecx,0x1
c0001b57:	83 e2 1f             	and    edx,0x1f
c0001b5a:	eb 2e                	jmp    c0001b8a <tchar2uni+0x5e>
c0001b5c:	88 ca                	mov    dl,cl
c0001b5e:	83 e2 f0             	and    edx,0xfffffff0
c0001b61:	80 fa e0             	cmp    dl,0xe0
c0001b64:	75 0c                	jne    c0001b72 <tchar2uni+0x46>
c0001b66:	89 ca                	mov    edx,ecx
c0001b68:	b9 02 00 00 00       	mov    ecx,0x2
c0001b6d:	83 e2 0f             	and    edx,0xf
c0001b70:	eb 18                	jmp    c0001b8a <tchar2uni+0x5e>
c0001b72:	88 ca                	mov    dl,cl
c0001b74:	83 e2 f8             	and    edx,0xfffffff8
c0001b77:	88 d0                	mov    al,dl
c0001b79:	83 ca ff             	or     edx,0xffffffff
c0001b7c:	3c f0                	cmp    al,0xf0
c0001b7e:	75 6c                	jne    c0001bec <tchar2uni+0xc0>
c0001b80:	89 ca                	mov    edx,ecx
c0001b82:	b9 03 00 00 00       	mov    ecx,0x3
c0001b87:	83 e2 07             	and    edx,0x7
c0001b8a:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b8e:	46                   	inc    esi
c0001b8f:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b92:	88 c8                	mov    al,cl
c0001b94:	83 e0 c0             	and    eax,0xffffffc0
c0001b97:	3c 80                	cmp    al,0x80
c0001b99:	75 4e                	jne    c0001be9 <tchar2uni+0xbd>
c0001b9b:	c1 e2 06             	shl    edx,0x6
c0001b9e:	83 e1 3f             	and    ecx,0x3f
c0001ba1:	09 ca                	or     edx,ecx
c0001ba3:	39 de                	cmp    esi,ebx
c0001ba5:	75 e7                	jne    c0001b8e <tchar2uni+0x62>
c0001ba7:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001baa:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001bb0:	77 37                	ja     c0001be9 <tchar2uni+0xbd>
c0001bb2:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001bb8:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bbe:	76 29                	jbe    c0001be9 <tchar2uni+0xbd>
c0001bc0:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bc6:	76 1d                	jbe    c0001be5 <tchar2uni+0xb9>
c0001bc8:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bce:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bd4:	c1 e1 06             	shl    ecx,0x6
c0001bd7:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bdd:	09 ca                	or     edx,ecx
c0001bdf:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001be5:	89 1f                	mov    DWORD PTR [edi],ebx
c0001be7:	eb 03                	jmp    c0001bec <tchar2uni+0xc0>
c0001be9:	83 ca ff             	or     edx,0xffffffff
c0001bec:	5b                   	pop    ebx
c0001bed:	89 d0                	mov    eax,edx
c0001bef:	5e                   	pop    esi
c0001bf0:	5f                   	pop    edi
c0001bf1:	c3                   	ret    

c0001bf2 <put_utf>:
c0001bf2:	53                   	push   ebx
c0001bf3:	83 f8 7f             	cmp    eax,0x7f
c0001bf6:	89 c3                	mov    ebx,eax
c0001bf8:	b0 00                	mov    al,0x0
c0001bfa:	77 11                	ja     c0001c0d <put_utf+0x1b>
c0001bfc:	85 c9                	test   ecx,ecx
c0001bfe:	0f 84 e5 00 00 00    	je     c0001ce9 <put_utf+0xf7>
c0001c04:	88 1a                	mov    BYTE PTR [edx],bl
c0001c06:	b0 01                	mov    al,0x1
c0001c08:	e9 dc 00 00 00       	jmp    c0001ce9 <put_utf+0xf7>
c0001c0d:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c13:	77 23                	ja     c0001c38 <put_utf+0x46>
c0001c15:	83 f9 01             	cmp    ecx,0x1
c0001c18:	0f 86 cb 00 00 00    	jbe    c0001ce9 <put_utf+0xf7>
c0001c1e:	89 d8                	mov    eax,ebx
c0001c20:	83 e3 3f             	and    ebx,0x3f
c0001c23:	c1 e8 06             	shr    eax,0x6
c0001c26:	83 cb 80             	or     ebx,0xffffff80
c0001c29:	83 c8 c0             	or     eax,0xffffffc0
c0001c2c:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c2f:	88 02                	mov    BYTE PTR [edx],al
c0001c31:	b0 02                	mov    al,0x2
c0001c33:	e9 b1 00 00 00       	jmp    c0001ce9 <put_utf+0xf7>
c0001c38:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c3e:	77 40                	ja     c0001c80 <put_utf+0x8e>
c0001c40:	83 f9 02             	cmp    ecx,0x2
c0001c43:	0f 86 a0 00 00 00    	jbe    c0001ce9 <put_utf+0xf7>
c0001c49:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c4f:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c55:	0f 86 8e 00 00 00    	jbe    c0001ce9 <put_utf+0xf7>
c0001c5b:	89 d8                	mov    eax,ebx
c0001c5d:	c1 e8 0c             	shr    eax,0xc
c0001c60:	83 c8 e0             	or     eax,0xffffffe0
c0001c63:	88 02                	mov    BYTE PTR [edx],al
c0001c65:	89 d8                	mov    eax,ebx
c0001c67:	83 e3 3f             	and    ebx,0x3f
c0001c6a:	c1 e8 06             	shr    eax,0x6
c0001c6d:	83 cb 80             	or     ebx,0xffffff80
c0001c70:	83 e0 3f             	and    eax,0x3f
c0001c73:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c76:	83 c8 80             	or     eax,0xffffff80
c0001c79:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c7c:	b0 03                	mov    al,0x3
c0001c7e:	eb 69                	jmp    c0001ce9 <put_utf+0xf7>
c0001c80:	83 f9 03             	cmp    ecx,0x3
c0001c83:	76 64                	jbe    c0001ce9 <put_utf+0xf7>
c0001c85:	89 d9                	mov    ecx,ebx
c0001c87:	0f b7 c3             	movzx  eax,bx
c0001c8a:	66 31 c9             	xor    cx,cx
c0001c8d:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c93:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c99:	c1 e9 06             	shr    ecx,0x6
c0001c9c:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001ca2:	77 43                	ja     c0001ce7 <put_utf+0xf5>
c0001ca4:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001caa:	77 3b                	ja     c0001ce7 <put_utf+0xf5>
c0001cac:	09 cb                	or     ebx,ecx
c0001cae:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cb4:	89 d8                	mov    eax,ebx
c0001cb6:	c1 e8 12             	shr    eax,0x12
c0001cb9:	83 c8 f0             	or     eax,0xfffffff0
c0001cbc:	88 02                	mov    BYTE PTR [edx],al
c0001cbe:	89 d8                	mov    eax,ebx
c0001cc0:	c1 e8 0c             	shr    eax,0xc
c0001cc3:	83 e0 3f             	and    eax,0x3f
c0001cc6:	83 c8 80             	or     eax,0xffffff80
c0001cc9:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ccc:	89 d8                	mov    eax,ebx
c0001cce:	83 e3 3f             	and    ebx,0x3f
c0001cd1:	c1 e8 06             	shr    eax,0x6
c0001cd4:	83 cb 80             	or     ebx,0xffffff80
c0001cd7:	83 e0 3f             	and    eax,0x3f
c0001cda:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cdd:	83 c8 80             	or     eax,0xffffff80
c0001ce0:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ce3:	b0 04                	mov    al,0x4
c0001ce5:	eb 02                	jmp    c0001ce9 <put_utf+0xf7>
c0001ce7:	31 c0                	xor    eax,eax
c0001ce9:	5b                   	pop    ebx
c0001cea:	c3                   	ret    

c0001ceb <clst2sect>:
c0001ceb:	89 c1                	mov    ecx,eax
c0001ced:	83 ea 02             	sub    edx,0x2
c0001cf0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cf3:	83 e8 02             	sub    eax,0x2
c0001cf6:	39 d0                	cmp    eax,edx
c0001cf8:	76 0d                	jbe    c0001d07 <clst2sect+0x1c>
c0001cfa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cfe:	f7 e2                	mul    edx
c0001d00:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001d03:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001d06:	c3                   	ret    
c0001d07:	31 c0                	xor    eax,eax
c0001d09:	31 d2                	xor    edx,edx
c0001d0b:	c3                   	ret    

c0001d0c <clmt_clust>:
c0001d0c:	57                   	push   edi
c0001d0d:	89 cf                	mov    edi,ecx
c0001d0f:	56                   	push   esi
c0001d10:	89 d6                	mov    esi,edx
c0001d12:	53                   	push   ebx
c0001d13:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d17:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d1a:	89 f2                	mov    edx,esi
c0001d1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d1e:	c1 ef 09             	shr    edi,0x9
c0001d21:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d25:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d28:	89 f9                	mov    ecx,edi
c0001d2a:	31 ff                	xor    edi,edi
c0001d2c:	57                   	push   edi
c0001d2d:	56                   	push   esi
c0001d2e:	51                   	push   ecx
c0001d2f:	52                   	push   edx
c0001d30:	e8 27 16 02 00       	call   c002335c <__udivdi3>
c0001d35:	83 c4 10             	add    esp,0x10
c0001d38:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d3a:	85 d2                	test   edx,edx
c0001d3c:	74 10                	je     c0001d4e <clmt_clust+0x42>
c0001d3e:	39 d0                	cmp    eax,edx
c0001d40:	72 07                	jb     c0001d49 <clmt_clust+0x3d>
c0001d42:	29 d0                	sub    eax,edx
c0001d44:	83 c3 08             	add    ebx,0x8
c0001d47:	eb ef                	jmp    c0001d38 <clmt_clust+0x2c>
c0001d49:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d4c:	89 c2                	mov    edx,eax
c0001d4e:	5b                   	pop    ebx
c0001d4f:	89 d0                	mov    eax,edx
c0001d51:	5e                   	pop    esi
c0001d52:	5f                   	pop    edi
c0001d53:	c3                   	ret    

c0001d54 <pick_lfn>:
c0001d54:	55                   	push   ebp
c0001d55:	57                   	push   edi
c0001d56:	56                   	push   esi
c0001d57:	89 d6                	mov    esi,edx
c0001d59:	53                   	push   ebx
c0001d5a:	89 c3                	mov    ebx,eax
c0001d5c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d5f:	e8 ee fc ff ff       	call   c0001a52 <ld_word>
c0001d64:	66 85 c0             	test   ax,ax
c0001d67:	74 04                	je     c0001d6d <pick_lfn+0x19>
c0001d69:	31 c0                	xor    eax,eax
c0001d6b:	eb 5c                	jmp    c0001dc9 <pick_lfn+0x75>
c0001d6d:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d70:	bd 01 00 00 00       	mov    ebp,0x1
c0001d75:	83 e1 bf             	and    ecx,0xffffffbf
c0001d78:	31 ff                	xor    edi,edi
c0001d7a:	49                   	dec    ecx
c0001d7b:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d7e:	0f b6 87 e0 5d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffda220]
c0001d85:	01 f0                	add    eax,esi
c0001d87:	e8 c6 fc ff ff       	call   c0001a52 <ld_word>
c0001d8c:	66 85 ed             	test   bp,bp
c0001d8f:	74 11                	je     c0001da2 <pick_lfn+0x4e>
c0001d91:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d97:	77 d0                	ja     c0001d69 <pick_lfn+0x15>
c0001d99:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d9d:	89 c5                	mov    ebp,eax
c0001d9f:	41                   	inc    ecx
c0001da0:	eb 04                	jmp    c0001da6 <pick_lfn+0x52>
c0001da2:	66 40                	inc    ax
c0001da4:	75 c3                	jne    c0001d69 <pick_lfn+0x15>
c0001da6:	47                   	inc    edi
c0001da7:	83 ff 0d             	cmp    edi,0xd
c0001daa:	75 d2                	jne    c0001d7e <pick_lfn+0x2a>
c0001dac:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001daf:	74 13                	je     c0001dc4 <pick_lfn+0x70>
c0001db1:	66 85 ed             	test   bp,bp
c0001db4:	74 0e                	je     c0001dc4 <pick_lfn+0x70>
c0001db6:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001dbc:	77 ab                	ja     c0001d69 <pick_lfn+0x15>
c0001dbe:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001dc4:	b8 01 00 00 00       	mov    eax,0x1
c0001dc9:	5b                   	pop    ebx
c0001dca:	5e                   	pop    esi
c0001dcb:	5f                   	pop    edi
c0001dcc:	5d                   	pop    ebp
c0001dcd:	c3                   	ret    

c0001dce <put_lfn>:
c0001dce:	55                   	push   ebp
c0001dcf:	31 ed                	xor    ebp,ebp
c0001dd1:	57                   	push   edi
c0001dd2:	89 d7                	mov    edi,edx
c0001dd4:	56                   	push   esi
c0001dd5:	31 f6                	xor    esi,esi
c0001dd7:	53                   	push   ebx
c0001dd8:	83 ec 08             	sub    esp,0x8
c0001ddb:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dde:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001de2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001de6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dec:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001def:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001df2:	31 d2                	xor    edx,edx
c0001df4:	e8 cb fc ff ff       	call   c0001ac4 <st_word>
c0001df9:	0f b6 d9             	movzx  ebx,cl
c0001dfc:	4b                   	dec    ebx
c0001dfd:	6b db 0d             	imul   ebx,ebx,0xd
c0001e00:	66 83 fe ff          	cmp    si,0xffff
c0001e04:	74 08                	je     c0001e0e <put_lfn+0x40>
c0001e06:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e09:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e0d:	43                   	inc    ebx
c0001e0e:	0f b6 85 e0 5d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffda220]
c0001e15:	0f b7 d6             	movzx  edx,si
c0001e18:	01 f8                	add    eax,edi
c0001e1a:	e8 a5 fc ff ff       	call   c0001ac4 <st_word>
c0001e1f:	66 85 f6             	test   si,si
c0001e22:	75 03                	jne    c0001e27 <put_lfn+0x59>
c0001e24:	83 ce ff             	or     esi,0xffffffff
c0001e27:	45                   	inc    ebp
c0001e28:	83 fd 0d             	cmp    ebp,0xd
c0001e2b:	75 d3                	jne    c0001e00 <put_lfn+0x32>
c0001e2d:	66 46                	inc    si
c0001e2f:	74 0a                	je     c0001e3b <put_lfn+0x6d>
c0001e31:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e34:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e39:	75 09                	jne    c0001e44 <put_lfn+0x76>
c0001e3b:	88 c8                	mov    al,cl
c0001e3d:	83 c8 40             	or     eax,0x40
c0001e40:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e44:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e48:	88 07                	mov    BYTE PTR [edi],al
c0001e4a:	83 c4 08             	add    esp,0x8
c0001e4d:	5b                   	pop    ebx
c0001e4e:	5e                   	pop    esi
c0001e4f:	5f                   	pop    edi
c0001e50:	5d                   	pop    ebp
c0001e51:	c3                   	ret    

c0001e52 <gen_numname>:
c0001e52:	57                   	push   edi
c0001e53:	89 cf                	mov    edi,ecx
c0001e55:	56                   	push   esi
c0001e56:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e5b:	53                   	push   ebx
c0001e5c:	89 c6                	mov    esi,eax
c0001e5e:	83 ec 10             	sub    esp,0x10
c0001e61:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e65:	e8 67 fc ff ff       	call   c0001ad1 <mem_cpy>
c0001e6a:	83 fb 05             	cmp    ebx,0x5
c0001e6d:	76 2d                	jbe    c0001e9c <gen_numname+0x4a>
c0001e6f:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e72:	66 85 c0             	test   ax,ax
c0001e75:	74 25                	je     c0001e9c <gen_numname+0x4a>
c0001e77:	83 c7 02             	add    edi,0x2
c0001e7a:	ba 10 00 00 00       	mov    edx,0x10
c0001e7f:	01 db                	add    ebx,ebx
c0001e81:	89 c1                	mov    ecx,eax
c0001e83:	66 d1 e8             	shr    ax,1
c0001e86:	83 e1 01             	and    ecx,0x1
c0001e89:	01 cb                	add    ebx,ecx
c0001e8b:	0f ba e3 10          	bt     ebx,0x10
c0001e8f:	73 06                	jae    c0001e97 <gen_numname+0x45>
c0001e91:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e97:	4a                   	dec    edx
c0001e98:	75 e5                	jne    c0001e7f <gen_numname+0x2d>
c0001e9a:	eb d3                	jmp    c0001e6f <gen_numname+0x1d>
c0001e9c:	b8 07 00 00 00       	mov    eax,0x7
c0001ea1:	88 d9                	mov    cl,bl
c0001ea3:	83 e1 0f             	and    ecx,0xf
c0001ea6:	8d 51 30             	lea    edx,[ecx+0x30]
c0001ea9:	80 fa 39             	cmp    dl,0x39
c0001eac:	76 03                	jbe    c0001eb1 <gen_numname+0x5f>
c0001eae:	8d 51 37             	lea    edx,[ecx+0x37]
c0001eb1:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001eb4:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001eb8:	89 da                	mov    edx,ebx
c0001eba:	c1 ea 04             	shr    edx,0x4
c0001ebd:	83 fb 0f             	cmp    ebx,0xf
c0001ec0:	76 06                	jbe    c0001ec8 <gen_numname+0x76>
c0001ec2:	89 c8                	mov    eax,ecx
c0001ec4:	89 d3                	mov    ebx,edx
c0001ec6:	eb d9                	jmp    c0001ea1 <gen_numname+0x4f>
c0001ec8:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ecd:	31 d2                	xor    edx,edx
c0001ecf:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ed2:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ed5:	39 ca                	cmp    edx,ecx
c0001ed7:	73 18                	jae    c0001ef1 <gen_numname+0x9f>
c0001ed9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001edc:	3c 20                	cmp    al,0x20
c0001ede:	74 11                	je     c0001ef1 <gen_numname+0x9f>
c0001ee0:	e8 41 fc ff ff       	call   c0001b26 <dbc_1st>
c0001ee5:	85 c0                	test   eax,eax
c0001ee7:	74 05                	je     c0001eee <gen_numname+0x9c>
c0001ee9:	39 d3                	cmp    ebx,edx
c0001eeb:	74 04                	je     c0001ef1 <gen_numname+0x9f>
c0001eed:	42                   	inc    edx
c0001eee:	42                   	inc    edx
c0001eef:	eb e1                	jmp    c0001ed2 <gen_numname+0x80>
c0001ef1:	b0 20                	mov    al,0x20
c0001ef3:	83 f9 07             	cmp    ecx,0x7
c0001ef6:	77 05                	ja     c0001efd <gen_numname+0xab>
c0001ef8:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001efc:	41                   	inc    ecx
c0001efd:	42                   	inc    edx
c0001efe:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001f02:	83 fa 07             	cmp    edx,0x7
c0001f05:	76 ea                	jbe    c0001ef1 <gen_numname+0x9f>
c0001f07:	83 c4 10             	add    esp,0x10
c0001f0a:	5b                   	pop    ebx
c0001f0b:	5e                   	pop    esi
c0001f0c:	5f                   	pop    edi
c0001f0d:	c3                   	ret    

c0001f0e <sum_sfn>:
c0001f0e:	31 c9                	xor    ecx,ecx
c0001f10:	31 d2                	xor    edx,edx
c0001f12:	d0 ca                	ror    dl,1
c0001f14:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f17:	41                   	inc    ecx
c0001f18:	83 f9 0b             	cmp    ecx,0xb
c0001f1b:	75 f5                	jne    c0001f12 <sum_sfn+0x4>
c0001f1d:	88 d0                	mov    al,dl
c0001f1f:	c3                   	ret    

c0001f20 <xdir_sum>:
c0001f20:	56                   	push   esi
c0001f21:	31 c9                	xor    ecx,ecx
c0001f23:	53                   	push   ebx
c0001f24:	31 d2                	xor    edx,edx
c0001f26:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f2a:	43                   	inc    ebx
c0001f2b:	c1 e3 05             	shl    ebx,0x5
c0001f2e:	83 fa 02             	cmp    edx,0x2
c0001f31:	74 0b                	je     c0001f3e <xdir_sum+0x1e>
c0001f33:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f37:	66 d1 c9             	ror    cx,1
c0001f3a:	01 f1                	add    ecx,esi
c0001f3c:	eb 05                	jmp    c0001f43 <xdir_sum+0x23>
c0001f3e:	ba 03 00 00 00       	mov    edx,0x3
c0001f43:	42                   	inc    edx
c0001f44:	39 d3                	cmp    ebx,edx
c0001f46:	77 e6                	ja     c0001f2e <xdir_sum+0xe>
c0001f48:	89 c8                	mov    eax,ecx
c0001f4a:	5b                   	pop    ebx
c0001f4b:	5e                   	pop    esi
c0001f4c:	c3                   	ret    

c0001f4d <xsum32>:
c0001f4d:	d1 ca                	ror    edx,1
c0001f4f:	0f b6 c0             	movzx  eax,al
c0001f52:	01 d0                	add    eax,edx
c0001f54:	c3                   	ret    

c0001f55 <get_xfileinfo>:
c0001f55:	55                   	push   ebp
c0001f56:	31 c9                	xor    ecx,ecx
c0001f58:	57                   	push   edi
c0001f59:	bd 40 00 00 00       	mov    ebp,0x40
c0001f5e:	56                   	push   esi
c0001f5f:	31 ff                	xor    edi,edi
c0001f61:	53                   	push   ebx
c0001f62:	89 c6                	mov    esi,eax
c0001f64:	83 ec 0c             	sub    esp,0xc
c0001f67:	89 d3                	mov    ebx,edx
c0001f69:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f70:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f74:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f77:	76 6d                	jbe    c0001fe6 <get_xfileinfo+0x91>
c0001f79:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f7f:	76 0b                	jbe    c0001f8c <get_xfileinfo+0x37>
c0001f81:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f85:	bf 01 00 00 00       	mov    edi,0x1
c0001f8a:	eb 63                	jmp    c0001fef <get_xfileinfo+0x9a>
c0001f8c:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f92:	75 03                	jne    c0001f97 <get_xfileinfo+0x42>
c0001f94:	83 c5 02             	add    ebp,0x2
c0001f97:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f9a:	83 c5 02             	add    ebp,0x2
c0001f9d:	e8 b0 fa ff ff       	call   c0001a52 <ld_word>
c0001fa2:	ff 04 24             	inc    DWORD PTR [esp]
c0001fa5:	66 85 c9             	test   cx,cx
c0001fa8:	75 0d                	jne    c0001fb7 <get_xfileinfo+0x62>
c0001faa:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001fb0:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001fb5:	76 2b                	jbe    c0001fe2 <get_xfileinfo+0x8d>
c0001fb7:	c1 e1 10             	shl    ecx,0x10
c0001fba:	ba ff 00 00 00       	mov    edx,0xff
c0001fbf:	0f b7 c0             	movzx  eax,ax
c0001fc2:	29 fa                	sub    edx,edi
c0001fc4:	09 c8                	or     eax,ecx
c0001fc6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fca:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fd2:	e8 1b fc ff ff       	call   c0001bf2 <put_utf>
c0001fd7:	84 c0                	test   al,al
c0001fd9:	74 a6                	je     c0001f81 <get_xfileinfo+0x2c>
c0001fdb:	0f b6 c0             	movzx  eax,al
c0001fde:	01 c7                	add    edi,eax
c0001fe0:	31 c0                	xor    eax,eax
c0001fe2:	89 c1                	mov    ecx,eax
c0001fe4:	eb 8a                	jmp    c0001f70 <get_xfileinfo+0x1b>
c0001fe6:	85 ff                	test   edi,edi
c0001fe8:	74 97                	je     c0001f81 <get_xfileinfo+0x2c>
c0001fea:	66 85 c9             	test   cx,cx
c0001fed:	75 92                	jne    c0001f81 <get_xfileinfo+0x2c>
c0001fef:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001ff4:	31 c0                	xor    eax,eax
c0001ff6:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001ffa:	31 d2                	xor    edx,edx
c0001ffc:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fff:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002002:	80 e1 10             	and    cl,0x10
c0002005:	75 08                	jne    c000200f <get_xfileinfo+0xba>
c0002007:	8d 46 38             	lea    eax,[esi+0x38]
c000200a:	e8 68 fa ff ff       	call   c0001a77 <ld_qword>
c000200f:	89 03                	mov    DWORD PTR [ebx],eax
c0002011:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002014:	8d 46 0c             	lea    eax,[esi+0xc]
c0002017:	e8 36 fa ff ff       	call   c0001a52 <ld_word>
c000201c:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002020:	8d 46 0e             	lea    eax,[esi+0xe]
c0002023:	e8 2a fa ff ff       	call   c0001a52 <ld_word>
c0002028:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000202c:	83 c4 0c             	add    esp,0xc
c000202f:	5b                   	pop    ebx
c0002030:	5e                   	pop    esi
c0002031:	5f                   	pop    edi
c0002032:	5d                   	pop    ebp
c0002033:	c3                   	ret    

c0002034 <get_ldnumber>:
c0002034:	8b 10                	mov    edx,DWORD PTR [eax]
c0002036:	85 d2                	test   edx,edx
c0002038:	74 14                	je     c000204e <get_ldnumber+0x1a>
c000203a:	56                   	push   esi
c000203b:	53                   	push   ebx
c000203c:	89 d3                	mov    ebx,edx
c000203e:	43                   	inc    ebx
c000203f:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002042:	80 f9 1f             	cmp    cl,0x1f
c0002045:	76 0d                	jbe    c0002054 <get_ldnumber+0x20>
c0002047:	80 f9 3a             	cmp    cl,0x3a
c000204a:	75 f2                	jne    c000203e <get_ldnumber+0xa>
c000204c:	eb 0a                	jmp    c0002058 <get_ldnumber+0x24>
c000204e:	83 c9 ff             	or     ecx,0xffffffff
c0002051:	89 c8                	mov    eax,ecx
c0002053:	c3                   	ret    
c0002054:	31 c9                	xor    ecx,ecx
c0002056:	eb 24                	jmp    c000207c <get_ldnumber+0x48>
c0002058:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000205b:	8d 4e d0             	lea    ecx,[esi-0x30]
c000205e:	80 f9 09             	cmp    cl,0x9
c0002061:	77 16                	ja     c0002079 <get_ldnumber+0x45>
c0002063:	83 c2 02             	add    edx,0x2
c0002066:	83 c9 ff             	or     ecx,0xffffffff
c0002069:	39 d3                	cmp    ebx,edx
c000206b:	75 0f                	jne    c000207c <get_ldnumber+0x48>
c000206d:	89 f2                	mov    edx,esi
c000206f:	89 18                	mov    DWORD PTR [eax],ebx
c0002071:	0f be ca             	movsx  ecx,dl
c0002074:	83 e9 30             	sub    ecx,0x30
c0002077:	eb 03                	jmp    c000207c <get_ldnumber+0x48>
c0002079:	83 c9 ff             	or     ecx,0xffffffff
c000207c:	89 c8                	mov    eax,ecx
c000207e:	5b                   	pop    ebx
c000207f:	5e                   	pop    esi
c0002080:	c3                   	ret    

c0002081 <crc32>:
c0002081:	56                   	push   esi
c0002082:	89 d6                	mov    esi,edx
c0002084:	53                   	push   ebx
c0002085:	b2 01                	mov    dl,0x1
c0002087:	bb 08 00 00 00       	mov    ebx,0x8
c000208c:	89 f1                	mov    ecx,esi
c000208e:	84 d1                	test   cl,dl
c0002090:	0f 95 c1             	setne  cl
c0002093:	0f b6 c9             	movzx  ecx,cl
c0002096:	31 c1                	xor    ecx,eax
c0002098:	89 c8                	mov    eax,ecx
c000209a:	d1 e8                	shr    eax,1
c000209c:	80 e1 01             	and    cl,0x1
c000209f:	74 05                	je     c00020a6 <crc32+0x25>
c00020a1:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00020a6:	d1 e2                	shl    edx,1
c00020a8:	4b                   	dec    ebx
c00020a9:	75 e1                	jne    c000208c <crc32+0xb>
c00020ab:	5b                   	pop    ebx
c00020ac:	5e                   	pop    esi
c00020ad:	c3                   	ret    

c00020ae <test_gpt_header>:
c00020ae:	55                   	push   ebp
c00020af:	b9 10 00 00 00       	mov    ecx,0x10
c00020b4:	57                   	push   edi
c00020b5:	ba e0 5c 02 c0       	mov    edx,0xc0025ce0
c00020ba:	56                   	push   esi
c00020bb:	31 ff                	xor    edi,edi
c00020bd:	53                   	push   ebx
c00020be:	89 c3                	mov    ebx,eax
c00020c0:	e8 2c fa ff ff       	call   c0001af1 <mem_cmp>
c00020c5:	85 c0                	test   eax,eax
c00020c7:	75 55                	jne    c000211e <test_gpt_header+0x70>
c00020c9:	89 c7                	mov    edi,eax
c00020cb:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020d0:	83 ce ff             	or     esi,0xffffffff
c00020d3:	31 d2                	xor    edx,edx
c00020d5:	83 fd 03             	cmp    ebp,0x3
c00020d8:	76 05                	jbe    c00020df <test_gpt_header+0x31>
c00020da:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020df:	89 f0                	mov    eax,esi
c00020e1:	45                   	inc    ebp
c00020e2:	e8 9a ff ff ff       	call   c0002081 <crc32>
c00020e7:	83 fd 4c             	cmp    ebp,0x4c
c00020ea:	89 c6                	mov    esi,eax
c00020ec:	75 e5                	jne    c00020d3 <test_gpt_header+0x25>
c00020ee:	8d 43 10             	lea    eax,[ebx+0x10]
c00020f1:	f7 d6                	not    esi
c00020f3:	e8 67 f9 ff ff       	call   c0001a5f <ld_dword>
c00020f8:	39 c6                	cmp    esi,eax
c00020fa:	75 22                	jne    c000211e <test_gpt_header+0x70>
c00020fc:	8d 43 54             	lea    eax,[ebx+0x54]
c00020ff:	e8 5b f9 ff ff       	call   c0001a5f <ld_dword>
c0002104:	83 c0 80             	add    eax,0xffffff80
c0002107:	75 15                	jne    c000211e <test_gpt_header+0x70>
c0002109:	8d 43 50             	lea    eax,[ebx+0x50]
c000210c:	e8 4e f9 ff ff       	call   c0001a5f <ld_dword>
c0002111:	3d 80 00 00 00       	cmp    eax,0x80
c0002116:	0f 96 c0             	setbe  al
c0002119:	0f b6 c0             	movzx  eax,al
c000211c:	89 c7                	mov    edi,eax
c000211e:	5b                   	pop    ebx
c000211f:	89 f8                	mov    eax,edi
c0002121:	5e                   	pop    esi
c0002122:	5f                   	pop    edi
c0002123:	5d                   	pop    ebp
c0002124:	c3                   	ret    

c0002125 <make_rand>:
c0002125:	56                   	push   esi
c0002126:	85 c0                	test   eax,eax
c0002128:	53                   	push   ebx
c0002129:	75 05                	jne    c0002130 <make_rand+0xb>
c000212b:	b8 01 00 00 00       	mov    eax,0x1
c0002130:	01 d1                	add    ecx,edx
c0002132:	bb 08 00 00 00       	mov    ebx,0x8
c0002137:	89 c6                	mov    esi,eax
c0002139:	d1 e8                	shr    eax,1
c000213b:	83 e6 01             	and    esi,0x1
c000213e:	85 f6                	test   esi,esi
c0002140:	74 05                	je     c0002147 <make_rand+0x22>
c0002142:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002147:	4b                   	dec    ebx
c0002148:	75 ed                	jne    c0002137 <make_rand+0x12>
c000214a:	42                   	inc    edx
c000214b:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000214e:	39 ca                	cmp    edx,ecx
c0002150:	75 e0                	jne    c0002132 <make_rand+0xd>
c0002152:	5b                   	pop    ebx
c0002153:	5e                   	pop    esi
c0002154:	c3                   	ret    

c0002155 <validate>:
c0002155:	56                   	push   esi
c0002156:	53                   	push   ebx
c0002157:	89 d6                	mov    esi,edx
c0002159:	51                   	push   ecx
c000215a:	85 c0                	test   eax,eax
c000215c:	75 09                	jne    c0002167 <validate+0x12>
c000215e:	b8 09 00 00 00       	mov    eax,0x9
c0002163:	31 c9                	xor    ecx,ecx
c0002165:	eb 2f                	jmp    c0002196 <validate+0x41>
c0002167:	89 c3                	mov    ebx,eax
c0002169:	8b 00                	mov    eax,DWORD PTR [eax]
c000216b:	85 c0                	test   eax,eax
c000216d:	74 ef                	je     c000215e <validate+0x9>
c000216f:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002172:	74 ea                	je     c000215e <validate+0x9>
c0002174:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002178:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000217c:	75 e0                	jne    c000215e <validate+0x9>
c000217e:	83 ec 0c             	sub    esp,0xc
c0002181:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002185:	50                   	push   eax
c0002186:	e8 76 f8 ff ff       	call   c0001a01 <disk_status>
c000218b:	83 c4 10             	add    esp,0x10
c000218e:	a8 01                	test   al,0x1
c0002190:	75 cc                	jne    c000215e <validate+0x9>
c0002192:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002194:	31 c0                	xor    eax,eax
c0002196:	89 0e                	mov    DWORD PTR [esi],ecx
c0002198:	5a                   	pop    edx
c0002199:	5b                   	pop    ebx
c000219a:	5e                   	pop    esi
c000219b:	c3                   	ret    

c000219c <sync_window>:
c000219c:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021a0:	0f 84 85 00 00 00    	je     c000222b <sync_window+0x8f>
c00021a6:	55                   	push   ebp
c00021a7:	8d 68 54             	lea    ebp,[eax+0x54]
c00021aa:	57                   	push   edi
c00021ab:	56                   	push   esi
c00021ac:	53                   	push   ebx
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	83 ec 28             	sub    esp,0x28
c00021b2:	6a 01                	push   0x1
c00021b4:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021b7:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021ba:	55                   	push   ebp
c00021bb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021bf:	50                   	push   eax
c00021c0:	e8 58 f8 ff ff       	call   c0001a1d <disk_write>
c00021c5:	83 c4 20             	add    esp,0x20
c00021c8:	ba 01 00 00 00       	mov    edx,0x1
c00021cd:	85 c0                	test   eax,eax
c00021cf:	75 50                	jne    c0002221 <sync_window+0x85>
c00021d1:	31 ff                	xor    edi,edi
c00021d3:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021d6:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021da:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021de:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021e1:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021e4:	89 c6                	mov    esi,eax
c00021e6:	89 d7                	mov    edi,edx
c00021e8:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021eb:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021ef:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021f2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021f6:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021fa:	73 23                	jae    c000221f <sync_window+0x83>
c00021fc:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002200:	75 1d                	jne    c000221f <sync_window+0x83>
c0002202:	83 ec 0c             	sub    esp,0xc
c0002205:	6a 01                	push   0x1
c0002207:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000220b:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000220f:	52                   	push   edx
c0002210:	50                   	push   eax
c0002211:	55                   	push   ebp
c0002212:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002216:	50                   	push   eax
c0002217:	e8 01 f8 ff ff       	call   c0001a1d <disk_write>
c000221c:	83 c4 20             	add    esp,0x20
c000221f:	31 d2                	xor    edx,edx
c0002221:	83 c4 1c             	add    esp,0x1c
c0002224:	89 d0                	mov    eax,edx
c0002226:	5b                   	pop    ebx
c0002227:	5e                   	pop    esi
c0002228:	5f                   	pop    edi
c0002229:	5d                   	pop    ebp
c000222a:	c3                   	ret    
c000222b:	31 d2                	xor    edx,edx
c000222d:	89 d0                	mov    eax,edx
c000222f:	c3                   	ret    

c0002230 <move_window>:
c0002230:	56                   	push   esi
c0002231:	53                   	push   ebx
c0002232:	89 c3                	mov    ebx,eax
c0002234:	83 ec 14             	sub    esp,0x14
c0002237:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000223a:	75 07                	jne    c0002243 <move_window+0x13>
c000223c:	31 f6                	xor    esi,esi
c000223e:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002241:	74 59                	je     c000229c <move_window+0x6c>
c0002243:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002247:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000224b:	89 d8                	mov    eax,ebx
c000224d:	e8 4a ff ff ff       	call   c000219c <sync_window>
c0002252:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002256:	89 c6                	mov    esi,eax
c0002258:	85 c0                	test   eax,eax
c000225a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000225e:	75 3c                	jne    c000229c <move_window+0x6c>
c0002260:	83 ec 0c             	sub    esp,0xc
c0002263:	8d 43 54             	lea    eax,[ebx+0x54]
c0002266:	6a 01                	push   0x1
c0002268:	51                   	push   ecx
c0002269:	52                   	push   edx
c000226a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000226e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002272:	50                   	push   eax
c0002273:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002277:	50                   	push   eax
c0002278:	e8 8a f7 ff ff       	call   c0001a07 <disk_read>
c000227d:	83 c4 20             	add    esp,0x20
c0002280:	85 c0                	test   eax,eax
c0002282:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002286:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000228a:	74 0a                	je     c0002296 <move_window+0x66>
c000228c:	83 ca ff             	or     edx,0xffffffff
c000228f:	be 01 00 00 00       	mov    esi,0x1
c0002294:	89 d1                	mov    ecx,edx
c0002296:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002299:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000229c:	89 f0                	mov    eax,esi
c000229e:	83 c4 14             	add    esp,0x14
c00022a1:	5b                   	pop    ebx
c00022a2:	5e                   	pop    esi
c00022a3:	c3                   	ret    

c00022a4 <check_fs>:
c00022a4:	53                   	push   ebx
c00022a5:	89 c3                	mov    ebx,eax
c00022a7:	83 ec 08             	sub    esp,0x8
c00022aa:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022ae:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022b5:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022bc:	e8 6f ff ff ff       	call   c0002230 <move_window>
c00022c1:	ba 04 00 00 00       	mov    edx,0x4
c00022c6:	85 c0                	test   eax,eax
c00022c8:	0f 85 89 00 00 00    	jne    c0002357 <check_fs+0xb3>
c00022ce:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022d4:	e8 79 f7 ff ff       	call   c0001a52 <ld_word>
c00022d9:	ba 03 00 00 00       	mov    edx,0x3
c00022de:	66 3d 55 aa          	cmp    ax,0xaa55
c00022e2:	75 73                	jne    c0002357 <check_fs+0xb3>
c00022e4:	ba 00 5e 02 c0       	mov    edx,0xc0025e00
c00022e9:	8d 43 54             	lea    eax,[ebx+0x54]
c00022ec:	b9 0b 00 00 00       	mov    ecx,0xb
c00022f1:	e8 fb f7 ff ff       	call   c0001af1 <mem_cmp>
c00022f6:	ba 01 00 00 00       	mov    edx,0x1
c00022fb:	85 c0                	test   eax,eax
c00022fd:	74 58                	je     c0002357 <check_fs+0xb3>
c00022ff:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002302:	8d 50 18             	lea    edx,[eax+0x18]
c0002305:	80 fa 01             	cmp    dl,0x1
c0002308:	76 09                	jbe    c0002313 <check_fs+0x6f>
c000230a:	ba 02 00 00 00       	mov    edx,0x2
c000230f:	3c eb                	cmp    al,0xeb
c0002311:	75 44                	jne    c0002357 <check_fs+0xb3>
c0002313:	ba b8 8a 02 c0       	mov    edx,0xc0028ab8
c0002318:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000231e:	b9 03 00 00 00       	mov    ecx,0x3
c0002323:	e8 c9 f7 ff ff       	call   c0001af1 <mem_cmp>
c0002328:	31 d2                	xor    edx,edx
c000232a:	85 c0                	test   eax,eax
c000232c:	74 29                	je     c0002357 <check_fs+0xb3>
c000232e:	ba 0c 5e 02 c0       	mov    edx,0xc0025e0c
c0002333:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002339:	b9 05 00 00 00       	mov    ecx,0x5
c000233e:	e8 ae f7 ff ff       	call   c0001af1 <mem_cmp>
c0002343:	31 d2                	xor    edx,edx
c0002345:	85 c0                	test   eax,eax
c0002347:	74 0e                	je     c0002357 <check_fs+0xb3>
c0002349:	31 d2                	xor    edx,edx
c000234b:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002352:	0f 95 c2             	setne  dl
c0002355:	01 d2                	add    edx,edx
c0002357:	89 d0                	mov    eax,edx
c0002359:	83 c4 08             	add    esp,0x8
c000235c:	5b                   	pop    ebx
c000235d:	c3                   	ret    

c000235e <find_volume>:
c000235e:	55                   	push   ebp
c000235f:	31 c9                	xor    ecx,ecx
c0002361:	57                   	push   edi
c0002362:	56                   	push   esi
c0002363:	89 d6                	mov    esi,edx
c0002365:	53                   	push   ebx
c0002366:	31 d2                	xor    edx,edx
c0002368:	83 ec 3c             	sub    esp,0x3c
c000236b:	89 c3                	mov    ebx,eax
c000236d:	e8 32 ff ff ff       	call   c00022a4 <check_fs>
c0002372:	83 f8 02             	cmp    eax,0x2
c0002375:	74 0e                	je     c0002385 <find_volume+0x27>
c0002377:	0f 87 5d 01 00 00    	ja     c00024da <find_volume+0x17c>
c000237d:	85 f6                	test   esi,esi
c000237f:	0f 84 55 01 00 00    	je     c00024da <find_volume+0x17c>
c0002385:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000238c:	0f 85 dd 00 00 00    	jne    c000246f <find_volume+0x111>
c0002392:	31 c9                	xor    ecx,ecx
c0002394:	ba 01 00 00 00       	mov    edx,0x1
c0002399:	89 d8                	mov    eax,ebx
c000239b:	e8 90 fe ff ff       	call   c0002230 <move_window>
c00023a0:	85 c0                	test   eax,eax
c00023a2:	74 0a                	je     c00023ae <find_volume+0x50>
c00023a4:	b8 04 00 00 00       	mov    eax,0x4
c00023a9:	e9 2c 01 00 00       	jmp    c00024da <find_volume+0x17c>
c00023ae:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023b1:	89 e8                	mov    eax,ebp
c00023b3:	e8 f6 fc ff ff       	call   c00020ae <test_gpt_header>
c00023b8:	85 c0                	test   eax,eax
c00023ba:	75 0a                	jne    c00023c6 <find_volume+0x68>
c00023bc:	b8 03 00 00 00       	mov    eax,0x3
c00023c1:	e9 14 01 00 00       	jmp    c00024da <find_volume+0x17c>
c00023c6:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023cc:	e8 8e f6 ff ff       	call   c0001a5f <ld_dword>
c00023d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023d5:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023db:	e8 97 f6 ff ff       	call   c0001a77 <ld_qword>
c00023e0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023fc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002400:	74 ba                	je     c00023bc <find_volume+0x5e>
c0002402:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002406:	31 c9                	xor    ecx,ecx
c0002408:	c1 e7 07             	shl    edi,0x7
c000240b:	89 d8                	mov    eax,ebx
c000240d:	89 fa                	mov    edx,edi
c000240f:	c1 ea 09             	shr    edx,0x9
c0002412:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002416:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000241a:	e8 11 fe ff ff       	call   c0002230 <move_window>
c000241f:	85 c0                	test   eax,eax
c0002421:	75 81                	jne    c00023a4 <find_volume+0x46>
c0002423:	81 e7 80 01 00 00    	and    edi,0x180
c0002429:	b9 10 00 00 00       	mov    ecx,0x10
c000242e:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002432:	ba f0 5d 02 c0       	mov    edx,0xc0025df0
c0002437:	e8 b5 f6 ff ff       	call   c0001af1 <mem_cmp>
c000243c:	85 c0                	test   eax,eax
c000243e:	75 29                	jne    c0002469 <find_volume+0x10b>
c0002440:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002444:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002448:	e8 2a f6 ff ff       	call   c0001a77 <ld_qword>
c000244d:	89 d1                	mov    ecx,edx
c000244f:	89 c2                	mov    edx,eax
c0002451:	89 d8                	mov    eax,ebx
c0002453:	e8 4c fe ff ff       	call   c00022a4 <check_fs>
c0002458:	85 f6                	test   esi,esi
c000245a:	75 07                	jne    c0002463 <find_volume+0x105>
c000245c:	83 f8 01             	cmp    eax,0x1
c000245f:	77 08                	ja     c0002469 <find_volume+0x10b>
c0002461:	eb 77                	jmp    c00024da <find_volume+0x17c>
c0002463:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002467:	74 71                	je     c00024da <find_volume+0x17c>
c0002469:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000246d:	eb 89                	jmp    c00023f8 <find_volume+0x9a>
c000246f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002473:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002479:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000247f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002483:	89 cd                	mov    ebp,ecx
c0002485:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002489:	89 f8                	mov    eax,edi
c000248b:	83 c7 10             	add    edi,0x10
c000248e:	e8 cc f5 ff ff       	call   c0001a5f <ld_dword>
c0002493:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002497:	89 01                	mov    DWORD PTR [ecx],eax
c0002499:	83 c1 04             	add    ecx,0x4
c000249c:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00024a0:	75 e3                	jne    c0002485 <find_volume+0x127>
c00024a2:	31 ff                	xor    edi,edi
c00024a4:	85 f6                	test   esi,esi
c00024a6:	74 03                	je     c00024ab <find_volume+0x14d>
c00024a8:	8d 7e ff             	lea    edi,[esi-0x1]
c00024ab:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024af:	85 d2                	test   edx,edx
c00024b1:	74 14                	je     c00024c7 <find_volume+0x169>
c00024b3:	31 c9                	xor    ecx,ecx
c00024b5:	89 d8                	mov    eax,ebx
c00024b7:	e8 e8 fd ff ff       	call   c00022a4 <check_fs>
c00024bc:	83 f8 01             	cmp    eax,0x1
c00024bf:	76 19                	jbe    c00024da <find_volume+0x17c>
c00024c1:	85 f6                	test   esi,esi
c00024c3:	74 0f                	je     c00024d4 <find_volume+0x176>
c00024c5:	eb 13                	jmp    c00024da <find_volume+0x17c>
c00024c7:	85 f6                	test   esi,esi
c00024c9:	0f 85 ed fe ff ff    	jne    c00023bc <find_volume+0x5e>
c00024cf:	b8 03 00 00 00       	mov    eax,0x3
c00024d4:	47                   	inc    edi
c00024d5:	83 ff 03             	cmp    edi,0x3
c00024d8:	76 d1                	jbe    c00024ab <find_volume+0x14d>
c00024da:	83 c4 3c             	add    esp,0x3c
c00024dd:	5b                   	pop    ebx
c00024de:	5e                   	pop    esi
c00024df:	5f                   	pop    edi
c00024e0:	5d                   	pop    ebp
c00024e1:	c3                   	ret    

c00024e2 <mount_volume>:
c00024e2:	55                   	push   ebp
c00024e3:	57                   	push   edi
c00024e4:	89 cf                	mov    edi,ecx
c00024e6:	56                   	push   esi
c00024e7:	53                   	push   ebx
c00024e8:	bb 0b 00 00 00       	mov    ebx,0xb
c00024ed:	83 ec 3c             	sub    esp,0x3c
c00024f0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024f6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024fa:	e8 35 fb ff ff       	call   c0002034 <get_ldnumber>
c00024ff:	85 c0                	test   eax,eax
c0002501:	0f 88 3a 05 00 00    	js     c0002a41 <mount_volume+0x55f>
c0002507:	8b 2c 85 a0 a3 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd5c60]
c000250e:	89 c6                	mov    esi,eax
c0002510:	bb 0c 00 00 00       	mov    ebx,0xc
c0002515:	85 ed                	test   ebp,ebp
c0002517:	0f 84 24 05 00 00    	je     c0002a41 <mount_volume+0x55f>
c000251d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002521:	83 e7 fe             	and    edi,0xfffffffe
c0002524:	89 2a                	mov    DWORD PTR [edx],ebp
c0002526:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000252a:	74 32                	je     c000255e <mount_volume+0x7c>
c000252c:	83 ec 0c             	sub    esp,0xc
c000252f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002533:	50                   	push   eax
c0002534:	e8 c8 f4 ff ff       	call   c0001a01 <disk_status>
c0002539:	83 c4 10             	add    esp,0x10
c000253c:	a8 01                	test   al,0x1
c000253e:	75 1e                	jne    c000255e <mount_volume+0x7c>
c0002540:	31 db                	xor    ebx,ebx
c0002542:	89 f9                	mov    ecx,edi
c0002544:	84 c9                	test   cl,cl
c0002546:	0f 84 f5 04 00 00    	je     c0002a41 <mount_volume+0x55f>
c000254c:	a8 04                	test   al,0x4
c000254e:	0f 84 ed 04 00 00    	je     c0002a41 <mount_volume+0x55f>
c0002554:	bb 0a 00 00 00       	mov    ebx,0xa
c0002559:	e9 e3 04 00 00       	jmp    c0002a41 <mount_volume+0x55f>
c000255e:	83 ec 0c             	sub    esp,0xc
c0002561:	89 f0                	mov    eax,esi
c0002563:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002567:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000256a:	0f b6 f0             	movzx  esi,al
c000256d:	bb 03 00 00 00       	mov    ebx,0x3
c0002572:	56                   	push   esi
c0002573:	e8 8c f4 ff ff       	call   c0001a04 <disk_initialize>
c0002578:	83 c4 10             	add    esp,0x10
c000257b:	a8 01                	test   al,0x1
c000257d:	0f 85 be 04 00 00    	jne    c0002a41 <mount_volume+0x55f>
c0002583:	89 f9                	mov    ecx,edi
c0002585:	84 c9                	test   cl,cl
c0002587:	74 04                	je     c000258d <mount_volume+0xab>
c0002589:	a8 04                	test   al,0x4
c000258b:	75 c7                	jne    c0002554 <mount_volume+0x72>
c000258d:	31 d2                	xor    edx,edx
c000258f:	89 e8                	mov    eax,ebp
c0002591:	e8 c8 fd ff ff       	call   c000235e <find_volume>
c0002596:	83 f8 04             	cmp    eax,0x4
c0002599:	75 0a                	jne    c00025a5 <mount_volume+0xc3>
c000259b:	bb 01 00 00 00       	mov    ebx,0x1
c00025a0:	e9 9c 04 00 00       	jmp    c0002a41 <mount_volume+0x55f>
c00025a5:	83 f8 01             	cmp    eax,0x1
c00025a8:	76 0a                	jbe    c00025b4 <mount_volume+0xd2>
c00025aa:	bb 0d 00 00 00       	mov    ebx,0xd
c00025af:	e9 8d 04 00 00       	jmp    c0002a41 <mount_volume+0x55f>
c00025b4:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025b7:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025c2:	75 17                	jne    c00025db <mount_volume+0xf9>
c00025c4:	b8 0b 00 00 00       	mov    eax,0xb
c00025c9:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025ce:	75 da                	jne    c00025aa <mount_volume+0xc8>
c00025d0:	40                   	inc    eax
c00025d1:	83 f8 40             	cmp    eax,0x40
c00025d4:	75 f3                	jne    c00025c9 <mount_volume+0xe7>
c00025d6:	e9 5a 02 00 00       	jmp    c0002835 <mount_volume+0x353>
c00025db:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025de:	e8 6f f4 ff ff       	call   c0001a52 <ld_word>
c00025e3:	66 3d 00 02          	cmp    ax,0x200
c00025e7:	75 c1                	jne    c00025aa <mount_volume+0xc8>
c00025e9:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025ec:	e8 61 f4 ff ff       	call   c0001a52 <ld_word>
c00025f1:	0f b7 c0             	movzx  eax,ax
c00025f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025f8:	85 c0                	test   eax,eax
c00025fa:	75 0c                	jne    c0002608 <mount_volume+0x126>
c00025fc:	8d 45 78             	lea    eax,[ebp+0x78]
c00025ff:	e8 5b f4 ff ff       	call   c0001a5f <ld_dword>
c0002604:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000260c:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000260f:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002612:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002616:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002619:	48                   	dec    eax
c000261a:	3c 01                	cmp    al,0x1
c000261c:	77 8c                	ja     c00025aa <mount_volume+0xc8>
c000261e:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002622:	89 c3                	mov    ebx,eax
c0002624:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002628:	66 85 c0             	test   ax,ax
c000262b:	0f 84 79 ff ff ff    	je     c00025aa <mount_volume+0xc8>
c0002631:	8d 40 ff             	lea    eax,[eax-0x1]
c0002634:	85 d8                	test   eax,ebx
c0002636:	0f 85 6e ff ff ff    	jne    c00025aa <mount_volume+0xc8>
c000263c:	8d 45 65             	lea    eax,[ebp+0x65]
c000263f:	e8 0e f4 ff ff       	call   c0001a52 <ld_word>
c0002644:	89 c7                	mov    edi,eax
c0002646:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000264a:	a8 0f                	test   al,0xf
c000264c:	0f 85 58 ff ff ff    	jne    c00025aa <mount_volume+0xc8>
c0002652:	8d 45 67             	lea    eax,[ebp+0x67]
c0002655:	e8 f8 f3 ff ff       	call   c0001a52 <ld_word>
c000265a:	0f b7 f0             	movzx  esi,ax
c000265d:	85 f6                	test   esi,esi
c000265f:	75 0a                	jne    c000266b <mount_volume+0x189>
c0002661:	8d 45 74             	lea    eax,[ebp+0x74]
c0002664:	e8 f6 f3 ff ff       	call   c0001a5f <ld_dword>
c0002669:	89 c6                	mov    esi,eax
c000266b:	8d 45 62             	lea    eax,[ebp+0x62]
c000266e:	e8 df f3 ff ff       	call   c0001a52 <ld_word>
c0002673:	66 85 c0             	test   ax,ax
c0002676:	0f 84 2e ff ff ff    	je     c00025aa <mount_volume+0xc8>
c000267c:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002681:	0f b7 c8             	movzx  ecx,ax
c0002684:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002689:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000268d:	89 fa                	mov    edx,edi
c000268f:	66 c1 ea 04          	shr    dx,0x4
c0002693:	0f b7 d2             	movzx  edx,dx
c0002696:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000269a:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000269d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00026a1:	39 c6                	cmp    esi,eax
c00026a3:	0f 82 01 ff ff ff    	jb     c00025aa <mount_volume+0xc8>
c00026a9:	29 c6                	sub    esi,eax
c00026ab:	31 d2                	xor    edx,edx
c00026ad:	89 f0                	mov    eax,esi
c00026af:	f7 f3                	div    ebx
c00026b1:	39 de                	cmp    esi,ebx
c00026b3:	0f 82 f1 fe ff ff    	jb     c00025aa <mount_volume+0xc8>
c00026b9:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026be:	0f 87 e6 fe ff ff    	ja     c00025aa <mount_volume+0xc8>
c00026c4:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026c9:	0f 86 63 03 00 00    	jbe    c0002a32 <mount_volume+0x550>
c00026cf:	bb 03 00 00 00       	mov    ebx,0x3
c00026d4:	8d 70 02             	lea    esi,[eax+0x2]
c00026d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026df:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026e2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026e5:	31 d2                	xor    edx,edx
c00026e7:	89 c8                	mov    eax,ecx
c00026e9:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026ec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026f0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026fc:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026ff:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002706:	31 d2                	xor    edx,edx
c0002708:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000270c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002710:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002713:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002716:	83 fb 03             	cmp    ebx,0x3
c0002719:	75 2b                	jne    c0002746 <mount_volume+0x264>
c000271b:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000271e:	e8 2f f3 ff ff       	call   c0001a52 <ld_word>
c0002723:	66 09 c7             	or     di,ax
c0002726:	0f 85 7e fe ff ff    	jne    c00025aa <mount_volume+0xc8>
c000272c:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002732:	c1 e6 02             	shl    esi,0x2
c0002735:	e8 25 f3 ff ff       	call   c0001a5f <ld_dword>
c000273a:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002741:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002744:	eb 30                	jmp    c0002776 <mount_volume+0x294>
c0002746:	66 85 ff             	test   di,di
c0002749:	0f 84 5b fe ff ff    	je     c00025aa <mount_volume+0xc8>
c000274f:	31 d2                	xor    edx,edx
c0002751:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002755:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002759:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000275d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002760:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002763:	83 fb 02             	cmp    ebx,0x2
c0002766:	75 04                	jne    c000276c <mount_volume+0x28a>
c0002768:	01 f6                	add    esi,esi
c000276a:	eb 0a                	jmp    c0002776 <mount_volume+0x294>
c000276c:	8d 04 76             	lea    eax,[esi+esi*2]
c000276f:	83 e6 01             	and    esi,0x1
c0002772:	d1 e8                	shr    eax,1
c0002774:	01 c6                	add    esi,eax
c0002776:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000277c:	c1 ee 09             	shr    esi,0x9
c000277f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002783:	0f 87 21 fe ff ff    	ja     c00025aa <mount_volume+0xc8>
c0002789:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002790:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002797:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000279b:	83 fb 03             	cmp    ebx,0x3
c000279e:	75 7a                	jne    c000281a <mount_volume+0x338>
c00027a0:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00027a6:	e8 a7 f2 ff ff       	call   c0001a52 <ld_word>
c00027ab:	66 48                	dec    ax
c00027ad:	75 6b                	jne    c000281a <mount_volume+0x338>
c00027af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00027b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027b7:	83 c2 01             	add    edx,0x1
c00027ba:	89 e8                	mov    eax,ebp
c00027bc:	83 d1 00             	adc    ecx,0x0
c00027bf:	e8 6c fa ff ff       	call   c0002230 <move_window>
c00027c4:	85 c0                	test   eax,eax
c00027c6:	75 52                	jne    c000281a <mount_volume+0x338>
c00027c8:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027cc:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027d2:	e8 7b f2 ff ff       	call   c0001a52 <ld_word>
c00027d7:	66 3d 55 aa          	cmp    ax,0xaa55
c00027db:	75 3d                	jne    c000281a <mount_volume+0x338>
c00027dd:	8d 45 54             	lea    eax,[ebp+0x54]
c00027e0:	e8 7a f2 ff ff       	call   c0001a5f <ld_dword>
c00027e5:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027ea:	75 2e                	jne    c000281a <mount_volume+0x338>
c00027ec:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027f2:	e8 68 f2 ff ff       	call   c0001a5f <ld_dword>
c00027f7:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027fc:	75 1c                	jne    c000281a <mount_volume+0x338>
c00027fe:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002804:	e8 56 f2 ff ff       	call   c0001a5f <ld_dword>
c0002809:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c000280c:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002812:	e8 48 f2 ff ff       	call   c0001a5f <ld_dword>
c0002817:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000281a:	66 a1 80 a3 02 c0    	mov    ax,ds:0xc002a380
c0002820:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002823:	40                   	inc    eax
c0002824:	31 db                	xor    ebx,ebx
c0002826:	66 a3 80 a3 02 c0    	mov    ds:0xc002a380,ax
c000282c:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002830:	e9 0c 02 00 00       	jmp    c0002a41 <mount_volume+0x55f>
c0002835:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c000283b:	e8 12 f2 ff ff       	call   c0001a52 <ld_word>
c0002840:	66 3d 00 01          	cmp    ax,0x100
c0002844:	0f 85 60 fd ff ff    	jne    c00025aa <mount_volume+0xc8>
c000284a:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002851:	0f 85 53 fd ff ff    	jne    c00025aa <mount_volume+0xc8>
c0002857:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000285d:	e8 15 f2 ff ff       	call   c0001a77 <ld_qword>
c0002862:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002866:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000286a:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002870:	e8 ea f1 ff ff       	call   c0001a5f <ld_dword>
c0002875:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002878:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000287e:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002881:	fe c8                	dec    al
c0002883:	0f 85 21 fd ff ff    	jne    c00025aa <mount_volume+0xc8>
c0002889:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002890:	bb 01 00 00 00       	mov    ebx,0x1
c0002895:	d3 e3                	shl    ebx,cl
c0002897:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000289b:	66 85 db             	test   bx,bx
c000289e:	0f 84 06 fd ff ff    	je     c00025aa <mount_volume+0xc8>
c00028a4:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00028aa:	e8 b0 f1 ff ff       	call   c0001a5f <ld_dword>
c00028af:	89 c6                	mov    esi,eax
c00028b1:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028b6:	0f 87 ee fc ff ff    	ja     c00025aa <mount_volume+0xc8>
c00028bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028c0:	8d 40 02             	lea    eax,[eax+0x2]
c00028c3:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028c6:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028cd:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028d0:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028d6:	e8 84 f1 ff ff       	call   c0001a5f <ld_dword>
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028ed:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028f0:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028f3:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028f9:	e8 61 f1 ff ff       	call   c0001a5f <ld_dword>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002904:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002908:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000290c:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290f:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002912:	0f b7 c3             	movzx  eax,bx
c0002915:	31 d2                	xor    edx,edx
c0002917:	0f af f0             	imul   esi,eax
c000291a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000291e:	89 f0                	mov    eax,esi
c0002920:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002924:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002928:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000292c:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002930:	39 c1                	cmp    ecx,eax
c0002932:	89 df                	mov    edi,ebx
c0002934:	19 d7                	sbb    edi,edx
c0002936:	0f 82 6e fc ff ff    	jb     c00025aa <mount_volume+0xc8>
c000293c:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002942:	31 db                	xor    ebx,ebx
c0002944:	e8 16 f1 ff ff       	call   c0001a5f <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000295b:	85 db                	test   ebx,ebx
c000295d:	75 39                	jne    c0002998 <mount_volume+0x4b6>
c000295f:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002963:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002967:	0f 86 3d fc ff ff    	jbe    c00025aa <mount_volume+0xc8>
c000296d:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002970:	31 ff                	xor    edi,edi
c0002972:	89 e8                	mov    eax,ebp
c0002974:	e8 72 f3 ff ff       	call   c0001ceb <clst2sect>
c0002979:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000297d:	01 c6                	add    esi,eax
c000297f:	89 e8                	mov    eax,ebp
c0002981:	11 d7                	adc    edi,edx
c0002983:	89 f2                	mov    edx,esi
c0002985:	89 f9                	mov    ecx,edi
c0002987:	e8 a4 f8 ff ff       	call   c0002230 <move_window>
c000298c:	85 c0                	test   eax,eax
c000298e:	0f 85 07 fc ff ff    	jne    c000259b <mount_volume+0xb9>
c0002994:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002998:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000299d:	74 0b                	je     c00029aa <mount_volume+0x4c8>
c000299f:	83 c3 20             	add    ebx,0x20
c00029a2:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00029a8:	eb b1                	jmp    c000295b <mount_volume+0x479>
c00029aa:	8d 75 54             	lea    esi,[ebp+0x54]
c00029ad:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00029b1:	e8 a9 f0 ff ff       	call   c0001a5f <ld_dword>
c00029b6:	89 c3                	mov    ebx,eax
c00029b8:	83 f8 01             	cmp    eax,0x1
c00029bb:	0f 86 e9 fb ff ff    	jbe    c00025aa <mount_volume+0xc8>
c00029c1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029c4:	0f 86 e0 fb ff ff    	jbe    c00025aa <mount_volume+0xc8>
c00029ca:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029cd:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029d1:	0f af c2             	imul   eax,edx
c00029d4:	31 d2                	xor    edx,edx
c00029d6:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029d9:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029dc:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029df:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029e2:	31 c9                	xor    ecx,ecx
c00029e4:	89 da                	mov    edx,ebx
c00029e6:	89 e8                	mov    eax,ebp
c00029e8:	c1 ea 07             	shr    edx,0x7
c00029eb:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029ee:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029f1:	e8 3a f8 ff ff       	call   c0002230 <move_window>
c00029f6:	85 c0                	test   eax,eax
c00029f8:	0f 85 9d fb ff ff    	jne    c000259b <mount_volume+0xb9>
c00029fe:	89 d8                	mov    eax,ebx
c0002a00:	83 e0 7f             	and    eax,0x7f
c0002a03:	8d 04 86             	lea    eax,[esi+eax*4]
c0002a06:	e8 54 f0 ff ff       	call   c0001a5f <ld_dword>
c0002a0b:	83 f8 ff             	cmp    eax,0xffffffff
c0002a0e:	74 0a                	je     c0002a1a <mount_volume+0x538>
c0002a10:	43                   	inc    ebx
c0002a11:	39 d8                	cmp    eax,ebx
c0002a13:	74 cd                	je     c00029e2 <mount_volume+0x500>
c0002a15:	e9 90 fb ff ff       	jmp    c00025aa <mount_volume+0xc8>
c0002a1a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a21:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a28:	bb 04 00 00 00       	mov    ebx,0x4
c0002a2d:	e9 e8 fd ff ff       	jmp    c000281a <mount_volume+0x338>
c0002a32:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002a37:	19 db                	sbb    ebx,ebx
c0002a39:	83 c3 02             	add    ebx,0x2
c0002a3c:	e9 93 fc ff ff       	jmp    c00026d4 <mount_volume+0x1f2>
c0002a41:	83 c4 3c             	add    esp,0x3c
c0002a44:	89 d8                	mov    eax,ebx
c0002a46:	5b                   	pop    ebx
c0002a47:	5e                   	pop    esi
c0002a48:	5f                   	pop    edi
c0002a49:	5d                   	pop    ebp
c0002a4a:	c3                   	ret    

c0002a4b <find_bitmap>:
c0002a4b:	55                   	push   ebp
c0002a4c:	57                   	push   edi
c0002a4d:	89 c7                	mov    edi,eax
c0002a4f:	56                   	push   esi
c0002a50:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a53:	53                   	push   ebx
c0002a54:	83 ec 1c             	sub    esp,0x1c
c0002a57:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a5a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a5e:	83 e8 02             	sub    eax,0x2
c0002a61:	39 f0                	cmp    eax,esi
c0002a63:	77 02                	ja     c0002a67 <find_bitmap+0x1c>
c0002a65:	31 f6                	xor    esi,esi
c0002a67:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a6b:	89 f3                	mov    ebx,esi
c0002a6d:	31 ed                	xor    ebp,ebp
c0002a6f:	31 c9                	xor    ecx,ecx
c0002a71:	89 da                	mov    edx,ebx
c0002a73:	89 f8                	mov    eax,edi
c0002a75:	c1 ea 0c             	shr    edx,0xc
c0002a78:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a7b:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a7e:	e8 ad f7 ff ff       	call   c0002230 <move_window>
c0002a83:	85 c0                	test   eax,eax
c0002a85:	75 68                	jne    c0002aef <find_bitmap+0xa4>
c0002a87:	89 da                	mov    edx,ebx
c0002a89:	89 d9                	mov    ecx,ebx
c0002a8b:	c1 ea 03             	shr    edx,0x3
c0002a8e:	83 e1 07             	and    ecx,0x7
c0002a91:	b8 01 00 00 00       	mov    eax,0x1
c0002a96:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a9c:	d3 e0                	shl    eax,cl
c0002a9e:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002aa1:	83 e9 02             	sub    ecx,0x2
c0002aa4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aa8:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002aac:	43                   	inc    ebx
c0002aad:	21 c1                	and    ecx,eax
c0002aaf:	d1 e0                	shl    eax,1
c0002ab1:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ab5:	77 09                	ja     c0002ac0 <find_bitmap+0x75>
c0002ab7:	31 db                	xor    ebx,ebx
c0002ab9:	ba 00 02 00 00       	mov    edx,0x200
c0002abe:	31 c0                	xor    eax,eax
c0002ac0:	84 c9                	test   cl,cl
c0002ac2:	75 10                	jne    c0002ad4 <find_bitmap+0x89>
c0002ac4:	45                   	inc    ebp
c0002ac5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ac9:	75 0f                	jne    c0002ada <find_bitmap+0x8f>
c0002acb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002acf:	83 c0 02             	add    eax,0x2
c0002ad2:	eb 22                	jmp    c0002af6 <find_bitmap+0xab>
c0002ad4:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ad8:	31 ed                	xor    ebp,ebp
c0002ada:	39 de                	cmp    esi,ebx
c0002adc:	74 16                	je     c0002af4 <find_bitmap+0xa9>
c0002ade:	84 c0                	test   al,al
c0002ae0:	75 c6                	jne    c0002aa8 <find_bitmap+0x5d>
c0002ae2:	42                   	inc    edx
c0002ae3:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002ae9:	77 84                	ja     c0002a6f <find_bitmap+0x24>
c0002aeb:	b0 01                	mov    al,0x1
c0002aed:	eb b9                	jmp    c0002aa8 <find_bitmap+0x5d>
c0002aef:	83 c8 ff             	or     eax,0xffffffff
c0002af2:	eb 02                	jmp    c0002af6 <find_bitmap+0xab>
c0002af4:	31 c0                	xor    eax,eax
c0002af6:	83 c4 1c             	add    esp,0x1c
c0002af9:	5b                   	pop    ebx
c0002afa:	5e                   	pop    esi
c0002afb:	5f                   	pop    edi
c0002afc:	5d                   	pop    ebp
c0002afd:	c3                   	ret    

c0002afe <change_bitmap>:
c0002afe:	55                   	push   ebp
c0002aff:	89 cd                	mov    ebp,ecx
c0002b01:	57                   	push   edi
c0002b02:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002b05:	56                   	push   esi
c0002b06:	89 c7                	mov    edi,eax
c0002b08:	53                   	push   ebx
c0002b09:	89 c8                	mov    eax,ecx
c0002b0b:	83 ec 1c             	sub    esp,0x1c
c0002b0e:	31 d2                	xor    edx,edx
c0002b10:	89 ce                	mov    esi,ecx
c0002b12:	c1 e8 0c             	shr    eax,0xc
c0002b15:	bb 01 00 00 00       	mov    ebx,0x1
c0002b1a:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b1d:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b20:	c1 ee 03             	shr    esi,0x3
c0002b23:	83 e1 07             	and    ecx,0x7
c0002b26:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b2c:	d3 e3                	shl    ebx,cl
c0002b2e:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b32:	89 c1                	mov    ecx,eax
c0002b34:	89 d3                	mov    ebx,edx
c0002b36:	83 c1 01             	add    ecx,0x1
c0002b39:	83 d3 00             	adc    ebx,0x0
c0002b3c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b40:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b44:	89 d1                	mov    ecx,edx
c0002b46:	89 c2                	mov    edx,eax
c0002b48:	89 f8                	mov    eax,edi
c0002b4a:	e8 e1 f6 ff ff       	call   c0002230 <move_window>
c0002b4f:	89 c1                	mov    ecx,eax
c0002b51:	85 c0                	test   eax,eax
c0002b53:	75 48                	jne    c0002b9d <change_bitmap+0x9f>
c0002b55:	31 d2                	xor    edx,edx
c0002b57:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b5b:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b5f:	0f 95 c2             	setne  dl
c0002b62:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b66:	74 3c                	je     c0002ba4 <change_bitmap+0xa6>
c0002b68:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b6c:	4d                   	dec    ebp
c0002b6d:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b71:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b75:	74 32                	je     c0002ba9 <change_bitmap+0xab>
c0002b77:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b7b:	75 d8                	jne    c0002b55 <change_bitmap+0x57>
c0002b7d:	8d 46 01             	lea    eax,[esi+0x1]
c0002b80:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b85:	89 c3                	mov    ebx,eax
c0002b87:	31 f6                	xor    esi,esi
c0002b89:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b91:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b97:	74 99                	je     c0002b32 <change_bitmap+0x34>
c0002b99:	89 de                	mov    esi,ebx
c0002b9b:	eb b8                	jmp    c0002b55 <change_bitmap+0x57>
c0002b9d:	b9 01 00 00 00       	mov    ecx,0x1
c0002ba2:	eb 05                	jmp    c0002ba9 <change_bitmap+0xab>
c0002ba4:	b9 02 00 00 00       	mov    ecx,0x2
c0002ba9:	83 c4 1c             	add    esp,0x1c
c0002bac:	89 c8                	mov    eax,ecx
c0002bae:	5b                   	pop    ebx
c0002baf:	5e                   	pop    esi
c0002bb0:	5f                   	pop    edi
c0002bb1:	5d                   	pop    ebp
c0002bb2:	c3                   	ret    

c0002bb3 <put_fat>:
c0002bb3:	83 fa 01             	cmp    edx,0x1
c0002bb6:	0f 86 7b 01 00 00    	jbe    c0002d37 <put_fat+0x184>
c0002bbc:	55                   	push   ebp
c0002bbd:	57                   	push   edi
c0002bbe:	89 cf                	mov    edi,ecx
c0002bc0:	56                   	push   esi
c0002bc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002bc6:	53                   	push   ebx
c0002bc7:	89 c6                	mov    esi,eax
c0002bc9:	83 ec 1c             	sub    esp,0x1c
c0002bcc:	89 d3                	mov    ebx,edx
c0002bce:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bd1:	0f 86 68 01 00 00    	jbe    c0002d3f <put_fat+0x18c>
c0002bd7:	8a 00                	mov    al,BYTE PTR [eax]
c0002bd9:	3c 02                	cmp    al,0x2
c0002bdb:	0f 84 c7 00 00 00    	je     c0002ca8 <put_fat+0xf5>
c0002be1:	77 09                	ja     c0002bec <put_fat+0x39>
c0002be3:	fe c8                	dec    al
c0002be5:	74 17                	je     c0002bfe <put_fat+0x4b>
c0002be7:	e9 53 01 00 00       	jmp    c0002d3f <put_fat+0x18c>
c0002bec:	b9 02 00 00 00       	mov    ecx,0x2
c0002bf1:	3c 04                	cmp    al,0x4
c0002bf3:	0f 86 e1 00 00 00    	jbe    c0002cda <put_fat+0x127>
c0002bf9:	e9 41 01 00 00       	jmp    c0002d3f <put_fat+0x18c>
c0002bfe:	89 d5                	mov    ebp,edx
c0002c00:	31 c9                	xor    ecx,ecx
c0002c02:	d1 ed                	shr    ebp,1
c0002c04:	89 f0                	mov    eax,esi
c0002c06:	01 d5                	add    ebp,edx
c0002c08:	89 ea                	mov    edx,ebp
c0002c0a:	c1 ea 09             	shr    edx,0x9
c0002c0d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c10:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c13:	e8 18 f6 ff ff       	call   c0002230 <move_window>
c0002c18:	89 c1                	mov    ecx,eax
c0002c1a:	85 c0                	test   eax,eax
c0002c1c:	0f 85 1d 01 00 00    	jne    c0002d3f <put_fat+0x18c>
c0002c22:	8d 46 54             	lea    eax,[esi+0x54]
c0002c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c29:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c2c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c32:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c36:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c3a:	89 f8                	mov    eax,edi
c0002c3c:	83 e3 01             	and    ebx,0x1
c0002c3f:	74 0d                	je     c0002c4e <put_fat+0x9b>
c0002c41:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c44:	89 fa                	mov    edx,edi
c0002c46:	83 e0 0f             	and    eax,0xf
c0002c49:	c1 e2 04             	shl    edx,0x4
c0002c4c:	09 d0                	or     eax,edx
c0002c4e:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c51:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c55:	31 c9                	xor    ecx,ecx
c0002c57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c5b:	c1 ea 09             	shr    edx,0x9
c0002c5e:	89 f0                	mov    eax,esi
c0002c60:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c63:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c66:	e8 c5 f5 ff ff       	call   c0002230 <move_window>
c0002c6b:	89 c1                	mov    ecx,eax
c0002c6d:	85 c0                	test   eax,eax
c0002c6f:	0f 85 ca 00 00 00    	jne    c0002d3f <put_fat+0x18c>
c0002c75:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c79:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c7f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c83:	85 db                	test   ebx,ebx
c0002c85:	74 07                	je     c0002c8e <put_fat+0xdb>
c0002c87:	c1 ef 04             	shr    edi,0x4
c0002c8a:	89 fa                	mov    edx,edi
c0002c8c:	eb 0e                	jmp    c0002c9c <put_fat+0xe9>
c0002c8e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c91:	c1 ef 08             	shr    edi,0x8
c0002c94:	83 e2 f0             	and    edx,0xfffffff0
c0002c97:	83 e7 0f             	and    edi,0xf
c0002c9a:	09 fa                	or     edx,edi
c0002c9c:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c9f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002ca3:	e9 97 00 00 00       	jmp    c0002d3f <put_fat+0x18c>
c0002ca8:	31 c9                	xor    ecx,ecx
c0002caa:	c1 ea 08             	shr    edx,0x8
c0002cad:	89 f0                	mov    eax,esi
c0002caf:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002cb2:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cb5:	e8 76 f5 ff ff       	call   c0002230 <move_window>
c0002cba:	89 c1                	mov    ecx,eax
c0002cbc:	85 c0                	test   eax,eax
c0002cbe:	75 7f                	jne    c0002d3f <put_fat+0x18c>
c0002cc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cc4:	01 db                	add    ebx,ebx
c0002cc6:	0f b7 d7             	movzx  edx,di
c0002cc9:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ccf:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002cd3:	e8 ec ed ff ff       	call   c0001ac4 <st_word>
c0002cd8:	eb 53                	jmp    c0002d2d <put_fat+0x17a>
c0002cda:	31 c9                	xor    ecx,ecx
c0002cdc:	c1 ea 07             	shr    edx,0x7
c0002cdf:	89 f0                	mov    eax,esi
c0002ce1:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ce4:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ce7:	e8 44 f5 ff ff       	call   c0002230 <move_window>
c0002cec:	89 c1                	mov    ecx,eax
c0002cee:	85 c0                	test   eax,eax
c0002cf0:	75 4d                	jne    c0002d3f <put_fat+0x18c>
c0002cf2:	c1 e3 02             	shl    ebx,0x2
c0002cf5:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cfb:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cfe:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002d02:	74 1c                	je     c0002d20 <put_fat+0x16d>
c0002d04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d08:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d0e:	89 d8                	mov    eax,ebx
c0002d10:	e8 4a ed ff ff       	call   c0001a5f <ld_dword>
c0002d15:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d19:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d1e:	09 c7                	or     edi,eax
c0002d20:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d24:	89 fa                	mov    edx,edi
c0002d26:	89 d8                	mov    eax,ebx
c0002d28:	e8 9b ed ff ff       	call   c0001ac8 <st_dword>
c0002d2d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d35:	eb 08                	jmp    c0002d3f <put_fat+0x18c>
c0002d37:	b9 02 00 00 00       	mov    ecx,0x2
c0002d3c:	89 c8                	mov    eax,ecx
c0002d3e:	c3                   	ret    
c0002d3f:	83 c4 1c             	add    esp,0x1c
c0002d42:	89 c8                	mov    eax,ecx
c0002d44:	5b                   	pop    ebx
c0002d45:	5e                   	pop    esi
c0002d46:	5f                   	pop    edi
c0002d47:	5d                   	pop    ebp
c0002d48:	c3                   	ret    

c0002d49 <fill_last_frag>:
c0002d49:	57                   	push   edi
c0002d4a:	89 cf                	mov    edi,ecx
c0002d4c:	56                   	push   esi
c0002d4d:	89 d6                	mov    esi,edx
c0002d4f:	53                   	push   ebx
c0002d50:	89 c3                	mov    ebx,eax
c0002d52:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d55:	85 c0                	test   eax,eax
c0002d57:	74 21                	je     c0002d7a <fill_last_frag+0x31>
c0002d59:	89 f9                	mov    ecx,edi
c0002d5b:	83 f8 01             	cmp    eax,0x1
c0002d5e:	76 05                	jbe    c0002d65 <fill_last_frag+0x1c>
c0002d60:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d63:	29 c1                	sub    ecx,eax
c0002d65:	8d 56 01             	lea    edx,[esi+0x1]
c0002d68:	29 c2                	sub    edx,eax
c0002d6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d6c:	e8 42 fe ff ff       	call   c0002bb3 <put_fat>
c0002d71:	85 c0                	test   eax,eax
c0002d73:	75 05                	jne    c0002d7a <fill_last_frag+0x31>
c0002d75:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d78:	eb d8                	jmp    c0002d52 <fill_last_frag+0x9>
c0002d7a:	5b                   	pop    ebx
c0002d7b:	5e                   	pop    esi
c0002d7c:	5f                   	pop    edi
c0002d7d:	c3                   	ret    

c0002d7e <fill_first_frag>:
c0002d7e:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d82:	75 2d                	jne    c0002db1 <fill_first_frag+0x33>
c0002d84:	57                   	push   edi
c0002d85:	56                   	push   esi
c0002d86:	53                   	push   ebx
c0002d87:	89 c3                	mov    ebx,eax
c0002d89:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d8c:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d8f:	01 d7                	add    edi,edx
c0002d91:	39 fa                	cmp    edx,edi
c0002d93:	74 14                	je     c0002da9 <fill_first_frag+0x2b>
c0002d95:	8d 72 01             	lea    esi,[edx+0x1]
c0002d98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d9a:	89 f1                	mov    ecx,esi
c0002d9c:	e8 12 fe ff ff       	call   c0002bb3 <put_fat>
c0002da1:	89 f2                	mov    edx,esi
c0002da3:	85 c0                	test   eax,eax
c0002da5:	74 ea                	je     c0002d91 <fill_first_frag+0x13>
c0002da7:	eb 0b                	jmp    c0002db4 <fill_first_frag+0x36>
c0002da9:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002dad:	31 c0                	xor    eax,eax
c0002daf:	eb 03                	jmp    c0002db4 <fill_first_frag+0x36>
c0002db1:	31 c0                	xor    eax,eax
c0002db3:	c3                   	ret    
c0002db4:	5b                   	pop    ebx
c0002db5:	5e                   	pop    esi
c0002db6:	5f                   	pop    edi
c0002db7:	c3                   	ret    

c0002db8 <get_fat>:
c0002db8:	83 fa 01             	cmp    edx,0x1
c0002dbb:	0f 86 db 01 00 00    	jbe    c0002f9c <get_fat+0x1e4>
c0002dc1:	55                   	push   ebp
c0002dc2:	b9 01 00 00 00       	mov    ecx,0x1
c0002dc7:	57                   	push   edi
c0002dc8:	56                   	push   esi
c0002dc9:	53                   	push   ebx
c0002dca:	83 ec 1c             	sub    esp,0x1c
c0002dcd:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dcf:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dd2:	0f 86 cc 01 00 00    	jbe    c0002fa4 <get_fat+0x1ec>
c0002dd8:	89 c3                	mov    ebx,eax
c0002dda:	89 d6                	mov    esi,edx
c0002ddc:	8a 07                	mov    al,BYTE PTR [edi]
c0002dde:	3c 02                	cmp    al,0x2
c0002de0:	0f 84 99 00 00 00    	je     c0002e7f <get_fat+0xc7>
c0002de6:	77 09                	ja     c0002df1 <get_fat+0x39>
c0002de8:	fe c8                	dec    al
c0002dea:	74 1a                	je     c0002e06 <get_fat+0x4e>
c0002dec:	e9 b3 01 00 00       	jmp    c0002fa4 <get_fat+0x1ec>
c0002df1:	3c 03                	cmp    al,0x3
c0002df3:	0f 84 b5 00 00 00    	je     c0002eae <get_fat+0xf6>
c0002df9:	3c 04                	cmp    al,0x4
c0002dfb:	0f 84 e3 00 00 00    	je     c0002ee4 <get_fat+0x12c>
c0002e01:	e9 9e 01 00 00       	jmp    c0002fa4 <get_fat+0x1ec>
c0002e06:	89 d3                	mov    ebx,edx
c0002e08:	31 c9                	xor    ecx,ecx
c0002e0a:	d1 eb                	shr    ebx,1
c0002e0c:	89 f8                	mov    eax,edi
c0002e0e:	01 d3                	add    ebx,edx
c0002e10:	89 da                	mov    edx,ebx
c0002e12:	c1 ea 09             	shr    edx,0x9
c0002e15:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e18:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e1b:	e8 10 f4 ff ff       	call   c0002230 <move_window>
c0002e20:	85 c0                	test   eax,eax
c0002e22:	74 08                	je     c0002e2c <get_fat+0x74>
c0002e24:	83 c9 ff             	or     ecx,0xffffffff
c0002e27:	e9 78 01 00 00       	jmp    c0002fa4 <get_fat+0x1ec>
c0002e2c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e2f:	31 c9                	xor    ecx,ecx
c0002e31:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e37:	89 ea                	mov    edx,ebp
c0002e39:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e3d:	c1 ea 09             	shr    edx,0x9
c0002e40:	89 f8                	mov    eax,edi
c0002e42:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e45:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e48:	e8 e3 f3 ff ff       	call   c0002230 <move_window>
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	75 d3                	jne    c0002e24 <get_fat+0x6c>
c0002e51:	0f b6 c3             	movzx  eax,bl
c0002e54:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e5a:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e5f:	c1 e3 08             	shl    ebx,0x8
c0002e62:	09 c3                	or     ebx,eax
c0002e64:	89 d9                	mov    ecx,ebx
c0002e66:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e6c:	83 e6 01             	and    esi,0x1
c0002e6f:	0f 84 2f 01 00 00    	je     c0002fa4 <get_fat+0x1ec>
c0002e75:	89 d9                	mov    ecx,ebx
c0002e77:	c1 e9 04             	shr    ecx,0x4
c0002e7a:	e9 25 01 00 00       	jmp    c0002fa4 <get_fat+0x1ec>
c0002e7f:	31 c9                	xor    ecx,ecx
c0002e81:	c1 ea 08             	shr    edx,0x8
c0002e84:	89 f8                	mov    eax,edi
c0002e86:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e89:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e8c:	e8 9f f3 ff ff       	call   c0002230 <move_window>
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 8f                	jne    c0002e24 <get_fat+0x6c>
c0002e95:	01 f6                	add    esi,esi
c0002e97:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e9d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ea1:	e8 ac eb ff ff       	call   c0001a52 <ld_word>
c0002ea6:	0f b7 c8             	movzx  ecx,ax
c0002ea9:	e9 f6 00 00 00       	jmp    c0002fa4 <get_fat+0x1ec>
c0002eae:	31 c9                	xor    ecx,ecx
c0002eb0:	c1 ea 07             	shr    edx,0x7
c0002eb3:	89 f8                	mov    eax,edi
c0002eb5:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002eb8:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ebb:	e8 70 f3 ff ff       	call   c0002230 <move_window>
c0002ec0:	85 c0                	test   eax,eax
c0002ec2:	0f 85 5c ff ff ff    	jne    c0002e24 <get_fat+0x6c>
c0002ec8:	c1 e6 02             	shl    esi,0x2
c0002ecb:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ed1:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ed5:	e8 85 eb ff ff       	call   c0001a5f <ld_dword>
c0002eda:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002edf:	e9 b4 00 00 00       	jmp    c0002f98 <get_fat+0x1e0>
c0002ee4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ee7:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002eea:	89 d1                	mov    ecx,edx
c0002eec:	09 c1                	or     ecx,eax
c0002eee:	74 06                	je     c0002ef6 <get_fat+0x13e>
c0002ef0:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ef4:	75 0f                	jne    c0002f05 <get_fat+0x14d>
c0002ef6:	b9 01 00 00 00       	mov    ecx,0x1
c0002efb:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002eff:	0f 85 9f 00 00 00    	jne    c0002fa4 <get_fat+0x1ec>
c0002f05:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002f09:	89 f5                	mov    ebp,esi
c0002f0b:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002f10:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f13:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f16:	80 f9 02             	cmp    cl,0x2
c0002f19:	75 35                	jne    c0002f50 <get_fat+0x198>
c0002f1b:	83 c0 ff             	add    eax,0xffffffff
c0002f1e:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f23:	83 d2 ff             	adc    edx,0xffffffff
c0002f26:	31 db                	xor    ebx,ebx
c0002f28:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f2c:	53                   	push   ebx
c0002f2d:	c1 ea 09             	shr    edx,0x9
c0002f30:	51                   	push   ecx
c0002f31:	52                   	push   edx
c0002f32:	50                   	push   eax
c0002f33:	e8 24 04 02 00       	call   c002335c <__udivdi3>
c0002f38:	83 c4 10             	add    esp,0x10
c0002f3b:	b9 01 00 00 00       	mov    ecx,0x1
c0002f40:	39 c5                	cmp    ebp,eax
c0002f42:	77 60                	ja     c0002fa4 <get_fat+0x1ec>
c0002f44:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f49:	74 59                	je     c0002fa4 <get_fat+0x1ec>
c0002f4b:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f4e:	eb 54                	jmp    c0002fa4 <get_fat+0x1ec>
c0002f50:	80 f9 03             	cmp    cl,0x3
c0002f53:	75 05                	jne    c0002f5a <get_fat+0x1a2>
c0002f55:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f58:	77 f1                	ja     c0002f4b <get_fat+0x193>
c0002f5a:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f5f:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f63:	75 3f                	jne    c0002fa4 <get_fat+0x1ec>
c0002f65:	31 c9                	xor    ecx,ecx
c0002f67:	89 f2                	mov    edx,esi
c0002f69:	89 f8                	mov    eax,edi
c0002f6b:	c1 ea 07             	shr    edx,0x7
c0002f6e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f71:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f74:	e8 b7 f2 ff ff       	call   c0002230 <move_window>
c0002f79:	85 c0                	test   eax,eax
c0002f7b:	0f 85 a3 fe ff ff    	jne    c0002e24 <get_fat+0x6c>
c0002f81:	c1 e6 02             	shl    esi,0x2
c0002f84:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f8a:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f8e:	e8 cc ea ff ff       	call   c0001a5f <ld_dword>
c0002f93:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f98:	89 c1                	mov    ecx,eax
c0002f9a:	eb 08                	jmp    c0002fa4 <get_fat+0x1ec>
c0002f9c:	b9 01 00 00 00       	mov    ecx,0x1
c0002fa1:	89 c8                	mov    eax,ecx
c0002fa3:	c3                   	ret    
c0002fa4:	83 c4 1c             	add    esp,0x1c
c0002fa7:	89 c8                	mov    eax,ecx
c0002fa9:	5b                   	pop    ebx
c0002faa:	5e                   	pop    esi
c0002fab:	5f                   	pop    edi
c0002fac:	5d                   	pop    ebp
c0002fad:	c3                   	ret    

c0002fae <dir_sdi>:
c0002fae:	55                   	push   ebp
c0002faf:	57                   	push   edi
c0002fb0:	56                   	push   esi
c0002fb1:	53                   	push   ebx
c0002fb2:	89 c3                	mov    ebx,eax
c0002fb4:	83 ec 1c             	sub    esp,0x1c
c0002fb7:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fb9:	31 c0                	xor    eax,eax
c0002fbb:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fbe:	0f 94 c0             	sete   al
c0002fc1:	48                   	dec    eax
c0002fc2:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fc7:	05 00 00 00 10       	add    eax,0x10000000
c0002fcc:	39 d0                	cmp    eax,edx
c0002fce:	77 0a                	ja     c0002fda <dir_sdi+0x2c>
c0002fd0:	b8 02 00 00 00       	mov    eax,0x2
c0002fd5:	e9 c4 00 00 00       	jmp    c000309e <dir_sdi+0xf0>
c0002fda:	89 d6                	mov    esi,edx
c0002fdc:	f6 c2 1f             	test   dl,0x1f
c0002fdf:	75 ef                	jne    c0002fd0 <dir_sdi+0x22>
c0002fe1:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fe4:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fe7:	85 c9                	test   ecx,ecx
c0002fe9:	75 2d                	jne    c0003018 <dir_sdi+0x6a>
c0002feb:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fee:	77 1b                	ja     c000300b <dir_sdi+0x5d>
c0002ff0:	89 f2                	mov    edx,esi
c0002ff2:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002ff6:	c1 ea 05             	shr    edx,0x5
c0002ff9:	39 c2                	cmp    edx,eax
c0002ffb:	73 d3                	jae    c0002fd0 <dir_sdi+0x22>
c0002ffd:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003000:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003003:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003006:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003009:	eb 4b                	jmp    c0003056 <dir_sdi+0xa8>
c000300b:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000300e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003012:	85 c0                	test   eax,eax
c0003014:	74 da                	je     c0002ff0 <dir_sdi+0x42>
c0003016:	89 c1                	mov    ecx,eax
c0003018:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000301c:	c1 e5 09             	shl    ebp,0x9
c000301f:	89 ca                	mov    edx,ecx
c0003021:	39 ee                	cmp    esi,ebp
c0003023:	72 1c                	jb     c0003041 <dir_sdi+0x93>
c0003025:	89 d8                	mov    eax,ebx
c0003027:	e8 8c fd ff ff       	call   c0002db8 <get_fat>
c000302c:	89 c1                	mov    ecx,eax
c000302e:	83 f8 ff             	cmp    eax,0xffffffff
c0003031:	74 66                	je     c0003099 <dir_sdi+0xeb>
c0003033:	83 f8 01             	cmp    eax,0x1
c0003036:	76 98                	jbe    c0002fd0 <dir_sdi+0x22>
c0003038:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000303b:	76 93                	jbe    c0002fd0 <dir_sdi+0x22>
c000303d:	29 ee                	sub    esi,ebp
c000303f:	eb de                	jmp    c000301f <dir_sdi+0x71>
c0003041:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003045:	89 f8                	mov    eax,edi
c0003047:	e8 9f ec ff ff       	call   c0001ceb <clst2sect>
c000304c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003050:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003053:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003056:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003059:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000305c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000305f:	89 d1                	mov    ecx,edx
c0003061:	09 c1                	or     ecx,eax
c0003063:	0f 84 67 ff ff ff    	je     c0002fd0 <dir_sdi+0x22>
c0003069:	89 f1                	mov    ecx,esi
c000306b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003073:	c1 e9 09             	shr    ecx,0x9
c0003076:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000307a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000307e:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003082:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003085:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000308b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000308e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003092:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003095:	31 c0                	xor    eax,eax
c0003097:	eb 05                	jmp    c000309e <dir_sdi+0xf0>
c0003099:	b8 01 00 00 00       	mov    eax,0x1
c000309e:	83 c4 1c             	add    esp,0x1c
c00030a1:	5b                   	pop    ebx
c00030a2:	5e                   	pop    esi
c00030a3:	5f                   	pop    edi
c00030a4:	5d                   	pop    ebp
c00030a5:	c3                   	ret    

c00030a6 <create_chain>:
c00030a6:	55                   	push   ebp
c00030a7:	89 c5                	mov    ebp,eax
c00030a9:	57                   	push   edi
c00030aa:	56                   	push   esi
c00030ab:	53                   	push   ebx
c00030ac:	83 ec 1c             	sub    esp,0x1c
c00030af:	85 d2                	test   edx,edx
c00030b1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030b5:	8b 30                	mov    esi,DWORD PTR [eax]
c00030b7:	75 0e                	jne    c00030c7 <create_chain+0x21>
c00030b9:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030bc:	85 ff                	test   edi,edi
c00030be:	74 39                	je     c00030f9 <create_chain+0x53>
c00030c0:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030c3:	77 39                	ja     c00030fe <create_chain+0x58>
c00030c5:	eb 32                	jmp    c00030f9 <create_chain+0x53>
c00030c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030cb:	e8 e8 fc ff ff       	call   c0002db8 <get_fat>
c00030d0:	89 c3                	mov    ebx,eax
c00030d2:	83 f8 01             	cmp    eax,0x1
c00030d5:	77 0a                	ja     c00030e1 <create_chain+0x3b>
c00030d7:	bb 01 00 00 00       	mov    ebx,0x1
c00030dc:	e9 ba 01 00 00       	jmp    c000329b <create_chain+0x1f5>
c00030e1:	83 f8 ff             	cmp    eax,0xffffffff
c00030e4:	0f 84 62 01 00 00    	je     c000324c <create_chain+0x1a6>
c00030ea:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030ed:	0f 87 a8 01 00 00    	ja     c000329b <create_chain+0x1f5>
c00030f3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030f7:	eb 05                	jmp    c00030fe <create_chain+0x58>
c00030f9:	bf 01 00 00 00       	mov    edi,0x1
c00030fe:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003102:	75 07                	jne    c000310b <create_chain+0x65>
c0003104:	31 db                	xor    ebx,ebx
c0003106:	e9 90 01 00 00       	jmp    c000329b <create_chain+0x1f5>
c000310b:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000310e:	75 74                	jne    c0003184 <create_chain+0xde>
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	89 fa                	mov    edx,edi
c0003117:	89 f0                	mov    eax,esi
c0003119:	e8 2d f9 ff ff       	call   c0002a4b <find_bitmap>
c000311e:	89 c3                	mov    ebx,eax
c0003120:	8d 40 ff             	lea    eax,[eax-0x1]
c0003123:	83 f8 fd             	cmp    eax,0xfffffffd
c0003126:	0f 87 6f 01 00 00    	ja     c000329b <create_chain+0x1f5>
c000312c:	83 ec 0c             	sub    esp,0xc
c000312f:	b9 01 00 00 00       	mov    ecx,0x1
c0003134:	6a 01                	push   0x1
c0003136:	89 da                	mov    edx,ebx
c0003138:	89 f0                	mov    eax,esi
c000313a:	e8 bf f9 ff ff       	call   c0002afe <change_bitmap>
c000313f:	83 c4 10             	add    esp,0x10
c0003142:	83 f8 02             	cmp    eax,0x2
c0003145:	74 90                	je     c00030d7 <create_chain+0x31>
c0003147:	83 f8 01             	cmp    eax,0x1
c000314a:	0f 84 fc 00 00 00    	je     c000324c <create_chain+0x1a6>
c0003150:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003155:	75 09                	jne    c0003160 <create_chain+0xba>
c0003157:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000315b:	e9 0c 01 00 00       	jmp    c000326c <create_chain+0x1c6>
c0003160:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003164:	0f 85 e7 00 00 00    	jne    c0003251 <create_chain+0x1ab>
c000316a:	8d 57 01             	lea    edx,[edi+0x1]
c000316d:	39 da                	cmp    edx,ebx
c000316f:	0f 84 f7 00 00 00    	je     c000326c <create_chain+0x1c6>
c0003175:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003178:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000317c:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000317f:	e9 cd 00 00 00       	jmp    c0003251 <create_chain+0x1ab>
c0003184:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003188:	75 41                	jne    c00031cb <create_chain+0x125>
c000318a:	8d 5f 01             	lea    ebx,[edi+0x1]
c000318d:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003190:	77 05                	ja     c0003197 <create_chain+0xf1>
c0003192:	bb 02 00 00 00       	mov    ebx,0x2
c0003197:	89 da                	mov    edx,ebx
c0003199:	89 e8                	mov    eax,ebp
c000319b:	e8 18 fc ff ff       	call   c0002db8 <get_fat>
c00031a0:	83 f8 01             	cmp    eax,0x1
c00031a3:	0f 84 2e ff ff ff    	je     c00030d7 <create_chain+0x31>
c00031a9:	83 f8 ff             	cmp    eax,0xffffffff
c00031ac:	0f 84 9a 00 00 00    	je     c000324c <create_chain+0x1a6>
c00031b2:	85 c0                	test   eax,eax
c00031b4:	74 11                	je     c00031c7 <create_chain+0x121>
c00031b6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031b9:	83 f8 01             	cmp    eax,0x1
c00031bc:	76 0d                	jbe    c00031cb <create_chain+0x125>
c00031be:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031c1:	76 08                	jbe    c00031cb <create_chain+0x125>
c00031c3:	89 c7                	mov    edi,eax
c00031c5:	eb 04                	jmp    c00031cb <create_chain+0x125>
c00031c7:	85 db                	test   ebx,ebx
c00031c9:	75 38                	jne    c0003203 <create_chain+0x15d>
c00031cb:	89 fb                	mov    ebx,edi
c00031cd:	43                   	inc    ebx
c00031ce:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031d1:	77 0e                	ja     c00031e1 <create_chain+0x13b>
c00031d3:	83 ff 01             	cmp    edi,0x1
c00031d6:	0f 86 28 ff ff ff    	jbe    c0003104 <create_chain+0x5e>
c00031dc:	bb 02 00 00 00       	mov    ebx,0x2
c00031e1:	89 da                	mov    edx,ebx
c00031e3:	89 e8                	mov    eax,ebp
c00031e5:	e8 ce fb ff ff       	call   c0002db8 <get_fat>
c00031ea:	85 c0                	test   eax,eax
c00031ec:	74 15                	je     c0003203 <create_chain+0x15d>
c00031ee:	83 f8 01             	cmp    eax,0x1
c00031f1:	0f 84 e0 fe ff ff    	je     c00030d7 <create_chain+0x31>
c00031f7:	40                   	inc    eax
c00031f8:	74 52                	je     c000324c <create_chain+0x1a6>
c00031fa:	39 fb                	cmp    ebx,edi
c00031fc:	75 cf                	jne    c00031cd <create_chain+0x127>
c00031fe:	e9 01 ff ff ff       	jmp    c0003104 <create_chain+0x5e>
c0003203:	83 c9 ff             	or     ecx,0xffffffff
c0003206:	89 da                	mov    edx,ebx
c0003208:	89 f0                	mov    eax,esi
c000320a:	e8 a4 f9 ff ff       	call   c0002bb3 <put_fat>
c000320f:	85 c0                	test   eax,eax
c0003211:	75 32                	jne    c0003245 <create_chain+0x19f>
c0003213:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003218:	74 11                	je     c000322b <create_chain+0x185>
c000321a:	89 d9                	mov    ecx,ebx
c000321c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 8c f9 ff ff       	call   c0002bb3 <put_fat>
c0003227:	85 c0                	test   eax,eax
c0003229:	75 1a                	jne    c0003245 <create_chain+0x19f>
c000322b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000322e:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003231:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003234:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003237:	39 d0                	cmp    eax,edx
c0003239:	77 04                	ja     c000323f <create_chain+0x199>
c000323b:	48                   	dec    eax
c000323c:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000323f:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003243:	eb 56                	jmp    c000329b <create_chain+0x1f5>
c0003245:	48                   	dec    eax
c0003246:	0f 85 8b fe ff ff    	jne    c00030d7 <create_chain+0x31>
c000324c:	83 cb ff             	or     ebx,0xffffffff
c000324f:	eb 4a                	jmp    c000329b <create_chain+0x1f5>
c0003251:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003255:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003258:	41                   	inc    ecx
c0003259:	39 d9                	cmp    ecx,ebx
c000325b:	75 19                	jne    c0003276 <create_chain+0x1d0>
c000325d:	b9 02 00 00 00       	mov    ecx,0x2
c0003262:	85 d2                	test   edx,edx
c0003264:	74 03                	je     c0003269 <create_chain+0x1c3>
c0003266:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003269:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000326c:	85 c0                	test   eax,eax
c000326e:	0f 85 63 fe ff ff    	jne    c00030d7 <create_chain+0x31>
c0003274:	eb b5                	jmp    c000322b <create_chain+0x185>
c0003276:	85 d2                	test   edx,edx
c0003278:	75 07                	jne    c0003281 <create_chain+0x1db>
c000327a:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003281:	89 d9                	mov    ecx,ebx
c0003283:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003287:	89 e8                	mov    eax,ebp
c0003289:	e8 bb fa ff ff       	call   c0002d49 <fill_last_frag>
c000328e:	85 c0                	test   eax,eax
c0003290:	75 b3                	jne    c0003245 <create_chain+0x19f>
c0003292:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003299:	eb 90                	jmp    c000322b <create_chain+0x185>
c000329b:	83 c4 1c             	add    esp,0x1c
c000329e:	89 d8                	mov    eax,ebx
c00032a0:	5b                   	pop    ebx
c00032a1:	5e                   	pop    esi
c00032a2:	5f                   	pop    edi
c00032a3:	5d                   	pop    ebp
c00032a4:	c3                   	ret    

c00032a5 <remove_chain>:
c00032a5:	55                   	push   ebp
c00032a6:	57                   	push   edi
c00032a7:	56                   	push   esi
c00032a8:	53                   	push   ebx
c00032a9:	83 ec 1c             	sub    esp,0x1c
c00032ac:	83 fa 01             	cmp    edx,0x1
c00032af:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032b3:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032b5:	77 0a                	ja     c00032c1 <remove_chain+0x1c>
c00032b7:	b8 02 00 00 00       	mov    eax,0x2
c00032bc:	e9 24 01 00 00       	jmp    c00033e5 <remove_chain+0x140>
c00032c1:	89 d6                	mov    esi,edx
c00032c3:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032c6:	76 ef                	jbe    c00032b7 <remove_chain+0x12>
c00032c8:	89 c7                	mov    edi,eax
c00032ca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032cf:	75 06                	jne    c00032d7 <remove_chain+0x32>
c00032d1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032d5:	eb 54                	jmp    c000332b <remove_chain+0x86>
c00032d7:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032da:	75 06                	jne    c00032e2 <remove_chain+0x3d>
c00032dc:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032e0:	74 ef                	je     c00032d1 <remove_chain+0x2c>
c00032e2:	83 c9 ff             	or     ecx,0xffffffff
c00032e5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032e9:	89 d8                	mov    eax,ebx
c00032eb:	e8 c3 f8 ff ff       	call   c0002bb3 <put_fat>
c00032f0:	85 c0                	test   eax,eax
c00032f2:	74 dd                	je     c00032d1 <remove_chain+0x2c>
c00032f4:	e9 ec 00 00 00       	jmp    c00033e5 <remove_chain+0x140>
c00032f9:	83 f8 01             	cmp    eax,0x1
c00032fc:	74 b9                	je     c00032b7 <remove_chain+0x12>
c00032fe:	83 f8 ff             	cmp    eax,0xffffffff
c0003301:	74 6d                	je     c0003370 <remove_chain+0xcb>
c0003303:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003306:	75 6f                	jne    c0003377 <remove_chain+0xd2>
c0003308:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000330b:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000330e:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003311:	39 d0                	cmp    eax,edx
c0003313:	73 08                	jae    c000331d <remove_chain+0x78>
c0003315:	40                   	inc    eax
c0003316:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000331a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000331d:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003320:	39 e9                	cmp    ecx,ebp
c0003322:	75 64                	jne    c0003388 <remove_chain+0xe3>
c0003324:	89 ee                	mov    esi,ebp
c0003326:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003329:	76 0f                	jbe    c000333a <remove_chain+0x95>
c000332b:	89 f2                	mov    edx,esi
c000332d:	89 f8                	mov    eax,edi
c000332f:	e8 84 fa ff ff       	call   c0002db8 <get_fat>
c0003334:	89 c5                	mov    ebp,eax
c0003336:	85 c0                	test   eax,eax
c0003338:	75 bf                	jne    c00032f9 <remove_chain+0x54>
c000333a:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000333d:	0f 85 a0 00 00 00    	jne    c00033e3 <remove_chain+0x13e>
c0003343:	eb 6c                	jmp    c00033b1 <remove_chain+0x10c>
c0003345:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003348:	84 c0                	test   al,al
c000334a:	75 7d                	jne    c00033c9 <remove_chain+0x124>
c000334c:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000334f:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003353:	0f 84 86 00 00 00    	je     c00033df <remove_chain+0x13a>
c0003359:	89 da                	mov    edx,ebx
c000335b:	89 f8                	mov    eax,edi
c000335d:	e8 56 fa ff ff       	call   c0002db8 <get_fat>
c0003362:	83 f8 01             	cmp    eax,0x1
c0003365:	0f 86 4c ff ff ff    	jbe    c00032b7 <remove_chain+0x12>
c000336b:	83 f8 ff             	cmp    eax,0xffffffff
c000336e:	75 4e                	jne    c00033be <remove_chain+0x119>
c0003370:	b8 01 00 00 00       	mov    eax,0x1
c0003375:	eb 6e                	jmp    c00033e5 <remove_chain+0x140>
c0003377:	31 c9                	xor    ecx,ecx
c0003379:	89 f2                	mov    edx,esi
c000337b:	89 d8                	mov    eax,ebx
c000337d:	e8 31 f8 ff ff       	call   c0002bb3 <put_fat>
c0003382:	85 c0                	test   eax,eax
c0003384:	74 82                	je     c0003308 <remove_chain+0x63>
c0003386:	eb 5d                	jmp    c00033e5 <remove_chain+0x140>
c0003388:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000338b:	75 1b                	jne    c00033a8 <remove_chain+0x103>
c000338d:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003391:	89 d8                	mov    eax,ebx
c0003393:	83 ec 0c             	sub    esp,0xc
c0003396:	6a 00                	push   0x0
c0003398:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000339c:	e8 5d f7 ff ff       	call   c0002afe <change_bitmap>
c00033a1:	83 c4 10             	add    esp,0x10
c00033a4:	85 c0                	test   eax,eax
c00033a6:	75 3d                	jne    c00033e5 <remove_chain+0x140>
c00033a8:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00033ac:	e9 73 ff ff ff       	jmp    c0003324 <remove_chain+0x7f>
c00033b1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033b6:	75 8d                	jne    c0003345 <remove_chain+0xa0>
c00033b8:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033bc:	eb 25                	jmp    c00033e3 <remove_chain+0x13e>
c00033be:	8d 53 01             	lea    edx,[ebx+0x1]
c00033c1:	89 c3                	mov    ebx,eax
c00033c3:	39 c2                	cmp    edx,eax
c00033c5:	74 88                	je     c000334f <remove_chain+0xaa>
c00033c7:	eb 1a                	jmp    c00033e3 <remove_chain+0x13e>
c00033c9:	3c 03                	cmp    al,0x3
c00033cb:	75 16                	jne    c00033e3 <remove_chain+0x13e>
c00033cd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033d0:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033d4:	77 0d                	ja     c00033e3 <remove_chain+0x13e>
c00033d6:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033dd:	72 04                	jb     c00033e3 <remove_chain+0x13e>
c00033df:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033e3:	31 c0                	xor    eax,eax
c00033e5:	83 c4 1c             	add    esp,0x1c
c00033e8:	5b                   	pop    ebx
c00033e9:	5e                   	pop    esi
c00033ea:	5f                   	pop    edi
c00033eb:	5d                   	pop    ebp
c00033ec:	c3                   	ret    

c00033ed <dir_clear>:
c00033ed:	55                   	push   ebp
c00033ee:	57                   	push   edi
c00033ef:	56                   	push   esi
c00033f0:	89 c6                	mov    esi,eax
c00033f2:	53                   	push   ebx
c00033f3:	83 ec 1c             	sub    esp,0x1c
c00033f6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033fa:	e8 9d ed ff ff       	call   c000219c <sync_window>
c00033ff:	85 c0                	test   eax,eax
c0003401:	0f 85 de 00 00 00    	jne    c00034e5 <dir_clear+0xf8>
c0003407:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000340b:	89 f0                	mov    eax,esi
c000340d:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003410:	e8 d6 e8 ff ff       	call   c0001ceb <clst2sect>
c0003415:	b9 00 02 00 00       	mov    ecx,0x200
c000341a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000341e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003422:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003425:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003428:	89 e8                	mov    eax,ebp
c000342a:	31 d2                	xor    edx,edx
c000342c:	e8 b5 e6 ff ff       	call   c0001ae6 <mem_set>
c0003431:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003435:	c1 e3 09             	shl    ebx,0x9
c0003438:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000343e:	76 1f                	jbe    c000345f <dir_clear+0x72>
c0003440:	bb 00 80 00 00       	mov    ebx,0x8000
c0003445:	eb 18                	jmp    c000345f <dir_clear+0x72>
c0003447:	83 ec 0c             	sub    esp,0xc
c000344a:	53                   	push   ebx
c000344b:	e8 35 4e 00 00       	call   c0008285 <ff_memalloc>
c0003450:	83 c4 10             	add    esp,0x10
c0003453:	89 c7                	mov    edi,eax
c0003455:	85 c0                	test   eax,eax
c0003457:	0f 85 8f 00 00 00    	jne    c00034ec <dir_clear+0xff>
c000345d:	d1 eb                	shr    ebx,1
c000345f:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003465:	77 e0                	ja     c0003447 <dir_clear+0x5a>
c0003467:	31 db                	xor    ebx,ebx
c0003469:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000346d:	39 d8                	cmp    eax,ebx
c000346f:	76 66                	jbe    c00034d7 <dir_clear+0xea>
c0003471:	83 ec 0c             	sub    esp,0xc
c0003474:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003478:	6a 01                	push   0x1
c000347a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000347e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003482:	55                   	push   ebp
c0003483:	50                   	push   eax
c0003484:	e8 94 e5 ff ff       	call   c0001a1d <disk_write>
c0003489:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000348e:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003493:	83 c4 20             	add    esp,0x20
c0003496:	85 c0                	test   eax,eax
c0003498:	75 3d                	jne    c00034d7 <dir_clear+0xea>
c000349a:	43                   	inc    ebx
c000349b:	eb cc                	jmp    c0003469 <dir_clear+0x7c>
c000349d:	83 ec 0c             	sub    esp,0xc
c00034a0:	31 d2                	xor    edx,edx
c00034a2:	55                   	push   ebp
c00034a3:	89 d8                	mov    eax,ebx
c00034a5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00034a9:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00034ad:	52                   	push   edx
c00034ae:	50                   	push   eax
c00034af:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034b3:	57                   	push   edi
c00034b4:	50                   	push   eax
c00034b5:	e8 63 e5 ff ff       	call   c0001a1d <disk_write>
c00034ba:	83 c4 20             	add    esp,0x20
c00034bd:	85 c0                	test   eax,eax
c00034bf:	75 0a                	jne    c00034cb <dir_clear+0xde>
c00034c1:	01 eb                	add    ebx,ebp
c00034c3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034c7:	39 d8                	cmp    eax,ebx
c00034c9:	77 d2                	ja     c000349d <dir_clear+0xb0>
c00034cb:	83 ec 0c             	sub    esp,0xc
c00034ce:	57                   	push   edi
c00034cf:	e8 c7 4d 00 00       	call   c000829b <ff_memfree>
c00034d4:	83 c4 10             	add    esp,0x10
c00034d7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034db:	39 d8                	cmp    eax,ebx
c00034dd:	0f 95 c0             	setne  al
c00034e0:	0f b6 c0             	movzx  eax,al
c00034e3:	eb 19                	jmp    c00034fe <dir_clear+0x111>
c00034e5:	b8 01 00 00 00       	mov    eax,0x1
c00034ea:	eb 12                	jmp    c00034fe <dir_clear+0x111>
c00034ec:	89 d9                	mov    ecx,ebx
c00034ee:	31 d2                	xor    edx,edx
c00034f0:	c1 eb 09             	shr    ebx,0x9
c00034f3:	e8 ee e5 ff ff       	call   c0001ae6 <mem_set>
c00034f8:	89 dd                	mov    ebp,ebx
c00034fa:	31 db                	xor    ebx,ebx
c00034fc:	eb c5                	jmp    c00034c3 <dir_clear+0xd6>
c00034fe:	83 c4 1c             	add    esp,0x1c
c0003501:	5b                   	pop    ebx
c0003502:	5e                   	pop    esi
c0003503:	5f                   	pop    edi
c0003504:	5d                   	pop    ebp
c0003505:	c3                   	ret    

c0003506 <dir_next>:
c0003506:	55                   	push   ebp
c0003507:	57                   	push   edi
c0003508:	56                   	push   esi
c0003509:	53                   	push   ebx
c000350a:	89 c3                	mov    ebx,eax
c000350c:	83 ec 1c             	sub    esp,0x1c
c000350f:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003511:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003515:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003518:	8d 78 20             	lea    edi,[eax+0x20]
c000351b:	31 c0                	xor    eax,eax
c000351d:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003521:	0f 94 c0             	sete   al
c0003524:	48                   	dec    eax
c0003525:	25 00 00 20 f0       	and    eax,0xf0200000
c000352a:	05 00 00 00 10       	add    eax,0x10000000
c000352f:	39 f8                	cmp    eax,edi
c0003531:	77 0e                	ja     c0003541 <dir_next+0x3b>
c0003533:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000353a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003541:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003544:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003547:	b8 04 00 00 00       	mov    eax,0x4
c000354c:	89 ce                	mov    esi,ecx
c000354e:	09 d6                	or     esi,edx
c0003550:	0f 84 da 00 00 00    	je     c0003630 <dir_next+0x12a>
c0003556:	89 f8                	mov    eax,edi
c0003558:	25 ff 01 00 00       	and    eax,0x1ff
c000355d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003561:	0f 85 b9 00 00 00    	jne    c0003620 <dir_next+0x11a>
c0003567:	83 c2 01             	add    edx,0x1
c000356a:	83 d1 00             	adc    ecx,0x0
c000356d:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003570:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003573:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003576:	85 d2                	test   edx,edx
c0003578:	75 29                	jne    c00035a3 <dir_next+0x9d>
c000357a:	89 fa                	mov    edx,edi
c000357c:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003580:	c1 ea 05             	shr    edx,0x5
c0003583:	39 c2                	cmp    edx,eax
c0003585:	0f 82 95 00 00 00    	jb     c0003620 <dir_next+0x11a>
c000358b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003592:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003599:	b8 04 00 00 00       	mov    eax,0x4
c000359e:	e9 8d 00 00 00       	jmp    c0003630 <dir_next+0x12a>
c00035a3:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00035a7:	89 f9                	mov    ecx,edi
c00035a9:	48                   	dec    eax
c00035aa:	c1 e9 09             	shr    ecx,0x9
c00035ad:	85 c8                	test   eax,ecx
c00035af:	75 6f                	jne    c0003620 <dir_next+0x11a>
c00035b1:	89 d8                	mov    eax,ebx
c00035b3:	e8 00 f8 ff ff       	call   c0002db8 <get_fat>
c00035b8:	89 c6                	mov    esi,eax
c00035ba:	83 f8 01             	cmp    eax,0x1
c00035bd:	77 07                	ja     c00035c6 <dir_next+0xc0>
c00035bf:	b8 02 00 00 00       	mov    eax,0x2
c00035c4:	eb 6a                	jmp    c0003630 <dir_next+0x12a>
c00035c6:	83 f8 ff             	cmp    eax,0xffffffff
c00035c9:	75 07                	jne    c00035d2 <dir_next+0xcc>
c00035cb:	b8 01 00 00 00       	mov    eax,0x1
c00035d0:	eb 5e                	jmp    c0003630 <dir_next+0x12a>
c00035d2:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035d5:	77 37                	ja     c000360e <dir_next+0x108>
c00035d7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035dc:	74 ad                	je     c000358b <dir_next+0x85>
c00035de:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035e1:	89 d8                	mov    eax,ebx
c00035e3:	e8 be fa ff ff       	call   c00030a6 <create_chain>
c00035e8:	89 c6                	mov    esi,eax
c00035ea:	b8 07 00 00 00       	mov    eax,0x7
c00035ef:	85 f6                	test   esi,esi
c00035f1:	74 3d                	je     c0003630 <dir_next+0x12a>
c00035f3:	83 fe 01             	cmp    esi,0x1
c00035f6:	74 c7                	je     c00035bf <dir_next+0xb9>
c00035f8:	83 fe ff             	cmp    esi,0xffffffff
c00035fb:	74 ce                	je     c00035cb <dir_next+0xc5>
c00035fd:	89 f2                	mov    edx,esi
c00035ff:	89 e8                	mov    eax,ebp
c0003601:	e8 e7 fd ff ff       	call   c00033ed <dir_clear>
c0003606:	85 c0                	test   eax,eax
c0003608:	75 c1                	jne    c00035cb <dir_next+0xc5>
c000360a:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000360e:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003611:	89 f2                	mov    edx,esi
c0003613:	89 e8                	mov    eax,ebp
c0003615:	e8 d1 e6 ff ff       	call   c0001ceb <clst2sect>
c000361a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000361d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003624:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003627:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000362b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000362e:	31 c0                	xor    eax,eax
c0003630:	83 c4 1c             	add    esp,0x1c
c0003633:	5b                   	pop    ebx
c0003634:	5e                   	pop    esi
c0003635:	5f                   	pop    edi
c0003636:	5d                   	pop    ebp
c0003637:	c3                   	ret    

c0003638 <load_xdir>:
c0003638:	55                   	push   ebp
c0003639:	57                   	push   edi
c000363a:	56                   	push   esi
c000363b:	89 c6                	mov    esi,eax
c000363d:	53                   	push   ebx
c000363e:	83 ec 1c             	sub    esp,0x1c
c0003641:	8b 00                	mov    eax,DWORD PTR [eax]
c0003643:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003646:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003649:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000364c:	e8 df eb ff ff       	call   c0002230 <move_window>
c0003651:	89 c3                	mov    ebx,eax
c0003653:	85 c0                	test   eax,eax
c0003655:	0f 85 0c 01 00 00    	jne    c0003767 <load_xdir+0x12f>
c000365b:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000365e:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003661:	0f 85 fb 00 00 00    	jne    c0003762 <load_xdir+0x12a>
c0003667:	89 f8                	mov    eax,edi
c0003669:	b9 20 00 00 00       	mov    ecx,0x20
c000366e:	e8 5e e4 ff ff       	call   c0001ad1 <mem_cpy>
c0003673:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003677:	40                   	inc    eax
c0003678:	c1 e0 05             	shl    eax,0x5
c000367b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000367f:	83 e8 60             	sub    eax,0x60
c0003682:	3d 00 02 00 00       	cmp    eax,0x200
c0003687:	0f 87 d5 00 00 00    	ja     c0003762 <load_xdir+0x12a>
c000368d:	31 d2                	xor    edx,edx
c000368f:	89 f0                	mov    eax,esi
c0003691:	e8 70 fe ff ff       	call   c0003506 <dir_next>
c0003696:	89 c3                	mov    ebx,eax
c0003698:	83 f8 04             	cmp    eax,0x4
c000369b:	0f 84 c1 00 00 00    	je     c0003762 <load_xdir+0x12a>
c00036a1:	85 c0                	test   eax,eax
c00036a3:	0f 85 be 00 00 00    	jne    c0003767 <load_xdir+0x12f>
c00036a9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036ac:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036af:	8b 06                	mov    eax,DWORD PTR [esi]
c00036b1:	e8 7a eb ff ff       	call   c0002230 <move_window>
c00036b6:	89 c3                	mov    ebx,eax
c00036b8:	85 c0                	test   eax,eax
c00036ba:	0f 85 a7 00 00 00    	jne    c0003767 <load_xdir+0x12f>
c00036c0:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036c3:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036c6:	0f 85 96 00 00 00    	jne    c0003762 <load_xdir+0x12a>
c00036cc:	8d 47 20             	lea    eax,[edi+0x20]
c00036cf:	b9 20 00 00 00       	mov    ecx,0x20
c00036d4:	e8 f8 e3 ff ff       	call   c0001ad1 <mem_cpy>
c00036d9:	31 d2                	xor    edx,edx
c00036db:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036df:	b9 0f 00 00 00       	mov    ecx,0xf
c00036e4:	83 c0 2c             	add    eax,0x2c
c00036e7:	f7 f1                	div    ecx
c00036e9:	c1 e0 05             	shl    eax,0x5
c00036ec:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036f0:	77 70                	ja     c0003762 <load_xdir+0x12a>
c00036f2:	bd 40 00 00 00       	mov    ebp,0x40
c00036f7:	31 d2                	xor    edx,edx
c00036f9:	89 f0                	mov    eax,esi
c00036fb:	e8 06 fe ff ff       	call   c0003506 <dir_next>
c0003700:	89 c3                	mov    ebx,eax
c0003702:	83 f8 04             	cmp    eax,0x4
c0003705:	74 5b                	je     c0003762 <load_xdir+0x12a>
c0003707:	85 c0                	test   eax,eax
c0003709:	75 5c                	jne    c0003767 <load_xdir+0x12f>
c000370b:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000370e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003711:	8b 06                	mov    eax,DWORD PTR [esi]
c0003713:	e8 18 eb ff ff       	call   c0002230 <move_window>
c0003718:	89 c3                	mov    ebx,eax
c000371a:	85 c0                	test   eax,eax
c000371c:	75 49                	jne    c0003767 <load_xdir+0x12f>
c000371e:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003721:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003724:	75 3c                	jne    c0003762 <load_xdir+0x12a>
c0003726:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000372c:	77 0d                	ja     c000373b <load_xdir+0x103>
c000372e:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003731:	b9 20 00 00 00       	mov    ecx,0x20
c0003736:	e8 96 e3 ff ff       	call   c0001ad1 <mem_cpy>
c000373b:	83 c5 20             	add    ebp,0x20
c000373e:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003742:	77 b3                	ja     c00036f7 <load_xdir+0xbf>
c0003744:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000374a:	77 1b                	ja     c0003767 <load_xdir+0x12f>
c000374c:	89 f8                	mov    eax,edi
c000374e:	e8 cd e7 ff ff       	call   c0001f20 <xdir_sum>
c0003753:	89 c1                	mov    ecx,eax
c0003755:	8d 47 02             	lea    eax,[edi+0x2]
c0003758:	e8 f5 e2 ff ff       	call   c0001a52 <ld_word>
c000375d:	66 39 c1             	cmp    cx,ax
c0003760:	74 05                	je     c0003767 <load_xdir+0x12f>
c0003762:	bb 02 00 00 00       	mov    ebx,0x2
c0003767:	83 c4 1c             	add    esp,0x1c
c000376a:	89 d8                	mov    eax,ebx
c000376c:	5b                   	pop    ebx
c000376d:	5e                   	pop    esi
c000376e:	5f                   	pop    edi
c000376f:	5d                   	pop    ebp
c0003770:	c3                   	ret    

c0003771 <load_obj_xdir>:
c0003771:	53                   	push   ebx
c0003772:	89 c3                	mov    ebx,eax
c0003774:	83 ec 08             	sub    esp,0x8
c0003777:	8b 02                	mov    eax,DWORD PTR [edx]
c0003779:	89 03                	mov    DWORD PTR [ebx],eax
c000377b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000377e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003781:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003784:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003787:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000378a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003791:	30 c0                	xor    al,al
c0003793:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000379a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000379d:	89 d8                	mov    eax,ebx
c000379f:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00037a2:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00037a5:	e8 04 f8 ff ff       	call   c0002fae <dir_sdi>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	75 0b                	jne    c00037b9 <load_obj_xdir+0x48>
c00037ae:	89 d8                	mov    eax,ebx
c00037b0:	83 c4 08             	add    esp,0x8
c00037b3:	5b                   	pop    ebx
c00037b4:	e9 7f fe ff ff       	jmp    c0003638 <load_xdir>
c00037b9:	83 c4 08             	add    esp,0x8
c00037bc:	5b                   	pop    ebx
c00037bd:	c3                   	ret    

c00037be <dir_read>:
c00037be:	55                   	push   ebp
c00037bf:	bd 04 00 00 00       	mov    ebp,0x4
c00037c4:	57                   	push   edi
c00037c5:	56                   	push   esi
c00037c6:	be ff ff ff ff       	mov    esi,0xffffffff
c00037cb:	53                   	push   ebx
c00037cc:	89 c3                	mov    ebx,eax
c00037ce:	83 ec 1c             	sub    esp,0x1c
c00037d1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037d5:	8b 38                	mov    edi,DWORD PTR [eax]
c00037d7:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037dc:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037df:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037e2:	89 c8                	mov    eax,ecx
c00037e4:	09 d0                	or     eax,edx
c00037e6:	0f 84 25 01 00 00    	je     c0003911 <dir_read+0x153>
c00037ec:	89 f8                	mov    eax,edi
c00037ee:	e8 3d ea ff ff       	call   c0002230 <move_window>
c00037f3:	89 c5                	mov    ebp,eax
c00037f5:	85 c0                	test   eax,eax
c00037f7:	0f 85 23 01 00 00    	jne    c0003920 <dir_read+0x162>
c00037fd:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003800:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003802:	84 c9                	test   cl,cl
c0003804:	0f 84 11 01 00 00    	je     c000391b <dir_read+0x15d>
c000380a:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000380d:	75 48                	jne    c0003857 <dir_read+0x99>
c000380f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003814:	74 10                	je     c0003826 <dir_read+0x68>
c0003816:	80 f9 83             	cmp    cl,0x83
c0003819:	0f 85 dd 00 00 00    	jne    c00038fc <dir_read+0x13e>
c000381f:	31 ed                	xor    ebp,ebp
c0003821:	e9 08 01 00 00       	jmp    c000392e <dir_read+0x170>
c0003826:	80 f9 85             	cmp    cl,0x85
c0003829:	0f 85 cd 00 00 00    	jne    c00038fc <dir_read+0x13e>
c000382f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003832:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003835:	89 d8                	mov    eax,ebx
c0003837:	e8 fc fd ff ff       	call   c0003638 <load_xdir>
c000383c:	89 c5                	mov    ebp,eax
c000383e:	85 c0                	test   eax,eax
c0003840:	0f 85 da 00 00 00    	jne    c0003920 <dir_read+0x162>
c0003846:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003849:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000384c:	83 e0 3f             	and    eax,0x3f
c000384f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003852:	e9 d7 00 00 00       	jmp    c000392e <dir_read+0x170>
c0003857:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000385a:	83 e0 3f             	and    eax,0x3f
c000385d:	80 f9 2e             	cmp    cl,0x2e
c0003860:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003864:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003867:	0f 84 8a 00 00 00    	je     c00038f7 <dir_read+0x139>
c000386d:	80 f9 e5             	cmp    cl,0xe5
c0003870:	0f 84 81 00 00 00    	je     c00038f7 <dir_read+0x139>
c0003876:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000387a:	83 e0 1f             	and    eax,0x1f
c000387d:	83 f8 08             	cmp    eax,0x8
c0003880:	0f 94 c0             	sete   al
c0003883:	0f b6 c0             	movzx  eax,al
c0003886:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000388a:	75 6b                	jne    c00038f7 <dir_read+0x139>
c000388c:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003891:	75 44                	jne    c00038d7 <dir_read+0x119>
c0003893:	f6 c1 40             	test   cl,0x40
c0003896:	74 12                	je     c00038aa <dir_read+0xec>
c0003898:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000389b:	83 e1 bf             	and    ecx,0xffffffbf
c000389e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00038a2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00038a5:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00038a8:	eb 06                	jmp    c00038b0 <dir_read+0xf2>
c00038aa:	89 f0                	mov    eax,esi
c00038ac:	38 c8                	cmp    al,cl
c00038ae:	75 47                	jne    c00038f7 <dir_read+0x139>
c00038b0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038b4:	be ff ff ff ff       	mov    esi,0xffffffff
c00038b9:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038bc:	75 3e                	jne    c00038fc <dir_read+0x13e>
c00038be:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038c2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038c5:	e8 8a e4 ff ff       	call   c0001d54 <pick_lfn>
c00038ca:	85 c0                	test   eax,eax
c00038cc:	74 2e                	je     c00038fc <dir_read+0x13e>
c00038ce:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038d2:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038d5:	eb 25                	jmp    c00038fc <dir_read+0x13e>
c00038d7:	89 f0                	mov    eax,esi
c00038d9:	84 c0                	test   al,al
c00038db:	75 11                	jne    c00038ee <dir_read+0x130>
c00038dd:	89 d0                	mov    eax,edx
c00038df:	e8 2a e6 ff ff       	call   c0001f0e <sum_sfn>
c00038e4:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038e8:	0f 84 31 ff ff ff    	je     c000381f <dir_read+0x61>
c00038ee:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038f5:	eb 37                	jmp    c000392e <dir_read+0x170>
c00038f7:	be ff ff ff ff       	mov    esi,0xffffffff
c00038fc:	31 d2                	xor    edx,edx
c00038fe:	89 d8                	mov    eax,ebx
c0003900:	e8 01 fc ff ff       	call   c0003506 <dir_next>
c0003905:	89 c5                	mov    ebp,eax
c0003907:	85 c0                	test   eax,eax
c0003909:	0f 84 cd fe ff ff    	je     c00037dc <dir_read+0x1e>
c000390f:	eb 0f                	jmp    c0003920 <dir_read+0x162>
c0003911:	85 ed                	test   ebp,ebp
c0003913:	0f 84 06 ff ff ff    	je     c000381f <dir_read+0x61>
c0003919:	eb 05                	jmp    c0003920 <dir_read+0x162>
c000391b:	bd 04 00 00 00       	mov    ebp,0x4
c0003920:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003927:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000392e:	83 c4 1c             	add    esp,0x1c
c0003931:	89 e8                	mov    eax,ebp
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	5f                   	pop    edi
c0003936:	5d                   	pop    ebp
c0003937:	c3                   	ret    

c0003938 <dir_alloc>:
c0003938:	55                   	push   ebp
c0003939:	89 d5                	mov    ebp,edx
c000393b:	57                   	push   edi
c000393c:	31 d2                	xor    edx,edx
c000393e:	56                   	push   esi
c000393f:	53                   	push   ebx
c0003940:	89 c3                	mov    ebx,eax
c0003942:	83 ec 0c             	sub    esp,0xc
c0003945:	8b 38                	mov    edi,DWORD PTR [eax]
c0003947:	e8 62 f6 ff ff       	call   c0002fae <dir_sdi>
c000394c:	85 c0                	test   eax,eax
c000394e:	75 4e                	jne    c000399e <dir_alloc+0x66>
c0003950:	31 f6                	xor    esi,esi
c0003952:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003955:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003958:	89 f8                	mov    eax,edi
c000395a:	e8 d1 e8 ff ff       	call   c0002230 <move_window>
c000395f:	85 c0                	test   eax,eax
c0003961:	75 3b                	jne    c000399e <dir_alloc+0x66>
c0003963:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003966:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003969:	8a 12                	mov    dl,BYTE PTR [edx]
c000396b:	75 07                	jne    c0003974 <dir_alloc+0x3c>
c000396d:	f7 d2                	not    edx
c000396f:	c0 ea 07             	shr    dl,0x7
c0003972:	eb 0d                	jmp    c0003981 <dir_alloc+0x49>
c0003974:	84 d2                	test   dl,dl
c0003976:	0f 94 c1             	sete   cl
c0003979:	80 fa e5             	cmp    dl,0xe5
c000397c:	0f 94 c2             	sete   dl
c000397f:	09 ca                	or     edx,ecx
c0003981:	84 d2                	test   dl,dl
c0003983:	74 07                	je     c000398c <dir_alloc+0x54>
c0003985:	46                   	inc    esi
c0003986:	39 ee                	cmp    esi,ebp
c0003988:	75 04                	jne    c000398e <dir_alloc+0x56>
c000398a:	eb 1c                	jmp    c00039a8 <dir_alloc+0x70>
c000398c:	31 f6                	xor    esi,esi
c000398e:	ba 01 00 00 00       	mov    edx,0x1
c0003993:	89 d8                	mov    eax,ebx
c0003995:	e8 6c fb ff ff       	call   c0003506 <dir_next>
c000399a:	85 c0                	test   eax,eax
c000399c:	74 b4                	je     c0003952 <dir_alloc+0x1a>
c000399e:	83 f8 04             	cmp    eax,0x4
c00039a1:	75 05                	jne    c00039a8 <dir_alloc+0x70>
c00039a3:	b8 07 00 00 00       	mov    eax,0x7
c00039a8:	83 c4 0c             	add    esp,0xc
c00039ab:	5b                   	pop    ebx
c00039ac:	5e                   	pop    esi
c00039ad:	5f                   	pop    edi
c00039ae:	5d                   	pop    ebp
c00039af:	c3                   	ret    

c00039b0 <store_xdir>:
c00039b0:	55                   	push   ebp
c00039b1:	57                   	push   edi
c00039b2:	89 c7                	mov    edi,eax
c00039b4:	56                   	push   esi
c00039b5:	53                   	push   ebx
c00039b6:	83 ec 0c             	sub    esp,0xc
c00039b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00039bb:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039be:	89 e8                	mov    eax,ebp
c00039c0:	e8 5b e5 ff ff       	call   c0001f20 <xdir_sum>
c00039c5:	0f b7 d0             	movzx  edx,ax
c00039c8:	8d 45 02             	lea    eax,[ebp+0x2]
c00039cb:	e8 f4 e0 ff ff       	call   c0001ac4 <st_word>
c00039d0:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039d4:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039d7:	89 f8                	mov    eax,edi
c00039d9:	e8 d0 f5 ff ff       	call   c0002fae <dir_sdi>
c00039de:	89 c6                	mov    esi,eax
c00039e0:	85 f6                	test   esi,esi
c00039e2:	75 3d                	jne    c0003a21 <store_xdir+0x71>
c00039e4:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039e7:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039ea:	8b 07                	mov    eax,DWORD PTR [edi]
c00039ec:	e8 3f e8 ff ff       	call   c0002230 <move_window>
c00039f1:	89 c6                	mov    esi,eax
c00039f3:	85 c0                	test   eax,eax
c00039f5:	75 2a                	jne    c0003a21 <store_xdir+0x71>
c00039f7:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039fa:	b9 20 00 00 00       	mov    ecx,0x20
c00039ff:	89 ea                	mov    edx,ebp
c0003a01:	e8 cb e0 ff ff       	call   c0001ad1 <mem_cpy>
c0003a06:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a08:	85 db                	test   ebx,ebx
c0003a0a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003a0e:	74 11                	je     c0003a21 <store_xdir+0x71>
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 f8                	mov    eax,edi
c0003a14:	83 c5 20             	add    ebp,0x20
c0003a17:	e8 ea fa ff ff       	call   c0003506 <dir_next>
c0003a1c:	4b                   	dec    ebx
c0003a1d:	89 c6                	mov    esi,eax
c0003a1f:	eb bf                	jmp    c00039e0 <store_xdir+0x30>
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	83 fe 02             	cmp    esi,0x2
c0003a26:	76 05                	jbe    c0003a2d <store_xdir+0x7d>
c0003a28:	b8 02 00 00 00       	mov    eax,0x2
c0003a2d:	83 c4 0c             	add    esp,0xc
c0003a30:	5b                   	pop    ebx
c0003a31:	5e                   	pop    esi
c0003a32:	5f                   	pop    edi
c0003a33:	5d                   	pop    ebp
c0003a34:	c3                   	ret    

c0003a35 <dir_remove>:
c0003a35:	57                   	push   edi
c0003a36:	56                   	push   esi
c0003a37:	53                   	push   ebx
c0003a38:	89 c3                	mov    ebx,eax
c0003a3a:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a3d:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a3f:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a42:	83 fa ff             	cmp    edx,0xffffffff
c0003a45:	74 09                	je     c0003a50 <dir_remove+0x1b>
c0003a47:	e8 62 f5 ff ff       	call   c0002fae <dir_sdi>
c0003a4c:	85 c0                	test   eax,eax
c0003a4e:	75 41                	jne    c0003a91 <dir_remove+0x5c>
c0003a50:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a53:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a56:	89 f0                	mov    eax,esi
c0003a58:	e8 d3 e7 ff ff       	call   c0002230 <move_window>
c0003a5d:	85 c0                	test   eax,eax
c0003a5f:	75 26                	jne    c0003a87 <dir_remove+0x52>
c0003a61:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a64:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a67:	75 05                	jne    c0003a6e <dir_remove+0x39>
c0003a69:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a6c:	eb 03                	jmp    c0003a71 <dir_remove+0x3c>
c0003a6e:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a71:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a75:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a78:	73 17                	jae    c0003a91 <dir_remove+0x5c>
c0003a7a:	31 d2                	xor    edx,edx
c0003a7c:	89 d8                	mov    eax,ebx
c0003a7e:	e8 83 fa ff ff       	call   c0003506 <dir_next>
c0003a83:	85 c0                	test   eax,eax
c0003a85:	74 c9                	je     c0003a50 <dir_remove+0x1b>
c0003a87:	83 f8 04             	cmp    eax,0x4
c0003a8a:	75 05                	jne    c0003a91 <dir_remove+0x5c>
c0003a8c:	b8 02 00 00 00       	mov    eax,0x2
c0003a91:	5b                   	pop    ebx
c0003a92:	5e                   	pop    esi
c0003a93:	5f                   	pop    edi
c0003a94:	c3                   	ret    

c0003a95 <create_name>:
c0003a95:	55                   	push   ebp
c0003a96:	89 d5                	mov    ebp,edx
c0003a98:	57                   	push   edi
c0003a99:	89 c7                	mov    edi,eax
c0003a9b:	56                   	push   esi
c0003a9c:	31 f6                	xor    esi,esi
c0003a9e:	53                   	push   ebx
c0003a9f:	83 ec 3c             	sub    esp,0x3c
c0003aa2:	8b 02                	mov    eax,DWORD PTR [edx]
c0003aa4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003aa8:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aaa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003aad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003ab1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ab5:	e8 72 e0 ff ff       	call   c0001b2c <tchar2uni>
c0003aba:	89 c3                	mov    ebx,eax
c0003abc:	83 f8 ff             	cmp    eax,0xffffffff
c0003abf:	75 0a                	jne    c0003acb <create_name+0x36>
c0003ac1:	b8 06 00 00 00       	mov    eax,0x6
c0003ac6:	e9 9e 02 00 00       	jmp    c0003d69 <create_name+0x2d4>
c0003acb:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ad0:	76 0c                	jbe    c0003ade <create_name+0x49>
c0003ad2:	c1 e8 10             	shr    eax,0x10
c0003ad5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ad9:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003add:	46                   	inc    esi
c0003ade:	66 83 fb 1f          	cmp    bx,0x1f
c0003ae2:	76 4f                	jbe    c0003b33 <create_name+0x9e>
c0003ae4:	66 83 fb 5c          	cmp    bx,0x5c
c0003ae8:	74 35                	je     c0003b1f <create_name+0x8a>
c0003aea:	66 83 fb 2f          	cmp    bx,0x2f
c0003aee:	74 2f                	je     c0003b1f <create_name+0x8a>
c0003af0:	66 83 fb 7f          	cmp    bx,0x7f
c0003af4:	77 11                	ja     c0003b07 <create_name+0x72>
c0003af6:	0f b7 d3             	movzx  edx,bx
c0003af9:	b8 12 5e 02 c0       	mov    eax,0xc0025e12
c0003afe:	e8 11 e0 ff ff       	call   c0001b14 <chk_chr>
c0003b03:	85 c0                	test   eax,eax
c0003b05:	75 ba                	jne    c0003ac1 <create_name+0x2c>
c0003b07:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003b0d:	77 b2                	ja     c0003ac1 <create_name+0x2c>
c0003b0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b13:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b17:	46                   	inc    esi
c0003b18:	eb 97                	jmp    c0003ab1 <create_name+0x1c>
c0003b1a:	40                   	inc    eax
c0003b1b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b1f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b23:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b25:	80 fa 2f             	cmp    dl,0x2f
c0003b28:	74 f0                	je     c0003b1a <create_name+0x85>
c0003b2a:	80 fa 5c             	cmp    dl,0x5c
c0003b2d:	74 eb                	je     c0003b1a <create_name+0x85>
c0003b2f:	31 db                	xor    ebx,ebx
c0003b31:	eb 02                	jmp    c0003b35 <create_name+0xa0>
c0003b33:	b3 04                	mov    bl,0x4
c0003b35:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b39:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b3c:	85 f6                	test   esi,esi
c0003b3e:	74 18                	je     c0003b58 <create_name+0xc3>
c0003b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b44:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b49:	66 83 f8 20          	cmp    ax,0x20
c0003b4d:	74 06                	je     c0003b55 <create_name+0xc0>
c0003b4f:	66 83 f8 2e          	cmp    ax,0x2e
c0003b53:	75 03                	jne    c0003b58 <create_name+0xc3>
c0003b55:	4e                   	dec    esi
c0003b56:	eb e4                	jmp    c0003b3c <create_name+0xa7>
c0003b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b5c:	31 ed                	xor    ebp,ebp
c0003b5e:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b64:	85 f6                	test   esi,esi
c0003b66:	0f 84 55 ff ff ff    	je     c0003ac1 <create_name+0x2c>
c0003b6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b70:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b73:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b77:	66 83 f8 20          	cmp    ax,0x20
c0003b7b:	75 04                	jne    c0003b81 <create_name+0xec>
c0003b7d:	89 d5                	mov    ebp,edx
c0003b7f:	eb eb                	jmp    c0003b6c <create_name+0xd7>
c0003b81:	85 ed                	test   ebp,ebp
c0003b83:	75 06                	jne    c0003b8b <create_name+0xf6>
c0003b85:	66 83 f8 2e          	cmp    ax,0x2e
c0003b89:	75 08                	jne    c0003b93 <create_name+0xfe>
c0003b8b:	83 cb 03             	or     ebx,0x3
c0003b8e:	eb 03                	jmp    c0003b93 <create_name+0xfe>
c0003b90:	4e                   	dec    esi
c0003b91:	74 0c                	je     c0003b9f <create_name+0x10a>
c0003b93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b97:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b9d:	75 f1                	jne    c0003b90 <create_name+0xfb>
c0003b9f:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ba4:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ba7:	ba 20 00 00 00       	mov    edx,0x20
c0003bac:	e8 35 df ff ff       	call   c0001ae6 <mem_set>
c0003bb1:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003bb9:	31 c9                	xor    ecx,ecx
c0003bbb:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003bc0:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bc3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003bcb:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bcf:	66 85 ed             	test   bp,bp
c0003bd2:	0f 84 30 01 00 00    	je     c0003d08 <create_name+0x273>
c0003bd8:	66 83 fd 20          	cmp    bp,0x20
c0003bdc:	74 10                	je     c0003bee <create_name+0x159>
c0003bde:	66 83 fd 2e          	cmp    bp,0x2e
c0003be2:	75 13                	jne    c0003bf7 <create_name+0x162>
c0003be4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be8:	0f 84 6b 01 00 00    	je     c0003d59 <create_name+0x2c4>
c0003bee:	83 cb 03             	or     ebx,0x3
c0003bf1:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bf5:	eb c9                	jmp    c0003bc0 <create_name+0x12b>
c0003bf7:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bfb:	73 0b                	jae    c0003c08 <create_name+0x173>
c0003bfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c01:	75 47                	jne    c0003c4a <create_name+0x1b5>
c0003c03:	e9 51 01 00 00       	jmp    c0003d59 <create_name+0x2c4>
c0003c08:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c0d:	75 10                	jne    c0003c1f <create_name+0x18a>
c0003c0f:	83 cb 03             	or     ebx,0x3
c0003c12:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c1a:	e9 e9 00 00 00       	jmp    c0003d08 <create_name+0x273>
c0003c1f:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c23:	74 0d                	je     c0003c32 <create_name+0x19d>
c0003c25:	83 cb 03             	or     ebx,0x3
c0003c28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003c2c:	0f 87 d6 00 00 00    	ja     c0003d08 <create_name+0x273>
c0003c32:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c37:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003c3b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c43:	b9 08 00 00 00       	mov    ecx,0x8
c0003c48:	eb a7                	jmp    c0003bf1 <create_name+0x15c>
c0003c4a:	66 83 fd 7f          	cmp    bp,0x7f
c0003c4e:	76 68                	jbe    c0003cb8 <create_name+0x223>
c0003c50:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c54:	88 da                	mov    dl,bl
c0003c56:	83 ca 02             	or     edx,0x2
c0003c59:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c5d:	50                   	push   eax
c0003c5e:	50                   	push   eax
c0003c5f:	68 b5 01 00 00       	push   0x1b5
c0003c64:	55                   	push   ebp
c0003c65:	e8 48 46 00 00       	call   c00082b2 <ff_uni2oem>
c0003c6a:	83 c4 10             	add    esp,0x10
c0003c6d:	89 c5                	mov    ebp,eax
c0003c6f:	a8 80                	test   al,0x80
c0003c71:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c75:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c79:	74 0c                	je     c0003c87 <create_name+0x1f2>
c0003c7b:	83 e5 7f             	and    ebp,0x7f
c0003c7e:	0f b6 ad 60 5d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffda2a0]
c0003c85:	eb 2a                	jmp    c0003cb1 <create_name+0x21c>
c0003c87:	66 3d ff 00          	cmp    ax,0xff
c0003c8b:	76 24                	jbe    c0003cb1 <create_name+0x21c>
c0003c8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c91:	48                   	dec    eax
c0003c92:	39 c8                	cmp    eax,ecx
c0003c94:	77 0c                	ja     c0003ca2 <create_name+0x20d>
c0003c96:	83 cb 03             	or     ebx,0x3
c0003c99:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c9d:	e9 4f ff ff ff       	jmp    c0003bf1 <create_name+0x15c>
c0003ca2:	89 e8                	mov    eax,ebp
c0003ca4:	88 d3                	mov    bl,dl
c0003ca6:	66 c1 e8 08          	shr    ax,0x8
c0003caa:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cae:	41                   	inc    ecx
c0003caf:	eb 4b                	jmp    c0003cfc <create_name+0x267>
c0003cb1:	88 d3                	mov    bl,dl
c0003cb3:	66 85 ed             	test   bp,bp
c0003cb6:	74 19                	je     c0003cd1 <create_name+0x23c>
c0003cb8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003cbc:	0f b7 d5             	movzx  edx,bp
c0003cbf:	b8 1b 5e 02 c0       	mov    eax,0xc0025e1b
c0003cc4:	e8 4b de ff ff       	call   c0001b14 <chk_chr>
c0003cc9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ccd:	85 c0                	test   eax,eax
c0003ccf:	74 0a                	je     c0003cdb <create_name+0x246>
c0003cd1:	83 cb 03             	or     ebx,0x3
c0003cd4:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cd9:	eb 21                	jmp    c0003cfc <create_name+0x267>
c0003cdb:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cde:	66 83 f8 19          	cmp    ax,0x19
c0003ce2:	77 07                	ja     c0003ceb <create_name+0x256>
c0003ce4:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ce9:	eb 11                	jmp    c0003cfc <create_name+0x267>
c0003ceb:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cee:	66 83 f8 19          	cmp    ax,0x19
c0003cf2:	77 08                	ja     c0003cfc <create_name+0x267>
c0003cf4:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cf9:	83 ed 20             	sub    ebp,0x20
c0003cfc:	89 e8                	mov    eax,ebp
c0003cfe:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003d02:	41                   	inc    ecx
c0003d03:	e9 e9 fe ff ff       	jmp    c0003bf1 <create_name+0x15c>
c0003d08:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003d0c:	75 04                	jne    c0003d12 <create_name+0x27d>
c0003d0e:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003d12:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003d17:	75 05                	jne    c0003d1e <create_name+0x289>
c0003d19:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d1e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d22:	83 e0 0c             	and    eax,0xc
c0003d25:	3c 0c                	cmp    al,0xc
c0003d27:	74 0b                	je     c0003d34 <create_name+0x29f>
c0003d29:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003d2d:	83 e0 03             	and    eax,0x3
c0003d30:	3c 03                	cmp    al,0x3
c0003d32:	75 05                	jne    c0003d39 <create_name+0x2a4>
c0003d34:	83 cb 02             	or     ebx,0x2
c0003d37:	eb 19                	jmp    c0003d52 <create_name+0x2bd>
c0003d39:	f6 c3 02             	test   bl,0x2
c0003d3c:	75 14                	jne    c0003d52 <create_name+0x2bd>
c0003d3e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d43:	74 03                	je     c0003d48 <create_name+0x2b3>
c0003d45:	83 cb 10             	or     ebx,0x10
c0003d48:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d4d:	74 03                	je     c0003d52 <create_name+0x2bd>
c0003d4f:	83 cb 08             	or     ebx,0x8
c0003d52:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d55:	31 c0                	xor    eax,eax
c0003d57:	eb 10                	jmp    c0003d69 <create_name+0x2d4>
c0003d59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d5e:	0f 85 ce fe ff ff    	jne    c0003c32 <create_name+0x19d>
c0003d64:	e9 a6 fe ff ff       	jmp    c0003c0f <create_name+0x17a>
c0003d69:	83 c4 3c             	add    esp,0x3c
c0003d6c:	5b                   	pop    ebx
c0003d6d:	5e                   	pop    esi
c0003d6e:	5f                   	pop    edi
c0003d6f:	5d                   	pop    ebp
c0003d70:	c3                   	ret    

c0003d71 <xname_sum>:
c0003d71:	56                   	push   esi
c0003d72:	53                   	push   ebx
c0003d73:	89 c6                	mov    esi,eax
c0003d75:	51                   	push   ecx
c0003d76:	31 db                	xor    ebx,ebx
c0003d78:	83 c6 02             	add    esi,0x2
c0003d7b:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d7f:	66 85 c0             	test   ax,ax
c0003d82:	74 1f                	je     c0003da3 <xname_sum+0x32>
c0003d84:	83 ec 0c             	sub    esp,0xc
c0003d87:	66 d1 cb             	ror    bx,1
c0003d8a:	50                   	push   eax
c0003d8b:	e8 1e 46 00 00       	call   c00083ae <ff_wtoupper>
c0003d90:	83 c4 10             	add    esp,0x10
c0003d93:	0f b6 d0             	movzx  edx,al
c0003d96:	66 c1 e8 08          	shr    ax,0x8
c0003d9a:	01 d3                	add    ebx,edx
c0003d9c:	66 d1 cb             	ror    bx,1
c0003d9f:	01 c3                	add    ebx,eax
c0003da1:	eb d5                	jmp    c0003d78 <xname_sum+0x7>
c0003da3:	89 d8                	mov    eax,ebx
c0003da5:	5a                   	pop    edx
c0003da6:	5b                   	pop    ebx
c0003da7:	5e                   	pop    esi
c0003da8:	c3                   	ret    

c0003da9 <create_xdir>:
c0003da9:	55                   	push   ebp
c0003daa:	b9 40 00 00 00       	mov    ecx,0x40
c0003daf:	57                   	push   edi
c0003db0:	bd 01 00 00 00       	mov    ebp,0x1
c0003db5:	56                   	push   esi
c0003db6:	31 ff                	xor    edi,edi
c0003db8:	53                   	push   ebx
c0003db9:	be 40 00 00 00       	mov    esi,0x40
c0003dbe:	89 c3                	mov    ebx,eax
c0003dc0:	83 ec 1c             	sub    esp,0x1c
c0003dc3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003dc7:	31 d2                	xor    edx,edx
c0003dc9:	e8 18 dd ff ff       	call   c0001ae6 <mem_set>
c0003dce:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003dd1:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003dd5:	31 c9                	xor    ecx,ecx
c0003dd7:	8d 46 01             	lea    eax,[esi+0x1]
c0003dda:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003dde:	83 c6 02             	add    esi,0x2
c0003de1:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003de5:	66 85 ed             	test   bp,bp
c0003de8:	74 12                	je     c0003dfc <create_xdir+0x53>
c0003dea:	0f b6 c1             	movzx  eax,cl
c0003ded:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003df1:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003df5:	66 83 fd 01          	cmp    bp,0x1
c0003df9:	80 d9 ff             	sbb    cl,0xff
c0003dfc:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dff:	0f b7 d5             	movzx  edx,bp
c0003e02:	83 c6 02             	add    esi,0x2
c0003e05:	e8 ba dc ff ff       	call   c0001ac4 <st_word>
c0003e0a:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003e10:	75 d3                	jne    c0003de5 <create_xdir+0x3c>
c0003e12:	8d 47 01             	lea    eax,[edi+0x1]
c0003e15:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e19:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003e1d:	0f b6 c1             	movzx  eax,cl
c0003e20:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003e25:	74 07                	je     c0003e2e <create_xdir+0x85>
c0003e27:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e2c:	eb a9                	jmp    c0003dd7 <create_xdir+0x2e>
c0003e2e:	8d 47 02             	lea    eax,[edi+0x2]
c0003e31:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e34:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e37:	89 d0                	mov    eax,edx
c0003e39:	e8 33 ff ff ff       	call   c0003d71 <xname_sum>
c0003e3e:	83 c4 1c             	add    esp,0x1c
c0003e41:	0f b7 d0             	movzx  edx,ax
c0003e44:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e47:	5b                   	pop    ebx
c0003e48:	5e                   	pop    esi
c0003e49:	5f                   	pop    edi
c0003e4a:	5d                   	pop    ebp
c0003e4b:	e9 74 dc ff ff       	jmp    c0001ac4 <st_word>

c0003e50 <cmp_lfn>:
c0003e50:	55                   	push   ebp
c0003e51:	57                   	push   edi
c0003e52:	89 d7                	mov    edi,edx
c0003e54:	56                   	push   esi
c0003e55:	53                   	push   ebx
c0003e56:	83 ec 1c             	sub    esp,0x1c
c0003e59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e5d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e60:	e8 ed db ff ff       	call   c0001a52 <ld_word>
c0003e65:	66 85 c0             	test   ax,ax
c0003e68:	74 07                	je     c0003e71 <cmp_lfn+0x21>
c0003e6a:	31 c0                	xor    eax,eax
c0003e6c:	e9 9a 00 00 00       	jmp    c0003f0b <cmp_lfn+0xbb>
c0003e71:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e73:	bd 01 00 00 00       	mov    ebp,0x1
c0003e78:	83 e3 3f             	and    ebx,0x3f
c0003e7b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e83:	4b                   	dec    ebx
c0003e84:	6b db 0d             	imul   ebx,ebx,0xd
c0003e87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e8b:	0f b6 80 e0 5d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda220]
c0003e92:	01 f8                	add    eax,edi
c0003e94:	e8 b9 db ff ff       	call   c0001a52 <ld_word>
c0003e99:	66 85 ed             	test   bp,bp
c0003e9c:	89 c6                	mov    esi,eax
c0003e9e:	74 3c                	je     c0003edc <cmp_lfn+0x8c>
c0003ea0:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003ea6:	77 c2                	ja     c0003e6a <cmp_lfn+0x1a>
c0003ea8:	83 ec 0c             	sub    esp,0xc
c0003eab:	0f b7 c0             	movzx  eax,ax
c0003eae:	50                   	push   eax
c0003eaf:	e8 fa 44 00 00       	call   c00083ae <ff_wtoupper>
c0003eb4:	89 c5                	mov    ebp,eax
c0003eb6:	8d 43 01             	lea    eax,[ebx+0x1]
c0003eb9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003ebd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003ec1:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003ec5:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ec8:	e8 e1 44 00 00       	call   c00083ae <ff_wtoupper>
c0003ecd:	83 c4 10             	add    esp,0x10
c0003ed0:	39 c5                	cmp    ebp,eax
c0003ed2:	75 96                	jne    c0003e6a <cmp_lfn+0x1a>
c0003ed4:	89 f5                	mov    ebp,esi
c0003ed6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003eda:	eb 04                	jmp    c0003ee0 <cmp_lfn+0x90>
c0003edc:	66 46                	inc    si
c0003ede:	75 8a                	jne    c0003e6a <cmp_lfn+0x1a>
c0003ee0:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ee4:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ee9:	75 9c                	jne    c0003e87 <cmp_lfn+0x37>
c0003eeb:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003eee:	74 16                	je     c0003f06 <cmp_lfn+0xb6>
c0003ef0:	66 85 ed             	test   bp,bp
c0003ef3:	74 11                	je     c0003f06 <cmp_lfn+0xb6>
c0003ef5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ef9:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003efe:	0f 94 c0             	sete   al
c0003f01:	0f b6 c0             	movzx  eax,al
c0003f04:	eb 05                	jmp    c0003f0b <cmp_lfn+0xbb>
c0003f06:	b8 01 00 00 00       	mov    eax,0x1
c0003f0b:	83 c4 1c             	add    esp,0x1c
c0003f0e:	5b                   	pop    ebx
c0003f0f:	5e                   	pop    esi
c0003f10:	5f                   	pop    edi
c0003f11:	5d                   	pop    ebp
c0003f12:	c3                   	ret    

c0003f13 <dir_find>:
c0003f13:	55                   	push   ebp
c0003f14:	31 d2                	xor    edx,edx
c0003f16:	57                   	push   edi
c0003f17:	56                   	push   esi
c0003f18:	53                   	push   ebx
c0003f19:	89 c3                	mov    ebx,eax
c0003f1b:	83 ec 1c             	sub    esp,0x1c
c0003f1e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003f20:	e8 89 f0 ff ff       	call   c0002fae <dir_sdi>
c0003f25:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f28:	85 c0                	test   eax,eax
c0003f2a:	0f 85 9e 01 00 00    	jne    c00040ce <dir_find+0x1bb>
c0003f30:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f33:	0f 85 8d 00 00 00    	jne    c0003fc6 <dir_find+0xb3>
c0003f39:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f3c:	e8 30 fe ff ff       	call   c0003d71 <xname_sum>
c0003f41:	89 c7                	mov    edi,eax
c0003f43:	31 d2                	xor    edx,edx
c0003f45:	89 d8                	mov    eax,ebx
c0003f47:	e8 72 f8 ff ff       	call   c00037be <dir_read>
c0003f4c:	85 c0                	test   eax,eax
c0003f4e:	0f 85 5e 01 00 00    	jne    c00040b2 <dir_find+0x19f>
c0003f54:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f57:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f5a:	e8 f3 da ff ff       	call   c0001a52 <ld_word>
c0003f5f:	66 39 f8             	cmp    ax,di
c0003f62:	75 df                	jne    c0003f43 <dir_find+0x30>
c0003f64:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f67:	31 ed                	xor    ebp,ebp
c0003f69:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f6d:	ba 40 00 00 00       	mov    edx,0x40
c0003f72:	89 e9                	mov    ecx,ebp
c0003f74:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f78:	0f 84 42 01 00 00    	je     c00040c0 <dir_find+0x1ad>
c0003f7e:	f6 c2 1f             	test   dl,0x1f
c0003f81:	75 03                	jne    c0003f86 <dir_find+0x73>
c0003f83:	83 c2 02             	add    edx,0x2
c0003f86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f8a:	89 d0                	mov    eax,edx
c0003f8c:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f8f:	e8 be da ff ff       	call   c0001a52 <ld_word>
c0003f94:	83 ec 0c             	sub    esp,0xc
c0003f97:	0f b7 c0             	movzx  eax,ax
c0003f9a:	50                   	push   eax
c0003f9b:	e8 0e 44 00 00       	call   c00083ae <ff_wtoupper>
c0003fa0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003fa4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fa7:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003fab:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fae:	e8 fb 43 00 00       	call   c00083ae <ff_wtoupper>
c0003fb3:	83 c4 10             	add    esp,0x10
c0003fb6:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003fba:	75 87                	jne    c0003f43 <dir_find+0x30>
c0003fbc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003fc0:	45                   	inc    ebp
c0003fc1:	83 c2 02             	add    edx,0x2
c0003fc4:	eb ac                	jmp    c0003f72 <dir_find+0x5f>
c0003fc6:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fcd:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fd2:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fd7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003fda:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fdd:	89 f0                	mov    eax,esi
c0003fdf:	e8 4c e2 ff ff       	call   c0002230 <move_window>
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	0f 85 c6 00 00 00    	jne    c00040b2 <dir_find+0x19f>
c0003fec:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fef:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003ff2:	84 c9                	test   cl,cl
c0003ff4:	0f 84 bd 00 00 00    	je     c00040b7 <dir_find+0x1a4>
c0003ffa:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ffd:	88 d0                	mov    al,dl
c0003fff:	83 e0 3f             	and    eax,0x3f
c0004002:	80 f9 e5             	cmp    cl,0xe5
c0004005:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004008:	0f 84 87 00 00 00    	je     c0004095 <dir_find+0x182>
c000400e:	80 e2 08             	and    dl,0x8
c0004011:	74 06                	je     c0004019 <dir_find+0x106>
c0004013:	3c 0f                	cmp    al,0xf
c0004015:	75 7e                	jne    c0004095 <dir_find+0x182>
c0004017:	eb 04                	jmp    c000401d <dir_find+0x10a>
c0004019:	3c 0f                	cmp    al,0xf
c000401b:	75 4c                	jne    c0004069 <dir_find+0x156>
c000401d:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004021:	75 7e                	jne    c00040a1 <dir_find+0x18e>
c0004023:	f6 c1 40             	test   cl,0x40
c0004026:	74 12                	je     c000403a <dir_find+0x127>
c0004028:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000402b:	83 e1 bf             	and    ecx,0xffffffbf
c000402e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004032:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004035:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004038:	eb 06                	jmp    c0004040 <dir_find+0x12d>
c000403a:	89 f8                	mov    eax,edi
c000403c:	38 c8                	cmp    al,cl
c000403e:	75 5c                	jne    c000409c <dir_find+0x189>
c0004040:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004044:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004049:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000404c:	75 53                	jne    c00040a1 <dir_find+0x18e>
c000404e:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004052:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004055:	89 ea                	mov    edx,ebp
c0004057:	e8 f4 fd ff ff       	call   c0003e50 <cmp_lfn>
c000405c:	85 c0                	test   eax,eax
c000405e:	74 41                	je     c00040a1 <dir_find+0x18e>
c0004060:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004064:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004067:	eb 38                	jmp    c00040a1 <dir_find+0x18e>
c0004069:	89 f8                	mov    eax,edi
c000406b:	84 c0                	test   al,al
c000406d:	75 0d                	jne    c000407c <dir_find+0x169>
c000406f:	89 e8                	mov    eax,ebp
c0004071:	e8 98 de ff ff       	call   c0001f0e <sum_sfn>
c0004076:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000407a:	74 52                	je     c00040ce <dir_find+0x1bb>
c000407c:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004080:	75 13                	jne    c0004095 <dir_find+0x182>
c0004082:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004085:	b9 0b 00 00 00       	mov    ecx,0xb
c000408a:	89 e8                	mov    eax,ebp
c000408c:	e8 60 da ff ff       	call   c0001af1 <mem_cmp>
c0004091:	85 c0                	test   eax,eax
c0004093:	74 39                	je     c00040ce <dir_find+0x1bb>
c0004095:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000409c:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040a1:	31 d2                	xor    edx,edx
c00040a3:	89 d8                	mov    eax,ebx
c00040a5:	e8 5c f4 ff ff       	call   c0003506 <dir_next>
c00040aa:	85 c0                	test   eax,eax
c00040ac:	0f 84 25 ff ff ff    	je     c0003fd7 <dir_find+0xc4>
c00040b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b5:	eb 17                	jmp    c00040ce <dir_find+0x1bb>
c00040b7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00040be:	eb 0e                	jmp    c00040ce <dir_find+0x1bb>
c00040c0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040c3:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00040c8:	0f 85 75 fe ff ff    	jne    c0003f43 <dir_find+0x30>
c00040ce:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040d1:	83 c4 1c             	add    esp,0x1c
c00040d4:	5b                   	pop    ebx
c00040d5:	5e                   	pop    esi
c00040d6:	5f                   	pop    edi
c00040d7:	5d                   	pop    ebp
c00040d8:	c3                   	ret    

c00040d9 <dir_register>:
c00040d9:	55                   	push   ebp
c00040da:	57                   	push   edi
c00040db:	56                   	push   esi
c00040dc:	be 06 00 00 00       	mov    esi,0x6
c00040e1:	53                   	push   ebx
c00040e2:	83 ec 6c             	sub    esp,0x6c
c00040e5:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040e9:	0f 85 62 02 00 00    	jne    c0004351 <dir_register+0x278>
c00040ef:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040f1:	31 ff                	xor    edi,edi
c00040f3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040f6:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040fb:	74 03                	je     c0004100 <dir_register+0x27>
c00040fd:	47                   	inc    edi
c00040fe:	eb f6                	jmp    c00040f6 <dir_register+0x1d>
c0004100:	89 c3                	mov    ebx,eax
c0004102:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004106:	0f 85 e1 00 00 00    	jne    c00041ed <dir_register+0x114>
c000410c:	83 c7 0e             	add    edi,0xe
c000410f:	b9 0f 00 00 00       	mov    ecx,0xf
c0004114:	89 f8                	mov    eax,edi
c0004116:	31 d2                	xor    edx,edx
c0004118:	f7 f1                	div    ecx
c000411a:	8d 50 02             	lea    edx,[eax+0x2]
c000411d:	89 c7                	mov    edi,eax
c000411f:	89 d8                	mov    eax,ebx
c0004121:	e8 12 f8 ff ff       	call   c0003938 <dir_alloc>
c0004126:	89 c6                	mov    esi,eax
c0004128:	85 c0                	test   eax,eax
c000412a:	0f 85 21 02 00 00    	jne    c0004351 <dir_register+0x278>
c0004130:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004136:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004139:	c1 e7 05             	shl    edi,0x5
c000413c:	29 f8                	sub    eax,edi
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004144:	a8 04                	test   al,0x4
c0004146:	0f 84 91 00 00 00    	je     c00041dd <dir_register+0x104>
c000414c:	83 e0 fb             	and    eax,0xfffffffb
c000414f:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004152:	89 d8                	mov    eax,ebx
c0004154:	e8 25 ec ff ff       	call   c0002d7e <fill_first_frag>
c0004159:	85 c0                	test   eax,eax
c000415b:	0f 85 ee 01 00 00    	jne    c000434f <dir_register+0x276>
c0004161:	83 c9 ff             	or     ecx,0xffffffff
c0004164:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004167:	89 d8                	mov    eax,ebx
c0004169:	e8 db eb ff ff       	call   c0002d49 <fill_last_frag>
c000416e:	85 c0                	test   eax,eax
c0004170:	0f 85 d9 01 00 00    	jne    c000434f <dir_register+0x276>
c0004176:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417a:	74 61                	je     c00041dd <dir_register+0x104>
c000417c:	89 da                	mov    edx,ebx
c000417e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004182:	e8 ea f5 ff ff       	call   c0003771 <load_obj_xdir>
c0004187:	85 c0                	test   eax,eax
c0004189:	0f 85 c0 01 00 00    	jne    c000434f <dir_register+0x276>
c000418f:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004193:	31 c9                	xor    ecx,ecx
c0004195:	c1 e2 09             	shl    edx,0x9
c0004198:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000419b:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000419e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00041a1:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00041a4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041a7:	83 c0 38             	add    eax,0x38
c00041aa:	e8 1c d9 ff ff       	call   c0001acb <st_qword>
c00041af:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041b2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00041b5:	83 c0 28             	add    eax,0x28
c00041b8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00041bb:	e8 0b d9 ff ff       	call   c0001acb <st_qword>
c00041c0:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00041c3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00041c6:	83 c8 01             	or     eax,0x1
c00041c9:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041cc:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041d0:	e8 db f7 ff ff       	call   c00039b0 <store_xdir>
c00041d5:	85 c0                	test   eax,eax
c00041d7:	0f 85 72 01 00 00    	jne    c000434f <dir_register+0x276>
c00041dd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041e3:	e8 c1 fb ff ff       	call   c0003da9 <create_xdir>
c00041e8:	e9 64 01 00 00       	jmp    c0004351 <dir_register+0x278>
c00041ed:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041f0:	b9 0c 00 00 00       	mov    ecx,0xc
c00041f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041f9:	89 c2                	mov    edx,eax
c00041fb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041ff:	e8 cd d8 ff ff       	call   c0001ad1 <mem_cpy>
c0004204:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004209:	74 58                	je     c0004263 <dir_register+0x18a>
c000420b:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000420f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004217:	83 ec 0c             	sub    esp,0xc
c000421a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000421d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004221:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004225:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004229:	e8 24 dc ff ff       	call   c0001e52 <gen_numname>
c000422e:	89 d8                	mov    eax,ebx
c0004230:	e8 de fc ff ff       	call   c0003f13 <dir_find>
c0004235:	83 c4 10             	add    esp,0x10
c0004238:	89 c6                	mov    esi,eax
c000423a:	85 c0                	test   eax,eax
c000423c:	75 15                	jne    c0004253 <dir_register+0x17a>
c000423e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004242:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004247:	75 ce                	jne    c0004217 <dir_register+0x13e>
c0004249:	be 07 00 00 00       	mov    esi,0x7
c000424e:	e9 fe 00 00 00       	jmp    c0004351 <dir_register+0x278>
c0004253:	83 f8 04             	cmp    eax,0x4
c0004256:	0f 85 f5 00 00 00    	jne    c0004351 <dir_register+0x278>
c000425c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004260:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004263:	b9 01 00 00 00       	mov    ecx,0x1
c0004268:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000426d:	74 0f                	je     c000427e <dir_register+0x1a5>
c000426f:	b9 0d 00 00 00       	mov    ecx,0xd
c0004274:	8d 47 0c             	lea    eax,[edi+0xc]
c0004277:	31 d2                	xor    edx,edx
c0004279:	f7 f1                	div    ecx
c000427b:	8d 48 01             	lea    ecx,[eax+0x1]
c000427e:	89 ca                	mov    edx,ecx
c0004280:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004284:	89 d8                	mov    eax,ebx
c0004286:	e8 ad f6 ff ff       	call   c0003938 <dir_alloc>
c000428b:	89 c6                	mov    esi,eax
c000428d:	85 c0                	test   eax,eax
c000428f:	0f 85 bc 00 00 00    	jne    c0004351 <dir_register+0x278>
c0004295:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004299:	49                   	dec    ecx
c000429a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000429e:	74 6a                	je     c000430a <dir_register+0x231>
c00042a0:	89 c8                	mov    eax,ecx
c00042a2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00042a5:	c1 e0 05             	shl    eax,0x5
c00042a8:	29 c2                	sub    edx,eax
c00042aa:	89 d8                	mov    eax,ebx
c00042ac:	e8 fd ec ff ff       	call   c0002fae <dir_sdi>
c00042b1:	89 c6                	mov    esi,eax
c00042b3:	85 c0                	test   eax,eax
c00042b5:	0f 85 96 00 00 00    	jne    c0004351 <dir_register+0x278>
c00042bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00042bf:	e8 4a dc ff ff       	call   c0001f0e <sum_sfn>
c00042c4:	0f b6 f8             	movzx  edi,al
c00042c7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042ca:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042cd:	89 e8                	mov    eax,ebp
c00042cf:	e8 5c df ff ff       	call   c0002230 <move_window>
c00042d4:	89 c6                	mov    esi,eax
c00042d6:	85 c0                	test   eax,eax
c00042d8:	75 77                	jne    c0004351 <dir_register+0x278>
c00042da:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00042df:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042e2:	83 ec 0c             	sub    esp,0xc
c00042e5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042e8:	57                   	push   edi
c00042e9:	e8 e0 da ff ff       	call   c0001dce <put_lfn>
c00042ee:	31 d2                	xor    edx,edx
c00042f0:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 0b f2 ff ff       	call   c0003506 <dir_next>
c00042fb:	83 c4 10             	add    esp,0x10
c00042fe:	89 c6                	mov    esi,eax
c0004300:	85 c0                	test   eax,eax
c0004302:	75 4d                	jne    c0004351 <dir_register+0x278>
c0004304:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004308:	75 bd                	jne    c00042c7 <dir_register+0x1ee>
c000430a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000430d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004310:	89 e8                	mov    eax,ebp
c0004312:	e8 19 df ff ff       	call   c0002230 <move_window>
c0004317:	89 c6                	mov    esi,eax
c0004319:	85 c0                	test   eax,eax
c000431b:	75 34                	jne    c0004351 <dir_register+0x278>
c000431d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004320:	b9 20 00 00 00       	mov    ecx,0x20
c0004325:	31 d2                	xor    edx,edx
c0004327:	e8 ba d7 ff ff       	call   c0001ae6 <mem_set>
c000432c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000432f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004333:	b9 0b 00 00 00       	mov    ecx,0xb
c0004338:	e8 94 d7 ff ff       	call   c0001ad1 <mem_cpy>
c000433d:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004340:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004343:	83 e0 18             	and    eax,0x18
c0004346:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004349:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000434d:	eb 02                	jmp    c0004351 <dir_register+0x278>
c000434f:	89 c6                	mov    esi,eax
c0004351:	83 c4 6c             	add    esp,0x6c
c0004354:	89 f0                	mov    eax,esi
c0004356:	5b                   	pop    ebx
c0004357:	5e                   	pop    esi
c0004358:	5f                   	pop    edi
c0004359:	5d                   	pop    ebp
c000435a:	c3                   	ret    

c000435b <sync_fs>:
c000435b:	56                   	push   esi
c000435c:	53                   	push   ebx
c000435d:	53                   	push   ebx
c000435e:	89 c3                	mov    ebx,eax
c0004360:	e8 37 de ff ff       	call   c000219c <sync_window>
c0004365:	85 c0                	test   eax,eax
c0004367:	0f 85 b1 00 00 00    	jne    c000441e <sync_fs+0xc3>
c000436d:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004370:	0f 85 8e 00 00 00    	jne    c0004404 <sync_fs+0xa9>
c0004376:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000437a:	0f 85 84 00 00 00    	jne    c0004404 <sync_fs+0xa9>
c0004380:	b9 00 02 00 00       	mov    ecx,0x200
c0004385:	8d 73 54             	lea    esi,[ebx+0x54]
c0004388:	31 d2                	xor    edx,edx
c000438a:	89 f0                	mov    eax,esi
c000438c:	e8 55 d7 ff ff       	call   c0001ae6 <mem_set>
c0004391:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004397:	ba 55 aa 00 00       	mov    edx,0xaa55
c000439c:	e8 23 d7 ff ff       	call   c0001ac4 <st_word>
c00043a1:	ba 52 52 61 41       	mov    edx,0x41615252
c00043a6:	89 f0                	mov    eax,esi
c00043a8:	e8 1b d7 ff ff       	call   c0001ac8 <st_dword>
c00043ad:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00043b3:	ba 72 72 41 61       	mov    edx,0x61417272
c00043b8:	e8 0b d7 ff ff       	call   c0001ac8 <st_dword>
c00043bd:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00043c0:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00043c6:	e8 fd d6 ff ff       	call   c0001ac8 <st_dword>
c00043cb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043ce:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043d4:	e8 ef d6 ff ff       	call   c0001ac8 <st_dword>
c00043d9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043dc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043df:	83 c0 01             	add    eax,0x1
c00043e2:	83 d2 00             	adc    edx,0x0
c00043e5:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043e8:	83 ec 0c             	sub    esp,0xc
c00043eb:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043ee:	6a 01                	push   0x1
c00043f0:	52                   	push   edx
c00043f1:	50                   	push   eax
c00043f2:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043f6:	56                   	push   esi
c00043f7:	50                   	push   eax
c00043f8:	e8 20 d6 ff ff       	call   c0001a1d <disk_write>
c00043fd:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004401:	83 c4 20             	add    esp,0x20
c0004404:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004408:	51                   	push   ecx
c0004409:	6a 00                	push   0x0
c000440b:	6a 00                	push   0x0
c000440d:	50                   	push   eax
c000440e:	e8 20 d6 ff ff       	call   c0001a33 <disk_ioctl>
c0004413:	83 c4 10             	add    esp,0x10
c0004416:	85 c0                	test   eax,eax
c0004418:	0f 95 c0             	setne  al
c000441b:	0f b6 c0             	movzx  eax,al
c000441e:	5a                   	pop    edx
c000441f:	5b                   	pop    ebx
c0004420:	5e                   	pop    esi
c0004421:	c3                   	ret    

c0004422 <create_partition>:
c0004422:	55                   	push   ebp
c0004423:	0f b6 c0             	movzx  eax,al
c0004426:	57                   	push   edi
c0004427:	56                   	push   esi
c0004428:	53                   	push   ebx
c0004429:	83 ec 60             	sub    esp,0x60
c000442c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004430:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004434:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004438:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000443c:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004440:	50                   	push   eax
c0004441:	6a 01                	push   0x1
c0004443:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004447:	e8 e7 d5 ff ff       	call   c0001a33 <disk_ioctl>
c000444c:	83 c4 10             	add    esp,0x10
c000444f:	85 c0                	test   eax,eax
c0004451:	74 0a                	je     c000445d <create_partition+0x3b>
c0004453:	b8 01 00 00 00       	mov    eax,0x1
c0004458:	e9 67 05 00 00       	jmp    c00049c4 <create_partition+0x5a2>
c000445d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004461:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004465:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004469:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000446d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004472:	0f 86 ed 03 00 00    	jbe    c0004865 <create_partition+0x443>
c0004478:	83 c0 df             	add    eax,0xffffffdf
c000447b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004483:	83 d2 ff             	adc    edx,0xffffffff
c0004486:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000448a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000448e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004492:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004496:	83 c0 bd             	add    eax,0xffffffbd
c0004499:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00044a0:	83 d2 ff             	adc    edx,0xffffffff
c00044a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00044a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00044ab:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044b3:	be 22 00 00 00       	mov    esi,0x22
c00044b8:	31 ff                	xor    edi,edi
c00044ba:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00044c2:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044ca:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044d2:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044d6:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044dc:	75 0e                	jne    c00044ec <create_partition+0xca>
c00044de:	b9 00 02 00 00       	mov    ecx,0x200
c00044e3:	31 d2                	xor    edx,edx
c00044e5:	89 d8                	mov    eax,ebx
c00044e7:	e8 fa d5 ff ff       	call   c0001ae6 <mem_set>
c00044ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044f0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044f8:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044fb:	0f 84 23 01 00 00    	je     c0004624 <create_partition+0x202>
c0004501:	89 f0                	mov    eax,esi
c0004503:	89 fa                	mov    edx,edi
c0004505:	05 ff 07 00 00       	add    eax,0x7ff
c000450a:	83 d2 00             	adc    edx,0x0
c000450d:	89 c1                	mov    ecx,eax
c000450f:	89 d7                	mov    edi,edx
c0004511:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004517:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000451b:	89 ce                	mov    esi,ecx
c000451d:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004521:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004525:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004529:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000452c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004530:	89 04 24             	mov    DWORD PTR [esp],eax
c0004533:	b8 64 00 00 00       	mov    eax,0x64
c0004538:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000453b:	b8 00 00 00 00       	mov    eax,0x0
c0004540:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004544:	72 41                	jb     c0004587 <create_partition+0x165>
c0004546:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000454a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000454e:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004552:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004557:	01 c1                	add    ecx,eax
c0004559:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000455d:	f7 24 24             	mul    DWORD PTR [esp]
c0004560:	6a 00                	push   0x0
c0004562:	01 ca                	add    edx,ecx
c0004564:	6a 64                	push   0x64
c0004566:	52                   	push   edx
c0004567:	50                   	push   eax
c0004568:	e8 ef ed 01 00       	call   c002335c <__udivdi3>
c000456d:	83 c4 10             	add    esp,0x10
c0004570:	05 ff 07 00 00       	add    eax,0x7ff
c0004575:	83 d2 00             	adc    edx,0x0
c0004578:	89 c1                	mov    ecx,eax
c000457a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000457e:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004584:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004587:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000458a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000458e:	01 f0                	add    eax,esi
c0004590:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004594:	11 fa                	adc    edx,edi
c0004596:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000459a:	19 d1                	sbb    ecx,edx
c000459c:	73 2e                	jae    c00045cc <create_partition+0x1aa>
c000459e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00045a2:	89 f8                	mov    eax,edi
c00045a4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00045ab:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00045af:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045b7:	73 6b                	jae    c0004624 <create_partition+0x202>
c00045b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00045bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00045c1:	29 f0                	sub    eax,esi
c00045c3:	19 fa                	sbb    edx,edi
c00045c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00045c8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045d0:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045d3:	74 4f                	je     c0004624 <create_partition+0x202>
c00045d5:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045d8:	b9 10 00 00 00       	mov    ecx,0x10
c00045dd:	ba f0 5d 02 c0       	mov    edx,0xc0025df0
c00045e2:	e8 ea d4 ff ff       	call   c0001ad1 <mem_cpy>
c00045e7:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045eb:	b9 10 00 00 00       	mov    ecx,0x10
c00045f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045f4:	e8 2c db ff ff       	call   c0002125 <make_rand>
c00045f9:	89 f2                	mov    edx,esi
c00045fb:	89 f9                	mov    ecx,edi
c00045fd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004601:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004605:	e8 c1 d4 ff ff       	call   c0001acb <st_qword>
c000460a:	03 34 24             	add    esi,DWORD PTR [esp]
c000460d:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004611:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004615:	89 f2                	mov    edx,esi
c0004617:	89 f9                	mov    ecx,edi
c0004619:	83 c2 ff             	add    edx,0xffffffff
c000461c:	83 d1 ff             	adc    ecx,0xffffffff
c000461f:	e8 a7 d4 ff ff       	call   c0001acb <st_qword>
c0004624:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004628:	83 e8 80             	sub    eax,0xffffff80
c000462b:	89 c5                	mov    ebp,eax
c000462d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004631:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004637:	75 6b                	jne    c00046a4 <create_partition+0x282>
c0004639:	45                   	inc    ebp
c000463a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000463e:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004643:	e8 39 da ff ff       	call   c0002081 <crc32>
c0004648:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000464e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004652:	75 e5                	jne    c0004639 <create_partition+0x217>
c0004654:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004658:	31 d2                	xor    edx,edx
c000465a:	83 ec 0c             	sub    esp,0xc
c000465d:	c1 ed 09             	shr    ebp,0x9
c0004660:	6a 01                	push   0x1
c0004662:	8d 45 02             	lea    eax,[ebp+0x2]
c0004665:	52                   	push   edx
c0004666:	50                   	push   eax
c0004667:	53                   	push   ebx
c0004668:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000466c:	e8 ac d3 ff ff       	call   c0001a1d <disk_write>
c0004671:	83 c4 20             	add    esp,0x20
c0004674:	85 c0                	test   eax,eax
c0004676:	0f 85 d7 fd ff ff    	jne    c0004453 <create_partition+0x31>
c000467c:	83 ec 0c             	sub    esp,0xc
c000467f:	31 d2                	xor    edx,edx
c0004681:	6a 01                	push   0x1
c0004683:	89 e8                	mov    eax,ebp
c0004685:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004689:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000468d:	52                   	push   edx
c000468e:	50                   	push   eax
c000468f:	53                   	push   ebx
c0004690:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004694:	e8 84 d3 ff ff       	call   c0001a1d <disk_write>
c0004699:	83 c4 20             	add    esp,0x20
c000469c:	85 c0                	test   eax,eax
c000469e:	0f 85 af fd ff ff    	jne    c0004453 <create_partition+0x31>
c00046a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046a8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00046ac:	3d 00 40 00 00       	cmp    eax,0x4000
c00046b1:	74 0d                	je     c00046c0 <create_partition+0x29e>
c00046b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00046b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00046bb:	e9 12 fe ff ff       	jmp    c00044d2 <create_partition+0xb0>
c00046c0:	31 d2                	xor    edx,edx
c00046c2:	b9 00 02 00 00       	mov    ecx,0x200
c00046c7:	89 d8                	mov    eax,ebx
c00046c9:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046cc:	e8 15 d4 ff ff       	call   c0001ae6 <mem_set>
c00046d1:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046d4:	b9 10 00 00 00       	mov    ecx,0x10
c00046d9:	ba e0 5c 02 c0       	mov    edx,0xc0025ce0
c00046de:	89 d8                	mov    eax,ebx
c00046e0:	e8 ec d3 ff ff       	call   c0001ad1 <mem_cpy>
c00046e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046e9:	8d 43 58             	lea    eax,[ebx+0x58]
c00046ec:	f7 d2                	not    edx
c00046ee:	e8 d5 d3 ff ff       	call   c0001ac8 <st_dword>
c00046f3:	8d 43 18             	lea    eax,[ebx+0x18]
c00046f6:	31 c9                	xor    ecx,ecx
c00046f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00046fb:	ba 01 00 00 00       	mov    edx,0x1
c0004700:	e8 c6 d3 ff ff       	call   c0001acb <st_qword>
c0004705:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004709:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000470d:	83 c2 ff             	add    edx,0xffffffff
c0004710:	89 e8                	mov    eax,ebp
c0004712:	83 d1 ff             	adc    ecx,0xffffffff
c0004715:	e8 b1 d3 ff ff       	call   c0001acb <st_qword>
c000471a:	31 c9                	xor    ecx,ecx
c000471c:	8d 43 28             	lea    eax,[ebx+0x28]
c000471f:	ba 22 00 00 00       	mov    edx,0x22
c0004724:	e8 a2 d3 ff ff       	call   c0001acb <st_qword>
c0004729:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000472d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004731:	83 c2 de             	add    edx,0xffffffde
c0004734:	8d 43 30             	lea    eax,[ebx+0x30]
c0004737:	83 d1 ff             	adc    ecx,0xffffffff
c000473a:	31 f6                	xor    esi,esi
c000473c:	e8 8a d3 ff ff       	call   c0001acb <st_qword>
c0004741:	8d 43 54             	lea    eax,[ebx+0x54]
c0004744:	ba 80 00 00 00       	mov    edx,0x80
c0004749:	e8 7a d3 ff ff       	call   c0001ac8 <st_dword>
c000474e:	8d 43 50             	lea    eax,[ebx+0x50]
c0004751:	ba 80 00 00 00       	mov    edx,0x80
c0004756:	e8 6d d3 ff ff       	call   c0001ac8 <st_dword>
c000475b:	ba 02 00 00 00       	mov    edx,0x2
c0004760:	89 f8                	mov    eax,edi
c0004762:	e8 61 d3 ff ff       	call   c0001ac8 <st_dword>
c0004767:	8d 53 38             	lea    edx,[ebx+0x38]
c000476a:	b9 10 00 00 00       	mov    ecx,0x10
c000476f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004773:	e8 ad d9 ff ff       	call   c0002125 <make_rand>
c0004778:	83 c8 ff             	or     eax,0xffffffff
c000477b:	46                   	inc    esi
c000477c:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004781:	e8 fb d8 ff ff       	call   c0002081 <crc32>
c0004786:	83 fe 5c             	cmp    esi,0x5c
c0004789:	75 f0                	jne    c000477b <create_partition+0x359>
c000478b:	f7 d0                	not    eax
c000478d:	8d 73 10             	lea    esi,[ebx+0x10]
c0004790:	89 c2                	mov    edx,eax
c0004792:	89 f0                	mov    eax,esi
c0004794:	e8 2f d3 ff ff       	call   c0001ac8 <st_dword>
c0004799:	83 ec 0c             	sub    esp,0xc
c000479c:	6a 01                	push   0x1
c000479e:	6a 00                	push   0x0
c00047a0:	6a 01                	push   0x1
c00047a2:	53                   	push   ebx
c00047a3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047a7:	e8 71 d2 ff ff       	call   c0001a1d <disk_write>
c00047ac:	83 c4 20             	add    esp,0x20
c00047af:	85 c0                	test   eax,eax
c00047b1:	0f 85 9c fc ff ff    	jne    c0004453 <create_partition+0x31>
c00047b7:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00047bb:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00047bf:	83 c2 ff             	add    edx,0xffffffff
c00047c2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c5:	83 d1 ff             	adc    ecx,0xffffffff
c00047c8:	e8 fe d2 ff ff       	call   c0001acb <st_qword>
c00047cd:	ba 01 00 00 00       	mov    edx,0x1
c00047d2:	31 c9                	xor    ecx,ecx
c00047d4:	89 e8                	mov    eax,ebp
c00047d6:	e8 f0 d2 ff ff       	call   c0001acb <st_qword>
c00047db:	89 f8                	mov    eax,edi
c00047dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047e1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047e5:	31 ff                	xor    edi,edi
c00047e7:	e8 df d2 ff ff       	call   c0001acb <st_qword>
c00047ec:	89 f0                	mov    eax,esi
c00047ee:	31 d2                	xor    edx,edx
c00047f0:	e8 d3 d2 ff ff       	call   c0001ac8 <st_dword>
c00047f5:	83 c8 ff             	or     eax,0xffffffff
c00047f8:	47                   	inc    edi
c00047f9:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047fe:	e8 7e d8 ff ff       	call   c0002081 <crc32>
c0004803:	83 ff 5c             	cmp    edi,0x5c
c0004806:	75 f0                	jne    c00047f8 <create_partition+0x3d6>
c0004808:	f7 d0                	not    eax
c000480a:	89 c2                	mov    edx,eax
c000480c:	89 f0                	mov    eax,esi
c000480e:	e8 b5 d2 ff ff       	call   c0001ac8 <st_dword>
c0004813:	83 ec 0c             	sub    esp,0xc
c0004816:	6a 01                	push   0x1
c0004818:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000481c:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004820:	83 c0 ff             	add    eax,0xffffffff
c0004823:	83 d2 ff             	adc    edx,0xffffffff
c0004826:	52                   	push   edx
c0004827:	50                   	push   eax
c0004828:	53                   	push   ebx
c0004829:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000482d:	e8 eb d1 ff ff       	call   c0001a1d <disk_write>
c0004832:	83 c4 20             	add    esp,0x20
c0004835:	85 c0                	test   eax,eax
c0004837:	0f 85 16 fc ff ff    	jne    c0004453 <create_partition+0x31>
c000483d:	31 d2                	xor    edx,edx
c000483f:	89 d8                	mov    eax,ebx
c0004841:	b9 00 02 00 00       	mov    ecx,0x200
c0004846:	e8 9b d2 ff ff       	call   c0001ae6 <mem_set>
c000484b:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004851:	b9 10 00 00 00       	mov    ecx,0x10
c0004856:	ba f0 5c 02 c0       	mov    edx,0xc0025cf0
c000485b:	e8 71 d2 ff ff       	call   c0001ad1 <mem_cpy>
c0004860:	e9 21 01 00 00       	jmp    c0004986 <create_partition+0x564>
c0004865:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004869:	b9 05 00 00 00       	mov    ecx,0x5
c000486e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004871:	bf 08 00 00 00       	mov    edi,0x8
c0004876:	89 f8                	mov    eax,edi
c0004878:	31 d2                	xor    edx,edx
c000487a:	0f b6 f0             	movzx  esi,al
c000487d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004880:	f7 f6                	div    esi
c0004882:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004887:	76 0a                	jbe    c0004893 <create_partition+0x471>
c0004889:	d1 e7                	shl    edi,1
c000488b:	49                   	dec    ecx
c000488c:	75 e8                	jne    c0004876 <create_partition+0x454>
c000488e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004893:	b9 00 02 00 00       	mov    ecx,0x200
c0004898:	31 d2                	xor    edx,edx
c000489a:	89 d8                	mov    eax,ebx
c000489c:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00048a2:	e8 3f d2 ff ff       	call   c0001ae6 <mem_set>
c00048a7:	b9 64 00 00 00       	mov    ecx,0x64
c00048ac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048af:	31 d2                	xor    edx,edx
c00048b1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00048b9:	f7 f1                	div    ecx
c00048bb:	b9 3f 00 00 00       	mov    ecx,0x3f
c00048c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048c4:	89 f8                	mov    eax,edi
c00048c6:	0f b6 c0             	movzx  eax,al
c00048c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00048cd:	e9 80 00 00 00       	jmp    c0004952 <create_partition+0x530>
c00048d2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048d5:	29 cf                	sub    edi,ecx
c00048d7:	89 ca                	mov    edx,ecx
c00048d9:	89 f0                	mov    eax,esi
c00048db:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048e0:	e8 e3 d1 ff ff       	call   c0001ac8 <st_dword>
c00048e5:	8d 46 04             	lea    eax,[esi+0x4]
c00048e8:	89 fa                	mov    edx,edi
c00048ea:	83 c6 10             	add    esi,0x10
c00048ed:	e8 d6 d1 ff ff       	call   c0001ac8 <st_dword>
c00048f2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048f6:	31 d2                	xor    edx,edx
c00048f8:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048fb:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048ff:	89 c8                	mov    eax,ecx
c0004901:	01 f9                	add    ecx,edi
c0004903:	f7 f5                	div    ebp
c0004905:	89 d5                	mov    ebp,edx
c0004907:	31 d2                	xor    edx,edx
c0004909:	45                   	inc    ebp
c000490a:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000490e:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004911:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004914:	89 c2                	mov    edx,eax
c0004916:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004919:	c1 ea 02             	shr    edx,0x2
c000491c:	83 e2 c0             	and    edx,0xffffffc0
c000491f:	09 ea                	or     edx,ebp
c0004921:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004926:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004929:	31 d2                	xor    edx,edx
c000492b:	f7 f5                	div    ebp
c000492d:	89 d7                	mov    edi,edx
c000492f:	31 d2                	xor    edx,edx
c0004931:	47                   	inc    edi
c0004932:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004936:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004939:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c000493c:	89 c5                	mov    ebp,eax
c000493e:	c1 ed 02             	shr    ebp,0x2
c0004941:	83 e5 c0             	and    ebp,0xffffffc0
c0004944:	09 ef                	or     edi,ebp
c0004946:	89 fa                	mov    edx,edi
c0004948:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c000494b:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004950:	74 34                	je     c0004986 <create_partition+0x564>
c0004952:	85 c9                	test   ecx,ecx
c0004954:	74 30                	je     c0004986 <create_partition+0x564>
c0004956:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004959:	76 2b                	jbe    c0004986 <create_partition+0x564>
c000495b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000495f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004963:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004966:	83 ff 64             	cmp    edi,0x64
c0004969:	76 4b                	jbe    c00049b6 <create_partition+0x594>
c000496b:	89 f8                	mov    eax,edi
c000496d:	01 c8                	add    eax,ecx
c000496f:	0f 82 5d ff ff ff    	jb     c00048d2 <create_partition+0x4b0>
c0004975:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004978:	0f 87 54 ff ff ff    	ja     c00048d2 <create_partition+0x4b0>
c000497e:	85 ff                	test   edi,edi
c0004980:	0f 85 51 ff ff ff    	jne    c00048d7 <create_partition+0x4b5>
c0004986:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000498c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004991:	e8 2e d1 ff ff       	call   c0001ac4 <st_word>
c0004996:	83 ec 0c             	sub    esp,0xc
c0004999:	6a 01                	push   0x1
c000499b:	6a 00                	push   0x0
c000499d:	6a 00                	push   0x0
c000499f:	53                   	push   ebx
c00049a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049a4:	e8 74 d0 ff ff       	call   c0001a1d <disk_write>
c00049a9:	83 c4 20             	add    esp,0x20
c00049ac:	85 c0                	test   eax,eax
c00049ae:	0f 95 c0             	setne  al
c00049b1:	0f b6 c0             	movzx  eax,al
c00049b4:	eb 0e                	jmp    c00049c4 <create_partition+0x5a2>
c00049b6:	74 07                	je     c00049bf <create_partition+0x59d>
c00049b8:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00049bd:	eb ac                	jmp    c000496b <create_partition+0x549>
c00049bf:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049c2:	eb a7                	jmp    c000496b <create_partition+0x549>
c00049c4:	83 c4 5c             	add    esp,0x5c
c00049c7:	5b                   	pop    ebx
c00049c8:	5e                   	pop    esi
c00049c9:	5f                   	pop    edi
c00049ca:	5d                   	pop    ebp
c00049cb:	c3                   	ret    

c00049cc <get_fileinfo>:
c00049cc:	55                   	push   ebp
c00049cd:	57                   	push   edi
c00049ce:	56                   	push   esi
c00049cf:	53                   	push   ebx
c00049d0:	83 ec 1c             	sub    esp,0x1c
c00049d3:	8b 30                	mov    esi,DWORD PTR [eax]
c00049d5:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049d9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049dd:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049e0:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049e3:	0f 84 dc 01 00 00    	je     c0004bc5 <get_fileinfo+0x1f9>
c00049e9:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049ec:	75 0f                	jne    c00049fd <get_fileinfo+0x31>
c00049ee:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049f1:	83 c4 1c             	add    esp,0x1c
c00049f4:	5b                   	pop    ebx
c00049f5:	5e                   	pop    esi
c00049f6:	5f                   	pop    edi
c00049f7:	5d                   	pop    ebp
c00049f8:	e9 58 d5 ff ff       	jmp    c0001f55 <get_xfileinfo>
c00049fd:	89 d3                	mov    ebx,edx
c00049ff:	89 c6                	mov    esi,eax
c0004a01:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004a05:	74 6a                	je     c0004a71 <get_fileinfo+0xa5>
c0004a07:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004a0f:	31 ed                	xor    ebp,ebp
c0004a11:	31 ff                	xor    edi,edi
c0004a13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004a17:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a1b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a1e:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a22:	66 85 d2             	test   dx,dx
c0004a25:	74 3e                	je     c0004a65 <get_fileinfo+0x99>
c0004a27:	66 85 ed             	test   bp,bp
c0004a2a:	75 0c                	jne    c0004a38 <get_fileinfo+0x6c>
c0004a2c:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a32:	66 3d ff 07          	cmp    ax,0x7ff
c0004a36:	76 22                	jbe    c0004a5a <get_fileinfo+0x8e>
c0004a38:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a3d:	89 e8                	mov    eax,ebp
c0004a3f:	29 f9                	sub    ecx,edi
c0004a41:	c1 e0 10             	shl    eax,0x10
c0004a44:	09 d0                	or     eax,edx
c0004a46:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a4a:	e8 a3 d1 ff ff       	call   c0001bf2 <put_utf>
c0004a4f:	84 c0                	test   al,al
c0004a51:	74 10                	je     c0004a63 <get_fileinfo+0x97>
c0004a53:	0f b6 c0             	movzx  eax,al
c0004a56:	31 d2                	xor    edx,edx
c0004a58:	01 c7                	add    edi,eax
c0004a5a:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a5f:	89 d5                	mov    ebp,edx
c0004a61:	eb b0                	jmp    c0004a13 <get_fileinfo+0x47>
c0004a63:	31 ff                	xor    edi,edi
c0004a65:	66 85 ed             	test   bp,bp
c0004a68:	74 02                	je     c0004a6c <get_fileinfo+0xa0>
c0004a6a:	31 ff                	xor    edi,edi
c0004a6c:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a71:	31 ff                	xor    edi,edi
c0004a73:	31 c9                	xor    ecx,ecx
c0004a75:	83 f9 0a             	cmp    ecx,0xa
c0004a78:	0f 87 ad 00 00 00    	ja     c0004b2b <get_fileinfo+0x15f>
c0004a7e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a81:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a84:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a88:	66 83 fa 20          	cmp    dx,0x20
c0004a8c:	0f 84 92 00 00 00    	je     c0004b24 <get_fileinfo+0x158>
c0004a92:	66 83 fa 05          	cmp    dx,0x5
c0004a96:	75 05                	jne    c0004a9d <get_fileinfo+0xd1>
c0004a98:	ba e5 00 00 00       	mov    edx,0xe5
c0004a9d:	83 ff 0b             	cmp    edi,0xb
c0004aa0:	77 0b                	ja     c0004aad <get_fileinfo+0xe1>
c0004aa2:	83 fd 09             	cmp    ebp,0x9
c0004aa5:	75 06                	jne    c0004aad <get_fileinfo+0xe1>
c0004aa7:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004aac:	47                   	inc    edi
c0004aad:	0f b7 c2             	movzx  eax,dx
c0004ab0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ab4:	e8 6d d0 ff ff       	call   c0001b26 <dbc_1st>
c0004ab9:	85 c0                	test   eax,eax
c0004abb:	74 2f                	je     c0004aec <get_fileinfo+0x120>
c0004abd:	83 fd 08             	cmp    ebp,0x8
c0004ac0:	74 2a                	je     c0004aec <get_fileinfo+0x120>
c0004ac2:	83 fd 0b             	cmp    ebp,0xb
c0004ac5:	74 25                	je     c0004aec <get_fileinfo+0x120>
c0004ac7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aca:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ace:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ad2:	e8 52 d0 ff ff       	call   c0001b29 <dbc_2nd>
c0004ad7:	85 c0                	test   eax,eax
c0004ad9:	74 11                	je     c0004aec <get_fileinfo+0x120>
c0004adb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004adf:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004ae4:	c1 e2 08             	shl    edx,0x8
c0004ae7:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004aea:	09 c2                	or     edx,eax
c0004aec:	0f b7 d2             	movzx  edx,dx
c0004aef:	50                   	push   eax
c0004af0:	50                   	push   eax
c0004af1:	68 b5 01 00 00       	push   0x1b5
c0004af6:	52                   	push   edx
c0004af7:	e8 46 38 00 00       	call   c0008342 <ff_oem2uni>
c0004afc:	83 c4 10             	add    esp,0x10
c0004aff:	66 85 c0             	test   ax,ax
c0004b02:	75 04                	jne    c0004b08 <get_fileinfo+0x13c>
c0004b04:	31 ff                	xor    edi,edi
c0004b06:	eb 23                	jmp    c0004b2b <get_fileinfo+0x15f>
c0004b08:	b9 0c 00 00 00       	mov    ecx,0xc
c0004b0d:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004b11:	29 f9                	sub    ecx,edi
c0004b13:	0f b7 c0             	movzx  eax,ax
c0004b16:	e8 d7 d0 ff ff       	call   c0001bf2 <put_utf>
c0004b1b:	84 c0                	test   al,al
c0004b1d:	74 e5                	je     c0004b04 <get_fileinfo+0x138>
c0004b1f:	0f b6 c0             	movzx  eax,al
c0004b22:	01 c7                	add    edi,eax
c0004b24:	89 e9                	mov    ecx,ebp
c0004b26:	e9 4a ff ff ff       	jmp    c0004a75 <get_fileinfo+0xa9>
c0004b2b:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b30:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b34:	75 54                	jne    c0004b8a <get_fileinfo+0x1be>
c0004b36:	85 ff                	test   edi,edi
c0004b38:	75 0b                	jne    c0004b45 <get_fileinfo+0x179>
c0004b3a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b3e:	ba 01 00 00 00       	mov    edx,0x1
c0004b43:	eb 33                	jmp    c0004b78 <get_fileinfo+0x1ac>
c0004b45:	b1 08                	mov    cl,0x8
c0004b47:	31 d2                	xor    edx,edx
c0004b49:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b4f:	84 c0                	test   al,al
c0004b51:	74 25                	je     c0004b78 <get_fileinfo+0x1ac>
c0004b53:	66 83 f8 2e          	cmp    ax,0x2e
c0004b57:	74 16                	je     c0004b6f <get_fileinfo+0x1a3>
c0004b59:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b5c:	66 83 ff 19          	cmp    di,0x19
c0004b60:	77 0f                	ja     c0004b71 <get_fileinfo+0x1a5>
c0004b62:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b65:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b68:	74 07                	je     c0004b71 <get_fileinfo+0x1a5>
c0004b6a:	83 c0 20             	add    eax,0x20
c0004b6d:	eb 02                	jmp    c0004b71 <get_fileinfo+0x1a5>
c0004b6f:	b1 10                	mov    cl,0x10
c0004b71:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b75:	42                   	inc    edx
c0004b76:	eb d1                	jmp    c0004b49 <get_fileinfo+0x17d>
c0004b78:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b7d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b80:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b84:	75 04                	jne    c0004b8a <get_fileinfo+0x1be>
c0004b86:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b8a:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8d:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b90:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b96:	83 c0 1c             	add    eax,0x1c
c0004b99:	e8 c1 ce ff ff       	call   c0001a5f <ld_dword>
c0004b9e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ba5:	89 03                	mov    DWORD PTR [ebx],eax
c0004ba7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004baa:	83 c0 16             	add    eax,0x16
c0004bad:	e8 a0 ce ff ff       	call   c0001a52 <ld_word>
c0004bb2:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004bb6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bb9:	83 c0 18             	add    eax,0x18
c0004bbc:	e8 91 ce ff ff       	call   c0001a52 <ld_word>
c0004bc1:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004bc5:	83 c4 1c             	add    esp,0x1c
c0004bc8:	5b                   	pop    ebx
c0004bc9:	5e                   	pop    esi
c0004bca:	5f                   	pop    edi
c0004bcb:	5d                   	pop    ebp
c0004bcc:	c3                   	ret    

c0004bcd <ld_clust.isra.0>:
c0004bcd:	56                   	push   esi
c0004bce:	89 c6                	mov    esi,eax
c0004bd0:	53                   	push   ebx
c0004bd1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bd4:	89 d3                	mov    ebx,edx
c0004bd6:	e8 77 ce ff ff       	call   c0001a52 <ld_word>
c0004bdb:	0f b7 c8             	movzx  ecx,ax
c0004bde:	89 f0                	mov    eax,esi
c0004be0:	3c 03                	cmp    al,0x3
c0004be2:	75 0d                	jne    c0004bf1 <ld_clust.isra.0+0x24>
c0004be4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004be7:	e8 66 ce ff ff       	call   c0001a52 <ld_word>
c0004bec:	c1 e0 10             	shl    eax,0x10
c0004bef:	09 c1                	or     ecx,eax
c0004bf1:	89 c8                	mov    eax,ecx
c0004bf3:	5b                   	pop    ebx
c0004bf4:	5e                   	pop    esi
c0004bf5:	c3                   	ret    

c0004bf6 <st_clust.isra.1>:
c0004bf6:	56                   	push   esi
c0004bf7:	89 c6                	mov    esi,eax
c0004bf9:	53                   	push   ebx
c0004bfa:	89 d3                	mov    ebx,edx
c0004bfc:	0f b7 d1             	movzx  edx,cx
c0004bff:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004c02:	e8 bd ce ff ff       	call   c0001ac4 <st_word>
c0004c07:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004c0a:	75 0f                	jne    c0004c1b <st_clust.isra.1+0x25>
c0004c0c:	c1 e9 10             	shr    ecx,0x10
c0004c0f:	8d 43 14             	lea    eax,[ebx+0x14]
c0004c12:	89 ca                	mov    edx,ecx
c0004c14:	5b                   	pop    ebx
c0004c15:	5e                   	pop    esi
c0004c16:	e9 a9 ce ff ff       	jmp    c0001ac4 <st_word>
c0004c1b:	5b                   	pop    ebx
c0004c1c:	5e                   	pop    esi
c0004c1d:	c3                   	ret    

c0004c1e <init_alloc_info.isra.2>:
c0004c1e:	56                   	push   esi
c0004c1f:	53                   	push   ebx
c0004c20:	89 c6                	mov    esi,eax
c0004c22:	89 d3                	mov    ebx,edx
c0004c24:	51                   	push   ecx
c0004c25:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c27:	83 c0 34             	add    eax,0x34
c0004c2a:	e8 30 ce ff ff       	call   c0001a5f <ld_dword>
c0004c2f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c32:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c34:	83 c0 38             	add    eax,0x38
c0004c37:	e8 3b ce ff ff       	call   c0001a77 <ld_qword>
c0004c3c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c3f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c42:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c44:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c47:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c4e:	83 e0 02             	and    eax,0x2
c0004c51:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c54:	5b                   	pop    ebx
c0004c55:	5b                   	pop    ebx
c0004c56:	5e                   	pop    esi
c0004c57:	c3                   	ret    

c0004c58 <follow_path>:
c0004c58:	56                   	push   esi
c0004c59:	53                   	push   ebx
c0004c5a:	89 c3                	mov    ebx,eax
c0004c5c:	83 ec 14             	sub    esp,0x14
c0004c5f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c63:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c69:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c6b:	80 fa 5c             	cmp    dl,0x5c
c0004c6e:	75 07                	jne    c0004c77 <follow_path+0x1f>
c0004c70:	40                   	inc    eax
c0004c71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c75:	eb ee                	jmp    c0004c65 <follow_path+0xd>
c0004c77:	80 fa 2f             	cmp    dl,0x2f
c0004c7a:	74 f4                	je     c0004c70 <follow_path+0x18>
c0004c7c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c83:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c8a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c8d:	77 52                	ja     c0004ce1 <follow_path+0x89>
c0004c8f:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c93:	31 d2                	xor    edx,edx
c0004c95:	89 d8                	mov    eax,ebx
c0004c97:	e8 12 e3 ff ff       	call   c0002fae <dir_sdi>
c0004c9c:	eb 7c                	jmp    c0004d1a <follow_path+0xc2>
c0004c9e:	89 d8                	mov    eax,ebx
c0004ca0:	e8 6e f2 ff ff       	call   c0003f13 <dir_find>
c0004ca5:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ca8:	85 c0                	test   eax,eax
c0004caa:	75 46                	jne    c0004cf2 <follow_path+0x9a>
c0004cac:	80 e2 04             	and    dl,0x4
c0004caf:	75 69                	jne    c0004d1a <follow_path+0xc2>
c0004cb1:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004cb5:	74 5e                	je     c0004d15 <follow_path+0xbd>
c0004cb7:	8a 06                	mov    al,BYTE PTR [esi]
c0004cb9:	3c 04                	cmp    al,0x4
c0004cbb:	75 41                	jne    c0004cfe <follow_path+0xa6>
c0004cbd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004cc0:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004cc4:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004cc7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004cca:	30 c0                	xor    al,al
c0004ccc:	09 d0                	or     eax,edx
c0004cce:	89 da                	mov    edx,ebx
c0004cd0:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004cd3:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cd6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cd9:	8d 46 10             	lea    eax,[esi+0x10]
c0004cdc:	e8 3d ff ff ff       	call   c0004c1e <init_alloc_info.isra.2>
c0004ce1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ce5:	89 d8                	mov    eax,ebx
c0004ce7:	e8 a9 ed ff ff       	call   c0003a95 <create_name>
c0004cec:	85 c0                	test   eax,eax
c0004cee:	74 ae                	je     c0004c9e <follow_path+0x46>
c0004cf0:	eb 28                	jmp    c0004d1a <follow_path+0xc2>
c0004cf2:	83 f8 04             	cmp    eax,0x4
c0004cf5:	75 23                	jne    c0004d1a <follow_path+0xc2>
c0004cf7:	80 e2 04             	and    dl,0x4
c0004cfa:	74 19                	je     c0004d15 <follow_path+0xbd>
c0004cfc:	eb 1c                	jmp    c0004d1a <follow_path+0xc2>
c0004cfe:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004d01:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004d07:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004d0b:	e8 bd fe ff ff       	call   c0004bcd <ld_clust.isra.0>
c0004d10:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d13:	eb cc                	jmp    c0004ce1 <follow_path+0x89>
c0004d15:	b8 05 00 00 00       	mov    eax,0x5
c0004d1a:	83 c4 14             	add    esp,0x14
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	c3                   	ret    

c0004d20 <f_mount>:
c0004d20:	53                   	push   ebx
c0004d21:	83 ec 18             	sub    esp,0x18
c0004d24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d28:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d30:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d34:	e8 fb d2 ff ff       	call   c0002034 <get_ldnumber>
c0004d39:	89 c2                	mov    edx,eax
c0004d3b:	b8 0b 00 00 00       	mov    eax,0xb
c0004d40:	85 d2                	test   edx,edx
c0004d42:	78 39                	js     c0004d7d <f_mount+0x5d>
c0004d44:	8b 04 95 a0 a3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5c60]
c0004d4b:	85 c0                	test   eax,eax
c0004d4d:	74 03                	je     c0004d52 <f_mount+0x32>
c0004d4f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d56:	85 c0                	test   eax,eax
c0004d58:	74 03                	je     c0004d5d <f_mount+0x3d>
c0004d5a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d61:	89 04 95 a0 a3 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5c60],eax
c0004d68:	31 c0                	xor    eax,eax
c0004d6a:	84 db                	test   bl,bl
c0004d6c:	74 0f                	je     c0004d7d <f_mount+0x5d>
c0004d6e:	31 c9                	xor    ecx,ecx
c0004d70:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d74:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d78:	e8 65 d7 ff ff       	call   c00024e2 <mount_volume>
c0004d7d:	83 c4 18             	add    esp,0x18
c0004d80:	5b                   	pop    ebx
c0004d81:	c3                   	ret    

c0004d82 <f_open>:
c0004d82:	55                   	push   ebp
c0004d83:	bd 09 00 00 00       	mov    ebp,0x9
c0004d88:	57                   	push   edi
c0004d89:	56                   	push   esi
c0004d8a:	53                   	push   ebx
c0004d8b:	83 ec 7c             	sub    esp,0x7c
c0004d8e:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d95:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d9c:	85 db                	test   ebx,ebx
c0004d9e:	0f 84 10 04 00 00    	je     c00051b4 <f_open+0x432>
c0004da4:	89 fe                	mov    esi,edi
c0004da6:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004daa:	83 e6 3f             	and    esi,0x3f
c0004dad:	89 f0                	mov    eax,esi
c0004daf:	0f b6 c8             	movzx  ecx,al
c0004db2:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004db9:	e8 24 d7 ff ff       	call   c00024e2 <mount_volume>
c0004dbe:	89 c5                	mov    ebp,eax
c0004dc0:	85 c0                	test   eax,eax
c0004dc2:	0f 85 e6 03 00 00    	jne    c00051ae <f_open+0x42c>
c0004dc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dcc:	bd 11 00 00 00       	mov    ebp,0x11
c0004dd1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dd5:	83 ec 0c             	sub    esp,0xc
c0004dd8:	68 60 04 00 00       	push   0x460
c0004ddd:	e8 a3 34 00 00       	call   c0008285 <ff_memalloc>
c0004de2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004de6:	83 c4 10             	add    esp,0x10
c0004de9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dee:	0f 84 c0 03 00 00    	je     c00051b4 <f_open+0x432>
c0004df4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004df8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dfc:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004e02:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004e05:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004e08:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004e0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e13:	e8 40 fe ff ff       	call   c0004c58 <follow_path>
c0004e18:	89 c5                	mov    ebp,eax
c0004e1a:	85 c0                	test   eax,eax
c0004e1c:	75 0c                	jne    c0004e2a <f_open+0xa8>
c0004e1e:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e23:	79 05                	jns    c0004e2a <f_open+0xa8>
c0004e25:	bd 06 00 00 00       	mov    ebp,0x6
c0004e2a:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e30:	0f 84 84 01 00 00    	je     c0004fba <f_open+0x238>
c0004e36:	85 ed                	test   ebp,ebp
c0004e38:	74 20                	je     c0004e5a <f_open+0xd8>
c0004e3a:	83 fd 04             	cmp    ebp,0x4
c0004e3d:	0f 85 58 03 00 00    	jne    c000519b <f_open+0x419>
c0004e43:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e47:	83 ce 08             	or     esi,0x8
c0004e4a:	e8 8a f2 ff ff       	call   c00040d9 <dir_register>
c0004e4f:	89 c5                	mov    ebp,eax
c0004e51:	85 c0                	test   eax,eax
c0004e53:	74 2f                	je     c0004e84 <f_open+0x102>
c0004e55:	e9 41 03 00 00       	jmp    c000519b <f_open+0x419>
c0004e5a:	bd 07 00 00 00       	mov    ebp,0x7
c0004e5f:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e64:	0f 85 31 03 00 00    	jne    c000519b <f_open+0x419>
c0004e6a:	bd 08 00 00 00       	mov    ebp,0x8
c0004e6f:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e75:	0f 85 20 03 00 00    	jne    c000519b <f_open+0x419>
c0004e7b:	83 e7 08             	and    edi,0x8
c0004e7e:	0f 84 65 01 00 00    	je     c0004fe9 <f_open+0x267>
c0004e84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e88:	8a 02                	mov    al,BYTE PTR [edx]
c0004e8a:	3c 04                	cmp    al,0x4
c0004e8c:	0f 85 97 00 00 00    	jne    c0004f29 <f_open+0x1a7>
c0004e92:	8d 42 10             	lea    eax,[edx+0x10]
c0004e95:	89 13                	mov    DWORD PTR [ebx],edx
c0004e97:	89 da                	mov    edx,ebx
c0004e99:	e8 80 fd ff ff       	call   c0004c1e <init_alloc_info.isra.2>
c0004e9e:	31 d2                	xor    edx,edx
c0004ea0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea4:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004ea9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eac:	83 c0 02             	add    eax,0x2
c0004eaf:	e8 32 cc ff ff       	call   c0001ae6 <mem_set>
c0004eb4:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004eb9:	31 d2                	xor    edx,edx
c0004ebb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ebf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ec2:	83 c0 26             	add    eax,0x26
c0004ec5:	e8 1c cc ff ff       	call   c0001ae6 <mem_set>
c0004eca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ece:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004ed1:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004ed5:	ba 00 00 21 50       	mov    edx,0x50210000
c0004eda:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004edd:	83 c0 08             	add    eax,0x8
c0004ee0:	e8 e3 cb ff ff       	call   c0001ac8 <st_dword>
c0004ee5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eec:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ef0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ef4:	e8 b7 ea ff ff       	call   c00039b0 <store_xdir>
c0004ef9:	89 c5                	mov    ebp,eax
c0004efb:	85 c0                	test   eax,eax
c0004efd:	0f 85 98 02 00 00    	jne    c000519b <f_open+0x419>
c0004f03:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004f06:	85 d2                	test   edx,edx
c0004f08:	0f 84 db 00 00 00    	je     c0004fe9 <f_open+0x267>
c0004f0e:	31 c9                	xor    ecx,ecx
c0004f10:	89 d8                	mov    eax,ebx
c0004f12:	e8 8e e3 ff ff       	call   c00032a5 <remove_chain>
c0004f17:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f1b:	89 c5                	mov    ebp,eax
c0004f1d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f20:	48                   	dec    eax
c0004f21:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f24:	e9 b8 00 00 00       	jmp    c0004fe1 <f_open+0x25f>
c0004f29:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f2d:	89 ea                	mov    edx,ebp
c0004f2f:	e8 99 fc ff ff       	call   c0004bcd <ld_clust.isra.0>
c0004f34:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f39:	89 c7                	mov    edi,eax
c0004f3b:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f3e:	e8 85 cb ff ff       	call   c0001ac8 <st_dword>
c0004f43:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f47:	31 c9                	xor    ecx,ecx
c0004f49:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f51:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f55:	e8 9c fc ff ff       	call   c0004bf6 <st_clust.isra.1>
c0004f5a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f5e:	31 d2                	xor    edx,edx
c0004f60:	83 c0 1c             	add    eax,0x1c
c0004f63:	e8 60 cb ff ff       	call   c0001ac8 <st_dword>
c0004f68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f6c:	85 ff                	test   edi,edi
c0004f6e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f72:	74 75                	je     c0004fe9 <f_open+0x267>
c0004f74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f78:	31 c9                	xor    ecx,ecx
c0004f7a:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f7d:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f80:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f88:	89 fa                	mov    edx,edi
c0004f8a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f8e:	e8 12 e3 ff ff       	call   c00032a5 <remove_chain>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 fe 01 00 00    	jne    c000519b <f_open+0x419>
c0004f9d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004fa1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004fa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa9:	4f                   	dec    edi
c0004faa:	e8 81 d2 ff ff       	call   c0002230 <move_window>
c0004faf:	89 c5                	mov    ebp,eax
c0004fb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fb5:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004fb8:	eb 27                	jmp    c0004fe1 <f_open+0x25f>
c0004fba:	85 ed                	test   ebp,ebp
c0004fbc:	0f 85 d9 01 00 00    	jne    c000519b <f_open+0x419>
c0004fc2:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fc6:	bd 04 00 00 00       	mov    ebp,0x4
c0004fcb:	a8 10                	test   al,0x10
c0004fcd:	0f 85 c8 01 00 00    	jne    c000519b <f_open+0x419>
c0004fd3:	83 e7 02             	and    edi,0x2
c0004fd6:	74 11                	je     c0004fe9 <f_open+0x267>
c0004fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0004fdd:	a8 01                	test   al,0x1
c0004fdf:	eb 02                	jmp    c0004fe3 <f_open+0x261>
c0004fe1:	85 ed                	test   ebp,ebp
c0004fe3:	0f 85 b2 01 00 00    	jne    c000519b <f_open+0x419>
c0004fe9:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fef:	74 03                	je     c0004ff4 <f_open+0x272>
c0004ff1:	83 ce 40             	or     esi,0x40
c0004ff4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004ff8:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004ffb:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004ffe:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005001:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005004:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005008:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000500b:	8a 02                	mov    al,BYTE PTR [edx]
c000500d:	3c 04                	cmp    al,0x4
c000500f:	75 2a                	jne    c000503b <f_open+0x2b9>
c0005011:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005015:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000501a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000501d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005021:	30 c0                	xor    al,al
c0005023:	09 c8                	or     eax,ecx
c0005025:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005028:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000502c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000502f:	8d 42 10             	lea    eax,[edx+0x10]
c0005032:	89 da                	mov    edx,ebx
c0005034:	e8 e5 fb ff ff       	call   c0004c1e <init_alloc_info.isra.2>
c0005039:	eb 1c                	jmp    c0005057 <f_open+0x2d5>
c000503b:	89 fa                	mov    edx,edi
c000503d:	e8 8b fb ff ff       	call   c0004bcd <ld_clust.isra.0>
c0005042:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005045:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005048:	e8 12 ca ff ff       	call   c0001a5f <ld_dword>
c000504d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005054:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005057:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505b:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005062:	89 03                	mov    DWORD PTR [ebx],eax
c0005064:	31 d2                	xor    edx,edx
c0005066:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000506a:	b9 00 02 00 00       	mov    ecx,0x200
c000506f:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005073:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005077:	89 f0                	mov    eax,esi
c0005079:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005080:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005083:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000508a:	8d 43 50             	lea    eax,[ebx+0x50]
c000508d:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005094:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000509b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000509f:	e8 42 ca ff ff       	call   c0001ae6 <mem_set>
c00050a4:	83 e6 20             	and    esi,0x20
c00050a7:	75 07                	jne    c00050b0 <f_open+0x32e>
c00050a9:	31 ed                	xor    ebp,ebp
c00050ab:	e9 eb 00 00 00       	jmp    c000519b <f_open+0x419>
c00050b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00050b3:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00050b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00050be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050c2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050c6:	74 e1                	je     c00050a9 <f_open+0x327>
c00050c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050d3:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050da:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050dd:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050e1:	31 ff                	xor    edi,edi
c00050e3:	c1 e5 09             	shl    ebp,0x9
c00050e6:	89 ee                	mov    esi,ebp
c00050e8:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050ec:	89 f8                	mov    eax,edi
c00050ee:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050f2:	73 22                	jae    c0005116 <f_open+0x394>
c00050f4:	89 d8                	mov    eax,ebx
c00050f6:	e8 bd dc ff ff       	call   c0002db8 <get_fat>
c00050fb:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050ff:	89 c2                	mov    edx,eax
c0005101:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005105:	83 f8 01             	cmp    eax,0x1
c0005108:	76 10                	jbe    c000511a <f_open+0x398>
c000510a:	83 f8 ff             	cmp    eax,0xffffffff
c000510d:	75 d9                	jne    c00050e8 <f_open+0x366>
c000510f:	bd 01 00 00 00       	mov    ebp,0x1
c0005114:	eb 09                	jmp    c000511f <f_open+0x39d>
c0005116:	31 ed                	xor    ebp,ebp
c0005118:	eb 05                	jmp    c000511f <f_open+0x39d>
c000511a:	bd 02 00 00 00       	mov    ebp,0x2
c000511f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005122:	85 ed                	test   ebp,ebp
c0005124:	75 75                	jne    c000519b <f_open+0x419>
c0005126:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000512a:	25 ff 01 00 00       	and    eax,0x1ff
c000512f:	0f 84 74 ff ff ff    	je     c00050a9 <f_open+0x327>
c0005135:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005139:	bd 02 00 00 00       	mov    ebp,0x2
c000513e:	89 c8                	mov    eax,ecx
c0005140:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005144:	e8 a2 cb ff ff       	call   c0001ceb <clst2sect>
c0005149:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000514d:	89 d7                	mov    edi,edx
c000514f:	09 c7                	or     edi,eax
c0005151:	74 48                	je     c000519b <f_open+0x419>
c0005153:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005157:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000515b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005163:	0f ac fe 09          	shrd   esi,edi,0x9
c0005167:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000516b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000516f:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005172:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005176:	83 ec 0c             	sub    esp,0xc
c0005179:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000517c:	6a 01                	push   0x1
c000517e:	52                   	push   edx
c000517f:	50                   	push   eax
c0005180:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005184:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005188:	50                   	push   eax
c0005189:	e8 79 c8 ff ff       	call   c0001a07 <disk_read>
c000518e:	83 c4 20             	add    esp,0x20
c0005191:	85 c0                	test   eax,eax
c0005193:	0f 95 c0             	setne  al
c0005196:	0f b6 c0             	movzx  eax,al
c0005199:	89 c5                	mov    ebp,eax
c000519b:	83 ec 0c             	sub    esp,0xc
c000519e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00051a2:	e8 f4 30 00 00       	call   c000829b <ff_memfree>
c00051a7:	83 c4 10             	add    esp,0x10
c00051aa:	85 ed                	test   ebp,ebp
c00051ac:	74 06                	je     c00051b4 <f_open+0x432>
c00051ae:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00051b4:	83 c4 7c             	add    esp,0x7c
c00051b7:	89 e8                	mov    eax,ebp
c00051b9:	5b                   	pop    ebx
c00051ba:	5e                   	pop    esi
c00051bb:	5f                   	pop    edi
c00051bc:	5d                   	pop    ebp
c00051bd:	c3                   	ret    

c00051be <f_read>:
c00051be:	55                   	push   ebp
c00051bf:	57                   	push   edi
c00051c0:	56                   	push   esi
c00051c1:	53                   	push   ebx
c00051c2:	83 ec 2c             	sub    esp,0x2c
c00051c5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051c9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051d3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051d7:	89 d8                	mov    eax,ebx
c00051d9:	e8 77 cf ff ff       	call   c0002155 <validate>
c00051de:	89 c5                	mov    ebp,eax
c00051e0:	85 c0                	test   eax,eax
c00051e2:	0f 85 4c 02 00 00    	jne    c0005434 <f_read+0x276>
c00051e8:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051ec:	85 ed                	test   ebp,ebp
c00051ee:	0f 85 40 02 00 00    	jne    c0005434 <f_read+0x276>
c00051f4:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051f8:	0f 84 31 02 00 00    	je     c000542f <f_read+0x271>
c00051fe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005201:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005204:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005207:	bf 00 00 00 00       	mov    edi,0x0
c000520c:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000520f:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005213:	89 d1                	mov    ecx,edx
c0005215:	19 f9                	sbb    ecx,edi
c0005217:	0f 83 cf 00 00 00    	jae    c00052ec <f_read+0x12e>
c000521d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005221:	e9 c6 00 00 00       	jmp    c00052ec <f_read+0x12e>
c0005226:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005229:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000522c:	89 d0                	mov    eax,edx
c000522e:	25 ff 01 00 00       	and    eax,0x1ff
c0005233:	0f 85 c9 01 00 00    	jne    c0005402 <f_read+0x244>
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	89 d6                	mov    esi,edx
c000523f:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005243:	89 cf                	mov    edi,ecx
c0005245:	48                   	dec    eax
c0005246:	0f ac fe 09          	shrd   esi,edi,0x9
c000524a:	21 f0                	and    eax,esi
c000524c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005250:	0f 84 a6 00 00 00    	je     c00052fc <f_read+0x13e>
c0005256:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000525a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000525d:	89 c8                	mov    eax,ecx
c000525f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005262:	e8 84 ca ff ff       	call   c0001ceb <clst2sect>
c0005267:	89 d7                	mov    edi,edx
c0005269:	09 c7                	or     edi,eax
c000526b:	0f 84 b4 00 00 00    	je     c0005325 <f_read+0x167>
c0005271:	31 ff                	xor    edi,edi
c0005273:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005277:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000527a:	01 c6                	add    esi,eax
c000527c:	11 d7                	adc    edi,edx
c000527e:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005286:	0f 86 fd 00 00 00    	jbe    c0005389 <f_read+0x1cb>
c000528c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005290:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005294:	c1 e8 09             	shr    eax,0x9
c0005297:	89 04 24             	mov    DWORD PTR [esp],eax
c000529a:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000529e:	03 14 24             	add    edx,DWORD PTR [esp]
c00052a1:	39 c2                	cmp    edx,eax
c00052a3:	76 07                	jbe    c00052ac <f_read+0xee>
c00052a5:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00052a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00052ac:	83 ec 0c             	sub    esp,0xc
c00052af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00052b3:	57                   	push   edi
c00052b4:	56                   	push   esi
c00052b5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00052b9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052bd:	50                   	push   eax
c00052be:	e8 44 c7 ff ff       	call   c0001a07 <disk_read>
c00052c3:	83 c4 20             	add    esp,0x20
c00052c6:	85 c0                	test   eax,eax
c00052c8:	75 6e                	jne    c0005338 <f_read+0x17a>
c00052ca:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052ce:	78 7e                	js     c000534e <f_read+0x190>
c00052d0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052d3:	c1 e6 09             	shl    esi,0x9
c00052d6:	31 ff                	xor    edi,edi
c00052d8:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052dc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052e0:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052e4:	01 30                	add    DWORD PTR [eax],esi
c00052e6:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052e9:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052ec:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052f1:	0f 85 2f ff ff ff    	jne    c0005226 <f_read+0x68>
c00052f7:	e9 38 01 00 00       	jmp    c0005434 <f_read+0x276>
c00052fc:	89 c8                	mov    eax,ecx
c00052fe:	09 d0                	or     eax,edx
c0005300:	75 05                	jne    c0005307 <f_read+0x149>
c0005302:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005305:	eb 19                	jmp    c0005320 <f_read+0x162>
c0005307:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000530b:	74 09                	je     c0005316 <f_read+0x158>
c000530d:	89 d8                	mov    eax,ebx
c000530f:	e8 f8 c9 ff ff       	call   c0001d0c <clmt_clust>
c0005314:	eb 0a                	jmp    c0005320 <f_read+0x162>
c0005316:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005319:	89 d8                	mov    eax,ebx
c000531b:	e8 98 da ff ff       	call   c0002db8 <get_fat>
c0005320:	83 f8 01             	cmp    eax,0x1
c0005323:	77 0e                	ja     c0005333 <f_read+0x175>
c0005325:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	e9 01 01 00 00       	jmp    c0005434 <f_read+0x276>
c0005333:	83 f8 ff             	cmp    eax,0xffffffff
c0005336:	75 0e                	jne    c0005346 <f_read+0x188>
c0005338:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000533c:	bd 01 00 00 00       	mov    ebp,0x1
c0005341:	e9 ee 00 00 00       	jmp    c0005434 <f_read+0x276>
c0005346:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005349:	e9 08 ff ff ff       	jmp    c0005256 <f_read+0x98>
c000534e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005351:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005354:	29 f0                	sub    eax,esi
c0005356:	19 fa                	sbb    edx,edi
c0005358:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000535b:	89 d7                	mov    edi,edx
c000535d:	ba 00 00 00 00       	mov    edx,0x0
c0005362:	89 f9                	mov    ecx,edi
c0005364:	19 d1                	sbb    ecx,edx
c0005366:	0f 83 64 ff ff ff    	jae    c00052d0 <f_read+0x112>
c000536c:	89 c7                	mov    edi,eax
c000536e:	8d 53 50             	lea    edx,[ebx+0x50]
c0005371:	c1 e7 09             	shl    edi,0x9
c0005374:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005378:	b9 00 02 00 00       	mov    ecx,0x200
c000537d:	01 f8                	add    eax,edi
c000537f:	e8 4d c7 ff ff       	call   c0001ad1 <mem_cpy>
c0005384:	e9 47 ff ff ff       	jmp    c00052d0 <f_read+0x112>
c0005389:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000538c:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000538f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005392:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005396:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000539a:	75 05                	jne    c00053a1 <f_read+0x1e3>
c000539c:	39 34 24             	cmp    DWORD PTR [esp],esi
c000539f:	74 5b                	je     c00053fc <f_read+0x23e>
c00053a1:	8d 43 50             	lea    eax,[ebx+0x50]
c00053a4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053ac:	79 2a                	jns    c00053d8 <f_read+0x21a>
c00053ae:	83 ec 0c             	sub    esp,0xc
c00053b1:	6a 01                	push   0x1
c00053b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00053bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053bf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c3:	50                   	push   eax
c00053c4:	e8 54 c6 ff ff       	call   c0001a1d <disk_write>
c00053c9:	83 c4 20             	add    esp,0x20
c00053cc:	85 c0                	test   eax,eax
c00053ce:	0f 85 64 ff ff ff    	jne    c0005338 <f_read+0x17a>
c00053d4:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053d8:	83 ec 0c             	sub    esp,0xc
c00053db:	6a 01                	push   0x1
c00053dd:	57                   	push   edi
c00053de:	56                   	push   esi
c00053df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053eb:	50                   	push   eax
c00053ec:	e8 16 c6 ff ff       	call   c0001a07 <disk_read>
c00053f1:	83 c4 20             	add    esp,0x20
c00053f4:	85 c0                	test   eax,eax
c00053f6:	0f 85 3c ff ff ff    	jne    c0005338 <f_read+0x17a>
c00053fc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053ff:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005402:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005405:	ba 00 02 00 00       	mov    edx,0x200
c000540a:	25 ff 01 00 00       	and    eax,0x1ff
c000540f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005413:	29 c2                	sub    edx,eax
c0005415:	39 d6                	cmp    esi,edx
c0005417:	76 02                	jbe    c000541b <f_read+0x25d>
c0005419:	89 d6                	mov    esi,edx
c000541b:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000541f:	89 f1                	mov    ecx,esi
c0005421:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005425:	e8 a7 c6 ff ff       	call   c0001ad1 <mem_cpy>
c000542a:	e9 a7 fe ff ff       	jmp    c00052d6 <f_read+0x118>
c000542f:	bd 07 00 00 00       	mov    ebp,0x7
c0005434:	83 c4 2c             	add    esp,0x2c
c0005437:	89 e8                	mov    eax,ebp
c0005439:	5b                   	pop    ebx
c000543a:	5e                   	pop    esi
c000543b:	5f                   	pop    edi
c000543c:	5d                   	pop    ebp
c000543d:	c3                   	ret    

c000543e <f_write>:
c000543e:	55                   	push   ebp
c000543f:	57                   	push   edi
c0005440:	56                   	push   esi
c0005441:	53                   	push   ebx
c0005442:	83 ec 2c             	sub    esp,0x2c
c0005445:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005449:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000544d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005453:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005457:	89 d8                	mov    eax,ebx
c0005459:	e8 f7 cc ff ff       	call   c0002155 <validate>
c000545e:	89 c5                	mov    ebp,eax
c0005460:	85 c0                	test   eax,eax
c0005462:	0f 85 86 02 00 00    	jne    c00056ee <f_write+0x2b0>
c0005468:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000546c:	85 ed                	test   ebp,ebp
c000546e:	0f 85 7a 02 00 00    	jne    c00056ee <f_write+0x2b0>
c0005474:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005478:	0f 84 6b 02 00 00    	je     c00056e9 <f_write+0x2ab>
c000547e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005482:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005485:	0f 84 43 01 00 00    	je     c00055ce <f_write+0x190>
c000548b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000548e:	89 c1                	mov    ecx,eax
c0005490:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005494:	0f 83 34 01 00 00    	jae    c00055ce <f_write+0x190>
c000549a:	f7 d0                	not    eax
c000549c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00054a0:	e9 29 01 00 00       	jmp    c00055ce <f_write+0x190>
c00054a5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00054a8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00054ab:	89 d0                	mov    eax,edx
c00054ad:	25 ff 01 00 00       	and    eax,0x1ff
c00054b2:	0f 85 00 02 00 00    	jne    c00056b8 <f_write+0x27a>
c00054b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054bc:	89 d6                	mov    esi,edx
c00054be:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054c2:	89 cf                	mov    edi,ecx
c00054c4:	48                   	dec    eax
c00054c5:	0f ac fe 09          	shrd   esi,edi,0x9
c00054c9:	21 f0                	and    eax,esi
c00054cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054cf:	0f 84 06 01 00 00    	je     c00055db <f_write+0x19d>
c00054d5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054d9:	0f 88 6e 01 00 00    	js     c000564d <f_write+0x20f>
c00054df:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054e3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054e6:	89 c8                	mov    eax,ecx
c00054e8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054ec:	e8 fa c7 ff ff       	call   c0001ceb <clst2sect>
c00054f1:	89 d1                	mov    ecx,edx
c00054f3:	09 c1                	or     ecx,eax
c00054f5:	0f 84 1c 01 00 00    	je     c0005617 <f_write+0x1d9>
c00054fb:	31 ff                	xor    edi,edi
c00054fd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005501:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005505:	01 c6                	add    esi,eax
c0005507:	11 d7                	adc    edi,edx
c0005509:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005511:	0f 86 63 01 00 00    	jbe    c000567a <f_write+0x23c>
c0005517:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000551b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000551f:	c1 e8 09             	shr    eax,0x9
c0005522:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005526:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000552a:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000552e:	39 c2                	cmp    edx,eax
c0005530:	76 08                	jbe    c000553a <f_write+0xfc>
c0005532:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005536:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000553a:	83 ec 0c             	sub    esp,0xc
c000553d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005541:	57                   	push   edi
c0005542:	56                   	push   esi
c0005543:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005547:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000554b:	50                   	push   eax
c000554c:	e8 cc c4 ff ff       	call   c0001a1d <disk_write>
c0005551:	83 c4 20             	add    esp,0x20
c0005554:	85 c0                	test   eax,eax
c0005556:	0f 85 ce 00 00 00    	jne    c000562a <f_write+0x1ec>
c000555c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000555f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005562:	29 f0                	sub    eax,esi
c0005564:	19 fa                	sbb    edx,edi
c0005566:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	73 1c                	jae    c0005593 <f_write+0x155>
c0005577:	89 c7                	mov    edi,eax
c0005579:	b9 00 02 00 00       	mov    ecx,0x200
c000557e:	c1 e7 09             	shl    edi,0x9
c0005581:	8d 43 50             	lea    eax,[ebx+0x50]
c0005584:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005588:	89 fa                	mov    edx,edi
c000558a:	e8 42 c5 ff ff       	call   c0001ad1 <mem_cpy>
c000558f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005593:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005597:	c1 e6 09             	shl    esi,0x9
c000559a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000559e:	31 ff                	xor    edi,edi
c00055a0:	01 30                	add    DWORD PTR [eax],esi
c00055a2:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00055a6:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00055aa:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055ad:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00055b0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00055b3:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00055b6:	89 c1                	mov    ecx,eax
c00055b8:	39 f2                	cmp    edx,esi
c00055ba:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00055bd:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055c0:	19 f9                	sbb    ecx,edi
c00055c2:	73 04                	jae    c00055c8 <f_write+0x18a>
c00055c4:	89 f2                	mov    edx,esi
c00055c6:	89 f8                	mov    eax,edi
c00055c8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055cb:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055ce:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055d3:	0f 85 cc fe ff ff    	jne    c00054a5 <f_write+0x67>
c00055d9:	eb 2e                	jmp    c0005609 <f_write+0x1cb>
c00055db:	89 c8                	mov    eax,ecx
c00055dd:	09 d0                	or     eax,edx
c00055df:	75 0b                	jne    c00055ec <f_write+0x1ae>
c00055e1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055e4:	31 d2                	xor    edx,edx
c00055e6:	85 c0                	test   eax,eax
c00055e8:	75 28                	jne    c0005612 <f_write+0x1d4>
c00055ea:	eb 12                	jmp    c00055fe <f_write+0x1c0>
c00055ec:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055f0:	74 09                	je     c00055fb <f_write+0x1bd>
c00055f2:	89 d8                	mov    eax,ebx
c00055f4:	e8 13 c7 ff ff       	call   c0001d0c <clmt_clust>
c00055f9:	eb 0a                	jmp    c0005605 <f_write+0x1c7>
c00055fb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055fe:	89 d8                	mov    eax,ebx
c0005600:	e8 a1 da ff ff       	call   c00030a6 <create_chain>
c0005605:	85 c0                	test   eax,eax
c0005607:	75 09                	jne    c0005612 <f_write+0x1d4>
c0005609:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000560d:	e9 dc 00 00 00       	jmp    c00056ee <f_write+0x2b0>
c0005612:	83 f8 01             	cmp    eax,0x1
c0005615:	75 0e                	jne    c0005625 <f_write+0x1e7>
c0005617:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000561b:	bd 02 00 00 00       	mov    ebp,0x2
c0005620:	e9 c9 00 00 00       	jmp    c00056ee <f_write+0x2b0>
c0005625:	83 f8 ff             	cmp    eax,0xffffffff
c0005628:	75 0e                	jne    c0005638 <f_write+0x1fa>
c000562a:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000562e:	bd 01 00 00 00       	mov    ebp,0x1
c0005633:	e9 b6 00 00 00       	jmp    c00056ee <f_write+0x2b0>
c0005638:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000563b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000563f:	0f 85 90 fe ff ff    	jne    c00054d5 <f_write+0x97>
c0005645:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005648:	e9 88 fe ff ff       	jmp    c00054d5 <f_write+0x97>
c000564d:	83 ec 0c             	sub    esp,0xc
c0005650:	8d 43 50             	lea    eax,[ebx+0x50]
c0005653:	6a 01                	push   0x1
c0005655:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005658:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000565b:	50                   	push   eax
c000565c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005660:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005664:	50                   	push   eax
c0005665:	e8 b3 c3 ff ff       	call   c0001a1d <disk_write>
c000566a:	83 c4 20             	add    esp,0x20
c000566d:	85 c0                	test   eax,eax
c000566f:	75 b9                	jne    c000562a <f_write+0x1ec>
c0005671:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005675:	e9 65 fe ff ff       	jmp    c00054df <f_write+0xa1>
c000567a:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000567d:	75 05                	jne    c0005684 <f_write+0x246>
c000567f:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005682:	74 2e                	je     c00056b2 <f_write+0x274>
c0005684:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005687:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000568a:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000568d:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005690:	73 20                	jae    c00056b2 <f_write+0x274>
c0005692:	83 ec 0c             	sub    esp,0xc
c0005695:	8d 43 50             	lea    eax,[ebx+0x50]
c0005698:	6a 01                	push   0x1
c000569a:	57                   	push   edi
c000569b:	56                   	push   esi
c000569c:	50                   	push   eax
c000569d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00056a1:	50                   	push   eax
c00056a2:	e8 60 c3 ff ff       	call   c0001a07 <disk_read>
c00056a7:	83 c4 20             	add    esp,0x20
c00056aa:	85 c0                	test   eax,eax
c00056ac:	0f 85 78 ff ff ff    	jne    c000562a <f_write+0x1ec>
c00056b2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00056b5:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00056b8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056bb:	ba 00 02 00 00       	mov    edx,0x200
c00056c0:	25 ff 01 00 00       	and    eax,0x1ff
c00056c5:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056c9:	29 c2                	sub    edx,eax
c00056cb:	39 d6                	cmp    esi,edx
c00056cd:	76 02                	jbe    c00056d1 <f_write+0x293>
c00056cf:	89 d6                	mov    esi,edx
c00056d1:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056d5:	89 f1                	mov    ecx,esi
c00056d7:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056db:	e8 f1 c3 ff ff       	call   c0001ad1 <mem_cpy>
c00056e0:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056e4:	e9 b1 fe ff ff       	jmp    c000559a <f_write+0x15c>
c00056e9:	bd 07 00 00 00       	mov    ebp,0x7
c00056ee:	83 c4 2c             	add    esp,0x2c
c00056f1:	89 e8                	mov    eax,ebp
c00056f3:	5b                   	pop    ebx
c00056f4:	5e                   	pop    esi
c00056f5:	5f                   	pop    edi
c00056f6:	5d                   	pop    ebp
c00056f7:	c3                   	ret    

c00056f8 <f_sync>:
c00056f8:	56                   	push   esi
c00056f9:	53                   	push   ebx
c00056fa:	83 ec 64             	sub    esp,0x64
c00056fd:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005701:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005705:	89 d8                	mov    eax,ebx
c0005707:	e8 49 ca ff ff       	call   c0002155 <validate>
c000570c:	85 c0                	test   eax,eax
c000570e:	0f 85 ba 01 00 00    	jne    c00058ce <f_sync+0x1d6>
c0005714:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005717:	f6 c2 40             	test   dl,0x40
c000571a:	0f 84 ae 01 00 00    	je     c00058ce <f_sync+0x1d6>
c0005720:	84 d2                	test   dl,dl
c0005722:	79 33                	jns    c0005757 <f_sync+0x5f>
c0005724:	83 ec 0c             	sub    esp,0xc
c0005727:	8d 43 50             	lea    eax,[ebx+0x50]
c000572a:	6a 01                	push   0x1
c000572c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000572f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005732:	50                   	push   eax
c0005733:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005737:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000573b:	50                   	push   eax
c000573c:	e8 dc c2 ff ff       	call   c0001a1d <disk_write>
c0005741:	83 c4 20             	add    esp,0x20
c0005744:	89 c2                	mov    edx,eax
c0005746:	b8 01 00 00 00       	mov    eax,0x1
c000574b:	85 d2                	test   edx,edx
c000574d:	0f 85 7b 01 00 00    	jne    c00058ce <f_sync+0x1d6>
c0005753:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000575b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000575e:	0f 85 11 01 00 00    	jne    c0005875 <f_sync+0x17d>
c0005764:	89 d8                	mov    eax,ebx
c0005766:	e8 13 d6 ff ff       	call   c0002d7e <fill_first_frag>
c000576b:	85 c0                	test   eax,eax
c000576d:	0f 85 5b 01 00 00    	jne    c00058ce <f_sync+0x1d6>
c0005773:	83 c9 ff             	or     ecx,0xffffffff
c0005776:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005779:	89 d8                	mov    eax,ebx
c000577b:	e8 c9 d5 ff ff       	call   c0002d49 <fill_last_frag>
c0005780:	85 c0                	test   eax,eax
c0005782:	0f 85 46 01 00 00    	jne    c00058ce <f_sync+0x1d6>
c0005788:	83 ec 0c             	sub    esp,0xc
c000578b:	68 60 04 00 00       	push   0x460
c0005790:	e8 f0 2a 00 00       	call   c0008285 <ff_memalloc>
c0005795:	83 c4 10             	add    esp,0x10
c0005798:	89 c6                	mov    esi,eax
c000579a:	b8 11 00 00 00       	mov    eax,0x11
c000579f:	85 f6                	test   esi,esi
c00057a1:	0f 84 27 01 00 00    	je     c00058ce <f_sync+0x1d6>
c00057a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ab:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00057b1:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00057b4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00057b7:	89 da                	mov    edx,ebx
c00057b9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00057bd:	e8 af df ff ff       	call   c0003771 <load_obj_xdir>
c00057c2:	85 c0                	test   eax,eax
c00057c4:	0f 85 95 00 00 00    	jne    c000585f <f_sync+0x167>
c00057ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ce:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057d1:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057d5:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057d8:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057db:	83 ca 01             	or     edx,0x1
c00057de:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057e1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057e4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e7:	83 c0 34             	add    eax,0x34
c00057ea:	e8 d9 c2 ff ff       	call   c0001ac8 <st_dword>
c00057ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057f6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057f9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057fc:	83 c0 38             	add    eax,0x38
c00057ff:	e8 c7 c2 ff ff       	call   c0001acb <st_qword>
c0005804:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000580b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000580e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005811:	83 c0 28             	add    eax,0x28
c0005814:	e8 b2 c2 ff ff       	call   c0001acb <st_qword>
c0005819:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000581d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005822:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005825:	83 c0 0c             	add    eax,0xc
c0005828:	e8 9b c2 ff ff       	call   c0001ac8 <st_dword>
c000582d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005831:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005834:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005838:	31 d2                	xor    edx,edx
c000583a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000583d:	83 c0 10             	add    eax,0x10
c0005840:	e8 83 c2 ff ff       	call   c0001ac8 <st_dword>
c0005845:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005849:	e8 62 e1 ff ff       	call   c00039b0 <store_xdir>
c000584e:	85 c0                	test   eax,eax
c0005850:	75 0d                	jne    c000585f <f_sync+0x167>
c0005852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005856:	e8 00 eb ff ff       	call   c000435b <sync_fs>
c000585b:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000585f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005863:	83 ec 0c             	sub    esp,0xc
c0005866:	56                   	push   esi
c0005867:	e8 2f 2a 00 00       	call   c000829b <ff_memfree>
c000586c:	83 c4 10             	add    esp,0x10
c000586f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005873:	eb 59                	jmp    c00058ce <f_sync+0x1d6>
c0005875:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005878:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000587b:	e8 b0 c9 ff ff       	call   c0002230 <move_window>
c0005880:	85 c0                	test   eax,eax
c0005882:	75 4a                	jne    c00058ce <f_sync+0x1d6>
c0005884:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005887:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000588b:	89 f2                	mov    edx,esi
c000588d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005890:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005892:	e8 5f f3 ff ff       	call   c0004bf6 <st_clust.isra.1>
c0005897:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000589a:	8d 46 1c             	lea    eax,[esi+0x1c]
c000589d:	e8 26 c2 ff ff       	call   c0001ac8 <st_dword>
c00058a2:	8d 46 16             	lea    eax,[esi+0x16]
c00058a5:	ba 00 00 21 50       	mov    edx,0x50210000
c00058aa:	e8 19 c2 ff ff       	call   c0001ac8 <st_dword>
c00058af:	8d 46 12             	lea    eax,[esi+0x12]
c00058b2:	31 d2                	xor    edx,edx
c00058b4:	e8 0b c2 ff ff       	call   c0001ac4 <st_word>
c00058b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058bd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058c5:	e8 91 ea ff ff       	call   c000435b <sync_fs>
c00058ca:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058ce:	83 c4 64             	add    esp,0x64
c00058d1:	5b                   	pop    ebx
c00058d2:	5e                   	pop    esi
c00058d3:	c3                   	ret    

c00058d4 <f_close>:
c00058d4:	53                   	push   ebx
c00058d5:	83 ec 24             	sub    esp,0x24
c00058d8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058dc:	53                   	push   ebx
c00058dd:	e8 16 fe ff ff       	call   c00056f8 <f_sync>
c00058e2:	83 c4 10             	add    esp,0x10
c00058e5:	85 c0                	test   eax,eax
c00058e7:	75 15                	jne    c00058fe <f_close+0x2a>
c00058e9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058ed:	89 d8                	mov    eax,ebx
c00058ef:	e8 61 c8 ff ff       	call   c0002155 <validate>
c00058f4:	85 c0                	test   eax,eax
c00058f6:	75 06                	jne    c00058fe <f_close+0x2a>
c00058f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058fe:	83 c4 18             	add    esp,0x18
c0005901:	5b                   	pop    ebx
c0005902:	c3                   	ret    

c0005903 <f_lseek>:
c0005903:	55                   	push   ebp
c0005904:	57                   	push   edi
c0005905:	56                   	push   esi
c0005906:	53                   	push   ebx
c0005907:	83 ec 3c             	sub    esp,0x3c
c000590a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000590e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005912:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005916:	89 04 24             	mov    DWORD PTR [esp],eax
c0005919:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000591d:	89 d8                	mov    eax,ebx
c000591f:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005923:	e8 2d c8 ff ff       	call   c0002155 <validate>
c0005928:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000592c:	85 c0                	test   eax,eax
c000592e:	0f 85 7a 04 00 00    	jne    c0005dae <f_lseek+0x4ab>
c0005934:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005938:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000593c:	85 c0                	test   eax,eax
c000593e:	0f 85 6a 04 00 00    	jne    c0005dae <f_lseek+0x4ab>
c0005944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005948:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000594b:	74 0c                	je     c0005959 <f_lseek+0x56>
c000594d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005950:	85 c0                	test   eax,eax
c0005952:	75 1f                	jne    c0005973 <f_lseek+0x70>
c0005954:	e9 b5 01 00 00       	jmp    c0005b0e <f_lseek+0x20b>
c0005959:	83 c9 ff             	or     ecx,0xffffffff
c000595c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000595f:	89 d8                	mov    eax,ebx
c0005961:	e8 e3 d3 ff ff       	call   c0002d49 <fill_last_frag>
c0005966:	85 c0                	test   eax,eax
c0005968:	74 e3                	je     c000594d <f_lseek+0x4a>
c000596a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000596e:	e9 3b 04 00 00       	jmp    c0005dae <f_lseek+0x4ab>
c0005973:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005978:	0f 85 ac 00 00 00    	jne    c0005a2a <f_lseek+0x127>
c000597e:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005982:	0f 85 a2 00 00 00    	jne    c0005a2a <f_lseek+0x127>
c0005988:	8d 78 04             	lea    edi,[eax+0x4]
c000598b:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000598e:	8b 00                	mov    eax,DWORD PTR [eax]
c0005990:	be 02 00 00 00       	mov    esi,0x2
c0005995:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005999:	85 ed                	test   ebp,ebp
c000599b:	74 73                	je     c0005a10 <f_lseek+0x10d>
c000599d:	89 e9                	mov    ecx,ebp
c000599f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00059a6:	ff 04 24             	inc    DWORD PTR [esp]
c00059a9:	89 ca                	mov    edx,ecx
c00059ab:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059af:	89 d8                	mov    eax,ebx
c00059b1:	e8 02 d4 ff ff       	call   c0002db8 <get_fat>
c00059b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00059ba:	83 f8 01             	cmp    eax,0x1
c00059bd:	77 11                	ja     c00059d0 <f_lseek+0xcd>
c00059bf:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059c3:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c00059cb:	e9 de 03 00 00       	jmp    c0005dae <f_lseek+0x4ab>
c00059d0:	83 f8 ff             	cmp    eax,0xffffffff
c00059d3:	75 11                	jne    c00059e6 <f_lseek+0xe3>
c00059d5:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059d9:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059e1:	e9 c8 03 00 00       	jmp    c0005dae <f_lseek+0x4ab>
c00059e6:	8d 51 01             	lea    edx,[ecx+0x1]
c00059e9:	89 c1                	mov    ecx,eax
c00059eb:	39 c2                	cmp    edx,eax
c00059ed:	74 b7                	je     c00059a6 <f_lseek+0xa3>
c00059ef:	83 c6 02             	add    esi,0x2
c00059f2:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059f6:	72 0b                	jb     c0005a03 <f_lseek+0x100>
c00059f8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059fb:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059fe:	89 0f                	mov    DWORD PTR [edi],ecx
c0005a00:	83 c7 08             	add    edi,0x8
c0005a03:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005a07:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005a0a:	76 04                	jbe    c0005a10 <f_lseek+0x10d>
c0005a0c:	89 c5                	mov    ebp,eax
c0005a0e:	eb 8d                	jmp    c000599d <f_lseek+0x9a>
c0005a10:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a13:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005a17:	89 30                	mov    DWORD PTR [eax],esi
c0005a19:	0f 87 87 03 00 00    	ja     c0005da6 <f_lseek+0x4a3>
c0005a1f:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a25:	e9 84 03 00 00       	jmp    c0005dae <f_lseek+0x4ab>
c0005a2a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005a2d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005a30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a3c:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005a3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a43:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a47:	73 0f                	jae    c0005a58 <f_lseek+0x155>
c0005a49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a4c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a5c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a60:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a63:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a6a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a6e:	0f 84 3a 03 00 00    	je     c0005dae <f_lseek+0x4ab>
c0005a74:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a78:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a7c:	83 c6 ff             	add    esi,0xffffffff
c0005a7f:	89 d8                	mov    eax,ebx
c0005a81:	83 d7 ff             	adc    edi,0xffffffff
c0005a84:	89 f2                	mov    edx,esi
c0005a86:	89 f9                	mov    ecx,edi
c0005a88:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a8c:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a8f:	e8 78 c2 ff ff       	call   c0001d0c <clmt_clust>
c0005a94:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a98:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a9b:	89 c2                	mov    edx,eax
c0005a9d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005aa1:	89 c8                	mov    eax,ecx
c0005aa3:	e8 43 c2 ff ff       	call   c0001ceb <clst2sect>
c0005aa8:	89 d7                	mov    edi,edx
c0005aaa:	09 c7                	or     edi,eax
c0005aac:	0f 84 0d ff ff ff    	je     c00059bf <f_lseek+0xbc>
c0005ab2:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ab6:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005abc:	0f 84 ec 02 00 00    	je     c0005dae <f_lseek+0x4ab>
c0005ac2:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ac6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005aca:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005acd:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ad1:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ad5:	4d                   	dec    ebp
c0005ad6:	31 ff                	xor    edi,edi
c0005ad8:	21 ee                	and    esi,ebp
c0005ada:	01 c6                	add    esi,eax
c0005adc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005adf:	11 d7                	adc    edi,edx
c0005ae1:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005ae4:	39 fa                	cmp    edx,edi
c0005ae6:	75 08                	jne    c0005af0 <f_lseek+0x1ed>
c0005ae8:	39 f0                	cmp    eax,esi
c0005aea:	0f 84 be 02 00 00    	je     c0005dae <f_lseek+0x4ab>
c0005af0:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005af3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005af7:	0f 89 80 02 00 00    	jns    c0005d7d <f_lseek+0x47a>
c0005afd:	83 ec 0c             	sub    esp,0xc
c0005b00:	6a 01                	push   0x1
c0005b02:	52                   	push   edx
c0005b03:	50                   	push   eax
c0005b04:	55                   	push   ebp
c0005b05:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005b09:	e9 5a 02 00 00       	jmp    c0005d68 <f_lseek+0x465>
c0005b0e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b12:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005b15:	74 16                	je     c0005b2d <f_lseek+0x22a>
c0005b17:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005b1c:	76 0f                	jbe    c0005b2d <f_lseek+0x22a>
c0005b1e:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005b25:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005b2d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005b30:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005b33:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005b36:	89 c7                	mov    edi,eax
c0005b38:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b3c:	73 0d                	jae    c0005b4b <f_lseek+0x248>
c0005b3e:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b42:	75 07                	jne    c0005b4b <f_lseek+0x248>
c0005b44:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b4b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b4e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b51:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b55:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b5c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b63:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b66:	75 09                	jne    c0005b71 <f_lseek+0x26e>
c0005b68:	31 f6                	xor    esi,esi
c0005b6a:	31 ff                	xor    edi,edi
c0005b6c:	e9 af 01 00 00       	jmp    c0005d20 <f_lseek+0x41d>
c0005b71:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b75:	89 d7                	mov    edi,edx
c0005b77:	c1 e1 09             	shl    ecx,0x9
c0005b7a:	09 c7                	or     edi,eax
c0005b7c:	89 cd                	mov    ebp,ecx
c0005b7e:	74 6d                	je     c0005bed <f_lseek+0x2ea>
c0005b80:	83 c0 ff             	add    eax,0xffffffff
c0005b83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b87:	83 d2 ff             	adc    edx,0xffffffff
c0005b8a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b91:	83 c0 ff             	add    eax,0xffffffff
c0005b94:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b98:	83 d2 ff             	adc    edx,0xffffffff
c0005b9b:	31 ff                	xor    edi,edi
c0005b9d:	57                   	push   edi
c0005b9e:	51                   	push   ecx
c0005b9f:	52                   	push   edx
c0005ba0:	50                   	push   eax
c0005ba1:	e8 b6 d7 01 00       	call   c002335c <__udivdi3>
c0005ba6:	83 c4 10             	add    esp,0x10
c0005ba9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005bad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005bb1:	57                   	push   edi
c0005bb2:	55                   	push   ebp
c0005bb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005bbb:	e8 9c d7 01 00       	call   c002335c <__udivdi3>
c0005bc0:	83 c4 10             	add    esp,0x10
c0005bc3:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005bc7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005bcb:	19 d1                	sbb    ecx,edx
c0005bcd:	72 1e                	jb     c0005bed <f_lseek+0x2ea>
c0005bcf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005bd3:	89 e9                	mov    ecx,ebp
c0005bd5:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005bd8:	f7 d9                	neg    ecx
c0005bda:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005bdd:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005be1:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005be4:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005be7:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005beb:	eb 28                	jmp    c0005c15 <f_lseek+0x312>
c0005bed:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005bf0:	85 c0                	test   eax,eax
c0005bf2:	75 1e                	jne    c0005c12 <f_lseek+0x30f>
c0005bf4:	31 d2                	xor    edx,edx
c0005bf6:	89 d8                	mov    eax,ebx
c0005bf8:	e8 a9 d4 ff ff       	call   c00030a6 <create_chain>
c0005bfd:	83 f8 01             	cmp    eax,0x1
c0005c00:	0f 84 b9 fd ff ff    	je     c00059bf <f_lseek+0xbc>
c0005c06:	83 f8 ff             	cmp    eax,0xffffffff
c0005c09:	0f 84 c6 fd ff ff    	je     c00059d5 <f_lseek+0xd2>
c0005c0f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005c12:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c15:	85 c0                	test   eax,eax
c0005c17:	0f 84 4b ff ff ff    	je     c0005b68 <f_lseek+0x265>
c0005c1d:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005c21:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005c29:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005c2c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c30:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005c33:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005c36:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c3a:	0f 83 9d 00 00 00    	jae    c0005cdd <f_lseek+0x3da>
c0005c40:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c44:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c48:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c4b:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c4f:	01 f2                	add    edx,esi
c0005c51:	11 f9                	adc    ecx,edi
c0005c53:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c57:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c5b:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c5e:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c61:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c64:	f6 c1 02             	test   cl,0x2
c0005c67:	74 35                	je     c0005c9e <f_lseek+0x39b>
c0005c69:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c6d:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c70:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c73:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c77:	73 16                	jae    c0005c8f <f_lseek+0x38c>
c0005c79:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c7d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c81:	88 ca                	mov    dl,cl
c0005c83:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c86:	83 ca 40             	or     edx,0x40
c0005c89:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c8c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c8f:	89 c2                	mov    edx,eax
c0005c91:	89 d8                	mov    eax,ebx
c0005c93:	e8 0e d4 ff ff       	call   c00030a6 <create_chain>
c0005c98:	85 c0                	test   eax,eax
c0005c9a:	75 0b                	jne    c0005ca7 <f_lseek+0x3a4>
c0005c9c:	eb 30                	jmp    c0005cce <f_lseek+0x3cb>
c0005c9e:	89 c2                	mov    edx,eax
c0005ca0:	89 d8                	mov    eax,ebx
c0005ca2:	e8 11 d1 ff ff       	call   c0002db8 <get_fat>
c0005ca7:	83 f8 ff             	cmp    eax,0xffffffff
c0005caa:	0f 84 25 fd ff ff    	je     c00059d5 <f_lseek+0xd2>
c0005cb0:	83 f8 01             	cmp    eax,0x1
c0005cb3:	0f 86 06 fd ff ff    	jbe    c00059bf <f_lseek+0xbc>
c0005cb9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005cbd:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005cc0:	0f 86 f9 fc ff ff    	jbe    c00059bf <f_lseek+0xbc>
c0005cc6:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cc9:	e9 5b ff ff ff       	jmp    c0005c29 <f_lseek+0x326>
c0005cce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005cd5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005cdd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005ce0:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ce4:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ce7:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005cea:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ced:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005cf3:	0f 84 6f fe ff ff    	je     c0005b68 <f_lseek+0x265>
c0005cf9:	89 c2                	mov    edx,eax
c0005cfb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cff:	e8 e7 bf ff ff       	call   c0001ceb <clst2sect>
c0005d04:	89 d7                	mov    edi,edx
c0005d06:	09 c7                	or     edi,eax
c0005d08:	0f 84 b1 fc ff ff    	je     c00059bf <f_lseek+0xbc>
c0005d0e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d12:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d15:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d19:	c1 ef 09             	shr    edi,0x9
c0005d1c:	01 c6                	add    esi,eax
c0005d1e:	11 d7                	adc    edi,edx
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005d29:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005d2c:	19 d1                	sbb    ecx,edx
c0005d2e:	73 0a                	jae    c0005d3a <f_lseek+0x437>
c0005d30:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005d33:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005d36:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005d3a:	a9 ff 01 00 00       	test   eax,0x1ff
c0005d3f:	74 6d                	je     c0005dae <f_lseek+0x4ab>
c0005d41:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d44:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d47:	39 fa                	cmp    edx,edi
c0005d49:	75 04                	jne    c0005d4f <f_lseek+0x44c>
c0005d4b:	39 f0                	cmp    eax,esi
c0005d4d:	74 5f                	je     c0005dae <f_lseek+0x4ab>
c0005d4f:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d52:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d56:	79 25                	jns    c0005d7d <f_lseek+0x47a>
c0005d58:	83 ec 0c             	sub    esp,0xc
c0005d5b:	6a 01                	push   0x1
c0005d5d:	52                   	push   edx
c0005d5e:	50                   	push   eax
c0005d5f:	55                   	push   ebp
c0005d60:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d64:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d68:	50                   	push   eax
c0005d69:	e8 af bc ff ff       	call   c0001a1d <disk_write>
c0005d6e:	83 c4 20             	add    esp,0x20
c0005d71:	85 c0                	test   eax,eax
c0005d73:	0f 85 5c fc ff ff    	jne    c00059d5 <f_lseek+0xd2>
c0005d79:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d7d:	83 ec 0c             	sub    esp,0xc
c0005d80:	6a 01                	push   0x1
c0005d82:	57                   	push   edi
c0005d83:	56                   	push   esi
c0005d84:	55                   	push   ebp
c0005d85:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d89:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d8d:	50                   	push   eax
c0005d8e:	e8 74 bc ff ff       	call   c0001a07 <disk_read>
c0005d93:	83 c4 20             	add    esp,0x20
c0005d96:	85 c0                	test   eax,eax
c0005d98:	0f 85 37 fc ff ff    	jne    c00059d5 <f_lseek+0xd2>
c0005d9e:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005da1:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005da4:	eb 08                	jmp    c0005dae <f_lseek+0x4ab>
c0005da6:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005dae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005db2:	83 c4 3c             	add    esp,0x3c
c0005db5:	5b                   	pop    ebx
c0005db6:	5e                   	pop    esi
c0005db7:	5f                   	pop    edi
c0005db8:	5d                   	pop    ebp
c0005db9:	c3                   	ret    

c0005dba <f_opendir>:
c0005dba:	56                   	push   esi
c0005dbb:	b8 09 00 00 00       	mov    eax,0x9
c0005dc0:	53                   	push   ebx
c0005dc1:	83 ec 24             	sub    esp,0x24
c0005dc4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005dc8:	85 db                	test   ebx,ebx
c0005dca:	0f 84 e6 00 00 00    	je     c0005eb6 <f_opendir+0xfc>
c0005dd0:	31 c9                	xor    ecx,ecx
c0005dd2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005dd6:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005dda:	e8 03 c7 ff ff       	call   c00024e2 <mount_volume>
c0005ddf:	85 c0                	test   eax,eax
c0005de1:	0f 85 c9 00 00 00    	jne    c0005eb0 <f_opendir+0xf6>
c0005de7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005deb:	83 ec 0c             	sub    esp,0xc
c0005dee:	89 03                	mov    DWORD PTR [ebx],eax
c0005df0:	68 60 04 00 00       	push   0x460
c0005df5:	e8 8b 24 00 00       	call   c0008285 <ff_memalloc>
c0005dfa:	83 c4 10             	add    esp,0x10
c0005dfd:	89 c6                	mov    esi,eax
c0005dff:	b8 11 00 00 00       	mov    eax,0x11
c0005e04:	85 f6                	test   esi,esi
c0005e06:	0f 84 aa 00 00 00    	je     c0005eb6 <f_opendir+0xfc>
c0005e0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e10:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e16:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e19:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e1c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005e20:	89 d8                	mov    eax,ebx
c0005e22:	e8 31 ee ff ff       	call   c0004c58 <follow_path>
c0005e27:	85 c0                	test   eax,eax
c0005e29:	75 61                	jne    c0005e8c <f_opendir+0xd2>
c0005e2b:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005e2f:	78 46                	js     c0005e77 <f_opendir+0xbd>
c0005e31:	b8 05 00 00 00       	mov    eax,0x5
c0005e36:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005e3a:	74 50                	je     c0005e8c <f_opendir+0xd2>
c0005e3c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e40:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e42:	3c 04                	cmp    al,0x4
c0005e44:	75 26                	jne    c0005e6c <f_opendir+0xb2>
c0005e46:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e49:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e4c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e4f:	30 d2                	xor    dl,dl
c0005e51:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e55:	09 c2                	or     edx,eax
c0005e57:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e5a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e60:	89 da                	mov    edx,ebx
c0005e62:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e65:	e8 b4 ed ff ff       	call   c0004c1e <init_alloc_info.isra.2>
c0005e6a:	eb 0b                	jmp    c0005e77 <f_opendir+0xbd>
c0005e6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e6f:	e8 59 ed ff ff       	call   c0004bcd <ld_clust.isra.0>
c0005e74:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e7b:	31 d2                	xor    edx,edx
c0005e7d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e81:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e85:	89 d8                	mov    eax,ebx
c0005e87:	e8 22 d1 ff ff       	call   c0002fae <dir_sdi>
c0005e8c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e90:	83 ec 0c             	sub    esp,0xc
c0005e93:	56                   	push   esi
c0005e94:	e8 02 24 00 00       	call   c000829b <ff_memfree>
c0005e99:	83 c4 10             	add    esp,0x10
c0005e9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ea0:	83 f8 04             	cmp    eax,0x4
c0005ea3:	74 06                	je     c0005eab <f_opendir+0xf1>
c0005ea5:	85 c0                	test   eax,eax
c0005ea7:	74 0d                	je     c0005eb6 <f_opendir+0xfc>
c0005ea9:	eb 05                	jmp    c0005eb0 <f_opendir+0xf6>
c0005eab:	b8 05 00 00 00       	mov    eax,0x5
c0005eb0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005eb6:	83 c4 24             	add    esp,0x24
c0005eb9:	5b                   	pop    ebx
c0005eba:	5e                   	pop    esi
c0005ebb:	c3                   	ret    

c0005ebc <f_closedir>:
c0005ebc:	53                   	push   ebx
c0005ebd:	83 ec 18             	sub    esp,0x18
c0005ec0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005ec4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ec8:	89 d8                	mov    eax,ebx
c0005eca:	e8 86 c2 ff ff       	call   c0002155 <validate>
c0005ecf:	85 c0                	test   eax,eax
c0005ed1:	75 06                	jne    c0005ed9 <f_closedir+0x1d>
c0005ed3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ed9:	83 c4 18             	add    esp,0x18
c0005edc:	5b                   	pop    ebx
c0005edd:	c3                   	ret    

c0005ede <f_readdir>:
c0005ede:	57                   	push   edi
c0005edf:	56                   	push   esi
c0005ee0:	53                   	push   ebx
c0005ee1:	83 ec 20             	sub    esp,0x20
c0005ee4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ee8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005eec:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ef0:	89 d8                	mov    eax,ebx
c0005ef2:	e8 5e c2 ff ff       	call   c0002155 <validate>
c0005ef7:	85 c0                	test   eax,eax
c0005ef9:	75 77                	jne    c0005f72 <f_readdir+0x94>
c0005efb:	85 ff                	test   edi,edi
c0005efd:	75 0b                	jne    c0005f0a <f_readdir+0x2c>
c0005eff:	31 d2                	xor    edx,edx
c0005f01:	89 d8                	mov    eax,ebx
c0005f03:	e8 a6 d0 ff ff       	call   c0002fae <dir_sdi>
c0005f08:	eb 68                	jmp    c0005f72 <f_readdir+0x94>
c0005f0a:	83 ec 0c             	sub    esp,0xc
c0005f0d:	68 60 04 00 00       	push   0x460
c0005f12:	e8 6e 23 00 00       	call   c0008285 <ff_memalloc>
c0005f17:	83 c4 10             	add    esp,0x10
c0005f1a:	89 c6                	mov    esi,eax
c0005f1c:	b8 11 00 00 00       	mov    eax,0x11
c0005f21:	85 f6                	test   esi,esi
c0005f23:	74 4d                	je     c0005f72 <f_readdir+0x94>
c0005f25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f29:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f2f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f32:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f35:	31 d2                	xor    edx,edx
c0005f37:	89 d8                	mov    eax,ebx
c0005f39:	e8 80 d8 ff ff       	call   c00037be <dir_read>
c0005f3e:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f43:	75 19                	jne    c0005f5e <f_readdir+0x80>
c0005f45:	89 fa                	mov    edx,edi
c0005f47:	89 d8                	mov    eax,ebx
c0005f49:	e8 7e ea ff ff       	call   c00049cc <get_fileinfo>
c0005f4e:	31 d2                	xor    edx,edx
c0005f50:	89 d8                	mov    eax,ebx
c0005f52:	e8 af d5 ff ff       	call   c0003506 <dir_next>
c0005f57:	83 f8 04             	cmp    eax,0x4
c0005f5a:	75 02                	jne    c0005f5e <f_readdir+0x80>
c0005f5c:	31 c0                	xor    eax,eax
c0005f5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f62:	83 ec 0c             	sub    esp,0xc
c0005f65:	56                   	push   esi
c0005f66:	e8 30 23 00 00       	call   c000829b <ff_memfree>
c0005f6b:	83 c4 10             	add    esp,0x10
c0005f6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f72:	83 c4 20             	add    esp,0x20
c0005f75:	5b                   	pop    ebx
c0005f76:	5e                   	pop    esi
c0005f77:	5f                   	pop    edi
c0005f78:	c3                   	ret    

c0005f79 <f_stat>:
c0005f79:	57                   	push   edi
c0005f7a:	31 c9                	xor    ecx,ecx
c0005f7c:	56                   	push   esi
c0005f7d:	53                   	push   ebx
c0005f7e:	83 ec 50             	sub    esp,0x50
c0005f81:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f85:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f89:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f8d:	e8 50 c5 ff ff       	call   c00024e2 <mount_volume>
c0005f92:	89 c3                	mov    ebx,eax
c0005f94:	85 c0                	test   eax,eax
c0005f96:	75 67                	jne    c0005fff <f_stat+0x86>
c0005f98:	83 ec 0c             	sub    esp,0xc
c0005f9b:	bb 11 00 00 00       	mov    ebx,0x11
c0005fa0:	68 60 04 00 00       	push   0x460
c0005fa5:	e8 db 22 00 00       	call   c0008285 <ff_memalloc>
c0005faa:	83 c4 10             	add    esp,0x10
c0005fad:	89 c6                	mov    esi,eax
c0005faf:	85 c0                	test   eax,eax
c0005fb1:	74 4c                	je     c0005fff <f_stat+0x86>
c0005fb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005fb7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005fbd:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fc0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005fc3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005fc7:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fcb:	e8 88 ec ff ff       	call   c0004c58 <follow_path>
c0005fd0:	89 c3                	mov    ebx,eax
c0005fd2:	85 c0                	test   eax,eax
c0005fd4:	75 1d                	jne    c0005ff3 <f_stat+0x7a>
c0005fd6:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005fdb:	78 11                	js     c0005fee <f_stat+0x75>
c0005fdd:	85 ff                	test   edi,edi
c0005fdf:	74 12                	je     c0005ff3 <f_stat+0x7a>
c0005fe1:	89 fa                	mov    edx,edi
c0005fe3:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fe7:	e8 e0 e9 ff ff       	call   c00049cc <get_fileinfo>
c0005fec:	eb 05                	jmp    c0005ff3 <f_stat+0x7a>
c0005fee:	bb 06 00 00 00       	mov    ebx,0x6
c0005ff3:	83 ec 0c             	sub    esp,0xc
c0005ff6:	56                   	push   esi
c0005ff7:	e8 9f 22 00 00       	call   c000829b <ff_memfree>
c0005ffc:	83 c4 10             	add    esp,0x10
c0005fff:	83 c4 50             	add    esp,0x50
c0006002:	89 d8                	mov    eax,ebx
c0006004:	5b                   	pop    ebx
c0006005:	5e                   	pop    esi
c0006006:	5f                   	pop    edi
c0006007:	c3                   	ret    

c0006008 <f_getfree>:
c0006008:	55                   	push   ebp
c0006009:	31 c9                	xor    ecx,ecx
c000600b:	57                   	push   edi
c000600c:	56                   	push   esi
c000600d:	53                   	push   ebx
c000600e:	83 ec 5c             	sub    esp,0x5c
c0006011:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006015:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006019:	e8 c4 c4 ff ff       	call   c00024e2 <mount_volume>
c000601e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006022:	85 c0                	test   eax,eax
c0006024:	0f 85 9d 01 00 00    	jne    c00061c7 <f_getfree+0x1bf>
c000602a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000602e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006032:	89 02                	mov    DWORD PTR [edx],eax
c0006034:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006037:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000603a:	8d 71 fe             	lea    esi,[ecx-0x2]
c000603d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006041:	39 f2                	cmp    edx,esi
c0006043:	77 0b                	ja     c0006050 <f_getfree+0x48>
c0006045:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006049:	89 10                	mov    DWORD PTR [eax],edx
c000604b:	e9 77 01 00 00       	jmp    c00061c7 <f_getfree+0x1bf>
c0006050:	8a 10                	mov    dl,BYTE PTR [eax]
c0006052:	80 fa 01             	cmp    dl,0x1
c0006055:	75 3a                	jne    c0006091 <f_getfree+0x89>
c0006057:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000605b:	be 02 00 00 00       	mov    esi,0x2
c0006060:	31 db                	xor    ebx,ebx
c0006062:	89 f2                	mov    edx,esi
c0006064:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006068:	e8 4b cd ff ff       	call   c0002db8 <get_fat>
c000606d:	83 f8 ff             	cmp    eax,0xffffffff
c0006070:	0f 84 28 01 00 00    	je     c000619e <f_getfree+0x196>
c0006076:	83 f8 01             	cmp    eax,0x1
c0006079:	0f 84 29 01 00 00    	je     c00061a8 <f_getfree+0x1a0>
c000607f:	83 d3 00             	adc    ebx,0x0
c0006082:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006086:	46                   	inc    esi
c0006087:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000608a:	77 d6                	ja     c0006062 <f_getfree+0x5a>
c000608c:	e9 25 01 00 00       	jmp    c00061b6 <f_getfree+0x1ae>
c0006091:	80 fa 04             	cmp    dl,0x4
c0006094:	0f 85 88 00 00 00    	jne    c0006122 <f_getfree+0x11a>
c000609a:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000609d:	31 ed                	xor    ebp,ebp
c000609f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00060a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060aa:	31 db                	xor    ebx,ebx
c00060ac:	85 ed                	test   ebp,ebp
c00060ae:	75 3f                	jne    c00060ef <f_getfree+0xe7>
c00060b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00060b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00060b8:	83 c0 01             	add    eax,0x1
c00060bb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00060bf:	83 d2 00             	adc    edx,0x0
c00060c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060c6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00060ca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00060d2:	e8 59 c1 ff ff       	call   c0002230 <move_window>
c00060d7:	85 c0                	test   eax,eax
c00060d9:	0f 85 d3 00 00 00    	jne    c00061b2 <f_getfree+0x1aa>
c00060df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060f3:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060f6:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060fa:	89 cf                	mov    edi,ecx
c00060fc:	85 f6                	test   esi,esi
c00060fe:	74 12                	je     c0006112 <f_getfree+0x10a>
c0006100:	88 c1                	mov    cl,al
c0006102:	83 e1 01             	and    ecx,0x1
c0006105:	80 f9 01             	cmp    cl,0x1
c0006108:	83 d3 00             	adc    ebx,0x0
c000610b:	d0 e8                	shr    al,1
c000610d:	4e                   	dec    esi
c000610e:	39 fe                	cmp    esi,edi
c0006110:	75 ea                	jne    c00060fc <f_getfree+0xf4>
c0006112:	45                   	inc    ebp
c0006113:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006119:	85 f6                	test   esi,esi
c000611b:	75 8f                	jne    c00060ac <f_getfree+0xa4>
c000611d:	e9 94 00 00 00       	jmp    c00061b6 <f_getfree+0x1ae>
c0006122:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006125:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006128:	31 f6                	xor    esi,esi
c000612a:	31 db                	xor    ebx,ebx
c000612c:	85 f6                	test   esi,esi
c000612e:	75 1b                	jne    c000614b <f_getfree+0x143>
c0006130:	89 d7                	mov    edi,edx
c0006132:	89 cd                	mov    ebp,ecx
c0006134:	83 c7 01             	add    edi,0x1
c0006137:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000613b:	83 d5 00             	adc    ebp,0x0
c000613e:	e8 ed c0 ff ff       	call   c0002230 <move_window>
c0006143:	85 c0                	test   eax,eax
c0006145:	75 6b                	jne    c00061b2 <f_getfree+0x1aa>
c0006147:	89 fa                	mov    edx,edi
c0006149:	89 e9                	mov    ecx,ebp
c000614b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000614f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006153:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006157:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000615a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000615e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006162:	75 11                	jne    c0006175 <f_getfree+0x16d>
c0006164:	e8 e9 b8 ff ff       	call   c0001a52 <ld_word>
c0006169:	66 83 f8 01          	cmp    ax,0x1
c000616d:	83 d3 00             	adc    ebx,0x0
c0006170:	83 c6 02             	add    esi,0x2
c0006173:	eb 13                	jmp    c0006188 <f_getfree+0x180>
c0006175:	e8 e5 b8 ff ff       	call   c0001a5f <ld_dword>
c000617a:	25 ff ff ff 0f       	and    eax,0xfffffff
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	83 d3 00             	adc    ebx,0x0
c0006185:	83 c6 04             	add    esi,0x4
c0006188:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000618e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006192:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006196:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000619a:	75 90                	jne    c000612c <f_getfree+0x124>
c000619c:	eb 18                	jmp    c00061b6 <f_getfree+0x1ae>
c000619e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00061a6:	eb 0e                	jmp    c00061b6 <f_getfree+0x1ae>
c00061a8:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00061b0:	eb 04                	jmp    c00061b6 <f_getfree+0x1ae>
c00061b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061b6:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00061ba:	89 18                	mov    DWORD PTR [eax],ebx
c00061bc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061c0:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00061c3:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00061c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061cb:	83 c4 5c             	add    esp,0x5c
c00061ce:	5b                   	pop    ebx
c00061cf:	5e                   	pop    esi
c00061d0:	5f                   	pop    edi
c00061d1:	5d                   	pop    ebp
c00061d2:	c3                   	ret    

c00061d3 <f_truncate>:
c00061d3:	56                   	push   esi
c00061d4:	53                   	push   ebx
c00061d5:	83 ec 14             	sub    esp,0x14
c00061d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00061dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00061e0:	89 d8                	mov    eax,ebx
c00061e2:	e8 6e bf ff ff       	call   c0002155 <validate>
c00061e7:	89 c6                	mov    esi,eax
c00061e9:	85 c0                	test   eax,eax
c00061eb:	0f 85 d2 00 00 00    	jne    c00062c3 <f_truncate+0xf0>
c00061f1:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061f5:	85 f6                	test   esi,esi
c00061f7:	0f 85 c6 00 00 00    	jne    c00062c3 <f_truncate+0xf0>
c00061fd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006201:	0f 84 b7 00 00 00    	je     c00062be <f_truncate+0xeb>
c0006207:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000620a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000620d:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006210:	89 d1                	mov    ecx,edx
c0006212:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006215:	0f 83 a8 00 00 00    	jae    c00062c3 <f_truncate+0xf0>
c000621b:	09 c2                	or     edx,eax
c000621d:	75 15                	jne    c0006234 <f_truncate+0x61>
c000621f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006222:	31 c9                	xor    ecx,ecx
c0006224:	89 d8                	mov    eax,ebx
c0006226:	e8 7a d0 ff ff       	call   c00032a5 <remove_chain>
c000622b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006232:	eb 35                	jmp    c0006269 <f_truncate+0x96>
c0006234:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006237:	89 d8                	mov    eax,ebx
c0006239:	e8 7a cb ff ff       	call   c0002db8 <get_fat>
c000623e:	89 c2                	mov    edx,eax
c0006240:	b8 01 00 00 00       	mov    eax,0x1
c0006245:	83 fa ff             	cmp    edx,0xffffffff
c0006248:	74 1f                	je     c0006269 <f_truncate+0x96>
c000624a:	b8 02 00 00 00       	mov    eax,0x2
c000624f:	83 fa 01             	cmp    edx,0x1
c0006252:	74 15                	je     c0006269 <f_truncate+0x96>
c0006254:	31 c0                	xor    eax,eax
c0006256:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000625a:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000625d:	76 0a                	jbe    c0006269 <f_truncate+0x96>
c000625f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006262:	89 d8                	mov    eax,ebx
c0006264:	e8 3c d0 ff ff       	call   c00032a5 <remove_chain>
c0006269:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000626c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000626f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006272:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006275:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006278:	83 ca 40             	or     edx,0x40
c000627b:	85 c0                	test   eax,eax
c000627d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006280:	75 35                	jne    c00062b7 <f_truncate+0xe4>
c0006282:	84 d2                	test   dl,dl
c0006284:	79 3d                	jns    c00062c3 <f_truncate+0xf0>
c0006286:	83 ec 0c             	sub    esp,0xc
c0006289:	8d 43 50             	lea    eax,[ebx+0x50]
c000628c:	6a 01                	push   0x1
c000628e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006291:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006294:	50                   	push   eax
c0006295:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006299:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000629d:	50                   	push   eax
c000629e:	e8 7a b7 ff ff       	call   c0001a1d <disk_write>
c00062a3:	83 c4 20             	add    esp,0x20
c00062a6:	85 c0                	test   eax,eax
c00062a8:	75 08                	jne    c00062b2 <f_truncate+0xdf>
c00062aa:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00062ae:	31 f6                	xor    esi,esi
c00062b0:	eb 11                	jmp    c00062c3 <f_truncate+0xf0>
c00062b2:	b8 01 00 00 00       	mov    eax,0x1
c00062b7:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00062ba:	89 c6                	mov    esi,eax
c00062bc:	eb 05                	jmp    c00062c3 <f_truncate+0xf0>
c00062be:	be 07 00 00 00       	mov    esi,0x7
c00062c3:	89 f0                	mov    eax,esi
c00062c5:	83 c4 14             	add    esp,0x14
c00062c8:	5b                   	pop    ebx
c00062c9:	5e                   	pop    esi
c00062ca:	c3                   	ret    

c00062cb <f_unlink>:
c00062cb:	56                   	push   esi
c00062cc:	b9 02 00 00 00       	mov    ecx,0x2
c00062d1:	53                   	push   ebx
c00062d2:	81 ec e4 00 00 00    	sub    esp,0xe4
c00062d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00062dc:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062e3:	e8 fa c1 ff ff       	call   c00024e2 <mount_volume>
c00062e8:	85 c0                	test   eax,eax
c00062ea:	0f 85 55 01 00 00    	jne    c0006445 <f_unlink+0x17a>
c00062f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062f4:	83 ec 0c             	sub    esp,0xc
c00062f7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062fb:	68 60 04 00 00       	push   0x460
c0006300:	e8 80 1f 00 00       	call   c0008285 <ff_memalloc>
c0006305:	83 c4 10             	add    esp,0x10
c0006308:	89 c3                	mov    ebx,eax
c000630a:	b8 11 00 00 00       	mov    eax,0x11
c000630f:	85 db                	test   ebx,ebx
c0006311:	0f 84 2e 01 00 00    	je     c0006445 <f_unlink+0x17a>
c0006317:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000631b:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006321:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006324:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006327:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000632e:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006332:	e8 21 e9 ff ff       	call   c0004c58 <follow_path>
c0006337:	85 c0                	test   eax,eax
c0006339:	0f 85 f2 00 00 00    	jne    c0006431 <f_unlink+0x166>
c000633f:	b8 06 00 00 00       	mov    eax,0x6
c0006344:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000634c:	0f 88 df 00 00 00    	js     c0006431 <f_unlink+0x166>
c0006352:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006357:	74 0a                	je     c0006363 <f_unlink+0x98>
c0006359:	b8 07 00 00 00       	mov    eax,0x7
c000635e:	e9 ce 00 00 00       	jmp    c0006431 <f_unlink+0x166>
c0006363:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006367:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000636b:	8a 02                	mov    al,BYTE PTR [edx]
c000636d:	3c 04                	cmp    al,0x4
c000636f:	75 12                	jne    c0006383 <f_unlink+0xb8>
c0006371:	8d 42 10             	lea    eax,[edx+0x10]
c0006374:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006378:	e8 a1 e8 ff ff       	call   c0004c1e <init_alloc_info.isra.2>
c000637d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006381:	eb 0e                	jmp    c0006391 <f_unlink+0xc6>
c0006383:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000638a:	e8 3e e8 ff ff       	call   c0004bcd <ld_clust.isra.0>
c000638f:	89 c6                	mov    esi,eax
c0006391:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006396:	75 12                	jne    c00063aa <f_unlink+0xdf>
c0006398:	8d 44 24 48          	lea    eax,[esp+0x48]
c000639c:	e8 94 d6 ff ff       	call   c0003a35 <dir_remove>
c00063a1:	85 c0                	test   eax,eax
c00063a3:	74 6c                	je     c0006411 <f_unlink+0x146>
c00063a5:	e9 87 00 00 00       	jmp    c0006431 <f_unlink+0x166>
c00063aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063ae:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00063b5:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00063bc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00063bf:	75 21                	jne    c00063e2 <f_unlink+0x117>
c00063c1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00063c5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00063c9:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00063d0:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00063d7:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00063db:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063e2:	31 d2                	xor    edx,edx
c00063e4:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063eb:	e8 be cb ff ff       	call   c0002fae <dir_sdi>
c00063f0:	85 c0                	test   eax,eax
c00063f2:	75 3d                	jne    c0006431 <f_unlink+0x166>
c00063f4:	31 d2                	xor    edx,edx
c00063f6:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063fd:	e8 bc d3 ff ff       	call   c00037be <dir_read>
c0006402:	85 c0                	test   eax,eax
c0006404:	0f 84 4f ff ff ff    	je     c0006359 <f_unlink+0x8e>
c000640a:	83 f8 04             	cmp    eax,0x4
c000640d:	75 22                	jne    c0006431 <f_unlink+0x166>
c000640f:	eb 87                	jmp    c0006398 <f_unlink+0xcd>
c0006411:	85 f6                	test   esi,esi
c0006413:	75 0b                	jne    c0006420 <f_unlink+0x155>
c0006415:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006419:	e8 3d df ff ff       	call   c000435b <sync_fs>
c000641e:	eb 11                	jmp    c0006431 <f_unlink+0x166>
c0006420:	31 c9                	xor    ecx,ecx
c0006422:	89 f2                	mov    edx,esi
c0006424:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006428:	e8 78 ce ff ff       	call   c00032a5 <remove_chain>
c000642d:	85 c0                	test   eax,eax
c000642f:	74 e4                	je     c0006415 <f_unlink+0x14a>
c0006431:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006435:	83 ec 0c             	sub    esp,0xc
c0006438:	53                   	push   ebx
c0006439:	e8 5d 1e 00 00       	call   c000829b <ff_memfree>
c000643e:	83 c4 10             	add    esp,0x10
c0006441:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006445:	81 c4 e4 00 00 00    	add    esp,0xe4
c000644b:	5b                   	pop    ebx
c000644c:	5e                   	pop    esi
c000644d:	c3                   	ret    

c000644e <f_mkdir>:
c000644e:	57                   	push   edi
c000644f:	b9 02 00 00 00       	mov    ecx,0x2
c0006454:	56                   	push   esi
c0006455:	53                   	push   ebx
c0006456:	83 c4 80             	add    esp,0xffffff80
c0006459:	8d 54 24 08          	lea    edx,[esp+0x8]
c000645d:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006464:	e8 79 c0 ff ff       	call   c00024e2 <mount_volume>
c0006469:	89 c3                	mov    ebx,eax
c000646b:	85 c0                	test   eax,eax
c000646d:	0f 85 fe 01 00 00    	jne    c0006671 <f_mkdir+0x223>
c0006473:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006477:	bb 11 00 00 00       	mov    ebx,0x11
c000647c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006480:	83 ec 0c             	sub    esp,0xc
c0006483:	68 60 04 00 00       	push   0x460
c0006488:	e8 f8 1d 00 00       	call   c0008285 <ff_memalloc>
c000648d:	83 c4 10             	add    esp,0x10
c0006490:	89 c7                	mov    edi,eax
c0006492:	85 c0                	test   eax,eax
c0006494:	0f 84 d7 01 00 00    	je     c0006671 <f_mkdir+0x223>
c000649a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000649e:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00064a4:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00064a7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064aa:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00064b1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064b5:	e8 9e e7 ff ff       	call   c0004c58 <follow_path>
c00064ba:	89 c3                	mov    ebx,eax
c00064bc:	85 c0                	test   eax,eax
c00064be:	74 3e                	je     c00064fe <f_mkdir+0xb0>
c00064c0:	83 f8 04             	cmp    eax,0x4
c00064c3:	75 3e                	jne    c0006503 <f_mkdir+0xb5>
c00064c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c9:	31 d2                	xor    edx,edx
c00064cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00064cf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064d3:	e8 ce cb ff ff       	call   c00030a6 <create_chain>
c00064d8:	89 c6                	mov    esi,eax
c00064da:	85 c0                	test   eax,eax
c00064dc:	74 0c                	je     c00064ea <f_mkdir+0x9c>
c00064de:	bb 02 00 00 00       	mov    ebx,0x2
c00064e3:	83 f8 01             	cmp    eax,0x1
c00064e6:	74 07                	je     c00064ef <f_mkdir+0xa1>
c00064e8:	eb 2a                	jmp    c0006514 <f_mkdir+0xc6>
c00064ea:	bb 07 00 00 00       	mov    ebx,0x7
c00064ef:	31 c9                	xor    ecx,ecx
c00064f1:	89 f2                	mov    edx,esi
c00064f3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064f7:	e8 a9 cd ff ff       	call   c00032a5 <remove_chain>
c00064fc:	eb 05                	jmp    c0006503 <f_mkdir+0xb5>
c00064fe:	bb 08 00 00 00       	mov    ebx,0x8
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	57                   	push   edi
c0006507:	e8 8f 1d 00 00       	call   c000829b <ff_memfree>
c000650c:	83 c4 10             	add    esp,0x10
c000650f:	e9 5d 01 00 00       	jmp    c0006671 <f_mkdir+0x223>
c0006514:	bb 01 00 00 00       	mov    ebx,0x1
c0006519:	83 f8 ff             	cmp    eax,0xffffffff
c000651c:	74 d1                	je     c00064ef <f_mkdir+0xa1>
c000651e:	89 f2                	mov    edx,esi
c0006520:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006524:	e8 c4 ce ff ff       	call   c00033ed <dir_clear>
c0006529:	89 c3                	mov    ebx,eax
c000652b:	85 c0                	test   eax,eax
c000652d:	75 c0                	jne    c00064ef <f_mkdir+0xa1>
c000652f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006533:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006536:	74 69                	je     c00065a1 <f_mkdir+0x153>
c0006538:	b9 0b 00 00 00       	mov    ecx,0xb
c000653d:	83 c0 54             	add    eax,0x54
c0006540:	ba 20 00 00 00       	mov    edx,0x20
c0006545:	e8 9c b5 ff ff       	call   c0001ae6 <mem_set>
c000654a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006553:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006557:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000655b:	83 c0 6a             	add    eax,0x6a
c000655e:	e8 65 b5 ff ff       	call   c0001ac8 <st_dword>
c0006563:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006567:	89 f1                	mov    ecx,esi
c0006569:	8d 50 54             	lea    edx,[eax+0x54]
c000656c:	e8 85 e6 ff ff       	call   c0004bf6 <st_clust.isra.1>
c0006571:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006575:	b9 20 00 00 00       	mov    ecx,0x20
c000657a:	8d 50 54             	lea    edx,[eax+0x54]
c000657d:	83 c0 74             	add    eax,0x74
c0006580:	e8 4c b5 ff ff       	call   c0001ad1 <mem_cpy>
c0006585:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006589:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000658d:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006591:	8d 50 74             	lea    edx,[eax+0x74]
c0006594:	e8 5d e6 ff ff       	call   c0004bf6 <st_clust.isra.1>
c0006599:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000659d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00065a1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065a5:	e8 2f db ff ff       	call   c00040d9 <dir_register>
c00065aa:	89 c3                	mov    ebx,eax
c00065ac:	85 c0                	test   eax,eax
c00065ae:	0f 85 3b ff ff ff    	jne    c00064ef <f_mkdir+0xa1>
c00065b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065bb:	75 74                	jne    c0006631 <f_mkdir+0x1e3>
c00065bd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065c0:	ba 00 00 21 50       	mov    edx,0x50210000
c00065c5:	83 c0 0c             	add    eax,0xc
c00065c8:	e8 fb b4 ff ff       	call   c0001ac8 <st_dword>
c00065cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d1:	89 f2                	mov    edx,esi
c00065d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065d6:	83 c0 34             	add    eax,0x34
c00065d9:	e8 ea b4 ff ff       	call   c0001ac8 <st_dword>
c00065de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065e2:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065e6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065e9:	c1 e2 09             	shl    edx,0x9
c00065ec:	83 c0 38             	add    eax,0x38
c00065ef:	e8 d4 b4 ff ff       	call   c0001ac8 <st_dword>
c00065f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f8:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065fc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065ff:	c1 e2 09             	shl    edx,0x9
c0006602:	83 c0 28             	add    eax,0x28
c0006605:	e8 be b4 ff ff       	call   c0001ac8 <st_dword>
c000660a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000660e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006611:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006615:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006618:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000661c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006620:	e8 8b d3 ff ff       	call   c00039b0 <store_xdir>
c0006625:	89 c3                	mov    ebx,eax
c0006627:	85 c0                	test   eax,eax
c0006629:	0f 85 d4 fe ff ff    	jne    c0006503 <f_mkdir+0xb5>
c000662f:	eb 30                	jmp    c0006661 <f_mkdir+0x213>
c0006631:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006635:	ba 00 00 21 50       	mov    edx,0x50210000
c000663a:	83 c0 16             	add    eax,0x16
c000663d:	e8 86 b4 ff ff       	call   c0001ac8 <st_dword>
c0006642:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006646:	89 f1                	mov    ecx,esi
c0006648:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000664c:	e8 a5 e5 ff ff       	call   c0004bf6 <st_clust.isra.1>
c0006651:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006655:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006659:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000665d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006661:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006665:	e8 f1 dc ff ff       	call   c000435b <sync_fs>
c000666a:	89 c3                	mov    ebx,eax
c000666c:	e9 92 fe ff ff       	jmp    c0006503 <f_mkdir+0xb5>
c0006671:	83 ec 80             	sub    esp,0xffffff80
c0006674:	89 d8                	mov    eax,ebx
c0006676:	5b                   	pop    ebx
c0006677:	5e                   	pop    esi
c0006678:	5f                   	pop    edi
c0006679:	c3                   	ret    

c000667a <f_rename>:
c000667a:	55                   	push   ebp
c000667b:	57                   	push   edi
c000667c:	56                   	push   esi
c000667d:	53                   	push   ebx
c000667e:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006684:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000668b:	e8 a4 b9 ff ff       	call   c0002034 <get_ldnumber>
c0006690:	b9 02 00 00 00       	mov    ecx,0x2
c0006695:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006699:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00066a0:	e8 3d be ff ff       	call   c00024e2 <mount_volume>
c00066a5:	85 c0                	test   eax,eax
c00066a7:	0f 85 b5 02 00 00    	jne    c0006962 <f_rename+0x2e8>
c00066ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b1:	83 ec 0c             	sub    esp,0xc
c00066b4:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00066b8:	68 60 04 00 00       	push   0x460
c00066bd:	e8 c3 1b 00 00       	call   c0008285 <ff_memalloc>
c00066c2:	83 c4 10             	add    esp,0x10
c00066c5:	89 c3                	mov    ebx,eax
c00066c7:	b8 11 00 00 00       	mov    eax,0x11
c00066cc:	85 db                	test   ebx,ebx
c00066ce:	0f 84 8e 02 00 00    	je     c0006962 <f_rename+0x2e8>
c00066d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00066de:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066e1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066e4:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066eb:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066ef:	e8 64 e5 ff ff       	call   c0004c58 <follow_path>
c00066f4:	85 c0                	test   eax,eax
c00066f6:	0f 85 52 02 00 00    	jne    c000694e <f_rename+0x2d4>
c00066fc:	b8 06 00 00 00       	mov    eax,0x6
c0006701:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006709:	0f 85 3f 02 00 00    	jne    c000694e <f_rename+0x2d4>
c000670f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006713:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006716:	0f 85 05 01 00 00    	jne    c0006821 <f_rename+0x1a7>
c000671c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671f:	b9 40 00 00 00       	mov    ecx,0x40
c0006724:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006728:	e8 a4 b3 ff ff       	call   c0001ad1 <mem_cpy>
c000672d:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006732:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006736:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000673d:	e8 8f b3 ff ff       	call   c0001ad1 <mem_cpy>
c0006742:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006749:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006750:	e8 03 e5 ff ff       	call   c0004c58 <follow_path>
c0006755:	85 c0                	test   eax,eax
c0006757:	75 29                	jne    c0006782 <f_rename+0x108>
c0006759:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000675d:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006764:	74 0a                	je     c0006770 <f_rename+0xf6>
c0006766:	b8 08 00 00 00       	mov    eax,0x8
c000676b:	e9 de 01 00 00       	jmp    c000694e <f_rename+0x2d4>
c0006770:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006777:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000677e:	75 e6                	jne    c0006766 <f_rename+0xec>
c0006780:	eb 09                	jmp    c000678b <f_rename+0x111>
c0006782:	83 f8 04             	cmp    eax,0x4
c0006785:	0f 85 c3 01 00 00    	jne    c000694e <f_rename+0x2d4>
c000678b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006792:	e8 42 d9 ff ff       	call   c00040d9 <dir_register>
c0006797:	85 c0                	test   eax,eax
c0006799:	0f 85 af 01 00 00    	jne    c000694e <f_rename+0x2d4>
c000679f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067a3:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00067a6:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00067a9:	89 c5                	mov    ebp,eax
c00067ab:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00067ae:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00067b2:	8d 46 24             	lea    eax,[esi+0x24]
c00067b5:	e8 98 b2 ff ff       	call   c0001a52 <ld_word>
c00067ba:	b9 40 00 00 00       	mov    ecx,0x40
c00067bf:	89 c7                	mov    edi,eax
c00067c1:	8d 54 24 18          	lea    edx,[esp+0x18]
c00067c5:	89 f0                	mov    eax,esi
c00067c7:	e8 05 b3 ff ff       	call   c0001ad1 <mem_cpy>
c00067cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067d0:	89 e9                	mov    ecx,ebp
c00067d2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d5:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00067d8:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00067dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e3:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067e6:	0f b7 d7             	movzx  edx,di
c00067e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ec:	83 c0 24             	add    eax,0x24
c00067ef:	e8 d0 b2 ff ff       	call   c0001ac4 <st_word>
c00067f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067f8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067fb:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067fe:	a8 10                	test   al,0x10
c0006800:	75 06                	jne    c0006808 <f_rename+0x18e>
c0006802:	83 c8 20             	or     eax,0x20
c0006805:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006808:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000680f:	e8 9c d1 ff ff       	call   c00039b0 <store_xdir>
c0006814:	85 c0                	test   eax,eax
c0006816:	0f 84 1c 01 00 00    	je     c0006938 <f_rename+0x2be>
c000681c:	e9 2d 01 00 00       	jmp    c000694e <f_rename+0x2d4>
c0006821:	b9 20 00 00 00       	mov    ecx,0x20
c0006826:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 9b b2 ff ff       	call   c0001ad1 <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 86 b2 ff ff       	call   c0001ad1 <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 fa e3 ff ff       	call   c0004c58 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 27                	jne    c0006889 <f_rename+0x20f>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	0f 85 f3 fe ff ff    	jne    c0006766 <f_rename+0xec>
c0006873:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000687a:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006881:	0f 85 df fe ff ff    	jne    c0006766 <f_rename+0xec>
c0006887:	eb 09                	jmp    c0006892 <f_rename+0x218>
c0006889:	83 f8 04             	cmp    eax,0x4
c000688c:	0f 85 bc 00 00 00    	jne    c000694e <f_rename+0x2d4>
c0006892:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006899:	e8 3b d8 ff ff       	call   c00040d9 <dir_register>
c000689e:	85 c0                	test   eax,eax
c00068a0:	0f 85 a8 00 00 00    	jne    c000694e <f_rename+0x2d4>
c00068a6:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00068ad:	b9 13 00 00 00       	mov    ecx,0x13
c00068b2:	8d 46 0d             	lea    eax,[esi+0xd]
c00068b5:	8d 54 24 25          	lea    edx,[esp+0x25]
c00068b9:	e8 13 b2 ff ff       	call   c0001ad1 <mem_cpy>
c00068be:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00068c2:	a8 10                	test   al,0x10
c00068c4:	75 03                	jne    c00068c9 <f_rename+0x24f>
c00068c6:	83 c8 20             	or     eax,0x20
c00068c9:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00068cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068d4:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00068d8:	74 5e                	je     c0006938 <f_rename+0x2be>
c00068da:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068e1:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068e5:	74 51                	je     c0006938 <f_rename+0x2be>
c00068e7:	89 f2                	mov    edx,esi
c00068e9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068ed:	8a 07                	mov    al,BYTE PTR [edi]
c00068ef:	e8 d9 e2 ff ff       	call   c0004bcd <ld_clust.isra.0>
c00068f4:	89 c2                	mov    edx,eax
c00068f6:	89 f8                	mov    eax,edi
c00068f8:	e8 ee b3 ff ff       	call   c0001ceb <clst2sect>
c00068fd:	89 c6                	mov    esi,eax
c00068ff:	89 d1                	mov    ecx,edx
c0006901:	b8 02 00 00 00       	mov    eax,0x2
c0006906:	09 f2                	or     edx,esi
c0006908:	74 44                	je     c000694e <f_rename+0x2d4>
c000690a:	89 f2                	mov    edx,esi
c000690c:	89 f8                	mov    eax,edi
c000690e:	e8 1d b9 ff ff       	call   c0002230 <move_window>
c0006913:	85 c0                	test   eax,eax
c0006915:	75 37                	jne    c000694e <f_rename+0x2d4>
c0006917:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000691b:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000691f:	75 17                	jne    c0006938 <f_rename+0x2be>
c0006921:	8d 50 74             	lea    edx,[eax+0x74]
c0006924:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c000692b:	e8 c6 e2 ff ff       	call   c0004bf6 <st_clust.isra.1>
c0006930:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006934:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006938:	8d 44 24 58          	lea    eax,[esp+0x58]
c000693c:	e8 f4 d0 ff ff       	call   c0003a35 <dir_remove>
c0006941:	85 c0                	test   eax,eax
c0006943:	75 09                	jne    c000694e <f_rename+0x2d4>
c0006945:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006949:	e8 0d da ff ff       	call   c000435b <sync_fs>
c000694e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006952:	83 ec 0c             	sub    esp,0xc
c0006955:	53                   	push   ebx
c0006956:	e8 40 19 00 00       	call   c000829b <ff_memfree>
c000695b:	83 c4 10             	add    esp,0x10
c000695e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006962:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006968:	5b                   	pop    ebx
c0006969:	5e                   	pop    esi
c000696a:	5f                   	pop    edi
c000696b:	5d                   	pop    ebp
c000696c:	c3                   	ret    

c000696d <f_chmod>:
c000696d:	57                   	push   edi
c000696e:	b9 02 00 00 00       	mov    ecx,0x2
c0006973:	56                   	push   esi
c0006974:	53                   	push   ebx
c0006975:	83 ec 60             	sub    esp,0x60
c0006978:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000697c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006980:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006984:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006988:	e8 55 bb ff ff       	call   c00024e2 <mount_volume>
c000698d:	85 c0                	test   eax,eax
c000698f:	0f 85 af 00 00 00    	jne    c0006a44 <f_chmod+0xd7>
c0006995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006999:	83 ec 0c             	sub    esp,0xc
c000699c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069a0:	68 60 04 00 00       	push   0x460
c00069a5:	e8 db 18 00 00       	call   c0008285 <ff_memalloc>
c00069aa:	83 c4 10             	add    esp,0x10
c00069ad:	89 c6                	mov    esi,eax
c00069af:	b8 11 00 00 00       	mov    eax,0x11
c00069b4:	85 f6                	test   esi,esi
c00069b6:	0f 84 88 00 00 00    	je     c0006a44 <f_chmod+0xd7>
c00069bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00069c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00069c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069cc:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069d4:	e8 7f e2 ff ff       	call   c0004c58 <follow_path>
c00069d9:	85 c0                	test   eax,eax
c00069db:	75 53                	jne    c0006a30 <f_chmod+0xc3>
c00069dd:	b8 06 00 00 00       	mov    eax,0x6
c00069e2:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069e7:	75 47                	jne    c0006a30 <f_chmod+0xc3>
c00069e9:	89 f9                	mov    ecx,edi
c00069eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ef:	83 e1 27             	and    ecx,0x27
c00069f2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069f5:	75 1d                	jne    c0006a14 <f_chmod+0xa7>
c00069f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fa:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069fd:	21 cb                	and    ebx,ecx
c00069ff:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006a02:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006a05:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a09:	e8 a2 cf ff ff       	call   c00039b0 <store_xdir>
c0006a0e:	85 c0                	test   eax,eax
c0006a10:	75 1e                	jne    c0006a30 <f_chmod+0xc3>
c0006a12:	eb 13                	jmp    c0006a27 <f_chmod+0xba>
c0006a14:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006a18:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a1b:	21 cb                	and    ebx,ecx
c0006a1d:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006a20:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006a23:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a2b:	e8 2b d9 ff ff       	call   c000435b <sync_fs>
c0006a30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a34:	83 ec 0c             	sub    esp,0xc
c0006a37:	56                   	push   esi
c0006a38:	e8 5e 18 00 00       	call   c000829b <ff_memfree>
c0006a3d:	83 c4 10             	add    esp,0x10
c0006a40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a44:	83 c4 60             	add    esp,0x60
c0006a47:	5b                   	pop    ebx
c0006a48:	5e                   	pop    esi
c0006a49:	5f                   	pop    edi
c0006a4a:	c3                   	ret    

c0006a4b <f_utime>:
c0006a4b:	56                   	push   esi
c0006a4c:	b9 02 00 00 00       	mov    ecx,0x2
c0006a51:	53                   	push   ebx
c0006a52:	83 ec 64             	sub    esp,0x64
c0006a55:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a59:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a5d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a61:	e8 7c ba ff ff       	call   c00024e2 <mount_volume>
c0006a66:	85 c0                	test   eax,eax
c0006a68:	0f 85 b5 00 00 00    	jne    c0006b23 <f_utime+0xd8>
c0006a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a72:	83 ec 0c             	sub    esp,0xc
c0006a75:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a79:	68 60 04 00 00       	push   0x460
c0006a7e:	e8 02 18 00 00       	call   c0008285 <ff_memalloc>
c0006a83:	83 c4 10             	add    esp,0x10
c0006a86:	89 c3                	mov    ebx,eax
c0006a88:	b8 11 00 00 00       	mov    eax,0x11
c0006a8d:	85 db                	test   ebx,ebx
c0006a8f:	0f 84 8e 00 00 00    	je     c0006b23 <f_utime+0xd8>
c0006a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a99:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a9f:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006aa2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006aa5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006aa9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aad:	e8 a6 e1 ff ff       	call   c0004c58 <follow_path>
c0006ab2:	85 c0                	test   eax,eax
c0006ab4:	75 59                	jne    c0006b0f <f_utime+0xc4>
c0006ab6:	b8 06 00 00 00       	mov    eax,0x6
c0006abb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ac0:	75 4d                	jne    c0006b0f <f_utime+0xc4>
c0006ac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac6:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006aca:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ace:	c1 e2 10             	shl    edx,0x10
c0006ad1:	09 ca                	or     edx,ecx
c0006ad3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ad6:	75 1a                	jne    c0006af2 <f_utime+0xa7>
c0006ad8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006adb:	83 c0 0c             	add    eax,0xc
c0006ade:	e8 e5 af ff ff       	call   c0001ac8 <st_dword>
c0006ae3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ae7:	e8 c4 ce ff ff       	call   c00039b0 <store_xdir>
c0006aec:	85 c0                	test   eax,eax
c0006aee:	75 1f                	jne    c0006b0f <f_utime+0xc4>
c0006af0:	eb 14                	jmp    c0006b06 <f_utime+0xbb>
c0006af2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006af6:	83 c0 16             	add    eax,0x16
c0006af9:	e8 ca af ff ff       	call   c0001ac8 <st_dword>
c0006afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b02:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b0a:	e8 4c d8 ff ff       	call   c000435b <sync_fs>
c0006b0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b13:	83 ec 0c             	sub    esp,0xc
c0006b16:	53                   	push   ebx
c0006b17:	e8 7f 17 00 00       	call   c000829b <ff_memfree>
c0006b1c:	83 c4 10             	add    esp,0x10
c0006b1f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b23:	83 c4 64             	add    esp,0x64
c0006b26:	5b                   	pop    ebx
c0006b27:	5e                   	pop    esi
c0006b28:	c3                   	ret    

c0006b29 <f_getlabel>:
c0006b29:	55                   	push   ebp
c0006b2a:	31 c9                	xor    ecx,ecx
c0006b2c:	57                   	push   edi
c0006b2d:	56                   	push   esi
c0006b2e:	53                   	push   ebx
c0006b2f:	83 ec 6c             	sub    esp,0x6c
c0006b32:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b36:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006b3d:	e8 a0 b9 ff ff       	call   c00024e2 <mount_volume>
c0006b42:	89 c6                	mov    esi,eax
c0006b44:	85 c0                	test   eax,eax
c0006b46:	0f 85 c1 01 00 00    	jne    c0006d0d <f_getlabel+0x1e4>
c0006b4c:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b54:	0f 84 5f 01 00 00    	je     c0006cb9 <f_getlabel+0x190>
c0006b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b5e:	31 d2                	xor    edx,edx
c0006b60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b64:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b6c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b70:	e8 39 c4 ff ff       	call   c0002fae <dir_sdi>
c0006b75:	85 c0                	test   eax,eax
c0006b77:	0f 85 2d 01 00 00    	jne    c0006caa <f_getlabel+0x181>
c0006b7d:	ba 01 00 00 00       	mov    edx,0x1
c0006b82:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b86:	e8 33 cc ff ff       	call   c00037be <dir_read>
c0006b8b:	85 c0                	test   eax,eax
c0006b8d:	0f 85 17 01 00 00    	jne    c0006caa <f_getlabel+0x181>
c0006b93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b97:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b9a:	74 09                	je     c0006ba5 <f_getlabel+0x7c>
c0006b9c:	31 db                	xor    ebx,ebx
c0006b9e:	31 c9                	xor    ecx,ecx
c0006ba0:	e9 c8 00 00 00       	jmp    c0006c6d <f_getlabel+0x144>
c0006ba5:	31 ed                	xor    ebp,ebp
c0006ba7:	31 db                	xor    ebx,ebx
c0006ba9:	31 ff                	xor    edi,edi
c0006bab:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006baf:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006bb3:	39 fa                	cmp    edx,edi
c0006bb5:	76 4b                	jbe    c0006c02 <f_getlabel+0xd9>
c0006bb7:	47                   	inc    edi
c0006bb8:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006bbb:	01 d0                	add    eax,edx
c0006bbd:	e8 90 ae ff ff       	call   c0001a52 <ld_word>
c0006bc2:	66 85 ed             	test   bp,bp
c0006bc5:	75 0d                	jne    c0006bd4 <f_getlabel+0xab>
c0006bc7:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006bcd:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006bd2:	76 28                	jbe    c0006bfc <f_getlabel+0xd3>
c0006bd4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bdb:	89 e9                	mov    ecx,ebp
c0006bdd:	01 da                	add    edx,ebx
c0006bdf:	c1 e1 10             	shl    ecx,0x10
c0006be2:	0f b7 c0             	movzx  eax,ax
c0006be5:	09 c8                	or     eax,ecx
c0006be7:	b9 04 00 00 00       	mov    ecx,0x4
c0006bec:	e8 01 b0 ff ff       	call   c0001bf2 <put_utf>
c0006bf1:	84 c0                	test   al,al
c0006bf3:	74 0b                	je     c0006c00 <f_getlabel+0xd7>
c0006bf5:	0f b6 c0             	movzx  eax,al
c0006bf8:	01 c3                	add    ebx,eax
c0006bfa:	31 c0                	xor    eax,eax
c0006bfc:	89 c5                	mov    ebp,eax
c0006bfe:	eb ab                	jmp    c0006bab <f_getlabel+0x82>
c0006c00:	31 db                	xor    ebx,ebx
c0006c02:	66 85 ed             	test   bp,bp
c0006c05:	74 02                	je     c0006c09 <f_getlabel+0xe0>
c0006c07:	31 db                	xor    ebx,ebx
c0006c09:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c10:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006c14:	e9 a0 00 00 00       	jmp    c0006cb9 <f_getlabel+0x190>
c0006c19:	83 ff 0b             	cmp    edi,0xb
c0006c1c:	74 11                	je     c0006c2f <f_getlabel+0x106>
c0006c1e:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006c23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c27:	8d 79 02             	lea    edi,[ecx+0x2]
c0006c2a:	c1 e0 08             	shl    eax,0x8
c0006c2d:	09 c2                	or     edx,eax
c0006c2f:	0f b7 d2             	movzx  edx,dx
c0006c32:	50                   	push   eax
c0006c33:	50                   	push   eax
c0006c34:	68 b5 01 00 00       	push   0x1b5
c0006c39:	52                   	push   edx
c0006c3a:	e8 03 17 00 00       	call   c0008342 <ff_oem2uni>
c0006c3f:	83 c4 10             	add    esp,0x10
c0006c42:	66 85 c0             	test   ax,ax
c0006c45:	74 46                	je     c0006c8d <f_getlabel+0x164>
c0006c47:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c4e:	0f b7 c0             	movzx  eax,ax
c0006c51:	01 da                	add    edx,ebx
c0006c53:	b9 04 00 00 00       	mov    ecx,0x4
c0006c58:	e8 95 af ff ff       	call   c0001bf2 <put_utf>
c0006c5d:	84 c0                	test   al,al
c0006c5f:	74 2c                	je     c0006c8d <f_getlabel+0x164>
c0006c61:	0f b6 c0             	movzx  eax,al
c0006c64:	01 c3                	add    ebx,eax
c0006c66:	83 ff 0b             	cmp    edi,0xb
c0006c69:	74 24                	je     c0006c8f <f_getlabel+0x166>
c0006c6b:	89 f9                	mov    ecx,edi
c0006c6d:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c71:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c74:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c79:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c82:	e8 9f ae ff ff       	call   c0001b26 <dbc_1st>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	74 a4                	je     c0006c2f <f_getlabel+0x106>
c0006c8b:	eb 8c                	jmp    c0006c19 <f_getlabel+0xf0>
c0006c8d:	31 db                	xor    ebx,ebx
c0006c8f:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c96:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c99:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006ca0:	74 17                	je     c0006cb9 <f_getlabel+0x190>
c0006ca2:	4b                   	dec    ebx
c0006ca3:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006ca6:	74 ee                	je     c0006c96 <f_getlabel+0x16d>
c0006ca8:	eb 0f                	jmp    c0006cb9 <f_getlabel+0x190>
c0006caa:	83 f8 04             	cmp    eax,0x4
c0006cad:	75 5c                	jne    c0006d0b <f_getlabel+0x1e2>
c0006caf:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006cb6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006cb9:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006cc1:	74 4a                	je     c0006d0d <f_getlabel+0x1e4>
c0006cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cc7:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006cca:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ccd:	e8 5e b5 ff ff       	call   c0002230 <move_window>
c0006cd2:	89 c6                	mov    esi,eax
c0006cd4:	85 c0                	test   eax,eax
c0006cd6:	75 35                	jne    c0006d0d <f_getlabel+0x1e4>
c0006cd8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006cdc:	b8 43 00 00 00       	mov    eax,0x43
c0006ce1:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ce3:	80 f9 03             	cmp    cl,0x3
c0006ce6:	74 0f                	je     c0006cf7 <f_getlabel+0x1ce>
c0006ce8:	31 c0                	xor    eax,eax
c0006cea:	80 f9 04             	cmp    cl,0x4
c0006ced:	0f 94 c0             	sete   al
c0006cf0:	48                   	dec    eax
c0006cf1:	83 e0 c3             	and    eax,0xffffffc3
c0006cf4:	83 c0 64             	add    eax,0x64
c0006cf7:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cfb:	e8 5f ad ff ff       	call   c0001a5f <ld_dword>
c0006d00:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006d07:	89 07                	mov    DWORD PTR [edi],eax
c0006d09:	eb 02                	jmp    c0006d0d <f_getlabel+0x1e4>
c0006d0b:	89 c6                	mov    esi,eax
c0006d0d:	83 c4 6c             	add    esp,0x6c
c0006d10:	89 f0                	mov    eax,esi
c0006d12:	5b                   	pop    ebx
c0006d13:	5e                   	pop    esi
c0006d14:	5f                   	pop    edi
c0006d15:	5d                   	pop    ebp
c0006d16:	c3                   	ret    

c0006d17 <f_setlabel>:
c0006d17:	56                   	push   esi
c0006d18:	b9 02 00 00 00       	mov    ecx,0x2
c0006d1d:	53                   	push   ebx
c0006d1e:	83 ec 74             	sub    esp,0x74
c0006d21:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006d25:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d2c:	e8 b1 b7 ff ff       	call   c00024e2 <mount_volume>
c0006d31:	89 c6                	mov    esi,eax
c0006d33:	85 c0                	test   eax,eax
c0006d35:	0f 85 41 02 00 00    	jne    c0006f7c <f_setlabel+0x265>
c0006d3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d3f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d42:	0f 85 8e 00 00 00    	jne    c0006dd6 <f_setlabel+0xbf>
c0006d48:	b9 16 00 00 00       	mov    ecx,0x16
c0006d4d:	31 d2                	xor    edx,edx
c0006d4f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d53:	31 db                	xor    ebx,ebx
c0006d55:	e8 8c ad ff ff       	call   c0001ae6 <mem_set>
c0006d5a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d61:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d64:	0f 86 0a 01 00 00    	jbe    c0006e74 <f_setlabel+0x15d>
c0006d6a:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d71:	e8 b6 ad ff ff       	call   c0001b2c <tchar2uni>
c0006d76:	89 c6                	mov    esi,eax
c0006d78:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d7d:	76 2a                	jbe    c0006da9 <f_setlabel+0x92>
c0006d7f:	83 f8 ff             	cmp    eax,0xffffffff
c0006d82:	74 05                	je     c0006d89 <f_setlabel+0x72>
c0006d84:	83 fb 09             	cmp    ebx,0x9
c0006d87:	76 0a                	jbe    c0006d93 <f_setlabel+0x7c>
c0006d89:	be 06 00 00 00       	mov    esi,0x6
c0006d8e:	e9 e9 01 00 00       	jmp    c0006f7c <f_setlabel+0x265>
c0006d93:	89 c2                	mov    edx,eax
c0006d95:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d99:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d9c:	c1 ea 10             	shr    edx,0x10
c0006d9f:	01 c8                	add    eax,ecx
c0006da1:	43                   	inc    ebx
c0006da2:	e8 1d ad ff ff       	call   c0001ac4 <st_word>
c0006da7:	eb 04                	jmp    c0006dad <f_setlabel+0x96>
c0006da9:	85 c0                	test   eax,eax
c0006dab:	74 dc                	je     c0006d89 <f_setlabel+0x72>
c0006dad:	89 f2                	mov    edx,esi
c0006daf:	b8 37 5d 02 c0       	mov    eax,0xc0025d37
c0006db4:	e8 5b ad ff ff       	call   c0001b14 <chk_chr>
c0006db9:	85 c0                	test   eax,eax
c0006dbb:	75 cc                	jne    c0006d89 <f_setlabel+0x72>
c0006dbd:	83 fb 0a             	cmp    ebx,0xa
c0006dc0:	77 c7                	ja     c0006d89 <f_setlabel+0x72>
c0006dc2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006dc5:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006dc9:	0f b7 d6             	movzx  edx,si
c0006dcc:	01 c8                	add    eax,ecx
c0006dce:	43                   	inc    ebx
c0006dcf:	e8 f0 ac ff ff       	call   c0001ac4 <st_word>
c0006dd4:	eb 84                	jmp    c0006d5a <f_setlabel+0x43>
c0006dd6:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ddb:	ba 20 00 00 00       	mov    edx,0x20
c0006de0:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006de4:	31 db                	xor    ebx,ebx
c0006de6:	e8 fb ac ff ff       	call   c0001ae6 <mem_set>
c0006deb:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006df2:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006df5:	76 60                	jbe    c0006e57 <f_setlabel+0x140>
c0006df7:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dfe:	e8 29 ad ff ff       	call   c0001b2c <tchar2uni>
c0006e03:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e08:	0f 87 7b ff ff ff    	ja     c0006d89 <f_setlabel+0x72>
c0006e0e:	83 ec 0c             	sub    esp,0xc
c0006e11:	50                   	push   eax
c0006e12:	e8 97 15 00 00       	call   c00083ae <ff_wtoupper>
c0006e17:	5a                   	pop    edx
c0006e18:	59                   	pop    ecx
c0006e19:	68 b5 01 00 00       	push   0x1b5
c0006e1e:	50                   	push   eax
c0006e1f:	e8 8e 14 00 00       	call   c00082b2 <ff_uni2oem>
c0006e24:	83 c4 10             	add    esp,0x10
c0006e27:	89 c6                	mov    esi,eax
c0006e29:	66 85 c0             	test   ax,ax
c0006e2c:	0f 84 57 ff ff ff    	je     c0006d89 <f_setlabel+0x72>
c0006e32:	0f b7 d0             	movzx  edx,ax
c0006e35:	b8 30 5d 02 c0       	mov    eax,0xc0025d30
c0006e3a:	e8 d5 ac ff ff       	call   c0001b14 <chk_chr>
c0006e3f:	85 c0                	test   eax,eax
c0006e41:	0f 85 42 ff ff ff    	jne    c0006d89 <f_setlabel+0x72>
c0006e47:	66 81 fe ff 00       	cmp    si,0xff
c0006e4c:	0f 87 14 01 00 00    	ja     c0006f66 <f_setlabel+0x24f>
c0006e52:	e9 fa 00 00 00       	jmp    c0006f51 <f_setlabel+0x23a>
c0006e57:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e5c:	0f 84 27 ff ff ff    	je     c0006d89 <f_setlabel+0x72>
c0006e62:	85 db                	test   ebx,ebx
c0006e64:	74 0e                	je     c0006e74 <f_setlabel+0x15d>
c0006e66:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e69:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e6e:	75 04                	jne    c0006e74 <f_setlabel+0x15d>
c0006e70:	89 c3                	mov    ebx,eax
c0006e72:	eb ee                	jmp    c0006e62 <f_setlabel+0x14b>
c0006e74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e78:	31 d2                	xor    edx,edx
c0006e7a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e7e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e86:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e8a:	e8 1f c1 ff ff       	call   c0002fae <dir_sdi>
c0006e8f:	89 c6                	mov    esi,eax
c0006e91:	85 c0                	test   eax,eax
c0006e93:	0f 85 e3 00 00 00    	jne    c0006f7c <f_setlabel+0x265>
c0006e99:	ba 01 00 00 00       	mov    edx,0x1
c0006e9e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ea2:	e8 17 c9 ff ff       	call   c00037be <dir_read>
c0006ea7:	85 c0                	test   eax,eax
c0006ea9:	75 21                	jne    c0006ecc <f_setlabel+0x1b5>
c0006eab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006eaf:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb3:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006eb6:	74 5d                	je     c0006f15 <f_setlabel+0x1fe>
c0006eb8:	85 db                	test   ebx,ebx
c0006eba:	74 0b                	je     c0006ec7 <f_setlabel+0x1b0>
c0006ebc:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ec1:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ec5:	eb 70                	jmp    c0006f37 <f_setlabel+0x220>
c0006ec7:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006eca:	eb 70                	jmp    c0006f3c <f_setlabel+0x225>
c0006ecc:	83 f8 04             	cmp    eax,0x4
c0006ecf:	75 7c                	jne    c0006f4d <f_setlabel+0x236>
c0006ed1:	85 db                	test   ebx,ebx
c0006ed3:	0f 84 a3 00 00 00    	je     c0006f7c <f_setlabel+0x265>
c0006ed9:	ba 01 00 00 00       	mov    edx,0x1
c0006ede:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ee2:	e8 51 ca ff ff       	call   c0003938 <dir_alloc>
c0006ee7:	89 c6                	mov    esi,eax
c0006ee9:	85 c0                	test   eax,eax
c0006eeb:	0f 85 8b 00 00 00    	jne    c0006f7c <f_setlabel+0x265>
c0006ef1:	31 d2                	xor    edx,edx
c0006ef3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ef7:	b9 20 00 00 00       	mov    ecx,0x20
c0006efc:	e8 e5 ab ff ff       	call   c0001ae6 <mem_set>
c0006f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f05:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f08:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f0c:	75 18                	jne    c0006f26 <f_setlabel+0x20f>
c0006f0e:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006f11:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f15:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006f18:	b9 16 00 00 00       	mov    ecx,0x16
c0006f1d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f21:	83 c0 02             	add    eax,0x2
c0006f24:	eb 9b                	jmp    c0006ec1 <f_setlabel+0x1aa>
c0006f26:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006f2a:	b9 0b 00 00 00       	mov    ecx,0xb
c0006f2f:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006f33:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006f37:	e8 95 ab ff ff       	call   c0001ad1 <mem_cpy>
c0006f3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f48:	e8 0e d4 ff ff       	call   c000435b <sync_fs>
c0006f4d:	89 c6                	mov    esi,eax
c0006f4f:	eb 2b                	jmp    c0006f7c <f_setlabel+0x265>
c0006f51:	83 fb 0a             	cmp    ebx,0xa
c0006f54:	0f 87 2f fe ff ff    	ja     c0006d89 <f_setlabel+0x72>
c0006f5a:	89 f0                	mov    eax,esi
c0006f5c:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f60:	43                   	inc    ebx
c0006f61:	e9 85 fe ff ff       	jmp    c0006deb <f_setlabel+0xd4>
c0006f66:	83 fb 09             	cmp    ebx,0x9
c0006f69:	0f 87 1a fe ff ff    	ja     c0006d89 <f_setlabel+0x72>
c0006f6f:	89 f0                	mov    eax,esi
c0006f71:	66 c1 e8 08          	shr    ax,0x8
c0006f75:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f79:	43                   	inc    ebx
c0006f7a:	eb de                	jmp    c0006f5a <f_setlabel+0x243>
c0006f7c:	89 f0                	mov    eax,esi
c0006f7e:	83 c4 74             	add    esp,0x74
c0006f81:	5b                   	pop    ebx
c0006f82:	5e                   	pop    esi
c0006f83:	c3                   	ret    

c0006f84 <f_forward>:
c0006f84:	55                   	push   ebp
c0006f85:	57                   	push   edi
c0006f86:	56                   	push   esi
c0006f87:	53                   	push   ebx
c0006f88:	83 ec 2c             	sub    esp,0x2c
c0006f8b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f8f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f93:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f99:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f9d:	89 d8                	mov    eax,ebx
c0006f9f:	e8 b1 b1 ff ff       	call   c0002155 <validate>
c0006fa4:	89 c5                	mov    ebp,eax
c0006fa6:	85 c0                	test   eax,eax
c0006fa8:	0f 85 aa 01 00 00    	jne    c0007158 <f_forward+0x1d4>
c0006fae:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006fb2:	85 ed                	test   ebp,ebp
c0006fb4:	0f 85 9e 01 00 00    	jne    c0007158 <f_forward+0x1d4>
c0006fba:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006fbe:	0f 84 8f 01 00 00    	je     c0007153 <f_forward+0x1cf>
c0006fc4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006fc7:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006fca:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006fcd:	bf 00 00 00 00       	mov    edi,0x0
c0006fd2:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006fd5:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006fd9:	89 d1                	mov    ecx,edx
c0006fdb:	19 f9                	sbb    ecx,edi
c0006fdd:	0f 83 cf 00 00 00    	jae    c00070b2 <f_forward+0x12e>
c0006fe3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fe7:	e9 c6 00 00 00       	jmp    c00070b2 <f_forward+0x12e>
c0006fec:	50                   	push   eax
c0006fed:	50                   	push   eax
c0006fee:	6a 00                	push   0x0
c0006ff0:	6a 00                	push   0x0
c0006ff2:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006ff6:	83 c4 10             	add    esp,0x10
c0006ff9:	85 c0                	test   eax,eax
c0006ffb:	0f 84 57 01 00 00    	je     c0007158 <f_forward+0x1d4>
c0007001:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007004:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007008:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000700b:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000700f:	89 d7                	mov    edi,edx
c0007011:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007014:	89 c6                	mov    esi,eax
c0007016:	0f ac fe 09          	shrd   esi,edi,0x9
c000701a:	21 ce                	and    esi,ecx
c000701c:	89 c1                	mov    ecx,eax
c000701e:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007024:	0f 84 98 00 00 00    	je     c00070c2 <f_forward+0x13e>
c000702a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000702e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007031:	89 c8                	mov    eax,ecx
c0007033:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007037:	e8 af ac ff ff       	call   c0001ceb <clst2sect>
c000703c:	89 d7                	mov    edi,edx
c000703e:	09 c7                	or     edi,eax
c0007040:	0f 84 9e 00 00 00    	je     c00070e4 <f_forward+0x160>
c0007046:	31 ff                	xor    edi,edi
c0007048:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000704b:	01 c6                	add    esi,eax
c000704d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007051:	11 d7                	adc    edi,edx
c0007053:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007056:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007059:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000705d:	39 fa                	cmp    edx,edi
c000705f:	0f 85 a2 00 00 00    	jne    c0007107 <f_forward+0x183>
c0007065:	39 f0                	cmp    eax,esi
c0007067:	0f 85 9a 00 00 00    	jne    c0007107 <f_forward+0x183>
c000706d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007070:	ba 00 02 00 00       	mov    edx,0x200
c0007075:	25 ff 01 00 00       	and    eax,0x1ff
c000707a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000707e:	29 c2                	sub    edx,eax
c0007080:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007083:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007086:	39 d1                	cmp    ecx,edx
c0007088:	76 02                	jbe    c000708c <f_forward+0x108>
c000708a:	89 d1                	mov    ecx,edx
c000708c:	8d 73 50             	lea    esi,[ebx+0x50]
c000708f:	52                   	push   edx
c0007090:	01 c6                	add    esi,eax
c0007092:	52                   	push   edx
c0007093:	51                   	push   ecx
c0007094:	56                   	push   esi
c0007095:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007099:	83 c4 10             	add    esp,0x10
c000709c:	85 c0                	test   eax,eax
c000709e:	74 44                	je     c00070e4 <f_forward+0x160>
c00070a0:	31 ff                	xor    edi,edi
c00070a2:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00070a5:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00070a8:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00070ac:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00070b0:	01 07                	add    DWORD PTR [edi],eax
c00070b2:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00070b7:	0f 85 2f ff ff ff    	jne    c0006fec <f_forward+0x68>
c00070bd:	e9 96 00 00 00       	jmp    c0007158 <f_forward+0x1d4>
c00070c2:	85 f6                	test   esi,esi
c00070c4:	0f 85 60 ff ff ff    	jne    c000702a <f_forward+0xa6>
c00070ca:	89 d7                	mov    edi,edx
c00070cc:	09 c7                	or     edi,eax
c00070ce:	75 05                	jne    c00070d5 <f_forward+0x151>
c00070d0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00070d3:	eb 0a                	jmp    c00070df <f_forward+0x15b>
c00070d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00070d8:	89 d8                	mov    eax,ebx
c00070da:	e8 d9 bc ff ff       	call   c0002db8 <get_fat>
c00070df:	83 f8 01             	cmp    eax,0x1
c00070e2:	77 0b                	ja     c00070ef <f_forward+0x16b>
c00070e4:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070e8:	bd 02 00 00 00       	mov    ebp,0x2
c00070ed:	eb 69                	jmp    c0007158 <f_forward+0x1d4>
c00070ef:	83 f8 ff             	cmp    eax,0xffffffff
c00070f2:	75 0b                	jne    c00070ff <f_forward+0x17b>
c00070f4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070f8:	bd 01 00 00 00       	mov    ebp,0x1
c00070fd:	eb 59                	jmp    c0007158 <f_forward+0x1d4>
c00070ff:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007102:	e9 23 ff ff ff       	jmp    c000702a <f_forward+0xa6>
c0007107:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000710b:	79 20                	jns    c000712d <f_forward+0x1a9>
c000710d:	83 ec 0c             	sub    esp,0xc
c0007110:	6a 01                	push   0x1
c0007112:	52                   	push   edx
c0007113:	50                   	push   eax
c0007114:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007118:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000711c:	50                   	push   eax
c000711d:	e8 fb a8 ff ff       	call   c0001a1d <disk_write>
c0007122:	83 c4 20             	add    esp,0x20
c0007125:	85 c0                	test   eax,eax
c0007127:	75 cb                	jne    c00070f4 <f_forward+0x170>
c0007129:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000712d:	83 ec 0c             	sub    esp,0xc
c0007130:	6a 01                	push   0x1
c0007132:	57                   	push   edi
c0007133:	56                   	push   esi
c0007134:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007138:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000713c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007140:	50                   	push   eax
c0007141:	e8 c1 a8 ff ff       	call   c0001a07 <disk_read>
c0007146:	83 c4 20             	add    esp,0x20
c0007149:	85 c0                	test   eax,eax
c000714b:	0f 84 1c ff ff ff    	je     c000706d <f_forward+0xe9>
c0007151:	eb a1                	jmp    c00070f4 <f_forward+0x170>
c0007153:	bd 07 00 00 00       	mov    ebp,0x7
c0007158:	83 c4 2c             	add    esp,0x2c
c000715b:	89 e8                	mov    eax,ebp
c000715d:	5b                   	pop    ebx
c000715e:	5e                   	pop    esi
c000715f:	5f                   	pop    edi
c0007160:	5d                   	pop    ebp
c0007161:	c3                   	ret    

c0007162 <f_mkfs>:
c0007162:	55                   	push   ebp
c0007163:	57                   	push   edi
c0007164:	56                   	push   esi
c0007165:	53                   	push   ebx
c0007166:	bb 0b 00 00 00       	mov    ebx,0xb
c000716b:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007171:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007178:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000717f:	e8 b0 ae ff ff       	call   c0002034 <get_ldnumber>
c0007184:	85 c0                	test   eax,eax
c0007186:	0f 88 ec 10 00 00    	js     c0008278 <f_mkfs+0x1116>
c000718c:	8b 14 85 a0 a3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5c60]
c0007193:	85 d2                	test   edx,edx
c0007195:	74 03                	je     c000719a <f_mkfs+0x38>
c0007197:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000719a:	85 f6                	test   esi,esi
c000719c:	75 05                	jne    c00071a3 <f_mkfs+0x41>
c000719e:	be 20 5d 02 c0       	mov    esi,0xc0025d20
c00071a3:	83 ec 0c             	sub    esp,0xc
c00071a6:	0f b6 c0             	movzx  eax,al
c00071a9:	bb 03 00 00 00       	mov    ebx,0x3
c00071ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00071b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071b6:	e8 49 a8 ff ff       	call   c0001a04 <disk_initialize>
c00071bb:	83 c4 10             	add    esp,0x10
c00071be:	a8 01                	test   al,0x1
c00071c0:	0f 85 b2 10 00 00    	jne    c0008278 <f_mkfs+0x1116>
c00071c6:	bb 0a 00 00 00       	mov    ebx,0xa
c00071cb:	a8 04                	test   al,0x4
c00071cd:	0f 85 a5 10 00 00    	jne    c0008278 <f_mkfs+0x1116>
c00071d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00071d6:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00071da:	85 c0                	test   eax,eax
c00071dc:	75 20                	jne    c00071fe <f_mkfs+0x9c>
c00071de:	51                   	push   ecx
c00071df:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071e3:	50                   	push   eax
c00071e4:	6a 03                	push   0x3
c00071e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071ea:	e8 44 a8 ff ff       	call   c0001a33 <disk_ioctl>
c00071ef:	83 c4 10             	add    esp,0x10
c00071f2:	85 c0                	test   eax,eax
c00071f4:	74 08                	je     c00071fe <f_mkfs+0x9c>
c00071f6:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071fe:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007202:	8d 42 ff             	lea    eax,[edx-0x1]
c0007205:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000720a:	77 04                	ja     c0007210 <f_mkfs+0xae>
c000720c:	85 c2                	test   edx,eax
c000720e:	74 08                	je     c0007218 <f_mkfs+0xb6>
c0007210:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007218:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000721b:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000721f:	48                   	dec    eax
c0007220:	3c 01                	cmp    al,0x1
c0007222:	76 05                	jbe    c0007229 <f_mkfs+0xc7>
c0007224:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007229:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000722c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007230:	48                   	dec    eax
c0007231:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007236:	77 07                	ja     c000723f <f_mkfs+0xdd>
c0007238:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000723d:	74 08                	je     c0007247 <f_mkfs+0xe5>
c000723f:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007247:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000724a:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007250:	77 07                	ja     c0007259 <f_mkfs+0xf7>
c0007252:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007255:	85 d8                	test   eax,ebx
c0007257:	74 02                	je     c000725b <f_mkfs+0xf9>
c0007259:	31 db                	xor    ebx,ebx
c000725b:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007266:	77 0a                	ja     c0007272 <f_mkfs+0x110>
c0007268:	bb 11 00 00 00       	mov    ebx,0x11
c000726d:	e9 06 10 00 00       	jmp    c0008278 <f_mkfs+0x1116>
c0007272:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007279:	8b 36                	mov    esi,DWORD PTR [esi]
c000727b:	85 ed                	test   ebp,ebp
c000727d:	75 1e                	jne    c000729d <f_mkfs+0x13b>
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007289:	25 00 fe ff ff       	and    eax,0xfffffe00
c000728e:	50                   	push   eax
c000728f:	e8 f1 0f 00 00       	call   c0008285 <ff_memalloc>
c0007294:	83 c4 10             	add    esp,0x10
c0007297:	89 c5                	mov    ebp,eax
c0007299:	85 c0                	test   eax,eax
c000729b:	74 cb                	je     c0007268 <f_mkfs+0x106>
c000729d:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00072a5:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00072ad:	52                   	push   edx
c00072ae:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00072b2:	50                   	push   eax
c00072b3:	6a 01                	push   0x1
c00072b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072b9:	e8 75 a7 ff ff       	call   c0001a33 <disk_ioctl>
c00072be:	83 c4 10             	add    esp,0x10
c00072c1:	85 c0                	test   eax,eax
c00072c3:	0f 85 4a 0f 00 00    	jne    c0008213 <f_mkfs+0x10b1>
c00072c9:	89 f1                	mov    ecx,esi
c00072cb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00072d3:	83 e1 0f             	and    ecx,0xf
c00072d6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072de:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072e2:	83 e6 08             	and    esi,0x8
c00072e5:	75 56                	jne    c000733d <f_mkfs+0x1db>
c00072e7:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072eb:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072ef:	83 ff 00             	cmp    edi,0x0
c00072f2:	76 20                	jbe    c0007314 <f_mkfs+0x1b2>
c00072f4:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072f9:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007301:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007307:	83 d7 ff             	adc    edi,0xffffffff
c000730a:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000730e:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007312:	eb 21                	jmp    c0007335 <f_mkfs+0x1d3>
c0007314:	ba 3f 00 00 00       	mov    edx,0x3f
c0007319:	39 f2                	cmp    edx,esi
c000731b:	19 f8                	sbb    eax,edi
c000731d:	73 1e                	jae    c000733d <f_mkfs+0x1db>
c000731f:	83 c6 c1             	add    esi,0xffffffc1
c0007322:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000732a:	83 d7 ff             	adc    edi,0xffffffff
c000732d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007331:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007335:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000733d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007341:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007345:	89 04 24             	mov    DWORD PTR [esp],eax
c0007348:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000734c:	31 c0                	xor    eax,eax
c000734e:	ba 7f 00 00 00       	mov    edx,0x7f
c0007353:	89 c7                	mov    edi,eax
c0007355:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007358:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000735c:	0f 83 c5 0a 00 00    	jae    c0007e27 <f_mkfs+0xcc5>
c0007362:	89 df                	mov    edi,ebx
c0007364:	c1 ef 09             	shr    edi,0x9
c0007367:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000736b:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007372:	c1 ef 09             	shr    edi,0x9
c0007375:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000737a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000737e:	74 29                	je     c00073a9 <f_mkfs+0x247>
c0007380:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007386:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000738b:	0f 97 c2             	seta   dl
c000738e:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007391:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007395:	0f 92 c0             	setb   al
c0007398:	08 c2                	or     dl,al
c000739a:	75 5b                	jne    c00073f7 <f_mkfs+0x295>
c000739c:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073a0:	83 e0 07             	and    eax,0x7
c00073a3:	3c 04                	cmp    al,0x4
c00073a5:	74 50                	je     c00073f7 <f_mkfs+0x295>
c00073a7:	eb 1b                	jmp    c00073c4 <f_mkfs+0x262>
c00073a9:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00073ae:	0f 87 73 0a 00 00    	ja     c0007e27 <f_mkfs+0xcc5>
c00073b4:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00073ba:	76 08                	jbe    c00073c4 <f_mkfs+0x262>
c00073bc:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00073c4:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00073c8:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00073cc:	83 e0 01             	and    eax,0x1
c00073cf:	80 e1 02             	and    cl,0x2
c00073d2:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00073d6:	74 0d                	je     c00073e5 <f_mkfs+0x283>
c00073d8:	84 c0                	test   al,al
c00073da:	0f 84 53 09 00 00    	je     c0007d33 <f_mkfs+0xbd1>
c00073e0:	e9 12 08 00 00       	jmp    c0007bf7 <f_mkfs+0xa95>
c00073e5:	bb 13 00 00 00       	mov    ebx,0x13
c00073ea:	84 c0                	test   al,al
c00073ec:	0f 85 05 08 00 00    	jne    c0007bf7 <f_mkfs+0xa95>
c00073f2:	e9 39 0e 00 00       	jmp    c0008230 <f_mkfs+0x10ce>
c00073f7:	31 c0                	xor    eax,eax
c00073f9:	ba ff 0f 00 00       	mov    edx,0xfff
c00073fe:	89 c7                	mov    edi,eax
c0007400:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007403:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007407:	0f 83 1a 0a 00 00    	jae    c0007e27 <f_mkfs+0xcc5>
c000740d:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007413:	77 39                	ja     c000744e <f_mkfs+0x2ec>
c0007415:	ba ff ff 07 00       	mov    edx,0x7ffff
c000741a:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007422:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007425:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007429:	73 08                	jae    c0007433 <f_mkfs+0x2d1>
c000742b:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007433:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007438:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000743b:	b8 00 00 00 00       	mov    eax,0x0
c0007440:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007444:	73 08                	jae    c000744e <f_mkfs+0x2ec>
c0007446:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000744e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007452:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007456:	83 c0 20             	add    eax,0x20
c0007459:	83 d2 00             	adc    edx,0x0
c000745c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007460:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007464:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007468:	31 d2                	xor    edx,edx
c000746a:	31 ff                	xor    edi,edi
c000746c:	52                   	push   edx
c000746d:	89 fb                	mov    ebx,edi
c000746f:	50                   	push   eax
c0007470:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007474:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007478:	e8 df be 01 00       	call   c002335c <__udivdi3>
c000747d:	83 c4 10             	add    esp,0x10
c0007480:	c1 e0 02             	shl    eax,0x2
c0007483:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007487:	05 07 02 00 00       	add    eax,0x207
c000748c:	89 f1                	mov    ecx,esi
c000748e:	c1 e8 09             	shr    eax,0x9
c0007491:	83 c1 ff             	add    ecx,0xffffffff
c0007494:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007498:	83 d3 ff             	adc    ebx,0xffffffff
c000749b:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000749f:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00074a3:	31 d2                	xor    edx,edx
c00074a5:	01 c8                	add    eax,ecx
c00074a7:	11 da                	adc    edx,ebx
c00074a9:	89 c1                	mov    ecx,eax
c00074ab:	f7 de                	neg    esi
c00074ad:	89 d0                	mov    eax,edx
c00074af:	83 d7 00             	adc    edi,0x0
c00074b2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00074b6:	f7 df                	neg    edi
c00074b8:	21 f1                	and    ecx,esi
c00074ba:	21 f8                	and    eax,edi
c00074bc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00074c0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00074c4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00074c8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00074cc:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00074d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074d3:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00074d7:	0f ac d0 01          	shrd   eax,edx,0x1
c00074db:	89 df                	mov    edi,ebx
c00074dd:	d1 ea                	shr    edx,1
c00074df:	39 c1                	cmp    ecx,eax
c00074e1:	19 d7                	sbb    edi,edx
c00074e3:	0f 83 3e 09 00 00    	jae    c0007e27 <f_mkfs+0xcc5>
c00074e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074ed:	31 d2                	xor    edx,edx
c00074ef:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074f7:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074fb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074fe:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007502:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007506:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c000750a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000750e:	83 f8 0f             	cmp    eax,0xf
c0007511:	0f 86 10 09 00 00    	jbe    c0007e27 <f_mkfs+0xcc5>
c0007517:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000751f:	0f 87 02 09 00 00    	ja     c0007e27 <f_mkfs+0xcc5>
c0007525:	31 d2                	xor    edx,edx
c0007527:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000752b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007533:	83 c0 07             	add    eax,0x7
c0007536:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000753e:	c1 e8 03             	shr    eax,0x3
c0007541:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007548:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000754c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007550:	c1 e0 09             	shl    eax,0x9
c0007553:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007557:	48                   	dec    eax
c0007558:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000755c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007560:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007564:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007568:	31 d2                	xor    edx,edx
c000756a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000756e:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007575:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007579:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000757e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007582:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007586:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000758a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000758e:	31 ff                	xor    edi,edi
c0007590:	31 f6                	xor    esi,esi
c0007592:	31 db                	xor    ebx,ebx
c0007594:	85 ff                	test   edi,edi
c0007596:	74 05                	je     c000759d <f_mkfs+0x43b>
c0007598:	4f                   	dec    edi
c0007599:	74 44                	je     c00075df <f_mkfs+0x47d>
c000759b:	eb 4f                	jmp    c00075ec <f_mkfs+0x48a>
c000759d:	83 ec 0c             	sub    esp,0xc
c00075a0:	0f b7 c3             	movzx  eax,bx
c00075a3:	50                   	push   eax
c00075a4:	e8 05 0e 00 00       	call   c00083ae <ff_wtoupper>
c00075a9:	83 c4 10             	add    esp,0x10
c00075ac:	89 c1                	mov    ecx,eax
c00075ae:	8d 53 01             	lea    edx,[ebx+0x1]
c00075b1:	66 39 c3             	cmp    bx,ax
c00075b4:	75 3e                	jne    c00075f4 <f_mkfs+0x492>
c00075b6:	be 01 00 00 00       	mov    esi,0x1
c00075bb:	89 df                	mov    edi,ebx
c00075bd:	66 01 f7             	add    di,si
c00075c0:	75 07                	jne    c00075c9 <f_mkfs+0x467>
c00075c2:	83 fe 7f             	cmp    esi,0x7f
c00075c5:	77 31                	ja     c00075f8 <f_mkfs+0x496>
c00075c7:	eb 16                	jmp    c00075df <f_mkfs+0x47d>
c00075c9:	83 ec 0c             	sub    esp,0xc
c00075cc:	0f b7 ff             	movzx  edi,di
c00075cf:	57                   	push   edi
c00075d0:	e8 d9 0d 00 00       	call   c00083ae <ff_wtoupper>
c00075d5:	83 c4 10             	add    esp,0x10
c00075d8:	39 c7                	cmp    edi,eax
c00075da:	75 e6                	jne    c00075c2 <f_mkfs+0x460>
c00075dc:	46                   	inc    esi
c00075dd:	eb dc                	jmp    c00075bb <f_mkfs+0x459>
c00075df:	31 c0                	xor    eax,eax
c00075e1:	89 d9                	mov    ecx,ebx
c00075e3:	4e                   	dec    esi
c00075e4:	0f 95 c0             	setne  al
c00075e7:	43                   	inc    ebx
c00075e8:	89 c7                	mov    edi,eax
c00075ea:	eb 14                	jmp    c0007600 <f_mkfs+0x49e>
c00075ec:	89 f1                	mov    ecx,esi
c00075ee:	01 f3                	add    ebx,esi
c00075f0:	31 ff                	xor    edi,edi
c00075f2:	eb 0c                	jmp    c0007600 <f_mkfs+0x49e>
c00075f4:	89 d3                	mov    ebx,edx
c00075f6:	eb 08                	jmp    c0007600 <f_mkfs+0x49e>
c00075f8:	bf 02 00 00 00       	mov    edi,0x2
c00075fd:	83 c9 ff             	or     ecx,0xffffffff
c0007600:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007604:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007607:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000760b:	0f b6 c1             	movzx  eax,cl
c000760e:	e8 3a a9 ff ff       	call   c0001f4d <xsum32>
c0007613:	66 c1 e9 08          	shr    cx,0x8
c0007617:	89 c2                	mov    edx,eax
c0007619:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000761c:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007620:	0f b7 c1             	movzx  eax,cx
c0007623:	e8 25 a9 ff ff       	call   c0001f4d <xsum32>
c0007628:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000762d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007631:	66 85 db             	test   bx,bx
c0007634:	74 1f                	je     c0007655 <f_mkfs+0x4f3>
c0007636:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007639:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007640:	83 c0 02             	add    eax,0x2
c0007643:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007649:	39 c2                	cmp    edx,eax
c000764b:	74 08                	je     c0007655 <f_mkfs+0x4f3>
c000764d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007650:	e9 3f ff ff ff       	jmp    c0007594 <f_mkfs+0x432>
c0007655:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007658:	83 ec 0c             	sub    esp,0xc
c000765b:	05 01 02 00 00       	add    eax,0x201
c0007660:	c1 e8 09             	shr    eax,0x9
c0007663:	50                   	push   eax
c0007664:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007668:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000766c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007670:	55                   	push   ebp
c0007671:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007675:	e8 a3 a3 ff ff       	call   c0001a1d <disk_write>
c000767a:	83 c4 20             	add    esp,0x20
c000767d:	85 c0                	test   eax,eax
c000767f:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007682:	0f 85 8b 0b 00 00    	jne    c0008213 <f_mkfs+0x10b1>
c0007688:	89 d0                	mov    eax,edx
c000768a:	31 d2                	xor    edx,edx
c000768c:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007690:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007694:	66 85 db             	test   bx,bx
c0007697:	74 04                	je     c000769d <f_mkfs+0x53b>
c0007699:	31 c0                	xor    eax,eax
c000769b:	eb b0                	jmp    c000764d <f_mkfs+0x4eb>
c000769d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00076a1:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00076a5:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00076a9:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00076af:	31 d2                	xor    edx,edx
c00076b1:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00076bc:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00076c0:	c1 eb 09             	shr    ebx,0x9
c00076c3:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00076ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00076ce:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00076d2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00076d6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00076da:	8d 70 01             	lea    esi,[eax+0x1]
c00076dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076e5:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076ec:	31 d2                	xor    edx,edx
c00076ee:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00076f6:	89 c1                	mov    ecx,eax
c00076f8:	89 e8                	mov    eax,ebp
c00076fa:	e8 e7 a3 ff ff       	call   c0001ae6 <mem_set>
c00076ff:	31 c0                	xor    eax,eax
c0007701:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007704:	76 10                	jbe    c0007716 <f_mkfs+0x5b4>
c0007706:	83 fe 07             	cmp    esi,0x7
c0007709:	76 0b                	jbe    c0007716 <f_mkfs+0x5b4>
c000770b:	40                   	inc    eax
c000770c:	83 ee 08             	sub    esi,0x8
c000770f:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007714:	eb eb                	jmp    c0007701 <f_mkfs+0x59f>
c0007716:	b2 01                	mov    dl,0x1
c0007718:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000771c:	85 f6                	test   esi,esi
c000771e:	74 0c                	je     c000772c <f_mkfs+0x5ca>
c0007720:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007723:	76 07                	jbe    c000772c <f_mkfs+0x5ca>
c0007725:	08 11                	or     BYTE PTR [ecx],dl
c0007727:	4e                   	dec    esi
c0007728:	d1 e2                	shl    edx,1
c000772a:	eb f0                	jmp    c000771c <f_mkfs+0x5ba>
c000772c:	89 df                	mov    edi,ebx
c000772e:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007732:	76 04                	jbe    c0007738 <f_mkfs+0x5d6>
c0007734:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007738:	83 ec 0c             	sub    esp,0xc
c000773b:	57                   	push   edi
c000773c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007740:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007744:	55                   	push   ebp
c0007745:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007749:	e8 cf a2 ff ff       	call   c0001a1d <disk_write>
c000774e:	83 c4 20             	add    esp,0x20
c0007751:	85 c0                	test   eax,eax
c0007753:	0f 85 ba 0a 00 00    	jne    c0008213 <f_mkfs+0x10b1>
c0007759:	31 d2                	xor    edx,edx
c000775b:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000775f:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007763:	29 fb                	sub    ebx,edi
c0007765:	0f 85 7a ff ff ff    	jne    c00076e5 <f_mkfs+0x583>
c000776b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000776f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007777:	31 f6                	xor    esi,esi
c0007779:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000777d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007780:	31 d2                	xor    edx,edx
c0007782:	89 e8                	mov    eax,ebp
c0007784:	e8 5d a3 ff ff       	call   c0001ae6 <mem_set>
c0007789:	31 c9                	xor    ecx,ecx
c000778b:	85 db                	test   ebx,ebx
c000778d:	75 40                	jne    c00077cf <f_mkfs+0x66d>
c000778f:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007794:	89 e8                	mov    eax,ebp
c0007796:	bb 02 00 00 00       	mov    ebx,0x2
c000779b:	e8 28 a3 ff ff       	call   c0001ac8 <st_dword>
c00077a0:	8d 45 04             	lea    eax,[ebp+0x4]
c00077a3:	83 ca ff             	or     edx,0xffffffff
c00077a6:	e8 1d a3 ff ff       	call   c0001ac8 <st_dword>
c00077ab:	b9 08 00 00 00       	mov    ecx,0x8
c00077b0:	eb 1d                	jmp    c00077cf <f_mkfs+0x66d>
c00077b2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077b5:	76 3b                	jbe    c00077f2 <f_mkfs+0x690>
c00077b7:	43                   	inc    ebx
c00077b8:	83 fe 01             	cmp    esi,0x1
c00077bb:	89 da                	mov    edx,ebx
c00077bd:	77 03                	ja     c00077c2 <f_mkfs+0x660>
c00077bf:	83 ca ff             	or     edx,0xffffffff
c00077c2:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00077c6:	4e                   	dec    esi
c00077c7:	e8 fc a2 ff ff       	call   c0001ac8 <st_dword>
c00077cc:	83 c1 04             	add    ecx,0x4
c00077cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00077d3:	85 f6                	test   esi,esi
c00077d5:	75 db                	jne    c00077b2 <f_mkfs+0x650>
c00077d7:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00077dc:	77 14                	ja     c00077f2 <f_mkfs+0x690>
c00077de:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077e2:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077e9:	85 f6                	test   esi,esi
c00077eb:	74 05                	je     c00077f2 <f_mkfs+0x690>
c00077ed:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077f0:	77 dd                	ja     c00077cf <f_mkfs+0x66d>
c00077f2:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077f6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077fa:	39 cf                	cmp    edi,ecx
c00077fc:	76 02                	jbe    c0007800 <f_mkfs+0x69e>
c00077fe:	89 cf                	mov    edi,ecx
c0007800:	83 ec 0c             	sub    esp,0xc
c0007803:	57                   	push   edi
c0007804:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007808:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000780c:	55                   	push   ebp
c000780d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007811:	e8 07 a2 ff ff       	call   c0001a1d <disk_write>
c0007816:	83 c4 20             	add    esp,0x20
c0007819:	85 c0                	test   eax,eax
c000781b:	0f 85 f2 09 00 00    	jne    c0008213 <f_mkfs+0x10b1>
c0007821:	31 d2                	xor    edx,edx
c0007823:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007827:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c000782b:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c000782f:	0f 85 48 ff ff ff    	jne    c000777d <f_mkfs+0x61b>
c0007835:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007838:	31 d2                	xor    edx,edx
c000783a:	89 e8                	mov    eax,ebp
c000783c:	31 ff                	xor    edi,edi
c000783e:	e8 a3 a2 ff ff       	call   c0001ae6 <mem_set>
c0007843:	8d 45 34             	lea    eax,[ebp+0x34]
c0007846:	ba 02 00 00 00       	mov    edx,0x2
c000784b:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000784f:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007853:	e8 70 a2 ff ff       	call   c0001ac8 <st_dword>
c0007858:	8d 45 38             	lea    eax,[ebp+0x38]
c000785b:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000785f:	e8 64 a2 ff ff       	call   c0001ac8 <st_dword>
c0007864:	8d 45 44             	lea    eax,[ebp+0x44]
c0007867:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000786b:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000786f:	e8 54 a2 ff ff       	call   c0001ac8 <st_dword>
c0007874:	8d 45 54             	lea    eax,[ebp+0x54]
c0007877:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000787b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000787f:	83 c2 02             	add    edx,0x2
c0007882:	e8 41 a2 ff ff       	call   c0001ac8 <st_dword>
c0007887:	8d 45 58             	lea    eax,[ebp+0x58]
c000788a:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000788e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007892:	e8 31 a2 ff ff       	call   c0001ac8 <st_dword>
c0007897:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000789b:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00078a0:	89 c6                	mov    esi,eax
c00078a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078a6:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00078b1:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00078b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00078b8:	39 cb                	cmp    ebx,ecx
c00078ba:	76 02                	jbe    c00078be <f_mkfs+0x75c>
c00078bc:	89 cb                	mov    ebx,ecx
c00078be:	83 ec 0c             	sub    esp,0xc
c00078c1:	53                   	push   ebx
c00078c2:	57                   	push   edi
c00078c3:	56                   	push   esi
c00078c4:	55                   	push   ebp
c00078c5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078c9:	e8 4f a1 ff ff       	call   c0001a1d <disk_write>
c00078ce:	83 c4 20             	add    esp,0x20
c00078d1:	85 c0                	test   eax,eax
c00078d3:	0f 85 3a 09 00 00    	jne    c0008213 <f_mkfs+0x10b1>
c00078d9:	31 d2                	xor    edx,edx
c00078db:	b9 00 02 00 00       	mov    ecx,0x200
c00078e0:	89 e8                	mov    eax,ebp
c00078e2:	e8 ff a1 ff ff       	call   c0001ae6 <mem_set>
c00078e7:	31 d2                	xor    edx,edx
c00078e9:	01 de                	add    esi,ebx
c00078eb:	11 d7                	adc    edi,edx
c00078ed:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078f0:	75 bf                	jne    c00078b1 <f_mkfs+0x74f>
c00078f2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078f6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078fa:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007902:	b9 00 02 00 00       	mov    ecx,0x200
c0007907:	31 d2                	xor    edx,edx
c0007909:	89 e8                	mov    eax,ebp
c000790b:	e8 d6 a1 ff ff       	call   c0001ae6 <mem_set>
c0007910:	b9 0b 00 00 00       	mov    ecx,0xb
c0007915:	ba 00 5e 02 c0       	mov    edx,0xc0025e00
c000791a:	89 e8                	mov    eax,ebp
c000791c:	e8 b0 a1 ff ff       	call   c0001ad1 <mem_cpy>
c0007921:	8d 45 40             	lea    eax,[ebp+0x40]
c0007924:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007928:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000792c:	e8 9a a1 ff ff       	call   c0001acb <st_qword>
c0007931:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007935:	8d 45 48             	lea    eax,[ebp+0x48]
c0007938:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000793c:	e8 8a a1 ff ff       	call   c0001acb <st_qword>
c0007941:	8d 45 50             	lea    eax,[ebp+0x50]
c0007944:	ba 20 00 00 00       	mov    edx,0x20
c0007949:	e8 7a a1 ff ff       	call   c0001ac8 <st_dword>
c000794e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007952:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007956:	e8 6d a1 ff ff       	call   c0001ac8 <st_dword>
c000795b:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000795f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007963:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007967:	e8 5c a1 ff ff       	call   c0001ac8 <st_dword>
c000796c:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000796f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007973:	e8 50 a1 ff ff       	call   c0001ac8 <st_dword>
c0007978:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000797c:	8d 50 02             	lea    edx,[eax+0x2]
c000797f:	8d 45 60             	lea    eax,[ebp+0x60]
c0007982:	e8 41 a1 ff ff       	call   c0001ac8 <st_dword>
c0007987:	8d 45 64             	lea    eax,[ebp+0x64]
c000798a:	ba 00 00 21 50       	mov    edx,0x50210000
c000798f:	e8 34 a1 ff ff       	call   c0001ac8 <st_dword>
c0007994:	8d 45 68             	lea    eax,[ebp+0x68]
c0007997:	ba 00 01 00 00       	mov    edx,0x100
c000799c:	e8 23 a1 ff ff       	call   c0001ac4 <st_word>
c00079a1:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00079a5:	b8 0a 00 00 00       	mov    eax,0xa
c00079aa:	48                   	dec    eax
c00079ab:	74 05                	je     c00079b2 <f_mkfs+0x850>
c00079ad:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00079b0:	eb f8                	jmp    c00079aa <f_mkfs+0x848>
c00079b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b6:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00079ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079be:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00079c2:	74 05                	je     c00079c9 <f_mkfs+0x867>
c00079c4:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00079c7:	eb f5                	jmp    c00079be <f_mkfs+0x85c>
c00079c9:	8d 45 78             	lea    eax,[ebp+0x78]
c00079cc:	ba eb fe 00 00       	mov    edx,0xfeeb
c00079d1:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00079d7:	31 db                	xor    ebx,ebx
c00079d9:	e8 e6 a0 ff ff       	call   c0001ac4 <st_word>
c00079de:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079e4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00079ec:	e8 d3 a0 ff ff       	call   c0001ac4 <st_word>
c00079f1:	31 c9                	xor    ecx,ecx
c00079f3:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079f6:	83 f8 01             	cmp    eax,0x1
c00079f9:	76 13                	jbe    c0007a0e <f_mkfs+0x8ac>
c00079fb:	83 f9 70             	cmp    ecx,0x70
c00079fe:	74 0e                	je     c0007a0e <f_mkfs+0x8ac>
c0007a00:	89 da                	mov    edx,ebx
c0007a02:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007a07:	e8 41 a5 ff ff       	call   c0001f4d <xsum32>
c0007a0c:	89 c3                	mov    ebx,eax
c0007a0e:	41                   	inc    ecx
c0007a0f:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a15:	75 dc                	jne    c00079f3 <f_mkfs+0x891>
c0007a17:	89 f0                	mov    eax,esi
c0007a19:	89 fa                	mov    edx,edi
c0007a1b:	83 c0 01             	add    eax,0x1
c0007a1e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a22:	83 d2 00             	adc    edx,0x0
c0007a25:	83 ec 0c             	sub    esp,0xc
c0007a28:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007a2c:	6a 01                	push   0x1
c0007a2e:	57                   	push   edi
c0007a2f:	56                   	push   esi
c0007a30:	55                   	push   ebp
c0007a31:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a35:	e8 e3 9f ff ff       	call   c0001a1d <disk_write>
c0007a3a:	83 c4 20             	add    esp,0x20
c0007a3d:	85 c0                	test   eax,eax
c0007a3f:	0f 85 ce 07 00 00    	jne    c0008213 <f_mkfs+0x10b1>
c0007a45:	31 d2                	xor    edx,edx
c0007a47:	b9 00 02 00 00       	mov    ecx,0x200
c0007a4c:	89 e8                	mov    eax,ebp
c0007a4e:	e8 93 a0 ff ff       	call   c0001ae6 <mem_set>
c0007a53:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a5b:	e8 64 a0 ff ff       	call   c0001ac4 <st_word>
c0007a60:	89 f0                	mov    eax,esi
c0007a62:	89 fa                	mov    edx,edi
c0007a64:	83 c0 09             	add    eax,0x9
c0007a67:	83 d2 00             	adc    edx,0x0
c0007a6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a6d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a71:	31 c9                	xor    ecx,ecx
c0007a73:	41                   	inc    ecx
c0007a74:	89 da                	mov    edx,ebx
c0007a76:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a7b:	e8 cd a4 ff ff       	call   c0001f4d <xsum32>
c0007a80:	89 c3                	mov    ebx,eax
c0007a82:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a88:	75 e9                	jne    c0007a73 <f_mkfs+0x911>
c0007a8a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a92:	83 c0 01             	add    eax,0x1
c0007a95:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a99:	83 d2 00             	adc    edx,0x0
c0007a9c:	83 ec 0c             	sub    esp,0xc
c0007a9f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007aa3:	6a 01                	push   0x1
c0007aa5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007aa9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007aad:	55                   	push   ebp
c0007aae:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ab2:	e8 66 9f ff ff       	call   c0001a1d <disk_write>
c0007ab7:	83 c4 20             	add    esp,0x20
c0007aba:	85 c0                	test   eax,eax
c0007abc:	0f 85 51 07 00 00    	jne    c0008213 <f_mkfs+0x10b1>
c0007ac2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ac6:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007aca:	75 09                	jne    c0007ad5 <f_mkfs+0x973>
c0007acc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007acf:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ad3:	74 12                	je     c0007ae7 <f_mkfs+0x985>
c0007ad5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ad9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007add:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007ae1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ae5:	eb 8a                	jmp    c0007a71 <f_mkfs+0x90f>
c0007ae7:	31 d2                	xor    edx,edx
c0007ae9:	b9 00 02 00 00       	mov    ecx,0x200
c0007aee:	89 e8                	mov    eax,ebp
c0007af0:	e8 f1 9f ff ff       	call   c0001ae6 <mem_set>
c0007af5:	83 c6 0b             	add    esi,0xb
c0007af8:	83 d7 00             	adc    edi,0x0
c0007afb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007aff:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007b03:	31 c9                	xor    ecx,ecx
c0007b05:	41                   	inc    ecx
c0007b06:	89 da                	mov    edx,ebx
c0007b08:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007b0d:	e8 3b a4 ff ff       	call   c0001f4d <xsum32>
c0007b12:	89 c3                	mov    ebx,eax
c0007b14:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007b1a:	75 e9                	jne    c0007b05 <f_mkfs+0x9a3>
c0007b1c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b1f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b23:	83 c6 01             	add    esi,0x1
c0007b26:	83 d7 00             	adc    edi,0x0
c0007b29:	83 ec 0c             	sub    esp,0xc
c0007b2c:	6a 01                	push   0x1
c0007b2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b32:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007b36:	55                   	push   ebp
c0007b37:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b3b:	e8 dd 9e ff ff       	call   c0001a1d <disk_write>
c0007b40:	83 c4 20             	add    esp,0x20
c0007b43:	85 c0                	test   eax,eax
c0007b45:	0f 85 c8 06 00 00    	jne    c0008213 <f_mkfs+0x10b1>
c0007b4b:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b4f:	75 06                	jne    c0007b57 <f_mkfs+0x9f5>
c0007b51:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b55:	74 09                	je     c0007b60 <f_mkfs+0x9fe>
c0007b57:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b5a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b5e:	eb a3                	jmp    c0007b03 <f_mkfs+0x9a1>
c0007b60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b64:	89 da                	mov    edx,ebx
c0007b66:	01 e8                	add    eax,ebp
c0007b68:	e8 5b 9f ff ff       	call   c0001ac8 <st_dword>
c0007b6d:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b72:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b7a:	75 e4                	jne    c0007b60 <f_mkfs+0x9fe>
c0007b7c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b7f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b83:	83 c6 02             	add    esi,0x2
c0007b86:	83 d7 00             	adc    edi,0x0
c0007b89:	83 ec 0c             	sub    esp,0xc
c0007b8c:	6a 01                	push   0x1
c0007b8e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b92:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b96:	55                   	push   ebp
c0007b97:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b9b:	e8 7d 9e ff ff       	call   c0001a1d <disk_write>
c0007ba0:	83 c4 20             	add    esp,0x20
c0007ba3:	85 c0                	test   eax,eax
c0007ba5:	0f 85 68 06 00 00    	jne    c0008213 <f_mkfs+0x10b1>
c0007bab:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007bb0:	74 0d                	je     c0007bbf <f_mkfs+0xa5d>
c0007bb2:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007bba:	e9 43 fd ff ff       	jmp    c0007902 <f_mkfs+0x7a0>
c0007bbf:	b1 07                	mov    cl,0x7
c0007bc1:	e9 e3 05 00 00       	jmp    c00081a9 <f_mkfs+0x1047>
c0007bc6:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007bcb:	0f 85 4f 02 00 00    	jne    c0007e20 <f_mkfs+0xcbe>
c0007bd1:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007bd6:	0f 86 22 02 00 00    	jbe    c0007dfe <f_mkfs+0xc9c>
c0007bdc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007be1:	0f 85 81 06 00 00    	jne    c0008268 <f_mkfs+0x1106>
c0007be7:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007bea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bee:	83 f8 40             	cmp    eax,0x40
c0007bf1:	0f 87 51 06 00 00    	ja     c0008248 <f_mkfs+0x10e6>
c0007bf7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bfb:	85 ff                	test   edi,edi
c0007bfd:	75 1c                	jne    c0007c1b <f_mkfs+0xab9>
c0007bff:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c02:	ba 00 5d 02 c0       	mov    edx,0xc0025d00
c0007c07:	c1 e9 0c             	shr    ecx,0xc
c0007c0a:	bf 01 00 00 00       	mov    edi,0x1
c0007c0f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c12:	66 85 c0             	test   ax,ax
c0007c15:	0f 85 95 01 00 00    	jne    c0007db0 <f_mkfs+0xc4e>
c0007c1b:	31 d2                	xor    edx,edx
c0007c1d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c20:	f7 f7                	div    edi
c0007c22:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007c27:	0f 86 95 01 00 00    	jbe    c0007dc2 <f_mkfs+0xc60>
c0007c2d:	83 c0 02             	add    eax,0x2
c0007c30:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007c35:	01 c0                	add    eax,eax
c0007c37:	05 ff 01 00 00       	add    eax,0x1ff
c0007c3c:	be 01 00 00 00       	mov    esi,0x1
c0007c41:	c1 e8 09             	shr    eax,0x9
c0007c44:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c48:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c4c:	c1 e0 05             	shl    eax,0x5
c0007c4f:	c1 e8 09             	shr    eax,0x9
c0007c52:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c56:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c5b:	31 d2                	xor    edx,edx
c0007c5d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c61:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c65:	89 f0                	mov    eax,esi
c0007c67:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c6b:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c6f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c73:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c77:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c7b:	31 d2                	xor    edx,edx
c0007c7d:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c82:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c86:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c8a:	31 db                	xor    ebx,ebx
c0007c8c:	01 c8                	add    eax,ecx
c0007c8e:	11 da                	adc    edx,ebx
c0007c90:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c94:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c98:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c9c:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007ca0:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007ca4:	f7 da                	neg    edx
c0007ca6:	21 d1                	and    ecx,edx
c0007ca8:	29 d9                	sub    ecx,ebx
c0007caa:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007caf:	0f 85 20 01 00 00    	jne    c0007dd5 <f_mkfs+0xc73>
c0007cb5:	31 db                	xor    ebx,ebx
c0007cb7:	01 ce                	add    esi,ecx
c0007cb9:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007cbd:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007cc1:	31 d2                	xor    edx,edx
c0007cc3:	89 f8                	mov    eax,edi
c0007cc5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007cc9:	c1 e0 04             	shl    eax,0x4
c0007ccc:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007cd0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007cd4:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007cd8:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007cdc:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007cdf:	19 d3                	sbb    ebx,edx
c0007ce1:	0f 82 40 01 00 00    	jb     c0007e27 <f_mkfs+0xcc5>
c0007ce7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cea:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cee:	89 c8                	mov    eax,ecx
c0007cf0:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007cf5:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cf9:	29 f0                	sub    eax,esi
c0007cfb:	29 d0                	sub    eax,edx
c0007cfd:	31 d2                	xor    edx,edx
c0007cff:	f7 f7                	div    edi
c0007d01:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007d06:	89 c3                	mov    ebx,eax
c0007d08:	0f 85 b8 fe ff ff    	jne    c0007bc6 <f_mkfs+0xa64>
c0007d0e:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007d13:	0f 87 1d 01 00 00    	ja     c0007e36 <f_mkfs+0xcd4>
c0007d19:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d1e:	0f 85 03 01 00 00    	jne    c0007e27 <f_mkfs+0xcc5>
c0007d24:	83 ff 01             	cmp    edi,0x1
c0007d27:	0f 86 fa 00 00 00    	jbe    c0007e27 <f_mkfs+0xcc5>
c0007d2d:	d1 ef                	shr    edi,1
c0007d2f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007d33:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007d37:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007d3a:	85 db                	test   ebx,ebx
c0007d3c:	75 2d                	jne    c0007d6b <f_mkfs+0xc09>
c0007d3e:	89 cb                	mov    ebx,ecx
c0007d40:	ba 10 5d 02 c0       	mov    edx,0xc0025d10
c0007d45:	c1 eb 11             	shr    ebx,0x11
c0007d48:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d50:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d53:	66 85 c0             	test   ax,ax
c0007d56:	74 11                	je     c0007d69 <f_mkfs+0xc07>
c0007d58:	83 c2 02             	add    edx,0x2
c0007d5b:	39 d8                	cmp    eax,ebx
c0007d5d:	77 0a                	ja     c0007d69 <f_mkfs+0xc07>
c0007d5f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d63:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d67:	eb e7                	jmp    c0007d50 <f_mkfs+0xbee>
c0007d69:	31 db                	xor    ebx,ebx
c0007d6b:	31 d2                	xor    edx,edx
c0007d6d:	89 c8                	mov    eax,ecx
c0007d6f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d73:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d7a:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d7f:	c1 ea 09             	shr    edx,0x9
c0007d82:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d87:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d8b:	0f 87 96 00 00 00    	ja     c0007e27 <f_mkfs+0xcc5>
c0007d91:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d95:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d9d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007da1:	be 20 00 00 00       	mov    esi,0x20
c0007da6:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007dab:	e9 a6 fe ff ff       	jmp    c0007c56 <f_mkfs+0xaf4>
c0007db0:	83 c2 02             	add    edx,0x2
c0007db3:	39 c8                	cmp    eax,ecx
c0007db5:	0f 87 60 fe ff ff    	ja     c0007c1b <f_mkfs+0xab9>
c0007dbb:	01 ff                	add    edi,edi
c0007dbd:	e9 4d fe ff ff       	jmp    c0007c0f <f_mkfs+0xaad>
c0007dc2:	8d 04 40             	lea    eax,[eax+eax*2]
c0007dc5:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007dca:	40                   	inc    eax
c0007dcb:	d1 e8                	shr    eax,1
c0007dcd:	83 c0 03             	add    eax,0x3
c0007dd0:	e9 62 fe ff ff       	jmp    c0007c37 <f_mkfs+0xad5>
c0007dd5:	31 d2                	xor    edx,edx
c0007dd7:	89 c8                	mov    eax,ecx
c0007dd9:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007ddd:	85 d2                	test   edx,edx
c0007ddf:	74 0c                	je     c0007ded <f_mkfs+0xc8b>
c0007de1:	49                   	dec    ecx
c0007de2:	46                   	inc    esi
c0007de3:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007de8:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ded:	89 c8                	mov    eax,ecx
c0007def:	31 d2                	xor    edx,edx
c0007df1:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007df5:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007df9:	e9 c3 fe ff ff       	jmp    c0007cc1 <f_mkfs+0xb5f>
c0007dfe:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e03:	77 31                	ja     c0007e36 <f_mkfs+0xcd4>
c0007e05:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e0a:	75 1b                	jne    c0007e27 <f_mkfs+0xcc5>
c0007e0c:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e13:	3d 80 00 00 00       	cmp    eax,0x80
c0007e18:	0f 86 d9 fd ff ff    	jbe    c0007bf7 <f_mkfs+0xa95>
c0007e1e:	eb 07                	jmp    c0007e27 <f_mkfs+0xcc5>
c0007e20:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e25:	76 0a                	jbe    c0007e31 <f_mkfs+0xccf>
c0007e27:	bb 0e 00 00 00       	mov    ebx,0xe
c0007e2c:	e9 ff 03 00 00       	jmp    c0008230 <f_mkfs+0x10ce>
c0007e31:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007e36:	31 d2                	xor    edx,edx
c0007e38:	b9 00 02 00 00       	mov    ecx,0x200
c0007e3d:	89 e8                	mov    eax,ebp
c0007e3f:	e8 a2 9c ff ff       	call   c0001ae6 <mem_set>
c0007e44:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e49:	ba 22 5e 02 c0       	mov    edx,0xc0025e22
c0007e4e:	89 e8                	mov    eax,ebp
c0007e50:	e8 7c 9c ff ff       	call   c0001ad1 <mem_cpy>
c0007e55:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e58:	ba 00 02 00 00       	mov    edx,0x200
c0007e5d:	e8 62 9c ff ff       	call   c0001ac4 <st_word>
c0007e62:	89 f8                	mov    eax,edi
c0007e64:	0f b7 d6             	movzx  edx,si
c0007e67:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e6a:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e6d:	e8 52 9c ff ff       	call   c0001ac4 <st_word>
c0007e72:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e76:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e7b:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e7e:	75 08                	jne    c0007e88 <f_mkfs+0xd26>
c0007e80:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e88:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e8b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e8f:	e8 30 9c ff ff       	call   c0001ac4 <st_word>
c0007e94:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e99:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e9d:	39 d0                	cmp    eax,edx
c0007e9f:	b8 00 00 00 00       	mov    eax,0x0
c0007ea4:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007ea8:	72 0a                	jb     c0007eb4 <f_mkfs+0xd52>
c0007eaa:	8d 45 13             	lea    eax,[ebp+0x13]
c0007ead:	e8 12 9c ff ff       	call   c0001ac4 <st_word>
c0007eb2:	eb 08                	jmp    c0007ebc <f_mkfs+0xd5a>
c0007eb4:	8d 45 20             	lea    eax,[ebp+0x20]
c0007eb7:	e8 0c 9c ff ff       	call   c0001ac8 <st_dword>
c0007ebc:	8d 45 18             	lea    eax,[ebp+0x18]
c0007ebf:	ba 3f 00 00 00       	mov    edx,0x3f
c0007ec4:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007ec8:	e8 f7 9b ff ff       	call   c0001ac4 <st_word>
c0007ecd:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007ed0:	ba ff 00 00 00       	mov    edx,0xff
c0007ed5:	e8 ea 9b ff ff       	call   c0001ac4 <st_word>
c0007eda:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007edd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ee1:	e8 e2 9b ff ff       	call   c0001ac8 <st_dword>
c0007ee6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eeb:	75 57                	jne    c0007f44 <f_mkfs+0xde2>
c0007eed:	8d 45 43             	lea    eax,[ebp+0x43]
c0007ef0:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ef5:	e8 ce 9b ff ff       	call   c0001ac8 <st_dword>
c0007efa:	8d 45 24             	lea    eax,[ebp+0x24]
c0007efd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f01:	e8 c2 9b ff ff       	call   c0001ac8 <st_dword>
c0007f06:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007f09:	ba 02 00 00 00       	mov    edx,0x2
c0007f0e:	e8 b5 9b ff ff       	call   c0001ac8 <st_dword>
c0007f13:	8d 45 30             	lea    eax,[ebp+0x30]
c0007f16:	ba 01 00 00 00       	mov    edx,0x1
c0007f1b:	e8 a4 9b ff ff       	call   c0001ac4 <st_word>
c0007f20:	8d 45 32             	lea    eax,[ebp+0x32]
c0007f23:	ba 06 00 00 00       	mov    edx,0x6
c0007f28:	e8 97 9b ff ff       	call   c0001ac4 <st_word>
c0007f2d:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007f31:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007f35:	8d 45 47             	lea    eax,[ebp+0x47]
c0007f38:	b9 13 00 00 00       	mov    ecx,0x13
c0007f3d:	ba 2e 5e 02 c0       	mov    edx,0xc0025e2e
c0007f42:	eb 2f                	jmp    c0007f73 <f_mkfs+0xe11>
c0007f44:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f47:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f4c:	e8 77 9b ff ff       	call   c0001ac8 <st_dword>
c0007f51:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f56:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f59:	e8 66 9b ff ff       	call   c0001ac4 <st_word>
c0007f5e:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f62:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f66:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f69:	b9 13 00 00 00       	mov    ecx,0x13
c0007f6e:	ba 42 5e 02 c0       	mov    edx,0xc0025e42
c0007f73:	e8 59 9b ff ff       	call   c0001ad1 <mem_cpy>
c0007f78:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f7e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f83:	89 f0                	mov    eax,esi
c0007f85:	e8 3a 9b ff ff       	call   c0001ac4 <st_word>
c0007f8a:	83 ec 0c             	sub    esp,0xc
c0007f8d:	6a 01                	push   0x1
c0007f8f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f93:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f97:	55                   	push   ebp
c0007f98:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f9c:	e8 7c 9a ff ff       	call   c0001a1d <disk_write>
c0007fa1:	83 c4 20             	add    esp,0x20
c0007fa4:	85 c0                	test   eax,eax
c0007fa6:	0f 85 67 02 00 00    	jne    c0008213 <f_mkfs+0x10b1>
c0007fac:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fb1:	0f 85 b7 00 00 00    	jne    c000806e <f_mkfs+0xf0c>
c0007fb7:	83 ec 0c             	sub    esp,0xc
c0007fba:	6a 01                	push   0x1
c0007fbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fc0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fc4:	83 c0 06             	add    eax,0x6
c0007fc7:	83 d2 00             	adc    edx,0x0
c0007fca:	52                   	push   edx
c0007fcb:	50                   	push   eax
c0007fcc:	55                   	push   ebp
c0007fcd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fd1:	e8 47 9a ff ff       	call   c0001a1d <disk_write>
c0007fd6:	83 c4 20             	add    esp,0x20
c0007fd9:	b9 00 02 00 00       	mov    ecx,0x200
c0007fde:	31 d2                	xor    edx,edx
c0007fe0:	89 e8                	mov    eax,ebp
c0007fe2:	e8 ff 9a ff ff       	call   c0001ae6 <mem_set>
c0007fe7:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fec:	89 e8                	mov    eax,ebp
c0007fee:	e8 d5 9a ff ff       	call   c0001ac8 <st_dword>
c0007ff3:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007ff9:	ba 72 72 41 61       	mov    edx,0x61417272
c0007ffe:	e8 c5 9a ff ff       	call   c0001ac8 <st_dword>
c0008003:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008006:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000800c:	e8 b7 9a ff ff       	call   c0001ac8 <st_dword>
c0008011:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008017:	ba 02 00 00 00       	mov    edx,0x2
c000801c:	e8 a7 9a ff ff       	call   c0001ac8 <st_dword>
c0008021:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008026:	89 f0                	mov    eax,esi
c0008028:	e8 97 9a ff ff       	call   c0001ac4 <st_word>
c000802d:	83 ec 0c             	sub    esp,0xc
c0008030:	6a 01                	push   0x1
c0008032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008036:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000803a:	83 c0 07             	add    eax,0x7
c000803d:	83 d2 00             	adc    edx,0x0
c0008040:	52                   	push   edx
c0008041:	50                   	push   eax
c0008042:	55                   	push   ebp
c0008043:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008047:	e8 d1 99 ff ff       	call   c0001a1d <disk_write>
c000804c:	83 c4 14             	add    esp,0x14
c000804f:	6a 01                	push   0x1
c0008051:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008055:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008059:	83 c0 01             	add    eax,0x1
c000805c:	83 d2 00             	adc    edx,0x0
c000805f:	52                   	push   edx
c0008060:	50                   	push   eax
c0008061:	55                   	push   ebp
c0008062:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008066:	e8 b2 99 ff ff       	call   c0001a1d <disk_write>
c000806b:	83 c4 20             	add    esp,0x20
c000806e:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008075:	31 d2                	xor    edx,edx
c0008077:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000807d:	31 db                	xor    ebx,ebx
c000807f:	89 e8                	mov    eax,ebp
c0008081:	e8 60 9a ff ff       	call   c0001ae6 <mem_set>
c0008086:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000808b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008092:	0f 94 c3             	sete   bl
c0008095:	4b                   	dec    ebx
c0008096:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000809c:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00080a2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080a7:	75 21                	jne    c00080ca <f_mkfs+0xf68>
c00080a9:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00080ae:	89 e8                	mov    eax,ebp
c00080b0:	e8 13 9a ff ff       	call   c0001ac8 <st_dword>
c00080b5:	8d 45 04             	lea    eax,[ebp+0x4]
c00080b8:	83 ca ff             	or     edx,0xffffffff
c00080bb:	e8 08 9a ff ff       	call   c0001ac8 <st_dword>
c00080c0:	8d 45 08             	lea    eax,[ebp+0x8]
c00080c3:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00080c8:	eb 04                	jmp    c00080ce <f_mkfs+0xf6c>
c00080ca:	89 da                	mov    edx,ebx
c00080cc:	89 e8                	mov    eax,ebp
c00080ce:	e8 f5 99 ff ff       	call   c0001ac8 <st_dword>
c00080d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00080db:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080df:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080e3:	39 ce                	cmp    esi,ecx
c00080e5:	76 02                	jbe    c00080e9 <f_mkfs+0xf87>
c00080e7:	89 ce                	mov    esi,ecx
c00080e9:	83 ec 0c             	sub    esp,0xc
c00080ec:	56                   	push   esi
c00080ed:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080f1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080f5:	55                   	push   ebp
c00080f6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080fa:	e8 1e 99 ff ff       	call   c0001a1d <disk_write>
c00080ff:	83 c4 20             	add    esp,0x20
c0008102:	85 c0                	test   eax,eax
c0008104:	0f 85 09 01 00 00    	jne    c0008213 <f_mkfs+0x10b1>
c000810a:	31 d2                	xor    edx,edx
c000810c:	b9 00 02 00 00       	mov    ecx,0x200
c0008111:	89 e8                	mov    eax,ebp
c0008113:	e8 ce 99 ff ff       	call   c0001ae6 <mem_set>
c0008118:	31 d2                	xor    edx,edx
c000811a:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000811e:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008122:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008126:	75 b3                	jne    c00080db <f_mkfs+0xf79>
c0008128:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000812b:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008132:	40                   	inc    eax
c0008133:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008137:	0f 87 65 ff ff ff    	ja     c00080a2 <f_mkfs+0xf40>
c000813d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008142:	74 04                	je     c0008148 <f_mkfs+0xfe6>
c0008144:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008148:	89 fb                	mov    ebx,edi
c000814a:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000814e:	76 04                	jbe    c0008154 <f_mkfs+0xff2>
c0008150:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008154:	83 ec 0c             	sub    esp,0xc
c0008157:	53                   	push   ebx
c0008158:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000815c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008160:	55                   	push   ebp
c0008161:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008165:	e8 b3 98 ff ff       	call   c0001a1d <disk_write>
c000816a:	83 c4 20             	add    esp,0x20
c000816d:	85 c0                	test   eax,eax
c000816f:	0f 85 9e 00 00 00    	jne    c0008213 <f_mkfs+0x10b1>
c0008175:	31 d2                	xor    edx,edx
c0008177:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000817b:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000817f:	29 df                	sub    edi,ebx
c0008181:	75 c5                	jne    c0008148 <f_mkfs+0xfe6>
c0008183:	b1 0c                	mov    cl,0xc
c0008185:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000818a:	74 1d                	je     c00081a9 <f_mkfs+0x1047>
c000818c:	b8 ff ff 00 00       	mov    eax,0xffff
c0008191:	b1 06                	mov    cl,0x6
c0008193:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008197:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000819b:	72 0c                	jb     c00081a9 <f_mkfs+0x1047>
c000819d:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00081a2:	0f 94 c1             	sete   cl
c00081a5:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00081a9:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00081ae:	75 4c                	jne    c00081fc <f_mkfs+0x109a>
c00081b0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00081b4:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00081b8:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00081bf:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00081c6:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00081d1:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00081dc:	0f b6 c9             	movzx  ecx,cl
c00081df:	83 ec 0c             	sub    esp,0xc
c00081e2:	55                   	push   ebp
c00081e3:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081ee:	e8 2f c2 ff ff       	call   c0004422 <create_partition>
c00081f3:	83 c4 10             	add    esp,0x10
c00081f6:	89 c3                	mov    ebx,eax
c00081f8:	85 c0                	test   eax,eax
c00081fa:	75 34                	jne    c0008230 <f_mkfs+0x10ce>
c00081fc:	31 db                	xor    ebx,ebx
c00081fe:	50                   	push   eax
c00081ff:	6a 00                	push   0x0
c0008201:	6a 00                	push   0x0
c0008203:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008207:	e8 27 98 ff ff       	call   c0001a33 <disk_ioctl>
c000820c:	83 c4 10             	add    esp,0x10
c000820f:	85 c0                	test   eax,eax
c0008211:	74 1d                	je     c0008230 <f_mkfs+0x10ce>
c0008213:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000821b:	75 0c                	jne    c0008229 <f_mkfs+0x10c7>
c000821d:	83 ec 0c             	sub    esp,0xc
c0008220:	55                   	push   ebp
c0008221:	e8 75 00 00 00       	call   c000829b <ff_memfree>
c0008226:	83 c4 10             	add    esp,0x10
c0008229:	bb 01 00 00 00       	mov    ebx,0x1
c000822e:	eb 48                	jmp    c0008278 <f_mkfs+0x1116>
c0008230:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008238:	75 3e                	jne    c0008278 <f_mkfs+0x1116>
c000823a:	83 ec 0c             	sub    esp,0xc
c000823d:	55                   	push   ebp
c000823e:	e8 58 00 00 00       	call   c000829b <ff_memfree>
c0008243:	83 c4 10             	add    esp,0x10
c0008246:	eb 30                	jmp    c0008278 <f_mkfs+0x1116>
c0008248:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000824d:	0f 85 eb fa ff ff    	jne    c0007d3e <f_mkfs+0xbdc>
c0008253:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008257:	81 ff 80 00 00 00    	cmp    edi,0x80
c000825d:	0f 86 b8 f9 ff ff    	jbe    c0007c1b <f_mkfs+0xab9>
c0008263:	e9 bf fb ff ff       	jmp    c0007e27 <f_mkfs+0xcc5>
c0008268:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000826d:	0f 85 c0 fa ff ff    	jne    c0007d33 <f_mkfs+0xbd1>
c0008273:	e9 af fb ff ff       	jmp    c0007e27 <f_mkfs+0xcc5>
c0008278:	81 c4 9c 00 00 00    	add    esp,0x9c
c000827e:	89 d8                	mov    eax,ebx
c0008280:	5b                   	pop    ebx
c0008281:	5e                   	pop    esi
c0008282:	5f                   	pop    edi
c0008283:	5d                   	pop    ebp
c0008284:	c3                   	ret    

c0008285 <ff_memalloc>:
c0008285:	83 ec 0c             	sub    esp,0xc
c0008288:	83 ec 0c             	sub    esp,0xc
c000828b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000828f:	e8 b2 6e 00 00       	call   c000f146 <malloc>
c0008294:	83 c4 10             	add    esp,0x10
c0008297:	83 c4 0c             	add    esp,0xc
c000829a:	c3                   	ret    

c000829b <ff_memfree>:
c000829b:	83 ec 0c             	sub    esp,0xc
c000829e:	83 ec 0c             	sub    esp,0xc
c00082a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082a5:	e8 ac 6e 00 00       	call   c000f156 <free>
c00082aa:	83 c4 10             	add    esp,0x10
c00082ad:	90                   	nop
c00082ae:	83 c4 0c             	add    esp,0xc
c00082b1:	c3                   	ret    

c00082b2 <ff_uni2oem>:
c00082b2:	83 ec 14             	sub    esp,0x14
c00082b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00082b9:	66 89 04 24          	mov    WORD PTR [esp],ax
c00082bd:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082c4:	c7 44 24 0c 60 61 02 c0 	mov    DWORD PTR [esp+0xc],0xc0026160
c00082cc:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00082d1:	77 0b                	ja     c00082de <ff_uni2oem+0x2c>
c00082d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00082d7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082dc:	eb 5b                	jmp    c0008339 <ff_uni2oem+0x87>
c00082de:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082e6:	77 51                	ja     c0008339 <ff_uni2oem+0x87>
c00082e8:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ee:	75 49                	jne    c0008339 <ff_uni2oem+0x87>
c00082f0:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082f7:	eb 0b                	jmp    c0008304 <ff_uni2oem+0x52>
c00082f9:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082fe:	40                   	inc    eax
c00082ff:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008304:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000830a:	77 1b                	ja     c0008327 <ff_uni2oem+0x75>
c000830c:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008311:	01 c0                	add    eax,eax
c0008313:	89 c2                	mov    edx,eax
c0008315:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008319:	01 d0                	add    eax,edx
c000831b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000831e:	0f b7 c0             	movzx  eax,ax
c0008321:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008325:	75 d2                	jne    c00082f9 <ff_uni2oem+0x47>
c0008327:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000832c:	83 e8 80             	sub    eax,0xffffff80
c000832f:	25 ff 00 00 00       	and    eax,0xff
c0008334:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008339:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000833e:	83 c4 14             	add    esp,0x14
c0008341:	c3                   	ret    

c0008342 <ff_oem2uni>:
c0008342:	83 ec 18             	sub    esp,0x18
c0008345:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008349:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000834d:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008352:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008356:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000835d:	c7 44 24 10 60 61 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026160
c0008365:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000836b:	77 0b                	ja     c0008378 <ff_oem2uni+0x36>
c000836d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008371:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008376:	eb 2d                	jmp    c00083a5 <ff_oem2uni+0x63>
c0008378:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000837e:	75 25                	jne    c00083a5 <ff_oem2uni+0x63>
c0008380:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008387:	77 1c                	ja     c00083a5 <ff_oem2uni+0x63>
c0008389:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000838e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008393:	01 c0                	add    eax,eax
c0008395:	89 c2                	mov    edx,eax
c0008397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000839b:	01 d0                	add    eax,edx
c000839d:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083a0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00083a5:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00083aa:	83 c4 18             	add    esp,0x18
c00083ad:	c3                   	ret    

c00083ae <ff_wtoupper>:
c00083ae:	83 ec 10             	sub    esp,0x10
c00083b1:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00083b9:	0f 87 3e 01 00 00    	ja     c00084fd <ff_wtoupper+0x14f>
c00083bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083c3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c8:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00083cf:	77 07                	ja     c00083d8 <ff_wtoupper+0x2a>
c00083d1:	b8 60 5f 02 c0       	mov    eax,0xc0025f60
c00083d6:	eb 05                	jmp    c00083dd <ff_wtoupper+0x2f>
c00083d8:	b8 a0 5e 02 c0       	mov    eax,0xc0025ea0
c00083dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083e5:	8d 50 02             	lea    edx,[eax+0x2]
c00083e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ec:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083ef:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083f4:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083fa:	0f 84 f4 00 00 00    	je     c00084f4 <ff_wtoupper+0x146>
c0008400:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008405:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c000840a:	0f 82 e4 00 00 00    	jb     c00084f4 <ff_wtoupper+0x146>
c0008410:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008414:	8d 50 02             	lea    edx,[eax+0x2]
c0008417:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000841b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000841e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008423:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008428:	66 c1 e8 08          	shr    ax,0x8
c000842c:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008431:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008438:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000843d:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008442:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008447:	01 ca                	add    edx,ecx
c0008449:	39 d0                	cmp    eax,edx
c000844b:	0f 8d 86 00 00 00    	jge    c00084d7 <ff_wtoupper+0x129>
c0008451:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008456:	83 f8 08             	cmp    eax,0x8
c0008459:	0f 87 94 00 00 00    	ja     c00084f3 <ff_wtoupper+0x145>
c000845f:	8b 04 85 60 5e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda1a0]
c0008466:	ff e0                	jmp    eax
c0008468:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000846d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008472:	29 c2                	sub    edx,eax
c0008474:	89 d0                	mov    eax,edx
c0008476:	01 c0                	add    eax,eax
c0008478:	89 c2                	mov    edx,eax
c000847a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000847e:	01 d0                	add    eax,edx
c0008480:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008483:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008488:	eb 4b                	jmp    c00084d5 <ff_wtoupper+0x127>
c000848a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000848f:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008493:	83 e0 01             	and    eax,0x1
c0008496:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000849b:	eb 38                	jmp    c00084d5 <ff_wtoupper+0x127>
c000849d:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00084a3:	eb 30                	jmp    c00084d5 <ff_wtoupper+0x127>
c00084a5:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00084ab:	eb 28                	jmp    c00084d5 <ff_wtoupper+0x127>
c00084ad:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00084b3:	eb 20                	jmp    c00084d5 <ff_wtoupper+0x127>
c00084b5:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00084bb:	eb 18                	jmp    c00084d5 <ff_wtoupper+0x127>
c00084bd:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00084c3:	eb 10                	jmp    c00084d5 <ff_wtoupper+0x127>
c00084c5:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00084cb:	eb 08                	jmp    c00084d5 <ff_wtoupper+0x127>
c00084cd:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084d4:	90                   	nop
c00084d5:	eb 1c                	jmp    c00084f3 <ff_wtoupper+0x145>
c00084d7:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084dd:	0f 85 fe fe ff ff    	jne    c00083e1 <ff_wtoupper+0x33>
c00084e3:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084e8:	01 c0                	add    eax,eax
c00084ea:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084ee:	e9 ee fe ff ff       	jmp    c00083e1 <ff_wtoupper+0x33>
c00084f3:	90                   	nop
c00084f4:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008501:	83 c4 10             	add    esp,0x10
c0008504:	c3                   	ret    

c0008505 <is_bad_src_ratio>:
c0008505:	83 ec 1c             	sub    esp,0x1c
c0008508:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000850c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008510:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008514:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008518:	b8 00 00 00 00       	mov    eax,0x0
c000851d:	ba 00 00 70 3f       	mov    edx,0x3f700000
c0008522:	52                   	push   edx
c0008523:	50                   	push   eax
c0008524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008528:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000852c:	e8 fe c8 01 00       	call   c0024e2f <__ltdf2>
c0008531:	83 c4 10             	add    esp,0x10
c0008534:	85 c0                	test   eax,eax
c0008536:	78 20                	js     c0008558 <is_bad_src_ratio+0x53>
c0008538:	b8 00 00 00 00       	mov    eax,0x0
c000853d:	ba 00 00 70 40       	mov    edx,0x40700000
c0008542:	52                   	push   edx
c0008543:	50                   	push   eax
c0008544:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008548:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000854c:	e8 c0 c8 01 00       	call   c0024e11 <__gtdf2>
c0008551:	83 c4 10             	add    esp,0x10
c0008554:	85 c0                	test   eax,eax
c0008556:	7e 07                	jle    c000855f <is_bad_src_ratio+0x5a>
c0008558:	b8 01 00 00 00       	mov    eax,0x1
c000855d:	eb 05                	jmp    c0008564 <is_bad_src_ratio+0x5f>
c000855f:	b8 00 00 00 00       	mov    eax,0x0
c0008564:	83 c4 1c             	add    esp,0x1c
c0008567:	c3                   	ret    

c0008568 <psrc_set_converter>:
c0008568:	56                   	push   esi
c0008569:	89 d6                	mov    esi,edx
c000856b:	53                   	push   ebx
c000856c:	89 c3                	mov    ebx,eax
c000856e:	83 ec 0c             	sub    esp,0xc
c0008571:	52                   	push   edx
c0008572:	50                   	push   eax
c0008573:	e8 58 51 00 00       	call   c000d6d0 <sinc_set_converter>
c0008578:	83 c4 10             	add    esp,0x10
c000857b:	85 c0                	test   eax,eax
c000857d:	74 25                	je     c00085a4 <psrc_set_converter+0x3c>
c000857f:	50                   	push   eax
c0008580:	50                   	push   eax
c0008581:	56                   	push   esi
c0008582:	53                   	push   ebx
c0008583:	e8 2a 59 00 00       	call   c000deb2 <zoh_set_converter>
c0008588:	83 c4 10             	add    esp,0x10
c000858b:	85 c0                	test   eax,eax
c000858d:	74 15                	je     c00085a4 <psrc_set_converter+0x3c>
c000858f:	51                   	push   ecx
c0008590:	51                   	push   ecx
c0008591:	56                   	push   esi
c0008592:	53                   	push   ebx
c0008593:	e8 77 10 00 00       	call   c000960f <linear_set_converter>
c0008598:	83 c4 10             	add    esp,0x10
c000859b:	ba 0a 00 00 00       	mov    edx,0xa
c00085a0:	85 c0                	test   eax,eax
c00085a2:	75 02                	jne    c00085a6 <psrc_set_converter+0x3e>
c00085a4:	31 d2                	xor    edx,edx
c00085a6:	89 d0                	mov    eax,edx
c00085a8:	5a                   	pop    edx
c00085a9:	5b                   	pop    ebx
c00085aa:	5e                   	pop    esi
c00085ab:	c3                   	ret    

c00085ac <src_delete>:
c00085ac:	53                   	push   ebx
c00085ad:	83 ec 08             	sub    esp,0x8
c00085b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00085b4:	85 db                	test   ebx,ebx
c00085b6:	74 29                	je     c00085e1 <src_delete+0x35>
c00085b8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00085bb:	85 c0                	test   eax,eax
c00085bd:	74 0c                	je     c00085cb <src_delete+0x1f>
c00085bf:	83 ec 0c             	sub    esp,0xc
c00085c2:	50                   	push   eax
c00085c3:	e8 8e 6b 00 00       	call   c000f156 <free>
c00085c8:	83 c4 10             	add    esp,0x10
c00085cb:	50                   	push   eax
c00085cc:	6a 3c                	push   0x3c
c00085ce:	6a 00                	push   0x0
c00085d0:	53                   	push   ebx
c00085d1:	e8 f6 80 ff ff       	call   c00006cc <memset>
c00085d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00085d9:	e8 78 6b 00 00       	call   c000f156 <free>
c00085de:	83 c4 10             	add    esp,0x10
c00085e1:	31 c0                	xor    eax,eax
c00085e3:	83 c4 08             	add    esp,0x8
c00085e6:	5b                   	pop    ebx
c00085e7:	c3                   	ret    

c00085e8 <src_process>:
c00085e8:	56                   	push   esi
c00085e9:	53                   	push   ebx
c00085ea:	83 ec 14             	sub    esp,0x14
c00085ed:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00085f1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00085f5:	85 f6                	test   esi,esi
c00085f7:	0f 84 2a 01 00 00    	je     c0008727 <src_process+0x13f>
c00085fd:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0008601:	0f 84 27 01 00 00    	je     c000872e <src_process+0x146>
c0008607:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c000860b:	0f 84 1d 01 00 00    	je     c000872e <src_process+0x146>
c0008611:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008618:	0f 85 17 01 00 00    	jne    c0008735 <src_process+0x14d>
c000861e:	85 db                	test   ebx,ebx
c0008620:	0f 84 16 01 00 00    	je     c000873c <src_process+0x154>
c0008626:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008629:	0f 84 14 01 00 00    	je     c0008743 <src_process+0x15b>
c000862f:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c0008633:	0f 84 0a 01 00 00    	je     c0008743 <src_process+0x15b>
c0008639:	50                   	push   eax
c000863a:	50                   	push   eax
c000863b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000863e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008641:	e8 bf fe ff ff       	call   c0008505 <is_bad_src_ratio>
c0008646:	83 c4 10             	add    esp,0x10
c0008649:	85 c0                	test   eax,eax
c000864b:	0f 85 f9 00 00 00    	jne    c000874a <src_process+0x162>
c0008651:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008655:	79 07                	jns    c000865e <src_process+0x76>
c0008657:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000865e:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008662:	79 07                	jns    c000866b <src_process+0x83>
c0008664:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000866b:	8b 13                	mov    edx,DWORD PTR [ebx]
c000866d:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008670:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0008673:	39 ca                	cmp    edx,ecx
c0008675:	73 0b                	jae    c0008682 <src_process+0x9a>
c0008677:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c000867b:	8d 04 82             	lea    eax,[edx+eax*4]
c000867e:	39 c1                	cmp    ecx,eax
c0008680:	eb 09                	jmp    c000868b <src_process+0xa3>
c0008682:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c0008686:	8d 04 81             	lea    eax,[ecx+eax*4]
c0008689:	39 c2                	cmp    edx,eax
c000868b:	0f 82 c0 00 00 00    	jb     c0008751 <src_process+0x169>
c0008691:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008698:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000869f:	68 00 00 70 3f       	push   0x3f700000
c00086a4:	6a 00                	push   0x0
c00086a6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00086a9:	ff 36                	push   DWORD PTR [esi]
c00086ab:	e8 7f c7 01 00       	call   c0024e2f <__ltdf2>
c00086b0:	83 c4 10             	add    esp,0x10
c00086b3:	85 c0                	test   eax,eax
c00086b5:	79 0b                	jns    c00086c2 <src_process+0xda>
c00086b7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00086ba:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00086bd:	89 06                	mov    DWORD PTR [esi],eax
c00086bf:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00086c2:	83 ec 10             	sub    esp,0x10
c00086c5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00086c8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00086cb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00086ce:	ff 36                	push   DWORD PTR [esi]
c00086d0:	e8 5f be 01 00       	call   c0024534 <__subdf3>
c00086d5:	83 c4 18             	add    esp,0x18
c00086d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00086dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00086e0:	52                   	push   edx
c00086e1:	50                   	push   eax
c00086e2:	e8 d9 c8 01 00       	call   c0024fc0 <fabs>
c00086e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00086ef:	83 c4 10             	add    esp,0x10
c00086f2:	68 af 03 d2 3c       	push   0x3cd203af
c00086f7:	68 16 56 e7 9e       	push   0x9ee75616
c00086fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008700:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008704:	e8 26 c7 01 00       	call   c0024e2f <__ltdf2>
c0008709:	83 c4 10             	add    esp,0x10
c000870c:	85 c0                	test   eax,eax
c000870e:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0008712:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0008716:	79 05                	jns    c000871d <src_process+0x135>
c0008718:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000871b:	eb 03                	jmp    c0008720 <src_process+0x138>
c000871d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0008720:	83 c4 14             	add    esp,0x14
c0008723:	5b                   	pop    ebx
c0008724:	5e                   	pop    esi
c0008725:	ff e0                	jmp    eax
c0008727:	b8 02 00 00 00       	mov    eax,0x2
c000872c:	eb 28                	jmp    c0008756 <src_process+0x16e>
c000872e:	b8 07 00 00 00       	mov    eax,0x7
c0008733:	eb 21                	jmp    c0008756 <src_process+0x16e>
c0008735:	b8 12 00 00 00       	mov    eax,0x12
c000873a:	eb 1a                	jmp    c0008756 <src_process+0x16e>
c000873c:	b8 03 00 00 00       	mov    eax,0x3
c0008741:	eb 13                	jmp    c0008756 <src_process+0x16e>
c0008743:	b8 04 00 00 00       	mov    eax,0x4
c0008748:	eb 0c                	jmp    c0008756 <src_process+0x16e>
c000874a:	b8 06 00 00 00       	mov    eax,0x6
c000874f:	eb 05                	jmp    c0008756 <src_process+0x16e>
c0008751:	b8 10 00 00 00       	mov    eax,0x10
c0008756:	83 c4 14             	add    esp,0x14
c0008759:	5b                   	pop    ebx
c000875a:	5e                   	pop    esi
c000875b:	c3                   	ret    

c000875c <src_callback_read>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 3c             	sub    esp,0x3c
c0008763:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008767:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000876b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000876f:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008773:	85 ed                	test   ebp,ebp
c0008775:	0f 8e 30 01 00 00    	jle    c00088ab <src_callback_read+0x14f>
c000877b:	85 db                	test   ebx,ebx
c000877d:	0f 84 28 01 00 00    	je     c00088ab <src_callback_read+0x14f>
c0008783:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000878a:	74 0c                	je     c0008798 <src_callback_read+0x3c>
c000878c:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008793:	e9 13 01 00 00       	jmp    c00088ab <src_callback_read+0x14f>
c0008798:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000879c:	75 0c                	jne    c00087aa <src_callback_read+0x4e>
c000879e:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c00087a5:	e9 01 01 00 00       	jmp    c00088ab <src_callback_read+0x14f>
c00087aa:	51                   	push   ecx
c00087ab:	6a 24                	push   0x24
c00087ad:	6a 00                	push   0x0
c00087af:	8d 44 24 18          	lea    eax,[esp+0x18]
c00087b3:	50                   	push   eax
c00087b4:	e8 13 7f ff ff       	call   c00006cc <memset>
c00087b9:	58                   	pop    eax
c00087ba:	5a                   	pop    edx
c00087bb:	57                   	push   edi
c00087bc:	56                   	push   esi
c00087bd:	e8 43 fd ff ff       	call   c0008505 <is_bad_src_ratio>
c00087c2:	83 c4 10             	add    esp,0x10
c00087c5:	85 c0                	test   eax,eax
c00087c7:	74 0c                	je     c00087d5 <src_callback_read+0x79>
c00087c9:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087d0:	e9 d6 00 00 00       	jmp    c00088ab <src_callback_read+0x14f>
c00087d5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00087d9:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00087dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00087e1:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00087e5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00087e8:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00087ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00087f0:	31 f6                	xor    esi,esi
c00087f2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087f9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00087fe:	75 30                	jne    c0008830 <src_callback_read+0xd4>
c0008800:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008808:	52                   	push   edx
c0008809:	52                   	push   edx
c000880a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000880e:	50                   	push   eax
c000880f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008812:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008815:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008819:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000881d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008821:	83 c4 10             	add    esp,0x10
c0008824:	85 c0                	test   eax,eax
c0008826:	75 08                	jne    c0008830 <src_callback_read+0xd4>
c0008828:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008830:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008837:	50                   	push   eax
c0008838:	50                   	push   eax
c0008839:	8d 44 24 14          	lea    eax,[esp+0x14]
c000883d:	50                   	push   eax
c000883e:	53                   	push   ebx
c000883f:	e8 a4 fd ff ff       	call   c00085e8 <src_process>
c0008844:	83 c4 10             	add    esp,0x10
c0008847:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c000884e:	85 c0                	test   eax,eax
c0008850:	75 42                	jne    c0008894 <src_callback_read+0x138>
c0008852:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008856:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008859:	89 f9                	mov    ecx,edi
c000885b:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c000885f:	0f af ca             	imul   ecx,edx
c0008862:	c1 e1 02             	shl    ecx,0x2
c0008865:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008869:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000886d:	0f af d1             	imul   edx,ecx
c0008870:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008874:	c1 e2 02             	shl    edx,0x2
c0008877:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c000887b:	8d 14 31             	lea    edx,[ecx+esi*1]
c000887e:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008883:	75 04                	jne    c0008889 <src_callback_read+0x12d>
c0008885:	85 c9                	test   ecx,ecx
c0008887:	74 0b                	je     c0008894 <src_callback_read+0x138>
c0008889:	39 d5                	cmp    ebp,edx
c000888b:	7e 09                	jle    c0008896 <src_callback_read+0x13a>
c000888d:	89 d6                	mov    esi,edx
c000888f:	e9 65 ff ff ff       	jmp    c00087f9 <src_callback_read+0x9d>
c0008894:	89 f2                	mov    edx,esi
c0008896:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000889a:	85 c0                	test   eax,eax
c000889c:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000889f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00088a3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00088a6:	74 05                	je     c00088ad <src_callback_read+0x151>
c00088a8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00088ab:	31 d2                	xor    edx,edx
c00088ad:	83 c4 3c             	add    esp,0x3c
c00088b0:	89 d0                	mov    eax,edx
c00088b2:	5b                   	pop    ebx
c00088b3:	5e                   	pop    esi
c00088b4:	5f                   	pop    edi
c00088b5:	5d                   	pop    ebp
c00088b6:	c3                   	ret    

c00088b7 <src_set_ratio>:
c00088b7:	57                   	push   edi
c00088b8:	b8 02 00 00 00       	mov    eax,0x2
c00088bd:	56                   	push   esi
c00088be:	53                   	push   ebx
c00088bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088c3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00088c7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00088cb:	85 db                	test   ebx,ebx
c00088cd:	74 2d                	je     c00088fc <src_set_ratio+0x45>
c00088cf:	b8 07 00 00 00       	mov    eax,0x7
c00088d4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00088d8:	74 22                	je     c00088fc <src_set_ratio+0x45>
c00088da:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00088de:	74 1c                	je     c00088fc <src_set_ratio+0x45>
c00088e0:	50                   	push   eax
c00088e1:	50                   	push   eax
c00088e2:	57                   	push   edi
c00088e3:	56                   	push   esi
c00088e4:	e8 1c fc ff ff       	call   c0008505 <is_bad_src_ratio>
c00088e9:	83 c4 10             	add    esp,0x10
c00088ec:	85 c0                	test   eax,eax
c00088ee:	75 07                	jne    c00088f7 <src_set_ratio+0x40>
c00088f0:	89 33                	mov    DWORD PTR [ebx],esi
c00088f2:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088f5:	eb 05                	jmp    c00088fc <src_set_ratio+0x45>
c00088f7:	b8 06 00 00 00       	mov    eax,0x6
c00088fc:	5b                   	pop    ebx
c00088fd:	5e                   	pop    esi
c00088fe:	5f                   	pop    edi
c00088ff:	c3                   	ret    

c0008900 <src_get_channels>:
c0008900:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008904:	b8 02 00 00 00       	mov    eax,0x2
c0008909:	85 d2                	test   edx,edx
c000890b:	74 14                	je     c0008921 <src_get_channels+0x21>
c000890d:	b8 07 00 00 00       	mov    eax,0x7
c0008912:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008916:	74 09                	je     c0008921 <src_get_channels+0x21>
c0008918:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c000891c:	74 03                	je     c0008921 <src_get_channels+0x21>
c000891e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008921:	c3                   	ret    

c0008922 <src_reset>:
c0008922:	53                   	push   ebx
c0008923:	b8 02 00 00 00       	mov    eax,0x2
c0008928:	83 ec 08             	sub    esp,0x8
c000892b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000892f:	85 db                	test   ebx,ebx
c0008931:	74 36                	je     c0008969 <src_reset+0x47>
c0008933:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008936:	85 c0                	test   eax,eax
c0008938:	74 09                	je     c0008943 <src_reset+0x21>
c000893a:	83 ec 0c             	sub    esp,0xc
c000893d:	53                   	push   ebx
c000893e:	ff d0                	call   eax
c0008940:	83 c4 10             	add    esp,0x10
c0008943:	31 c0                	xor    eax,eax
c0008945:	31 d2                	xor    edx,edx
c0008947:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000894a:	89 03                	mov    DWORD PTR [ebx],eax
c000894c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000894f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008952:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008959:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008960:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008967:	31 c0                	xor    eax,eax
c0008969:	83 c4 08             	add    esp,0x8
c000896c:	5b                   	pop    ebx
c000896d:	c3                   	ret    

c000896e <src_new>:
c000896e:	57                   	push   edi
c000896f:	56                   	push   esi
c0008970:	53                   	push   ebx
c0008971:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008975:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008979:	85 f6                	test   esi,esi
c000897b:	74 73                	je     c00089f0 <src_new+0x82>
c000897d:	85 ff                	test   edi,edi
c000897f:	7f 08                	jg     c0008989 <src_new+0x1b>
c0008981:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008987:	eb 1e                	jmp    c00089a7 <src_new+0x39>
c0008989:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000898f:	50                   	push   eax
c0008990:	50                   	push   eax
c0008991:	6a 3c                	push   0x3c
c0008993:	6a 01                	push   0x1
c0008995:	e8 dc 67 00 00       	call   c000f176 <calloc>
c000899a:	83 c4 10             	add    esp,0x10
c000899d:	89 c3                	mov    ebx,eax
c000899f:	85 c0                	test   eax,eax
c00089a1:	75 10                	jne    c00089b3 <src_new+0x45>
c00089a3:	85 f6                	test   esi,esi
c00089a5:	75 04                	jne    c00089ab <src_new+0x3d>
c00089a7:	31 db                	xor    ebx,ebx
c00089a9:	eb 4b                	jmp    c00089f6 <src_new+0x88>
c00089ab:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00089b1:	eb 43                	jmp    c00089f6 <src_new+0x88>
c00089b3:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00089b6:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c00089bd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089c1:	e8 a2 fb ff ff       	call   c0008568 <psrc_set_converter>
c00089c6:	85 c0                	test   eax,eax
c00089c8:	74 18                	je     c00089e2 <src_new+0x74>
c00089ca:	85 f6                	test   esi,esi
c00089cc:	74 06                	je     c00089d4 <src_new+0x66>
c00089ce:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089d4:	83 ec 0c             	sub    esp,0xc
c00089d7:	53                   	push   ebx
c00089d8:	31 db                	xor    ebx,ebx
c00089da:	e8 77 67 00 00       	call   c000f156 <free>
c00089df:	83 c4 10             	add    esp,0x10
c00089e2:	83 ec 0c             	sub    esp,0xc
c00089e5:	53                   	push   ebx
c00089e6:	e8 37 ff ff ff       	call   c0008922 <src_reset>
c00089eb:	83 c4 10             	add    esp,0x10
c00089ee:	eb 06                	jmp    c00089f6 <src_new+0x88>
c00089f0:	85 ff                	test   edi,edi
c00089f2:	7f 9b                	jg     c000898f <src_new+0x21>
c00089f4:	eb b1                	jmp    c00089a7 <src_new+0x39>
c00089f6:	89 d8                	mov    eax,ebx
c00089f8:	5b                   	pop    ebx
c00089f9:	5e                   	pop    esi
c00089fa:	5f                   	pop    edi
c00089fb:	c3                   	ret    

c00089fc <src_callback_new>:
c00089fc:	56                   	push   esi
c00089fd:	53                   	push   ebx
c00089fe:	53                   	push   ebx
c00089ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008a03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a07:	85 f6                	test   esi,esi
c0008a09:	75 0e                	jne    c0008a19 <src_callback_new+0x1d>
c0008a0b:	31 db                	xor    ebx,ebx
c0008a0d:	85 c0                	test   eax,eax
c0008a0f:	74 47                	je     c0008a58 <src_callback_new+0x5c>
c0008a11:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008a17:	eb 3f                	jmp    c0008a58 <src_callback_new+0x5c>
c0008a19:	85 c0                	test   eax,eax
c0008a1b:	74 06                	je     c0008a23 <src_callback_new+0x27>
c0008a1d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a23:	51                   	push   ecx
c0008a24:	50                   	push   eax
c0008a25:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a29:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a2d:	e8 3c ff ff ff       	call   c000896e <src_new>
c0008a32:	83 c4 10             	add    esp,0x10
c0008a35:	89 c3                	mov    ebx,eax
c0008a37:	85 c0                	test   eax,eax
c0008a39:	74 1d                	je     c0008a58 <src_callback_new+0x5c>
c0008a3b:	83 ec 0c             	sub    esp,0xc
c0008a3e:	50                   	push   eax
c0008a3f:	e8 de fe ff ff       	call   c0008922 <src_reset>
c0008a44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a48:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a4f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a52:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a55:	83 c4 10             	add    esp,0x10
c0008a58:	89 d8                	mov    eax,ebx
c0008a5a:	5a                   	pop    edx
c0008a5b:	5b                   	pop    ebx
c0008a5c:	5e                   	pop    esi
c0008a5d:	c3                   	ret    

c0008a5e <src_get_name>:
c0008a5e:	53                   	push   ebx
c0008a5f:	83 ec 14             	sub    esp,0x14
c0008a62:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a66:	53                   	push   ebx
c0008a67:	e8 3e 4c 00 00       	call   c000d6aa <sinc_get_name>
c0008a6c:	83 c4 10             	add    esp,0x10
c0008a6f:	85 c0                	test   eax,eax
c0008a71:	75 1d                	jne    c0008a90 <src_get_name+0x32>
c0008a73:	83 ec 0c             	sub    esp,0xc
c0008a76:	53                   	push   ebx
c0008a77:	e8 18 54 00 00       	call   c000de94 <zoh_get_name>
c0008a7c:	83 c4 10             	add    esp,0x10
c0008a7f:	85 c0                	test   eax,eax
c0008a81:	75 0d                	jne    c0008a90 <src_get_name+0x32>
c0008a83:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a87:	83 c4 08             	add    esp,0x8
c0008a8a:	5b                   	pop    ebx
c0008a8b:	e9 61 0b 00 00       	jmp    c00095f1 <linear_get_name>
c0008a90:	83 c4 08             	add    esp,0x8
c0008a93:	5b                   	pop    ebx
c0008a94:	c3                   	ret    

c0008a95 <src_get_description>:
c0008a95:	53                   	push   ebx
c0008a96:	83 ec 14             	sub    esp,0x14
c0008a99:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a9d:	53                   	push   ebx
c0008a9e:	e8 1a 4c 00 00       	call   c000d6bd <sinc_get_description>
c0008aa3:	83 c4 10             	add    esp,0x10
c0008aa6:	85 c0                	test   eax,eax
c0008aa8:	75 1d                	jne    c0008ac7 <src_get_description+0x32>
c0008aaa:	83 ec 0c             	sub    esp,0xc
c0008aad:	53                   	push   ebx
c0008aae:	e8 f0 53 00 00       	call   c000dea3 <zoh_get_description>
c0008ab3:	83 c4 10             	add    esp,0x10
c0008ab6:	85 c0                	test   eax,eax
c0008ab8:	75 0d                	jne    c0008ac7 <src_get_description+0x32>
c0008aba:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008abe:	83 c4 08             	add    esp,0x8
c0008ac1:	5b                   	pop    ebx
c0008ac2:	e9 39 0b 00 00       	jmp    c0009600 <linear_get_description>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <src_get_version>:
c0008acc:	b8 60 62 02 c0       	mov    eax,0xc0026260
c0008ad1:	c3                   	ret    

c0008ad2 <src_is_valid_ratio>:
c0008ad2:	83 ec 14             	sub    esp,0x14
c0008ad5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008add:	e8 23 fa ff ff       	call   c0008505 <is_bad_src_ratio>
c0008ae2:	85 c0                	test   eax,eax
c0008ae4:	0f 94 c0             	sete   al
c0008ae7:	83 c4 1c             	add    esp,0x1c
c0008aea:	0f b6 c0             	movzx  eax,al
c0008aed:	c3                   	ret    

c0008aee <src_error>:
c0008aee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008af2:	31 c0                	xor    eax,eax
c0008af4:	85 d2                	test   edx,edx
c0008af6:	74 03                	je     c0008afb <src_error+0xd>
c0008af8:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008afb:	c3                   	ret    

c0008afc <src_strerror>:
c0008afc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b00:	31 c0                	xor    eax,eax
c0008b02:	83 fa 17             	cmp    edx,0x17
c0008b05:	77 07                	ja     c0008b0e <src_strerror+0x12>
c0008b07:	8b 04 95 c0 66 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9940]
c0008b0e:	c3                   	ret    

c0008b0f <src_simple>:
c0008b0f:	56                   	push   esi
c0008b10:	53                   	push   ebx
c0008b11:	83 ec 18             	sub    esp,0x18
c0008b14:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b18:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b1c:	50                   	push   eax
c0008b1d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b21:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b25:	e8 44 fe ff ff       	call   c000896e <src_new>
c0008b2a:	83 c4 10             	add    esp,0x10
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	75 06                	jne    c0008b37 <src_simple+0x28>
c0008b31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b35:	eb 25                	jmp    c0008b5c <src_simple+0x4d>
c0008b37:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b3e:	89 c3                	mov    ebx,eax
c0008b40:	50                   	push   eax
c0008b41:	50                   	push   eax
c0008b42:	56                   	push   esi
c0008b43:	53                   	push   ebx
c0008b44:	e8 9f fa ff ff       	call   c00085e8 <src_process>
c0008b49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b4c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b50:	e8 57 fa ff ff       	call   c00085ac <src_delete>
c0008b55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b59:	83 c4 10             	add    esp,0x10
c0008b5c:	83 c4 14             	add    esp,0x14
c0008b5f:	5b                   	pop    ebx
c0008b60:	5e                   	pop    esi
c0008b61:	c3                   	ret    

c0008b62 <src_short_to_float_array>:
c0008b62:	53                   	push   ebx
c0008b63:	83 ec 18             	sub    esp,0x18
c0008b66:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b6a:	85 db                	test   ebx,ebx
c0008b6c:	74 54                	je     c0008bc2 <src_short_to_float_array+0x60>
c0008b6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b72:	4b                   	dec    ebx
c0008b73:	83 ec 0c             	sub    esp,0xc
c0008b76:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b7a:	50                   	push   eax
c0008b7b:	e8 43 c0 01 00       	call   c0024bc3 <__floatsidf>
c0008b80:	83 c4 10             	add    esp,0x10
c0008b83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008b8b:	68 00 00 00 3f       	push   0x3f000000
c0008b90:	6a 00                	push   0x0
c0008b92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b9a:	e8 c1 b9 01 00       	call   c0024560 <__muldf3>
c0008b9f:	59                   	pop    ecx
c0008ba0:	59                   	pop    ecx
c0008ba1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ba5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb1:	e8 7d c2 01 00       	call   c0024e33 <__truncdfsf2>
c0008bb6:	83 c4 10             	add    esp,0x10
c0008bb9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bbd:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bc0:	eb a8                	jmp    c0008b6a <src_short_to_float_array+0x8>
c0008bc2:	83 c4 18             	add    esp,0x18
c0008bc5:	5b                   	pop    ebx
c0008bc6:	c3                   	ret    

c0008bc7 <src_float_to_short_array>:
c0008bc7:	56                   	push   esi
c0008bc8:	53                   	push   ebx
c0008bc9:	83 ec 14             	sub    esp,0x14
c0008bcc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008bd0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bd4:	85 db                	test   ebx,ebx
c0008bd6:	0f 84 a4 00 00 00    	je     c0008c80 <src_float_to_short_array+0xb9>
c0008bdc:	83 ec 0c             	sub    esp,0xc
c0008bdf:	4b                   	dec    ebx
c0008be0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008be4:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008be7:	e8 6b c3 01 00       	call   c0024f57 <__extendsfdf2>
c0008bec:	83 c4 10             	add    esp,0x10
c0008bef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008bf7:	68 00 00 e0 41       	push   0x41e00000
c0008bfc:	6a 00                	push   0x0
c0008bfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c06:	e8 55 b9 01 00       	call   c0024560 <__muldf3>
c0008c0b:	83 c4 10             	add    esp,0x10
c0008c0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c16:	68 ff ff df 41       	push   0x41dfffff
c0008c1b:	68 00 00 c0 ff       	push   0xffc00000
c0008c20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c28:	e8 00 c2 01 00       	call   c0024e2d <__gedf2>
c0008c2d:	83 c4 10             	add    esp,0x10
c0008c30:	85 c0                	test   eax,eax
c0008c32:	78 08                	js     c0008c3c <src_float_to_short_array+0x75>
c0008c34:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c3a:	eb 98                	jmp    c0008bd4 <src_float_to_short_array+0xd>
c0008c3c:	68 00 00 e0 c1       	push   0xc1e00000
c0008c41:	6a 00                	push   0x0
c0008c43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c4b:	e8 e1 c1 01 00       	call   c0024e31 <__ledf2>
c0008c50:	83 c4 10             	add    esp,0x10
c0008c53:	85 c0                	test   eax,eax
c0008c55:	7f 0b                	jg     c0008c62 <src_float_to_short_array+0x9b>
c0008c57:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c5d:	e9 72 ff ff ff       	jmp    c0008bd4 <src_float_to_short_array+0xd>
c0008c62:	50                   	push   eax
c0008c63:	50                   	push   eax
c0008c64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c6c:	e8 6f c3 01 00       	call   c0024fe0 <lrint>
c0008c71:	83 c4 10             	add    esp,0x10
c0008c74:	c1 f8 10             	sar    eax,0x10
c0008c77:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c7b:	e9 54 ff ff ff       	jmp    c0008bd4 <src_float_to_short_array+0xd>
c0008c80:	83 c4 14             	add    esp,0x14
c0008c83:	5b                   	pop    ebx
c0008c84:	5e                   	pop    esi
c0008c85:	c3                   	ret    

c0008c86 <src_int_to_float_array>:
c0008c86:	53                   	push   ebx
c0008c87:	83 ec 18             	sub    esp,0x18
c0008c8a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008c8e:	85 db                	test   ebx,ebx
c0008c90:	74 52                	je     c0008ce4 <src_int_to_float_array+0x5e>
c0008c92:	83 ec 0c             	sub    esp,0xc
c0008c95:	4b                   	dec    ebx
c0008c96:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008c9a:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c9d:	e8 21 bf 01 00       	call   c0024bc3 <__floatsidf>
c0008ca2:	83 c4 10             	add    esp,0x10
c0008ca5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ca9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cad:	68 00 00 00 3e       	push   0x3e000000
c0008cb2:	6a 00                	push   0x0
c0008cb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cbc:	e8 9f b8 01 00       	call   c0024560 <__muldf3>
c0008cc1:	59                   	pop    ecx
c0008cc2:	59                   	pop    ecx
c0008cc3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008cc7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ccb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ccf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd3:	e8 5b c1 01 00       	call   c0024e33 <__truncdfsf2>
c0008cd8:	83 c4 10             	add    esp,0x10
c0008cdb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cdf:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008ce2:	eb aa                	jmp    c0008c8e <src_int_to_float_array+0x8>
c0008ce4:	83 c4 18             	add    esp,0x18
c0008ce7:	5b                   	pop    ebx
c0008ce8:	c3                   	ret    

c0008ce9 <src_float_to_int_array>:
c0008ce9:	56                   	push   esi
c0008cea:	53                   	push   ebx
c0008ceb:	83 ec 14             	sub    esp,0x14
c0008cee:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008cf2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008cf6:	85 db                	test   ebx,ebx
c0008cf8:	0f 84 a2 00 00 00    	je     c0008da0 <src_float_to_int_array+0xb7>
c0008cfe:	83 ec 0c             	sub    esp,0xc
c0008d01:	4b                   	dec    ebx
c0008d02:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d06:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d09:	e8 49 c2 01 00       	call   c0024f57 <__extendsfdf2>
c0008d0e:	83 c4 10             	add    esp,0x10
c0008d11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d19:	68 00 00 e0 41       	push   0x41e00000
c0008d1e:	6a 00                	push   0x0
c0008d20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d28:	e8 33 b8 01 00       	call   c0024560 <__muldf3>
c0008d2d:	83 c4 10             	add    esp,0x10
c0008d30:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d38:	68 ff ff df 41       	push   0x41dfffff
c0008d3d:	68 00 00 c0 ff       	push   0xffc00000
c0008d42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d4a:	e8 de c0 01 00       	call   c0024e2d <__gedf2>
c0008d4f:	83 c4 10             	add    esp,0x10
c0008d52:	85 c0                	test   eax,eax
c0008d54:	78 09                	js     c0008d5f <src_float_to_int_array+0x76>
c0008d56:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d5d:	eb 97                	jmp    c0008cf6 <src_float_to_int_array+0xd>
c0008d5f:	68 00 00 e0 c1       	push   0xc1e00000
c0008d64:	6a 00                	push   0x0
c0008d66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d6e:	e8 be c0 01 00       	call   c0024e31 <__ledf2>
c0008d73:	83 c4 10             	add    esp,0x10
c0008d76:	85 c0                	test   eax,eax
c0008d78:	7f 0c                	jg     c0008d86 <src_float_to_int_array+0x9d>
c0008d7a:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d81:	e9 70 ff ff ff       	jmp    c0008cf6 <src_float_to_int_array+0xd>
c0008d86:	50                   	push   eax
c0008d87:	50                   	push   eax
c0008d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d90:	e8 4b c2 01 00       	call   c0024fe0 <lrint>
c0008d95:	83 c4 10             	add    esp,0x10
c0008d98:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008d9b:	e9 56 ff ff ff       	jmp    c0008cf6 <src_float_to_int_array+0xd>
c0008da0:	83 c4 14             	add    esp,0x14
c0008da3:	5b                   	pop    ebx
c0008da4:	5e                   	pop    esi
c0008da5:	c3                   	ret    

c0008da6 <is_bad_src_ratio>:
c0008da6:	83 ec 1c             	sub    esp,0x1c
c0008da9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008dad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008db5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008db9:	b8 00 00 00 00       	mov    eax,0x0
c0008dbe:	ba 00 00 70 3f       	mov    edx,0x3f700000
c0008dc3:	52                   	push   edx
c0008dc4:	50                   	push   eax
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dcd:	e8 5d c0 01 00       	call   c0024e2f <__ltdf2>
c0008dd2:	83 c4 10             	add    esp,0x10
c0008dd5:	85 c0                	test   eax,eax
c0008dd7:	78 20                	js     c0008df9 <is_bad_src_ratio+0x53>
c0008dd9:	b8 00 00 00 00       	mov    eax,0x0
c0008dde:	ba 00 00 70 40       	mov    edx,0x40700000
c0008de3:	52                   	push   edx
c0008de4:	50                   	push   eax
c0008de5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ded:	e8 1f c0 01 00       	call   c0024e11 <__gtdf2>
c0008df2:	83 c4 10             	add    esp,0x10
c0008df5:	85 c0                	test   eax,eax
c0008df7:	7e 07                	jle    c0008e00 <is_bad_src_ratio+0x5a>
c0008df9:	b8 01 00 00 00       	mov    eax,0x1
c0008dfe:	eb 05                	jmp    c0008e05 <is_bad_src_ratio+0x5f>
c0008e00:	b8 00 00 00 00       	mov    eax,0x0
c0008e05:	83 c4 1c             	add    esp,0x1c
c0008e08:	c3                   	ret    

c0008e09 <fmod_one>:
c0008e09:	83 ec 2c             	sub    esp,0x2c
c0008e0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008e18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e1c:	83 ec 08             	sub    esp,0x8
c0008e1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e27:	e8 b4 c1 01 00       	call   c0024fe0 <lrint>
c0008e2c:	83 c4 10             	add    esp,0x10
c0008e2f:	83 ec 0c             	sub    esp,0xc
c0008e32:	50                   	push   eax
c0008e33:	e8 8b bd 01 00       	call   c0024bc3 <__floatsidf>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	52                   	push   edx
c0008e3c:	50                   	push   eax
c0008e3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e45:	e8 ea b6 01 00       	call   c0024534 <__subdf3>
c0008e4a:	83 c4 10             	add    esp,0x10
c0008e4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008e51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008e55:	b8 00 00 00 00       	mov    eax,0x0
c0008e5a:	ba 00 00 00 00       	mov    edx,0x0
c0008e5f:	52                   	push   edx
c0008e60:	50                   	push   eax
c0008e61:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e69:	e8 c1 bf 01 00       	call   c0024e2f <__ltdf2>
c0008e6e:	83 c4 10             	add    esp,0x10
c0008e71:	85 c0                	test   eax,eax
c0008e73:	79 1e                	jns    c0008e93 <fmod_one+0x8a>
c0008e75:	b8 00 00 00 00       	mov    eax,0x0
c0008e7a:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c0008e7f:	52                   	push   edx
c0008e80:	50                   	push   eax
c0008e81:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e85:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008e89:	e8 55 b0 01 00       	call   c0023ee3 <__adddf3>
c0008e8e:	83 c4 10             	add    esp,0x10
c0008e91:	eb 08                	jmp    c0008e9b <fmod_one+0x92>
c0008e93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e97:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e9b:	83 c4 2c             	add    esp,0x2c
c0008e9e:	c3                   	ret    

c0008e9f <linear_vari_process>:
c0008e9f:	55                   	push   ebp
c0008ea0:	57                   	push   edi
c0008ea1:	56                   	push   esi
c0008ea2:	53                   	push   ebx
c0008ea3:	83 ec 3c             	sub    esp,0x3c
c0008ea6:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008eaa:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008eb2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008eb6:	0f 8e f7 06 00 00    	jle    c00095b3 <linear_vari_process+0x714>
c0008ebc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ec0:	c7 44 24 28 05 00 00 00 	mov    DWORD PTR [esp+0x28],0x5
c0008ec8:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ecb:	85 db                	test   ebx,ebx
c0008ecd:	0f 84 e0 06 00 00    	je     c00095b3 <linear_vari_process+0x714>
c0008ed3:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ed6:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008eda:	74 19                	je     c0008ef5 <linear_vari_process+0x56>
c0008edc:	31 d2                	xor    edx,edx
c0008ede:	39 c2                	cmp    edx,eax
c0008ee0:	7d 0c                	jge    c0008eee <linear_vari_process+0x4f>
c0008ee2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008ee4:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008ee7:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008eeb:	42                   	inc    edx
c0008eec:	eb f0                	jmp    c0008ede <linear_vari_process+0x3f>
c0008eee:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008ef5:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008ef8:	0f af d0             	imul   edx,eax
c0008efb:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008efe:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008f02:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008f09:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008f0c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008f13:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008f17:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008f1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f1c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f20:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f24:	57                   	push   edi
c0008f25:	57                   	push   edi
c0008f26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f2e:	e8 73 fe ff ff       	call   c0008da6 <is_bad_src_ratio>
c0008f33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0008f37:	83 c4 10             	add    esp,0x10
c0008f3a:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0008f3f:	0f 85 66 06 00 00    	jne    c00095ab <linear_vari_process+0x70c>
c0008f45:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008f49:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008f4c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008f4f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f53:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f57:	68 00 00 f0 3f       	push   0x3ff00000
c0008f5c:	6a 00                	push   0x0
c0008f5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f66:	e8 c4 be 01 00       	call   c0024e2f <__ltdf2>
c0008f6b:	83 c4 10             	add    esp,0x10
c0008f6e:	85 c0                	test   eax,eax
c0008f70:	0f 89 89 02 00 00    	jns    c00091ff <linear_vari_process+0x360>
c0008f76:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008f79:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008f7c:	0f 8d 7d 02 00 00    	jge    c00091ff <linear_vari_process+0x360>
c0008f82:	83 ec 0c             	sub    esp,0xc
c0008f85:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008f88:	e8 36 bc 01 00       	call   c0024bc3 <__floatsidf>
c0008f8d:	83 c4 10             	add    esp,0x10
c0008f90:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f93:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008f97:	68 00 00 f0 3f       	push   0x3ff00000
c0008f9c:	6a 00                	push   0x0
c0008f9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fa6:	e8 38 af 01 00       	call   c0023ee3 <__adddf3>
c0008fab:	83 c4 10             	add    esp,0x10
c0008fae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008fb6:	52                   	push   edx
c0008fb7:	50                   	push   eax
c0008fb8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fbc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fc0:	e8 9b b5 01 00       	call   c0024560 <__muldf3>
c0008fc5:	5d                   	pop    ebp
c0008fc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008fca:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008fce:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008fd1:	e8 ed bb 01 00       	call   c0024bc3 <__floatsidf>
c0008fd6:	83 c4 10             	add    esp,0x10
c0008fd9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008fdd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008fe1:	52                   	push   edx
c0008fe2:	50                   	push   eax
c0008fe3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fe7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008feb:	e8 f3 ae 01 00       	call   c0023ee3 <__adddf3>
c0008ff0:	59                   	pop    ecx
c0008ff1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ff5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008ff9:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008ffc:	e8 c2 bb 01 00       	call   c0024bc3 <__floatsidf>
c0009001:	83 c4 10             	add    esp,0x10
c0009004:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009008:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000900c:	52                   	push   edx
c000900d:	50                   	push   eax
c000900e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009012:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009016:	e8 12 be 01 00       	call   c0024e2d <__gedf2>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	85 c0                	test   eax,eax
c0009020:	0f 89 d9 01 00 00    	jns    c00091ff <linear_vari_process+0x360>
c0009026:	85 ff                	test   edi,edi
c0009028:	0f 8e f4 00 00 00    	jle    c0009122 <linear_vari_process+0x283>
c000902e:	83 ec 10             	sub    esp,0x10
c0009031:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009034:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009037:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000903b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000903e:	ff 30                	push   DWORD PTR [eax]
c0009040:	e8 ef b4 01 00       	call   c0024534 <__subdf3>
c0009045:	83 c4 18             	add    esp,0x18
c0009048:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000904c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009050:	52                   	push   edx
c0009051:	50                   	push   eax
c0009052:	e8 69 bf 01 00       	call   c0024fc0 <fabs>
c0009057:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000905b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000905f:	83 c4 10             	add    esp,0x10
c0009062:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009067:	68 23 42 92 0c       	push   0xc924223
c000906c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009070:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009074:	e8 98 bd 01 00       	call   c0024e11 <__gtdf2>
c0009079:	83 c4 10             	add    esp,0x10
c000907c:	85 c0                	test   eax,eax
c000907e:	0f 8e 9e 00 00 00    	jle    c0009122 <linear_vari_process+0x283>
c0009084:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009088:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000908b:	8b 00                	mov    eax,DWORD PTR [eax]
c000908d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009091:	89 04 24             	mov    DWORD PTR [esp],eax
c0009094:	52                   	push   edx
c0009095:	50                   	push   eax
c0009096:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009099:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000909c:	e8 93 b4 01 00       	call   c0024534 <__subdf3>
c00090a1:	59                   	pop    ecx
c00090a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00090a6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00090aa:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00090ad:	e8 11 bb 01 00       	call   c0024bc3 <__floatsidf>
c00090b2:	83 c4 10             	add    esp,0x10
c00090b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090bd:	52                   	push   edx
c00090be:	50                   	push   eax
c00090bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c7:	e8 94 b4 01 00       	call   c0024560 <__muldf3>
c00090cc:	5f                   	pop    edi
c00090cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00090d1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00090d5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00090d8:	e8 e6 ba 01 00       	call   c0024bc3 <__floatsidf>
c00090dd:	83 c4 10             	add    esp,0x10
c00090e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090e4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00090e8:	52                   	push   edx
c00090e9:	50                   	push   eax
c00090ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090f2:	e8 4d b7 01 00       	call   c0024844 <__divdf3>
c00090f7:	83 c4 10             	add    esp,0x10
c00090fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00090fe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009102:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009106:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000910a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000910e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009112:	e8 cc ad 01 00       	call   c0023ee3 <__adddf3>
c0009117:	83 c4 10             	add    esp,0x10
c000911a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000911e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009122:	31 ff                	xor    edi,edi
c0009124:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009127:	0f 8e 9d 00 00 00    	jle    c00091ca <linear_vari_process+0x32b>
c000912d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009130:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009134:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009137:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000913b:	89 04 24             	mov    DWORD PTR [esp],eax
c000913e:	8b 06                	mov    eax,DWORD PTR [esi]
c0009140:	52                   	push   edx
c0009141:	52                   	push   edx
c0009142:	55                   	push   ebp
c0009143:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009146:	47                   	inc    edi
c0009147:	e8 2c a7 01 00       	call   c0023878 <__subsf3>
c000914c:	89 04 24             	mov    DWORD PTR [esp],eax
c000914f:	e8 03 be 01 00       	call   c0024f57 <__extendsfdf2>
c0009154:	83 c4 10             	add    esp,0x10
c0009157:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000915f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009163:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009167:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000916b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000916f:	e8 ec b3 01 00       	call   c0024560 <__muldf3>
c0009174:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009177:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000917b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000917f:	e8 d3 bd 01 00       	call   c0024f57 <__extendsfdf2>
c0009184:	83 c4 10             	add    esp,0x10
c0009187:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000918b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000918f:	52                   	push   edx
c0009190:	50                   	push   eax
c0009191:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009195:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009199:	e8 45 ad 01 00       	call   c0023ee3 <__adddf3>
c000919e:	59                   	pop    ecx
c000919f:	5d                   	pop    ebp
c00091a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00091a4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00091a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091b0:	e8 7e bc 01 00       	call   c0024e33 <__truncdfsf2>
c00091b5:	83 c4 10             	add    esp,0x10
c00091b8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00091bb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00091bf:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c00091c2:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c00091c5:	e9 5a ff ff ff       	jmp    c0009124 <linear_vari_process+0x285>
c00091ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091d2:	68 00 00 f0 3f       	push   0x3ff00000
c00091d7:	6a 00                	push   0x0
c00091d9:	e8 66 b6 01 00       	call   c0024844 <__divdf3>
c00091de:	83 c4 10             	add    esp,0x10
c00091e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091f2:	e8 ec ac 01 00       	call   c0023ee3 <__adddf3>
c00091f7:	83 c4 10             	add    esp,0x10
c00091fa:	e9 50 fd ff ff       	jmp    c0008f4f <linear_vari_process+0xb0>
c00091ff:	50                   	push   eax
c0009200:	50                   	push   eax
c0009201:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009205:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009209:	e8 fb fb ff ff       	call   c0008e09 <fmod_one>
c000920e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009211:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009215:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009219:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000921d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009221:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009225:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009229:	e8 06 b3 01 00       	call   c0024534 <__subdf3>
c000922e:	83 c4 18             	add    esp,0x18
c0009231:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009235:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009239:	52                   	push   edx
c000923a:	50                   	push   eax
c000923b:	e8 a0 bd 01 00       	call   c0024fe0 <lrint>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	0f af f8             	imul   edi,eax
c0009246:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009249:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000924c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000924f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009252:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009255:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009259:	0f 8d b4 02 00 00    	jge    c0009513 <linear_vari_process+0x674>
c000925f:	83 ec 0c             	sub    esp,0xc
c0009262:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009265:	e8 59 b9 01 00       	call   c0024bc3 <__floatsidf>
c000926a:	83 c4 10             	add    esp,0x10
c000926d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009271:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009275:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009279:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000927d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009281:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009285:	e8 d6 b2 01 00       	call   c0024560 <__muldf3>
c000928a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000928d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009291:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009295:	e8 29 b9 01 00       	call   c0024bc3 <__floatsidf>
c000929a:	83 c4 10             	add    esp,0x10
c000929d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092a1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092a5:	52                   	push   edx
c00092a6:	50                   	push   eax
c00092a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092af:	e8 2f ac 01 00       	call   c0023ee3 <__adddf3>
c00092b4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092bb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092bf:	e8 ff b8 01 00       	call   c0024bc3 <__floatsidf>
c00092c4:	83 c4 10             	add    esp,0x10
c00092c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092cb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092cf:	52                   	push   edx
c00092d0:	50                   	push   eax
c00092d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d9:	e8 51 bb 01 00       	call   c0024e2f <__ltdf2>
c00092de:	83 c4 10             	add    esp,0x10
c00092e1:	85 c0                	test   eax,eax
c00092e3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00092e7:	0f 89 26 02 00 00    	jns    c0009513 <linear_vari_process+0x674>
c00092ed:	85 c9                	test   ecx,ecx
c00092ef:	0f 8e f5 00 00 00    	jle    c00093ea <linear_vari_process+0x54b>
c00092f5:	83 ec 10             	sub    esp,0x10
c00092f8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092fb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00092fe:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0009302:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009305:	ff 30                	push   DWORD PTR [eax]
c0009307:	e8 28 b2 01 00       	call   c0024534 <__subdf3>
c000930c:	83 c4 18             	add    esp,0x18
c000930f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009313:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009317:	52                   	push   edx
c0009318:	50                   	push   eax
c0009319:	e8 a2 bc 01 00       	call   c0024fc0 <fabs>
c000931e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009322:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009326:	83 c4 10             	add    esp,0x10
c0009329:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000932e:	68 23 42 92 0c       	push   0xc924223
c0009333:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009337:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000933b:	e8 d1 ba 01 00       	call   c0024e11 <__gtdf2>
c0009340:	83 c4 10             	add    esp,0x10
c0009343:	85 c0                	test   eax,eax
c0009345:	0f 8e 9f 00 00 00    	jle    c00093ea <linear_vari_process+0x54b>
c000934b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000934f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009352:	8b 00                	mov    eax,DWORD PTR [eax]
c0009354:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009358:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000935c:	52                   	push   edx
c000935d:	50                   	push   eax
c000935e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009361:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009364:	e8 cb b1 01 00       	call   c0024534 <__subdf3>
c0009369:	5f                   	pop    edi
c000936a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000936e:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009372:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009375:	e8 49 b8 01 00       	call   c0024bc3 <__floatsidf>
c000937a:	83 c4 10             	add    esp,0x10
c000937d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009381:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009385:	52                   	push   edx
c0009386:	50                   	push   eax
c0009387:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000938b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000938f:	e8 cc b1 01 00       	call   c0024560 <__muldf3>
c0009394:	5d                   	pop    ebp
c0009395:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009399:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000939d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00093a0:	e8 1e b8 01 00       	call   c0024bc3 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093ac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093ba:	e8 85 b4 01 00       	call   c0024844 <__divdf3>
c00093bf:	83 c4 10             	add    esp,0x10
c00093c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093da:	e8 04 ab 01 00       	call   c0023ee3 <__adddf3>
c00093df:	83 c4 10             	add    esp,0x10
c00093e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ea:	31 ff                	xor    edi,edi
c00093ec:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00093ef:	39 f8                	cmp    eax,edi
c00093f1:	0f 8e ac 00 00 00    	jle    c00094a3 <linear_vari_process+0x604>
c00093f7:	8b 16                	mov    edx,DWORD PTR [esi]
c00093f9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00093fc:	29 c1                	sub    ecx,eax
c00093fe:	89 c8                	mov    eax,ecx
c0009400:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009403:	01 f8                	add    eax,edi
c0009405:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009409:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000940c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000940f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009413:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009416:	51                   	push   ecx
c0009417:	01 f8                	add    eax,edi
c0009419:	51                   	push   ecx
c000941a:	47                   	inc    edi
c000941b:	55                   	push   ebp
c000941c:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000941f:	e8 54 a4 01 00       	call   c0023878 <__subsf3>
c0009424:	89 04 24             	mov    DWORD PTR [esp],eax
c0009427:	e8 2b bb 01 00       	call   c0024f57 <__extendsfdf2>
c000942c:	83 c4 10             	add    esp,0x10
c000942f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009433:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009437:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000943b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000943f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009443:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009447:	e8 14 b1 01 00       	call   c0024560 <__muldf3>
c000944c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000944f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009453:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009457:	e8 fb ba 01 00       	call   c0024f57 <__extendsfdf2>
c000945c:	83 c4 10             	add    esp,0x10
c000945f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009463:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009467:	52                   	push   edx
c0009468:	50                   	push   eax
c0009469:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000946d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009471:	e8 6d aa 01 00       	call   c0023ee3 <__adddf3>
c0009476:	5d                   	pop    ebp
c0009477:	59                   	pop    ecx
c0009478:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000947c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009480:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009484:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009488:	e8 a6 b9 01 00       	call   c0024e33 <__truncdfsf2>
c000948d:	83 c4 10             	add    esp,0x10
c0009490:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009494:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009498:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000949b:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000949e:	e9 49 ff ff ff       	jmp    c00093ec <linear_vari_process+0x54d>
c00094a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ab:	68 00 00 f0 3f       	push   0x3ff00000
c00094b0:	6a 00                	push   0x0
c00094b2:	e8 8d b3 01 00       	call   c0024844 <__divdf3>
c00094b7:	83 c4 10             	add    esp,0x10
c00094ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00094be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00094c2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094c6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00094ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094d2:	e8 0c aa 01 00       	call   c0023ee3 <__adddf3>
c00094d7:	59                   	pop    ecx
c00094d8:	5f                   	pop    edi
c00094d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094dd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094e9:	e8 1b f9 ff ff       	call   c0008e09 <fmod_one>
c00094ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094f5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009501:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009505:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009509:	e8 26 b0 01 00       	call   c0024534 <__subdf3>
c000950e:	e9 1b fd ff ff       	jmp    c000922e <linear_vari_process+0x38f>
c0009513:	39 fd                	cmp    ebp,edi
c0009515:	7d 38                	jge    c000954f <linear_vari_process+0x6b0>
c0009517:	83 ec 0c             	sub    esp,0xc
c000951a:	89 f8                	mov    eax,edi
c000951c:	29 e8                	sub    eax,ebp
c000951e:	99                   	cdq    
c000951f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009522:	50                   	push   eax
c0009523:	e8 9b b6 01 00       	call   c0024bc3 <__floatsidf>
c0009528:	83 c4 10             	add    esp,0x10
c000952b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000952f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009533:	52                   	push   edx
c0009534:	50                   	push   eax
c0009535:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009539:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000953d:	e8 a1 a9 01 00       	call   c0023ee3 <__adddf3>
c0009542:	83 c4 10             	add    esp,0x10
c0009545:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009548:	89 04 24             	mov    DWORD PTR [esp],eax
c000954b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000954f:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009553:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009556:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000955a:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000955d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009560:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009563:	85 c0                	test   eax,eax
c0009565:	7f 27                	jg     c000958e <linear_vari_process+0x6ef>
c0009567:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000956b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000956f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009573:	89 01                	mov    DWORD PTR [ecx],eax
c0009575:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009578:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000957b:	99                   	cdq    
c000957c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000957f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009582:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009585:	99                   	cdq    
c0009586:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009589:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000958c:	eb 25                	jmp    c00095b3 <linear_vari_process+0x714>
c000958e:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0009591:	31 d2                	xor    edx,edx
c0009593:	29 c8                	sub    eax,ecx
c0009595:	c1 e0 02             	shl    eax,0x2
c0009598:	39 d1                	cmp    ecx,edx
c000959a:	7e cb                	jle    c0009567 <linear_vari_process+0x6c8>
c000959c:	8b 3e                	mov    edi,DWORD PTR [esi]
c000959e:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00095a1:	83 c0 04             	add    eax,0x4
c00095a4:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095a8:	42                   	inc    edx
c00095a9:	eb ed                	jmp    c0009598 <linear_vari_process+0x6f9>
c00095ab:	c7 44 24 28 16 00 00 00 	mov    DWORD PTR [esp+0x28],0x16
c00095b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00095b7:	83 c4 3c             	add    esp,0x3c
c00095ba:	5b                   	pop    ebx
c00095bb:	5e                   	pop    esi
c00095bc:	5f                   	pop    edi
c00095bd:	5d                   	pop    ebp
c00095be:	c3                   	ret    

c00095bf <linear_reset>:
c00095bf:	83 ec 0c             	sub    esp,0xc
c00095c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095c6:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095c9:	85 c0                	test   eax,eax
c00095cb:	74 20                	je     c00095ed <linear_reset+0x2e>
c00095cd:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095d0:	83 c0 1c             	add    eax,0x1c
c00095d3:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095d6:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095dd:	c1 e2 02             	shl    edx,0x2
c00095e0:	51                   	push   ecx
c00095e1:	52                   	push   edx
c00095e2:	6a 00                	push   0x0
c00095e4:	50                   	push   eax
c00095e5:	e8 e2 70 ff ff       	call   c00006cc <memset>
c00095ea:	83 c4 10             	add    esp,0x10
c00095ed:	83 c4 0c             	add    esp,0xc
c00095f0:	c3                   	ret    

c00095f1 <linear_get_name>:
c00095f1:	31 c0                	xor    eax,eax
c00095f3:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095f8:	75 05                	jne    c00095ff <linear_get_name+0xe>
c00095fa:	b8 20 67 02 c0       	mov    eax,0xc0026720
c00095ff:	c3                   	ret    

c0009600 <linear_get_description>:
c0009600:	31 c0                	xor    eax,eax
c0009602:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009607:	75 05                	jne    c000960e <linear_get_description+0xe>
c0009609:	b8 34 67 02 c0       	mov    eax,0xc0026734
c000960e:	c3                   	ret    

c000960f <linear_set_converter>:
c000960f:	53                   	push   ebx
c0009610:	b8 0a 00 00 00       	mov    eax,0xa
c0009615:	83 ec 08             	sub    esp,0x8
c0009618:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000961c:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009621:	75 6e                	jne    c0009691 <linear_set_converter+0x82>
c0009623:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009626:	85 c0                	test   eax,eax
c0009628:	74 13                	je     c000963d <linear_set_converter+0x2e>
c000962a:	83 ec 0c             	sub    esp,0xc
c000962d:	50                   	push   eax
c000962e:	e8 23 5b 00 00       	call   c000f156 <free>
c0009633:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000963a:	83 c4 10             	add    esp,0x10
c000963d:	50                   	push   eax
c000963e:	50                   	push   eax
c000963f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009642:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009649:	50                   	push   eax
c000964a:	6a 01                	push   0x1
c000964c:	e8 25 5b 00 00       	call   c000f176 <calloc>
c0009651:	83 c4 10             	add    esp,0x10
c0009654:	89 c2                	mov    edx,eax
c0009656:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009659:	85 d2                	test   edx,edx
c000965b:	b8 01 00 00 00       	mov    eax,0x1
c0009660:	74 2f                	je     c0009691 <linear_set_converter+0x82>
c0009662:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009665:	83 ec 0c             	sub    esp,0xc
c0009668:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000966b:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009671:	c7 43 24 9f 8e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008e9f
c0009678:	c7 43 20 9f 8e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008e9f
c000967f:	c7 43 28 bf 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095bf
c0009686:	53                   	push   ebx
c0009687:	e8 33 ff ff ff       	call   c00095bf <linear_reset>
c000968c:	83 c4 10             	add    esp,0x10
c000968f:	31 c0                	xor    eax,eax
c0009691:	83 c4 08             	add    esp,0x8
c0009694:	5b                   	pop    ebx
c0009695:	c3                   	ret    

c0009696 <is_bad_src_ratio>:
c0009696:	83 ec 1c             	sub    esp,0x1c
c0009699:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000969d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00096a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00096a9:	b8 00 00 00 00       	mov    eax,0x0
c00096ae:	ba 00 00 70 3f       	mov    edx,0x3f700000
c00096b3:	52                   	push   edx
c00096b4:	50                   	push   eax
c00096b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bd:	e8 6d b7 01 00       	call   c0024e2f <__ltdf2>
c00096c2:	83 c4 10             	add    esp,0x10
c00096c5:	85 c0                	test   eax,eax
c00096c7:	78 20                	js     c00096e9 <is_bad_src_ratio+0x53>
c00096c9:	b8 00 00 00 00       	mov    eax,0x0
c00096ce:	ba 00 00 70 40       	mov    edx,0x40700000
c00096d3:	52                   	push   edx
c00096d4:	50                   	push   eax
c00096d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096dd:	e8 2f b7 01 00       	call   c0024e11 <__gtdf2>
c00096e2:	83 c4 10             	add    esp,0x10
c00096e5:	85 c0                	test   eax,eax
c00096e7:	7e 07                	jle    c00096f0 <is_bad_src_ratio+0x5a>
c00096e9:	b8 01 00 00 00       	mov    eax,0x1
c00096ee:	eb 05                	jmp    c00096f5 <is_bad_src_ratio+0x5f>
c00096f0:	b8 00 00 00 00       	mov    eax,0x0
c00096f5:	83 c4 1c             	add    esp,0x1c
c00096f8:	c3                   	ret    

c00096f9 <int_to_fp>:
c00096f9:	c1 e0 0c             	shl    eax,0xc
c00096fc:	c3                   	ret    

c00096fd <fp_to_int>:
c00096fd:	c1 f8 0c             	sar    eax,0xc
c0009700:	c3                   	ret    

c0009701 <fp_fraction_part>:
c0009701:	25 ff 0f 00 00       	and    eax,0xfff
c0009706:	c3                   	ret    

c0009707 <fp_to_double>:
c0009707:	83 ec 1c             	sub    esp,0x1c
c000970a:	e8 f2 ff ff ff       	call   c0009701 <fp_fraction_part>
c000970f:	83 ec 0c             	sub    esp,0xc
c0009712:	50                   	push   eax
c0009713:	e8 ab b4 01 00       	call   c0024bc3 <__floatsidf>
c0009718:	83 c4 10             	add    esp,0x10
c000971b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000971f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009723:	68 00 00 30 3f       	push   0x3f300000
c0009728:	6a 00                	push   0x0
c000972a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000972e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009732:	e8 29 ae 01 00       	call   c0024560 <__muldf3>
c0009737:	83 c4 2c             	add    esp,0x2c
c000973a:	c3                   	ret    

c000973b <calc_output_single>:
c000973b:	55                   	push   ebp
c000973c:	57                   	push   edi
c000973d:	56                   	push   esi
c000973e:	89 c6                	mov    esi,eax
c0009740:	53                   	push   ebx
c0009741:	89 d3                	mov    ebx,edx
c0009743:	83 ec 4c             	sub    esp,0x4c
c0009746:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000974a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000974d:	e8 a7 ff ff ff       	call   c00096f9 <int_to_fp>
c0009752:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009755:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009759:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000975d:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009761:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009764:	99                   	cdq    
c0009765:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000976d:	f7 fb                	idiv   ebx
c000976f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009777:	89 da                	mov    edx,ebx
c0009779:	0f af d0             	imul   edx,eax
c000977c:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009780:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009784:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009788:	29 c2                	sub    edx,eax
c000978a:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000978d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009791:	83 c5 04             	add    ebp,0x4
c0009794:	e8 6e ff ff ff       	call   c0009707 <fp_to_double>
c0009799:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000979d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097a5:	e8 53 ff ff ff       	call   c00096fd <fp_to_int>
c00097aa:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c00097ad:	52                   	push   edx
c00097ae:	52                   	push   edx
c00097af:	51                   	push   ecx
c00097b0:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c00097b4:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00097b8:	e8 bb a0 01 00       	call   c0023878 <__subsf3>
c00097bd:	89 04 24             	mov    DWORD PTR [esp],eax
c00097c0:	e8 92 b7 01 00       	call   c0024f57 <__extendsfdf2>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097cc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097d8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097dc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00097e0:	e8 7b ad 01 00       	call   c0024560 <__muldf3>
c00097e5:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00097e9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00097ed:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00097f0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00097f4:	e8 5e b7 01 00       	call   c0024f57 <__extendsfdf2>
c00097f9:	83 c4 10             	add    esp,0x10
c00097fc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009800:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009804:	52                   	push   edx
c0009805:	50                   	push   eax
c0009806:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000980a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000980e:	e8 d0 a6 01 00       	call   c0023ee3 <__adddf3>
c0009813:	59                   	pop    ecx
c0009814:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009818:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000981c:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009822:	e8 30 b7 01 00       	call   c0024f57 <__extendsfdf2>
c0009827:	83 c4 10             	add    esp,0x10
c000982a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000982e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009832:	52                   	push   edx
c0009833:	50                   	push   eax
c0009834:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009838:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000983c:	e8 1f ad 01 00       	call   c0024560 <__muldf3>
c0009841:	83 c4 10             	add    esp,0x10
c0009844:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009848:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000984c:	52                   	push   edx
c000984d:	50                   	push   eax
c000984e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009852:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009856:	e8 88 a6 01 00       	call   c0023ee3 <__adddf3>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009862:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009866:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c000986a:	0f 89 1d ff ff ff    	jns    c000978d <calc_output_single+0x52>
c0009870:	89 d9                	mov    ecx,ebx
c0009872:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009876:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000987a:	89 dd                	mov    ebp,ebx
c000987c:	29 c8                	sub    eax,ecx
c000987e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009886:	99                   	cdq    
c0009887:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000988f:	f7 fb                	idiv   ebx
c0009891:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009895:	0f af e8             	imul   ebp,eax
c0009898:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000989c:	01 cd                	add    ebp,ecx
c000989e:	8d 34 86             	lea    esi,[esi+eax*4]
c00098a1:	89 e8                	mov    eax,ebp
c00098a3:	83 ee 04             	sub    esi,0x4
c00098a6:	e8 5c fe ff ff       	call   c0009707 <fp_to_double>
c00098ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098b3:	89 e8                	mov    eax,ebp
c00098b5:	29 dd                	sub    ebp,ebx
c00098b7:	e8 41 fe ff ff       	call   c00096fd <fp_to_int>
c00098bc:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c00098bf:	52                   	push   edx
c00098c0:	52                   	push   edx
c00098c1:	51                   	push   ecx
c00098c2:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c00098c6:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00098ca:	e8 a9 9f 01 00       	call   c0023878 <__subsf3>
c00098cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00098d2:	e8 80 b6 01 00       	call   c0024f57 <__extendsfdf2>
c00098d7:	83 c4 10             	add    esp,0x10
c00098da:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098de:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098ea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098f2:	e8 69 ac 01 00       	call   c0024560 <__muldf3>
c00098f7:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00098fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00098ff:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009902:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009906:	e8 4c b6 01 00       	call   c0024f57 <__extendsfdf2>
c000990b:	83 c4 10             	add    esp,0x10
c000990e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009912:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009916:	52                   	push   edx
c0009917:	50                   	push   eax
c0009918:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000991c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009920:	e8 be a5 01 00       	call   c0023ee3 <__adddf3>
c0009925:	59                   	pop    ecx
c0009926:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000992a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000992e:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009934:	e8 1e b6 01 00       	call   c0024f57 <__extendsfdf2>
c0009939:	83 c4 10             	add    esp,0x10
c000993c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009940:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009944:	52                   	push   edx
c0009945:	50                   	push   eax
c0009946:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000994a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000994e:	e8 0d ac 01 00       	call   c0024560 <__muldf3>
c0009953:	83 c4 10             	add    esp,0x10
c0009956:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000995a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000995e:	52                   	push   edx
c000995f:	50                   	push   eax
c0009960:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009968:	e8 76 a5 01 00       	call   c0023ee3 <__adddf3>
c000996d:	83 c4 10             	add    esp,0x10
c0009970:	85 ed                	test   ebp,ebp
c0009972:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009976:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000997a:	0f 8f 21 ff ff ff    	jg     c00098a1 <calc_output_single+0x166>
c0009980:	52                   	push   edx
c0009981:	50                   	push   eax
c0009982:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009986:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000998a:	e8 54 a5 01 00       	call   c0023ee3 <__adddf3>
c000998f:	83 c4 5c             	add    esp,0x5c
c0009992:	5b                   	pop    ebx
c0009993:	5e                   	pop    esi
c0009994:	5f                   	pop    edi
c0009995:	5d                   	pop    ebp
c0009996:	c3                   	ret    

c0009997 <calc_output_stereo>:
c0009997:	55                   	push   ebp
c0009998:	89 cd                	mov    ebp,ecx
c000999a:	57                   	push   edi
c000999b:	56                   	push   esi
c000999c:	53                   	push   ebx
c000999d:	89 c3                	mov    ebx,eax
c000999f:	83 ec 6c             	sub    esp,0x6c
c00099a2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099a6:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00099ad:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c00099b4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00099b8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00099bc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00099bf:	e8 35 fd ff ff       	call   c00096f9 <int_to_fp>
c00099c4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00099cc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099d0:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00099d8:	29 c8                	sub    eax,ecx
c00099da:	99                   	cdq    
c00099db:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c00099df:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00099e3:	0f af d0             	imul   edx,eax
c00099e6:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00099e9:	31 d2                	xor    edx,edx
c00099eb:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00099ef:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00099f3:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c00099f6:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00099fa:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c00099fd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009a01:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009a05:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009a08:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009a0d:	29 c1                	sub    ecx,eax
c0009a0f:	31 c0                	xor    eax,eax
c0009a11:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009a14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009a18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a1c:	83 c7 08             	add    edi,0x8
c0009a1f:	e8 e3 fc ff ff       	call   c0009707 <fp_to_double>
c0009a24:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009a28:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009a2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a30:	e8 c8 fc ff ff       	call   c00096fd <fp_to_int>
c0009a35:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009a38:	52                   	push   edx
c0009a39:	52                   	push   edx
c0009a3a:	51                   	push   ecx
c0009a3b:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009a3f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009a43:	e8 30 9e 01 00       	call   c0023878 <__subsf3>
c0009a48:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a4b:	e8 07 b5 01 00       	call   c0024f57 <__extendsfdf2>
c0009a50:	83 c4 10             	add    esp,0x10
c0009a53:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a57:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a5b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a5f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a63:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a67:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a6b:	e8 f0 aa 01 00       	call   c0024560 <__muldf3>
c0009a70:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a74:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a78:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a7b:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a7f:	e8 d3 b4 01 00       	call   c0024f57 <__extendsfdf2>
c0009a84:	83 c4 10             	add    esp,0x10
c0009a87:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a8b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a8f:	52                   	push   edx
c0009a90:	50                   	push   eax
c0009a91:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a95:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a99:	e8 45 a4 01 00       	call   c0023ee3 <__adddf3>
c0009a9e:	59                   	pop    ecx
c0009a9f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009aa3:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009aa7:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009aad:	e8 a5 b4 01 00       	call   c0024f57 <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ab9:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009abd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ac1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ac5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ac9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009acd:	e8 8e aa 01 00       	call   c0024560 <__muldf3>
c0009ad2:	83 c4 10             	add    esp,0x10
c0009ad5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ad9:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009add:	52                   	push   edx
c0009ade:	50                   	push   eax
c0009adf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ae3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ae7:	e8 f7 a3 01 00       	call   c0023ee3 <__adddf3>
c0009aec:	59                   	pop    ecx
c0009aed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009af1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009af5:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009afb:	e8 57 b4 01 00       	call   c0024f57 <__extendsfdf2>
c0009b00:	83 c4 10             	add    esp,0x10
c0009b03:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009b07:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009b0b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009b0f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009b13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009b17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009b1b:	e8 40 aa 01 00       	call   c0024560 <__muldf3>
c0009b20:	83 c4 10             	add    esp,0x10
c0009b23:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009b27:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009b2b:	52                   	push   edx
c0009b2c:	50                   	push   eax
c0009b2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009b35:	e8 a9 a3 01 00       	call   c0023ee3 <__adddf3>
c0009b3a:	83 c4 10             	add    esp,0x10
c0009b3d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009b41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b45:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b49:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009b4d:	0f 89 c5 fe ff ff    	jns    c0009a18 <calc_output_stereo+0x81>
c0009b53:	29 e9                	sub    ecx,ebp
c0009b55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009b59:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009b5d:	29 c8                	sub    eax,ecx
c0009b5f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009b67:	99                   	cdq    
c0009b68:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b6c:	31 d2                	xor    edx,edx
c0009b6e:	0f af f8             	imul   edi,eax
c0009b71:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b75:	40                   	inc    eax
c0009b76:	01 cf                	add    edi,ecx
c0009b78:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b7d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b81:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b89:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b8c:	31 c0                	xor    eax,eax
c0009b8e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b92:	89 f8                	mov    eax,edi
c0009b94:	83 eb 08             	sub    ebx,0x8
c0009b97:	e8 6b fb ff ff       	call   c0009707 <fp_to_double>
c0009b9c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009ba0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009ba4:	89 f8                	mov    eax,edi
c0009ba6:	e8 52 fb ff ff       	call   c00096fd <fp_to_int>
c0009bab:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009bae:	52                   	push   edx
c0009baf:	52                   	push   edx
c0009bb0:	55                   	push   ebp
c0009bb1:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bb5:	e8 be 9c 01 00       	call   c0023878 <__subsf3>
c0009bba:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bbd:	e8 95 b3 01 00       	call   c0024f57 <__extendsfdf2>
c0009bc2:	83 c4 10             	add    esp,0x10
c0009bc5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bc9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bcd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bd1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bd5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bd9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bdd:	e8 7e a9 01 00       	call   c0024560 <__muldf3>
c0009be2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009be5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009be9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009bed:	e8 65 b3 01 00       	call   c0024f57 <__extendsfdf2>
c0009bf2:	83 c4 10             	add    esp,0x10
c0009bf5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bf9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bfd:	52                   	push   edx
c0009bfe:	50                   	push   eax
c0009bff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009c03:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009c07:	e8 d7 a2 01 00       	call   c0023ee3 <__adddf3>
c0009c0c:	59                   	pop    ecx
c0009c0d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009c11:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009c15:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009c1b:	e8 37 b3 01 00       	call   c0024f57 <__extendsfdf2>
c0009c20:	83 c4 10             	add    esp,0x10
c0009c23:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c27:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c2b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c37:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c3b:	e8 20 a9 01 00       	call   c0024560 <__muldf3>
c0009c40:	83 c4 10             	add    esp,0x10
c0009c43:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c47:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c4b:	52                   	push   edx
c0009c4c:	50                   	push   eax
c0009c4d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c51:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009c55:	e8 89 a2 01 00       	call   c0023ee3 <__adddf3>
c0009c5a:	5d                   	pop    ebp
c0009c5b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009c5f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009c63:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009c69:	e8 e9 b2 01 00       	call   c0024f57 <__extendsfdf2>
c0009c6e:	83 c4 10             	add    esp,0x10
c0009c71:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c75:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c81:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c85:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c89:	e8 d2 a8 01 00       	call   c0024560 <__muldf3>
c0009c8e:	83 c4 10             	add    esp,0x10
c0009c91:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c95:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c99:	52                   	push   edx
c0009c9a:	50                   	push   eax
c0009c9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009ca3:	e8 3b a2 01 00       	call   c0023ee3 <__adddf3>
c0009ca8:	83 c4 10             	add    esp,0x10
c0009cab:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009caf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cb3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009cb7:	85 ff                	test   edi,edi
c0009cb9:	0f 8f d3 fe ff ff    	jg     c0009b92 <calc_output_stereo+0x1fb>
c0009cbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ccb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ccf:	e8 0f a2 01 00       	call   c0023ee3 <__adddf3>
c0009cd4:	83 c4 10             	add    esp,0x10
c0009cd7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cdb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cdf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ce3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cef:	e8 6c a8 01 00       	call   c0024560 <__muldf3>
c0009cf4:	59                   	pop    ecx
c0009cf5:	5b                   	pop    ebx
c0009cf6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009cfa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009cfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d06:	e8 28 b1 01 00       	call   c0024e33 <__truncdfsf2>
c0009d0b:	83 c4 10             	add    esp,0x10
c0009d0e:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009d15:	89 03                	mov    DWORD PTR [ebx],eax
c0009d17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d27:	e8 b7 a1 01 00       	call   c0023ee3 <__adddf3>
c0009d2c:	83 c4 10             	add    esp,0x10
c0009d2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d33:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d37:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d3b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d47:	e8 14 a8 01 00       	call   c0024560 <__muldf3>
c0009d4c:	5e                   	pop    esi
c0009d4d:	5f                   	pop    edi
c0009d4e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d52:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d5e:	e8 d0 b0 01 00       	call   c0024e33 <__truncdfsf2>
c0009d63:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009d6a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009d6d:	83 c4 7c             	add    esp,0x7c
c0009d70:	5b                   	pop    ebx
c0009d71:	5e                   	pop    esi
c0009d72:	5f                   	pop    edi
c0009d73:	5d                   	pop    ebp
c0009d74:	c3                   	ret    

c0009d75 <calc_output_quad>:
c0009d75:	55                   	push   ebp
c0009d76:	57                   	push   edi
c0009d77:	56                   	push   esi
c0009d78:	89 c6                	mov    esi,eax
c0009d7a:	53                   	push   ebx
c0009d7b:	83 ec 7c             	sub    esp,0x7c
c0009d7e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d82:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d86:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d8d:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d94:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d98:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d9c:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d9f:	e8 55 f9 ff ff       	call   c00096f9 <int_to_fp>
c0009da4:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009da7:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009daa:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009dae:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009db2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009db6:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009dba:	99                   	cdq    
c0009dbb:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009dbf:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009dc3:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009dc6:	31 d2                	xor    edx,edx
c0009dc8:	0f af d8             	imul   ebx,eax
c0009dcb:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009dd3:	0f af c7             	imul   eax,edi
c0009dd6:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009dda:	29 c1                	sub    ecx,eax
c0009ddc:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009de4:	31 c0                	xor    eax,eax
c0009de6:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009de9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009ded:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009df1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009df5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009dfd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009e01:	89 d8                	mov    eax,ebx
c0009e03:	83 c7 10             	add    edi,0x10
c0009e06:	e8 fc f8 ff ff       	call   c0009707 <fp_to_double>
c0009e0b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009e0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e13:	89 d8                	mov    eax,ebx
c0009e15:	e8 e3 f8 ff ff       	call   c00096fd <fp_to_int>
c0009e1a:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009e1e:	52                   	push   edx
c0009e1f:	52                   	push   edx
c0009e20:	51                   	push   ecx
c0009e21:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009e25:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009e29:	e8 4a 9a 01 00       	call   c0023878 <__subsf3>
c0009e2e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009e31:	e8 21 b1 01 00       	call   c0024f57 <__extendsfdf2>
c0009e36:	83 c4 10             	add    esp,0x10
c0009e39:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e3d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e49:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e4d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e51:	e8 0a a7 01 00       	call   c0024560 <__muldf3>
c0009e56:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009e5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e61:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e65:	e8 ed b0 01 00       	call   c0024f57 <__extendsfdf2>
c0009e6a:	83 c4 10             	add    esp,0x10
c0009e6d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e71:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e75:	52                   	push   edx
c0009e76:	50                   	push   eax
c0009e77:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e7f:	e8 5f a0 01 00       	call   c0023ee3 <__adddf3>
c0009e84:	59                   	pop    ecx
c0009e85:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e89:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e8d:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e93:	e8 bf b0 01 00       	call   c0024f57 <__extendsfdf2>
c0009e98:	83 c4 10             	add    esp,0x10
c0009e9b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e9f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ea3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eab:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009eaf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009eb3:	e8 a8 a6 01 00       	call   c0024560 <__muldf3>
c0009eb8:	83 c4 10             	add    esp,0x10
c0009ebb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ebf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ec3:	52                   	push   edx
c0009ec4:	50                   	push   eax
c0009ec5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ecd:	e8 11 a0 01 00       	call   c0023ee3 <__adddf3>
c0009ed2:	59                   	pop    ecx
c0009ed3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009ed7:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009edb:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009ee1:	e8 71 b0 01 00       	call   c0024f57 <__extendsfdf2>
c0009ee6:	83 c4 10             	add    esp,0x10
c0009ee9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ef5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ef9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009efd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f01:	e8 5a a6 01 00       	call   c0024560 <__muldf3>
c0009f06:	83 c4 10             	add    esp,0x10
c0009f09:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f0d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f11:	52                   	push   edx
c0009f12:	50                   	push   eax
c0009f13:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f17:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1b:	e8 c3 9f 01 00       	call   c0023ee3 <__adddf3>
c0009f20:	59                   	pop    ecx
c0009f21:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009f25:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009f29:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009f2f:	e8 23 b0 01 00       	call   c0024f57 <__extendsfdf2>
c0009f34:	83 c4 10             	add    esp,0x10
c0009f37:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f3b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f47:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f4b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f4f:	e8 0c a6 01 00       	call   c0024560 <__muldf3>
c0009f54:	83 c4 10             	add    esp,0x10
c0009f57:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f5b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f5f:	52                   	push   edx
c0009f60:	50                   	push   eax
c0009f61:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f65:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f69:	e8 75 9f 01 00       	call   c0023ee3 <__adddf3>
c0009f6e:	59                   	pop    ecx
c0009f6f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f73:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f77:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f7d:	e8 d5 af 01 00       	call   c0024f57 <__extendsfdf2>
c0009f82:	83 c4 10             	add    esp,0x10
c0009f85:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f89:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f95:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f99:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f9d:	e8 be a5 01 00       	call   c0024560 <__muldf3>
c0009fa2:	83 c4 10             	add    esp,0x10
c0009fa5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fa9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fad:	52                   	push   edx
c0009fae:	50                   	push   eax
c0009faf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009fb3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009fb7:	e8 27 9f 01 00       	call   c0023ee3 <__adddf3>
c0009fbc:	83 c4 10             	add    esp,0x10
c0009fbf:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009fc3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009fc7:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009fcb:	0f 89 30 fe ff ff    	jns    c0009e01 <calc_output_quad+0x8c>
c0009fd1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009fd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fd9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009fdd:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009fe1:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009fe9:	29 c8                	sub    eax,ecx
c0009feb:	99                   	cdq    
c0009fec:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009ff0:	31 d2                	xor    edx,edx
c0009ff2:	0f af d8             	imul   ebx,eax
c0009ff5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ff9:	40                   	inc    eax
c0009ffa:	01 cb                	add    ebx,ecx
c0009ffc:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a001:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a005:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a009:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00d:	8d 34 86             	lea    esi,[esi+eax*4]
c000a010:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a018:	31 c0                	xor    eax,eax
c000a01a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a01e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a022:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a026:	89 d8                	mov    eax,ebx
c000a028:	83 ee 10             	sub    esi,0x10
c000a02b:	e8 d7 f6 ff ff       	call   c0009707 <fp_to_double>
c000a030:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a034:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a038:	89 d8                	mov    eax,ebx
c000a03a:	e8 be f6 ff ff       	call   c00096fd <fp_to_int>
c000a03f:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a043:	52                   	push   edx
c000a044:	52                   	push   edx
c000a045:	57                   	push   edi
c000a046:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a04a:	e8 29 98 01 00       	call   c0023878 <__subsf3>
c000a04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a052:	e8 00 af 01 00       	call   c0024f57 <__extendsfdf2>
c000a057:	83 c4 10             	add    esp,0x10
c000a05a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a05e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a06a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a06e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a072:	e8 e9 a4 01 00       	call   c0024560 <__muldf3>
c000a077:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a07a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a07e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a082:	e8 d0 ae 01 00       	call   c0024f57 <__extendsfdf2>
c000a087:	83 c4 10             	add    esp,0x10
c000a08a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a08e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a092:	52                   	push   edx
c000a093:	50                   	push   eax
c000a094:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a098:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a09c:	e8 42 9e 01 00       	call   c0023ee3 <__adddf3>
c000a0a1:	59                   	pop    ecx
c000a0a2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a0a6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a0aa:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a0b0:	e8 a2 ae 01 00       	call   c0024f57 <__extendsfdf2>
c000a0b5:	83 c4 10             	add    esp,0x10
c000a0b8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0bc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0c8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0cc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0d0:	e8 8b a4 01 00       	call   c0024560 <__muldf3>
c000a0d5:	83 c4 10             	add    esp,0x10
c000a0d8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0dc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e0:	52                   	push   edx
c000a0e1:	50                   	push   eax
c000a0e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a0ea:	e8 f4 9d 01 00       	call   c0023ee3 <__adddf3>
c000a0ef:	5f                   	pop    edi
c000a0f0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a0f4:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a0f8:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a0fe:	e8 54 ae 01 00       	call   c0024f57 <__extendsfdf2>
c000a103:	83 c4 10             	add    esp,0x10
c000a106:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a10a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a10e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a116:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a11a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a11e:	e8 3d a4 01 00       	call   c0024560 <__muldf3>
c000a123:	83 c4 10             	add    esp,0x10
c000a126:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a12a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a12e:	52                   	push   edx
c000a12f:	50                   	push   eax
c000a130:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a134:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a138:	e8 a6 9d 01 00       	call   c0023ee3 <__adddf3>
c000a13d:	59                   	pop    ecx
c000a13e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a142:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a146:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a14c:	e8 06 ae 01 00       	call   c0024f57 <__extendsfdf2>
c000a151:	83 c4 10             	add    esp,0x10
c000a154:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a158:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a15c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a160:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a164:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a168:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a16c:	e8 ef a3 01 00       	call   c0024560 <__muldf3>
c000a171:	83 c4 10             	add    esp,0x10
c000a174:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a178:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a17c:	52                   	push   edx
c000a17d:	50                   	push   eax
c000a17e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a182:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a186:	e8 58 9d 01 00       	call   c0023ee3 <__adddf3>
c000a18b:	5f                   	pop    edi
c000a18c:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a190:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a194:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a19a:	e8 b8 ad 01 00       	call   c0024f57 <__extendsfdf2>
c000a19f:	83 c4 10             	add    esp,0x10
c000a1a2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a1a6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a1aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1b2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a1b6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a1ba:	e8 a1 a3 01 00       	call   c0024560 <__muldf3>
c000a1bf:	83 c4 10             	add    esp,0x10
c000a1c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1c6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1ca:	52                   	push   edx
c000a1cb:	50                   	push   eax
c000a1cc:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a1d0:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a1d4:	e8 0a 9d 01 00       	call   c0023ee3 <__adddf3>
c000a1d9:	83 c4 10             	add    esp,0x10
c000a1dc:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1e0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a1e4:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a1e8:	85 db                	test   ebx,ebx
c000a1ea:	0f 8f 36 fe ff ff    	jg     c000a026 <calc_output_quad+0x2b1>
c000a1f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a1fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a200:	e8 de 9c 01 00       	call   c0023ee3 <__adddf3>
c000a205:	83 c4 10             	add    esp,0x10
c000a208:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a20c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a210:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a220:	e8 3b a3 01 00       	call   c0024560 <__muldf3>
c000a225:	59                   	pop    ecx
c000a226:	5b                   	pop    ebx
c000a227:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a22b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a22f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a233:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a237:	e8 f7 ab 01 00       	call   c0024e33 <__truncdfsf2>
c000a23c:	83 c4 10             	add    esp,0x10
c000a23f:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a246:	89 06                	mov    DWORD PTR [esi],eax
c000a248:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a24c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a250:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a254:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a258:	e8 86 9c 01 00       	call   c0023ee3 <__adddf3>
c000a25d:	83 c4 10             	add    esp,0x10
c000a260:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a264:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a268:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a26c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a270:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a274:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a278:	e8 e3 a2 01 00       	call   c0024560 <__muldf3>
c000a27d:	5e                   	pop    esi
c000a27e:	5f                   	pop    edi
c000a27f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a283:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a287:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a28b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a28f:	e8 9f ab 01 00       	call   c0024e33 <__truncdfsf2>
c000a294:	83 c4 10             	add    esp,0x10
c000a297:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a29e:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a2a1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a2a5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a2a9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2ad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2b1:	e8 2d 9c 01 00       	call   c0023ee3 <__adddf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2d1:	e8 8a a2 01 00       	call   c0024560 <__muldf3>
c000a2d6:	5d                   	pop    ebp
c000a2d7:	59                   	pop    ecx
c000a2d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2e8:	e8 46 ab 01 00       	call   c0024e33 <__truncdfsf2>
c000a2ed:	83 c4 10             	add    esp,0x10
c000a2f0:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a2f7:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a2fa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a2fe:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a302:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a306:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a30a:	e8 d4 9b 01 00       	call   c0023ee3 <__adddf3>
c000a30f:	83 c4 10             	add    esp,0x10
c000a312:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a316:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a31a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a31e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a326:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a32a:	e8 31 a2 01 00       	call   c0024560 <__muldf3>
c000a32f:	5b                   	pop    ebx
c000a330:	5e                   	pop    esi
c000a331:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a335:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a339:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a33d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a341:	e8 ed aa 01 00       	call   c0024e33 <__truncdfsf2>
c000a346:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a34d:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a350:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a356:	5b                   	pop    ebx
c000a357:	5e                   	pop    esi
c000a358:	5f                   	pop    edi
c000a359:	5d                   	pop    ebp
c000a35a:	c3                   	ret    

c000a35b <calc_output_hex>:
c000a35b:	55                   	push   ebp
c000a35c:	89 cd                	mov    ebp,ecx
c000a35e:	57                   	push   edi
c000a35f:	56                   	push   esi
c000a360:	53                   	push   ebx
c000a361:	89 c3                	mov    ebx,eax
c000a363:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a369:	89 14 24             	mov    DWORD PTR [esp],edx
c000a36c:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a373:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a37a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a37e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a382:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a385:	e8 6f f3 ff ff       	call   c00096f9 <int_to_fp>
c000a38a:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a38d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a391:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a394:	29 c8                	sub    eax,ecx
c000a396:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a39a:	99                   	cdq    
c000a39b:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a3a3:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a3a6:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a3ae:	0f af f8             	imul   edi,eax
c000a3b1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a3b4:	01 cf                	add    edi,ecx
c000a3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a3ba:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a3bd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a3c1:	0f af c2             	imul   eax,edx
c000a3c4:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a3c8:	29 c1                	sub    ecx,eax
c000a3ca:	31 d2                	xor    edx,edx
c000a3cc:	31 c0                	xor    eax,eax
c000a3ce:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a3d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a3d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a3d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a3dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a3e1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a3e5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a3e9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a3ed:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a3f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3f9:	89 f8                	mov    eax,edi
c000a3fb:	e8 07 f3 ff ff       	call   c0009707 <fp_to_double>
c000a400:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a404:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a408:	89 f8                	mov    eax,edi
c000a40a:	e8 ee f2 ff ff       	call   c00096fd <fp_to_int>
c000a40f:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a413:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a416:	52                   	push   edx
c000a417:	52                   	push   edx
c000a418:	51                   	push   ecx
c000a419:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a41d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a424:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a428:	e8 4b 94 01 00       	call   c0023878 <__subsf3>
c000a42d:	89 04 24             	mov    DWORD PTR [esp],eax
c000a430:	e8 22 ab 01 00       	call   c0024f57 <__extendsfdf2>
c000a435:	83 c4 10             	add    esp,0x10
c000a438:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a43c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a448:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a44c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a450:	e8 0b a1 01 00       	call   c0024560 <__muldf3>
c000a455:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a459:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a45d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a460:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a464:	e8 ee aa 01 00       	call   c0024f57 <__extendsfdf2>
c000a469:	83 c4 10             	add    esp,0x10
c000a46c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a470:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a474:	52                   	push   edx
c000a475:	50                   	push   eax
c000a476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a47a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a47e:	e8 60 9a 01 00       	call   c0023ee3 <__adddf3>
c000a483:	59                   	pop    ecx
c000a484:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a488:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a48c:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a492:	e8 c0 aa 01 00       	call   c0024f57 <__extendsfdf2>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a49e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4ae:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4b2:	e8 a9 a0 01 00       	call   c0024560 <__muldf3>
c000a4b7:	83 c4 10             	add    esp,0x10
c000a4ba:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4be:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4c2:	52                   	push   edx
c000a4c3:	50                   	push   eax
c000a4c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4cc:	e8 12 9a 01 00       	call   c0023ee3 <__adddf3>
c000a4d1:	59                   	pop    ecx
c000a4d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a4da:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a4e0:	e8 72 aa 01 00       	call   c0024f57 <__extendsfdf2>
c000a4e5:	83 c4 10             	add    esp,0x10
c000a4e8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4ec:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4f8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4fc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a500:	e8 5b a0 01 00       	call   c0024560 <__muldf3>
c000a505:	83 c4 10             	add    esp,0x10
c000a508:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a50c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a510:	52                   	push   edx
c000a511:	50                   	push   eax
c000a512:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a516:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a51a:	e8 c4 99 01 00       	call   c0023ee3 <__adddf3>
c000a51f:	59                   	pop    ecx
c000a520:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a524:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a528:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a52e:	e8 24 aa 01 00       	call   c0024f57 <__extendsfdf2>
c000a533:	83 c4 10             	add    esp,0x10
c000a536:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a53a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a53e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a542:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a546:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a54a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a54e:	e8 0d a0 01 00       	call   c0024560 <__muldf3>
c000a553:	83 c4 10             	add    esp,0x10
c000a556:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a55a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a55e:	52                   	push   edx
c000a55f:	50                   	push   eax
c000a560:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a564:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a568:	e8 76 99 01 00       	call   c0023ee3 <__adddf3>
c000a56d:	59                   	pop    ecx
c000a56e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a572:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a576:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a57c:	e8 d6 a9 01 00       	call   c0024f57 <__extendsfdf2>
c000a581:	83 c4 10             	add    esp,0x10
c000a584:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a588:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a58c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a590:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a594:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a598:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a59c:	e8 bf 9f 01 00       	call   c0024560 <__muldf3>
c000a5a1:	83 c4 10             	add    esp,0x10
c000a5a4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5a8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5ac:	52                   	push   edx
c000a5ad:	50                   	push   eax
c000a5ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a5b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a5b6:	e8 28 99 01 00       	call   c0023ee3 <__adddf3>
c000a5bb:	59                   	pop    ecx
c000a5bc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a5c0:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a5c4:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a5ca:	e8 88 a9 01 00       	call   c0024f57 <__extendsfdf2>
c000a5cf:	83 c4 10             	add    esp,0x10
c000a5d2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5d6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5e2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5e6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5ea:	e8 71 9f 01 00       	call   c0024560 <__muldf3>
c000a5ef:	83 c4 10             	add    esp,0x10
c000a5f2:	83 c6 18             	add    esi,0x18
c000a5f5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5f9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5fd:	52                   	push   edx
c000a5fe:	50                   	push   eax
c000a5ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a603:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a607:	e8 d7 98 01 00       	call   c0023ee3 <__adddf3>
c000a60c:	59                   	pop    ecx
c000a60d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a611:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a615:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a61b:	e8 37 a9 01 00       	call   c0024f57 <__extendsfdf2>
c000a620:	83 c4 10             	add    esp,0x10
c000a623:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a627:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a62b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a62f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a633:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a637:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a63b:	e8 20 9f 01 00       	call   c0024560 <__muldf3>
c000a640:	83 c4 10             	add    esp,0x10
c000a643:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a647:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a64b:	52                   	push   edx
c000a64c:	50                   	push   eax
c000a64d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a651:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a655:	e8 89 98 01 00       	call   c0023ee3 <__adddf3>
c000a65a:	83 c4 10             	add    esp,0x10
c000a65d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a661:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a665:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a668:	0f 89 8b fd ff ff    	jns    c000a3f9 <calc_output_hex+0x9e>
c000a66e:	31 f6                	xor    esi,esi
c000a670:	31 ff                	xor    edi,edi
c000a672:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a676:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a679:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a67d:	29 e9                	sub    ecx,ebp
c000a67f:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a683:	29 c8                	sub    eax,ecx
c000a685:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a688:	99                   	cdq    
c000a689:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a68d:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a690:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a694:	0f af e8             	imul   ebp,eax
c000a697:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a69b:	40                   	inc    eax
c000a69c:	01 cd                	add    ebp,ecx
c000a69e:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a6a3:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a6a7:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a6ab:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a6af:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a6b2:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a6b6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a6ba:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a6be:	89 e8                	mov    eax,ebp
c000a6c0:	e8 42 f0 ff ff       	call   c0009707 <fp_to_double>
c000a6c5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a6c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a6cd:	89 e8                	mov    eax,ebp
c000a6cf:	e8 29 f0 ff ff       	call   c00096fd <fp_to_int>
c000a6d4:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a6d8:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a6db:	52                   	push   edx
c000a6dc:	52                   	push   edx
c000a6dd:	51                   	push   ecx
c000a6de:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a6e5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a6ec:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a6f0:	e8 83 91 01 00       	call   c0023878 <__subsf3>
c000a6f5:	89 04 24             	mov    DWORD PTR [esp],eax
c000a6f8:	e8 5a a8 01 00       	call   c0024f57 <__extendsfdf2>
c000a6fd:	83 c4 10             	add    esp,0x10
c000a700:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a704:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a708:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a70c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a710:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a714:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a718:	e8 43 9e 01 00       	call   c0024560 <__muldf3>
c000a71d:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a724:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a728:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a72b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a72f:	e8 23 a8 01 00       	call   c0024f57 <__extendsfdf2>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a73b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a745:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a749:	e8 95 97 01 00       	call   c0023ee3 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a753:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a757:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a75d:	e8 f5 a7 01 00       	call   c0024f57 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a769:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a779:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a77d:	e8 de 9d 01 00       	call   c0024560 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a789:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a793:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a797:	e8 47 97 01 00       	call   c0023ee3 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a7a1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a7a5:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a7ab:	e8 a7 a7 01 00       	call   c0024f57 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7b7:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7c7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7cb:	e8 90 9d 01 00       	call   c0024560 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7d7:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7db:	52                   	push   edx
c000a7dc:	50                   	push   eax
c000a7dd:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7e1:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a7e5:	e8 f9 96 01 00       	call   c0023ee3 <__adddf3>
c000a7ea:	59                   	pop    ecx
c000a7eb:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a7ef:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a7f3:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a7f9:	e8 59 a7 01 00       	call   c0024f57 <__extendsfdf2>
c000a7fe:	83 c4 10             	add    esp,0x10
c000a801:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a805:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a809:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a80d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a811:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a815:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a819:	e8 42 9d 01 00       	call   c0024560 <__muldf3>
c000a81e:	83 c4 10             	add    esp,0x10
c000a821:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a825:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a829:	52                   	push   edx
c000a82a:	50                   	push   eax
c000a82b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a82f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a833:	e8 ab 96 01 00       	call   c0023ee3 <__adddf3>
c000a838:	59                   	pop    ecx
c000a839:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a83d:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a841:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a847:	e8 0b a7 01 00       	call   c0024f57 <__extendsfdf2>
c000a84c:	83 c4 10             	add    esp,0x10
c000a84f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a853:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a85f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a863:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a867:	e8 f4 9c 01 00       	call   c0024560 <__muldf3>
c000a86c:	83 c4 10             	add    esp,0x10
c000a86f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a873:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a877:	52                   	push   edx
c000a878:	50                   	push   eax
c000a879:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a87d:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a881:	e8 5d 96 01 00       	call   c0023ee3 <__adddf3>
c000a886:	59                   	pop    ecx
c000a887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a88b:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a88f:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a895:	e8 bd a6 01 00       	call   c0024f57 <__extendsfdf2>
c000a89a:	83 c4 10             	add    esp,0x10
c000a89d:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8a1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ad:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8b1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8b5:	e8 a6 9c 01 00       	call   c0024560 <__muldf3>
c000a8ba:	83 c4 10             	add    esp,0x10
c000a8bd:	83 eb 18             	sub    ebx,0x18
c000a8c0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8c4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8c8:	52                   	push   edx
c000a8c9:	50                   	push   eax
c000a8ca:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a8ce:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a8d2:	e8 0c 96 01 00       	call   c0023ee3 <__adddf3>
c000a8d7:	59                   	pop    ecx
c000a8d8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a8dc:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a8e0:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a8e6:	e8 6c a6 01 00       	call   c0024f57 <__extendsfdf2>
c000a8eb:	83 c4 10             	add    esp,0x10
c000a8ee:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8f2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8fe:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a902:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a906:	e8 55 9c 01 00       	call   c0024560 <__muldf3>
c000a90b:	83 c4 10             	add    esp,0x10
c000a90e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a912:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a916:	52                   	push   edx
c000a917:	50                   	push   eax
c000a918:	57                   	push   edi
c000a919:	56                   	push   esi
c000a91a:	e8 c4 95 01 00       	call   c0023ee3 <__adddf3>
c000a91f:	83 c4 10             	add    esp,0x10
c000a922:	89 c6                	mov    esi,eax
c000a924:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a927:	89 d7                	mov    edi,edx
c000a929:	85 ed                	test   ebp,ebp
c000a92b:	0f 8f 8d fd ff ff    	jg     c000a6be <calc_output_hex+0x363>
c000a931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a939:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a93d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a941:	e8 9d 95 01 00       	call   c0023ee3 <__adddf3>
c000a946:	83 c4 10             	add    esp,0x10
c000a949:	89 04 24             	mov    DWORD PTR [esp],eax
c000a94c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a950:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a954:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a958:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a960:	e8 fb 9b 01 00       	call   c0024560 <__muldf3>
c000a965:	59                   	pop    ecx
c000a966:	5b                   	pop    ebx
c000a967:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a96b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a96f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a973:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a977:	e8 b7 a4 01 00       	call   c0024e33 <__truncdfsf2>
c000a97c:	83 c4 10             	add    esp,0x10
c000a97f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a986:	89 03                	mov    DWORD PTR [ebx],eax
c000a988:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a98c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a990:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a994:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a998:	e8 46 95 01 00       	call   c0023ee3 <__adddf3>
c000a99d:	83 c4 10             	add    esp,0x10
c000a9a0:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9a3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b7:	e8 a4 9b 01 00       	call   c0024560 <__muldf3>
c000a9bc:	5d                   	pop    ebp
c000a9bd:	59                   	pop    ecx
c000a9be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ce:	e8 60 a4 01 00       	call   c0024e33 <__truncdfsf2>
c000a9d3:	83 c4 10             	add    esp,0x10
c000a9d6:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9dd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a9e0:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9e4:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a9e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9ec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a9f0:	e8 ee 94 01 00       	call   c0023ee3 <__adddf3>
c000a9f5:	83 c4 10             	add    esp,0x10
c000a9f8:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9fb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9ff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0f:	e8 4c 9b 01 00       	call   c0024560 <__muldf3>
c000aa14:	5b                   	pop    ebx
c000aa15:	5d                   	pop    ebp
c000aa16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa1e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa22:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa26:	e8 08 a4 01 00       	call   c0024e33 <__truncdfsf2>
c000aa2b:	83 c4 10             	add    esp,0x10
c000aa2e:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa35:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000aa38:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa3c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa40:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa44:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aa48:	e8 96 94 01 00       	call   c0023ee3 <__adddf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa53:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa67:	e8 f4 9a 01 00       	call   c0024560 <__muldf3>
c000aa6c:	59                   	pop    ecx
c000aa6d:	5b                   	pop    ebx
c000aa6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa7a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa7e:	e8 b0 a3 01 00       	call   c0024e33 <__truncdfsf2>
c000aa83:	83 c4 10             	add    esp,0x10
c000aa86:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa8d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa90:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa94:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa98:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aaa0:	e8 3e 94 01 00       	call   c0023ee3 <__adddf3>
c000aaa5:	83 c4 10             	add    esp,0x10
c000aaa8:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aabb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aabf:	e8 9c 9a 01 00       	call   c0024560 <__muldf3>
c000aac4:	5d                   	pop    ebp
c000aac5:	59                   	pop    ecx
c000aac6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aaca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aace:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aad6:	e8 58 a3 01 00       	call   c0024e33 <__truncdfsf2>
c000aadb:	83 c4 10             	add    esp,0x10
c000aade:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aae5:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aae8:	57                   	push   edi
c000aae9:	56                   	push   esi
c000aaea:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aaee:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aaf2:	e8 ec 93 01 00       	call   c0023ee3 <__adddf3>
c000aaf7:	83 c4 10             	add    esp,0x10
c000aafa:	89 04 24             	mov    DWORD PTR [esp],eax
c000aafd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab09:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab0d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab11:	e8 4a 9a 01 00       	call   c0024560 <__muldf3>
c000ab16:	5b                   	pop    ebx
c000ab17:	5e                   	pop    esi
c000ab18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab24:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab28:	e8 06 a3 01 00       	call   c0024e33 <__truncdfsf2>
c000ab2d:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ab34:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ab37:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ab3d:	5b                   	pop    ebx
c000ab3e:	5e                   	pop    esi
c000ab3f:	5f                   	pop    edi
c000ab40:	5d                   	pop    ebp
c000ab41:	c3                   	ret    

c000ab42 <sinc_reset>:
c000ab42:	56                   	push   esi
c000ab43:	53                   	push   ebx
c000ab44:	51                   	push   ecx
c000ab45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab49:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ab4c:	85 db                	test   ebx,ebx
c000ab4e:	74 59                	je     c000aba9 <sinc_reset+0x67>
c000ab50:	31 d2                	xor    edx,edx
c000ab52:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ab59:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ab5c:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ab5f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ab66:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ab6d:	31 c0                	xor    eax,eax
c000ab6f:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab75:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab78:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab7b:	52                   	push   edx
c000ab7c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab7f:	c1 e0 02             	shl    eax,0x2
c000ab82:	50                   	push   eax
c000ab83:	6a 00                	push   0x0
c000ab85:	56                   	push   esi
c000ab86:	e8 41 5b ff ff       	call   c00006cc <memset>
c000ab8b:	83 c4 0c             	add    esp,0xc
c000ab8e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab91:	c1 e0 02             	shl    eax,0x2
c000ab94:	50                   	push   eax
c000ab95:	68 aa 00 00 00       	push   0xaa
c000ab9a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab9d:	8d 04 86             	lea    eax,[esi+eax*4]
c000aba0:	50                   	push   eax
c000aba1:	e8 26 5b ff ff       	call   c00006cc <memset>
c000aba6:	83 c4 10             	add    esp,0x10
c000aba9:	58                   	pop    eax
c000abaa:	5b                   	pop    ebx
c000abab:	5e                   	pop    esi
c000abac:	c3                   	ret    

c000abad <calc_output_multi>:
c000abad:	55                   	push   ebp
c000abae:	57                   	push   edi
c000abaf:	56                   	push   esi
c000abb0:	89 c6                	mov    esi,eax
c000abb2:	53                   	push   ebx
c000abb3:	83 ec 4c             	sub    esp,0x4c
c000abb6:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000abba:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000abbe:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000abc2:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000abc6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000abca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000abce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000abd2:	8d 46 44             	lea    eax,[esi+0x44]
c000abd5:	89 04 24             	mov    DWORD PTR [esp],eax
c000abd8:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000abde:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000abe2:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000abe5:	e8 0f eb ff ff       	call   c00096f9 <int_to_fp>
c000abea:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000abed:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000abf1:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000abf5:	99                   	cdq    
c000abf6:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000abfa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000abfe:	0f af d0             	imul   edx,eax
c000ac01:	0f af c3             	imul   eax,ebx
c000ac04:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ac08:	29 c1                	sub    ecx,eax
c000ac0a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac0e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac12:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ac19:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ac1d:	57                   	push   edi
c000ac1e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac22:	6a 00                	push   0x0
c000ac24:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac28:	e8 9f 5a ff ff       	call   c00006cc <memset>
c000ac2d:	83 c4 10             	add    esp,0x10
c000ac30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac34:	89 df                	mov    edi,ebx
c000ac36:	e8 cc ea ff ff       	call   c0009707 <fp_to_double>
c000ac3b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac3f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ac47:	e8 b1 ea ff ff       	call   c00096fd <fp_to_int>
c000ac4c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ac4f:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ac52:	51                   	push   ecx
c000ac53:	51                   	push   ecx
c000ac54:	55                   	push   ebp
c000ac55:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ac59:	e8 1a 8c 01 00       	call   c0023878 <__subsf3>
c000ac5e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac61:	e8 f1 a2 01 00       	call   c0024f57 <__extendsfdf2>
c000ac66:	83 c4 10             	add    esp,0x10
c000ac69:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac6d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac79:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac7d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac81:	e8 da 98 01 00       	call   c0024560 <__muldf3>
c000ac86:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac91:	e8 c1 a2 01 00       	call   c0024f57 <__extendsfdf2>
c000ac96:	83 c4 10             	add    esp,0x10
c000ac99:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac9d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aca1:	52                   	push   edx
c000aca2:	50                   	push   eax
c000aca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aca7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acab:	e8 33 92 01 00       	call   c0023ee3 <__adddf3>
c000acb0:	83 c4 10             	add    esp,0x10
c000acb3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acb7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000acbb:	89 f8                	mov    eax,edi
c000acbd:	b9 08 00 00 00       	mov    ecx,0x8
c000acc2:	99                   	cdq    
c000acc3:	f7 f9                	idiv   ecx
c000acc5:	4a                   	dec    edx
c000acc6:	83 fa 06             	cmp    edx,0x6
c000acc9:	77 07                	ja     c000acd2 <calc_output_multi+0x125>
c000accb:	ff 24 95 64 67 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd989c]
c000acd2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acd5:	4f                   	dec    edi
c000acd6:	83 ec 0c             	sub    esp,0xc
c000acd9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000acdc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ace0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ace7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aceb:	e8 67 a2 01 00       	call   c0024f57 <__extendsfdf2>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000acf7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad03:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad07:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad0b:	e8 50 98 01 00       	call   c0024560 <__muldf3>
c000ad10:	83 c4 10             	add    esp,0x10
c000ad13:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad17:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad1b:	52                   	push   edx
c000ad1c:	50                   	push   eax
c000ad1d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad20:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad23:	e8 bb 91 01 00       	call   c0023ee3 <__adddf3>
c000ad28:	83 c4 10             	add    esp,0x10
c000ad2b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad2e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad31:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad34:	4f                   	dec    edi
c000ad35:	83 ec 0c             	sub    esp,0xc
c000ad38:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad3f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad46:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad4a:	e8 08 a2 01 00       	call   c0024f57 <__extendsfdf2>
c000ad4f:	83 c4 10             	add    esp,0x10
c000ad52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad6a:	e8 f1 97 01 00       	call   c0024560 <__muldf3>
c000ad6f:	83 c4 10             	add    esp,0x10
c000ad72:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad76:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad7a:	52                   	push   edx
c000ad7b:	50                   	push   eax
c000ad7c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad7f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad82:	e8 5c 91 01 00       	call   c0023ee3 <__adddf3>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad8d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad90:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad93:	4f                   	dec    edi
c000ad94:	83 ec 0c             	sub    esp,0xc
c000ad97:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad9e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ada5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ada9:	e8 a9 a1 01 00       	call   c0024f57 <__extendsfdf2>
c000adae:	83 c4 10             	add    esp,0x10
c000adb1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adb5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adc1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adc5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adc9:	e8 92 97 01 00       	call   c0024560 <__muldf3>
c000adce:	83 c4 10             	add    esp,0x10
c000add1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000add5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000add9:	52                   	push   edx
c000adda:	50                   	push   eax
c000addb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adde:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ade1:	e8 fd 90 01 00       	call   c0023ee3 <__adddf3>
c000ade6:	83 c4 10             	add    esp,0x10
c000ade9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000adec:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000adef:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000adf2:	4f                   	dec    edi
c000adf3:	83 ec 0c             	sub    esp,0xc
c000adf6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000adf9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adfd:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae04:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae08:	e8 4a a1 01 00       	call   c0024f57 <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 33 97 01 00       	call   c0024560 <__muldf3>
c000ae2d:	83 c4 10             	add    esp,0x10
c000ae30:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae34:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae38:	52                   	push   edx
c000ae39:	50                   	push   eax
c000ae3a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae3d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae40:	e8 9e 90 01 00       	call   c0023ee3 <__adddf3>
c000ae45:	83 c4 10             	add    esp,0x10
c000ae48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae4b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae4e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae51:	4f                   	dec    edi
c000ae52:	83 ec 0c             	sub    esp,0xc
c000ae55:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae5c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae63:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae67:	e8 eb a0 01 00       	call   c0024f57 <__extendsfdf2>
c000ae6c:	83 c4 10             	add    esp,0x10
c000ae6f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae73:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae7f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae83:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae87:	e8 d4 96 01 00       	call   c0024560 <__muldf3>
c000ae8c:	83 c4 10             	add    esp,0x10
c000ae8f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae93:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae97:	52                   	push   edx
c000ae98:	50                   	push   eax
c000ae99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae9f:	e8 3f 90 01 00       	call   c0023ee3 <__adddf3>
c000aea4:	83 c4 10             	add    esp,0x10
c000aea7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aeaa:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aead:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb0:	4f                   	dec    edi
c000aeb1:	83 ec 0c             	sub    esp,0xc
c000aeb4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aeb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aebb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aec6:	e8 8c a0 01 00       	call   c0024f57 <__extendsfdf2>
c000aecb:	83 c4 10             	add    esp,0x10
c000aece:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee6:	e8 75 96 01 00       	call   c0024560 <__muldf3>
c000aeeb:	83 c4 10             	add    esp,0x10
c000aeee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aef6:	52                   	push   edx
c000aef7:	50                   	push   eax
c000aef8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aefb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aefe:	e8 e0 8f 01 00       	call   c0023ee3 <__adddf3>
c000af03:	83 c4 10             	add    esp,0x10
c000af06:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af09:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af0c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af0f:	4f                   	dec    edi
c000af10:	83 ec 0c             	sub    esp,0xc
c000af13:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af1a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af21:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af25:	e8 2d a0 01 00       	call   c0024f57 <__extendsfdf2>
c000af2a:	83 c4 10             	add    esp,0x10
c000af2d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af31:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af41:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af45:	e8 16 96 01 00       	call   c0024560 <__muldf3>
c000af4a:	83 c4 10             	add    esp,0x10
c000af4d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af51:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af55:	52                   	push   edx
c000af56:	50                   	push   eax
c000af57:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af5a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af5d:	e8 81 8f 01 00       	call   c0023ee3 <__adddf3>
c000af62:	83 c4 10             	add    esp,0x10
c000af65:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af68:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af6b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af6e:	4f                   	dec    edi
c000af6f:	83 ec 0c             	sub    esp,0xc
c000af72:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af79:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af80:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af84:	e8 ce 9f 01 00       	call   c0024f57 <__extendsfdf2>
c000af89:	83 c4 10             	add    esp,0x10
c000af8c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af90:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af98:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa4:	e8 b7 95 01 00       	call   c0024560 <__muldf3>
c000afa9:	83 c4 10             	add    esp,0x10
c000afac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afb4:	52                   	push   edx
c000afb5:	50                   	push   eax
c000afb6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afb9:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afbc:	e8 22 8f 01 00       	call   c0023ee3 <__adddf3>
c000afc1:	83 c4 10             	add    esp,0x10
c000afc4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afc7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afca:	85 ff                	test   edi,edi
c000afcc:	0f 8f e9 fc ff ff    	jg     c000acbb <calc_output_multi+0x10e>
c000afd2:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000afd6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000afda:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000afde:	0f 89 4c fc ff ff    	jns    c000ac30 <calc_output_multi+0x83>
c000afe4:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000afe8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000afec:	29 c8                	sub    eax,ecx
c000afee:	99                   	cdq    
c000afef:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000aff3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000aff7:	0f af d0             	imul   edx,eax
c000affa:	40                   	inc    eax
c000affb:	01 d1                	add    ecx,edx
c000affd:	0f af c3             	imul   eax,ebx
c000b000:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b004:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b007:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b00b:	55                   	push   ebp
c000b00c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b010:	6a 00                	push   0x0
c000b012:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b016:	e8 b1 56 ff ff       	call   c00006cc <memset>
c000b01b:	83 c4 10             	add    esp,0x10
c000b01e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b022:	e8 e0 e6 ff ff       	call   c0009707 <fp_to_double>
c000b027:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b02b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b02f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b033:	e8 c5 e6 ff ff       	call   c00096fd <fp_to_int>
c000b038:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b03b:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b03e:	57                   	push   edi
c000b03f:	57                   	push   edi
c000b040:	89 df                	mov    edi,ebx
c000b042:	55                   	push   ebp
c000b043:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b047:	e8 2c 88 01 00       	call   c0023878 <__subsf3>
c000b04c:	89 04 24             	mov    DWORD PTR [esp],eax
c000b04f:	e8 03 9f 01 00       	call   c0024f57 <__extendsfdf2>
c000b054:	83 c4 10             	add    esp,0x10
c000b057:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b05f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b063:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b067:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b06b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b06f:	e8 ec 94 01 00       	call   c0024560 <__muldf3>
c000b074:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b077:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b07b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b07f:	e8 d3 9e 01 00       	call   c0024f57 <__extendsfdf2>
c000b084:	83 c4 10             	add    esp,0x10
c000b087:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b08b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b08f:	52                   	push   edx
c000b090:	50                   	push   eax
c000b091:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b095:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b099:	e8 45 8e 01 00       	call   c0023ee3 <__adddf3>
c000b09e:	83 c4 10             	add    esp,0x10
c000b0a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b0a5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b0a9:	89 f8                	mov    eax,edi
c000b0ab:	b9 08 00 00 00       	mov    ecx,0x8
c000b0b0:	99                   	cdq    
c000b0b1:	f7 f9                	idiv   ecx
c000b0b3:	4a                   	dec    edx
c000b0b4:	83 fa 06             	cmp    edx,0x6
c000b0b7:	77 07                	ja     c000b0c0 <calc_output_multi+0x513>
c000b0b9:	ff 24 95 80 67 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9880]
c000b0c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0c4:	4f                   	dec    edi
c000b0c5:	83 ec 0c             	sub    esp,0xc
c000b0c8:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0cf:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0d6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0da:	e8 78 9e 01 00       	call   c0024f57 <__extendsfdf2>
c000b0df:	83 c4 10             	add    esp,0x10
c000b0e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0fa:	e8 61 94 01 00       	call   c0024560 <__muldf3>
c000b0ff:	83 c4 10             	add    esp,0x10
c000b102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b10a:	52                   	push   edx
c000b10b:	50                   	push   eax
c000b10c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b10f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b112:	e8 cc 8d 01 00       	call   c0023ee3 <__adddf3>
c000b117:	83 c4 10             	add    esp,0x10
c000b11a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b11d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b120:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b124:	4f                   	dec    edi
c000b125:	83 ec 0c             	sub    esp,0xc
c000b128:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b12b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b12f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b136:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b13a:	e8 18 9e 01 00       	call   c0024f57 <__extendsfdf2>
c000b13f:	83 c4 10             	add    esp,0x10
c000b142:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b146:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b14a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b14e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b156:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b15a:	e8 01 94 01 00       	call   c0024560 <__muldf3>
c000b15f:	83 c4 10             	add    esp,0x10
c000b162:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b166:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b16a:	52                   	push   edx
c000b16b:	50                   	push   eax
c000b16c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b16f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b172:	e8 6c 8d 01 00       	call   c0023ee3 <__adddf3>
c000b177:	83 c4 10             	add    esp,0x10
c000b17a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b17d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b180:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b184:	4f                   	dec    edi
c000b185:	83 ec 0c             	sub    esp,0xc
c000b188:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b18b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b18f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b196:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b19a:	e8 b8 9d 01 00       	call   c0024f57 <__extendsfdf2>
c000b19f:	83 c4 10             	add    esp,0x10
c000b1a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1ba:	e8 a1 93 01 00       	call   c0024560 <__muldf3>
c000b1bf:	83 c4 10             	add    esp,0x10
c000b1c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1ca:	52                   	push   edx
c000b1cb:	50                   	push   eax
c000b1cc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1cf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1d2:	e8 0c 8d 01 00       	call   c0023ee3 <__adddf3>
c000b1d7:	83 c4 10             	add    esp,0x10
c000b1da:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1dd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1e4:	4f                   	dec    edi
c000b1e5:	83 ec 0c             	sub    esp,0xc
c000b1e8:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1ef:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1f6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1fa:	e8 58 9d 01 00       	call   c0024f57 <__extendsfdf2>
c000b1ff:	83 c4 10             	add    esp,0x10
c000b202:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b206:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b21a:	e8 41 93 01 00       	call   c0024560 <__muldf3>
c000b21f:	83 c4 10             	add    esp,0x10
c000b222:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b226:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b22a:	52                   	push   edx
c000b22b:	50                   	push   eax
c000b22c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b22f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b232:	e8 ac 8c 01 00       	call   c0023ee3 <__adddf3>
c000b237:	83 c4 10             	add    esp,0x10
c000b23a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b23d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b240:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b244:	4f                   	dec    edi
c000b245:	83 ec 0c             	sub    esp,0xc
c000b248:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b24b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b24f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b256:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b25a:	e8 f8 9c 01 00       	call   c0024f57 <__extendsfdf2>
c000b25f:	83 c4 10             	add    esp,0x10
c000b262:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b266:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b26a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b26e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b272:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b276:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b27a:	e8 e1 92 01 00       	call   c0024560 <__muldf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b286:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b28a:	52                   	push   edx
c000b28b:	50                   	push   eax
c000b28c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b28f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b292:	e8 4c 8c 01 00       	call   c0023ee3 <__adddf3>
c000b297:	83 c4 10             	add    esp,0x10
c000b29a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b29d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a4:	4f                   	dec    edi
c000b2a5:	83 ec 0c             	sub    esp,0xc
c000b2a8:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2af:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2ba:	e8 98 9c 01 00       	call   c0024f57 <__extendsfdf2>
c000b2bf:	83 c4 10             	add    esp,0x10
c000b2c2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2da:	e8 81 92 01 00       	call   c0024560 <__muldf3>
c000b2df:	83 c4 10             	add    esp,0x10
c000b2e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2ea:	52                   	push   edx
c000b2eb:	50                   	push   eax
c000b2ec:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2ef:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f2:	e8 ec 8b 01 00       	call   c0023ee3 <__adddf3>
c000b2f7:	83 c4 10             	add    esp,0x10
c000b2fa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b300:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b304:	4f                   	dec    edi
c000b305:	83 ec 0c             	sub    esp,0xc
c000b308:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b30f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b316:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31a:	e8 38 9c 01 00       	call   c0024f57 <__extendsfdf2>
c000b31f:	83 c4 10             	add    esp,0x10
c000b322:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b326:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33a:	e8 21 92 01 00       	call   c0024560 <__muldf3>
c000b33f:	83 c4 10             	add    esp,0x10
c000b342:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b346:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34a:	52                   	push   edx
c000b34b:	50                   	push   eax
c000b34c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b34f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b352:	e8 8c 8b 01 00       	call   c0023ee3 <__adddf3>
c000b357:	83 c4 10             	add    esp,0x10
c000b35a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b360:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b364:	4f                   	dec    edi
c000b365:	83 ec 0c             	sub    esp,0xc
c000b368:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b36f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b376:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37a:	e8 d8 9b 01 00       	call   c0024f57 <__extendsfdf2>
c000b37f:	83 c4 10             	add    esp,0x10
c000b382:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b386:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b392:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b396:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39a:	e8 c1 91 01 00       	call   c0024560 <__muldf3>
c000b39f:	83 c4 10             	add    esp,0x10
c000b3a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3aa:	52                   	push   edx
c000b3ab:	50                   	push   eax
c000b3ac:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3af:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b2:	e8 2c 8b 01 00       	call   c0023ee3 <__adddf3>
c000b3b7:	83 c4 10             	add    esp,0x10
c000b3ba:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3bd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c0:	85 ff                	test   edi,edi
c000b3c2:	0f 8f e1 fc ff ff    	jg     c000b0a9 <calc_output_multi+0x4fc>
c000b3c8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b3cc:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b3d0:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b3d4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b3d9:	0f 8f 3f fc ff ff    	jg     c000b01e <calc_output_multi+0x471>
c000b3df:	be 08 00 00 00       	mov    esi,0x8
c000b3e4:	89 d8                	mov    eax,ebx
c000b3e6:	99                   	cdq    
c000b3e7:	f7 fe                	idiv   esi
c000b3e9:	4a                   	dec    edx
c000b3ea:	83 fa 06             	cmp    edx,0x6
c000b3ed:	77 07                	ja     c000b3f6 <calc_output_multi+0x849>
c000b3ef:	ff 24 95 9c 67 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9864]
c000b3f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3fa:	4b                   	dec    ebx
c000b3fb:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3ff:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b402:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b406:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b40a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b40d:	e8 d1 8a 01 00       	call   c0023ee3 <__adddf3>
c000b412:	83 c4 10             	add    esp,0x10
c000b415:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b419:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b41d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b421:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b425:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b429:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b42d:	e8 2e 91 01 00       	call   c0024560 <__muldf3>
c000b432:	5d                   	pop    ebp
c000b433:	59                   	pop    ecx
c000b434:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b438:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b444:	e8 ea 99 01 00       	call   c0024e33 <__truncdfsf2>
c000b449:	83 c4 10             	add    esp,0x10
c000b44c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b450:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b453:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b457:	4b                   	dec    ebx
c000b458:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b45c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b45f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b463:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b467:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b46a:	e8 74 8a 01 00       	call   c0023ee3 <__adddf3>
c000b46f:	83 c4 10             	add    esp,0x10
c000b472:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b476:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b47a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b47e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b482:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b486:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48a:	e8 d1 90 01 00       	call   c0024560 <__muldf3>
c000b48f:	59                   	pop    ecx
c000b490:	5f                   	pop    edi
c000b491:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b495:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b499:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b49d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4a1:	e8 8d 99 01 00       	call   c0024e33 <__truncdfsf2>
c000b4a6:	83 c4 10             	add    esp,0x10
c000b4a9:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4ad:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4b4:	4b                   	dec    ebx
c000b4b5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4b9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4c0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4c4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4c7:	e8 17 8a 01 00       	call   c0023ee3 <__adddf3>
c000b4cc:	83 c4 10             	add    esp,0x10
c000b4cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4e7:	e8 74 90 01 00       	call   c0024560 <__muldf3>
c000b4ec:	5f                   	pop    edi
c000b4ed:	5d                   	pop    ebp
c000b4ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4fe:	e8 30 99 01 00       	call   c0024e33 <__truncdfsf2>
c000b503:	83 c4 10             	add    esp,0x10
c000b506:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b50a:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b50d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b511:	4b                   	dec    ebx
c000b512:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b516:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b519:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b51d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b521:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b524:	e8 ba 89 01 00       	call   c0023ee3 <__adddf3>
c000b529:	83 c4 10             	add    esp,0x10
c000b52c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b530:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b534:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b538:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b53c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b540:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b544:	e8 17 90 01 00       	call   c0024560 <__muldf3>
c000b549:	5d                   	pop    ebp
c000b54a:	59                   	pop    ecx
c000b54b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b54f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b553:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b557:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b55b:	e8 d3 98 01 00       	call   c0024e33 <__truncdfsf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b567:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b56a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b56e:	4b                   	dec    ebx
c000b56f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b573:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b576:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b57a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b57e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b581:	e8 5d 89 01 00       	call   c0023ee3 <__adddf3>
c000b586:	83 c4 10             	add    esp,0x10
c000b589:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b58d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b591:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b595:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b599:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b59d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a1:	e8 ba 8f 01 00       	call   c0024560 <__muldf3>
c000b5a6:	59                   	pop    ecx
c000b5a7:	5f                   	pop    edi
c000b5a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5b8:	e8 76 98 01 00       	call   c0024e33 <__truncdfsf2>
c000b5bd:	83 c4 10             	add    esp,0x10
c000b5c0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5c4:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5cb:	4b                   	dec    ebx
c000b5cc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5d0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5d7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5db:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5de:	e8 00 89 01 00       	call   c0023ee3 <__adddf3>
c000b5e3:	83 c4 10             	add    esp,0x10
c000b5e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5fe:	e8 5d 8f 01 00       	call   c0024560 <__muldf3>
c000b603:	5f                   	pop    edi
c000b604:	5d                   	pop    ebp
c000b605:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b609:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b60d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b611:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b615:	e8 19 98 01 00       	call   c0024e33 <__truncdfsf2>
c000b61a:	83 c4 10             	add    esp,0x10
c000b61d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b621:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b628:	4b                   	dec    ebx
c000b629:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b62d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b630:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b634:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b638:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b63b:	e8 a3 88 01 00       	call   c0023ee3 <__adddf3>
c000b640:	83 c4 10             	add    esp,0x10
c000b643:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b647:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b64b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b64f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b653:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b657:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b65b:	e8 00 8f 01 00       	call   c0024560 <__muldf3>
c000b660:	5d                   	pop    ebp
c000b661:	59                   	pop    ecx
c000b662:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b666:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b672:	e8 bc 97 01 00       	call   c0024e33 <__truncdfsf2>
c000b677:	83 c4 10             	add    esp,0x10
c000b67a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b67e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b681:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b685:	4b                   	dec    ebx
c000b686:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b68a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b68d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b691:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b695:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b698:	e8 46 88 01 00       	call   c0023ee3 <__adddf3>
c000b69d:	83 c4 10             	add    esp,0x10
c000b6a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6b8:	e8 a3 8e 01 00       	call   c0024560 <__muldf3>
c000b6bd:	59                   	pop    ecx
c000b6be:	5f                   	pop    edi
c000b6bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6c3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6cf:	e8 5f 97 01 00       	call   c0024e33 <__truncdfsf2>
c000b6d4:	83 c4 10             	add    esp,0x10
c000b6d7:	85 db                	test   ebx,ebx
c000b6d9:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b6dd:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b6e0:	0f 8f fe fc ff ff    	jg     c000b3e4 <calc_output_multi+0x837>
c000b6e6:	83 c4 4c             	add    esp,0x4c
c000b6e9:	5b                   	pop    ebx
c000b6ea:	5e                   	pop    esi
c000b6eb:	5f                   	pop    edi
c000b6ec:	5d                   	pop    ebp
c000b6ed:	c3                   	ret    

c000b6ee <double_to_fp>:
c000b6ee:	83 ec 0c             	sub    esp,0xc
c000b6f1:	68 00 00 b0 40       	push   0x40b00000
c000b6f6:	6a 00                	push   0x0
c000b6f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b700:	e8 5b 8e 01 00       	call   c0024560 <__muldf3>
c000b705:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b709:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b70d:	83 c4 1c             	add    esp,0x1c
c000b710:	e9 cb 98 01 00       	jmp    c0024fe0 <lrint>

c000b715 <fmod_one>:
c000b715:	83 ec 2c             	sub    esp,0x2c
c000b718:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b71c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b720:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b724:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b728:	83 ec 08             	sub    esp,0x8
c000b72b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b72f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b733:	e8 a8 98 01 00       	call   c0024fe0 <lrint>
c000b738:	83 c4 10             	add    esp,0x10
c000b73b:	83 ec 0c             	sub    esp,0xc
c000b73e:	50                   	push   eax
c000b73f:	e8 7f 94 01 00       	call   c0024bc3 <__floatsidf>
c000b744:	83 c4 10             	add    esp,0x10
c000b747:	52                   	push   edx
c000b748:	50                   	push   eax
c000b749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b74d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b751:	e8 de 8d 01 00       	call   c0024534 <__subdf3>
c000b756:	83 c4 10             	add    esp,0x10
c000b759:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b75d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b761:	b8 00 00 00 00       	mov    eax,0x0
c000b766:	ba 00 00 00 00       	mov    edx,0x0
c000b76b:	52                   	push   edx
c000b76c:	50                   	push   eax
c000b76d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b771:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b775:	e8 b5 96 01 00       	call   c0024e2f <__ltdf2>
c000b77a:	83 c4 10             	add    esp,0x10
c000b77d:	85 c0                	test   eax,eax
c000b77f:	79 1e                	jns    c000b79f <fmod_one+0x8a>
c000b781:	b8 00 00 00 00       	mov    eax,0x0
c000b786:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c000b78b:	52                   	push   edx
c000b78c:	50                   	push   eax
c000b78d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b791:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b795:	e8 49 87 01 00       	call   c0023ee3 <__adddf3>
c000b79a:	83 c4 10             	add    esp,0x10
c000b79d:	eb 08                	jmp    c000b7a7 <fmod_one+0x92>
c000b79f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b7a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b7a7:	83 c4 2c             	add    esp,0x2c
c000b7aa:	c3                   	ret    

c000b7ab <prepare_data>:
c000b7ab:	55                   	push   ebp
c000b7ac:	57                   	push   edi
c000b7ad:	56                   	push   esi
c000b7ae:	53                   	push   ebx
c000b7af:	83 ec 1c             	sub    esp,0x1c
c000b7b2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b7b6:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b7ba:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b7be:	0f 89 57 01 00 00    	jns    c000b91b <prepare_data+0x170>
c000b7c4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b7c7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b7ca:	85 d2                	test   edx,edx
c000b7cc:	75 0d                	jne    c000b7db <prepare_data+0x30>
c000b7ce:	8d 14 36             	lea    edx,[esi+esi*1]
c000b7d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b7d4:	29 d0                	sub    eax,edx
c000b7d6:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7d9:	eb 44                	jmp    c000b81f <prepare_data+0x74>
c000b7db:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b7de:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b7e1:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b7e4:	39 c1                	cmp    ecx,eax
c000b7e6:	7d 04                	jge    c000b7ec <prepare_data+0x41>
c000b7e8:	29 d0                	sub    eax,edx
c000b7ea:	eb 2d                	jmp    c000b819 <prepare_data+0x6e>
c000b7ec:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b7f2:	29 d7                	sub    edi,edx
c000b7f4:	01 f7                	add    edi,esi
c000b7f6:	51                   	push   ecx
c000b7f7:	29 f2                	sub    edx,esi
c000b7f9:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b800:	8d 14 90             	lea    edx,[eax+edx*4]
c000b803:	51                   	push   ecx
c000b804:	52                   	push   edx
c000b805:	50                   	push   eax
c000b806:	e8 53 4e ff ff       	call   c000065e <memmove>
c000b80b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b80e:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b811:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b814:	29 f0                	sub    eax,esi
c000b816:	83 c4 10             	add    esp,0x10
c000b819:	29 f0                	sub    eax,esi
c000b81b:	79 02                	jns    c000b81f <prepare_data+0x74>
c000b81d:	31 c0                	xor    eax,eax
c000b81f:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b822:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b825:	29 ef                	sub    edi,ebp
c000b827:	39 c7                	cmp    edi,eax
c000b829:	7e 02                	jle    c000b82d <prepare_data+0x82>
c000b82b:	89 c7                	mov    edi,eax
c000b82d:	89 f8                	mov    eax,edi
c000b82f:	99                   	cdq    
c000b830:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b833:	b8 15 00 00 00       	mov    eax,0x15
c000b838:	29 d7                	sub    edi,edx
c000b83a:	0f 88 dd 00 00 00    	js     c000b91d <prepare_data+0x172>
c000b840:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b843:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b846:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b849:	0f 8f ce 00 00 00    	jg     c000b91d <prepare_data+0x172>
c000b84f:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b855:	50                   	push   eax
c000b856:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b85d:	50                   	push   eax
c000b85e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b862:	8b 00                	mov    eax,DWORD PTR [eax]
c000b864:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b867:	50                   	push   eax
c000b868:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b86b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b86f:	50                   	push   eax
c000b870:	e8 21 4e ff ff       	call   c0000696 <memcpy>
c000b875:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b878:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b87b:	01 fd                	add    ebp,edi
c000b87d:	01 f9                	add    ecx,edi
c000b87f:	83 c4 10             	add    esp,0x10
c000b882:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b885:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b888:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b88b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b88f:	0f 85 86 00 00 00    	jne    c000b91b <prepare_data+0x170>
c000b895:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b898:	89 e8                	mov    eax,ebp
c000b89a:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b89d:	29 c8                	sub    eax,ecx
c000b89f:	39 f8                	cmp    eax,edi
c000b8a1:	7d 78                	jge    c000b91b <prepare_data+0x170>
c000b8a3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b8a7:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b8ab:	74 6e                	je     c000b91b <prepare_data+0x170>
c000b8ad:	8d 7e 04             	lea    edi,[esi+0x4]
c000b8b0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b8b4:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b8b7:	29 ef                	sub    edi,ebp
c000b8b9:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b8bd:	7c 29                	jl     c000b8e8 <prepare_data+0x13d>
c000b8bf:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b8c2:	29 f1                	sub    ecx,esi
c000b8c4:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b8cb:	55                   	push   ebp
c000b8cc:	50                   	push   eax
c000b8cd:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b8d0:	50                   	push   eax
c000b8d1:	52                   	push   edx
c000b8d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8d6:	e8 83 4d ff ff       	call   c000065e <memmove>
c000b8db:	83 c4 10             	add    esp,0x10
c000b8de:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8e1:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b8e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b8e8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b8eb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b8ee:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b8f1:	83 c6 05             	add    esi,0x5
c000b8f4:	78 07                	js     c000b8fd <prepare_data+0x152>
c000b8f6:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b8f9:	39 cf                	cmp    edi,ecx
c000b8fb:	7e 04                	jle    c000b901 <prepare_data+0x156>
c000b8fd:	89 ce                	mov    esi,ecx
c000b8ff:	29 c6                	sub    esi,eax
c000b901:	8d 04 82             	lea    eax,[edx+eax*4]
c000b904:	51                   	push   ecx
c000b905:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b90c:	51                   	push   ecx
c000b90d:	6a 00                	push   0x0
c000b90f:	50                   	push   eax
c000b910:	e8 b7 4d ff ff       	call   c00006cc <memset>
c000b915:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b918:	83 c4 10             	add    esp,0x10
c000b91b:	31 c0                	xor    eax,eax
c000b91d:	83 c4 1c             	add    esp,0x1c
c000b920:	5b                   	pop    ebx
c000b921:	5e                   	pop    esi
c000b922:	5f                   	pop    edi
c000b923:	5d                   	pop    ebp
c000b924:	c3                   	ret    

c000b925 <sinc_multichan_vari_process>:
c000b925:	55                   	push   ebp
c000b926:	b8 05 00 00 00       	mov    eax,0x5
c000b92b:	57                   	push   edi
c000b92c:	56                   	push   esi
c000b92d:	53                   	push   ebx
c000b92e:	83 ec 4c             	sub    esp,0x4c
c000b931:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b935:	8b 6c 24 64          	mov    ebp,DWORD PTR [esp+0x64]
c000b939:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b93c:	85 db                	test   ebx,ebx
c000b93e:	0f 84 b5 05 00 00    	je     c000bef9 <sinc_multichan_vari_process+0x5d4>
c000b944:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000b947:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b94a:	0f af d0             	imul   edx,eax
c000b94d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000b950:	0f af 45 0c          	imul   eax,DWORD PTR [ebp+0xc]
c000b954:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b95b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b95e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b965:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b968:	8b 06                	mov    eax,DWORD PTR [esi]
c000b96a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b972:	57                   	push   edi
c000b973:	57                   	push   edi
c000b974:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b978:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97c:	e8 15 dd ff ff       	call   c0009696 <is_bad_src_ratio>
c000b981:	83 c4 10             	add    esp,0x10
c000b984:	89 c2                	mov    edx,eax
c000b986:	b8 16 00 00 00       	mov    eax,0x16
c000b98b:	85 d2                	test   edx,edx
c000b98d:	0f 85 66 05 00 00    	jne    c000bef9 <sinc_multichan_vari_process+0x5d4>
c000b993:	83 ec 0c             	sub    esp,0xc
c000b996:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b999:	e8 25 92 01 00       	call   c0024bc3 <__floatsidf>
c000b99e:	83 c4 10             	add    esp,0x10
c000b9a1:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9a4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b9a8:	68 00 00 00 40       	push   0x40000000
c000b9ad:	6a 00                	push   0x0
c000b9af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9b7:	e8 27 85 01 00       	call   c0023ee3 <__adddf3>
c000b9bc:	59                   	pop    ecx
c000b9bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b9c1:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000b9c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b9c8:	e8 f6 91 01 00       	call   c0024bc3 <__floatsidf>
c000b9cd:	83 c4 10             	add    esp,0x10
c000b9d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9d4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b9d8:	52                   	push   edx
c000b9d9:	50                   	push   eax
c000b9da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9de:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b9e2:	e8 5d 8e 01 00       	call   c0024844 <__divdf3>
c000b9e7:	83 c4 10             	add    esp,0x10
c000b9ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9f2:	8b 06                	mov    eax,DWORD PTR [esi]
c000b9f4:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b9f7:	89 04 24             	mov    DWORD PTR [esp],eax
c000b9fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000b9fe:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c000ba01:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c000ba04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba08:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba0c:	52                   	push   edx
c000ba0d:	50                   	push   eax
c000ba0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba16:	e8 14 94 01 00       	call   c0024e2f <__ltdf2>
c000ba1b:	83 c4 10             	add    esp,0x10
c000ba1e:	85 c0                	test   eax,eax
c000ba20:	79 1d                	jns    c000ba3f <sinc_multichan_vari_process+0x11a>
c000ba22:	68 00 00 f0 3f       	push   0x3ff00000
c000ba27:	6a 00                	push   0x0
c000ba29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ba31:	e8 f9 93 01 00       	call   c0024e2f <__ltdf2>
c000ba36:	83 c4 10             	add    esp,0x10
c000ba39:	85 c0                	test   eax,eax
c000ba3b:	78 2c                	js     c000ba69 <sinc_multichan_vari_process+0x144>
c000ba3d:	eb 4a                	jmp    c000ba89 <sinc_multichan_vari_process+0x164>
c000ba3f:	68 00 00 f0 3f       	push   0x3ff00000
c000ba44:	6a 00                	push   0x0
c000ba46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba4e:	e8 dc 93 01 00       	call   c0024e2f <__ltdf2>
c000ba53:	83 c4 10             	add    esp,0x10
c000ba56:	85 c0                	test   eax,eax
c000ba58:	79 2f                	jns    c000ba89 <sinc_multichan_vari_process+0x164>
c000ba5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ba5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba62:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba65:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ba69:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ba6d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000ba71:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba75:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba79:	e8 c6 8d 01 00       	call   c0024844 <__divdf3>
c000ba7e:	83 c4 10             	add    esp,0x10
c000ba81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ba85:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba89:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ba8c:	50                   	push   eax
c000ba8d:	50                   	push   eax
c000ba8e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba92:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba96:	e8 45 95 01 00       	call   c0024fe0 <lrint>
c000ba9b:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000ba9e:	40                   	inc    eax
c000ba9f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000baa3:	0f af c7             	imul   eax,edi
c000baa6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baaa:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000baad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bab1:	58                   	pop    eax
c000bab2:	5a                   	pop    edx
c000bab3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bab7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000babb:	e8 55 fc ff ff       	call   c000b715 <fmod_one>
c000bac0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bac3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bac7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bacb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bace:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bad2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bad6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bada:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bade:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bae2:	e8 4d 8a 01 00       	call   c0024534 <__subdf3>
c000bae7:	83 c4 18             	add    esp,0x18
c000baea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000baee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000baf2:	52                   	push   edx
c000baf3:	50                   	push   eax
c000baf4:	e8 e7 94 01 00       	call   c0024fe0 <lrint>
c000baf9:	0f af f8             	imul   edi,eax
c000bafc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bb00:	01 f8                	add    eax,edi
c000bb02:	99                   	cdq    
c000bb03:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bb06:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bb09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb11:	68 00 00 f0 3f       	push   0x3ff00000
c000bb16:	6a 00                	push   0x0
c000bb18:	e8 27 8d 01 00       	call   c0024844 <__divdf3>
c000bb1d:	83 c4 10             	add    esp,0x10
c000bb20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bb24:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bb28:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bb2d:	68 23 42 92 0c       	push   0xc924223
c000bb32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb3a:	e8 a4 83 01 00       	call   c0023ee3 <__adddf3>
c000bb3f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bb43:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bb47:	83 c4 20             	add    esp,0x20
c000bb4a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000bb52:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000bb5a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bb5d:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bb60:	7d 4e                	jge    c000bbb0 <sinc_multichan_vari_process+0x28b>
c000bb62:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb65:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb68:	01 c8                	add    eax,ecx
c000bb6a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb6d:	99                   	cdq    
c000bb6e:	f7 f9                	idiv   ecx
c000bb70:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bb74:	7d 0c                	jge    c000bb82 <sinc_multichan_vari_process+0x25d>
c000bb76:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000bb79:	85 ff                	test   edi,edi
c000bb7b:	79 68                	jns    c000bbe5 <sinc_multichan_vari_process+0x2c0>
c000bb7d:	e9 e3 00 00 00       	jmp    c000bc65 <sinc_multichan_vari_process+0x340>
c000bb82:	50                   	push   eax
c000bb83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb87:	55                   	push   ebp
c000bb88:	53                   	push   ebx
c000bb89:	e8 1d fc ff ff       	call   c000b7ab <prepare_data>
c000bb8e:	83 c4 10             	add    esp,0x10
c000bb91:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb94:	85 c0                	test   eax,eax
c000bb96:	0f 85 5d 03 00 00    	jne    c000bef9 <sinc_multichan_vari_process+0x5d4>
c000bb9c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb9f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bba2:	01 c8                	add    eax,ecx
c000bba4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bba7:	99                   	cdq    
c000bba8:	f7 f9                	idiv   ecx
c000bbaa:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bbae:	7c c6                	jl     c000bb76 <sinc_multichan_vari_process+0x251>
c000bbb0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000bbb3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bbb7:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bbba:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bbbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bbc1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bbc5:	89 06                	mov    DWORD PTR [esi],eax
c000bbc7:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bbca:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bbcd:	99                   	cdq    
c000bbce:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bbd1:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000bbd4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bbd7:	99                   	cdq    
c000bbd8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bbdb:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000bbde:	31 c0                	xor    eax,eax
c000bbe0:	e9 14 03 00 00       	jmp    c000bef9 <sinc_multichan_vari_process+0x5d4>
c000bbe5:	83 ec 0c             	sub    esp,0xc
c000bbe8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bbeb:	e8 d3 8f 01 00       	call   c0024bc3 <__floatsidf>
c000bbf0:	83 c4 10             	add    esp,0x10
c000bbf3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbfb:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bbff:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000bc03:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc0b:	e8 d3 82 01 00       	call   c0023ee3 <__adddf3>
c000bc10:	83 c4 10             	add    esp,0x10
c000bc13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc17:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc1b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc2b:	e8 b3 82 01 00       	call   c0023ee3 <__adddf3>
c000bc30:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bc33:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc37:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc3b:	e8 83 8f 01 00       	call   c0024bc3 <__floatsidf>
c000bc40:	83 c4 10             	add    esp,0x10
c000bc43:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc47:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc4b:	52                   	push   edx
c000bc4c:	50                   	push   eax
c000bc4d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc51:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc55:	e8 d3 91 01 00       	call   c0024e2d <__gedf2>
c000bc5a:	83 c4 10             	add    esp,0x10
c000bc5d:	85 c0                	test   eax,eax
c000bc5f:	0f 89 4b ff ff ff    	jns    c000bbb0 <sinc_multichan_vari_process+0x28b>
c000bc65:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bc69:	0f 8e ed 00 00 00    	jle    c000bd5c <sinc_multichan_vari_process+0x437>
c000bc6f:	83 ec 10             	sub    esp,0x10
c000bc72:	ff 75 20             	push   DWORD PTR [ebp+0x20]
c000bc75:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
c000bc78:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bc7b:	ff 36                	push   DWORD PTR [esi]
c000bc7d:	e8 b2 88 01 00       	call   c0024534 <__subdf3>
c000bc82:	83 c4 18             	add    esp,0x18
c000bc85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc89:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc8d:	52                   	push   edx
c000bc8e:	50                   	push   eax
c000bc8f:	e8 2c 93 01 00       	call   c0024fc0 <fabs>
c000bc94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc9c:	83 c4 10             	add    esp,0x10
c000bc9f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bca4:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bca9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcb1:	e8 5b 91 01 00       	call   c0024e11 <__gtdf2>
c000bcb6:	83 c4 10             	add    esp,0x10
c000bcb9:	85 c0                	test   eax,eax
c000bcbb:	0f 8e 9b 00 00 00    	jle    c000bd5c <sinc_multichan_vari_process+0x437>
c000bcc1:	8b 06                	mov    eax,DWORD PTR [esi]
c000bcc3:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bcc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bcca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bcce:	52                   	push   edx
c000bccf:	50                   	push   eax
c000bcd0:	ff 75 20             	push   DWORD PTR [ebp+0x20]
c000bcd3:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
c000bcd6:	e8 59 88 01 00       	call   c0024534 <__subdf3>
c000bcdb:	59                   	pop    ecx
c000bcdc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bce0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000bce4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bce7:	e8 d7 8e 01 00       	call   c0024bc3 <__floatsidf>
c000bcec:	83 c4 10             	add    esp,0x10
c000bcef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf7:	52                   	push   edx
c000bcf8:	50                   	push   eax
c000bcf9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcfd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd01:	e8 5a 88 01 00       	call   c0024560 <__muldf3>
c000bd06:	5f                   	pop    edi
c000bd07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000bd0f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bd12:	e8 ac 8e 01 00       	call   c0024bc3 <__floatsidf>
c000bd17:	83 c4 10             	add    esp,0x10
c000bd1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd1e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd22:	52                   	push   edx
c000bd23:	50                   	push   eax
c000bd24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd28:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd2c:	e8 13 8b 01 00       	call   c0024844 <__divdf3>
c000bd31:	83 c4 10             	add    esp,0x10
c000bd34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bd38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd4c:	e8 92 81 01 00       	call   c0023ee3 <__adddf3>
c000bd51:	83 c4 10             	add    esp,0x10
c000bd54:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bd58:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bd5c:	83 ec 0c             	sub    esp,0xc
c000bd5f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd62:	e8 5c 8e 01 00       	call   c0024bc3 <__floatsidf>
c000bd67:	83 c4 10             	add    esp,0x10
c000bd6a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd6e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd72:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd76:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bd82:	e8 a8 90 01 00       	call   c0024e2f <__ltdf2>
c000bd87:	83 c4 10             	add    esp,0x10
c000bd8a:	85 c0                	test   eax,eax
c000bd8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bd90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bd94:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bd98:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000bd9c:	78 10                	js     c000bdae <sinc_multichan_vari_process+0x489>
c000bd9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bda2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000bda6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bdaa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bdae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdb6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdbe:	e8 9d 87 01 00       	call   c0024560 <__muldf3>
c000bdc3:	59                   	pop    ecx
c000bdc4:	5f                   	pop    edi
c000bdc5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdcd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bdd5:	e8 14 f9 ff ff       	call   c000b6ee <double_to_fp>
c000bdda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdde:	89 c7                	mov    edi,eax
c000bde0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bde8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdec:	e8 6f 87 01 00       	call   c0024560 <__muldf3>
c000bdf1:	83 c4 18             	add    esp,0x18
c000bdf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdf8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdfc:	52                   	push   edx
c000bdfd:	50                   	push   eax
c000bdfe:	e8 eb f8 ff ff       	call   c000b6ee <double_to_fp>
c000be03:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000be06:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000be0a:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000be0d:	8d 04 90             	lea    eax,[eax+edx*4]
c000be10:	50                   	push   eax
c000be11:	50                   	push   eax
c000be12:	50                   	push   eax
c000be13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000be16:	e8 a8 8d 01 00       	call   c0024bc3 <__floatsidf>
c000be1b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be1f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000be23:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be27:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be2b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be33:	e8 0c 8a 01 00       	call   c0024844 <__divdf3>
c000be38:	83 c4 1c             	add    esp,0x1c
c000be3b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be3f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be43:	52                   	push   edx
c000be44:	89 fa                	mov    edx,edi
c000be46:	50                   	push   eax
c000be47:	89 d8                	mov    eax,ebx
c000be49:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be4c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000be50:	e8 58 ed ff ff       	call   c000abad <calc_output_multi>
c000be55:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be58:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000be5b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be63:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be67:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be6b:	e8 d4 89 01 00       	call   c0024844 <__divdf3>
c000be70:	83 c4 10             	add    esp,0x10
c000be73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be77:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000be7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be83:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be87:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000be8b:	e8 53 80 01 00       	call   c0023ee3 <__adddf3>
c000be90:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000be94:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000be98:	83 c4 28             	add    esp,0x28
c000be9b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000be9f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bea3:	e8 6d f8 ff ff       	call   c000b715 <fmod_one>
c000bea8:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000beab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beaf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000beb3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000beb6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000beba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bebe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bec2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bec6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000beca:	e8 65 86 01 00       	call   c0024534 <__subdf3>
c000becf:	83 c4 18             	add    esp,0x18
c000bed2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000beda:	52                   	push   edx
c000bedb:	50                   	push   eax
c000bedc:	e8 ff 90 01 00       	call   c0024fe0 <lrint>
c000bee1:	0f af f8             	imul   edi,eax
c000bee4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bee8:	83 c4 10             	add    esp,0x10
c000beeb:	01 f8                	add    eax,edi
c000beed:	99                   	cdq    
c000beee:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bef1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bef4:	e9 61 fc ff ff       	jmp    c000bb5a <sinc_multichan_vari_process+0x235>
c000bef9:	83 c4 4c             	add    esp,0x4c
c000befc:	5b                   	pop    ebx
c000befd:	5e                   	pop    esi
c000befe:	5f                   	pop    edi
c000beff:	5d                   	pop    ebp
c000bf00:	c3                   	ret    

c000bf01 <sinc_hex_vari_process>:
c000bf01:	55                   	push   ebp
c000bf02:	b8 05 00 00 00       	mov    eax,0x5
c000bf07:	57                   	push   edi
c000bf08:	56                   	push   esi
c000bf09:	53                   	push   ebx
c000bf0a:	83 ec 4c             	sub    esp,0x4c
c000bf0d:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bf11:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bf15:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000bf18:	85 db                	test   ebx,ebx
c000bf1a:	0f 84 b7 05 00 00    	je     c000c4d7 <sinc_hex_vari_process+0x5d6>
c000bf20:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000bf23:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bf26:	0f af d0             	imul   edx,eax
c000bf29:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000bf2c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000bf30:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf37:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf3a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf41:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf44:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf47:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf4f:	57                   	push   edi
c000bf50:	57                   	push   edi
c000bf51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf59:	e8 38 d7 ff ff       	call   c0009696 <is_bad_src_ratio>
c000bf5e:	83 c4 10             	add    esp,0x10
c000bf61:	89 c2                	mov    edx,eax
c000bf63:	b8 16 00 00 00       	mov    eax,0x16
c000bf68:	85 d2                	test   edx,edx
c000bf6a:	0f 85 67 05 00 00    	jne    c000c4d7 <sinc_hex_vari_process+0x5d6>
c000bf70:	83 ec 0c             	sub    esp,0xc
c000bf73:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf76:	e8 48 8c 01 00       	call   c0024bc3 <__floatsidf>
c000bf7b:	83 c4 10             	add    esp,0x10
c000bf7e:	89 04 24             	mov    DWORD PTR [esp],eax
c000bf81:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bf85:	68 00 00 00 40       	push   0x40000000
c000bf8a:	6a 00                	push   0x0
c000bf8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bf90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bf94:	e8 4a 7f 01 00       	call   c0023ee3 <__adddf3>
c000bf99:	59                   	pop    ecx
c000bf9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bf9e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000bfa2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfa5:	e8 19 8c 01 00       	call   c0024bc3 <__floatsidf>
c000bfaa:	83 c4 10             	add    esp,0x10
c000bfad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfb1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bfb5:	52                   	push   edx
c000bfb6:	50                   	push   eax
c000bfb7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfbb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfbf:	e8 80 88 01 00       	call   c0024844 <__divdf3>
c000bfc4:	83 c4 10             	add    esp,0x10
c000bfc7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfcb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bfd2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bfd5:	89 04 24             	mov    DWORD PTR [esp],eax
c000bfd8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bfdc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfdf:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfe2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bfe6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bfea:	52                   	push   edx
c000bfeb:	50                   	push   eax
c000bfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bff0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bff4:	e8 36 8e 01 00       	call   c0024e2f <__ltdf2>
c000bff9:	83 c4 10             	add    esp,0x10
c000bffc:	85 c0                	test   eax,eax
c000bffe:	79 1d                	jns    c000c01d <sinc_hex_vari_process+0x11c>
c000c000:	68 00 00 f0 3f       	push   0x3ff00000
c000c005:	6a 00                	push   0x0
c000c007:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c00b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c00f:	e8 1b 8e 01 00       	call   c0024e2f <__ltdf2>
c000c014:	83 c4 10             	add    esp,0x10
c000c017:	85 c0                	test   eax,eax
c000c019:	78 2c                	js     c000c047 <sinc_hex_vari_process+0x146>
c000c01b:	eb 4a                	jmp    c000c067 <sinc_hex_vari_process+0x166>
c000c01d:	68 00 00 f0 3f       	push   0x3ff00000
c000c022:	6a 00                	push   0x0
c000c024:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c02c:	e8 fe 8d 01 00       	call   c0024e2f <__ltdf2>
c000c031:	83 c4 10             	add    esp,0x10
c000c034:	85 c0                	test   eax,eax
c000c036:	79 2f                	jns    c000c067 <sinc_hex_vari_process+0x166>
c000c038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c03c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c040:	89 04 24             	mov    DWORD PTR [esp],eax
c000c043:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c047:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c04b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c04f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c053:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c057:	e8 e8 87 01 00       	call   c0024844 <__divdf3>
c000c05c:	83 c4 10             	add    esp,0x10
c000c05f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c063:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c067:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c06a:	50                   	push   eax
c000c06b:	50                   	push   eax
c000c06c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c070:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c074:	e8 67 8f 01 00       	call   c0024fe0 <lrint>
c000c079:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c07c:	40                   	inc    eax
c000c07d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c081:	0f af c7             	imul   eax,edi
c000c084:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c088:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c08b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c08f:	58                   	pop    eax
c000c090:	5a                   	pop    edx
c000c091:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c095:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c099:	e8 77 f6 ff ff       	call   c000b715 <fmod_one>
c000c09e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c0a1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c0a5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c0a9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c0b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c0:	e8 6f 84 01 00       	call   c0024534 <__subdf3>
c000c0c5:	83 c4 18             	add    esp,0x18
c000c0c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c0cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c0d0:	52                   	push   edx
c000c0d1:	50                   	push   eax
c000c0d2:	e8 09 8f 01 00       	call   c0024fe0 <lrint>
c000c0d7:	0f af f8             	imul   edi,eax
c000c0da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0de:	01 f8                	add    eax,edi
c000c0e0:	99                   	cdq    
c000c0e1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	68 00 00 f0 3f       	push   0x3ff00000
c000c0f4:	6a 00                	push   0x0
c000c0f6:	e8 49 87 01 00       	call   c0024844 <__divdf3>
c000c0fb:	83 c4 10             	add    esp,0x10
c000c0fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c102:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c106:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c10b:	68 23 42 92 0c       	push   0xc924223
c000c110:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c118:	e8 c6 7d 01 00       	call   c0023ee3 <__adddf3>
c000c11d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c121:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c125:	83 c4 20             	add    esp,0x20
c000c128:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c130:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000c138:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c13b:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c13e:	7d 4e                	jge    c000c18e <sinc_hex_vari_process+0x28d>
c000c140:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c143:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c146:	01 c8                	add    eax,ecx
c000c148:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c14b:	99                   	cdq    
c000c14c:	f7 f9                	idiv   ecx
c000c14e:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c152:	7d 0c                	jge    c000c160 <sinc_hex_vari_process+0x25f>
c000c154:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c157:	85 ff                	test   edi,edi
c000c159:	79 69                	jns    c000c1c4 <sinc_hex_vari_process+0x2c3>
c000c15b:	e9 e4 00 00 00       	jmp    c000c244 <sinc_hex_vari_process+0x343>
c000c160:	50                   	push   eax
c000c161:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c165:	56                   	push   esi
c000c166:	53                   	push   ebx
c000c167:	e8 3f f6 ff ff       	call   c000b7ab <prepare_data>
c000c16c:	83 c4 10             	add    esp,0x10
c000c16f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c172:	85 c0                	test   eax,eax
c000c174:	0f 85 5d 03 00 00    	jne    c000c4d7 <sinc_hex_vari_process+0x5d6>
c000c17a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c17d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c180:	01 c8                	add    eax,ecx
c000c182:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c185:	99                   	cdq    
c000c186:	f7 f9                	idiv   ecx
c000c188:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c18c:	7c c6                	jl     c000c154 <sinc_hex_vari_process+0x253>
c000c18e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c191:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c195:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c198:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c19b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c19f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1a3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c1a6:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c1a9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c1ac:	99                   	cdq    
c000c1ad:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c1b0:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c1b3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c1b6:	99                   	cdq    
c000c1b7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c1ba:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c1bd:	31 c0                	xor    eax,eax
c000c1bf:	e9 13 03 00 00       	jmp    c000c4d7 <sinc_hex_vari_process+0x5d6>
c000c1c4:	83 ec 0c             	sub    esp,0xc
c000c1c7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c1ca:	e8 f4 89 01 00       	call   c0024bc3 <__floatsidf>
c000c1cf:	83 c4 10             	add    esp,0x10
c000c1d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1da:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c1de:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c1e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c1ea:	e8 f4 7c 01 00       	call   c0023ee3 <__adddf3>
c000c1ef:	83 c4 10             	add    esp,0x10
c000c1f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1f6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c1fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c202:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c206:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c20a:	e8 d4 7c 01 00       	call   c0023ee3 <__adddf3>
c000c20f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c212:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c216:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c21a:	e8 a4 89 01 00       	call   c0024bc3 <__floatsidf>
c000c21f:	83 c4 10             	add    esp,0x10
c000c222:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c226:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c22a:	52                   	push   edx
c000c22b:	50                   	push   eax
c000c22c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c230:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c234:	e8 f4 8b 01 00       	call   c0024e2d <__gedf2>
c000c239:	83 c4 10             	add    esp,0x10
c000c23c:	85 c0                	test   eax,eax
c000c23e:	0f 89 4a ff ff ff    	jns    c000c18e <sinc_hex_vari_process+0x28d>
c000c244:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c248:	0f 8e ef 00 00 00    	jle    c000c33d <sinc_hex_vari_process+0x43c>
c000c24e:	83 ec 10             	sub    esp,0x10
c000c251:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c254:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c257:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c25a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c25d:	e8 d2 82 01 00       	call   c0024534 <__subdf3>
c000c262:	83 c4 18             	add    esp,0x18
c000c265:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c269:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c26d:	52                   	push   edx
c000c26e:	50                   	push   eax
c000c26f:	e8 4c 8d 01 00       	call   c0024fc0 <fabs>
c000c274:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c278:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c27c:	83 c4 10             	add    esp,0x10
c000c27f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c284:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c289:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c291:	e8 7b 8b 01 00       	call   c0024e11 <__gtdf2>
c000c296:	83 c4 10             	add    esp,0x10
c000c299:	85 c0                	test   eax,eax
c000c29b:	0f 8e 9c 00 00 00    	jle    c000c33d <sinc_hex_vari_process+0x43c>
c000c2a1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c2a4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c2a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2af:	52                   	push   edx
c000c2b0:	50                   	push   eax
c000c2b1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2b4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2b7:	e8 78 82 01 00       	call   c0024534 <__subdf3>
c000c2bc:	59                   	pop    ecx
c000c2bd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c2c1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c2c5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c2c8:	e8 f6 88 01 00       	call   c0024bc3 <__floatsidf>
c000c2cd:	83 c4 10             	add    esp,0x10
c000c2d0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2d4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d8:	52                   	push   edx
c000c2d9:	50                   	push   eax
c000c2da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e2:	e8 79 82 01 00       	call   c0024560 <__muldf3>
c000c2e7:	5f                   	pop    edi
c000c2e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c2ec:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c2f0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c2f3:	e8 cb 88 01 00       	call   c0024bc3 <__floatsidf>
c000c2f8:	83 c4 10             	add    esp,0x10
c000c2fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2ff:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c303:	52                   	push   edx
c000c304:	50                   	push   eax
c000c305:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c309:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c30d:	e8 32 85 01 00       	call   c0024844 <__divdf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c319:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c31d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c321:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c325:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c329:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c32d:	e8 b1 7b 01 00       	call   c0023ee3 <__adddf3>
c000c332:	83 c4 10             	add    esp,0x10
c000c335:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c339:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c33d:	83 ec 0c             	sub    esp,0xc
c000c340:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c343:	e8 7b 88 01 00       	call   c0024bc3 <__floatsidf>
c000c348:	83 c4 10             	add    esp,0x10
c000c34b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c34f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c353:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c357:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c35b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c35f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c363:	e8 c7 8a 01 00       	call   c0024e2f <__ltdf2>
c000c368:	83 c4 10             	add    esp,0x10
c000c36b:	85 c0                	test   eax,eax
c000c36d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c371:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c375:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c379:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c37d:	78 10                	js     c000c38f <sinc_hex_vari_process+0x48e>
c000c37f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c383:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c387:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c38b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c393:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c39b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c39f:	e8 bc 81 01 00       	call   c0024560 <__muldf3>
c000c3a4:	59                   	pop    ecx
c000c3a5:	5f                   	pop    edi
c000c3a6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3aa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3b6:	e8 33 f3 ff ff       	call   c000b6ee <double_to_fp>
c000c3bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3bf:	89 c7                	mov    edi,eax
c000c3c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c3c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3cd:	e8 8e 81 01 00       	call   c0024560 <__muldf3>
c000c3d2:	83 c4 18             	add    esp,0x18
c000c3d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c3d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c3dd:	52                   	push   edx
c000c3de:	50                   	push   eax
c000c3df:	e8 0a f3 ff ff       	call   c000b6ee <double_to_fp>
c000c3e4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c3e7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c3eb:	83 c4 0c             	add    esp,0xc
c000c3ee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c3f1:	8d 04 90             	lea    eax,[eax+edx*4]
c000c3f4:	50                   	push   eax
c000c3f5:	50                   	push   eax
c000c3f6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3f9:	e8 c5 87 01 00       	call   c0024bc3 <__floatsidf>
c000c3fe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c402:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c406:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c40a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c40e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c412:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c416:	e8 29 84 01 00       	call   c0024844 <__divdf3>
c000c41b:	83 c4 18             	add    esp,0x18
c000c41e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c422:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c426:	52                   	push   edx
c000c427:	89 fa                	mov    edx,edi
c000c429:	50                   	push   eax
c000c42a:	89 d8                	mov    eax,ebx
c000c42c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c430:	e8 26 df ff ff       	call   c000a35b <calc_output_hex>
c000c435:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c439:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c43d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c441:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c445:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c449:	e8 f6 83 01 00       	call   c0024844 <__divdf3>
c000c44e:	83 c4 10             	add    esp,0x10
c000c451:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c455:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c459:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c45d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c461:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c465:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c469:	e8 75 7a 01 00       	call   c0023ee3 <__adddf3>
c000c46e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c472:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c476:	83 c4 18             	add    esp,0x18
c000c479:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c47d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c481:	e8 8f f2 ff ff       	call   c000b715 <fmod_one>
c000c486:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c489:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c48d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c491:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c494:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c49c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c4a0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4a8:	e8 87 80 01 00       	call   c0024534 <__subdf3>
c000c4ad:	83 c4 18             	add    esp,0x18
c000c4b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4b8:	52                   	push   edx
c000c4b9:	50                   	push   eax
c000c4ba:	e8 21 8b 01 00       	call   c0024fe0 <lrint>
c000c4bf:	0f af f8             	imul   edi,eax
c000c4c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c4c6:	83 c4 10             	add    esp,0x10
c000c4c9:	01 f8                	add    eax,edi
c000c4cb:	99                   	cdq    
c000c4cc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c4cf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c4d2:	e9 61 fc ff ff       	jmp    c000c138 <sinc_hex_vari_process+0x237>
c000c4d7:	83 c4 4c             	add    esp,0x4c
c000c4da:	5b                   	pop    ebx
c000c4db:	5e                   	pop    esi
c000c4dc:	5f                   	pop    edi
c000c4dd:	5d                   	pop    ebp
c000c4de:	c3                   	ret    

c000c4df <sinc_quad_vari_process>:
c000c4df:	55                   	push   ebp
c000c4e0:	b8 05 00 00 00       	mov    eax,0x5
c000c4e5:	57                   	push   edi
c000c4e6:	56                   	push   esi
c000c4e7:	53                   	push   ebx
c000c4e8:	83 ec 4c             	sub    esp,0x4c
c000c4eb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c4ef:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c4f3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c4f6:	85 db                	test   ebx,ebx
c000c4f8:	0f 84 b7 05 00 00    	je     c000cab5 <sinc_quad_vari_process+0x5d6>
c000c4fe:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000c501:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c504:	0f af d0             	imul   edx,eax
c000c507:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000c50a:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000c50e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c515:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c518:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c51f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c522:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c529:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c52d:	57                   	push   edi
c000c52e:	57                   	push   edi
c000c52f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c533:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c537:	e8 5a d1 ff ff       	call   c0009696 <is_bad_src_ratio>
c000c53c:	83 c4 10             	add    esp,0x10
c000c53f:	89 c2                	mov    edx,eax
c000c541:	b8 16 00 00 00       	mov    eax,0x16
c000c546:	85 d2                	test   edx,edx
c000c548:	0f 85 67 05 00 00    	jne    c000cab5 <sinc_quad_vari_process+0x5d6>
c000c54e:	83 ec 0c             	sub    esp,0xc
c000c551:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c554:	e8 6a 86 01 00       	call   c0024bc3 <__floatsidf>
c000c559:	83 c4 10             	add    esp,0x10
c000c55c:	89 04 24             	mov    DWORD PTR [esp],eax
c000c55f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c563:	68 00 00 00 40       	push   0x40000000
c000c568:	6a 00                	push   0x0
c000c56a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c56e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c572:	e8 6c 79 01 00       	call   c0023ee3 <__adddf3>
c000c577:	59                   	pop    ecx
c000c578:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c57c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c580:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c583:	e8 3b 86 01 00       	call   c0024bc3 <__floatsidf>
c000c588:	83 c4 10             	add    esp,0x10
c000c58b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c58f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c593:	52                   	push   edx
c000c594:	50                   	push   eax
c000c595:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c599:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c59d:	e8 a2 82 01 00       	call   c0024844 <__divdf3>
c000c5a2:	83 c4 10             	add    esp,0x10
c000c5a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c5a9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c5ad:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5b0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5b3:	89 04 24             	mov    DWORD PTR [esp],eax
c000c5b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c5ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c5bd:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c5c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5c4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5c8:	52                   	push   edx
c000c5c9:	50                   	push   eax
c000c5ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5d2:	e8 58 88 01 00       	call   c0024e2f <__ltdf2>
c000c5d7:	83 c4 10             	add    esp,0x10
c000c5da:	85 c0                	test   eax,eax
c000c5dc:	79 1d                	jns    c000c5fb <sinc_quad_vari_process+0x11c>
c000c5de:	68 00 00 f0 3f       	push   0x3ff00000
c000c5e3:	6a 00                	push   0x0
c000c5e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c5ed:	e8 3d 88 01 00       	call   c0024e2f <__ltdf2>
c000c5f2:	83 c4 10             	add    esp,0x10
c000c5f5:	85 c0                	test   eax,eax
c000c5f7:	78 2c                	js     c000c625 <sinc_quad_vari_process+0x146>
c000c5f9:	eb 4a                	jmp    c000c645 <sinc_quad_vari_process+0x166>
c000c5fb:	68 00 00 f0 3f       	push   0x3ff00000
c000c600:	6a 00                	push   0x0
c000c602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60a:	e8 20 88 01 00       	call   c0024e2f <__ltdf2>
c000c60f:	83 c4 10             	add    esp,0x10
c000c612:	85 c0                	test   eax,eax
c000c614:	79 2f                	jns    c000c645 <sinc_quad_vari_process+0x166>
c000c616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c61a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c61e:	89 04 24             	mov    DWORD PTR [esp],eax
c000c621:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c625:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c629:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c62d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c631:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c635:	e8 0a 82 01 00       	call   c0024844 <__divdf3>
c000c63a:	83 c4 10             	add    esp,0x10
c000c63d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c641:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c645:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c648:	50                   	push   eax
c000c649:	50                   	push   eax
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c652:	e8 89 89 01 00       	call   c0024fe0 <lrint>
c000c657:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c65a:	40                   	inc    eax
c000c65b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c65f:	0f af c7             	imul   eax,edi
c000c662:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c666:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c669:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c66d:	58                   	pop    eax
c000c66e:	5a                   	pop    edx
c000c66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c673:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c677:	e8 99 f0 ff ff       	call   c000b715 <fmod_one>
c000c67c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c67f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c683:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c687:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c68a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c68e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c692:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c696:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c69a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c69e:	e8 91 7e 01 00       	call   c0024534 <__subdf3>
c000c6a3:	83 c4 18             	add    esp,0x18
c000c6a6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c6aa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c6ae:	52                   	push   edx
c000c6af:	50                   	push   eax
c000c6b0:	e8 2b 89 01 00       	call   c0024fe0 <lrint>
c000c6b5:	0f af f8             	imul   edi,eax
c000c6b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6bc:	01 f8                	add    eax,edi
c000c6be:	99                   	cdq    
c000c6bf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c6c2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c6c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6cd:	68 00 00 f0 3f       	push   0x3ff00000
c000c6d2:	6a 00                	push   0x0
c000c6d4:	e8 6b 81 01 00       	call   c0024844 <__divdf3>
c000c6d9:	83 c4 10             	add    esp,0x10
c000c6dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6e0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6e4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c6e9:	68 23 42 92 0c       	push   0xc924223
c000c6ee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6f6:	e8 e8 77 01 00       	call   c0023ee3 <__adddf3>
c000c6fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c6ff:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c703:	83 c4 20             	add    esp,0x20
c000c706:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c70e:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000c716:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c719:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c71c:	7d 4e                	jge    c000c76c <sinc_quad_vari_process+0x28d>
c000c71e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c721:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c724:	01 c8                	add    eax,ecx
c000c726:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c729:	99                   	cdq    
c000c72a:	f7 f9                	idiv   ecx
c000c72c:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c730:	7d 0c                	jge    c000c73e <sinc_quad_vari_process+0x25f>
c000c732:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c735:	85 ff                	test   edi,edi
c000c737:	79 69                	jns    c000c7a2 <sinc_quad_vari_process+0x2c3>
c000c739:	e9 e4 00 00 00       	jmp    c000c822 <sinc_quad_vari_process+0x343>
c000c73e:	50                   	push   eax
c000c73f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c743:	56                   	push   esi
c000c744:	53                   	push   ebx
c000c745:	e8 61 f0 ff ff       	call   c000b7ab <prepare_data>
c000c74a:	83 c4 10             	add    esp,0x10
c000c74d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c750:	85 c0                	test   eax,eax
c000c752:	0f 85 5d 03 00 00    	jne    c000cab5 <sinc_quad_vari_process+0x5d6>
c000c758:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c75b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c75e:	01 c8                	add    eax,ecx
c000c760:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c763:	99                   	cdq    
c000c764:	f7 f9                	idiv   ecx
c000c766:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000c76a:	7c c6                	jl     c000c732 <sinc_quad_vari_process+0x253>
c000c76c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000c76f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c773:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c776:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c779:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c77d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c781:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c784:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c787:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c78a:	99                   	cdq    
c000c78b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c78e:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c791:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c794:	99                   	cdq    
c000c795:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c798:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c79b:	31 c0                	xor    eax,eax
c000c79d:	e9 13 03 00 00       	jmp    c000cab5 <sinc_quad_vari_process+0x5d6>
c000c7a2:	83 ec 0c             	sub    esp,0xc
c000c7a5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c7a8:	e8 16 84 01 00       	call   c0024bc3 <__floatsidf>
c000c7ad:	83 c4 10             	add    esp,0x10
c000c7b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7b8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c7bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000c7c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7c8:	e8 16 77 01 00       	call   c0023ee3 <__adddf3>
c000c7cd:	83 c4 10             	add    esp,0x10
c000c7d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c7d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c7e8:	e8 f6 76 01 00       	call   c0023ee3 <__adddf3>
c000c7ed:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c7f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7f8:	e8 c6 83 01 00       	call   c0024bc3 <__floatsidf>
c000c7fd:	83 c4 10             	add    esp,0x10
c000c800:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c804:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c808:	52                   	push   edx
c000c809:	50                   	push   eax
c000c80a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c80e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c812:	e8 16 86 01 00       	call   c0024e2d <__gedf2>
c000c817:	83 c4 10             	add    esp,0x10
c000c81a:	85 c0                	test   eax,eax
c000c81c:	0f 89 4a ff ff ff    	jns    c000c76c <sinc_quad_vari_process+0x28d>
c000c822:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c826:	0f 8e ef 00 00 00    	jle    c000c91b <sinc_quad_vari_process+0x43c>
c000c82c:	83 ec 10             	sub    esp,0x10
c000c82f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c832:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c835:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c838:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c83b:	e8 f4 7c 01 00       	call   c0024534 <__subdf3>
c000c840:	83 c4 18             	add    esp,0x18
c000c843:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c847:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c84b:	52                   	push   edx
c000c84c:	50                   	push   eax
c000c84d:	e8 6e 87 01 00       	call   c0024fc0 <fabs>
c000c852:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c856:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c85a:	83 c4 10             	add    esp,0x10
c000c85d:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c862:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c867:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c86b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c86f:	e8 9d 85 01 00       	call   c0024e11 <__gtdf2>
c000c874:	83 c4 10             	add    esp,0x10
c000c877:	85 c0                	test   eax,eax
c000c879:	0f 8e 9c 00 00 00    	jle    c000c91b <sinc_quad_vari_process+0x43c>
c000c87f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c882:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c885:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c889:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c88d:	52                   	push   edx
c000c88e:	50                   	push   eax
c000c88f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c892:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c895:	e8 9a 7c 01 00       	call   c0024534 <__subdf3>
c000c89a:	59                   	pop    ecx
c000c89b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c89f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c8a3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c8a6:	e8 18 83 01 00       	call   c0024bc3 <__floatsidf>
c000c8ab:	83 c4 10             	add    esp,0x10
c000c8ae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8b6:	52                   	push   edx
c000c8b7:	50                   	push   eax
c000c8b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8c0:	e8 9b 7c 01 00       	call   c0024560 <__muldf3>
c000c8c5:	5f                   	pop    edi
c000c8c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c8ca:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c8ce:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c8d1:	e8 ed 82 01 00       	call   c0024bc3 <__floatsidf>
c000c8d6:	83 c4 10             	add    esp,0x10
c000c8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c8e1:	52                   	push   edx
c000c8e2:	50                   	push   eax
c000c8e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c8eb:	e8 54 7f 01 00       	call   c0024844 <__divdf3>
c000c8f0:	83 c4 10             	add    esp,0x10
c000c8f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8f7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8fb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c8ff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c903:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c907:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c90b:	e8 d3 75 01 00       	call   c0023ee3 <__adddf3>
c000c910:	83 c4 10             	add    esp,0x10
c000c913:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c917:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c91b:	83 ec 0c             	sub    esp,0xc
c000c91e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c921:	e8 9d 82 01 00       	call   c0024bc3 <__floatsidf>
c000c926:	83 c4 10             	add    esp,0x10
c000c929:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c92d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c93d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c941:	e8 e9 84 01 00       	call   c0024e2f <__ltdf2>
c000c946:	83 c4 10             	add    esp,0x10
c000c949:	85 c0                	test   eax,eax
c000c94b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c94f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c953:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c957:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c95b:	78 10                	js     c000c96d <sinc_quad_vari_process+0x48e>
c000c95d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c961:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c965:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c969:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c96d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c971:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c975:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c979:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c97d:	e8 de 7b 01 00       	call   c0024560 <__muldf3>
c000c982:	59                   	pop    ecx
c000c983:	5f                   	pop    edi
c000c984:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c988:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c98c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c990:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c994:	e8 55 ed ff ff       	call   c000b6ee <double_to_fp>
c000c999:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c99d:	89 c7                	mov    edi,eax
c000c99f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9ab:	e8 b0 7b 01 00       	call   c0024560 <__muldf3>
c000c9b0:	83 c4 18             	add    esp,0x18
c000c9b3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9b7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9bb:	52                   	push   edx
c000c9bc:	50                   	push   eax
c000c9bd:	e8 2c ed ff ff       	call   c000b6ee <double_to_fp>
c000c9c2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c9c5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c9c9:	83 c4 0c             	add    esp,0xc
c000c9cc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c9cf:	8d 04 90             	lea    eax,[eax+edx*4]
c000c9d2:	50                   	push   eax
c000c9d3:	50                   	push   eax
c000c9d4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c9d7:	e8 e7 81 01 00       	call   c0024bc3 <__floatsidf>
c000c9dc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c9e0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c9e4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9e8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9f0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9f4:	e8 4b 7e 01 00       	call   c0024844 <__divdf3>
c000c9f9:	83 c4 18             	add    esp,0x18
c000c9fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca00:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca04:	52                   	push   edx
c000ca05:	89 fa                	mov    edx,edi
c000ca07:	50                   	push   eax
c000ca08:	89 d8                	mov    eax,ebx
c000ca0a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000ca0e:	e8 62 d3 ff ff       	call   c0009d75 <calc_output_quad>
c000ca13:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000ca17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca1f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca23:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca27:	e8 18 7e 01 00       	call   c0024844 <__divdf3>
c000ca2c:	83 c4 10             	add    esp,0x10
c000ca2f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca33:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca47:	e8 97 74 01 00       	call   c0023ee3 <__adddf3>
c000ca4c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca50:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ca54:	83 c4 18             	add    esp,0x18
c000ca57:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca5b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca5f:	e8 b1 ec ff ff       	call   c000b715 <fmod_one>
c000ca64:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca67:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca6b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca6f:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca72:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ca76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca86:	e8 a9 7a 01 00       	call   c0024534 <__subdf3>
c000ca8b:	83 c4 18             	add    esp,0x18
c000ca8e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca92:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca96:	52                   	push   edx
c000ca97:	50                   	push   eax
c000ca98:	e8 43 85 01 00       	call   c0024fe0 <lrint>
c000ca9d:	0f af f8             	imul   edi,eax
c000caa0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000caa4:	83 c4 10             	add    esp,0x10
c000caa7:	01 f8                	add    eax,edi
c000caa9:	99                   	cdq    
c000caaa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000caad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cab0:	e9 61 fc ff ff       	jmp    c000c716 <sinc_quad_vari_process+0x237>
c000cab5:	83 c4 4c             	add    esp,0x4c
c000cab8:	5b                   	pop    ebx
c000cab9:	5e                   	pop    esi
c000caba:	5f                   	pop    edi
c000cabb:	5d                   	pop    ebp
c000cabc:	c3                   	ret    

c000cabd <sinc_stereo_vari_process>:
c000cabd:	55                   	push   ebp
c000cabe:	b8 05 00 00 00       	mov    eax,0x5
c000cac3:	57                   	push   edi
c000cac4:	56                   	push   esi
c000cac5:	53                   	push   ebx
c000cac6:	83 ec 4c             	sub    esp,0x4c
c000cac9:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cacd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cad1:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cad4:	85 db                	test   ebx,ebx
c000cad6:	0f 84 b7 05 00 00    	je     c000d093 <sinc_stereo_vari_process+0x5d6>
c000cadc:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000cadf:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000cae2:	0f af d0             	imul   edx,eax
c000cae5:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000cae8:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000caec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000caf3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000caf6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cafd:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cb00:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb03:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cb07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb0b:	57                   	push   edi
c000cb0c:	57                   	push   edi
c000cb0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb15:	e8 7c cb ff ff       	call   c0009696 <is_bad_src_ratio>
c000cb1a:	83 c4 10             	add    esp,0x10
c000cb1d:	89 c2                	mov    edx,eax
c000cb1f:	b8 16 00 00 00       	mov    eax,0x16
c000cb24:	85 d2                	test   edx,edx
c000cb26:	0f 85 67 05 00 00    	jne    c000d093 <sinc_stereo_vari_process+0x5d6>
c000cb2c:	83 ec 0c             	sub    esp,0xc
c000cb2f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cb32:	e8 8c 80 01 00       	call   c0024bc3 <__floatsidf>
c000cb37:	83 c4 10             	add    esp,0x10
c000cb3a:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb3d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb41:	68 00 00 00 40       	push   0x40000000
c000cb46:	6a 00                	push   0x0
c000cb48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb50:	e8 8e 73 01 00       	call   c0023ee3 <__adddf3>
c000cb55:	59                   	pop    ecx
c000cb56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb5a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000cb5e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb61:	e8 5d 80 01 00       	call   c0024bc3 <__floatsidf>
c000cb66:	83 c4 10             	add    esp,0x10
c000cb69:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cb6d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cb71:	52                   	push   edx
c000cb72:	50                   	push   eax
c000cb73:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb77:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb7b:	e8 c4 7c 01 00       	call   c0024844 <__divdf3>
c000cb80:	83 c4 10             	add    esp,0x10
c000cb83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cb87:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cb8b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cb8e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cb91:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb94:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb98:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cb9b:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cb9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cba2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbb0:	e8 7a 82 01 00       	call   c0024e2f <__ltdf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	79 1d                	jns    c000cbd9 <sinc_stereo_vari_process+0x11c>
c000cbbc:	68 00 00 f0 3f       	push   0x3ff00000
c000cbc1:	6a 00                	push   0x0
c000cbc3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cbcb:	e8 5f 82 01 00       	call   c0024e2f <__ltdf2>
c000cbd0:	83 c4 10             	add    esp,0x10
c000cbd3:	85 c0                	test   eax,eax
c000cbd5:	78 2c                	js     c000cc03 <sinc_stereo_vari_process+0x146>
c000cbd7:	eb 4a                	jmp    c000cc23 <sinc_stereo_vari_process+0x166>
c000cbd9:	68 00 00 f0 3f       	push   0x3ff00000
c000cbde:	6a 00                	push   0x0
c000cbe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbe8:	e8 42 82 01 00       	call   c0024e2f <__ltdf2>
c000cbed:	83 c4 10             	add    esp,0x10
c000cbf0:	85 c0                	test   eax,eax
c000cbf2:	79 2f                	jns    c000cc23 <sinc_stereo_vari_process+0x166>
c000cbf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbf8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cbfc:	89 04 24             	mov    DWORD PTR [esp],eax
c000cbff:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cc03:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cc07:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cc0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc13:	e8 2c 7c 01 00       	call   c0024844 <__divdf3>
c000cc18:	83 c4 10             	add    esp,0x10
c000cc1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cc1f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cc23:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc26:	50                   	push   eax
c000cc27:	50                   	push   eax
c000cc28:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc2c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc30:	e8 ab 83 01 00       	call   c0024fe0 <lrint>
c000cc35:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000cc38:	40                   	inc    eax
c000cc39:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc3d:	0f af c7             	imul   eax,edi
c000cc40:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cc47:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc4b:	58                   	pop    eax
c000cc4c:	5a                   	pop    edx
c000cc4d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc51:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc55:	e8 bb ea ff ff       	call   c000b715 <fmod_one>
c000cc5a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc61:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc65:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc68:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cc7c:	e8 b3 78 01 00       	call   c0024534 <__subdf3>
c000cc81:	83 c4 18             	add    esp,0x18
c000cc84:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc88:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc8c:	52                   	push   edx
c000cc8d:	50                   	push   eax
c000cc8e:	e8 4d 83 01 00       	call   c0024fe0 <lrint>
c000cc93:	0f af f8             	imul   edi,eax
c000cc96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cc9a:	01 f8                	add    eax,edi
c000cc9c:	99                   	cdq    
c000cc9d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cca0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccab:	68 00 00 f0 3f       	push   0x3ff00000
c000ccb0:	6a 00                	push   0x0
c000ccb2:	e8 8d 7b 01 00       	call   c0024844 <__divdf3>
c000ccb7:	83 c4 10             	add    esp,0x10
c000ccba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccbe:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccc2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ccc7:	68 23 42 92 0c       	push   0xc924223
c000cccc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccd0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccd4:	e8 0a 72 01 00       	call   c0023ee3 <__adddf3>
c000ccd9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ccdd:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cce1:	83 c4 20             	add    esp,0x20
c000cce4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000ccec:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000ccf4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ccf7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ccfa:	7d 4e                	jge    c000cd4a <sinc_stereo_vari_process+0x28d>
c000ccfc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ccff:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cd02:	01 c8                	add    eax,ecx
c000cd04:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cd07:	99                   	cdq    
c000cd08:	f7 f9                	idiv   ecx
c000cd0a:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000cd0e:	7d 0c                	jge    c000cd1c <sinc_stereo_vari_process+0x25f>
c000cd10:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cd13:	85 ff                	test   edi,edi
c000cd15:	79 69                	jns    c000cd80 <sinc_stereo_vari_process+0x2c3>
c000cd17:	e9 e4 00 00 00       	jmp    c000ce00 <sinc_stereo_vari_process+0x343>
c000cd1c:	50                   	push   eax
c000cd1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd21:	56                   	push   esi
c000cd22:	53                   	push   ebx
c000cd23:	e8 83 ea ff ff       	call   c000b7ab <prepare_data>
c000cd28:	83 c4 10             	add    esp,0x10
c000cd2b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cd2e:	85 c0                	test   eax,eax
c000cd30:	0f 85 5d 03 00 00    	jne    c000d093 <sinc_stereo_vari_process+0x5d6>
c000cd36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cd39:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cd3c:	01 c8                	add    eax,ecx
c000cd3e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cd41:	99                   	cdq    
c000cd42:	f7 f9                	idiv   ecx
c000cd44:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000cd48:	7c c6                	jl     c000cd10 <sinc_stereo_vari_process+0x253>
c000cd4a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cd4d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd51:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cd54:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cd57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cd5b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd5f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cd62:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cd65:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cd68:	99                   	cdq    
c000cd69:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd6c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cd6f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cd72:	99                   	cdq    
c000cd73:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cd76:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cd79:	31 c0                	xor    eax,eax
c000cd7b:	e9 13 03 00 00       	jmp    c000d093 <sinc_stereo_vari_process+0x5d6>
c000cd80:	83 ec 0c             	sub    esp,0xc
c000cd83:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cd86:	e8 38 7e 01 00       	call   c0024bc3 <__floatsidf>
c000cd8b:	83 c4 10             	add    esp,0x10
c000cd8e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd92:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd96:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cd9a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000cd9e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cda2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cda6:	e8 38 71 01 00       	call   c0023ee3 <__adddf3>
c000cdab:	83 c4 10             	add    esp,0x10
c000cdae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdb6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdbe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdc6:	e8 18 71 01 00       	call   c0023ee3 <__adddf3>
c000cdcb:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cdce:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdd6:	e8 e8 7d 01 00       	call   c0024bc3 <__floatsidf>
c000cddb:	83 c4 10             	add    esp,0x10
c000cdde:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cde2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cde6:	52                   	push   edx
c000cde7:	50                   	push   eax
c000cde8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdf0:	e8 38 80 01 00       	call   c0024e2d <__gedf2>
c000cdf5:	83 c4 10             	add    esp,0x10
c000cdf8:	85 c0                	test   eax,eax
c000cdfa:	0f 89 4a ff ff ff    	jns    c000cd4a <sinc_stereo_vari_process+0x28d>
c000ce00:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000ce04:	0f 8e ef 00 00 00    	jle    c000cef9 <sinc_stereo_vari_process+0x43c>
c000ce0a:	83 ec 10             	sub    esp,0x10
c000ce0d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce10:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce13:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ce16:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ce19:	e8 16 77 01 00       	call   c0024534 <__subdf3>
c000ce1e:	83 c4 18             	add    esp,0x18
c000ce21:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ce25:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ce29:	52                   	push   edx
c000ce2a:	50                   	push   eax
c000ce2b:	e8 90 81 01 00       	call   c0024fc0 <fabs>
c000ce30:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce34:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce38:	83 c4 10             	add    esp,0x10
c000ce3b:	68 df 7c db 3d       	push   0x3ddb7cdf
c000ce40:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000ce45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce49:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce4d:	e8 bf 7f 01 00       	call   c0024e11 <__gtdf2>
c000ce52:	83 c4 10             	add    esp,0x10
c000ce55:	85 c0                	test   eax,eax
c000ce57:	0f 8e 9c 00 00 00    	jle    c000cef9 <sinc_stereo_vari_process+0x43c>
c000ce5d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce60:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ce63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce6b:	52                   	push   edx
c000ce6c:	50                   	push   eax
c000ce6d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ce70:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ce73:	e8 bc 76 01 00       	call   c0024534 <__subdf3>
c000ce78:	59                   	pop    ecx
c000ce79:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ce7d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ce81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ce84:	e8 3a 7d 01 00       	call   c0024bc3 <__floatsidf>
c000ce89:	83 c4 10             	add    esp,0x10
c000ce8c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce90:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce94:	52                   	push   edx
c000ce95:	50                   	push   eax
c000ce96:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce9a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce9e:	e8 bd 76 01 00       	call   c0024560 <__muldf3>
c000cea3:	5f                   	pop    edi
c000cea4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000cea8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ceac:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ceaf:	e8 0f 7d 01 00       	call   c0024bc3 <__floatsidf>
c000ceb4:	83 c4 10             	add    esp,0x10
c000ceb7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cebb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cebf:	52                   	push   edx
c000cec0:	50                   	push   eax
c000cec1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cec5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cec9:	e8 76 79 01 00       	call   c0024844 <__divdf3>
c000cece:	83 c4 10             	add    esp,0x10
c000ced1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ced5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ced9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cedd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cee1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cee5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cee9:	e8 f5 6f 01 00       	call   c0023ee3 <__adddf3>
c000ceee:	83 c4 10             	add    esp,0x10
c000cef1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cef5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cef9:	83 ec 0c             	sub    esp,0xc
c000cefc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ceff:	e8 bf 7c 01 00       	call   c0024bc3 <__floatsidf>
c000cf04:	83 c4 10             	add    esp,0x10
c000cf07:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cf0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cf0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf1f:	e8 0b 7f 01 00       	call   c0024e2f <__ltdf2>
c000cf24:	83 c4 10             	add    esp,0x10
c000cf27:	85 c0                	test   eax,eax
c000cf29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf2d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf31:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf35:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000cf39:	78 10                	js     c000cf4b <sinc_stereo_vari_process+0x48e>
c000cf3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cf3f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000cf43:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf47:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf5b:	e8 00 76 01 00       	call   c0024560 <__muldf3>
c000cf60:	59                   	pop    ecx
c000cf61:	5f                   	pop    edi
c000cf62:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cf66:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cf6a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf6e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cf72:	e8 77 e7 ff ff       	call   c000b6ee <double_to_fp>
c000cf77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf7b:	89 c7                	mov    edi,eax
c000cf7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cf81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf89:	e8 d2 75 01 00       	call   c0024560 <__muldf3>
c000cf8e:	83 c4 18             	add    esp,0x18
c000cf91:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cf95:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cf99:	52                   	push   edx
c000cf9a:	50                   	push   eax
c000cf9b:	e8 4e e7 ff ff       	call   c000b6ee <double_to_fp>
c000cfa0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cfa3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cfa7:	83 c4 0c             	add    esp,0xc
c000cfaa:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cfad:	8d 04 90             	lea    eax,[eax+edx*4]
c000cfb0:	50                   	push   eax
c000cfb1:	50                   	push   eax
c000cfb2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cfb5:	e8 09 7c 01 00       	call   c0024bc3 <__floatsidf>
c000cfba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cfbe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cfc2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfc6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cfca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfd2:	e8 6d 78 01 00       	call   c0024844 <__divdf3>
c000cfd7:	83 c4 18             	add    esp,0x18
c000cfda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfe2:	52                   	push   edx
c000cfe3:	89 fa                	mov    edx,edi
c000cfe5:	50                   	push   eax
c000cfe6:	89 d8                	mov    eax,ebx
c000cfe8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cfec:	e8 a6 c9 ff ff       	call   c0009997 <calc_output_stereo>
c000cff1:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000cff5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cffd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d001:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d005:	e8 3a 78 01 00       	call   c0024844 <__divdf3>
c000d00a:	83 c4 10             	add    esp,0x10
c000d00d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d011:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d015:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d019:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d021:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d025:	e8 b9 6e 01 00       	call   c0023ee3 <__adddf3>
c000d02a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d02e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d032:	83 c4 18             	add    esp,0x18
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 d3 e6 ff ff       	call   c000b715 <fmod_one>
c000d042:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d045:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d04d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d054:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d064:	e8 cb 74 01 00       	call   c0024534 <__subdf3>
c000d069:	83 c4 18             	add    esp,0x18
c000d06c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d070:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d074:	52                   	push   edx
c000d075:	50                   	push   eax
c000d076:	e8 65 7f 01 00       	call   c0024fe0 <lrint>
c000d07b:	0f af f8             	imul   edi,eax
c000d07e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d082:	83 c4 10             	add    esp,0x10
c000d085:	01 f8                	add    eax,edi
c000d087:	99                   	cdq    
c000d088:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d08b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d08e:	e9 61 fc ff ff       	jmp    c000ccf4 <sinc_stereo_vari_process+0x237>
c000d093:	83 c4 4c             	add    esp,0x4c
c000d096:	5b                   	pop    ebx
c000d097:	5e                   	pop    esi
c000d098:	5f                   	pop    edi
c000d099:	5d                   	pop    ebp
c000d09a:	c3                   	ret    

c000d09b <sinc_mono_vari_process>:
c000d09b:	55                   	push   ebp
c000d09c:	b8 05 00 00 00       	mov    eax,0x5
c000d0a1:	57                   	push   edi
c000d0a2:	56                   	push   esi
c000d0a3:	53                   	push   ebx
c000d0a4:	83 ec 4c             	sub    esp,0x4c
c000d0a7:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d0ab:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d0af:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d0b2:	85 db                	test   ebx,ebx
c000d0b4:	0f 84 e8 05 00 00    	je     c000d6a2 <sinc_mono_vari_process+0x607>
c000d0ba:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000d0bd:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d0c0:	0f af d0             	imul   edx,eax
c000d0c3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000d0c6:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000d0ca:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d0d1:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d0d4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d0db:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d0de:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d0e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0e9:	57                   	push   edi
c000d0ea:	57                   	push   edi
c000d0eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0f3:	e8 9e c5 ff ff       	call   c0009696 <is_bad_src_ratio>
c000d0f8:	83 c4 10             	add    esp,0x10
c000d0fb:	89 c2                	mov    edx,eax
c000d0fd:	b8 16 00 00 00       	mov    eax,0x16
c000d102:	85 d2                	test   edx,edx
c000d104:	0f 85 98 05 00 00    	jne    c000d6a2 <sinc_mono_vari_process+0x607>
c000d10a:	83 ec 0c             	sub    esp,0xc
c000d10d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d110:	e8 ae 7a 01 00       	call   c0024bc3 <__floatsidf>
c000d115:	83 c4 10             	add    esp,0x10
c000d118:	89 04 24             	mov    DWORD PTR [esp],eax
c000d11b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d11f:	68 00 00 00 40       	push   0x40000000
c000d124:	6a 00                	push   0x0
c000d126:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d12a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d12e:	e8 b0 6d 01 00       	call   c0023ee3 <__adddf3>
c000d133:	59                   	pop    ecx
c000d134:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d138:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d13c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d13f:	e8 7f 7a 01 00       	call   c0024bc3 <__floatsidf>
c000d144:	83 c4 10             	add    esp,0x10
c000d147:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d14b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d14f:	52                   	push   edx
c000d150:	50                   	push   eax
c000d151:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d155:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d159:	e8 e6 76 01 00       	call   c0024844 <__divdf3>
c000d15e:	83 c4 10             	add    esp,0x10
c000d161:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d165:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d169:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d16c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d16f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d172:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d176:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d179:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d17c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d180:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d184:	52                   	push   edx
c000d185:	50                   	push   eax
c000d186:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d18a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d18e:	e8 9c 7c 01 00       	call   c0024e2f <__ltdf2>
c000d193:	83 c4 10             	add    esp,0x10
c000d196:	85 c0                	test   eax,eax
c000d198:	79 1d                	jns    c000d1b7 <sinc_mono_vari_process+0x11c>
c000d19a:	68 00 00 f0 3f       	push   0x3ff00000
c000d19f:	6a 00                	push   0x0
c000d1a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1a5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1a9:	e8 81 7c 01 00       	call   c0024e2f <__ltdf2>
c000d1ae:	83 c4 10             	add    esp,0x10
c000d1b1:	85 c0                	test   eax,eax
c000d1b3:	78 2c                	js     c000d1e1 <sinc_mono_vari_process+0x146>
c000d1b5:	eb 4a                	jmp    c000d201 <sinc_mono_vari_process+0x166>
c000d1b7:	68 00 00 f0 3f       	push   0x3ff00000
c000d1bc:	6a 00                	push   0x0
c000d1be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1c6:	e8 64 7c 01 00       	call   c0024e2f <__ltdf2>
c000d1cb:	83 c4 10             	add    esp,0x10
c000d1ce:	85 c0                	test   eax,eax
c000d1d0:	79 2f                	jns    c000d201 <sinc_mono_vari_process+0x166>
c000d1d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1da:	89 04 24             	mov    DWORD PTR [esp],eax
c000d1dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1e1:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d1e5:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d1e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1f1:	e8 4e 76 01 00       	call   c0024844 <__divdf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d1fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d201:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d204:	50                   	push   eax
c000d205:	50                   	push   eax
c000d206:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d20a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d20e:	e8 cd 7d 01 00       	call   c0024fe0 <lrint>
c000d213:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d216:	40                   	inc    eax
c000d217:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d21b:	0f af c7             	imul   eax,edi
c000d21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d222:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d225:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d229:	58                   	pop    eax
c000d22a:	5a                   	pop    edx
c000d22b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d22f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d233:	e8 dd e4 ff ff       	call   c000b715 <fmod_one>
c000d238:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d23b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d23f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d243:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d246:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d24a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d24e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d252:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d256:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d25a:	e8 d5 72 01 00       	call   c0024534 <__subdf3>
c000d25f:	83 c4 18             	add    esp,0x18
c000d262:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d266:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d26a:	52                   	push   edx
c000d26b:	50                   	push   eax
c000d26c:	e8 6f 7d 01 00       	call   c0024fe0 <lrint>
c000d271:	0f af f8             	imul   edi,eax
c000d274:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d278:	01 f8                	add    eax,edi
c000d27a:	99                   	cdq    
c000d27b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d27e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d281:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d285:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d289:	68 00 00 f0 3f       	push   0x3ff00000
c000d28e:	6a 00                	push   0x0
c000d290:	e8 af 75 01 00       	call   c0024844 <__divdf3>
c000d295:	83 c4 10             	add    esp,0x10
c000d298:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d2a5:	68 23 42 92 0c       	push   0xc924223
c000d2aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d2b2:	e8 2c 6c 01 00       	call   c0023ee3 <__adddf3>
c000d2b7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d2bb:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d2bf:	83 c4 20             	add    esp,0x20
c000d2c2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000d2ca:	c7 44 24 24 00 00 f0 3f 	mov    DWORD PTR [esp+0x24],0x3ff00000
c000d2d2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d2d5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d2d8:	7d 4e                	jge    c000d328 <sinc_mono_vari_process+0x28d>
c000d2da:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d2dd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d2e0:	01 c8                	add    eax,ecx
c000d2e2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d2e5:	99                   	cdq    
c000d2e6:	f7 f9                	idiv   ecx
c000d2e8:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000d2ec:	7d 0c                	jge    c000d2fa <sinc_mono_vari_process+0x25f>
c000d2ee:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d2f1:	85 ff                	test   edi,edi
c000d2f3:	79 69                	jns    c000d35e <sinc_mono_vari_process+0x2c3>
c000d2f5:	e9 e4 00 00 00       	jmp    c000d3de <sinc_mono_vari_process+0x343>
c000d2fa:	57                   	push   edi
c000d2fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ff:	56                   	push   esi
c000d300:	53                   	push   ebx
c000d301:	e8 a5 e4 ff ff       	call   c000b7ab <prepare_data>
c000d306:	83 c4 10             	add    esp,0x10
c000d309:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d30c:	85 c0                	test   eax,eax
c000d30e:	0f 85 8e 03 00 00    	jne    c000d6a2 <sinc_mono_vari_process+0x607>
c000d314:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d317:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d31a:	01 c8                	add    eax,ecx
c000d31c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d31f:	99                   	cdq    
c000d320:	f7 f9                	idiv   ecx
c000d322:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000d326:	7c c6                	jl     c000d2ee <sinc_mono_vari_process+0x253>
c000d328:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d32b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d32f:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d332:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d339:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d33d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d340:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d343:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d346:	99                   	cdq    
c000d347:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d34a:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d34d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d350:	99                   	cdq    
c000d351:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d354:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d357:	31 c0                	xor    eax,eax
c000d359:	e9 44 03 00 00       	jmp    c000d6a2 <sinc_mono_vari_process+0x607>
c000d35e:	83 ec 0c             	sub    esp,0xc
c000d361:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d364:	e8 5a 78 01 00       	call   c0024bc3 <__floatsidf>
c000d369:	83 c4 10             	add    esp,0x10
c000d36c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d370:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d374:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d378:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000d37c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d380:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d384:	e8 5a 6b 01 00       	call   c0023ee3 <__adddf3>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d390:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d394:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d398:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d39c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3a4:	e8 3a 6b 01 00       	call   c0023ee3 <__adddf3>
c000d3a9:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d3ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b4:	e8 0a 78 01 00       	call   c0024bc3 <__floatsidf>
c000d3b9:	83 c4 10             	add    esp,0x10
c000d3bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3c4:	52                   	push   edx
c000d3c5:	50                   	push   eax
c000d3c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3ce:	e8 3e 7a 01 00       	call   c0024e11 <__gtdf2>
c000d3d3:	83 c4 10             	add    esp,0x10
c000d3d6:	85 c0                	test   eax,eax
c000d3d8:	0f 8f 4a ff ff ff    	jg     c000d328 <sinc_mono_vari_process+0x28d>
c000d3de:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d3e2:	0f 8e ef 00 00 00    	jle    c000d4d7 <sinc_mono_vari_process+0x43c>
c000d3e8:	83 ec 10             	sub    esp,0x10
c000d3eb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d3ee:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d3f1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d3f4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d3f7:	e8 38 71 01 00       	call   c0024534 <__subdf3>
c000d3fc:	83 c4 18             	add    esp,0x18
c000d3ff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d403:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d407:	52                   	push   edx
c000d408:	50                   	push   eax
c000d409:	e8 b2 7b 01 00       	call   c0024fc0 <fabs>
c000d40e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d412:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d416:	83 c4 10             	add    esp,0x10
c000d419:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d41e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d423:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d427:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d42b:	e8 e1 79 01 00       	call   c0024e11 <__gtdf2>
c000d430:	83 c4 10             	add    esp,0x10
c000d433:	85 c0                	test   eax,eax
c000d435:	0f 8e 9c 00 00 00    	jle    c000d4d7 <sinc_mono_vari_process+0x43c>
c000d43b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d43e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d449:	52                   	push   edx
c000d44a:	50                   	push   eax
c000d44b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d44e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d451:	e8 de 70 01 00       	call   c0024534 <__subdf3>
c000d456:	5f                   	pop    edi
c000d457:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d45b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d45f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d462:	e8 5c 77 01 00       	call   c0024bc3 <__floatsidf>
c000d467:	83 c4 10             	add    esp,0x10
c000d46a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d46e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d472:	52                   	push   edx
c000d473:	50                   	push   eax
c000d474:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d478:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47c:	e8 df 70 01 00       	call   c0024560 <__muldf3>
c000d481:	59                   	pop    ecx
c000d482:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000d486:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000d48a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d48d:	e8 31 77 01 00       	call   c0024bc3 <__floatsidf>
c000d492:	83 c4 10             	add    esp,0x10
c000d495:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d499:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d49d:	52                   	push   edx
c000d49e:	50                   	push   eax
c000d49f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a7:	e8 98 73 01 00       	call   c0024844 <__divdf3>
c000d4ac:	83 c4 10             	add    esp,0x10
c000d4af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c7:	e8 17 6a 01 00       	call   c0023ee3 <__adddf3>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4d7:	83 ec 0c             	sub    esp,0xc
c000d4da:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d4dd:	e8 e1 76 01 00       	call   c0024bc3 <__floatsidf>
c000d4e2:	83 c4 10             	add    esp,0x10
c000d4e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	e8 2d 79 01 00       	call   c0024e2f <__ltdf2>
c000d502:	83 c4 10             	add    esp,0x10
c000d505:	85 c0                	test   eax,eax
c000d507:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d50b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d50f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d513:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000d517:	78 10                	js     c000d529 <sinc_mono_vari_process+0x48e>
c000d519:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d51d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d521:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d525:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d529:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d52d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d531:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d535:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d539:	e8 22 70 01 00       	call   c0024560 <__muldf3>
c000d53e:	59                   	pop    ecx
c000d53f:	5f                   	pop    edi
c000d540:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d544:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d548:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d54c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d550:	e8 99 e1 ff ff       	call   c000b6ee <double_to_fp>
c000d555:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d559:	89 c7                	mov    edi,eax
c000d55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d55f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d563:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d567:	e8 f4 6f 01 00       	call   c0024560 <__muldf3>
c000d56c:	83 c4 18             	add    esp,0x18
c000d56f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d577:	52                   	push   edx
c000d578:	50                   	push   eax
c000d579:	e8 70 e1 ff ff       	call   c000b6ee <double_to_fp>
c000d57e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d582:	83 ec 0c             	sub    esp,0xc
c000d585:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d588:	e8 36 76 01 00       	call   c0024bc3 <__floatsidf>
c000d58d:	83 c4 10             	add    esp,0x10
c000d590:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d594:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d598:	52                   	push   edx
c000d599:	50                   	push   eax
c000d59a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d59e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5a2:	e8 9d 72 01 00       	call   c0024844 <__divdf3>
c000d5a7:	83 c4 10             	add    esp,0x10
c000d5aa:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d5ae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d5b2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d5b6:	89 d8                	mov    eax,ebx
c000d5b8:	89 fa                	mov    edx,edi
c000d5ba:	e8 7c c1 ff ff       	call   c000973b <calc_output_single>
c000d5bf:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000d5c2:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d5c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5cd:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d5d1:	52                   	push   edx
c000d5d2:	50                   	push   eax
c000d5d3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d5d7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d5db:	e8 80 6f 01 00       	call   c0024560 <__muldf3>
c000d5e0:	59                   	pop    ecx
c000d5e1:	59                   	pop    ecx
c000d5e2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d5e6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d5ea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5ee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5f2:	e8 3c 78 01 00       	call   c0024e33 <__truncdfsf2>
c000d5f7:	83 c4 10             	add    esp,0x10
c000d5fa:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d5fe:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000d601:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d608:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d60c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d610:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d614:	e8 2b 72 01 00       	call   c0024844 <__divdf3>
c000d619:	83 c4 10             	add    esp,0x10
c000d61c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d620:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d624:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d628:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d62c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d630:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d634:	e8 aa 68 01 00       	call   c0023ee3 <__adddf3>
c000d639:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d63d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d641:	83 c4 18             	add    esp,0x18
c000d644:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d648:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d64c:	e8 c4 e0 ff ff       	call   c000b715 <fmod_one>
c000d651:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d654:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d658:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d65c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d65f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d66f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d673:	e8 bc 6e 01 00       	call   c0024534 <__subdf3>
c000d678:	83 c4 18             	add    esp,0x18
c000d67b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d67f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d683:	52                   	push   edx
c000d684:	50                   	push   eax
c000d685:	e8 56 79 01 00       	call   c0024fe0 <lrint>
c000d68a:	0f af f8             	imul   edi,eax
c000d68d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d691:	83 c4 10             	add    esp,0x10
c000d694:	01 f8                	add    eax,edi
c000d696:	99                   	cdq    
c000d697:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d69a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d69d:	e9 30 fc ff ff       	jmp    c000d2d2 <sinc_mono_vari_process+0x237>
c000d6a2:	83 c4 4c             	add    esp,0x4c
c000d6a5:	5b                   	pop    ebx
c000d6a6:	5e                   	pop    esi
c000d6a7:	5f                   	pop    edi
c000d6a8:	5d                   	pop    ebp
c000d6a9:	c3                   	ret    

c000d6aa <sinc_get_name>:
c000d6aa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d6ae:	31 c0                	xor    eax,eax
c000d6b0:	83 fa 02             	cmp    edx,0x2
c000d6b3:	77 07                	ja     c000d6bc <sinc_get_name+0x12>
c000d6b5:	8b 04 95 c4 67 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd983c]
c000d6bc:	c3                   	ret    

c000d6bd <sinc_get_description>:
c000d6bd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d6c1:	31 c0                	xor    eax,eax
c000d6c3:	83 fa 02             	cmp    edx,0x2
c000d6c6:	77 07                	ja     c000d6cf <sinc_get_description+0x12>
c000d6c8:	8b 04 95 b8 67 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9848]
c000d6cf:	c3                   	ret    

c000d6d0 <sinc_set_converter>:
c000d6d0:	53                   	push   ebx
c000d6d1:	81 ec 58 08 00 00    	sub    esp,0x858
c000d6d7:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000d6de:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000d6e1:	85 c0                	test   eax,eax
c000d6e3:	74 13                	je     c000d6f8 <sinc_set_converter+0x28>
c000d6e5:	83 ec 0c             	sub    esp,0xc
c000d6e8:	50                   	push   eax
c000d6e9:	e8 68 1a 00 00       	call   c000f156 <free>
c000d6ee:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d6f5:	83 c4 10             	add    esp,0x10
c000d6f8:	50                   	push   eax
c000d6f9:	68 44 08 00 00       	push   0x844
c000d6fe:	6a 00                	push   0x0
c000d700:	8d 44 24 18          	lea    eax,[esp+0x18]
c000d704:	50                   	push   eax
c000d705:	e8 c2 2f ff ff       	call   c00006cc <memset>
c000d70a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d70d:	83 c4 10             	add    esp,0x10
c000d710:	b8 0b 00 00 00       	mov    eax,0xb
c000d715:	81 fa 80 00 00 00    	cmp    edx,0x80
c000d71b:	7f 6e                	jg     c000d78b <sinc_set_converter+0xbb>
c000d71d:	83 fa 01             	cmp    edx,0x1
c000d720:	75 10                	jne    c000d732 <sinc_set_converter+0x62>
c000d722:	c7 43 24 9b d0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d09b
c000d729:	c7 43 20 9b d0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d09b
c000d730:	eb 4d                	jmp    c000d77f <sinc_set_converter+0xaf>
c000d732:	83 fa 02             	cmp    edx,0x2
c000d735:	75 10                	jne    c000d747 <sinc_set_converter+0x77>
c000d737:	c7 43 24 bd ca 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cabd
c000d73e:	c7 43 20 bd ca 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cabd
c000d745:	eb 38                	jmp    c000d77f <sinc_set_converter+0xaf>
c000d747:	83 fa 04             	cmp    edx,0x4
c000d74a:	75 10                	jne    c000d75c <sinc_set_converter+0x8c>
c000d74c:	c7 43 24 df c4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c4df
c000d753:	c7 43 20 df c4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c4df
c000d75a:	eb 23                	jmp    c000d77f <sinc_set_converter+0xaf>
c000d75c:	83 fa 06             	cmp    edx,0x6
c000d75f:	75 10                	jne    c000d771 <sinc_set_converter+0xa1>
c000d761:	c7 43 24 01 bf 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bf01
c000d768:	c7 43 20 01 bf 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bf01
c000d76f:	eb 0e                	jmp    c000d77f <sinc_set_converter+0xaf>
c000d771:	c7 43 24 25 b9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b925
c000d778:	c7 43 20 25 b9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b925
c000d77f:	c7 43 28 42 ab 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ab42
c000d786:	b8 0a 00 00 00       	mov    eax,0xa
c000d78b:	81 c4 58 08 00 00    	add    esp,0x858
c000d791:	5b                   	pop    ebx
c000d792:	c3                   	ret    

c000d793 <is_bad_src_ratio>:
c000d793:	83 ec 1c             	sub    esp,0x1c
c000d796:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d79a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d79e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d7a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7a6:	b8 00 00 00 00       	mov    eax,0x0
c000d7ab:	ba 00 00 70 3f       	mov    edx,0x3f700000
c000d7b0:	52                   	push   edx
c000d7b1:	50                   	push   eax
c000d7b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7ba:	e8 70 76 01 00       	call   c0024e2f <__ltdf2>
c000d7bf:	83 c4 10             	add    esp,0x10
c000d7c2:	85 c0                	test   eax,eax
c000d7c4:	78 20                	js     c000d7e6 <is_bad_src_ratio+0x53>
c000d7c6:	b8 00 00 00 00       	mov    eax,0x0
c000d7cb:	ba 00 00 70 40       	mov    edx,0x40700000
c000d7d0:	52                   	push   edx
c000d7d1:	50                   	push   eax
c000d7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7da:	e8 32 76 01 00       	call   c0024e11 <__gtdf2>
c000d7df:	83 c4 10             	add    esp,0x10
c000d7e2:	85 c0                	test   eax,eax
c000d7e4:	7e 07                	jle    c000d7ed <is_bad_src_ratio+0x5a>
c000d7e6:	b8 01 00 00 00       	mov    eax,0x1
c000d7eb:	eb 05                	jmp    c000d7f2 <is_bad_src_ratio+0x5f>
c000d7ed:	b8 00 00 00 00       	mov    eax,0x0
c000d7f2:	83 c4 1c             	add    esp,0x1c
c000d7f5:	c3                   	ret    

c000d7f6 <fmod_one>:
c000d7f6:	83 ec 2c             	sub    esp,0x2c
c000d7f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d7fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d801:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d805:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d809:	83 ec 08             	sub    esp,0x8
c000d80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d814:	e8 c7 77 01 00       	call   c0024fe0 <lrint>
c000d819:	83 c4 10             	add    esp,0x10
c000d81c:	83 ec 0c             	sub    esp,0xc
c000d81f:	50                   	push   eax
c000d820:	e8 9e 73 01 00       	call   c0024bc3 <__floatsidf>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	52                   	push   edx
c000d829:	50                   	push   eax
c000d82a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d82e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d832:	e8 fd 6c 01 00       	call   c0024534 <__subdf3>
c000d837:	83 c4 10             	add    esp,0x10
c000d83a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d83e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d842:	b8 00 00 00 00       	mov    eax,0x0
c000d847:	ba 00 00 00 00       	mov    edx,0x0
c000d84c:	52                   	push   edx
c000d84d:	50                   	push   eax
c000d84e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d852:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d856:	e8 d4 75 01 00       	call   c0024e2f <__ltdf2>
c000d85b:	83 c4 10             	add    esp,0x10
c000d85e:	85 c0                	test   eax,eax
c000d860:	79 1e                	jns    c000d880 <fmod_one+0x8a>
c000d862:	b8 00 00 00 00       	mov    eax,0x0
c000d867:	ba 00 00 f0 3f       	mov    edx,0x3ff00000
c000d86c:	52                   	push   edx
c000d86d:	50                   	push   eax
c000d86e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d872:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d876:	e8 68 66 01 00       	call   c0023ee3 <__adddf3>
c000d87b:	83 c4 10             	add    esp,0x10
c000d87e:	eb 08                	jmp    c000d888 <fmod_one+0x92>
c000d880:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d884:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d888:	83 c4 2c             	add    esp,0x2c
c000d88b:	c3                   	ret    

c000d88c <zoh_vari_process>:
c000d88c:	55                   	push   ebp
c000d88d:	57                   	push   edi
c000d88e:	56                   	push   esi
c000d88f:	53                   	push   ebx
c000d890:	83 ec 3c             	sub    esp,0x3c
c000d893:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000d897:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000d89b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000d8a3:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000d8a7:	0f 8e a9 05 00 00    	jle    c000de56 <zoh_vari_process+0x5ca>
c000d8ad:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000d8b0:	c7 44 24 28 05 00 00 00 	mov    DWORD PTR [esp+0x28],0x5
c000d8b8:	85 db                	test   ebx,ebx
c000d8ba:	0f 84 96 05 00 00    	je     c000de56 <zoh_vari_process+0x5ca>
c000d8c0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000d8c3:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000d8c7:	74 19                	je     c000d8e2 <zoh_vari_process+0x56>
c000d8c9:	31 d2                	xor    edx,edx
c000d8cb:	39 c2                	cmp    edx,eax
c000d8cd:	7d 0c                	jge    c000d8db <zoh_vari_process+0x4f>
c000d8cf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d8d1:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000d8d4:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000d8d8:	42                   	inc    edx
c000d8d9:	eb f0                	jmp    c000d8cb <zoh_vari_process+0x3f>
c000d8db:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000d8e2:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000d8e5:	0f af d0             	imul   edx,eax
c000d8e8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000d8eb:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000d8ef:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000d8f6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000d8f9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000d900:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d903:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d906:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d90a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d90e:	57                   	push   edi
c000d90f:	57                   	push   edi
c000d910:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d918:	e8 76 fe ff ff       	call   c000d793 <is_bad_src_ratio>
c000d91d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d921:	83 c4 10             	add    esp,0x10
c000d924:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000d929:	0f 85 1f 05 00 00    	jne    c000de4e <zoh_vari_process+0x5c2>
c000d92f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d932:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d935:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d939:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d93d:	68 00 00 f0 3f       	push   0x3ff00000
c000d942:	6a 00                	push   0x0
c000d944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d94c:	e8 de 74 01 00       	call   c0024e2f <__ltdf2>
c000d951:	83 c4 10             	add    esp,0x10
c000d954:	85 c0                	test   eax,eax
c000d956:	0f 89 dc 01 00 00    	jns    c000db38 <zoh_vari_process+0x2ac>
c000d95c:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c000d95f:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000d962:	0f 8d d0 01 00 00    	jge    c000db38 <zoh_vari_process+0x2ac>
c000d968:	83 ec 0c             	sub    esp,0xc
c000d96b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000d96e:	e8 50 72 01 00       	call   c0024bc3 <__floatsidf>
c000d973:	83 c4 10             	add    esp,0x10
c000d976:	89 04 24             	mov    DWORD PTR [esp],eax
c000d979:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d97d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d981:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d985:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d989:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d98d:	e8 ce 6b 01 00       	call   c0024560 <__muldf3>
c000d992:	59                   	pop    ecx
c000d993:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d997:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d99b:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d99e:	e8 20 72 01 00       	call   c0024bc3 <__floatsidf>
c000d9a3:	83 c4 10             	add    esp,0x10
c000d9a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9ae:	52                   	push   edx
c000d9af:	50                   	push   eax
c000d9b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9b8:	e8 26 65 01 00       	call   c0023ee3 <__adddf3>
c000d9bd:	59                   	pop    ecx
c000d9be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9c2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000d9c6:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000d9c9:	e8 f5 71 01 00       	call   c0024bc3 <__floatsidf>
c000d9ce:	83 c4 10             	add    esp,0x10
c000d9d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d9d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9d9:	52                   	push   edx
c000d9da:	50                   	push   eax
c000d9db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d9e3:	e8 45 74 01 00       	call   c0024e2d <__gedf2>
c000d9e8:	83 c4 10             	add    esp,0x10
c000d9eb:	85 c0                	test   eax,eax
c000d9ed:	0f 89 45 01 00 00    	jns    c000db38 <zoh_vari_process+0x2ac>
c000d9f3:	85 ff                	test   edi,edi
c000d9f5:	0f 8e ee 00 00 00    	jle    c000dae9 <zoh_vari_process+0x25d>
c000d9fb:	83 ec 10             	sub    esp,0x10
c000d9fe:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000da01:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000da04:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000da07:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000da0a:	e8 25 6b 01 00       	call   c0024534 <__subdf3>
c000da0f:	83 c4 18             	add    esp,0x18
c000da12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000da1a:	52                   	push   edx
c000da1b:	50                   	push   eax
c000da1c:	e8 9f 75 01 00       	call   c0024fc0 <fabs>
c000da21:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da29:	83 c4 10             	add    esp,0x10
c000da2c:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000da31:	68 23 42 92 0c       	push   0xc924223
c000da36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000da3a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000da3e:	e8 ce 73 01 00       	call   c0024e11 <__gtdf2>
c000da43:	83 c4 10             	add    esp,0x10
c000da46:	85 c0                	test   eax,eax
c000da48:	0f 8e 9b 00 00 00    	jle    c000dae9 <zoh_vari_process+0x25d>
c000da4e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da51:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000da54:	89 04 24             	mov    DWORD PTR [esp],eax
c000da57:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000da5b:	52                   	push   edx
c000da5c:	50                   	push   eax
c000da5d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000da60:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000da63:	e8 cc 6a 01 00       	call   c0024534 <__subdf3>
c000da68:	59                   	pop    ecx
c000da69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da6d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da71:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000da74:	e8 4a 71 01 00       	call   c0024bc3 <__floatsidf>
c000da79:	83 c4 10             	add    esp,0x10
c000da7c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000da80:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000da84:	52                   	push   edx
c000da85:	50                   	push   eax
c000da86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da8e:	e8 cd 6a 01 00       	call   c0024560 <__muldf3>
c000da93:	5f                   	pop    edi
c000da94:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000da98:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000da9c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000da9f:	e8 1f 71 01 00       	call   c0024bc3 <__floatsidf>
c000daa4:	83 c4 10             	add    esp,0x10
c000daa7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000daab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000daaf:	52                   	push   edx
c000dab0:	50                   	push   eax
c000dab1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dab5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dab9:	e8 86 6d 01 00       	call   c0024844 <__divdf3>
c000dabe:	83 c4 10             	add    esp,0x10
c000dac1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dac5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dac9:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dacd:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dad1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dad5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dad9:	e8 05 64 01 00       	call   c0023ee3 <__adddf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dae5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dae9:	31 c0                	xor    eax,eax
c000daeb:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000daee:	7e 13                	jle    c000db03 <zoh_vari_process+0x277>
c000daf0:	8b 7c 83 1c          	mov    edi,DWORD PTR [ebx+eax*4+0x1c]
c000daf4:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000daf7:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dafa:	40                   	inc    eax
c000dafb:	89 3c 8a             	mov    DWORD PTR [edx+ecx*4],edi
c000dafe:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000db01:	eb e8                	jmp    c000daeb <zoh_vari_process+0x25f>
c000db03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000db07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000db0b:	68 00 00 f0 3f       	push   0x3ff00000
c000db10:	6a 00                	push   0x0
c000db12:	e8 2d 6d 01 00       	call   c0024844 <__divdf3>
c000db17:	83 c4 10             	add    esp,0x10
c000db1a:	89 04 24             	mov    DWORD PTR [esp],eax
c000db1d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000db21:	52                   	push   edx
c000db22:	50                   	push   eax
c000db23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db2b:	e8 b3 63 01 00       	call   c0023ee3 <__adddf3>
c000db30:	83 c4 10             	add    esp,0x10
c000db33:	e9 fd fd ff ff       	jmp    c000d935 <zoh_vari_process+0xa9>
c000db38:	57                   	push   edi
c000db39:	57                   	push   edi
c000db3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db42:	e8 af fc ff ff       	call   c000d7f6 <fmod_one>
c000db47:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000db4a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db4e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000db52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db62:	e8 cd 69 01 00       	call   c0024534 <__subdf3>
c000db67:	83 c4 18             	add    esp,0x18
c000db6a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db6e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db72:	52                   	push   edx
c000db73:	50                   	push   eax
c000db74:	e8 67 74 01 00       	call   c0024fe0 <lrint>
c000db79:	83 c4 10             	add    esp,0x10
c000db7c:	0f af f8             	imul   edi,eax
c000db7f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000db82:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000db85:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000db89:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000db8c:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c000db8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db93:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000db96:	0f 8d 1d 02 00 00    	jge    c000ddb9 <zoh_vari_process+0x52d>
c000db9c:	83 ec 0c             	sub    esp,0xc
c000db9f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dba2:	e8 1c 70 01 00       	call   c0024bc3 <__floatsidf>
c000dba7:	83 c4 10             	add    esp,0x10
c000dbaa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dbb6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dbba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbbe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbc2:	e8 99 69 01 00       	call   c0024560 <__muldf3>
c000dbc7:	59                   	pop    ecx
c000dbc8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dbcc:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dbd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbd4:	e8 ea 6f 01 00       	call   c0024bc3 <__floatsidf>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dbe0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dbe4:	52                   	push   edx
c000dbe5:	50                   	push   eax
c000dbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dbee:	e8 f0 62 01 00       	call   c0023ee3 <__adddf3>
c000dbf3:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dbf6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbfa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbfe:	e8 c0 6f 01 00       	call   c0024bc3 <__floatsidf>
c000dc03:	83 c4 10             	add    esp,0x10
c000dc06:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dc0a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dc0e:	52                   	push   edx
c000dc0f:	50                   	push   eax
c000dc10:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc14:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc18:	e8 14 72 01 00       	call   c0024e31 <__ledf2>
c000dc1d:	83 c4 10             	add    esp,0x10
c000dc20:	85 c0                	test   eax,eax
c000dc22:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dc26:	0f 8f 8d 01 00 00    	jg     c000ddb9 <zoh_vari_process+0x52d>
c000dc2c:	85 c9                	test   ecx,ecx
c000dc2e:	0f 8e ef 00 00 00    	jle    c000dd23 <zoh_vari_process+0x497>
c000dc34:	83 ec 10             	sub    esp,0x10
c000dc37:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc3a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc3d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000dc40:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000dc43:	e8 ec 68 01 00       	call   c0024534 <__subdf3>
c000dc48:	83 c4 18             	add    esp,0x18
c000dc4b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc4f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc53:	52                   	push   edx
c000dc54:	50                   	push   eax
c000dc55:	e8 66 73 01 00       	call   c0024fc0 <fabs>
c000dc5a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000dc5e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000dc62:	83 c4 10             	add    esp,0x10
c000dc65:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dc6a:	68 23 42 92 0c       	push   0xc924223
c000dc6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc77:	e8 95 71 01 00       	call   c0024e11 <__gtdf2>
c000dc7c:	83 c4 10             	add    esp,0x10
c000dc7f:	85 c0                	test   eax,eax
c000dc81:	0f 8e 9c 00 00 00    	jle    c000dd23 <zoh_vari_process+0x497>
c000dc87:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dc8a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000dc8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc95:	52                   	push   edx
c000dc96:	50                   	push   eax
c000dc97:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc9a:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc9d:	e8 92 68 01 00       	call   c0024534 <__subdf3>
c000dca2:	5f                   	pop    edi
c000dca3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dca7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dcab:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dcae:	e8 10 6f 01 00       	call   c0024bc3 <__floatsidf>
c000dcb3:	83 c4 10             	add    esp,0x10
c000dcb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dcba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dcbe:	52                   	push   edx
c000dcbf:	50                   	push   eax
c000dcc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcc8:	e8 93 68 01 00       	call   c0024560 <__muldf3>
c000dccd:	59                   	pop    ecx
c000dcce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dcd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dcd6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dcd9:	e8 e5 6e 01 00       	call   c0024bc3 <__floatsidf>
c000dcde:	83 c4 10             	add    esp,0x10
c000dce1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dce5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dce9:	52                   	push   edx
c000dcea:	50                   	push   eax
c000dceb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dcf3:	e8 4c 6b 01 00       	call   c0024844 <__divdf3>
c000dcf8:	83 c4 10             	add    esp,0x10
c000dcfb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd13:	e8 cb 61 01 00       	call   c0023ee3 <__adddf3>
c000dd18:	83 c4 10             	add    esp,0x10
c000dd1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd1f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd23:	31 c0                	xor    eax,eax
c000dd25:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000dd28:	39 c2                	cmp    edx,eax
c000dd2a:	7e 1d                	jle    c000dd49 <zoh_vari_process+0x4bd>
c000dd2c:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000dd2f:	29 d1                	sub    ecx,edx
c000dd31:	89 ca                	mov    edx,ecx
c000dd33:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd35:	01 c2                	add    edx,eax
c000dd37:	40                   	inc    eax
c000dd38:	8b 3c 91             	mov    edi,DWORD PTR [ecx+edx*4]
c000dd3b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd3e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd41:	89 3c 8a             	mov    DWORD PTR [edx+ecx*4],edi
c000dd44:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd47:	eb dc                	jmp    c000dd25 <zoh_vari_process+0x499>
c000dd49:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd4d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd51:	68 00 00 f0 3f       	push   0x3ff00000
c000dd56:	6a 00                	push   0x0
c000dd58:	e8 e7 6a 01 00       	call   c0024844 <__divdf3>
c000dd5d:	83 c4 10             	add    esp,0x10
c000dd60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd64:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd6c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd78:	e8 66 61 01 00       	call   c0023ee3 <__adddf3>
c000dd7d:	5f                   	pop    edi
c000dd7e:	59                   	pop    ecx
c000dd7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd8f:	e8 62 fa ff ff       	call   c000d7f6 <fmod_one>
c000dd94:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dd97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dd9b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddaf:	e8 80 67 01 00       	call   c0024534 <__subdf3>
c000ddb4:	e9 ae fd ff ff       	jmp    c000db67 <zoh_vari_process+0x2db>
c000ddb9:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c000ddbd:	7d 3a                	jge    c000ddf9 <zoh_vari_process+0x56d>
c000ddbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddc3:	83 ec 0c             	sub    esp,0xc
c000ddc6:	29 f8                	sub    eax,edi
c000ddc8:	99                   	cdq    
c000ddc9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ddcc:	50                   	push   eax
c000ddcd:	e8 f1 6d 01 00       	call   c0024bc3 <__floatsidf>
c000ddd2:	83 c4 10             	add    esp,0x10
c000ddd5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddd9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dddd:	52                   	push   edx
c000ddde:	50                   	push   eax
c000dddf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dde3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dde7:	e8 f7 60 01 00       	call   c0023ee3 <__adddf3>
c000ddec:	83 c4 10             	add    esp,0x10
c000ddef:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000ddf2:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddf5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddf9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ddfc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000de00:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000de03:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000de06:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de09:	85 c0                	test   eax,eax
c000de0b:	7f 24                	jg     c000de31 <zoh_vari_process+0x5a5>
c000de0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de11:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000de15:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000de18:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000de1b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de1e:	99                   	cdq    
c000de1f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000de22:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000de25:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000de28:	99                   	cdq    
c000de29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000de2c:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000de2f:	eb 25                	jmp    c000de56 <zoh_vari_process+0x5ca>
c000de31:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000de34:	31 d2                	xor    edx,edx
c000de36:	29 c8                	sub    eax,ecx
c000de38:	c1 e0 02             	shl    eax,0x2
c000de3b:	39 d1                	cmp    ecx,edx
c000de3d:	7e ce                	jle    c000de0d <zoh_vari_process+0x581>
c000de3f:	8b 3e                	mov    edi,DWORD PTR [esi]
c000de41:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000de44:	83 c0 04             	add    eax,0x4
c000de47:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c000de4b:	42                   	inc    edx
c000de4c:	eb ed                	jmp    c000de3b <zoh_vari_process+0x5af>
c000de4e:	c7 44 24 28 16 00 00 00 	mov    DWORD PTR [esp+0x28],0x16
c000de56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000de5a:	83 c4 3c             	add    esp,0x3c
c000de5d:	5b                   	pop    ebx
c000de5e:	5e                   	pop    esi
c000de5f:	5f                   	pop    edi
c000de60:	5d                   	pop    ebp
c000de61:	c3                   	ret    

c000de62 <zoh_reset>:
c000de62:	83 ec 0c             	sub    esp,0xc
c000de65:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de69:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000de6c:	85 c0                	test   eax,eax
c000de6e:	74 20                	je     c000de90 <zoh_reset+0x2e>
c000de70:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000de73:	83 c0 1c             	add    eax,0x1c
c000de76:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000de79:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000de80:	c1 e2 02             	shl    edx,0x2
c000de83:	51                   	push   ecx
c000de84:	52                   	push   edx
c000de85:	6a 00                	push   0x0
c000de87:	50                   	push   eax
c000de88:	e8 3f 28 ff ff       	call   c00006cc <memset>
c000de8d:	83 c4 10             	add    esp,0x10
c000de90:	83 c4 0c             	add    esp,0xc
c000de93:	c3                   	ret    

c000de94 <zoh_get_name>:
c000de94:	31 c0                	xor    eax,eax
c000de96:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000de9b:	75 05                	jne    c000dea2 <zoh_get_name+0xe>
c000de9d:	b8 de 68 02 c0       	mov    eax,0xc00268de
c000dea2:	c3                   	ret    

c000dea3 <zoh_get_description>:
c000dea3:	31 c0                	xor    eax,eax
c000dea5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000deaa:	75 05                	jne    c000deb1 <zoh_get_description+0xe>
c000deac:	b8 ef 68 02 c0       	mov    eax,0xc00268ef
c000deb1:	c3                   	ret    

c000deb2 <zoh_set_converter>:
c000deb2:	53                   	push   ebx
c000deb3:	b8 0a 00 00 00       	mov    eax,0xa
c000deb8:	83 ec 08             	sub    esp,0x8
c000debb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000debf:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000dec4:	75 6e                	jne    c000df34 <zoh_set_converter+0x82>
c000dec6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dec9:	85 c0                	test   eax,eax
c000decb:	74 13                	je     c000dee0 <zoh_set_converter+0x2e>
c000decd:	83 ec 0c             	sub    esp,0xc
c000ded0:	50                   	push   eax
c000ded1:	e8 80 12 00 00       	call   c000f156 <free>
c000ded6:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dedd:	83 c4 10             	add    esp,0x10
c000dee0:	50                   	push   eax
c000dee1:	50                   	push   eax
c000dee2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000dee5:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000deec:	50                   	push   eax
c000deed:	6a 01                	push   0x1
c000deef:	e8 82 12 00 00       	call   c000f176 <calloc>
c000def4:	83 c4 10             	add    esp,0x10
c000def7:	89 c2                	mov    edx,eax
c000def9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000defc:	85 d2                	test   edx,edx
c000defe:	b8 01 00 00 00       	mov    eax,0x1
c000df03:	74 2f                	je     c000df34 <zoh_set_converter+0x82>
c000df05:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000df08:	83 ec 0c             	sub    esp,0xc
c000df0b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000df0e:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000df14:	c7 43 24 8c d8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d88c
c000df1b:	c7 43 20 8c d8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d88c
c000df22:	c7 43 28 62 de 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000de62
c000df29:	53                   	push   ebx
c000df2a:	e8 33 ff ff ff       	call   c000de62 <zoh_reset>
c000df2f:	83 c4 10             	add    esp,0x10
c000df32:	31 c0                	xor    eax,eax
c000df34:	83 c4 08             	add    esp,0x8
c000df37:	5b                   	pop    ebx
c000df38:	c3                   	ret    
c000df39:	90                   	nop

c000df3a <Computer::close(int, int, void*)>:
c000df3a:	57                   	push   edi
c000df3b:	56                   	push   esi
c000df3c:	53                   	push   ebx
c000df3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000df41:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000df45:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000df49:	83 ec 0c             	sub    esp,0xc
c000df4c:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000df52:	e8 79 58 00 00       	call   c00137d0 <Device::closeAll()>
c000df57:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000df5d:	83 c4 10             	add    esp,0x10
c000df60:	8b 10                	mov    edx,DWORD PTR [eax]
c000df62:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000df66:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000df6e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000df72:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df76:	5b                   	pop    ebx
c000df77:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000df7a:	5e                   	pop    esi
c000df7b:	5f                   	pop    edi
c000df7c:	ff e0                	jmp    eax

c000df7e <Computer::Computer()>:
c000df7e:	83 ec 0c             	sub    esp,0xc
c000df81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df85:	83 ec 08             	sub    esp,0x8
c000df88:	68 26 69 02 c0       	push   0xc0026926
c000df8d:	50                   	push   eax
c000df8e:	e8 b7 58 00 00       	call   c001384a <Device::Device(char const*)>
c000df93:	83 c4 10             	add    esp,0x10
c000df96:	ba f0 6a 02 c0       	mov    edx,0xc0026af0
c000df9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9f:	89 10                	mov    DWORD PTR [eax],edx
c000dfa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa5:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000dfaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb3:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000dfbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000dfc7:	83 ca 04             	or     edx,0x4
c000dfca:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000dfd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dfda:	0f b6 d0             	movzx  edx,al
c000dfdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe1:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000dfe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000dff2:	0f b6 d0             	movzx  edx,al
c000dff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff9:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000dffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e002:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e008:	8d 50 01             	lea    edx,[eax+0x1]
c000e00b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e00f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e015:	0f b6 d0             	movzx  edx,al
c000e018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e01c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e020:	83 e1 3f             	and    ecx,0x3f
c000e023:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e02b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e031:	0f b6 d0             	movzx  edx,al
c000e034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e038:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e03f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e043:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e049:	0f b6 d0             	movzx  edx,al
c000e04c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e050:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e059:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e05f:	8d 50 01             	lea    edx,[eax+0x1]
c000e062:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e066:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e06c:	0f b6 d0             	movzx  edx,al
c000e06f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e073:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e077:	83 e1 3f             	and    ecx,0x3f
c000e07a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e07e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e082:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e088:	0f b6 d0             	movzx  edx,al
c000e08b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e08f:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e09a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e0a0:	0f b6 d0             	movzx  edx,al
c000e0a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0a7:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e0ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e0b6:	8d 50 01             	lea    edx,[eax+0x1]
c000e0b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e0bd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e0c3:	0f b6 d0             	movzx  edx,al
c000e0c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0ca:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e0ce:	83 e1 3f             	and    ecx,0x3f
c000e0d1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e0d5:	90                   	nop
c000e0d6:	83 c4 0c             	add    esp,0xc
c000e0d9:	c3                   	ret    

c000e0da <Computer::setBootMessage(char const*)>:
c000e0da:	c3                   	ret    
c000e0db:	90                   	nop

c000e0dc <Computer::start()>:
c000e0dc:	56                   	push   esi
c000e0dd:	53                   	push   ebx
c000e0de:	50                   	push   eax
c000e0df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e0e3:	e8 58 d8 00 00       	call   c001b940 <lockScheduler()>
c000e0e8:	e8 87 db 00 00       	call   c001bc74 <schedule()>
c000e0ed:	e8 50 d8 00 00       	call   c001b942 <unlockScheduler()>
c000e0f2:	fb                   	sti    
c000e0f3:	83 ec 0c             	sub    esp,0xc
c000e0f6:	68 3b 07 00 00       	push   0x73b
c000e0fb:	e8 60 40 00 00       	call   c0012160 <operator new(unsigned long)>
c000e100:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e107:	89 c6                	mov    esi,eax
c000e109:	ff 35 54 b8 02 c0    	push   DWORD PTR ds:0xc002b854
c000e10f:	68 2f 69 02 c0       	push   0xc002692f
c000e114:	6a 01                	push   0x1
c000e116:	50                   	push   eax
c000e117:	e8 84 d6 00 00       	call   c001b7a0 <Process::Process(bool, char const*, Process*, char**)>
c000e11c:	83 c4 20             	add    esp,0x20
c000e11f:	68 ff 00 00 00       	push   0xff
c000e124:	6a 00                	push   0x0
c000e126:	68 d3 ea 00 c0       	push   0xc000ead3
c000e12b:	56                   	push   esi
c000e12c:	e8 39 d9 00 00       	call   c001ba6a <Process::createThread(void (*)(void*), void*, int)>
c000e131:	6a 7a                	push   0x7a
c000e133:	6a 00                	push   0x0
c000e135:	68 a3 c2 01 c0       	push   0xc001c2a3
c000e13a:	ff 35 54 b8 02 c0    	push   DWORD PTR ds:0xc002b854
c000e140:	e8 25 d9 00 00       	call   c001ba6a <Process::createThread(void (*)(void*), void*, int)>
c000e145:	83 c4 20             	add    esp,0x20
c000e148:	a3 08 b8 02 c0       	mov    ds:0xc002b808,eax
c000e14d:	c6 05 0d a4 02 c0 01 	mov    BYTE PTR ds:0xc002a40d,0x1
c000e154:	e8 51 44 00 00       	call   c00125aa <initVFS()>
c000e159:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e15f:	8b 10                	mov    edx,DWORD PTR [eax]
c000e161:	6a 00                	push   0x0
c000e163:	6a 00                	push   0x0
c000e165:	6a 00                	push   0x0
c000e167:	50                   	push   eax
c000e168:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e16b:	e8 2e c0 00 00       	call   c001a19e <setupSystemCalls()>
c000e170:	e8 33 4f 00 00       	call   c00130a8 <loadClockSettings()>
c000e175:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e178:	e8 27 56 00 00       	call   c00137a4 <Device::loadDriversForAll()>
c000e17d:	5a                   	pop    edx
c000e17e:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c000e184:	59                   	pop    ecx
c000e185:	6a 01                	push   0x1
c000e187:	68 3c 69 02 c0       	push   0xc002693c
c000e18c:	e8 df d1 00 00       	call   c001b370 <Thr::loadDLL(char const*, bool)>
c000e191:	5e                   	pop    esi
c000e192:	5a                   	pop    edx
c000e193:	53                   	push   ebx
c000e194:	50                   	push   eax
c000e195:	e8 9c d3 00 00       	call   c001b536 <Thr::executeDLL(unsigned long, void*)>
c000e19a:	c7 04 24 c0 7a 02 c0 	mov    DWORD PTR [esp],0xc0027ac0
c000e1a1:	e8 a9 40 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000e1a6:	83 c4 10             	add    esp,0x10
c000e1a9:	83 ec 0c             	sub    esp,0xc
c000e1ac:	6a 02                	push   0x2
c000e1ae:	e8 1b dc 00 00       	call   c001bdce <blockTask(TaskState)>
c000e1b3:	83 c4 10             	add    esp,0x10
c000e1b6:	eb f1                	jmp    c000e1a9 <Computer::start()+0xcd>

c000e1b8 <firstTask()>:
c000e1b8:	83 ec 18             	sub    esp,0x18
c000e1bb:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c000e1c1:	e8 16 ff ff ff       	call   c000e0dc <Computer::start()>

c000e1c6 <Computer::detectFeatures()>:
c000e1c6:	55                   	push   ebp
c000e1c7:	57                   	push   edi
c000e1c8:	56                   	push   esi
c000e1c9:	53                   	push   ebx
c000e1ca:	83 ec 1c             	sub    esp,0x1c
c000e1cd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e1d1:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e1db:	e8 c3 21 ff ff       	call   c00003a3 <detectCPUID>
c000e1e0:	85 c0                	test   eax,eax
c000e1e2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e1e8:	0f 95 c2             	setne  dl
c000e1eb:	83 e0 fd             	and    eax,0xfffffffd
c000e1ee:	d1 e2                	shl    edx,1
c000e1f0:	09 d0                	or     eax,edx
c000e1f2:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e1f8:	a8 02                	test   al,0x2
c000e1fa:	75 46                	jne    c000e242 <Computer::detectFeatures()+0x7c>
c000e1fc:	f6 05 21 a4 02 c0 04 	test   BYTE PTR ds:0xc002a421,0x4
c000e203:	74 07                	je     c000e20c <Computer::detectFeatures()+0x46>
c000e205:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e20c:	e8 15 4e 01 00       	call   c0023026 <x87Detect>
c000e211:	83 e0 01             	and    eax,0x1
c000e214:	c1 e0 04             	shl    eax,0x4
c000e217:	88 c2                	mov    dl,al
c000e219:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e21f:	83 e0 ef             	and    eax,0xffffffef
c000e222:	09 d0                	or     eax,edx
c000e224:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e22a:	a8 10                	test   al,0x10
c000e22c:	0f 85 10 01 00 00    	jne    c000e342 <Computer::detectFeatures()+0x17c>
c000e232:	84 c0                	test   al,al
c000e234:	0f 88 2b 01 00 00    	js     c000e365 <Computer::detectFeatures()+0x19f>
c000e23a:	83 c4 1c             	add    esp,0x1c
c000e23d:	5b                   	pop    ebx
c000e23e:	5e                   	pop    esi
c000e23f:	5f                   	pop    edi
c000e240:	5d                   	pop    ebp
c000e241:	c3                   	ret    
c000e242:	83 ec 0c             	sub    esp,0xc
c000e245:	6a 20                	push   0x20
c000e247:	e8 62 95 00 00       	call   c00177ae <CPU::cpuidCheckEDX(unsigned int)>
c000e24c:	83 e0 01             	and    eax,0x1
c000e24f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e256:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e25c:	83 e0 f7             	and    eax,0xfffffff7
c000e25f:	09 d0                	or     eax,edx
c000e261:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e267:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e26e:	e8 3b 95 00 00       	call   c00177ae <CPU::cpuidCheckEDX(unsigned int)>
c000e273:	83 e0 01             	and    eax,0x1
c000e276:	88 c2                	mov    dl,al
c000e278:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e27e:	83 e0 fe             	and    eax,0xfffffffe
c000e281:	09 d0                	or     eax,edx
c000e283:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e289:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e290:	e8 19 95 00 00       	call   c00177ae <CPU::cpuidCheckEDX(unsigned int)>
c000e295:	c1 e0 07             	shl    eax,0x7
c000e298:	88 c2                	mov    dl,al
c000e29a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e2a0:	83 e0 7f             	and    eax,0x7f
c000e2a3:	09 d0                	or     eax,edx
c000e2a5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e2ab:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e2b2:	e8 f7 94 00 00       	call   c00177ae <CPU::cpuidCheckEDX(unsigned int)>
c000e2b7:	83 c4 10             	add    esp,0x10
c000e2ba:	83 e0 01             	and    eax,0x1
c000e2bd:	c1 e0 05             	shl    eax,0x5
c000e2c0:	88 c2                	mov    dl,al
c000e2c2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e2c8:	83 e0 df             	and    eax,0xffffffdf
c000e2cb:	09 d0                	or     eax,edx
c000e2cd:	f7 05 20 a4 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002a420,0x401
c000e2d7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e2dd:	0f 84 a8 00 00 00    	je     c000e38b <Computer::detectFeatures()+0x1c5>
c000e2e3:	83 ec 0c             	sub    esp,0xc
c000e2e6:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000e2ed:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e2f1:	50                   	push   eax
c000e2f2:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e2f6:	55                   	push   ebp
c000e2f7:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e2fb:	57                   	push   edi
c000e2fc:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e300:	56                   	push   esi
c000e301:	68 00 00 00 80       	push   0x80000000
c000e306:	e8 1f 94 00 00       	call   c001772a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e30b:	83 c4 20             	add    esp,0x20
c000e30e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e315:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e319:	0f 86 dd fe ff ff    	jbe    c000e1fc <Computer::detectFeatures()+0x36>
c000e31f:	83 ec 0c             	sub    esp,0xc
c000e322:	50                   	push   eax
c000e323:	55                   	push   ebp
c000e324:	57                   	push   edi
c000e325:	56                   	push   esi
c000e326:	68 01 00 00 80       	push   0x80000001
c000e32b:	e8 fa 93 00 00       	call   c001772a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e330:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e33a:	83 c4 20             	add    esp,0x20
c000e33d:	e9 ba fe ff ff       	jmp    c000e1fc <Computer::detectFeatures()+0x36>
c000e342:	e8 99 4c 01 00       	call   c0022fe0 <sseDetect>
c000e347:	88 c2                	mov    dl,al
c000e349:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e34f:	c1 e2 07             	shl    edx,0x7
c000e352:	83 e0 7f             	and    eax,0x7f
c000e355:	09 d0                	or     eax,edx
c000e357:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e35d:	84 c0                	test   al,al
c000e35f:	0f 89 d5 fe ff ff    	jns    c000e23a <Computer::detectFeatures()+0x74>
c000e365:	e8 66 4c 01 00       	call   c0022fd0 <avxDetect>
c000e36a:	83 e0 01             	and    eax,0x1
c000e36d:	c1 e0 05             	shl    eax,0x5
c000e370:	88 c2                	mov    dl,al
c000e372:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e378:	83 e0 df             	and    eax,0xffffffdf
c000e37b:	09 d0                	or     eax,edx
c000e37d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e383:	83 c4 1c             	add    esp,0x1c
c000e386:	5b                   	pop    ebx
c000e387:	5e                   	pop    esi
c000e388:	5f                   	pop    edi
c000e389:	5d                   	pop    ebp
c000e38a:	c3                   	ret    
c000e38b:	83 ec 0c             	sub    esp,0xc
c000e38e:	68 00 02 00 00       	push   0x200
c000e393:	e8 16 94 00 00       	call   c00177ae <CPU::cpuidCheckEDX(unsigned int)>
c000e398:	83 c4 10             	add    esp,0x10
c000e39b:	e9 43 ff ff ff       	jmp    c000e2e3 <Computer::detectFeatures()+0x11d>

c000e3a0 <Computer::displayFeatures()>:
c000e3a0:	53                   	push   ebx
c000e3a1:	83 ec 14             	sub    esp,0x14
c000e3a4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e3a8:	68 5f 69 02 c0       	push   0xc002695f
c000e3ad:	e8 9d 3e 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000e3b2:	83 c4 10             	add    esp,0x10
c000e3b5:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e3bc:	0f 85 73 02 00 00    	jne    c000e635 <Computer::displayFeatures()+0x295>
c000e3c2:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e3c7:	83 ec 08             	sub    esp,0x8
c000e3ca:	50                   	push   eax
c000e3cb:	68 72 69 02 c0       	push   0xc0026972
c000e3d0:	e8 7a 3e 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000e3d5:	83 c4 10             	add    esp,0x10
c000e3d8:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e3df:	0f 85 8c 02 00 00    	jne    c000e671 <Computer::displayFeatures()+0x2d1>
c000e3e5:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e3ea:	83 ec 08             	sub    esp,0x8
c000e3ed:	50                   	push   eax
c000e3ee:	68 83 69 02 c0       	push   0xc0026983
c000e3f3:	e8 57 3e 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000e3f8:	83 c4 10             	add    esp,0x10
c000e3fb:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e402:	0f 85 5f 02 00 00    	jne    c000e667 <Computer::displayFeatures()+0x2c7>
c000e408:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e40d:	83 ec 08             	sub    esp,0x8
c000e410:	50                   	push   eax
c000e411:	68 94 69 02 c0       	push   0xc0026994
c000e416:	e8 34 3e 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000e41b:	83 c4 10             	add    esp,0x10
c000e41e:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e425:	0f 85 32 02 00 00    	jne    c000e65d <Computer::displayFeatures()+0x2bd>
c000e42b:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e430:	83 ec 08             	sub    esp,0x8
c000e433:	50                   	push   eax
c000e434:	68 a5 69 02 c0       	push   0xc00269a5
c000e439:	e8 11 3e 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000e43e:	83 c4 10             	add    esp,0x10
c000e441:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e448:	0f 85 05 02 00 00    	jne    c000e653 <Computer::displayFeatures()+0x2b3>
c000e44e:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e453:	83 ec 08             	sub    esp,0x8
c000e456:	50                   	push   eax
c000e457:	68 b6 69 02 c0       	push   0xc00269b6
c000e45c:	e8 ee 3d 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000e461:	83 c4 10             	add    esp,0x10
c000e464:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e46b:	0f 85 d8 01 00 00    	jne    c000e649 <Computer::displayFeatures()+0x2a9>
c000e471:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e476:	83 ec 08             	sub    esp,0x8
c000e479:	50                   	push   eax
c000e47a:	68 c7 69 02 c0       	push   0xc00269c7
c000e47f:	e8 cb 3d 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000e484:	83 c4 10             	add    esp,0x10
c000e487:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e48e:	0f 85 ab 01 00 00    	jne    c000e63f <Computer::displayFeatures()+0x29f>
c000e494:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e499:	83 ec 08             	sub    esp,0x8
c000e49c:	50                   	push   eax
c000e49d:	68 d8 69 02 c0       	push   0xc00269d8
c000e4a2:	e8 a8 3d 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000e4a7:	83 c4 10             	add    esp,0x10
c000e4aa:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e4b1:	0f 88 1b 02 00 00    	js     c000e6d2 <Computer::displayFeatures()+0x332>
c000e4b7:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e4bc:	83 ec 08             	sub    esp,0x8
c000e4bf:	50                   	push   eax
c000e4c0:	68 e9 69 02 c0       	push   0xc00269e9
c000e4c5:	e8 85 3d 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000e4ca:	83 c4 10             	add    esp,0x10
c000e4cd:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e4d4:	0f 85 a1 01 00 00    	jne    c000e67b <Computer::displayFeatures()+0x2db>
c000e4da:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e4df:	83 ec 08             	sub    esp,0x8
c000e4e2:	50                   	push   eax
c000e4e3:	68 fa 69 02 c0       	push   0xc00269fa
c000e4e8:	e8 62 3d 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000e4ed:	83 c4 10             	add    esp,0x10
c000e4f0:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e4f7:	0f 85 cb 01 00 00    	jne    c000e6c8 <Computer::displayFeatures()+0x328>
c000e4fd:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e502:	83 ec 08             	sub    esp,0x8
c000e505:	50                   	push   eax
c000e506:	68 0b 6a 02 c0       	push   0xc0026a0b
c000e50b:	e8 3f 3d 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000e510:	83 c4 10             	add    esp,0x10
c000e513:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e51a:	0f 85 9e 01 00 00    	jne    c000e6be <Computer::displayFeatures()+0x31e>
c000e520:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e525:	83 ec 08             	sub    esp,0x8
c000e528:	50                   	push   eax
c000e529:	68 1c 6a 02 c0       	push   0xc0026a1c
c000e52e:	e8 1c 3d 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000e533:	83 c4 10             	add    esp,0x10
c000e536:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e53d:	0f 85 71 01 00 00    	jne    c000e6b4 <Computer::displayFeatures()+0x314>
c000e543:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e548:	83 ec 08             	sub    esp,0x8
c000e54b:	50                   	push   eax
c000e54c:	68 2d 6a 02 c0       	push   0xc0026a2d
c000e551:	e8 f9 3c 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000e556:	83 c4 10             	add    esp,0x10
c000e559:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e560:	0f 85 44 01 00 00    	jne    c000e6aa <Computer::displayFeatures()+0x30a>
c000e566:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e56b:	83 ec 08             	sub    esp,0x8
c000e56e:	50                   	push   eax
c000e56f:	68 3e 6a 02 c0       	push   0xc0026a3e
c000e574:	e8 d6 3c 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000e579:	83 c4 10             	add    esp,0x10
c000e57c:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e583:	0f 85 17 01 00 00    	jne    c000e6a0 <Computer::displayFeatures()+0x300>
c000e589:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e58e:	83 ec 08             	sub    esp,0x8
c000e591:	50                   	push   eax
c000e592:	68 4f 6a 02 c0       	push   0xc0026a4f
c000e597:	e8 b3 3c 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000e59c:	83 c4 10             	add    esp,0x10
c000e59f:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e5a6:	0f 85 ea 00 00 00    	jne    c000e696 <Computer::displayFeatures()+0x2f6>
c000e5ac:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e5b1:	83 ec 08             	sub    esp,0x8
c000e5b4:	50                   	push   eax
c000e5b5:	68 60 6a 02 c0       	push   0xc0026a60
c000e5ba:	e8 90 3c 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000e5bf:	83 c4 10             	add    esp,0x10
c000e5c2:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e5c9:	0f 88 0d 01 00 00    	js     c000e6dc <Computer::displayFeatures()+0x33c>
c000e5cf:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e5d4:	83 ec 08             	sub    esp,0x8
c000e5d7:	50                   	push   eax
c000e5d8:	68 71 6a 02 c0       	push   0xc0026a71
c000e5dd:	e8 6d 3c 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000e5e2:	83 c4 10             	add    esp,0x10
c000e5e5:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e5ec:	0f 85 9a 00 00 00    	jne    c000e68c <Computer::displayFeatures()+0x2ec>
c000e5f2:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e5f7:	83 ec 08             	sub    esp,0x8
c000e5fa:	50                   	push   eax
c000e5fb:	68 82 6a 02 c0       	push   0xc0026a82
c000e600:	e8 4a 3c 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000e605:	83 c4 10             	add    esp,0x10
c000e608:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e60f:	75 74                	jne    c000e685 <Computer::displayFeatures()+0x2e5>
c000e611:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c000e616:	83 ec 08             	sub    esp,0x8
c000e619:	50                   	push   eax
c000e61a:	68 93 6a 02 c0       	push   0xc0026a93
c000e61f:	e8 2b 3c 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000e624:	c7 44 24 20 7e 80 02 c0 	mov    DWORD PTR [esp+0x20],0xc002807e
c000e62c:	83 c4 18             	add    esp,0x18
c000e62f:	5b                   	pop    ebx
c000e630:	e9 1a 3c 00 00       	jmp    c001224f <Dbg::kprintf(char const*, ...)>
c000e635:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e63a:	e9 88 fd ff ff       	jmp    c000e3c7 <Computer::displayFeatures()+0x27>
c000e63f:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e644:	e9 50 fe ff ff       	jmp    c000e499 <Computer::displayFeatures()+0xf9>
c000e649:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e64e:	e9 23 fe ff ff       	jmp    c000e476 <Computer::displayFeatures()+0xd6>
c000e653:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e658:	e9 f6 fd ff ff       	jmp    c000e453 <Computer::displayFeatures()+0xb3>
c000e65d:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e662:	e9 c9 fd ff ff       	jmp    c000e430 <Computer::displayFeatures()+0x90>
c000e667:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e66c:	e9 9c fd ff ff       	jmp    c000e40d <Computer::displayFeatures()+0x6d>
c000e671:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e676:	e9 6f fd ff ff       	jmp    c000e3ea <Computer::displayFeatures()+0x4a>
c000e67b:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e680:	e9 5a fe ff ff       	jmp    c000e4df <Computer::displayFeatures()+0x13f>
c000e685:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e68a:	eb 8a                	jmp    c000e616 <Computer::displayFeatures()+0x276>
c000e68c:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e691:	e9 61 ff ff ff       	jmp    c000e5f7 <Computer::displayFeatures()+0x257>
c000e696:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e69b:	e9 11 ff ff ff       	jmp    c000e5b1 <Computer::displayFeatures()+0x211>
c000e6a0:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6a5:	e9 e4 fe ff ff       	jmp    c000e58e <Computer::displayFeatures()+0x1ee>
c000e6aa:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6af:	e9 b7 fe ff ff       	jmp    c000e56b <Computer::displayFeatures()+0x1cb>
c000e6b4:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6b9:	e9 8a fe ff ff       	jmp    c000e548 <Computer::displayFeatures()+0x1a8>
c000e6be:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6c3:	e9 5d fe ff ff       	jmp    c000e525 <Computer::displayFeatures()+0x185>
c000e6c8:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6cd:	e9 30 fe ff ff       	jmp    c000e502 <Computer::displayFeatures()+0x162>
c000e6d2:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6d7:	e9 e0 fd ff ff       	jmp    c000e4bc <Computer::displayFeatures()+0x11c>
c000e6dc:	b8 58 69 02 c0       	mov    eax,0xc0026958
c000e6e1:	e9 ee fe ff ff       	jmp    c000e5d4 <Computer::displayFeatures()+0x234>

c000e6e6 <Computer::rdmsr(unsigned int)>:
c000e6e6:	83 ec 0c             	sub    esp,0xc
c000e6e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6ed:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000e6f4:	74 0a                	je     c000e700 <Computer::rdmsr(unsigned int)+0x1a>
c000e6f6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e6fa:	0f 32                	rdmsr  
c000e6fc:	83 c4 0c             	add    esp,0xc
c000e6ff:	c3                   	ret    
c000e700:	83 ec 0c             	sub    esp,0xc
c000e703:	68 a4 6a 02 c0       	push   0xc0026aa4
c000e708:	e8 e0 a2 00 00       	call   c00189ed <Krnl::panic(char const*)>
c000e70d:	83 c4 10             	add    esp,0x10
c000e710:	eb e4                	jmp    c000e6f6 <Computer::rdmsr(unsigned int)+0x10>

c000e712 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000e712:	57                   	push   edi
c000e713:	56                   	push   esi
c000e714:	52                   	push   edx
c000e715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e719:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e71d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e721:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000e728:	74 0e                	je     c000e738 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000e72a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e72e:	89 f0                	mov    eax,esi
c000e730:	89 fa                	mov    edx,edi
c000e732:	0f 30                	wrmsr  
c000e734:	58                   	pop    eax
c000e735:	5e                   	pop    esi
c000e736:	5f                   	pop    edi
c000e737:	c3                   	ret    
c000e738:	83 ec 0c             	sub    esp,0xc
c000e73b:	68 aa 6a 02 c0       	push   0xc0026aaa
c000e740:	e8 a8 a2 00 00       	call   c00189ed <Krnl::panic(char const*)>
c000e745:	83 c4 10             	add    esp,0x10
c000e748:	eb e0                	jmp    c000e72a <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000e74a <Computer::nmiEnabled()>:
c000e74a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e74e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000e754:	c3                   	ret    
c000e755:	90                   	nop

c000e756 <Computer::readCMOS(unsigned char)>:
c000e756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e75a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000e761:	19 c0                	sbb    eax,eax
c000e763:	83 e0 80             	and    eax,0xffffff80
c000e766:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e76a:	e6 70                	out    0x70,al
c000e76c:	e4 71                	in     al,0x71
c000e76e:	c3                   	ret    
c000e76f:	90                   	nop

c000e770 <Computer::enableNMI(bool)>:
c000e770:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e774:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e778:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000e77e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000e786:	eb ce                	jmp    c000e756 <Computer::readCMOS(unsigned char)>

c000e788 <Computer::open(int, int, void*)>:
c000e788:	56                   	push   esi
c000e789:	53                   	push   ebx
c000e78a:	83 ec 10             	sub    esp,0x10
c000e78d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e791:	f6 05 20 a4 02 c0 04 	test   BYTE PTR ds:0xc002a420,0x4
c000e798:	68 68 22 00 00       	push   0x2268
c000e79d:	0f 94 05 c0 93 02 c0 	sete   BYTE PTR ds:0xc00293c0
c000e7a4:	e8 b7 39 00 00       	call   c0012160 <operator new(unsigned long)>
c000e7a9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7ac:	89 c6                	mov    esi,eax
c000e7ae:	e8 39 86 00 00       	call   c0016dec <ACPI::ACPI()>
c000e7b3:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000e7b9:	58                   	pop    eax
c000e7ba:	5a                   	pop    edx
c000e7bb:	56                   	push   esi
c000e7bc:	53                   	push   ebx
c000e7bd:	e8 98 4e 00 00       	call   c001365a <Device::addChild(Device*)>
c000e7c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7c5:	e8 fc f9 ff ff       	call   c000e1c6 <Computer::detectFeatures()>
c000e7ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e7cd:	e8 ce fb ff ff       	call   c000e3a0 <Computer::displayFeatures()>
c000e7d2:	59                   	pop    ecx
c000e7d3:	5e                   	pop    esi
c000e7d4:	6a 01                	push   0x1
c000e7d6:	53                   	push   ebx
c000e7d7:	e8 94 ff ff ff       	call   c000e770 <Computer::enableNMI(bool)>
c000e7dc:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000e7e3:	e8 78 39 00 00       	call   c0012160 <operator new(unsigned long)>
c000e7e8:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7eb:	89 c6                	mov    esi,eax
c000e7ed:	e8 8c 90 00 00       	call   c001787e <CPU::CPU()>
c000e7f2:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000e7f8:	58                   	pop    eax
c000e7f9:	5a                   	pop    edx
c000e7fa:	56                   	push   esi
c000e7fb:	53                   	push   ebx
c000e7fc:	e8 59 4e 00 00       	call   c001365a <Device::addChild(Device*)>
c000e801:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e807:	8b 10                	mov    edx,DWORD PTR [eax]
c000e809:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e80d:	6a 00                	push   0x0
c000e80f:	6a 00                	push   0x0
c000e811:	50                   	push   eax
c000e812:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e815:	83 c4 20             	add    esp,0x20
c000e818:	e8 a5 53 00 00       	call   c0013bc2 <setupFPU()>
c000e81d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000e823:	85 c0                	test   eax,eax
c000e825:	74 1f                	je     c000e846 <Computer::open(int, int, void*)+0xbe>
c000e827:	83 ec 08             	sub    esp,0x8
c000e82a:	50                   	push   eax
c000e82b:	53                   	push   ebx
c000e82c:	e8 29 4e 00 00       	call   c001365a <Device::addChild(Device*)>
c000e831:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000e837:	8b 10                	mov    edx,DWORD PTR [eax]
c000e839:	6a 00                	push   0x0
c000e83b:	6a 00                	push   0x0
c000e83d:	6a 00                	push   0x0
c000e83f:	50                   	push   eax
c000e840:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e843:	83 c4 20             	add    esp,0x20
c000e846:	83 ec 0c             	sub    esp,0xc
c000e849:	68 b8 e1 00 c0       	push   0xc000e1b8
c000e84e:	e8 17 d3 00 00       	call   c001bb6a <setupMultitasking(void (*)())>
c000e853:	83 c4 14             	add    esp,0x14
c000e856:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e85b:	5b                   	pop    ebx
c000e85c:	5e                   	pop    esi
c000e85d:	c3                   	ret    

c000e85e <Computer::disableNMI()>:
c000e85e:	6a 00                	push   0x0
c000e860:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e864:	e8 07 ff ff ff       	call   c000e770 <Computer::enableNMI(bool)>
c000e869:	58                   	pop    eax
c000e86a:	5a                   	pop    edx
c000e86b:	c3                   	ret    

c000e86c <Computer::writeCMOS(unsigned char, unsigned char)>:
c000e86c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e870:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000e877:	19 c0                	sbb    eax,eax
c000e879:	83 e0 80             	and    eax,0xffffff80
c000e87c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000e880:	e6 70                	out    0x70,al
c000e882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e886:	e6 71                	out    0x71,al
c000e888:	c3                   	ret    
c000e889:	90                   	nop

c000e88a <Computer::handleNMI()>:
c000e88a:	56                   	push   esi
c000e88b:	53                   	push   ebx
c000e88c:	83 ec 10             	sub    esp,0x10
c000e88f:	e4 92                	in     al,0x92
c000e891:	89 c6                	mov    esi,eax
c000e893:	e4 61                	in     al,0x61
c000e895:	68 b0 6a 02 c0       	push   0xc0026ab0
c000e89a:	88 c3                	mov    bl,al
c000e89c:	e8 ae 39 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000e8a1:	83 c4 10             	add    esp,0x10
c000e8a4:	83 e6 10             	and    esi,0x10
c000e8a7:	75 0d                	jne    c000e8b6 <Computer::handleNMI()+0x2c>
c000e8a9:	f6 c3 40             	test   bl,0x40
c000e8ac:	75 1d                	jne    c000e8cb <Computer::handleNMI()+0x41>
c000e8ae:	84 db                	test   bl,bl
c000e8b0:	78 2d                	js     c000e8df <Computer::handleNMI()+0x55>
c000e8b2:	58                   	pop    eax
c000e8b3:	5b                   	pop    ebx
c000e8b4:	5e                   	pop    esi
c000e8b5:	c3                   	ret    
c000e8b6:	83 ec 0c             	sub    esp,0xc
c000e8b9:	68 c1 6a 02 c0       	push   0xc0026ac1
c000e8be:	e8 2a a1 00 00       	call   c00189ed <Krnl::panic(char const*)>
c000e8c3:	83 c4 10             	add    esp,0x10
c000e8c6:	f6 c3 40             	test   bl,0x40
c000e8c9:	74 e3                	je     c000e8ae <Computer::handleNMI()+0x24>
c000e8cb:	83 ec 0c             	sub    esp,0xc
c000e8ce:	68 ce 6a 02 c0       	push   0xc0026ace
c000e8d3:	e8 15 a1 00 00       	call   c00189ed <Krnl::panic(char const*)>
c000e8d8:	83 c4 10             	add    esp,0x10
c000e8db:	84 db                	test   bl,bl
c000e8dd:	79 d3                	jns    c000e8b2 <Computer::handleNMI()+0x28>
c000e8df:	c7 44 24 10 d8 6a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026ad8
c000e8e7:	5a                   	pop    edx
c000e8e8:	5b                   	pop    ebx
c000e8e9:	5e                   	pop    esi
c000e8ea:	e9 fe a0 00 00       	jmp    c00189ed <Krnl::panic(char const*)>
c000e8ef:	90                   	nop

c000e8f0 <Computer::setDiskActivityLight(int, bool)>:
c000e8f0:	56                   	push   esi
c000e8f1:	53                   	push   ebx
c000e8f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e8f6:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e8fb:	77 1b                	ja     c000e918 <Computer::setDiskActivityLight(int, bool)+0x28>
c000e8fd:	e4 92                	in     al,0x92
c000e8ff:	bb 40 00 00 00       	mov    ebx,0x40
c000e904:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000e908:	89 da                	mov    edx,ebx
c000e90a:	d3 e2                	shl    edx,cl
c000e90c:	89 f1                	mov    ecx,esi
c000e90e:	f7 d2                	not    edx
c000e910:	d3 e3                	shl    ebx,cl
c000e912:	21 d0                	and    eax,edx
c000e914:	09 d8                	or     eax,ebx
c000e916:	e6 92                	out    0x92,al
c000e918:	5b                   	pop    ebx
c000e919:	5e                   	pop    esi
c000e91a:	c3                   	ret    
c000e91b:	90                   	nop

c000e91c <GDTEntry::setBase(unsigned int)>:
c000e91c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e920:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e924:	89 c1                	mov    ecx,eax
c000e926:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e92a:	c1 e9 10             	shr    ecx,0x10
c000e92d:	c1 e8 18             	shr    eax,0x18
c000e930:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e933:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e936:	c3                   	ret    
c000e937:	90                   	nop

c000e938 <GDTEntry::setLimit(unsigned int)>:
c000e938:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e93c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e940:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e943:	66 89 01             	mov    WORD PTR [ecx],ax
c000e946:	83 e2 f0             	and    edx,0xfffffff0
c000e949:	c1 e8 10             	shr    eax,0x10
c000e94c:	83 e0 0f             	and    eax,0xf
c000e94f:	09 d0                	or     eax,edx
c000e951:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e954:	c3                   	ret    
c000e955:	90                   	nop

c000e956 <GDT::GDT()>:
c000e956:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e95a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e964:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e96a:	90                   	nop
c000e96b:	c3                   	ret    

c000e96c <GDT::addEntry(GDTEntry)>:
c000e96c:	53                   	push   ebx
c000e96d:	83 ec 0c             	sub    esp,0xc
c000e970:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e974:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e976:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e97d:	52                   	push   edx
c000e97e:	50                   	push   eax
c000e97f:	68 14 6b 02 c0       	push   0xc0026b14
c000e984:	e8 c6 38 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000e989:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e98b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e98f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e993:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000e997:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000e99b:	8d 50 01             	lea    edx,[eax+0x1]
c000e99e:	c1 e0 03             	shl    eax,0x3
c000e9a1:	89 13                	mov    DWORD PTR [ebx],edx
c000e9a3:	83 c4 18             	add    esp,0x18
c000e9a6:	5b                   	pop    ebx
c000e9a7:	c3                   	ret    

c000e9a8 <GDT::getNumberOfEntries()>:
c000e9a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9ac:	8b 00                	mov    eax,DWORD PTR [eax]
c000e9ae:	c3                   	ret    
c000e9af:	90                   	nop

c000e9b0 <GDT::flush()>:
c000e9b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e9b4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9b6:	83 c0 04             	add    eax,0x4
c000e9b9:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e9c0:	a3 12 a4 02 c0       	mov    ds:0xc002a412,eax
c000e9c5:	66 89 15 10 a4 02 c0 	mov    WORD PTR ds:0xc002a410,dx
c000e9cc:	e9 46 1a ff ff       	jmp    c0000417 <loadGDT>
c000e9d1:	90                   	nop

c000e9d2 <GDT::setup()>:
c000e9d2:	55                   	push   ebp
c000e9d3:	57                   	push   edi
c000e9d4:	56                   	push   esi
c000e9d5:	53                   	push   ebx
c000e9d6:	83 ec 3c             	sub    esp,0x3c
c000e9d9:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000e9dd:	6a 00                	push   0x0
c000e9df:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000e9e3:	53                   	push   ebx
c000e9e4:	e8 33 ff ff ff       	call   c000e91c <GDTEntry::setBase(unsigned int)>
c000e9e9:	6a 00                	push   0x0
c000e9eb:	53                   	push   ebx
c000e9ec:	e8 47 ff ff ff       	call   c000e938 <GDTEntry::setLimit(unsigned int)>
c000e9f1:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000e9f9:	6a 00                	push   0x0
c000e9fb:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000e9ff:	53                   	push   ebx
c000ea00:	e8 17 ff ff ff       	call   c000e91c <GDTEntry::setBase(unsigned int)>
c000ea05:	68 ff ff ff 00       	push   0xffffff
c000ea0a:	53                   	push   ebx
c000ea0b:	e8 28 ff ff ff       	call   c000e938 <GDTEntry::setLimit(unsigned int)>
c000ea10:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ea14:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ea19:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ea1e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ea22:	83 c4 20             	add    esp,0x20
c000ea25:	6a 00                	push   0x0
c000ea27:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ea2b:	53                   	push   ebx
c000ea2c:	e8 eb fe ff ff       	call   c000e91c <GDTEntry::setBase(unsigned int)>
c000ea31:	68 ff ff ff 00       	push   0xffffff
c000ea36:	53                   	push   ebx
c000ea37:	e8 fc fe ff ff       	call   c000e938 <GDTEntry::setLimit(unsigned int)>
c000ea3c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ea40:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea44:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ea48:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ea4c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea50:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ea55:	0d 00 92 c0 00       	or     eax,0xc09200
c000ea5a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ea5e:	89 d8                	mov    eax,ebx
c000ea60:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ea64:	80 cc 60             	or     ah,0x60
c000ea67:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea6b:	83 c4 0c             	add    esp,0xc
c000ea6e:	89 f8                	mov    eax,edi
c000ea70:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea74:	80 cc 60             	or     ah,0x60
c000ea77:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ea7b:	89 c7                	mov    edi,eax
c000ea7d:	55                   	push   ebp
c000ea7e:	e8 e9 fe ff ff       	call   c000e96c <GDT::addEntry(GDTEntry)>
c000ea83:	83 c4 0c             	add    esp,0xc
c000ea86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ea8a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ea8e:	55                   	push   ebp
c000ea8f:	e8 d8 fe ff ff       	call   c000e96c <GDT::addEntry(GDTEntry)>
c000ea94:	83 c4 0c             	add    esp,0xc
c000ea97:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ea9b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ea9f:	55                   	push   ebp
c000eaa0:	e8 c7 fe ff ff       	call   c000e96c <GDT::addEntry(GDTEntry)>
c000eaa5:	83 c4 0c             	add    esp,0xc
c000eaa8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eaac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000eab0:	53                   	push   ebx
c000eab1:	51                   	push   ecx
c000eab2:	55                   	push   ebp
c000eab3:	e8 b4 fe ff ff       	call   c000e96c <GDT::addEntry(GDTEntry)>
c000eab8:	83 c4 0c             	add    esp,0xc
c000eabb:	57                   	push   edi
c000eabc:	56                   	push   esi
c000eabd:	55                   	push   ebp
c000eabe:	e8 a9 fe ff ff       	call   c000e96c <GDT::addEntry(GDTEntry)>
c000eac3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000eac6:	e8 e5 fe ff ff       	call   c000e9b0 <GDT::flush()>
c000eacb:	83 c4 4c             	add    esp,0x4c
c000eace:	5b                   	pop    ebx
c000eacf:	5e                   	pop    esi
c000ead0:	5f                   	pop    edi
c000ead1:	5d                   	pop    ebp
c000ead2:	c3                   	ret    

c000ead3 <idleFunction(void*)>:
c000ead3:	53                   	push   ebx
c000ead4:	83 ec 08             	sub    esp,0x8
c000ead7:	e8 66 ce 00 00       	call   c001b942 <unlockScheduler()>
c000eadc:	e8 89 8d 00 00       	call   c001786a <CPU::current()>
c000eae1:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000eae8:	74 41                	je     c000eb2b <idleFunction(void*)+0x58>
c000eaea:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c000eaef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eaf6:	74 33                	je     c000eb2b <idleFunction(void*)+0x58>
c000eaf8:	31 db                	xor    ebx,ebx
c000eafa:	52                   	push   edx
c000eafb:	52                   	push   edx
c000eafc:	68 e1 00 00 00       	push   0xe1
c000eb01:	50                   	push   eax
c000eb02:	e8 df fb ff ff       	call   c000e6e6 <Computer::rdmsr(unsigned int)>
c000eb07:	53                   	push   ebx
c000eb08:	83 e0 02             	and    eax,0x2
c000eb0b:	50                   	push   eax
c000eb0c:	68 e1 00 00 00       	push   0xe1
c000eb11:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c000eb17:	e8 f6 fb ff ff       	call   c000e712 <Computer::wrmsr(unsigned int, unsigned long long)>
c000eb1c:	83 c4 20             	add    esp,0x20
c000eb1f:	e8 10 17 ff ff       	call   c0000234 <doTPAUSE>
c000eb24:	e8 37 65 01 00       	call   c0025060 <idleCommon()>
c000eb29:	eb f4                	jmp    c000eb1f <idleFunction(void*)+0x4c>
c000eb2b:	fb                   	sti    
c000eb2c:	f4                   	hlt    
c000eb2d:	e8 2e 65 01 00       	call   c0025060 <idleCommon()>
c000eb32:	eb f7                	jmp    c000eb2b <idleFunction(void*)+0x58>

c000eb34 <IDTEntry::IDTEntry(bool)>:
c000eb34:	83 ec 04             	sub    esp,0x4
c000eb37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb3b:	88 04 24             	mov    BYTE PTR [esp],al
c000eb3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb42:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eb48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb4c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eb50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb54:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb57:	83 e2 f0             	and    edx,0xfffffff0
c000eb5a:	83 ca 0e             	or     edx,0xe
c000eb5d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb64:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb67:	83 e2 ef             	and    edx,0xffffffef
c000eb6a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb6d:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000eb71:	74 04                	je     c000eb77 <IDTEntry::IDTEntry(bool)+0x43>
c000eb73:	b2 03                	mov    dl,0x3
c000eb75:	eb 02                	jmp    c000eb79 <IDTEntry::IDTEntry(bool)+0x45>
c000eb77:	b2 00                	mov    dl,0x0
c000eb79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb7d:	83 e2 03             	and    edx,0x3
c000eb80:	88 d1                	mov    cl,dl
c000eb82:	c1 e1 05             	shl    ecx,0x5
c000eb85:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb88:	83 e2 9f             	and    edx,0xffffff9f
c000eb8b:	09 ca                	or     edx,ecx
c000eb8d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb94:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eb97:	83 ca 80             	or     edx,0xffffff80
c000eb9a:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eb9d:	90                   	nop
c000eb9e:	83 c4 04             	add    esp,0x4
c000eba1:	c3                   	ret    

c000eba2 <IDTEntry::setOffset(unsigned int)>:
c000eba2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000eba6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebaa:	66 89 02             	mov    WORD PTR [edx],ax
c000ebad:	c1 e8 10             	shr    eax,0x10
c000ebb0:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ebb4:	c3                   	ret    
c000ebb5:	90                   	nop

c000ebb6 <IDT::IDT()>:
c000ebb6:	90                   	nop
c000ebb7:	c3                   	ret    

c000ebb8 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ebb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebbc:	83 c0 30             	add    eax,0x30
c000ebbf:	c3                   	ret    

c000ebc0 <IDT::addEntry(IDTEntry, int)>:
c000ebc0:	53                   	push   ebx
c000ebc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ebc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ebc9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ebcd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ebd1:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ebd4:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ebd8:	5b                   	pop    ebx
c000ebd9:	c3                   	ret    

c000ebda <IDT::addEntry(int, void (*)(), bool)>:
c000ebda:	53                   	push   ebx
c000ebdb:	83 ec 10             	sub    esp,0x10
c000ebde:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ebe3:	50                   	push   eax
c000ebe4:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ebe8:	53                   	push   ebx
c000ebe9:	e8 46 ff ff ff       	call   c000eb34 <IDTEntry::IDTEntry(bool)>
c000ebee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ebf2:	53                   	push   ebx
c000ebf3:	e8 aa ff ff ff       	call   c000eba2 <IDTEntry::setOffset(unsigned int)>
c000ebf8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ebfc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ec00:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ec04:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ec08:	e8 b3 ff ff ff       	call   c000ebc0 <IDT::addEntry(IDTEntry, int)>
c000ec0d:	83 c4 30             	add    esp,0x30
c000ec10:	5b                   	pop    ebx
c000ec11:	c3                   	ret    

c000ec12 <IDT::flush()>:
c000ec12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec16:	66 c7 05 18 a4 02 c0 ff 07 	mov    WORD PTR ds:0xc002a418,0x7ff
c000ec1f:	a3 1a a4 02 c0       	mov    ds:0xc002a41a,eax
c000ec24:	0f 01 1d 18 a4 02 c0 	lidtd  ds:0xc002a418
c000ec2b:	c3                   	ret    

c000ec2c <IDT::setup()>:
c000ec2c:	57                   	push   edi
c000ec2d:	56                   	push   esi
c000ec2e:	53                   	push   ebx
c000ec2f:	83 ec 10             	sub    esp,0x10
c000ec32:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ec36:	6a 00                	push   0x0
c000ec38:	68 37 04 00 c0       	push   0xc0000437
c000ec3d:	6a 00                	push   0x0
c000ec3f:	53                   	push   ebx
c000ec40:	e8 95 ff ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ec45:	6a 00                	push   0x0
c000ec47:	68 47 04 00 c0       	push   0xc0000447
c000ec4c:	6a 01                	push   0x1
c000ec4e:	53                   	push   ebx
c000ec4f:	e8 86 ff ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ec54:	83 c4 20             	add    esp,0x20
c000ec57:	6a 00                	push   0x0
c000ec59:	68 51 04 00 c0       	push   0xc0000451
c000ec5e:	6a 02                	push   0x2
c000ec60:	53                   	push   ebx
c000ec61:	e8 74 ff ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ec66:	6a 00                	push   0x0
c000ec68:	68 5b 04 00 c0       	push   0xc000045b
c000ec6d:	6a 03                	push   0x3
c000ec6f:	53                   	push   ebx
c000ec70:	e8 65 ff ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ec75:	83 c4 20             	add    esp,0x20
c000ec78:	6a 00                	push   0x0
c000ec7a:	68 65 04 00 c0       	push   0xc0000465
c000ec7f:	6a 04                	push   0x4
c000ec81:	53                   	push   ebx
c000ec82:	e8 53 ff ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ec87:	6a 00                	push   0x0
c000ec89:	68 6f 04 00 c0       	push   0xc000046f
c000ec8e:	6a 05                	push   0x5
c000ec90:	53                   	push   ebx
c000ec91:	e8 44 ff ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ec96:	83 c4 20             	add    esp,0x20
c000ec99:	6a 00                	push   0x0
c000ec9b:	68 79 04 00 c0       	push   0xc0000479
c000eca0:	6a 06                	push   0x6
c000eca2:	53                   	push   ebx
c000eca3:	e8 32 ff ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000eca8:	6a 00                	push   0x0
c000ecaa:	68 83 04 00 c0       	push   0xc0000483
c000ecaf:	6a 07                	push   0x7
c000ecb1:	53                   	push   ebx
c000ecb2:	e8 23 ff ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ecb7:	83 c4 20             	add    esp,0x20
c000ecba:	6a 00                	push   0x0
c000ecbc:	68 8d 04 00 c0       	push   0xc000048d
c000ecc1:	6a 08                	push   0x8
c000ecc3:	53                   	push   ebx
c000ecc4:	e8 11 ff ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ecc9:	6a 00                	push   0x0
c000eccb:	68 95 04 00 c0       	push   0xc0000495
c000ecd0:	6a 09                	push   0x9
c000ecd2:	53                   	push   ebx
c000ecd3:	e8 02 ff ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ecd8:	83 c4 20             	add    esp,0x20
c000ecdb:	6a 00                	push   0x0
c000ecdd:	68 9f 04 00 c0       	push   0xc000049f
c000ece2:	6a 0a                	push   0xa
c000ece4:	53                   	push   ebx
c000ece5:	e8 f0 fe ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ecea:	6a 00                	push   0x0
c000ecec:	68 a7 04 00 c0       	push   0xc00004a7
c000ecf1:	6a 0b                	push   0xb
c000ecf3:	53                   	push   ebx
c000ecf4:	e8 e1 fe ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ecf9:	83 c4 20             	add    esp,0x20
c000ecfc:	6a 00                	push   0x0
c000ecfe:	68 af 04 00 c0       	push   0xc00004af
c000ed03:	6a 0c                	push   0xc
c000ed05:	53                   	push   ebx
c000ed06:	e8 cf fe ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ed0b:	6a 00                	push   0x0
c000ed0d:	68 b7 04 00 c0       	push   0xc00004b7
c000ed12:	6a 0d                	push   0xd
c000ed14:	53                   	push   ebx
c000ed15:	e8 c0 fe ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ed1a:	83 c4 20             	add    esp,0x20
c000ed1d:	6a 00                	push   0x0
c000ed1f:	68 bf 04 00 c0       	push   0xc00004bf
c000ed24:	6a 0e                	push   0xe
c000ed26:	53                   	push   ebx
c000ed27:	e8 ae fe ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ed2c:	6a 00                	push   0x0
c000ed2e:	68 c7 04 00 c0       	push   0xc00004c7
c000ed33:	6a 0f                	push   0xf
c000ed35:	53                   	push   ebx
c000ed36:	e8 9f fe ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ed3b:	83 c4 20             	add    esp,0x20
c000ed3e:	6a 00                	push   0x0
c000ed40:	68 d1 04 00 c0       	push   0xc00004d1
c000ed45:	6a 10                	push   0x10
c000ed47:	53                   	push   ebx
c000ed48:	e8 8d fe ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ed4d:	6a 00                	push   0x0
c000ed4f:	68 db 04 00 c0       	push   0xc00004db
c000ed54:	6a 11                	push   0x11
c000ed56:	53                   	push   ebx
c000ed57:	e8 7e fe ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ed5c:	83 c4 20             	add    esp,0x20
c000ed5f:	6a 00                	push   0x0
c000ed61:	68 e5 04 00 c0       	push   0xc00004e5
c000ed66:	6a 12                	push   0x12
c000ed68:	53                   	push   ebx
c000ed69:	e8 6c fe ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ed6e:	6a 01                	push   0x1
c000ed70:	68 ef 04 00 c0       	push   0xc00004ef
c000ed75:	6a 60                	push   0x60
c000ed77:	53                   	push   ebx
c000ed78:	e8 5d fe ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ed7d:	83 c4 20             	add    esp,0x20
c000ed80:	6a 00                	push   0x0
c000ed82:	68 f9 04 00 c0       	push   0xc00004f9
c000ed87:	6a 20                	push   0x20
c000ed89:	53                   	push   ebx
c000ed8a:	e8 4b fe ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ed8f:	6a 00                	push   0x0
c000ed91:	68 03 05 00 c0       	push   0xc0000503
c000ed96:	6a 21                	push   0x21
c000ed98:	53                   	push   ebx
c000ed99:	e8 3c fe ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ed9e:	83 c4 20             	add    esp,0x20
c000eda1:	6a 00                	push   0x0
c000eda3:	68 0d 05 00 c0       	push   0xc000050d
c000eda8:	6a 22                	push   0x22
c000edaa:	53                   	push   ebx
c000edab:	e8 2a fe ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000edb0:	6a 00                	push   0x0
c000edb2:	68 17 05 00 c0       	push   0xc0000517
c000edb7:	6a 23                	push   0x23
c000edb9:	53                   	push   ebx
c000edba:	e8 1b fe ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000edbf:	83 c4 20             	add    esp,0x20
c000edc2:	6a 00                	push   0x0
c000edc4:	68 21 05 00 c0       	push   0xc0000521
c000edc9:	6a 24                	push   0x24
c000edcb:	53                   	push   ebx
c000edcc:	e8 09 fe ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000edd1:	6a 00                	push   0x0
c000edd3:	68 2b 05 00 c0       	push   0xc000052b
c000edd8:	6a 25                	push   0x25
c000edda:	53                   	push   ebx
c000eddb:	e8 fa fd ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ede0:	83 c4 20             	add    esp,0x20
c000ede3:	6a 00                	push   0x0
c000ede5:	68 35 05 00 c0       	push   0xc0000535
c000edea:	6a 26                	push   0x26
c000edec:	53                   	push   ebx
c000eded:	e8 e8 fd ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000edf2:	6a 00                	push   0x0
c000edf4:	68 3f 05 00 c0       	push   0xc000053f
c000edf9:	6a 27                	push   0x27
c000edfb:	53                   	push   ebx
c000edfc:	e8 d9 fd ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ee01:	83 c4 20             	add    esp,0x20
c000ee04:	6a 00                	push   0x0
c000ee06:	68 49 05 00 c0       	push   0xc0000549
c000ee0b:	6a 28                	push   0x28
c000ee0d:	53                   	push   ebx
c000ee0e:	e8 c7 fd ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ee13:	6a 00                	push   0x0
c000ee15:	68 53 05 00 c0       	push   0xc0000553
c000ee1a:	6a 29                	push   0x29
c000ee1c:	53                   	push   ebx
c000ee1d:	e8 b8 fd ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ee22:	83 c4 20             	add    esp,0x20
c000ee25:	6a 00                	push   0x0
c000ee27:	68 5d 05 00 c0       	push   0xc000055d
c000ee2c:	6a 2a                	push   0x2a
c000ee2e:	53                   	push   ebx
c000ee2f:	e8 a6 fd ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ee34:	6a 00                	push   0x0
c000ee36:	68 67 05 00 c0       	push   0xc0000567
c000ee3b:	6a 2b                	push   0x2b
c000ee3d:	53                   	push   ebx
c000ee3e:	e8 97 fd ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ee43:	83 c4 20             	add    esp,0x20
c000ee46:	6a 00                	push   0x0
c000ee48:	68 71 05 00 c0       	push   0xc0000571
c000ee4d:	6a 2c                	push   0x2c
c000ee4f:	53                   	push   ebx
c000ee50:	e8 85 fd ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ee55:	6a 00                	push   0x0
c000ee57:	68 7b 05 00 c0       	push   0xc000057b
c000ee5c:	6a 2d                	push   0x2d
c000ee5e:	53                   	push   ebx
c000ee5f:	e8 76 fd ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ee64:	83 c4 20             	add    esp,0x20
c000ee67:	6a 00                	push   0x0
c000ee69:	68 85 05 00 c0       	push   0xc0000585
c000ee6e:	6a 2e                	push   0x2e
c000ee70:	53                   	push   ebx
c000ee71:	e8 64 fd ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ee76:	6a 00                	push   0x0
c000ee78:	68 8f 05 00 c0       	push   0xc000058f
c000ee7d:	6a 2f                	push   0x2f
c000ee7f:	53                   	push   ebx
c000ee80:	e8 55 fd ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ee85:	83 c4 20             	add    esp,0x20
c000ee88:	6a 00                	push   0x0
c000ee8a:	68 99 05 00 c0       	push   0xc0000599
c000ee8f:	6a 30                	push   0x30
c000ee91:	53                   	push   ebx
c000ee92:	e8 43 fd ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ee97:	6a 00                	push   0x0
c000ee99:	68 a3 05 00 c0       	push   0xc00005a3
c000ee9e:	6a 31                	push   0x31
c000eea0:	53                   	push   ebx
c000eea1:	e8 34 fd ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000eea6:	83 c4 20             	add    esp,0x20
c000eea9:	6a 00                	push   0x0
c000eeab:	68 ad 05 00 c0       	push   0xc00005ad
c000eeb0:	6a 32                	push   0x32
c000eeb2:	53                   	push   ebx
c000eeb3:	e8 22 fd ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000eeb8:	6a 00                	push   0x0
c000eeba:	68 b7 05 00 c0       	push   0xc00005b7
c000eebf:	6a 33                	push   0x33
c000eec1:	53                   	push   ebx
c000eec2:	e8 13 fd ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000eec7:	83 c4 20             	add    esp,0x20
c000eeca:	6a 00                	push   0x0
c000eecc:	68 c1 05 00 c0       	push   0xc00005c1
c000eed1:	6a 34                	push   0x34
c000eed3:	53                   	push   ebx
c000eed4:	e8 01 fd ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000eed9:	6a 00                	push   0x0
c000eedb:	68 cb 05 00 c0       	push   0xc00005cb
c000eee0:	6a 35                	push   0x35
c000eee2:	53                   	push   ebx
c000eee3:	e8 f2 fc ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000eee8:	83 c4 20             	add    esp,0x20
c000eeeb:	6a 00                	push   0x0
c000eeed:	68 d5 05 00 c0       	push   0xc00005d5
c000eef2:	6a 36                	push   0x36
c000eef4:	53                   	push   ebx
c000eef5:	e8 e0 fc ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000eefa:	6a 00                	push   0x0
c000eefc:	68 df 05 00 c0       	push   0xc00005df
c000ef01:	6a 37                	push   0x37
c000ef03:	53                   	push   ebx
c000ef04:	e8 d1 fc ff ff       	call   c000ebda <IDT::addEntry(int, void (*)(), bool)>
c000ef09:	83 c4 20             	add    esp,0x20
c000ef0c:	e8 fc 24 00 00       	call   c001140d <Virt::getAKernelVAS()>
c000ef11:	52                   	push   edx
c000ef12:	6a 03                	push   0x3
c000ef14:	6a 02                	push   0x2
c000ef16:	50                   	push   eax
c000ef17:	e8 34 2b 00 00       	call   c0011a50 <VAS::allocatePages(int, int)>
c000ef1c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ef23:	89 c6                	mov    esi,eax
c000ef25:	e8 36 32 00 00       	call   c0012160 <operator new(unsigned long)>
c000ef2a:	81 c6 00 20 00 00    	add    esi,0x2000
c000ef30:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef33:	89 c7                	mov    edi,eax
c000ef35:	e8 c0 1c 00 00       	call   c0010bfa <TSS::TSS()>
c000ef3a:	83 c4 0c             	add    esp,0xc
c000ef3d:	68 8d 04 00 c0       	push   0xc000048d
c000ef42:	56                   	push   esi
c000ef43:	57                   	push   edi
c000ef44:	e8 f1 1c 00 00       	call   c0010c3a <TSS::setup(unsigned long, unsigned long)>
c000ef49:	59                   	pop    ecx
c000ef4a:	89 c6                	mov    esi,eax
c000ef4c:	5f                   	pop    edi
c000ef4d:	6a 00                	push   0x0
c000ef4f:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ef53:	50                   	push   eax
c000ef54:	e8 db fb ff ff       	call   c000eb34 <IDTEntry::IDTEntry(bool)>
c000ef59:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef5d:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ef62:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ef69:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ef6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef73:	80 ce 05             	or     dh,0x5
c000ef76:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ef79:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ef7d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef81:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ef84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef87:	e8 86 fc ff ff       	call   c000ec12 <IDT::flush()>
c000ef8c:	83 c4 20             	add    esp,0x20
c000ef8f:	5b                   	pop    ebx
c000ef90:	5e                   	pop    esi
c000ef91:	5f                   	pop    edi
c000ef92:	c3                   	ret    

c000ef93 <sbrk>:
c000ef93:	55                   	push   ebp
c000ef94:	57                   	push   edi
c000ef95:	56                   	push   esi
c000ef96:	53                   	push   ebx
c000ef97:	83 ec 1c             	sub    esp,0x1c
c000ef9a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ef9e:	85 db                	test   ebx,ebx
c000efa0:	74 37                	je     c000efd9 <sbrk+0x46>
c000efa2:	78 3f                	js     c000efe3 <sbrk+0x50>
c000efa4:	e8 c1 88 00 00       	call   c001786a <CPU::current()>
c000efa9:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000efaf:	83 e0 01             	and    eax,0x1
c000efb2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000efb6:	a1 a0 93 02 c0       	mov    eax,ds:0xc00293a0
c000efbb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000efbf:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000efc5:	89 d8                	mov    eax,ebx
c000efc7:	78 35                	js     c000effe <sbrk+0x6b>
c000efc9:	c1 f8 0c             	sar    eax,0xc
c000efcc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000efd0:	89 c7                	mov    edi,eax
c000efd2:	be 00 00 00 00       	mov    esi,0x0
c000efd7:	eb 3c                	jmp    c000f015 <sbrk+0x82>
c000efd9:	a1 a0 93 02 c0       	mov    eax,ds:0xc00293a0
c000efde:	e9 ad 00 00 00       	jmp    c000f090 <sbrk+0xfd>
c000efe3:	83 ec 08             	sub    esp,0x8
c000efe6:	53                   	push   ebx
c000efe7:	68 30 6b 02 c0       	push   0xc0026b30
c000efec:	e8 5e 32 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000eff1:	83 c4 10             	add    esp,0x10
c000eff4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eff9:	e9 92 00 00 00       	jmp    c000f090 <sbrk+0xfd>
c000effe:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000f004:	eb c3                	jmp    c000efc9 <sbrk+0x36>
c000f006:	81 05 a0 93 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00293a0,0x1000
c000f010:	46                   	inc    esi
c000f011:	39 f7                	cmp    edi,esi
c000f013:	74 34                	je     c000f049 <sbrk+0xb6>
c000f015:	e8 f3 23 00 00       	call   c001140d <Virt::getAKernelVAS()>
c000f01a:	89 c3                	mov    ebx,eax
c000f01c:	8b 2d a0 93 02 c0    	mov    ebp,DWORD PTR ds:0xc00293a0
c000f022:	e8 c9 06 00 00       	call   c000f6f0 <Phys::allocatePage()>
c000f027:	68 01 04 00 00       	push   0x401
c000f02c:	55                   	push   ebp
c000f02d:	50                   	push   eax
c000f02e:	53                   	push   ebx
c000f02f:	e8 1c 29 00 00       	call   c0011950 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f034:	83 c4 10             	add    esp,0x10
c000f037:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f03c:	74 c8                	je     c000f006 <sbrk+0x73>
c000f03e:	8b 1d a0 93 02 c0    	mov    ebx,DWORD PTR ds:0xc00293a0
c000f044:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f047:	eb bd                	jmp    c000f006 <sbrk+0x73>
c000f049:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f04e:	74 48                	je     c000f098 <sbrk+0x105>
c000f050:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f054:	89 d3                	mov    ebx,edx
c000f056:	c1 eb 0a             	shr    ebx,0xa
c000f059:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f05f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f065:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f069:	c1 e0 0c             	shl    eax,0xc
c000f06c:	01 d0                	add    eax,edx
c000f06e:	c1 e8 0a             	shr    eax,0xa
c000f071:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f076:	2d 00 00 40 00       	sub    eax,0x400000
c000f07b:	39 c3                	cmp    ebx,eax
c000f07d:	77 0d                	ja     c000f08c <sbrk+0xf9>
c000f07f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f082:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f088:	39 d8                	cmp    eax,ebx
c000f08a:	73 f3                	jae    c000f07f <sbrk+0xec>
c000f08c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f090:	83 c4 1c             	add    esp,0x1c
c000f093:	5b                   	pop    ebx
c000f094:	5e                   	pop    esi
c000f095:	5f                   	pop    edi
c000f096:	5d                   	pop    ebp
c000f097:	c3                   	ret    
c000f098:	e8 d8 5f 01 00       	call   c0025075 <CPU::readCR3()>
c000f09d:	83 ec 0c             	sub    esp,0xc
c000f0a0:	50                   	push   eax
c000f0a1:	e8 e1 5f 01 00       	call   c0025087 <CPU::writeCR3(unsigned long)>
c000f0a6:	83 c4 10             	add    esp,0x10
c000f0a9:	eb e1                	jmp    c000f08c <sbrk+0xf9>

c000f0ab <mmap>:
c000f0ab:	83 ec 18             	sub    esp,0x18
c000f0ae:	68 60 6b 02 c0       	push   0xc0026b60
c000f0b3:	e8 35 99 00 00       	call   c00189ed <Krnl::panic(char const*)>
c000f0b8:	b8 00 00 00 00       	mov    eax,0x0
c000f0bd:	83 c4 1c             	add    esp,0x1c
c000f0c0:	c3                   	ret    

c000f0c1 <munmap>:
c000f0c1:	83 ec 18             	sub    esp,0x18
c000f0c4:	68 65 6b 02 c0       	push   0xc0026b65
c000f0c9:	e8 1f 99 00 00       	call   c00189ed <Krnl::panic(char const*)>
c000f0ce:	b8 00 00 00 00       	mov    eax,0x0
c000f0d3:	83 c4 1c             	add    esp,0x1c
c000f0d6:	c3                   	ret    

c000f0d7 <liballoc_lock()>:
c000f0d7:	83 ec 0c             	sub    esp,0xc
c000f0da:	e8 61 c8 00 00       	call   c001b940 <lockScheduler()>
c000f0df:	b8 00 00 00 00       	mov    eax,0x0
c000f0e4:	83 c4 0c             	add    esp,0xc
c000f0e7:	c3                   	ret    

c000f0e8 <liballoc_unlock()>:
c000f0e8:	83 ec 0c             	sub    esp,0xc
c000f0eb:	e8 52 c8 00 00       	call   c001b942 <unlockScheduler()>
c000f0f0:	b8 00 00 00 00       	mov    eax,0x0
c000f0f5:	83 c4 0c             	add    esp,0xc
c000f0f8:	c3                   	ret    

c000f0f9 <liballoc_alloc(int)>:
c000f0f9:	83 ec 0c             	sub    esp,0xc
c000f0fc:	e8 0c 23 00 00       	call   c001140d <Virt::getAKernelVAS()>
c000f101:	83 ec 04             	sub    esp,0x4
c000f104:	6a 01                	push   0x1
c000f106:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f10a:	50                   	push   eax
c000f10b:	e8 40 29 00 00       	call   c0011a50 <VAS::allocatePages(int, int)>
c000f110:	83 c4 1c             	add    esp,0x1c
c000f113:	c3                   	ret    

c000f114 <liballoc_free(void*, int)>:
c000f114:	83 ec 0c             	sub    esp,0xc
c000f117:	e8 f1 22 00 00       	call   c001140d <Virt::getAKernelVAS()>
c000f11c:	83 ec 08             	sub    esp,0x8
c000f11f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f123:	50                   	push   eax
c000f124:	e8 d1 25 00 00       	call   c00116fa <VAS::freeAllocatedPages(unsigned long)>
c000f129:	b8 00 00 00 00       	mov    eax,0x0
c000f12e:	83 c4 1c             	add    esp,0x1c
c000f131:	c3                   	ret    

c000f132 <realloc>:
c000f132:	83 ec 14             	sub    esp,0x14
c000f135:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f13d:	e8 03 23 ff ff       	call   c0001445 <dlrealloc>
c000f142:	83 c4 1c             	add    esp,0x1c
c000f145:	c3                   	ret    

c000f146 <malloc>:
c000f146:	83 ec 18             	sub    esp,0x18
c000f149:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f14d:	e8 b6 1d ff ff       	call   c0000f08 <dlmalloc>
c000f152:	83 c4 1c             	add    esp,0x1c
c000f155:	c3                   	ret    

c000f156 <free>:
c000f156:	83 ec 18             	sub    esp,0x18
c000f159:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f15d:	e8 4b 1a ff ff       	call   c0000bad <dlfree>
c000f162:	83 c4 1c             	add    esp,0x1c
c000f165:	c3                   	ret    

c000f166 <rfree>:
c000f166:	83 ec 18             	sub    esp,0x18
c000f169:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f16d:	e8 e4 ff ff ff       	call   c000f156 <free>
c000f172:	83 c4 1c             	add    esp,0x1c
c000f175:	c3                   	ret    

c000f176 <calloc>:
c000f176:	56                   	push   esi
c000f177:	53                   	push   ebx
c000f178:	83 ec 10             	sub    esp,0x10
c000f17b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f17f:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f184:	53                   	push   ebx
c000f185:	e8 bc ff ff ff       	call   c000f146 <malloc>
c000f18a:	89 c6                	mov    esi,eax
c000f18c:	83 c4 0c             	add    esp,0xc
c000f18f:	53                   	push   ebx
c000f190:	6a 00                	push   0x0
c000f192:	50                   	push   eax
c000f193:	e8 34 15 ff ff       	call   c00006cc <memset>
c000f198:	89 f0                	mov    eax,esi
c000f19a:	83 c4 14             	add    esp,0x14
c000f19d:	5b                   	pop    ebx
c000f19e:	5e                   	pop    esi
c000f19f:	c3                   	ret    

c000f1a0 <hwTextMode_loadInData(VgaText*)>:
c000f1a0:	57                   	push   edi
c000f1a1:	56                   	push   esi
c000f1a2:	53                   	push   ebx
c000f1a3:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f1a7:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000f1ad:	85 c0                	test   eax,eax
c000f1af:	7e 30                	jle    c000f1e1 <hwTextMode_loadInData(VgaText*)+0x41>
c000f1b1:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000f1b4:	31 f6                	xor    esi,esi
c000f1b6:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000f1b9:	31 c0                	xor    eax,eax
c000f1bb:	c1 e1 05             	shl    ecx,0x5
c000f1be:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000f1c4:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000f1c8:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000f1cc:	40                   	inc    eax
c000f1cd:	83 f8 50             	cmp    eax,0x50
c000f1d0:	75 f2                	jne    c000f1c4 <hwTextMode_loadInData(VgaText*)+0x24>
c000f1d2:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000f1d8:	46                   	inc    esi
c000f1d9:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f1df:	7f d5                	jg     c000f1b6 <hwTextMode_loadInData(VgaText*)+0x16>
c000f1e1:	5b                   	pop    ebx
c000f1e2:	5e                   	pop    esi
c000f1e3:	5f                   	pop    edi
c000f1e4:	c3                   	ret    

c000f1e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f1e5:	56                   	push   esi
c000f1e6:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000f1eb:	53                   	push   ebx
c000f1ec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f1f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f1f4:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f1fa:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000f200:	c1 e0 04             	shl    eax,0x4
c000f203:	83 e6 0f             	and    esi,0xf
c000f206:	0f b6 c0             	movzx  eax,al
c000f209:	41                   	inc    ecx
c000f20a:	09 f0                	or     eax,esi
c000f20c:	83 c2 02             	add    edx,0x2
c000f20f:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000f213:	c1 e0 08             	shl    eax,0x8
c000f216:	09 f0                	or     eax,esi
c000f218:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f21c:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000f222:	75 d0                	jne    c000f1f4 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000f224:	5b                   	pop    ebx
c000f225:	5e                   	pop    esi
c000f226:	c3                   	ret    

c000f227 <hwTextMode_showCursor(VgaText*, bool)>:
c000f227:	56                   	push   esi
c000f228:	53                   	push   ebx
c000f229:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f22e:	74 38                	je     c000f268 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f230:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f235:	b0 0a                	mov    al,0xa
c000f237:	89 da                	mov    edx,ebx
c000f239:	ee                   	out    dx,al
c000f23a:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f23f:	89 ca                	mov    edx,ecx
c000f241:	ec                   	in     al,dx
c000f242:	b2 0f                	mov    dl,0xf
c000f244:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f248:	83 e0 c0             	and    eax,0xffffffc0
c000f24b:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f251:	09 d0                	or     eax,edx
c000f253:	89 ca                	mov    edx,ecx
c000f255:	ee                   	out    dx,al
c000f256:	b0 0b                	mov    al,0xb
c000f258:	89 da                	mov    edx,ebx
c000f25a:	ee                   	out    dx,al
c000f25b:	89 ca                	mov    edx,ecx
c000f25d:	ec                   	in     al,dx
c000f25e:	83 e0 e0             	and    eax,0xffffffe0
c000f261:	83 c8 0f             	or     eax,0xf
c000f264:	ee                   	out    dx,al
c000f265:	5b                   	pop    ebx
c000f266:	5e                   	pop    esi
c000f267:	c3                   	ret    
c000f268:	b0 0a                	mov    al,0xa
c000f26a:	ba d4 03 00 00       	mov    edx,0x3d4
c000f26f:	ee                   	out    dx,al
c000f270:	b0 20                	mov    al,0x20
c000f272:	ba d5 03 00 00       	mov    edx,0x3d5
c000f277:	ee                   	out    dx,al
c000f278:	5b                   	pop    ebx
c000f279:	5e                   	pop    esi
c000f27a:	c3                   	ret    

c000f27b <hwTextMode_update(VgaText*)>:
c000f27b:	c3                   	ret    

c000f27c <hwTextMode_updateCursor(VgaText*)>:
c000f27c:	56                   	push   esi
c000f27d:	b9 19 00 00 00       	mov    ecx,0x19
c000f282:	53                   	push   ebx
c000f283:	be d4 03 00 00       	mov    esi,0x3d4
c000f288:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f28c:	89 f2                	mov    edx,esi
c000f28e:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f294:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f29a:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f29d:	c1 e1 04             	shl    ecx,0x4
c000f2a0:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f2a6:	b0 0f                	mov    al,0xf
c000f2a8:	ee                   	out    dx,al
c000f2a9:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f2ae:	88 c8                	mov    al,cl
c000f2b0:	89 da                	mov    edx,ebx
c000f2b2:	ee                   	out    dx,al
c000f2b3:	b0 0e                	mov    al,0xe
c000f2b5:	89 f2                	mov    edx,esi
c000f2b7:	ee                   	out    dx,al
c000f2b8:	89 c8                	mov    eax,ecx
c000f2ba:	89 da                	mov    edx,ebx
c000f2bc:	66 c1 e8 08          	shr    ax,0x8
c000f2c0:	ee                   	out    dx,al
c000f2c1:	5b                   	pop    ebx
c000f2c2:	5e                   	pop    esi
c000f2c3:	c3                   	ret    

c000f2c4 <hwTextMode_disableBlink(VgaText*, bool)>:
c000f2c4:	ba da 03 00 00       	mov    edx,0x3da
c000f2c9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f2ce:	75 18                	jne    c000f2e8 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f2d0:	ec                   	in     al,dx
c000f2d1:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f2d6:	b0 30                	mov    al,0x30
c000f2d8:	89 ca                	mov    edx,ecx
c000f2da:	ee                   	out    dx,al
c000f2db:	ba c1 03 00 00       	mov    edx,0x3c1
c000f2e0:	ec                   	in     al,dx
c000f2e1:	83 c8 08             	or     eax,0x8
c000f2e4:	89 ca                	mov    edx,ecx
c000f2e6:	ee                   	out    dx,al
c000f2e7:	c3                   	ret    
c000f2e8:	ec                   	in     al,dx
c000f2e9:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f2ee:	b0 30                	mov    al,0x30
c000f2f0:	89 ca                	mov    edx,ecx
c000f2f2:	ee                   	out    dx,al
c000f2f3:	ba c1 03 00 00       	mov    edx,0x3c1
c000f2f8:	ec                   	in     al,dx
c000f2f9:	83 e0 f7             	and    eax,0xfffffff7
c000f2fc:	89 ca                	mov    edx,ecx
c000f2fe:	ee                   	out    dx,al
c000f2ff:	c3                   	ret    

c000f300 <hwTextMode_scrollScreen(VgaText*)>:
c000f300:	55                   	push   ebp
c000f301:	bd 02 00 00 00       	mov    ebp,0x2
c000f306:	57                   	push   edi
c000f307:	56                   	push   esi
c000f308:	53                   	push   ebx
c000f309:	83 ec 1c             	sub    esp,0x1c
c000f30c:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000f314:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f318:	31 c0                	xor    eax,eax
c000f31a:	eb 0b                	jmp    c000f327 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000f31c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f322:	74 57                	je     c000f37b <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000f324:	43                   	inc    ebx
c000f325:	89 f0                	mov    eax,esi
c000f327:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f32d:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f333:	88 13                	mov    BYTE PTR [ebx],dl
c000f335:	8d 70 01             	lea    esi,[eax+0x1]
c000f338:	83 fd 18             	cmp    ebp,0x18
c000f33b:	75 df                	jne    c000f31c <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000f33d:	a8 01                	test   al,0x1
c000f33f:	75 13                	jne    c000f354 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000f341:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f344:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f34a:	75 d8                	jne    c000f324 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000f34c:	83 c4 1c             	add    esp,0x1c
c000f34f:	5b                   	pop    ebx
c000f350:	5e                   	pop    esi
c000f351:	5f                   	pop    edi
c000f352:	5d                   	pop    ebp
c000f353:	c3                   	ret    
c000f354:	83 ec 08             	sub    esp,0x8
c000f357:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f35b:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f362:	50                   	push   eax
c000f363:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f367:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f36e:	50                   	push   eax
c000f36f:	e8 66 0b 00 00       	call   c000feda <VgaText::combineColours(unsigned char, unsigned char)>
c000f374:	83 c4 10             	add    esp,0x10
c000f377:	88 07                	mov    BYTE PTR [edi],al
c000f379:	eb c9                	jmp    c000f344 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000f37b:	45                   	inc    ebp
c000f37c:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f384:	eb 8e                	jmp    c000f314 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000f386 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f386:	56                   	push   esi
c000f387:	53                   	push   ebx
c000f388:	83 ec 0c             	sub    esp,0xc
c000f38b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f38f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f393:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f398:	50                   	push   eax
c000f399:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f39e:	50                   	push   eax
c000f39f:	e8 36 0b 00 00       	call   c000feda <VgaText::combineColours(unsigned char, unsigned char)>
c000f3a4:	5a                   	pop    edx
c000f3a5:	0f b6 c0             	movzx  eax,al
c000f3a8:	59                   	pop    ecx
c000f3a9:	50                   	push   eax
c000f3aa:	89 f0                	mov    eax,esi
c000f3ac:	0f be f0             	movsx  esi,al
c000f3af:	56                   	push   esi
c000f3b0:	e8 cb 0b 00 00       	call   c000ff80 <VgaText::combineCharAndColour(char, unsigned char)>
c000f3b5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f3b9:	ba 19 00 00 00       	mov    edx,0x19
c000f3be:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f3c4:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f3c7:	8d 14 92             	lea    edx,[edx+edx*4]
c000f3ca:	c1 e1 04             	shl    ecx,0x4
c000f3cd:	c1 e2 04             	shl    edx,0x4
c000f3d0:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f3d4:	01 ca                	add    edx,ecx
c000f3d6:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f3de:	83 c4 14             	add    esp,0x14
c000f3e1:	5b                   	pop    ebx
c000f3e2:	5e                   	pop    esi
c000f3e3:	c3                   	ret    

c000f3e4 <setupTextMode()>:
c000f3e4:	c7 05 b8 a4 02 c0 c4 f2 00 c0 	mov    DWORD PTR ds:0xc002a4b8,0xc000f2c4
c000f3ee:	c7 05 a4 a4 02 c0 a0 f1 00 c0 	mov    DWORD PTR ds:0xc002a4a4,0xc000f1a0
c000f3f8:	c7 05 a0 a4 02 c0 e5 f1 00 c0 	mov    DWORD PTR ds:0xc002a4a0,0xc000f1e5
c000f402:	c7 05 ac a4 02 c0 00 f3 00 c0 	mov    DWORD PTR ds:0xc002a4ac,0xc000f300
c000f40c:	c7 05 b4 a4 02 c0 27 f2 00 c0 	mov    DWORD PTR ds:0xc002a4b4,0xc000f227
c000f416:	c7 05 a8 a4 02 c0 7b f2 00 c0 	mov    DWORD PTR ds:0xc002a4a8,0xc000f27b
c000f420:	c7 05 b0 a4 02 c0 7c f2 00 c0 	mov    DWORD PTR ds:0xc002a4b0,0xc000f27c
c000f42a:	c7 05 bc a4 02 c0 86 f3 00 c0 	mov    DWORD PTR ds:0xc002a4bc,0xc000f386
c000f434:	c3                   	ret    

c000f435 <kernel_main>:
c000f435:	57                   	push   edi
c000f436:	bf f9 03 00 00       	mov    edi,0x3f9
c000f43b:	56                   	push   esi
c000f43c:	31 f6                	xor    esi,esi
c000f43e:	53                   	push   ebx
c000f43f:	83 ec 10             	sub    esp,0x10
c000f442:	e8 ed 08 00 00       	call   c000fd34 <installVgaTextImplementation()>
c000f447:	e8 98 ff ff ff       	call   c000f3e4 <setupTextMode()>
c000f44c:	89 f0                	mov    eax,esi
c000f44e:	89 fa                	mov    edx,edi
c000f450:	ee                   	out    dx,al
c000f451:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f456:	b0 80                	mov    al,0x80
c000f458:	89 da                	mov    edx,ebx
c000f45a:	ee                   	out    dx,al
c000f45b:	b1 03                	mov    cl,0x3
c000f45d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f462:	88 c8                	mov    al,cl
c000f464:	ee                   	out    dx,al
c000f465:	89 f0                	mov    eax,esi
c000f467:	89 fa                	mov    edx,edi
c000f469:	ee                   	out    dx,al
c000f46a:	88 c8                	mov    al,cl
c000f46c:	89 da                	mov    edx,ebx
c000f46e:	ee                   	out    dx,al
c000f46f:	b0 c7                	mov    al,0xc7
c000f471:	ba fa 03 00 00       	mov    edx,0x3fa
c000f476:	ee                   	out    dx,al
c000f477:	b0 0b                	mov    al,0xb
c000f479:	ba fc 03 00 00       	mov    edx,0x3fc
c000f47e:	ee                   	out    dx,al
c000f47f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f484:	83 ec 0c             	sub    esp,0xc
c000f487:	05 ff 0f 00 00       	add    eax,0xfff
c000f48c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f491:	50                   	push   eax
c000f492:	e8 59 03 00 00       	call   c000f7f0 <Phys::physicalMemorySetup(unsigned int)>
c000f497:	e8 f2 1e 00 00       	call   c001138e <Virt::virtualMemorySetup()>
c000f49c:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f4a2:	83 c4 10             	add    esp,0x10
c000f4a5:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f4ab:	75 0e                	jne    c000f4bb <kernel_main+0x86>
c000f4ad:	89 d8                	mov    eax,ebx
c000f4af:	25 48 03 00 00       	and    eax,0x348
c000f4b4:	3d 00 03 00 00       	cmp    eax,0x300
c000f4b9:	74 10                	je     c000f4cb <kernel_main+0x96>
c000f4bb:	83 ec 0c             	sub    esp,0xc
c000f4be:	68 7f 80 02 c0       	push   0xc002807f
c000f4c3:	e8 25 95 00 00       	call   c00189ed <Krnl::panic(char const*)>
c000f4c8:	83 c4 10             	add    esp,0x10
c000f4cb:	83 ec 0c             	sub    esp,0xc
c000f4ce:	89 1d 20 a4 02 c0    	mov    DWORD PTR ds:0xc002a420,ebx
c000f4d4:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f4d8:	53                   	push   ebx
c000f4d9:	e8 5a 20 00 00       	call   c0011538 <VAS::VAS()>
c000f4de:	89 1d 64 a5 02 c0    	mov    DWORD PTR ds:0xc002a564,ebx
c000f4e4:	e8 37 0b ff ff       	call   c0000020 <callGlobalConstructors>
c000f4e9:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f4f0:	e8 6b 2c 00 00       	call   c0012160 <operator new(unsigned long)>
c000f4f5:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4f8:	89 c6                	mov    esi,eax
c000f4fa:	e8 7f ea ff ff       	call   c000df7e <Computer::Computer()>
c000f4ff:	6a 00                	push   0x0
c000f501:	89 35 08 a4 02 c0    	mov    DWORD PTR ds:0xc002a408,esi
c000f507:	6a 00                	push   0x0
c000f509:	6a 00                	push   0x0
c000f50b:	56                   	push   esi
c000f50c:	e8 77 f2 ff ff       	call   c000e788 <Computer::open(int, int, void*)>
c000f511:	83 c4 14             	add    esp,0x14
c000f514:	53                   	push   ebx
c000f515:	e8 ca 22 00 00       	call   c00117e4 <VAS::~VAS()>
c000f51a:	c7 04 24 6c 6b 02 c0 	mov    DWORD PTR [esp],0xc0026b6c
c000f521:	e8 c7 94 00 00       	call   c00189ed <Krnl::panic(char const*)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	5b                   	pop    ebx
c000f52a:	5e                   	pop    esi
c000f52b:	5f                   	pop    edi
c000f52c:	c3                   	ret    

c000f52d <Phys::allocateDMA(unsigned long)>:
c000f52d:	55                   	push   ebp
c000f52e:	31 d2                	xor    edx,edx
c000f530:	57                   	push   edi
c000f531:	31 ed                	xor    ebp,ebp
c000f533:	56                   	push   esi
c000f534:	31 c9                	xor    ecx,ecx
c000f536:	53                   	push   ebx
c000f537:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f53b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f541:	31 c0                	xor    eax,eax
c000f543:	c1 ee 0c             	shr    esi,0xc
c000f546:	eb 17                	jmp    c000f55f <Phys::allocateDMA(unsigned long)+0x32>
c000f548:	85 c9                	test   ecx,ecx
c000f54a:	75 04                	jne    c000f550 <Phys::allocateDMA(unsigned long)+0x23>
c000f54c:	89 d5                	mov    ebp,edx
c000f54e:	89 d0                	mov    eax,edx
c000f550:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f553:	39 de                	cmp    esi,ebx
c000f555:	74 20                	je     c000f577 <Phys::allocateDMA(unsigned long)+0x4a>
c000f557:	42                   	inc    edx
c000f558:	89 d9                	mov    ecx,ebx
c000f55a:	83 fa 2f             	cmp    edx,0x2f
c000f55d:	7f 11                	jg     c000f570 <Phys::allocateDMA(unsigned long)+0x43>
c000f55f:	80 ba 60 a4 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd5ba0],0x0
c000f566:	74 e0                	je     c000f548 <Phys::allocateDMA(unsigned long)+0x1b>
c000f568:	31 c9                	xor    ecx,ecx
c000f56a:	42                   	inc    edx
c000f56b:	83 fa 2f             	cmp    edx,0x2f
c000f56e:	7e ef                	jle    c000f55f <Phys::allocateDMA(unsigned long)+0x32>
c000f570:	5b                   	pop    ebx
c000f571:	31 c0                	xor    eax,eax
c000f573:	5e                   	pop    esi
c000f574:	5f                   	pop    edi
c000f575:	5d                   	pop    ebp
c000f576:	c3                   	ret    
c000f577:	8d 14 30             	lea    edx,[eax+esi*1]
c000f57a:	89 d7                	mov    edi,edx
c000f57c:	4f                   	dec    edi
c000f57d:	79 03                	jns    c000f582 <Phys::allocateDMA(unsigned long)+0x55>
c000f57f:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f582:	c1 ff 04             	sar    edi,0x4
c000f585:	89 c2                	mov    edx,eax
c000f587:	c1 fa 04             	sar    edx,0x4
c000f58a:	39 fa                	cmp    edx,edi
c000f58c:	75 2f                	jne    c000f5bd <Phys::allocateDMA(unsigned long)+0x90>
c000f58e:	85 db                	test   ebx,ebx
c000f590:	74 1a                	je     c000f5ac <Phys::allocateDMA(unsigned long)+0x7f>
c000f592:	be 60 a4 02 c0       	mov    esi,0xc002a460
c000f597:	8d 90 60 a4 02 c0    	lea    edx,[eax-0x3ffd5ba0]
c000f59d:	f7 d6                	not    esi
c000f59f:	29 c6                	sub    esi,eax
c000f5a1:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f5a4:	42                   	inc    edx
c000f5a5:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f5a8:	39 d9                	cmp    ecx,ebx
c000f5aa:	7f f5                	jg     c000f5a1 <Phys::allocateDMA(unsigned long)+0x74>
c000f5ac:	85 ff                	test   edi,edi
c000f5ae:	74 13                	je     c000f5c3 <Phys::allocateDMA(unsigned long)+0x96>
c000f5b0:	5b                   	pop    ebx
c000f5b1:	05 50 20 0c 00       	add    eax,0xc2050
c000f5b6:	5e                   	pop    esi
c000f5b7:	c1 e0 0c             	shl    eax,0xc
c000f5ba:	5f                   	pop    edi
c000f5bb:	5d                   	pop    ebp
c000f5bc:	c3                   	ret    
c000f5bd:	89 ea                	mov    edx,ebp
c000f5bf:	31 c9                	xor    ecx,ecx
c000f5c1:	eb a7                	jmp    c000f56a <Phys::allocateDMA(unsigned long)+0x3d>
c000f5c3:	5b                   	pop    ebx
c000f5c4:	c1 e0 0c             	shl    eax,0xc
c000f5c7:	5e                   	pop    esi
c000f5c8:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f5cd:	5f                   	pop    edi
c000f5ce:	5d                   	pop    ebp
c000f5cf:	c3                   	ret    

c000f5d0 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f5d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f5d4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f5d8:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f5de:	c1 e9 0c             	shr    ecx,0xc
c000f5e1:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f5e6:	76 25                	jbe    c000f60d <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f5e8:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f5ed:	c1 e8 0c             	shr    eax,0xc
c000f5f0:	8d 50 10             	lea    edx,[eax+0x10]
c000f5f3:	85 c9                	test   ecx,ecx
c000f5f5:	74 15                	je     c000f60c <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f5f7:	8d 82 60 a4 02 c0    	lea    eax,[edx-0x3ffd5ba0]
c000f5fd:	8d 94 11 60 a4 02 c0 	lea    edx,[ecx+edx*1-0x3ffd5ba0]
c000f604:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f607:	40                   	inc    eax
c000f608:	39 d0                	cmp    eax,edx
c000f60a:	75 f8                	jne    c000f604 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f60c:	c3                   	ret    
c000f60d:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f613:	c1 ea 0c             	shr    edx,0xc
c000f616:	eb db                	jmp    c000f5f3 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f618 <Phys::setPageState(unsigned long, bool)>:
c000f618:	56                   	push   esi
c000f619:	ba 01 00 00 00       	mov    edx,0x1
c000f61e:	53                   	push   ebx
c000f61f:	8b 35 a4 93 02 c0    	mov    esi,DWORD PTR ds:0xc00293a4
c000f625:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f629:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f62d:	89 c8                	mov    eax,ecx
c000f62f:	83 e1 07             	and    ecx,0x7
c000f632:	c1 e8 03             	shr    eax,0x3
c000f635:	d3 e3                	shl    ebx,cl
c000f637:	01 c6                	add    esi,eax
c000f639:	d3 e2                	shl    edx,cl
c000f63b:	f7 d2                	not    edx
c000f63d:	20 16                	and    BYTE PTR [esi],dl
c000f63f:	03 05 a4 93 02 c0    	add    eax,DWORD PTR ds:0xc00293a4
c000f645:	08 18                	or     BYTE PTR [eax],bl
c000f647:	5b                   	pop    ebx
c000f648:	5e                   	pop    esi
c000f649:	c3                   	ret    

c000f64a <Phys::getPageState(unsigned long)>:
c000f64a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f64e:	8b 15 a4 93 02 c0    	mov    edx,DWORD PTR ds:0xc00293a4
c000f654:	89 c8                	mov    eax,ecx
c000f656:	83 e1 07             	and    ecx,0x7
c000f659:	c1 e8 03             	shr    eax,0x3
c000f65c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f660:	d3 f8                	sar    eax,cl
c000f662:	83 e0 01             	and    eax,0x1
c000f665:	c3                   	ret    

c000f666 <Phys::freePage(unsigned long)>:
c000f666:	53                   	push   ebx
c000f667:	83 ec 08             	sub    esp,0x8
c000f66a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f66e:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f674:	76 57                	jbe    c000f6cd <Phys::freePage(unsigned long)+0x67>
c000f676:	c1 eb 0c             	shr    ebx,0xc
c000f679:	53                   	push   ebx
c000f67a:	e8 cb ff ff ff       	call   c000f64a <Phys::getPageState(unsigned long)>
c000f67f:	5a                   	pop    edx
c000f680:	84 c0                	test   al,al
c000f682:	74 5b                	je     c000f6df <Phys::freePage(unsigned long)+0x79>
c000f684:	a1 4c a4 02 c0       	mov    eax,ds:0xc002a44c
c000f689:	48                   	dec    eax
c000f68a:	a3 4c a4 02 c0       	mov    ds:0xc002a44c,eax
c000f68f:	8d 04 80             	lea    eax,[eax+eax*4]
c000f692:	8d 04 80             	lea    eax,[eax+eax*4]
c000f695:	c1 e0 02             	shl    eax,0x2
c000f698:	99                   	cdq    
c000f699:	f7 3d 50 a4 02 c0    	idiv   DWORD PTR ds:0xc002a450
c000f69f:	39 05 48 a4 02 c0    	cmp    DWORD PTR ds:0xc002a448,eax
c000f6a5:	75 13                	jne    c000f6ba <Phys::freePage(unsigned long)+0x54>
c000f6a7:	83 ec 08             	sub    esp,0x8
c000f6aa:	6a 00                	push   0x0
c000f6ac:	53                   	push   ebx
c000f6ad:	e8 66 ff ff ff       	call   c000f618 <Phys::setPageState(unsigned long, bool)>
c000f6b2:	83 c4 10             	add    esp,0x10
c000f6b5:	83 c4 08             	add    esp,0x8
c000f6b8:	5b                   	pop    ebx
c000f6b9:	c3                   	ret    
c000f6ba:	83 ec 0c             	sub    esp,0xc
c000f6bd:	a3 48 a4 02 c0       	mov    ds:0xc002a448,eax
c000f6c2:	50                   	push   eax
c000f6c3:	e8 00 0a 00 00       	call   c00100c8 <VgaText::updateRAMUsageDisplay(int)>
c000f6c8:	83 c4 10             	add    esp,0x10
c000f6cb:	eb da                	jmp    c000f6a7 <Phys::freePage(unsigned long)+0x41>
c000f6cd:	68 00 10 00 00       	push   0x1000
c000f6d2:	53                   	push   ebx
c000f6d3:	e8 f8 fe ff ff       	call   c000f5d0 <Phys::freeDMA(unsigned long, unsigned long)>
c000f6d8:	59                   	pop    ecx
c000f6d9:	5b                   	pop    ebx
c000f6da:	83 c4 08             	add    esp,0x8
c000f6dd:	5b                   	pop    ebx
c000f6de:	c3                   	ret    
c000f6df:	c7 44 24 10 87 6b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026b87
c000f6e7:	83 c4 08             	add    esp,0x8
c000f6ea:	5b                   	pop    ebx
c000f6eb:	e9 fd 92 00 00       	jmp    c00189ed <Krnl::panic(char const*)>

c000f6f0 <Phys::allocatePage()>:
c000f6f0:	56                   	push   esi
c000f6f1:	53                   	push   ebx
c000f6f2:	51                   	push   ecx
c000f6f3:	8b 35 40 a4 02 c0    	mov    esi,DWORD PTR ds:0xc002a440
c000f6f9:	89 f3                	mov    ebx,esi
c000f6fb:	eb 0a                	jmp    c000f707 <Phys::allocatePage()+0x17>
c000f6fd:	89 1d 40 a4 02 c0    	mov    DWORD PTR ds:0xc002a440,ebx
c000f703:	39 de                	cmp    esi,ebx
c000f705:	74 24                	je     c000f72b <Phys::allocatePage()+0x3b>
c000f707:	53                   	push   ebx
c000f708:	e8 3d ff ff ff       	call   c000f64a <Phys::getPageState(unsigned long)>
c000f70d:	5a                   	pop    edx
c000f70e:	84 c0                	test   al,al
c000f710:	74 5a                	je     c000f76c <Phys::allocatePage()+0x7c>
c000f712:	43                   	inc    ebx
c000f713:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f719:	75 e2                	jne    c000f6fd <Phys::allocatePage()+0xd>
c000f71b:	31 db                	xor    ebx,ebx
c000f71d:	c7 05 40 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a440,0x0
c000f727:	39 de                	cmp    esi,ebx
c000f729:	75 dc                	jne    c000f707 <Phys::allocatePage()+0x17>
c000f72b:	83 ec 0c             	sub    esp,0xc
c000f72e:	68 9d 6b 02 c0       	push   0xc0026b9d
c000f733:	e8 17 2b 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000f738:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000f73f:	e8 e9 fd ff ff       	call   c000f52d <Phys::allocateDMA(unsigned long)>
c000f744:	83 c4 10             	add    esp,0x10
c000f747:	85 c0                	test   eax,eax
c000f749:	75 56                	jne    c000f7a1 <Phys::allocatePage()+0xb1>
c000f74b:	83 ec 0c             	sub    esp,0xc
c000f74e:	68 ae 6b 02 c0       	push   0xc0026bae
c000f753:	e8 95 92 00 00       	call   c00189ed <Krnl::panic(char const*)>
c000f758:	83 c4 10             	add    esp,0x10
c000f75b:	8b 1d 40 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a440
c000f761:	53                   	push   ebx
c000f762:	e8 e3 fe ff ff       	call   c000f64a <Phys::getPageState(unsigned long)>
c000f767:	5a                   	pop    edx
c000f768:	84 c0                	test   al,al
c000f76a:	75 a6                	jne    c000f712 <Phys::allocatePage()+0x22>
c000f76c:	6a 01                	push   0x1
c000f76e:	53                   	push   ebx
c000f76f:	e8 a4 fe ff ff       	call   c000f618 <Phys::setPageState(unsigned long, bool)>
c000f774:	a1 4c a4 02 c0       	mov    eax,ds:0xc002a44c
c000f779:	59                   	pop    ecx
c000f77a:	40                   	inc    eax
c000f77b:	5b                   	pop    ebx
c000f77c:	a3 4c a4 02 c0       	mov    ds:0xc002a44c,eax
c000f781:	8d 04 80             	lea    eax,[eax+eax*4]
c000f784:	8d 04 80             	lea    eax,[eax+eax*4]
c000f787:	c1 e0 02             	shl    eax,0x2
c000f78a:	99                   	cdq    
c000f78b:	f7 3d 50 a4 02 c0    	idiv   DWORD PTR ds:0xc002a450
c000f791:	39 05 48 a4 02 c0    	cmp    DWORD PTR ds:0xc002a448,eax
c000f797:	75 0c                	jne    c000f7a5 <Phys::allocatePage()+0xb5>
c000f799:	a1 40 a4 02 c0       	mov    eax,ds:0xc002a440
c000f79e:	c1 e0 0c             	shl    eax,0xc
c000f7a1:	5a                   	pop    edx
c000f7a2:	5b                   	pop    ebx
c000f7a3:	5e                   	pop    esi
c000f7a4:	c3                   	ret    
c000f7a5:	83 ec 0c             	sub    esp,0xc
c000f7a8:	a3 48 a4 02 c0       	mov    ds:0xc002a448,eax
c000f7ad:	50                   	push   eax
c000f7ae:	e8 15 09 00 00       	call   c00100c8 <VgaText::updateRAMUsageDisplay(int)>
c000f7b3:	83 c4 10             	add    esp,0x10
c000f7b6:	eb e1                	jmp    c000f799 <Phys::allocatePage()+0xa9>

c000f7b8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000f7b8:	56                   	push   esi
c000f7b9:	53                   	push   ebx
c000f7ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f7be:	39 1d 44 a4 02 c0    	cmp    DWORD PTR ds:0xc002a444,ebx
c000f7c4:	73 06                	jae    c000f7cc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000f7c6:	89 1d 44 a4 02 c0    	mov    DWORD PTR ds:0xc002a444,ebx
c000f7cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7d0:	c1 eb 0c             	shr    ebx,0xc
c000f7d3:	c1 e8 0c             	shr    eax,0xc
c000f7d6:	39 d8                	cmp    eax,ebx
c000f7d8:	73 13                	jae    c000f7ed <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000f7da:	6a 00                	push   0x0
c000f7dc:	8d 70 01             	lea    esi,[eax+0x1]
c000f7df:	50                   	push   eax
c000f7e0:	e8 33 fe ff ff       	call   c000f618 <Phys::setPageState(unsigned long, bool)>
c000f7e5:	5a                   	pop    edx
c000f7e6:	89 f0                	mov    eax,esi
c000f7e8:	59                   	pop    ecx
c000f7e9:	39 f3                	cmp    ebx,esi
c000f7eb:	75 ed                	jne    c000f7da <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000f7ed:	5b                   	pop    ebx
c000f7ee:	5e                   	pop    esi
c000f7ef:	c3                   	ret    

c000f7f0 <Phys::physicalMemorySetup(unsigned int)>:
c000f7f0:	55                   	push   ebp
c000f7f1:	57                   	push   edi
c000f7f2:	56                   	push   esi
c000f7f3:	53                   	push   ebx
c000f7f4:	31 db                	xor    ebx,ebx
c000f7f6:	83 ec 40             	sub    esp,0x40
c000f7f9:	6a 30                	push   0x30
c000f7fb:	6a 00                	push   0x0
c000f7fd:	68 60 a4 02 c0       	push   0xc002a460
c000f802:	e8 c5 0e ff ff       	call   c00006cc <memset>
c000f807:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f80b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f810:	05 00 10 00 00       	add    eax,0x1000
c000f815:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f819:	83 c4 10             	add    esp,0x10
c000f81c:	83 ec 08             	sub    esp,0x8
c000f81f:	6a 01                	push   0x1
c000f821:	53                   	push   ebx
c000f822:	43                   	inc    ebx
c000f823:	e8 f0 fd ff ff       	call   c000f618 <Phys::setPageState(unsigned long, bool)>
c000f828:	83 c4 10             	add    esp,0x10
c000f82b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f831:	75 e9                	jne    c000f81c <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000f833:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000f83a:	66 85 c0             	test   ax,ax
c000f83d:	0f 84 8e 01 00 00    	je     c000f9d1 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000f843:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f847:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f84f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f853:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f858:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f85c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f864:	eb 15                	jmp    c000f87b <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000f866:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000f86a:	83 c3 18             	add    ebx,0x18
c000f86d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f871:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000f875:	0f 84 66 01 00 00    	je     c000f9e1 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000f87b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f87e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f881:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f884:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f888:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f88c:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f88e:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f891:	01 f0                	add    eax,esi
c000f893:	55                   	push   ebp
c000f894:	11 fa                	adc    edx,edi
c000f896:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f89a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f89e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f8a2:	56                   	push   esi
c000f8a3:	68 e8 6b 02 c0       	push   0xc0026be8
c000f8a8:	e8 a2 29 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000f8ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f8b1:	83 c4 10             	add    esp,0x10
c000f8b4:	09 f8                	or     eax,edi
c000f8b6:	0f 85 25 01 00 00    	jne    c000f9e1 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000f8bc:	4d                   	dec    ebp
c000f8bd:	75 a7                	jne    c000f866 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f8bf:	ba 00 00 08 00       	mov    edx,0x80000
c000f8c4:	89 c1                	mov    ecx,eax
c000f8c6:	39 f2                	cmp    edx,esi
c000f8c8:	19 f9                	sbb    ecx,edi
c000f8ca:	0f 82 a7 00 00 00    	jb     c000f977 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000f8d0:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f8d4:	89 c1                	mov    ecx,eax
c000f8d6:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000f8da:	0f 83 97 00 00 00    	jae    c000f977 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000f8e0:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f8e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f8e9:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f8ed:	39 fa                	cmp    edx,edi
c000f8ef:	19 e8                	sbb    eax,ebp
c000f8f1:	0f 82 14 01 00 00    	jb     c000fa0b <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000f8f7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f8fb:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f8ff:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000f905:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f90a:	83 d5 ff             	adc    ebp,0xffffffff
c000f90d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f911:	31 c0                	xor    eax,eax
c000f913:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f917:	39 fa                	cmp    edx,edi
c000f919:	89 c1                	mov    ecx,eax
c000f91b:	19 e9                	sbb    ecx,ebp
c000f91d:	0f 83 43 ff ff ff    	jae    c000f866 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f923:	be 00 00 08 00       	mov    esi,0x80000
c000f928:	50                   	push   eax
c000f929:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f92d:	57                   	push   edi
c000f92e:	56                   	push   esi
c000f92f:	68 0c 6c 02 c0       	push   0xc0026c0c
c000f934:	e8 16 29 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000f939:	5a                   	pop    edx
c000f93a:	59                   	pop    ecx
c000f93b:	57                   	push   edi
c000f93c:	56                   	push   esi
c000f93d:	e8 76 fe ff ff       	call   c000f7b8 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f942:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f946:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f94a:	83 c4 0c             	add    esp,0xc
c000f94d:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f951:	03 05 50 a4 02 c0    	add    eax,DWORD PTR ds:0xc002a450
c000f957:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f95e:	a3 50 a4 02 c0       	mov    ds:0xc002a450,eax
c000f963:	52                   	push   edx
c000f964:	50                   	push   eax
c000f965:	68 ca 6b 02 c0       	push   0xc0026bca
c000f96a:	e8 e0 28 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c000f96f:	83 c4 10             	add    esp,0x10
c000f972:	e9 ef fe ff ff       	jmp    c000f866 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f977:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000f97b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f97f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f983:	39 ea                	cmp    edx,ebp
c000f985:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000f989:	0f 82 d7 fe ff ff    	jb     c000f866 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f98f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f994:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000f998:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000f99c:	0f 83 c4 fe ff ff    	jae    c000f866 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000f9a2:	39 ee                	cmp    esi,ebp
c000f9a4:	89 f8                	mov    eax,edi
c000f9a6:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000f9aa:	0f 83 78 ff ff ff    	jae    c000f928 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000f9b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f9b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f9b8:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000f9bc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f9c0:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000f9c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f9c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f9cc:	e9 57 ff ff ff       	jmp    c000f928 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000f9d1:	83 ec 0c             	sub    esp,0xc
c000f9d4:	68 bc 6b 02 c0       	push   0xc0026bbc
c000f9d9:	e8 0f 90 00 00       	call   c00189ed <Krnl::panic(char const*)>
c000f9de:	83 c4 10             	add    esp,0x10
c000f9e1:	bb 40 01 00 00       	mov    ebx,0x140
c000f9e6:	83 ec 08             	sub    esp,0x8
c000f9e9:	6a 00                	push   0x0
c000f9eb:	53                   	push   ebx
c000f9ec:	43                   	inc    ebx
c000f9ed:	e8 26 fc ff ff       	call   c000f618 <Phys::setPageState(unsigned long, bool)>
c000f9f2:	ff 05 50 a4 02 c0    	inc    DWORD PTR ds:0xc002a450
c000f9f8:	83 c4 10             	add    esp,0x10
c000f9fb:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fa01:	75 e3                	jne    c000f9e6 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fa03:	83 c4 3c             	add    esp,0x3c
c000fa06:	5b                   	pop    ebx
c000fa07:	5e                   	pop    esi
c000fa08:	5f                   	pop    edi
c000fa09:	5d                   	pop    ebp
c000fa0a:	c3                   	ret    
c000fa0b:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fa13:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fa1b:	e9 d7 fe ff ff       	jmp    c000f8f7 <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fa20 <Pipe::isAtty()>:
c000fa20:	31 c0                	xor    eax,eax
c000fa22:	c3                   	ret    
c000fa23:	90                   	nop

c000fa24 <Pipe::~Pipe()>:
c000fa24:	83 ec 0c             	sub    esp,0xc
c000fa27:	ba 78 6c 02 c0       	mov    edx,0xc0026c78
c000fa2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa30:	89 10                	mov    DWORD PTR [eax],edx
c000fa32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa36:	83 ec 0c             	sub    esp,0xc
c000fa39:	50                   	push   eax
c000fa3a:	e8 dd 15 00 00       	call   c001101c <UnixFile::~UnixFile()>
c000fa3f:	83 c4 10             	add    esp,0x10
c000fa42:	90                   	nop
c000fa43:	83 c4 0c             	add    esp,0xc
c000fa46:	c3                   	ret    
c000fa47:	90                   	nop

c000fa48 <Pipe::~Pipe()>:
c000fa48:	83 ec 0c             	sub    esp,0xc
c000fa4b:	83 ec 0c             	sub    esp,0xc
c000fa4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa52:	e8 cd ff ff ff       	call   c000fa24 <Pipe::~Pipe()>
c000fa57:	83 c4 10             	add    esp,0x10
c000fa5a:	83 ec 08             	sub    esp,0x8
c000fa5d:	6a 20                	push   0x20
c000fa5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fa63:	e8 07 27 00 00       	call   c001216f <operator delete(void*, unsigned long)>
c000fa68:	83 c4 10             	add    esp,0x10
c000fa6b:	83 c4 0c             	add    esp,0xc
c000fa6e:	c3                   	ret    
c000fa6f:	90                   	nop

c000fa70 <Pipe::read(unsigned long long, void*, int*)>:
c000fa70:	55                   	push   ebp
c000fa71:	57                   	push   edi
c000fa72:	56                   	push   esi
c000fa73:	53                   	push   ebx
c000fa74:	83 ec 1c             	sub    esp,0x1c
c000fa77:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fa7b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fa7f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fa83:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fa86:	89 c8                	mov    eax,ecx
c000fa88:	99                   	cdq    
c000fa89:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fa8d:	74 19                	je     c000faa8 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fa8f:	39 f9                	cmp    ecx,edi
c000fa91:	89 d1                	mov    ecx,edx
c000fa93:	19 f1                	sbb    ecx,esi
c000fa95:	73 11                	jae    c000faa8 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fa97:	e8 a4 be 00 00       	call   c001b940 <lockScheduler()>
c000fa9c:	e8 d3 c1 00 00       	call   c001bc74 <schedule()>
c000faa1:	e8 9c be 00 00       	call   c001b942 <unlockScheduler()>
c000faa6:	eb db                	jmp    c000fa83 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000faa8:	39 f8                	cmp    eax,edi
c000faaa:	89 d1                	mov    ecx,edx
c000faac:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000fab0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000fab4:	19 f1                	sbb    ecx,esi
c000fab6:	73 08                	jae    c000fac0 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000fab8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fabc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fac0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fac3:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fac6:	29 c6                	sub    esi,eax
c000fac8:	89 f1                	mov    ecx,esi
c000faca:	c1 f9 1f             	sar    ecx,0x1f
c000facd:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000fad1:	89 ca                	mov    edx,ecx
c000fad3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fad7:	19 d1                	sbb    ecx,edx
c000fad9:	73 04                	jae    c000fadf <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000fadb:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000fadf:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fae3:	89 fd                	mov    ebp,edi
c000fae5:	29 f5                	sub    ebp,esi
c000fae7:	85 f6                	test   esi,esi
c000fae9:	74 12                	je     c000fafd <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000faeb:	52                   	push   edx
c000faec:	56                   	push   esi
c000faed:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000faf0:	50                   	push   eax
c000faf1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000faf5:	e8 9c 0b ff ff       	call   c0000696 <memcpy>
c000fafa:	83 c4 10             	add    esp,0x10
c000fafd:	85 ed                	test   ebp,ebp
c000faff:	74 12                	je     c000fb13 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000fb01:	50                   	push   eax
c000fb02:	55                   	push   ebp
c000fb03:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000fb06:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000fb0a:	56                   	push   esi
c000fb0b:	e8 86 0b ff ff       	call   c0000696 <memcpy>
c000fb10:	83 c4 10             	add    esp,0x10
c000fb13:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000fb16:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fb19:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fb1c:	99                   	cdq    
c000fb1d:	89 f7                	mov    edi,esi
c000fb1f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000fb23:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000fb27:	c1 ff 1f             	sar    edi,0x1f
c000fb2a:	57                   	push   edi
c000fb2b:	56                   	push   esi
c000fb2c:	52                   	push   edx
c000fb2d:	50                   	push   eax
c000fb2e:	e8 29 39 01 00       	call   c002345c <__umoddi3>
c000fb33:	83 c4 10             	add    esp,0x10
c000fb36:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fb39:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fb3e:	75 10                	jne    c000fb50 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000fb40:	83 ec 0c             	sub    esp,0xc
c000fb43:	68 35 6c 02 c0       	push   0xc0026c35
c000fb48:	e8 a0 8e 00 00       	call   c00189ed <Krnl::panic(char const*)>
c000fb4d:	83 c4 10             	add    esp,0x10
c000fb50:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fb54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fb58:	89 10                	mov    DWORD PTR [eax],edx
c000fb5a:	83 c4 1c             	add    esp,0x1c
c000fb5d:	31 c0                	xor    eax,eax
c000fb5f:	5b                   	pop    ebx
c000fb60:	5e                   	pop    esi
c000fb61:	5f                   	pop    edi
c000fb62:	5d                   	pop    ebp
c000fb63:	c3                   	ret    

c000fb64 <Pipe::write(unsigned long long, void*, int*)>:
c000fb64:	55                   	push   ebp
c000fb65:	57                   	push   edi
c000fb66:	56                   	push   esi
c000fb67:	53                   	push   ebx
c000fb68:	83 ec 1c             	sub    esp,0x1c
c000fb6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fb6f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fb73:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fb77:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb7a:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000fb7d:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000fb80:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fb84:	89 de                	mov    esi,ebx
c000fb86:	89 df                	mov    edi,ebx
c000fb88:	c1 ff 1f             	sar    edi,0x1f
c000fb8b:	01 c6                	add    esi,eax
c000fb8d:	89 c8                	mov    eax,ecx
c000fb8f:	11 d7                	adc    edi,edx
c000fb91:	99                   	cdq    
c000fb92:	39 f1                	cmp    ecx,esi
c000fb94:	89 d0                	mov    eax,edx
c000fb96:	19 f8                	sbb    eax,edi
c000fb98:	b8 01 00 00 00       	mov    eax,0x1
c000fb9d:	0f 82 80 00 00 00    	jb     c000fc23 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000fba3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fba6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000fba9:	01 d8                	add    eax,ebx
c000fbab:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000fbaf:	99                   	cdq    
c000fbb0:	f7 f9                	idiv   ecx
c000fbb2:	29 d1                	sub    ecx,edx
c000fbb4:	89 d7                	mov    edi,edx
c000fbb6:	89 c8                	mov    eax,ecx
c000fbb8:	99                   	cdq    
c000fbb9:	39 ce                	cmp    esi,ecx
c000fbbb:	19 d3                	sbb    ebx,edx
c000fbbd:	bb 00 00 00 00       	mov    ebx,0x0
c000fbc2:	72 04                	jb     c000fbc8 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000fbc4:	89 f3                	mov    ebx,esi
c000fbc6:	29 cb                	sub    ebx,ecx
c000fbc8:	89 f1                	mov    ecx,esi
c000fbca:	29 d9                	sub    ecx,ebx
c000fbcc:	74 1a                	je     c000fbe8 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000fbce:	52                   	push   edx
c000fbcf:	51                   	push   ecx
c000fbd0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000fbd4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000fbd8:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fbdb:	57                   	push   edi
c000fbdc:	e8 b5 0a ff ff       	call   c0000696 <memcpy>
c000fbe1:	83 c4 10             	add    esp,0x10
c000fbe4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fbe8:	85 db                	test   ebx,ebx
c000fbea:	74 12                	je     c000fbfe <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000fbec:	50                   	push   eax
c000fbed:	53                   	push   ebx
c000fbee:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000fbf2:	51                   	push   ecx
c000fbf3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000fbf6:	e8 9b 0a ff ff       	call   c0000696 <memcpy>
c000fbfb:	83 c4 10             	add    esp,0x10
c000fbfe:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000fc01:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fc06:	75 10                	jne    c000fc18 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000fc08:	83 ec 0c             	sub    esp,0xc
c000fc0b:	68 51 6c 02 c0       	push   0xc0026c51
c000fc10:	e8 d8 8d 00 00       	call   c00189ed <Krnl::panic(char const*)>
c000fc15:	83 c4 10             	add    esp,0x10
c000fc18:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fc1c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000fc1f:	89 38                	mov    DWORD PTR [eax],edi
c000fc21:	31 c0                	xor    eax,eax
c000fc23:	83 c4 1c             	add    esp,0x1c
c000fc26:	5b                   	pop    ebx
c000fc27:	5e                   	pop    esi
c000fc28:	5f                   	pop    edi
c000fc29:	5d                   	pop    ebp
c000fc2a:	c3                   	ret    
c000fc2b:	90                   	nop

c000fc2c <Pipe::Pipe(int)>:
c000fc2c:	83 ec 0c             	sub    esp,0xc
c000fc2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc33:	83 ec 08             	sub    esp,0x8
c000fc36:	6a 00                	push   0x0
c000fc38:	50                   	push   eax
c000fc39:	e8 3c 12 00 00       	call   c0010e7a <UnixFile::UnixFile(int)>
c000fc3e:	83 c4 10             	add    esp,0x10
c000fc41:	ba 78 6c 02 c0       	mov    edx,0xc0026c78
c000fc46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc4a:	89 10                	mov    DWORD PTR [eax],edx
c000fc4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc50:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fc54:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000fc57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc5b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000fc62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc66:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000fc6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fc71:	83 ec 0c             	sub    esp,0xc
c000fc74:	50                   	push   eax
c000fc75:	e8 cc f4 ff ff       	call   c000f146 <malloc>
c000fc7a:	83 c4 10             	add    esp,0x10
c000fc7d:	89 c2                	mov    edx,eax
c000fc7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc83:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fc86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc8a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000fc8e:	90                   	nop
c000fc8f:	83 c4 0c             	add    esp,0xc
c000fc92:	c3                   	ret    
c000fc93:	90                   	nop

c000fc94 <VgaText::isAtty()>:
c000fc94:	b0 01                	mov    al,0x1
c000fc96:	c3                   	ret    
c000fc97:	90                   	nop

c000fc98 <VgaText::~VgaText()>:
c000fc98:	83 ec 0c             	sub    esp,0xc
c000fc9b:	ba 34 6d 02 c0       	mov    edx,0xc0026d34
c000fca0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fca4:	89 10                	mov    DWORD PTR [eax],edx
c000fca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcaa:	83 ec 0c             	sub    esp,0xc
c000fcad:	50                   	push   eax
c000fcae:	e8 69 13 00 00       	call   c001101c <UnixFile::~UnixFile()>
c000fcb3:	83 c4 10             	add    esp,0x10
c000fcb6:	90                   	nop
c000fcb7:	83 c4 0c             	add    esp,0xc
c000fcba:	c3                   	ret    
c000fcbb:	90                   	nop

c000fcbc <VgaText::~VgaText()>:
c000fcbc:	83 ec 0c             	sub    esp,0xc
c000fcbf:	83 ec 0c             	sub    esp,0xc
c000fcc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcc6:	e8 cd ff ff ff       	call   c000fc98 <VgaText::~VgaText()>
c000fccb:	83 c4 10             	add    esp,0x10
c000fcce:	83 ec 08             	sub    esp,0x8
c000fcd1:	68 60 12 00 00       	push   0x1260
c000fcd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcda:	e8 90 24 00 00       	call   c001216f <operator delete(void*, unsigned long)>
c000fcdf:	83 c4 10             	add    esp,0x10
c000fce2:	83 c4 0c             	add    esp,0xc
c000fce5:	c3                   	ret    

c000fce6 <VgaText::read(unsigned long long, void*, int*)>:
c000fce6:	83 ec 10             	sub    esp,0x10
c000fce9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fced:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fcf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcf5:	e8 26 57 00 00       	call   c0015420 <readKeyboard(VgaText*, char*, unsigned long)>
c000fcfa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fcfe:	89 02                	mov    DWORD PTR [edx],eax
c000fd00:	31 c0                	xor    eax,eax
c000fd02:	83 c4 1c             	add    esp,0x1c
c000fd05:	c3                   	ret    

c000fd06 <setTerminalScrollLock(bool)>:
c000fd06:	c3                   	ret    

c000fd07 <addToTerminalCycle(VgaText*)>:
c000fd07:	8b 15 c0 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a4c0
c000fd0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd11:	85 d2                	test   edx,edx
c000fd13:	75 0c                	jne    c000fd21 <addToTerminalCycle(VgaText*)+0x1a>
c000fd15:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000fd1b:	a3 c0 a4 02 c0       	mov    ds:0xc002a4c0,eax
c000fd20:	c3                   	ret    
c000fd21:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000fd27:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000fd2d:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000fd33:	c3                   	ret    

c000fd34 <installVgaTextImplementation()>:
c000fd34:	83 ec 10             	sub    esp,0x10
c000fd37:	6a 20                	push   0x20
c000fd39:	6a 00                	push   0x0
c000fd3b:	68 a0 a4 02 c0       	push   0xc002a4a0
c000fd40:	e8 87 09 ff ff       	call   c00006cc <memset>
c000fd45:	83 c4 1c             	add    esp,0x1c
c000fd48:	c3                   	ret    

c000fd49 <scrollTerminalScrollLock(int)>:
c000fd49:	c3                   	ret    

c000fd4a <VgaText::load()>:
c000fd4a:	53                   	push   ebx
c000fd4b:	31 c0                	xor    eax,eax
c000fd4d:	83 ec 58             	sub    esp,0x58
c000fd50:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000fd54:	89 e2                	mov    edx,esp
c000fd56:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000fd5a:	40                   	inc    eax
c000fd5b:	83 f8 50             	cmp    eax,0x50
c000fd5e:	75 f6                	jne    c000fd56 <VgaText::load()+0xc>
c000fd60:	31 c0                	xor    eax,eax
c000fd62:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000fd69:	84 c9                	test   cl,cl
c000fd6b:	74 06                	je     c000fd73 <VgaText::load()+0x29>
c000fd6d:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fd70:	40                   	inc    eax
c000fd71:	eb ef                	jmp    c000fd62 <VgaText::load()+0x18>
c000fd73:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000fd79:	85 c0                	test   eax,eax
c000fd7b:	74 09                	je     c000fd86 <VgaText::load()+0x3c>
c000fd7d:	51                   	push   ecx
c000fd7e:	51                   	push   ecx
c000fd7f:	52                   	push   edx
c000fd80:	53                   	push   ebx
c000fd81:	ff d0                	call   eax
c000fd83:	83 c4 10             	add    esp,0x10
c000fd86:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000fd8c:	85 c0                	test   eax,eax
c000fd8e:	74 09                	je     c000fd99 <VgaText::load()+0x4f>
c000fd90:	83 ec 0c             	sub    esp,0xc
c000fd93:	53                   	push   ebx
c000fd94:	ff d0                	call   eax
c000fd96:	83 c4 10             	add    esp,0x10
c000fd99:	83 c4 58             	add    esp,0x58
c000fd9c:	5b                   	pop    ebx
c000fd9d:	c3                   	ret    

c000fd9e <VgaText::updateCursor()>:
c000fd9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fda2:	39 05 c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,eax
c000fda8:	75 0c                	jne    c000fdb6 <VgaText::updateCursor()+0x18>
c000fdaa:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000fdb0:	85 c0                	test   eax,eax
c000fdb2:	74 02                	je     c000fdb6 <VgaText::updateCursor()+0x18>
c000fdb4:	ff e0                	jmp    eax
c000fdb6:	c3                   	ret    
c000fdb7:	90                   	nop

c000fdb8 <VgaText::showCursor(bool)>:
c000fdb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fdc0:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000fdc6:	c3                   	ret    
c000fdc7:	90                   	nop

c000fdc8 <VgaText::disableBlink(bool)>:
c000fdc8:	56                   	push   esi
c000fdc9:	53                   	push   ebx
c000fdca:	51                   	push   ecx
c000fdcb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fdcf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fdd3:	39 1d c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,ebx
c000fdd9:	75 18                	jne    c000fdf3 <VgaText::disableBlink(bool)+0x2b>
c000fddb:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000fde1:	85 c0                	test   eax,eax
c000fde3:	74 0e                	je     c000fdf3 <VgaText::disableBlink(bool)+0x2b>
c000fde5:	89 f1                	mov    ecx,esi
c000fde7:	52                   	push   edx
c000fde8:	52                   	push   edx
c000fde9:	0f b6 d1             	movzx  edx,cl
c000fdec:	52                   	push   edx
c000fded:	53                   	push   ebx
c000fdee:	ff d0                	call   eax
c000fdf0:	83 c4 10             	add    esp,0x10
c000fdf3:	89 f0                	mov    eax,esi
c000fdf5:	83 f0 01             	xor    eax,0x1
c000fdf8:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000fdfe:	58                   	pop    eax
c000fdff:	5b                   	pop    ebx
c000fe00:	5e                   	pop    esi
c000fe01:	c3                   	ret    

c000fe02 <VgaText::doANSI_SGR(int)>:
c000fe02:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe0a:	85 d2                	test   edx,edx
c000fe0c:	75 14                	jne    c000fe22 <VgaText::doANSI_SGR(int)+0x20>
c000fe0e:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000fe14:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe1a:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000fe20:	eb 65                	jmp    c000fe87 <VgaText::doANSI_SGR(int)+0x85>
c000fe22:	83 fa 07             	cmp    edx,0x7
c000fe25:	75 14                	jne    c000fe3b <VgaText::doANSI_SGR(int)+0x39>
c000fe27:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000fe2d:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000fe33:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000fe39:	eb 4c                	jmp    c000fe87 <VgaText::doANSI_SGR(int)+0x85>
c000fe3b:	83 fa 1b             	cmp    edx,0x1b
c000fe3e:	74 ce                	je     c000fe0e <VgaText::doANSI_SGR(int)+0xc>
c000fe40:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000fe43:	83 f9 07             	cmp    ecx,0x7
c000fe46:	77 09                	ja     c000fe51 <VgaText::doANSI_SGR(int)+0x4f>
c000fe48:	8b 14 8d e0 93 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd6c20]
c000fe4f:	eb 20                	jmp    c000fe71 <VgaText::doANSI_SGR(int)+0x6f>
c000fe51:	8d 4a d8             	lea    ecx,[edx-0x28]
c000fe54:	83 f9 07             	cmp    ecx,0x7
c000fe57:	77 09                	ja     c000fe62 <VgaText::doANSI_SGR(int)+0x60>
c000fe59:	8b 14 8d e0 93 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd6c20]
c000fe60:	eb 25                	jmp    c000fe87 <VgaText::doANSI_SGR(int)+0x85>
c000fe62:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000fe65:	83 f9 07             	cmp    ecx,0x7
c000fe68:	77 0e                	ja     c000fe78 <VgaText::doANSI_SGR(int)+0x76>
c000fe6a:	8b 14 95 98 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6d68]
c000fe71:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000fe77:	c3                   	ret    
c000fe78:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000fe7b:	83 f9 07             	cmp    ecx,0x7
c000fe7e:	77 0d                	ja     c000fe8d <VgaText::doANSI_SGR(int)+0x8b>
c000fe80:	8b 14 95 70 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6d90]
c000fe87:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fe8d:	c3                   	ret    

c000fe8e <VgaText::setDefaultBgColour(VgaColour)>:
c000fe8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe96:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000fe9c:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000fea2:	c3                   	ret    
c000fea3:	90                   	nop

c000fea4 <VgaText::setDefaultFgColour(VgaColour)>:
c000fea4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fea8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000feac:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000feb2:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000feb8:	c3                   	ret    
c000feb9:	90                   	nop

c000feba <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000feba:	53                   	push   ebx
c000febb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000febf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fec3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fec7:	51                   	push   ecx
c000fec8:	e8 c1 ff ff ff       	call   c000fe8e <VgaText::setDefaultBgColour(VgaColour)>
c000fecd:	58                   	pop    eax
c000fece:	5a                   	pop    edx
c000fecf:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fed3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000fed7:	5b                   	pop    ebx
c000fed8:	eb ca                	jmp    c000fea4 <VgaText::setDefaultFgColour(VgaColour)>

c000feda <VgaText::combineColours(unsigned char, unsigned char)>:
c000feda:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000fede:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000fee3:	83 e0 0f             	and    eax,0xf
c000fee6:	c1 e2 04             	shl    edx,0x4
c000fee9:	09 d0                	or     eax,edx
c000feeb:	c3                   	ret    

c000feec <VgaText::scrollScreen()>:
c000feec:	57                   	push   edi
c000feed:	56                   	push   esi
c000feee:	be 01 00 00 00       	mov    esi,0x1
c000fef3:	53                   	push   ebx
c000fef4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fef8:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000fefe:	31 ff                	xor    edi,edi
c000ff00:	01 d9                	add    ecx,ebx
c000ff02:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000ff05:	83 fe 17             	cmp    esi,0x17
c000ff08:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000ff0e:	75 28                	jne    c000ff38 <VgaText::scrollScreen()+0x4c>
c000ff10:	f7 c7 01 00 00 00    	test   edi,0x1
c000ff16:	74 1c                	je     c000ff34 <VgaText::scrollScreen()+0x48>
c000ff18:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000ff1f:	50                   	push   eax
c000ff20:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000ff27:	50                   	push   eax
c000ff28:	e8 ad ff ff ff       	call   c000feda <VgaText::combineColours(unsigned char, unsigned char)>
c000ff2d:	5a                   	pop    edx
c000ff2e:	5a                   	pop    edx
c000ff2f:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000ff32:	eb 04                	jmp    c000ff38 <VgaText::scrollScreen()+0x4c>
c000ff34:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ff38:	47                   	inc    edi
c000ff39:	41                   	inc    ecx
c000ff3a:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ff40:	75 c0                	jne    c000ff02 <VgaText::scrollScreen()+0x16>
c000ff42:	46                   	inc    esi
c000ff43:	83 fe 18             	cmp    esi,0x18
c000ff46:	75 b0                	jne    c000fef8 <VgaText::scrollScreen()+0xc>
c000ff48:	39 1d c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,ebx
c000ff4e:	75 24                	jne    c000ff74 <VgaText::scrollScreen()+0x88>
c000ff50:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ff57:	74 08                	je     c000ff61 <VgaText::scrollScreen()+0x75>
c000ff59:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ff5f:	eb 13                	jmp    c000ff74 <VgaText::scrollScreen()+0x88>
c000ff61:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ff67:	85 c0                	test   eax,eax
c000ff69:	74 09                	je     c000ff74 <VgaText::scrollScreen()+0x88>
c000ff6b:	83 ec 0c             	sub    esp,0xc
c000ff6e:	53                   	push   ebx
c000ff6f:	ff d0                	call   eax
c000ff71:	83 c4 10             	add    esp,0x10
c000ff74:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ff78:	5b                   	pop    ebx
c000ff79:	5e                   	pop    esi
c000ff7a:	5f                   	pop    edi
c000ff7b:	e9 1e fe ff ff       	jmp    c000fd9e <VgaText::updateCursor()>

c000ff80 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ff80:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ff85:	c1 e0 08             	shl    eax,0x8
c000ff88:	89 c2                	mov    edx,eax
c000ff8a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ff8f:	09 d0                	or     eax,edx
c000ff91:	c3                   	ret    

c000ff92 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ff92:	53                   	push   ebx
c000ff93:	83 ec 08             	sub    esp,0x8
c000ff96:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff9a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ff9f:	50                   	push   eax
c000ffa0:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ffa5:	50                   	push   eax
c000ffa6:	e8 2f ff ff ff       	call   c000feda <VgaText::combineColours(unsigned char, unsigned char)>
c000ffab:	5a                   	pop    edx
c000ffac:	0f b6 c0             	movzx  eax,al
c000ffaf:	5b                   	pop    ebx
c000ffb0:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ffb5:	50                   	push   eax
c000ffb6:	53                   	push   ebx
c000ffb7:	e8 c4 ff ff ff       	call   c000ff80 <VgaText::combineCharAndColour(char, unsigned char)>
c000ffbc:	5a                   	pop    edx
c000ffbd:	5a                   	pop    edx
c000ffbe:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ffc4:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ffc8:	0f b7 d2             	movzx  edx,dx
c000ffcb:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ffd0:	39 0d c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,ecx
c000ffd6:	75 14                	jne    c000ffec <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ffd8:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000ffde:	85 c0                	test   eax,eax
c000ffe0:	74 0a                	je     c000ffec <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ffe2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ffe6:	83 c4 08             	add    esp,0x8
c000ffe9:	5b                   	pop    ebx
c000ffea:	ff e0                	jmp    eax
c000ffec:	83 c4 08             	add    esp,0x8
c000ffef:	5b                   	pop    ebx
c000fff0:	c3                   	ret    
c000fff1:	90                   	nop

c000fff2 <VgaText::getCursorX()>:
c000fff2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fff6:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000fffc:	c3                   	ret    
c000fffd:	90                   	nop

c000fffe <VgaText::getCursorY()>:
c000fffe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010002:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010008:	c3                   	ret    
c0010009:	90                   	nop

c001000a <VgaText::setCursor(int, int)>:
c001000a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001000e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010012:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010018:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001001c:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010022:	e9 77 fd ff ff       	jmp    c000fd9e <VgaText::updateCursor()>
c0010027:	90                   	nop

c0010028 <VgaText::setCursorX(int)>:
c0010028:	83 ec 10             	sub    esp,0x10
c001002b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001002f:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010035:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010039:	50                   	push   eax
c001003a:	e8 cb ff ff ff       	call   c001000a <VgaText::setCursor(int, int)>
c001003f:	83 c4 1c             	add    esp,0x1c
c0010042:	c3                   	ret    
c0010043:	90                   	nop

c0010044 <VgaText::setCursorY(int)>:
c0010044:	83 ec 10             	sub    esp,0x10
c0010047:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001004b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001004f:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010055:	50                   	push   eax
c0010056:	e8 af ff ff ff       	call   c001000a <VgaText::setCursor(int, int)>
c001005b:	83 c4 1c             	add    esp,0x1c
c001005e:	c3                   	ret    
c001005f:	90                   	nop

c0010060 <VgaText::incrementCursor(bool)>:
c0010060:	56                   	push   esi
c0010061:	53                   	push   ebx
c0010062:	51                   	push   ecx
c0010063:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010067:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001006b:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010071:	40                   	inc    eax
c0010072:	83 f8 50             	cmp    eax,0x50
c0010075:	74 08                	je     c001007f <VgaText::incrementCursor(bool)+0x1f>
c0010077:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c001007d:	eb 33                	jmp    c00100b2 <VgaText::incrementCursor(bool)+0x52>
c001007f:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010085:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001008f:	8d 50 01             	lea    edx,[eax+0x1]
c0010092:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010098:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c001009e:	75 12                	jne    c00100b2 <VgaText::incrementCursor(bool)+0x52>
c00100a0:	83 ec 0c             	sub    esp,0xc
c00100a3:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00100a9:	53                   	push   ebx
c00100aa:	e8 3d fe ff ff       	call   c000feec <VgaText::scrollScreen()>
c00100af:	83 c4 10             	add    esp,0x10
c00100b2:	89 f0                	mov    eax,esi
c00100b4:	84 c0                	test   al,al
c00100b6:	74 0c                	je     c00100c4 <VgaText::incrementCursor(bool)+0x64>
c00100b8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00100bc:	5a                   	pop    edx
c00100bd:	5b                   	pop    ebx
c00100be:	5e                   	pop    esi
c00100bf:	e9 da fc ff ff       	jmp    c000fd9e <VgaText::updateCursor()>
c00100c4:	58                   	pop    eax
c00100c5:	5b                   	pop    ebx
c00100c6:	5e                   	pop    esi
c00100c7:	c3                   	ret    

c00100c8 <VgaText::updateRAMUsageDisplay(int)>:
c00100c8:	53                   	push   ebx
c00100c9:	bb 0a 00 00 00       	mov    ebx,0xa
c00100ce:	6a 0f                	push   0xf
c00100d0:	6a 00                	push   0x0
c00100d2:	e8 03 fe ff ff       	call   c000feda <VgaText::combineColours(unsigned char, unsigned char)>
c00100d7:	5a                   	pop    edx
c00100d8:	59                   	pop    ecx
c00100d9:	0f b6 c8             	movzx  ecx,al
c00100dc:	51                   	push   ecx
c00100dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100e1:	99                   	cdq    
c00100e2:	f7 fb                	idiv   ebx
c00100e4:	89 d3                	mov    ebx,edx
c00100e6:	83 c0 30             	add    eax,0x30
c00100e9:	83 c3 30             	add    ebx,0x30
c00100ec:	0f be c0             	movsx  eax,al
c00100ef:	0f b6 db             	movzx  ebx,bl
c00100f2:	50                   	push   eax
c00100f3:	e8 88 fe ff ff       	call   c000ff80 <VgaText::combineCharAndColour(char, unsigned char)>
c00100f8:	5a                   	pop    edx
c00100f9:	5a                   	pop    edx
c00100fa:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c0010100:	51                   	push   ecx
c0010101:	53                   	push   ebx
c0010102:	e8 79 fe ff ff       	call   c000ff80 <VgaText::combineCharAndColour(char, unsigned char)>
c0010107:	5b                   	pop    ebx
c0010108:	5a                   	pop    edx
c0010109:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c001010f:	51                   	push   ecx
c0010110:	6a 25                	push   0x25
c0010112:	e8 69 fe ff ff       	call   c000ff80 <VgaText::combineCharAndColour(char, unsigned char)>
c0010117:	59                   	pop    ecx
c0010118:	5b                   	pop    ebx
c0010119:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c001011f:	5b                   	pop    ebx
c0010120:	c3                   	ret    
c0010121:	90                   	nop

c0010122 <VgaText::updateDiskUsage()>:
c0010122:	55                   	push   ebp
c0010123:	bd 10 27 00 00       	mov    ebp,0x2710
c0010128:	57                   	push   edi
c0010129:	56                   	push   esi
c001012a:	53                   	push   ebx
c001012b:	6a 0f                	push   0xf
c001012d:	6a 00                	push   0x0
c001012f:	e8 a6 fd ff ff       	call   c000feda <VgaText::combineColours(unsigned char, unsigned char)>
c0010134:	5a                   	pop    edx
c0010135:	0f b6 d8             	movzx  ebx,al
c0010138:	59                   	pop    ecx
c0010139:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c001013e:	53                   	push   ebx
c001013f:	b9 0a 00 00 00       	mov    ecx,0xa
c0010144:	99                   	cdq    
c0010145:	f7 fd                	idiv   ebp
c0010147:	99                   	cdq    
c0010148:	f7 f9                	idiv   ecx
c001014a:	8d 42 30             	lea    eax,[edx+0x30]
c001014d:	0f b6 c0             	movzx  eax,al
c0010150:	50                   	push   eax
c0010151:	e8 2a fe ff ff       	call   c000ff80 <VgaText::combineCharAndColour(char, unsigned char)>
c0010156:	5e                   	pop    esi
c0010157:	5f                   	pop    edi
c0010158:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001015e:	bf e8 03 00 00       	mov    edi,0x3e8
c0010163:	53                   	push   ebx
c0010164:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c0010169:	99                   	cdq    
c001016a:	f7 ff                	idiv   edi
c001016c:	99                   	cdq    
c001016d:	f7 f9                	idiv   ecx
c001016f:	8d 42 30             	lea    eax,[edx+0x30]
c0010172:	0f b6 c0             	movzx  eax,al
c0010175:	50                   	push   eax
c0010176:	e8 05 fe ff ff       	call   c000ff80 <VgaText::combineCharAndColour(char, unsigned char)>
c001017b:	5a                   	pop    edx
c001017c:	5e                   	pop    esi
c001017d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c0010183:	be 64 00 00 00       	mov    esi,0x64
c0010188:	53                   	push   ebx
c0010189:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c001018e:	99                   	cdq    
c001018f:	f7 fe                	idiv   esi
c0010191:	99                   	cdq    
c0010192:	f7 f9                	idiv   ecx
c0010194:	8d 42 30             	lea    eax,[edx+0x30]
c0010197:	0f b6 c0             	movzx  eax,al
c001019a:	50                   	push   eax
c001019b:	e8 e0 fd ff ff       	call   c000ff80 <VgaText::combineCharAndColour(char, unsigned char)>
c00101a0:	5a                   	pop    edx
c00101a1:	5a                   	pop    edx
c00101a2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c00101a8:	53                   	push   ebx
c00101a9:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c00101ae:	99                   	cdq    
c00101af:	f7 f9                	idiv   ecx
c00101b1:	99                   	cdq    
c00101b2:	f7 f9                	idiv   ecx
c00101b4:	8d 42 30             	lea    eax,[edx+0x30]
c00101b7:	0f b6 c0             	movzx  eax,al
c00101ba:	50                   	push   eax
c00101bb:	e8 c0 fd ff ff       	call   c000ff80 <VgaText::combineCharAndColour(char, unsigned char)>
c00101c0:	5a                   	pop    edx
c00101c1:	5a                   	pop    edx
c00101c2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c00101c8:	53                   	push   ebx
c00101c9:	a1 08 c6 02 c0       	mov    eax,ds:0xc002c608
c00101ce:	99                   	cdq    
c00101cf:	f7 f9                	idiv   ecx
c00101d1:	8d 42 30             	lea    eax,[edx+0x30]
c00101d4:	0f b6 c0             	movzx  eax,al
c00101d7:	50                   	push   eax
c00101d8:	e8 a3 fd ff ff       	call   c000ff80 <VgaText::combineCharAndColour(char, unsigned char)>
c00101dd:	5a                   	pop    edx
c00101de:	5a                   	pop    edx
c00101df:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c00101e5:	53                   	push   ebx
c00101e6:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c00101eb:	99                   	cdq    
c00101ec:	f7 fd                	idiv   ebp
c00101ee:	99                   	cdq    
c00101ef:	f7 f9                	idiv   ecx
c00101f1:	8d 42 30             	lea    eax,[edx+0x30]
c00101f4:	0f b6 c0             	movzx  eax,al
c00101f7:	50                   	push   eax
c00101f8:	e8 83 fd ff ff       	call   c000ff80 <VgaText::combineCharAndColour(char, unsigned char)>
c00101fd:	5d                   	pop    ebp
c00101fe:	5a                   	pop    edx
c00101ff:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c0010205:	53                   	push   ebx
c0010206:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c001020b:	99                   	cdq    
c001020c:	f7 ff                	idiv   edi
c001020e:	99                   	cdq    
c001020f:	f7 f9                	idiv   ecx
c0010211:	8d 42 30             	lea    eax,[edx+0x30]
c0010214:	0f b6 c0             	movzx  eax,al
c0010217:	50                   	push   eax
c0010218:	e8 63 fd ff ff       	call   c000ff80 <VgaText::combineCharAndColour(char, unsigned char)>
c001021d:	5f                   	pop    edi
c001021e:	5d                   	pop    ebp
c001021f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c0010225:	53                   	push   ebx
c0010226:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c001022b:	99                   	cdq    
c001022c:	f7 fe                	idiv   esi
c001022e:	99                   	cdq    
c001022f:	f7 f9                	idiv   ecx
c0010231:	8d 42 30             	lea    eax,[edx+0x30]
c0010234:	0f b6 c0             	movzx  eax,al
c0010237:	50                   	push   eax
c0010238:	e8 43 fd ff ff       	call   c000ff80 <VgaText::combineCharAndColour(char, unsigned char)>
c001023d:	5a                   	pop    edx
c001023e:	5e                   	pop    esi
c001023f:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c0010245:	53                   	push   ebx
c0010246:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c001024b:	99                   	cdq    
c001024c:	f7 f9                	idiv   ecx
c001024e:	99                   	cdq    
c001024f:	f7 f9                	idiv   ecx
c0010251:	8d 42 30             	lea    eax,[edx+0x30]
c0010254:	0f b6 c0             	movzx  eax,al
c0010257:	50                   	push   eax
c0010258:	e8 23 fd ff ff       	call   c000ff80 <VgaText::combineCharAndColour(char, unsigned char)>
c001025d:	5f                   	pop    edi
c001025e:	5d                   	pop    ebp
c001025f:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c0010265:	53                   	push   ebx
c0010266:	a1 04 c6 02 c0       	mov    eax,ds:0xc002c604
c001026b:	99                   	cdq    
c001026c:	f7 f9                	idiv   ecx
c001026e:	83 c2 30             	add    edx,0x30
c0010271:	0f b6 d2             	movzx  edx,dl
c0010274:	52                   	push   edx
c0010275:	e8 06 fd ff ff       	call   c000ff80 <VgaText::combineCharAndColour(char, unsigned char)>
c001027a:	5a                   	pop    edx
c001027b:	59                   	pop    ecx
c001027c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c0010282:	5b                   	pop    ebx
c0010283:	5e                   	pop    esi
c0010284:	5f                   	pop    edi
c0010285:	5d                   	pop    ebp
c0010286:	c3                   	ret    
c0010287:	90                   	nop

c0010288 <VgaText::updateTitle()>:
c0010288:	53                   	push   ebx
c0010289:	31 c0                	xor    eax,eax
c001028b:	83 ec 58             	sub    esp,0x58
c001028e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010292:	89 e1                	mov    ecx,esp
c0010294:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010298:	40                   	inc    eax
c0010299:	83 f8 50             	cmp    eax,0x50
c001029c:	75 f6                	jne    c0010294 <VgaText::updateTitle()+0xc>
c001029e:	31 c0                	xor    eax,eax
c00102a0:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c00102a7:	84 db                	test   bl,bl
c00102a9:	74 06                	je     c00102b1 <VgaText::updateTitle()+0x29>
c00102ab:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00102ae:	40                   	inc    eax
c00102af:	eb ef                	jmp    c00102a0 <VgaText::updateTitle()+0x18>
c00102b1:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c00102b7:	85 c0                	test   eax,eax
c00102b9:	74 09                	je     c00102c4 <VgaText::updateTitle()+0x3c>
c00102bb:	53                   	push   ebx
c00102bc:	53                   	push   ebx
c00102bd:	51                   	push   ecx
c00102be:	52                   	push   edx
c00102bf:	ff d0                	call   eax
c00102c1:	83 c4 10             	add    esp,0x10
c00102c4:	e8 59 fe ff ff       	call   c0010122 <VgaText::updateDiskUsage()>
c00102c9:	83 c4 58             	add    esp,0x58
c00102cc:	5b                   	pop    ebx
c00102cd:	c3                   	ret    

c00102ce <VgaText::setTitleTextColour(VgaColour)>:
c00102ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102d6:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00102dc:	eb aa                	jmp    c0010288 <VgaText::updateTitle()>

c00102de <VgaText::setTitleColour(VgaColour)>:
c00102de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102e6:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00102ec:	eb 9a                	jmp    c0010288 <VgaText::updateTitle()>

c00102ee <VgaText::setTitle(char*)>:
c00102ee:	53                   	push   ebx
c00102ef:	83 ec 10             	sub    esp,0x10
c00102f2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00102f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102fa:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010300:	50                   	push   eax
c0010301:	e8 65 04 ff ff       	call   c000076b <strcpy>
c0010306:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001030a:	83 c4 18             	add    esp,0x18
c001030d:	5b                   	pop    ebx
c001030e:	e9 75 ff ff ff       	jmp    c0010288 <VgaText::updateTitle()>
c0010313:	90                   	nop

c0010314 <VgaText::decrementCursor(bool)>:
c0010314:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010318:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001031c:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010322:	85 c0                	test   eax,eax
c0010324:	74 07                	je     c001032d <VgaText::decrementCursor(bool)+0x19>
c0010326:	48                   	dec    eax
c0010327:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c001032d:	84 c9                	test   cl,cl
c001032f:	74 09                	je     c001033a <VgaText::decrementCursor(bool)+0x26>
c0010331:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010335:	e9 64 fa ff ff       	jmp    c000fd9e <VgaText::updateCursor()>
c001033a:	c3                   	ret    
c001033b:	90                   	nop

c001033c <VgaText::putchar(char, VgaColour, VgaColour)>:
c001033c:	53                   	push   ebx
c001033d:	83 ec 08             	sub    esp,0x8
c0010340:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010344:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010348:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001034c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010350:	3c 07                	cmp    al,0x7
c0010352:	75 2a                	jne    c001037e <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010354:	a1 6c a5 02 c0       	mov    eax,ds:0xc002a56c
c0010359:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010361:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010369:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010371:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010375:	83 c4 08             	add    esp,0x8
c0010378:	5b                   	pop    ebx
c0010379:	e9 bc 2c 00 00       	jmp    c001303a <Buzzer::beep(int, int, bool)>
c001037e:	3c 0d                	cmp    al,0xd
c0010380:	75 0c                	jne    c001038e <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010382:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001038c:	eb 3b                	jmp    c00103c9 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c001038e:	3c 0a                	cmp    al,0xa
c0010390:	75 40                	jne    c00103d2 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010392:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010398:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00103a2:	8d 50 01             	lea    edx,[eax+0x1]
c00103a5:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00103ab:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00103b1:	75 12                	jne    c00103c5 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c00103b3:	83 ec 0c             	sub    esp,0xc
c00103b6:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00103bc:	53                   	push   ebx
c00103bd:	e8 2a fb ff ff       	call   c000feec <VgaText::scrollScreen()>
c00103c2:	83 c4 10             	add    esp,0x10
c00103c5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00103c9:	83 c4 08             	add    esp,0x8
c00103cc:	5b                   	pop    ebx
c00103cd:	e9 cc f9 ff ff       	jmp    c000fd9e <VgaText::updateCursor()>
c00103d2:	3c 08                	cmp    al,0x8
c00103d4:	75 31                	jne    c0010407 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00103d6:	50                   	push   eax
c00103d7:	50                   	push   eax
c00103d8:	6a 01                	push   0x1
c00103da:	53                   	push   ebx
c00103db:	e8 34 ff ff ff       	call   c0010314 <VgaText::decrementCursor(bool)>
c00103e0:	5a                   	pop    edx
c00103e1:	59                   	pop    ecx
c00103e2:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00103e8:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00103ee:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00103f4:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c00103fa:	6a 20                	push   0x20
c00103fc:	53                   	push   ebx
c00103fd:	e8 90 fb ff ff       	call   c000ff92 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010402:	83 c4 28             	add    esp,0x28
c0010405:	5b                   	pop    ebx
c0010406:	c3                   	ret    
c0010407:	83 ec 08             	sub    esp,0x8
c001040a:	0f be c0             	movsx  eax,al
c001040d:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010413:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010419:	51                   	push   ecx
c001041a:	52                   	push   edx
c001041b:	50                   	push   eax
c001041c:	53                   	push   ebx
c001041d:	e8 70 fb ff ff       	call   c000ff92 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010422:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010426:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001042e:	83 c4 28             	add    esp,0x28
c0010431:	5b                   	pop    ebx
c0010432:	e9 29 fc ff ff       	jmp    c0010060 <VgaText::incrementCursor(bool)>
c0010437:	90                   	nop

c0010438 <VgaText::isShowingCursor()>:
c0010438:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001043c:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010442:	c3                   	ret    
c0010443:	90                   	nop

c0010444 <VgaText::isBlinkDisabled()>:
c0010444:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010448:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c001044e:	83 f0 01             	xor    eax,0x1
c0010451:	c3                   	ret    

c0010452 <VgaText::setCursorHeight(int)>:
c0010452:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010456:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001045a:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010460:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010467:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001046b:	e9 48 f9 ff ff       	jmp    c000fdb8 <VgaText::showCursor(bool)>

c0010470 <VgaText::getCursorHeight()>:
c0010470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010474:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c001047a:	c3                   	ret    

c001047b <setActiveTerminal(VgaText*)>:
c001047b:	53                   	push   ebx
c001047c:	83 ec 08             	sub    esp,0x8
c001047f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010483:	85 db                	test   ebx,ebx
c0010485:	75 11                	jne    c0010498 <setActiveTerminal(VgaText*)+0x1d>
c0010487:	c7 44 24 10 8c 6c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026c8c
c001048f:	83 c4 08             	add    esp,0x8
c0010492:	5b                   	pop    ebx
c0010493:	e9 55 85 00 00       	jmp    c00189ed <Krnl::panic(char const*)>
c0010498:	50                   	push   eax
c0010499:	50                   	push   eax
c001049a:	53                   	push   ebx
c001049b:	68 9a 6c 02 c0       	push   0xc0026c9a
c00104a0:	e8 aa 1d 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00104a5:	a1 c4 a4 02 c0       	mov    eax,ds:0xc002a4c4
c00104aa:	83 c4 10             	add    esp,0x10
c00104ad:	85 c0                	test   eax,eax
c00104af:	74 0c                	je     c00104bd <setActiveTerminal(VgaText*)+0x42>
c00104b1:	83 ec 0c             	sub    esp,0xc
c00104b4:	50                   	push   eax
c00104b5:	e8 e4 f8 ff ff       	call   c000fd9e <VgaText::updateCursor()>
c00104ba:	83 c4 10             	add    esp,0x10
c00104bd:	89 1d c4 a4 02 c0    	mov    DWORD PTR ds:0xc002a4c4,ebx
c00104c3:	51                   	push   ecx
c00104c4:	51                   	push   ecx
c00104c5:	53                   	push   ebx
c00104c6:	68 b2 6c 02 c0       	push   0xc0026cb2
c00104cb:	e8 7f 1d 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00104d0:	83 c4 0c             	add    esp,0xc
c00104d3:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00104d9:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00104df:	53                   	push   ebx
c00104e0:	e8 25 fb ff ff       	call   c001000a <VgaText::setCursor(int, int)>
c00104e5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00104e8:	e8 57 ff ff ff       	call   c0010444 <VgaText::isBlinkDisabled()>
c00104ed:	5a                   	pop    edx
c00104ee:	0f b6 c0             	movzx  eax,al
c00104f1:	59                   	pop    ecx
c00104f2:	50                   	push   eax
c00104f3:	53                   	push   ebx
c00104f4:	e8 cf f8 ff ff       	call   c000fdc8 <VgaText::disableBlink(bool)>
c00104f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00104fc:	e8 6f ff ff ff       	call   c0010470 <VgaText::getCursorHeight()>
c0010501:	5a                   	pop    edx
c0010502:	59                   	pop    ecx
c0010503:	50                   	push   eax
c0010504:	53                   	push   ebx
c0010505:	e8 48 ff ff ff       	call   c0010452 <VgaText::setCursorHeight(int)>
c001050a:	83 c4 10             	add    esp,0x10
c001050d:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010514:	75 0a                	jne    c0010520 <setActiveTerminal(VgaText*)+0xa5>
c0010516:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010520:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010524:	83 c4 08             	add    esp,0x8
c0010527:	5b                   	pop    ebx
c0010528:	e9 1d f8 ff ff       	jmp    c000fd4a <VgaText::load()>

c001052d <doTerminalCycle()>:
c001052d:	83 ec 18             	sub    esp,0x18
c0010530:	a1 c0 a4 02 c0       	mov    eax,ds:0xc002a4c0
c0010535:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c001053b:	50                   	push   eax
c001053c:	a3 c0 a4 02 c0       	mov    ds:0xc002a4c0,eax
c0010541:	e8 35 ff ff ff       	call   c001047b <setActiveTerminal(VgaText*)>
c0010546:	83 c4 1c             	add    esp,0x1c
c0010549:	c3                   	ret    

c001054a <VgaText::doUpdate()>:
c001054a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001054e:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010554:	85 c0                	test   eax,eax
c0010556:	74 02                	je     c001055a <VgaText::doUpdate()+0x10>
c0010558:	ff e0                	jmp    eax
c001055a:	c3                   	ret    
c001055b:	90                   	nop

c001055c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001055c:	55                   	push   ebp
c001055d:	57                   	push   edi
c001055e:	56                   	push   esi
c001055f:	53                   	push   ebx
c0010560:	83 ec 1c             	sub    esp,0x1c
c0010563:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010567:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001056c:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010573:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010576:	50                   	push   eax
c0010577:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001057c:	50                   	push   eax
c001057d:	e8 58 f9 ff ff       	call   c000feda <VgaText::combineColours(unsigned char, unsigned char)>
c0010582:	59                   	pop    ecx
c0010583:	0f b6 c0             	movzx  eax,al
c0010586:	5b                   	pop    ebx
c0010587:	31 c9                	xor    ecx,ecx
c0010589:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010591:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010595:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c001059b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001059f:	0f b7 db             	movzx  ebx,bx
c00105a2:	01 db                	add    ebx,ebx
c00105a4:	01 fb                	add    ebx,edi
c00105a6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00105a9:	84 c0                	test   al,al
c00105ab:	0f 84 38 01 00 00    	je     c00106e9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c00105b1:	3c 0d                	cmp    al,0xd
c00105b3:	75 0f                	jne    c00105c4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00105b5:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00105bf:	e9 1f 01 00 00       	jmp    c00106e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00105c4:	3c 0a                	cmp    al,0xa
c00105c6:	75 5b                	jne    c0010623 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c00105c8:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c00105ce:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00105d8:	8d 48 01             	lea    ecx,[eax+0x1]
c00105db:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c00105e1:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c00105e7:	75 12                	jne    c00105fb <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00105e9:	83 ec 0c             	sub    esp,0xc
c00105ec:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c00105f2:	55                   	push   ebp
c00105f3:	e8 f4 f8 ff ff       	call   c000feec <VgaText::scrollScreen()>
c00105f8:	83 c4 10             	add    esp,0x10
c00105fb:	83 ec 0c             	sub    esp,0xc
c00105fe:	55                   	push   ebp
c00105ff:	e8 9a f7 ff ff       	call   c000fd9e <VgaText::updateCursor()>
c0010604:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001060c:	83 c4 10             	add    esp,0x10
c001060f:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010615:	31 c9                	xor    ecx,ecx
c0010617:	0f b7 db             	movzx  ebx,bx
c001061a:	01 db                	add    ebx,ebx
c001061c:	01 fb                	add    ebx,edi
c001061e:	e9 c0 00 00 00       	jmp    c00106e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010623:	3c 08                	cmp    al,0x8
c0010625:	75 4e                	jne    c0010675 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010627:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001062b:	53                   	push   ebx
c001062c:	53                   	push   ebx
c001062d:	6a 01                	push   0x1
c001062f:	55                   	push   ebp
c0010630:	e8 df fc ff ff       	call   c0010314 <VgaText::decrementCursor(bool)>
c0010635:	58                   	pop    eax
c0010636:	5a                   	pop    edx
c0010637:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c001063d:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010643:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010649:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c001064f:	6a 20                	push   0x20
c0010651:	55                   	push   ebp
c0010652:	e8 3b f9 ff ff       	call   c000ff92 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010657:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001065f:	83 c4 20             	add    esp,0x20
c0010662:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010668:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001066c:	0f b7 db             	movzx  ebx,bx
c001066f:	01 db                	add    ebx,ebx
c0010671:	01 fb                	add    ebx,edi
c0010673:	eb 6e                	jmp    c00106e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010675:	51                   	push   ecx
c0010676:	51                   	push   ecx
c0010677:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001067b:	50                   	push   eax
c001067c:	e8 ff f8 ff ff       	call   c000ff80 <VgaText::combineCharAndColour(char, unsigned char)>
c0010681:	83 c4 10             	add    esp,0x10
c0010684:	66 89 03             	mov    WORD PTR [ebx],ax
c0010687:	39 2d c4 a4 02 c0    	cmp    DWORD PTR ds:0xc002a4c4,ebp
c001068d:	75 2a                	jne    c00106b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c001068f:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010695:	85 c0                	test   eax,eax
c0010697:	74 20                	je     c00106b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010699:	52                   	push   edx
c001069a:	52                   	push   edx
c001069b:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c00106a1:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c00106a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00106ab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00106af:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c00106b2:	51                   	push   ecx
c00106b3:	55                   	push   ebp
c00106b4:	ff d0                	call   eax
c00106b6:	83 c4 20             	add    esp,0x20
c00106b9:	83 c3 02             	add    ebx,0x2
c00106bc:	50                   	push   eax
c00106bd:	50                   	push   eax
c00106be:	6a 00                	push   0x0
c00106c0:	55                   	push   ebp
c00106c1:	e8 9a f9 ff ff       	call   c0010060 <VgaText::incrementCursor(bool)>
c00106c6:	83 c4 10             	add    esp,0x10
c00106c9:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c00106d0:	75 0f                	jne    c00106e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c00106d2:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00106da:	0f b7 db             	movzx  ebx,bx
c00106dd:	01 db                	add    ebx,ebx
c00106df:	01 fb                	add    ebx,edi
c00106e1:	b1 01                	mov    cl,0x1
c00106e3:	46                   	inc    esi
c00106e4:	e9 bd fe ff ff       	jmp    c00105a6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c00106e9:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00106ed:	83 ec 0c             	sub    esp,0xc
c00106f0:	55                   	push   ebp
c00106f1:	e8 a8 f6 ff ff       	call   c000fd9e <VgaText::updateCursor()>
c00106f6:	83 c4 10             	add    esp,0x10
c00106f9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00106fd:	84 c9                	test   cl,cl
c00106ff:	74 0c                	je     c001070d <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010701:	83 ec 0c             	sub    esp,0xc
c0010704:	55                   	push   ebp
c0010705:	e8 40 fe ff ff       	call   c001054a <VgaText::doUpdate()>
c001070a:	83 c4 10             	add    esp,0x10
c001070d:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010714:	83 c4 1c             	add    esp,0x1c
c0010717:	5b                   	pop    ebx
c0010718:	5e                   	pop    esi
c0010719:	5f                   	pop    edi
c001071a:	5d                   	pop    ebp
c001071b:	c3                   	ret    

c001071c <VgaText::clearScreen()>:
c001071c:	57                   	push   edi
c001071d:	56                   	push   esi
c001071e:	31 f6                	xor    esi,esi
c0010720:	53                   	push   ebx
c0010721:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010725:	52                   	push   edx
c0010726:	6a 00                	push   0x0
c0010728:	6a 00                	push   0x0
c001072a:	53                   	push   ebx
c001072b:	e8 da f8 ff ff       	call   c001000a <VgaText::setCursor(int, int)>
c0010730:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010737:	83 c4 10             	add    esp,0x10
c001073a:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010740:	7e 26                	jle    c0010768 <VgaText::clearScreen()+0x4c>
c0010742:	31 ff                	xor    edi,edi
c0010744:	50                   	push   eax
c0010745:	50                   	push   eax
c0010746:	56                   	push   esi
c0010747:	57                   	push   edi
c0010748:	47                   	inc    edi
c0010749:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001074f:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010755:	6a 20                	push   0x20
c0010757:	53                   	push   ebx
c0010758:	e8 35 f8 ff ff       	call   c000ff92 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001075d:	83 c4 20             	add    esp,0x20
c0010760:	83 ff 50             	cmp    edi,0x50
c0010763:	75 df                	jne    c0010744 <VgaText::clearScreen()+0x28>
c0010765:	46                   	inc    esi
c0010766:	eb d2                	jmp    c001073a <VgaText::clearScreen()+0x1e>
c0010768:	83 ec 0c             	sub    esp,0xc
c001076b:	53                   	push   ebx
c001076c:	e8 d9 fd ff ff       	call   c001054a <VgaText::doUpdate()>
c0010771:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010778:	83 c4 10             	add    esp,0x10
c001077b:	5b                   	pop    ebx
c001077c:	5e                   	pop    esi
c001077d:	5f                   	pop    edi
c001077e:	c3                   	ret    
c001077f:	90                   	nop

c0010780 <VgaText::putchar(char)>:
c0010780:	56                   	push   esi
c0010781:	53                   	push   ebx
c0010782:	83 ec 14             	sub    esp,0x14
c0010785:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010789:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001078d:	3c 5b                	cmp    al,0x5b
c001078f:	75 21                	jne    c00107b2 <VgaText::putchar(char)+0x32>
c0010791:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010798:	74 28                	je     c00107c2 <VgaText::putchar(char)+0x42>
c001079a:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c00107a3:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c00107ad:	e9 e2 00 00 00       	jmp    c0010894 <VgaText::putchar(char)+0x114>
c00107b2:	3c 1b                	cmp    al,0x1b
c00107b4:	75 0c                	jne    c00107c2 <VgaText::putchar(char)+0x42>
c00107b6:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c00107bd:	e9 d2 00 00 00       	jmp    c0010894 <VgaText::putchar(char)+0x114>
c00107c2:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00107c8:	84 c9                	test   cl,cl
c00107ca:	0f 84 ab 00 00 00    	je     c001087b <VgaText::putchar(char)+0xfb>
c00107d0:	8d 50 c0             	lea    edx,[eax-0x40]
c00107d3:	80 fa 3e             	cmp    dl,0x3e
c00107d6:	0f 87 82 00 00 00    	ja     c001085e <VgaText::putchar(char)+0xde>
c00107dc:	3c 6d                	cmp    al,0x6d
c00107de:	75 4d                	jne    c001082d <VgaText::putchar(char)+0xad>
c00107e0:	31 f6                	xor    esi,esi
c00107e2:	31 d2                	xor    edx,edx
c00107e4:	31 c0                	xor    eax,eax
c00107e6:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00107ec:	7e 30                	jle    c001081e <VgaText::putchar(char)+0x9e>
c00107ee:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00107f6:	80 fa 3b             	cmp    dl,0x3b
c00107f9:	75 17                	jne    c0010812 <VgaText::putchar(char)+0x92>
c00107fb:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00107ff:	50                   	push   eax
c0010800:	53                   	push   ebx
c0010801:	e8 fc f5 ff ff       	call   c000fe02 <VgaText::doANSI_SGR(int)>
c0010806:	59                   	pop    ecx
c0010807:	31 d2                	xor    edx,edx
c0010809:	58                   	pop    eax
c001080a:	31 c0                	xor    eax,eax
c001080c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010810:	eb 09                	jmp    c001081b <VgaText::putchar(char)+0x9b>
c0010812:	6b c0 0a             	imul   eax,eax,0xa
c0010815:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010819:	88 ca                	mov    dl,cl
c001081b:	46                   	inc    esi
c001081c:	eb c8                	jmp    c00107e6 <VgaText::putchar(char)+0x66>
c001081e:	84 d2                	test   dl,dl
c0010820:	74 31                	je     c0010853 <VgaText::putchar(char)+0xd3>
c0010822:	50                   	push   eax
c0010823:	53                   	push   ebx
c0010824:	e8 d9 f5 ff ff       	call   c000fe02 <VgaText::doANSI_SGR(int)>
c0010829:	58                   	pop    eax
c001082a:	5a                   	pop    edx
c001082b:	eb 26                	jmp    c0010853 <VgaText::putchar(char)+0xd3>
c001082d:	3c 4a                	cmp    al,0x4a
c001082f:	75 22                	jne    c0010853 <VgaText::putchar(char)+0xd3>
c0010831:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010838:	75 19                	jne    c0010853 <VgaText::putchar(char)+0xd3>
c001083a:	83 ec 0c             	sub    esp,0xc
c001083d:	53                   	push   ebx
c001083e:	e8 d9 fe ff ff       	call   c001071c <VgaText::clearScreen()>
c0010843:	83 c4 0c             	add    esp,0xc
c0010846:	6a 00                	push   0x0
c0010848:	6a 00                	push   0x0
c001084a:	53                   	push   ebx
c001084b:	e8 ba f7 ff ff       	call   c001000a <VgaText::setCursor(int, int)>
c0010850:	83 c4 10             	add    esp,0x10
c0010853:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c001085c:	eb 36                	jmp    c0010894 <VgaText::putchar(char)+0x114>
c001085e:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010864:	83 fa 0e             	cmp    edx,0xe
c0010867:	7f 2b                	jg     c0010894 <VgaText::putchar(char)+0x114>
c0010869:	8d 4a 01             	lea    ecx,[edx+0x1]
c001086c:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010872:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010879:	eb 19                	jmp    c0010894 <VgaText::putchar(char)+0x114>
c001087b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010881:	0f be c0             	movsx  eax,al
c0010884:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001088a:	50                   	push   eax
c001088b:	53                   	push   ebx
c001088c:	e8 ab fa ff ff       	call   c001033c <VgaText::putchar(char, VgaColour, VgaColour)>
c0010891:	83 c4 10             	add    esp,0x10
c0010894:	83 c4 14             	add    esp,0x14
c0010897:	5b                   	pop    ebx
c0010898:	5e                   	pop    esi
c0010899:	c3                   	ret    

c001089a <VgaText::puts(char const*)>:
c001089a:	53                   	push   ebx
c001089b:	83 ec 08             	sub    esp,0x8
c001089e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00108a2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00108a5:	84 c0                	test   al,al
c00108a7:	74 12                	je     c00108bb <VgaText::puts(char const*)+0x21>
c00108a9:	43                   	inc    ebx
c00108aa:	51                   	push   ecx
c00108ab:	51                   	push   ecx
c00108ac:	50                   	push   eax
c00108ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108b1:	e8 ca fe ff ff       	call   c0010780 <VgaText::putchar(char)>
c00108b6:	83 c4 10             	add    esp,0x10
c00108b9:	eb e7                	jmp    c00108a2 <VgaText::puts(char const*)+0x8>
c00108bb:	83 c4 08             	add    esp,0x8
c00108be:	5b                   	pop    ebx
c00108bf:	c3                   	ret    

c00108c0 <VgaText::putx(unsigned int)>:
c00108c0:	57                   	push   edi
c00108c1:	b9 11 00 00 00       	mov    ecx,0x11
c00108c6:	56                   	push   esi
c00108c7:	be ce 6c 02 c0       	mov    esi,0xc0026cce
c00108cc:	53                   	push   ebx
c00108cd:	83 ec 20             	sub    esp,0x20
c00108d0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00108d4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00108d8:	fc                   	cld    
c00108d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00108db:	be 08 00 00 00       	mov    esi,0x8
c00108e0:	50                   	push   eax
c00108e1:	50                   	push   eax
c00108e2:	89 d8                	mov    eax,ebx
c00108e4:	c1 e3 04             	shl    ebx,0x4
c00108e7:	c1 e8 1c             	shr    eax,0x1c
c00108ea:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00108ef:	50                   	push   eax
c00108f0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00108f4:	e8 87 fe ff ff       	call   c0010780 <VgaText::putchar(char)>
c00108f9:	83 c4 10             	add    esp,0x10
c00108fc:	4e                   	dec    esi
c00108fd:	75 e1                	jne    c00108e0 <VgaText::putx(unsigned int)+0x20>
c00108ff:	83 c4 20             	add    esp,0x20
c0010902:	5b                   	pop    ebx
c0010903:	5e                   	pop    esi
c0010904:	5f                   	pop    edi
c0010905:	c3                   	ret    

c0010906 <VgaText::VgaText(char const*)>:
c0010906:	57                   	push   edi
c0010907:	56                   	push   esi
c0010908:	53                   	push   ebx
c0010909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001090d:	83 ec 08             	sub    esp,0x8
c0010910:	6a 00                	push   0x0
c0010912:	50                   	push   eax
c0010913:	e8 62 05 00 00       	call   c0010e7a <UnixFile::UnixFile(int)>
c0010918:	83 c4 10             	add    esp,0x10
c001091b:	ba 34 6d 02 c0       	mov    edx,0xc0026d34
c0010920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010924:	89 10                	mov    DWORD PTR [eax],edx
c0010926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001092a:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010938:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010946:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c001094d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010951:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001095c:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001096a:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010978:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c001097f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010983:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c001098a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001098e:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010994:	bb a0 a4 02 c0       	mov    ebx,0xc002a4a0
c0010999:	b8 08 00 00 00       	mov    eax,0x8
c001099e:	fc                   	cld    
c001099f:	89 d7                	mov    edi,edx
c00109a1:	89 de                	mov    esi,ebx
c00109a3:	89 c1                	mov    ecx,eax
c00109a5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00109a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ab:	05 1e 10 00 00       	add    eax,0x101e
c00109b0:	83 ec 08             	sub    esp,0x8
c00109b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109b7:	50                   	push   eax
c00109b8:	e8 ae fd fe ff       	call   c000076b <strcpy>
c00109bd:	83 c4 10             	add    esp,0x10
c00109c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c4:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c00109ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109d2:	83 c0 0c             	add    eax,0xc
c00109d5:	83 ec 04             	sub    esp,0x4
c00109d8:	68 00 0f 00 00       	push   0xf00
c00109dd:	6a 00                	push   0x0
c00109df:	50                   	push   eax
c00109e0:	e8 e7 fc fe ff       	call   c00006cc <memset>
c00109e5:	83 c4 10             	add    esp,0x10
c00109e8:	83 ec 04             	sub    esp,0x4
c00109eb:	6a 00                	push   0x0
c00109ed:	6a 07                	push   0x7
c00109ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109f3:	e8 c2 f4 ff ff       	call   c000feba <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00109f8:	83 c4 10             	add    esp,0x10
c00109fb:	83 ec 08             	sub    esp,0x8
c00109fe:	6a 02                	push   0x2
c0010a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a04:	e8 49 fa ff ff       	call   c0010452 <VgaText::setCursorHeight(int)>
c0010a09:	83 c4 10             	add    esp,0x10
c0010a0c:	83 ec 04             	sub    esp,0x4
c0010a0f:	6a 00                	push   0x0
c0010a11:	6a 00                	push   0x0
c0010a13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a17:	e8 ee f5 ff ff       	call   c001000a <VgaText::setCursor(int, int)>
c0010a1c:	83 c4 10             	add    esp,0x10
c0010a1f:	83 ec 08             	sub    esp,0x8
c0010a22:	6a 01                	push   0x1
c0010a24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a28:	e8 8b f3 ff ff       	call   c000fdb8 <VgaText::showCursor(bool)>
c0010a2d:	83 c4 10             	add    esp,0x10
c0010a30:	83 ec 08             	sub    esp,0x8
c0010a33:	6a 01                	push   0x1
c0010a35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a39:	e8 8a f3 ff ff       	call   c000fdc8 <VgaText::disableBlink(bool)>
c0010a3e:	83 c4 10             	add    esp,0x10
c0010a41:	83 ec 0c             	sub    esp,0xc
c0010a44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a48:	e8 cf fc ff ff       	call   c001071c <VgaText::clearScreen()>
c0010a4d:	83 c4 10             	add    esp,0x10
c0010a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a54:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010a5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a5f:	05 9e 10 00 00       	add    eax,0x109e
c0010a64:	83 ec 04             	sub    esp,0x4
c0010a67:	68 96 00 00 00       	push   0x96
c0010a6c:	6a 00                	push   0x0
c0010a6e:	50                   	push   eax
c0010a6f:	e8 58 fc fe ff       	call   c00006cc <memset>
c0010a74:	83 c4 10             	add    esp,0x10
c0010a77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a7b:	05 34 11 00 00       	add    eax,0x1134
c0010a80:	83 ec 04             	sub    esp,0x4
c0010a83:	68 2c 01 00 00       	push   0x12c
c0010a88:	6a 00                	push   0x0
c0010a8a:	50                   	push   eax
c0010a8b:	e8 3c fc fe ff       	call   c00006cc <memset>
c0010a90:	83 c4 10             	add    esp,0x10
c0010a93:	90                   	nop
c0010a94:	5b                   	pop    ebx
c0010a95:	5e                   	pop    esi
c0010a96:	5f                   	pop    edi
c0010a97:	c3                   	ret    

c0010a98 <VgaText::receiveKey(unsigned char)>:
c0010a98:	55                   	push   ebp
c0010a99:	57                   	push   edi
c0010a9a:	56                   	push   esi
c0010a9b:	53                   	push   ebx
c0010a9c:	83 ec 1c             	sub    esp,0x1c
c0010a9f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010aa3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010aa7:	84 db                	test   bl,bl
c0010aa9:	0f 84 c9 00 00 00    	je     c0010b78 <VgaText::receiveKey(unsigned char)+0xe0>
c0010aaf:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010ab5:	80 fb 08             	cmp    bl,0x8
c0010ab8:	75 2c                	jne    c0010ae6 <VgaText::receiveKey(unsigned char)+0x4e>
c0010aba:	83 ec 0c             	sub    esp,0xc
c0010abd:	57                   	push   edi
c0010abe:	e8 26 fc fe ff       	call   c00006e9 <strlen>
c0010ac3:	83 c4 10             	add    esp,0x10
c0010ac6:	85 c0                	test   eax,eax
c0010ac8:	74 41                	je     c0010b0b <VgaText::receiveKey(unsigned char)+0x73>
c0010aca:	50                   	push   eax
c0010acb:	50                   	push   eax
c0010acc:	6a 08                	push   0x8
c0010ace:	56                   	push   esi
c0010acf:	e8 ac fc ff ff       	call   c0010780 <VgaText::putchar(char)>
c0010ad4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ad7:	e8 0d fc fe ff       	call   c00006e9 <strlen>
c0010adc:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010ae4:	eb 22                	jmp    c0010b08 <VgaText::receiveKey(unsigned char)+0x70>
c0010ae6:	0f be c3             	movsx  eax,bl
c0010ae9:	52                   	push   edx
c0010aea:	52                   	push   edx
c0010aeb:	50                   	push   eax
c0010aec:	56                   	push   esi
c0010aed:	e8 8e fc ff ff       	call   c0010780 <VgaText::putchar(char)>
c0010af2:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010af6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010afb:	59                   	pop    ecx
c0010afc:	5d                   	pop    ebp
c0010afd:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010b01:	50                   	push   eax
c0010b02:	57                   	push   edi
c0010b03:	e8 1a fd fe ff       	call   c0000822 <strcat>
c0010b08:	83 c4 10             	add    esp,0x10
c0010b0b:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010b12:	75 05                	jne    c0010b19 <VgaText::receiveKey(unsigned char)+0x81>
c0010b14:	80 fb 0a             	cmp    bl,0xa
c0010b17:	75 53                	jne    c0010b6c <VgaText::receiveKey(unsigned char)+0xd4>
c0010b19:	83 ec 0c             	sub    esp,0xc
c0010b1c:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010b22:	53                   	push   ebx
c0010b23:	e8 c1 fb fe ff       	call   c00006e9 <strlen>
c0010b28:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010b2b:	89 c5                	mov    ebp,eax
c0010b2d:	e8 b7 fb fe ff       	call   c00006e9 <strlen>
c0010b32:	83 c4 10             	add    esp,0x10
c0010b35:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010b39:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010b3e:	76 10                	jbe    c0010b50 <VgaText::receiveKey(unsigned char)+0xb8>
c0010b40:	83 ec 0c             	sub    esp,0xc
c0010b43:	68 df 6c 02 c0       	push   0xc0026cdf
c0010b48:	e8 a0 7e 00 00       	call   c00189ed <Krnl::panic(char const*)>
c0010b4d:	83 c4 10             	add    esp,0x10
c0010b50:	50                   	push   eax
c0010b51:	50                   	push   eax
c0010b52:	57                   	push   edi
c0010b53:	53                   	push   ebx
c0010b54:	e8 c9 fc fe ff       	call   c0000822 <strcat>
c0010b59:	83 c4 0c             	add    esp,0xc
c0010b5c:	68 96 00 00 00       	push   0x96
c0010b61:	6a 00                	push   0x0
c0010b63:	57                   	push   edi
c0010b64:	e8 63 fb fe ff       	call   c00006cc <memset>
c0010b69:	83 c4 10             	add    esp,0x10
c0010b6c:	83 ec 0c             	sub    esp,0xc
c0010b6f:	56                   	push   esi
c0010b70:	e8 d5 f9 ff ff       	call   c001054a <VgaText::doUpdate()>
c0010b75:	83 c4 10             	add    esp,0x10
c0010b78:	83 c4 1c             	add    esp,0x1c
c0010b7b:	5b                   	pop    ebx
c0010b7c:	5e                   	pop    esi
c0010b7d:	5f                   	pop    edi
c0010b7e:	5d                   	pop    ebp
c0010b7f:	c3                   	ret    

c0010b80 <VgaText::write(unsigned long long, void*, int*)>:
c0010b80:	55                   	push   ebp
c0010b81:	57                   	push   edi
c0010b82:	56                   	push   esi
c0010b83:	53                   	push   ebx
c0010b84:	83 ec 0c             	sub    esp,0xc
c0010b87:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010b8b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010b8f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010b93:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010b9a:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010b9d:	39 eb                	cmp    ebx,ebp
c0010b9f:	74 13                	je     c0010bb4 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010ba1:	43                   	inc    ebx
c0010ba2:	50                   	push   eax
c0010ba3:	50                   	push   eax
c0010ba4:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010ba8:	50                   	push   eax
c0010ba9:	56                   	push   esi
c0010baa:	e8 d1 fb ff ff       	call   c0010780 <VgaText::putchar(char)>
c0010baf:	83 c4 10             	add    esp,0x10
c0010bb2:	eb e9                	jmp    c0010b9d <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010bb4:	83 ec 0c             	sub    esp,0xc
c0010bb7:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010bbe:	56                   	push   esi
c0010bbf:	e8 86 f9 ff ff       	call   c001054a <VgaText::doUpdate()>
c0010bc4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010bc8:	89 38                	mov    DWORD PTR [eax],edi
c0010bca:	83 c4 1c             	add    esp,0x1c
c0010bcd:	31 c0                	xor    eax,eax
c0010bcf:	5b                   	pop    ebx
c0010bd0:	5e                   	pop    esi
c0010bd1:	5f                   	pop    edi
c0010bd2:	5d                   	pop    ebp
c0010bd3:	c3                   	ret    

c0010bd4 <newTerminal(char*)>:
c0010bd4:	83 ec 28             	sub    esp,0x28
c0010bd7:	68 60 12 00 00       	push   0x1260
c0010bdc:	e8 7f 15 00 00       	call   c0012160 <operator new(unsigned long)>
c0010be1:	5a                   	pop    edx
c0010be2:	59                   	pop    ecx
c0010be3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010be7:	50                   	push   eax
c0010be8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010bec:	e8 15 fd ff ff       	call   c0010906 <VgaText::VgaText(char const*)>
c0010bf1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010bf5:	83 c4 2c             	add    esp,0x2c
c0010bf8:	c3                   	ret    
c0010bf9:	90                   	nop

c0010bfa <TSS::TSS()>:
c0010bfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bfe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c05:	90                   	nop
c0010c06:	c3                   	ret    
c0010c07:	90                   	nop

c0010c08 <TSS::setESP(unsigned long)>:
c0010c08:	55                   	push   ebp
c0010c09:	89 e5                	mov    ebp,esp
c0010c0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c11:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c14:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c17:	90                   	nop
c0010c18:	5d                   	pop    ebp
c0010c19:	c3                   	ret    

c0010c1a <TSS::flush()>:
c0010c1a:	55                   	push   ebp
c0010c1b:	89 e5                	mov    ebp,esp
c0010c1d:	83 ec 10             	sub    esp,0x10
c0010c20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c23:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c25:	83 c8 03             	or     eax,0x3
c0010c28:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010c2c:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010c30:	66 89 d0             	mov    ax,dx
c0010c33:	0f 00 d8             	ltr    ax
c0010c36:	90                   	nop
c0010c37:	c9                   	leave  
c0010c38:	c3                   	ret    
c0010c39:	90                   	nop

c0010c3a <TSS::setup(unsigned long, unsigned long)>:
c0010c3a:	55                   	push   ebp
c0010c3b:	89 e5                	mov    ebp,esp
c0010c3d:	53                   	push   ebx
c0010c3e:	83 ec 14             	sub    esp,0x14
c0010c41:	83 ec 0c             	sub    esp,0xc
c0010c44:	6a 68                	push   0x68
c0010c46:	e8 fb e4 ff ff       	call   c000f146 <malloc>
c0010c4b:	83 c4 10             	add    esp,0x10
c0010c4e:	89 c2                	mov    edx,eax
c0010c50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c53:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c59:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c5c:	83 ec 04             	sub    esp,0x4
c0010c5f:	6a 68                	push   0x68
c0010c61:	6a 00                	push   0x0
c0010c63:	50                   	push   eax
c0010c64:	e8 63 fa fe ff       	call   c00006cc <memset>
c0010c69:	83 c4 10             	add    esp,0x10
c0010c6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c6f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c72:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010c78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c7e:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010c84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c8a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c8d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010c90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c93:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c96:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010c9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c9f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ca2:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010ca8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cae:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010cb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cb7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cba:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010cc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cc3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cc6:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010ccc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ccf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cd2:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010cd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cdb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cde:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010ce1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010ce4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ce7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cea:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010ced:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010cf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cf3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cf6:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010cfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d00:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c0010d03:	e8 6d 43 01 00       	call   c0025075 <CPU::readCR3()>
c0010d08:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0010d0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d11:	83 ec 08             	sub    esp,0x8
c0010d14:	50                   	push   eax
c0010d15:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010d18:	50                   	push   eax
c0010d19:	e8 fe db ff ff       	call   c000e91c <GDTEntry::setBase(unsigned int)>
c0010d1e:	83 c4 10             	add    esp,0x10
c0010d21:	83 ec 08             	sub    esp,0x8
c0010d24:	6a 68                	push   0x68
c0010d26:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010d29:	50                   	push   eax
c0010d2a:	e8 09 dc ff ff       	call   c000e938 <GDTEntry::setLimit(unsigned int)>
c0010d2f:	83 c4 10             	add    esp,0x10
c0010d32:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c0010d36:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010d39:	83 e0 0f             	and    eax,0xf
c0010d3c:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010d3f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010d42:	83 c8 40             	or     eax,0x40
c0010d45:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010d48:	e8 1d 6b 00 00       	call   c001786a <CPU::current()>
c0010d4d:	05 78 01 00 00       	add    eax,0x178
c0010d52:	83 ec 04             	sub    esp,0x4
c0010d55:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0010d58:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010d5b:	50                   	push   eax
c0010d5c:	e8 0b dc ff ff       	call   c000e96c <GDT::addEntry(GDTEntry)>
c0010d61:	83 c4 10             	add    esp,0x10
c0010d64:	89 c2                	mov    edx,eax
c0010d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d69:	89 10                	mov    DWORD PTR [eax],edx
c0010d6b:	e8 fa 6a 00 00       	call   c001786a <CPU::current()>
c0010d70:	05 78 01 00 00       	add    eax,0x178
c0010d75:	83 ec 0c             	sub    esp,0xc
c0010d78:	50                   	push   eax
c0010d79:	e8 32 dc ff ff       	call   c000e9b0 <GDT::flush()>
c0010d7e:	83 c4 10             	add    esp,0x10
c0010d81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d84:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d86:	83 ec 08             	sub    esp,0x8
c0010d89:	50                   	push   eax
c0010d8a:	68 48 6d 02 c0       	push   0xc0026d48
c0010d8f:	e8 bb 14 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0010d94:	83 c4 10             	add    esp,0x10
c0010d97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010d9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d9c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010d9f:	c9                   	leave  
c0010da0:	c3                   	ret    
c0010da1:	90                   	nop

c0010da2 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010da2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010da6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010daa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dad:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010db2:	75 08                	jne    c0010dbc <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010db4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010dba:	eb 38                	jmp    c0010df4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010dbc:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010dc1:	75 17                	jne    c0010dda <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010dc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dc8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010dcb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010dd1:	8b 10                	mov    edx,DWORD PTR [eax]
c0010dd3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010dd7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010dda:	89 c1                	mov    ecx,eax
c0010ddc:	83 e1 fd             	and    ecx,0xfffffffd
c0010ddf:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010de5:	74 cd                	je     c0010db4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010de7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010dec:	83 e0 ef             	and    eax,0xffffffef
c0010def:	83 f8 08             	cmp    eax,0x8
c0010df2:	76 c0                	jbe    c0010db4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010df4:	31 c0                	xor    eax,eax
c0010df6:	c3                   	ret    
c0010df7:	90                   	nop

c0010df8 <ReservedFilename::isAtty()>:
c0010df8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dfc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010dff:	31 c0                	xor    eax,eax
c0010e01:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010e07:	74 09                	je     c0010e12 <ReservedFilename::isAtty()+0x1a>
c0010e09:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010e0f:	0f 94 c0             	sete   al
c0010e12:	c3                   	ret    
c0010e13:	90                   	nop

c0010e14 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010e14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e18:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010e1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e1f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010e23:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010e28:	75 08                	jne    c0010e32 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010e2a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010e30:	eb 3d                	jmp    c0010e6f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010e32:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010e37:	75 17                	jne    c0010e50 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010e39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e3e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010e41:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010e47:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010e4d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010e50:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010e55:	75 04                	jne    c0010e5b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010e57:	89 0a                	mov    DWORD PTR [edx],ecx
c0010e59:	eb 14                	jmp    c0010e6f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010e5b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010e60:	74 c8                	je     c0010e2a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e62:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010e67:	83 e0 ef             	and    eax,0xffffffef
c0010e6a:	83 f8 08             	cmp    eax,0x8
c0010e6d:	76 bb                	jbe    c0010e2a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010e6f:	31 c0                	xor    eax,eax
c0010e71:	c3                   	ret    

c0010e72 <UnixFile::getFileDescriptor()>:
c0010e72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e79:	c3                   	ret    

c0010e7a <UnixFile::UnixFile(int)>:
c0010e7a:	53                   	push   ebx
c0010e7b:	83 ec 18             	sub    esp,0x18
c0010e7e:	ba 34 6e 02 c0       	mov    edx,0xc0026e34
c0010e83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e87:	89 10                	mov    DWORD PTR [eax],edx
c0010e89:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c0010e91:	0f 8f 4d 01 00 00    	jg     c0010fe4 <UnixFile::UnixFile(int)+0x16a>
c0010e97:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c0010e9c:	8d 50 01             	lea    edx,[eax+0x1]
c0010e9f:	89 15 20 94 02 c0    	mov    DWORD PTR ds:0xc0029420,edx
c0010ea5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010ea9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010eac:	83 ec 08             	sub    esp,0x8
c0010eaf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010eb3:	68 58 a5 02 c0       	push   0xc002a558
c0010eb8:	e8 2d 42 01 00       	call   c00250ea <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010ebd:	83 c4 10             	add    esp,0x10
c0010ec0:	a0 54 a5 02 c0       	mov    al,ds:0xc002a554
c0010ec5:	83 f0 01             	xor    eax,0x1
c0010ec8:	84 c0                	test   al,al
c0010eca:	0f 84 15 01 00 00    	je     c0010fe5 <UnixFile::UnixFile(int)+0x16b>
c0010ed0:	c6 05 54 a5 02 c0 01 	mov    BYTE PTR ds:0xc002a554,0x1
c0010ed7:	83 ec 0c             	sub    esp,0xc
c0010eda:	6a 0c                	push   0xc
c0010edc:	e8 7f 12 00 00       	call   c0012160 <operator new(unsigned long)>
c0010ee1:	83 c4 10             	add    esp,0x10
c0010ee4:	89 c3                	mov    ebx,eax
c0010ee6:	83 ec 08             	sub    esp,0x8
c0010ee9:	68 03 ff ff 0f       	push   0xfffff03
c0010eee:	53                   	push   ebx
c0010eef:	e8 f6 00 00 00       	call   c0010fea <ReservedFilename::ReservedFilename(int)>
c0010ef4:	83 c4 10             	add    esp,0x10
c0010ef7:	89 1d 4c a5 02 c0    	mov    DWORD PTR ds:0xc002a54c,ebx
c0010efd:	83 ec 0c             	sub    esp,0xc
c0010f00:	6a 0c                	push   0xc
c0010f02:	e8 59 12 00 00       	call   c0012160 <operator new(unsigned long)>
c0010f07:	83 c4 10             	add    esp,0x10
c0010f0a:	89 c3                	mov    ebx,eax
c0010f0c:	83 ec 08             	sub    esp,0x8
c0010f0f:	68 01 ff ff 0f       	push   0xfffff01
c0010f14:	53                   	push   ebx
c0010f15:	e8 d0 00 00 00       	call   c0010fea <ReservedFilename::ReservedFilename(int)>
c0010f1a:	83 c4 10             	add    esp,0x10
c0010f1d:	89 1d 50 a5 02 c0    	mov    DWORD PTR ds:0xc002a550,ebx
c0010f23:	83 ec 0c             	sub    esp,0xc
c0010f26:	6a 0c                	push   0xc
c0010f28:	e8 33 12 00 00       	call   c0012160 <operator new(unsigned long)>
c0010f2d:	83 c4 10             	add    esp,0x10
c0010f30:	89 c3                	mov    ebx,eax
c0010f32:	83 ec 08             	sub    esp,0x8
c0010f35:	68 00 ff ff 0f       	push   0xfffff00
c0010f3a:	53                   	push   ebx
c0010f3b:	e8 aa 00 00 00       	call   c0010fea <ReservedFilename::ReservedFilename(int)>
c0010f40:	83 c4 10             	add    esp,0x10
c0010f43:	89 1d 44 a5 02 c0    	mov    DWORD PTR ds:0xc002a544,ebx
c0010f49:	83 ec 0c             	sub    esp,0xc
c0010f4c:	6a 0c                	push   0xc
c0010f4e:	e8 0d 12 00 00       	call   c0012160 <operator new(unsigned long)>
c0010f53:	83 c4 10             	add    esp,0x10
c0010f56:	89 c3                	mov    ebx,eax
c0010f58:	83 ec 08             	sub    esp,0x8
c0010f5b:	68 02 ff ff 0f       	push   0xfffff02
c0010f60:	53                   	push   ebx
c0010f61:	e8 84 00 00 00       	call   c0010fea <ReservedFilename::ReservedFilename(int)>
c0010f66:	83 c4 10             	add    esp,0x10
c0010f69:	89 1d 48 a5 02 c0    	mov    DWORD PTR ds:0xc002a548,ebx
c0010f6f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f77:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0010f7c:	7f 67                	jg     c0010fe5 <UnixFile::UnixFile(int)+0x16b>
c0010f7e:	83 ec 0c             	sub    esp,0xc
c0010f81:	6a 0c                	push   0xc
c0010f83:	e8 d8 11 00 00       	call   c0012160 <operator new(unsigned long)>
c0010f88:	83 c4 10             	add    esp,0x10
c0010f8b:	89 c3                	mov    ebx,eax
c0010f8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f91:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f96:	83 ec 08             	sub    esp,0x8
c0010f99:	50                   	push   eax
c0010f9a:	53                   	push   ebx
c0010f9b:	e8 4a 00 00 00       	call   c0010fea <ReservedFilename::ReservedFilename(int)>
c0010fa0:	83 c4 10             	add    esp,0x10
c0010fa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fa7:	89 1c 85 20 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ae0],ebx
c0010fae:	83 ec 0c             	sub    esp,0xc
c0010fb1:	6a 0c                	push   0xc
c0010fb3:	e8 a8 11 00 00       	call   c0012160 <operator new(unsigned long)>
c0010fb8:	83 c4 10             	add    esp,0x10
c0010fbb:	89 c3                	mov    ebx,eax
c0010fbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fc1:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010fc6:	83 ec 08             	sub    esp,0x8
c0010fc9:	50                   	push   eax
c0010fca:	53                   	push   ebx
c0010fcb:	e8 1a 00 00 00       	call   c0010fea <ReservedFilename::ReservedFilename(int)>
c0010fd0:	83 c4 10             	add    esp,0x10
c0010fd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fd7:	89 1c 85 e0 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5b20],ebx
c0010fde:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010fe2:	eb 93                	jmp    c0010f77 <UnixFile::UnixFile(int)+0xfd>
c0010fe4:	90                   	nop
c0010fe5:	83 c4 18             	add    esp,0x18
c0010fe8:	5b                   	pop    ebx
c0010fe9:	c3                   	ret    

c0010fea <ReservedFilename::ReservedFilename(int)>:
c0010fea:	83 ec 0c             	sub    esp,0xc
c0010fed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ff1:	83 ec 08             	sub    esp,0x8
c0010ff4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ff8:	50                   	push   eax
c0010ff9:	e8 7c fe ff ff       	call   c0010e7a <UnixFile::UnixFile(int)>
c0010ffe:	83 c4 10             	add    esp,0x10
c0011001:	ba 50 6e 02 c0       	mov    edx,0xc0026e50
c0011006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001100a:	89 10                	mov    DWORD PTR [eax],edx
c001100c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011010:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011014:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011017:	90                   	nop
c0011018:	83 c4 0c             	add    esp,0xc
c001101b:	c3                   	ret    

c001101c <UnixFile::~UnixFile()>:
c001101c:	83 ec 1c             	sub    esp,0x1c
c001101f:	ba 34 6e 02 c0       	mov    edx,0xc0026e34
c0011024:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011028:	89 10                	mov    DWORD PTR [eax],edx
c001102a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001102e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011031:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011036:	7f 73                	jg     c00110ab <UnixFile::~UnixFile()+0x8f>
c0011038:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011040:	83 ec 0c             	sub    esp,0xc
c0011043:	68 58 a5 02 c0       	push   0xc002a558
c0011048:	e8 71 41 01 00       	call   c00251be <LinkedList<UnixFile>::getFirstElement()>
c001104d:	83 c4 10             	add    esp,0x10
c0011050:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011054:	83 ec 0c             	sub    esp,0xc
c0011057:	68 58 a5 02 c0       	push   0xc002a558
c001105c:	e8 65 41 01 00       	call   c00251c6 <LinkedList<UnixFile>::removeFirst()>
c0011061:	83 c4 10             	add    esp,0x10
c0011064:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011068:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001106c:	74 40                	je     c00110ae <UnixFile::~UnixFile()+0x92>
c001106e:	83 ec 08             	sub    esp,0x8
c0011071:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011075:	68 58 a5 02 c0       	push   0xc002a558
c001107a:	e8 6b 40 01 00       	call   c00250ea <LinkedList<UnixFile>::addElement(UnixFile*)>
c001107f:	83 c4 10             	add    esp,0x10
c0011082:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011086:	8d 50 01             	lea    edx,[eax+0x1]
c0011089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001108d:	3d 88 13 00 00       	cmp    eax,0x1388
c0011092:	0f 94 c0             	sete   al
c0011095:	84 c0                	test   al,al
c0011097:	74 a7                	je     c0011040 <UnixFile::~UnixFile()+0x24>
c0011099:	83 ec 0c             	sub    esp,0xc
c001109c:	68 0c 6e 02 c0       	push   0xc0026e0c
c00110a1:	e8 47 79 00 00       	call   c00189ed <Krnl::panic(char const*)>
c00110a6:	83 c4 10             	add    esp,0x10
c00110a9:	eb 95                	jmp    c0011040 <UnixFile::~UnixFile()+0x24>
c00110ab:	90                   	nop
c00110ac:	eb 01                	jmp    c00110af <UnixFile::~UnixFile()+0x93>
c00110ae:	90                   	nop
c00110af:	90                   	nop
c00110b0:	83 c4 1c             	add    esp,0x1c
c00110b3:	c3                   	ret    

c00110b4 <UnixFile::~UnixFile()>:
c00110b4:	83 ec 0c             	sub    esp,0xc
c00110b7:	83 ec 0c             	sub    esp,0xc
c00110ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110be:	e8 59 ff ff ff       	call   c001101c <UnixFile::~UnixFile()>
c00110c3:	83 c4 10             	add    esp,0x10
c00110c6:	83 ec 08             	sub    esp,0x8
c00110c9:	6a 0c                	push   0xc
c00110cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110cf:	e8 9b 10 00 00       	call   c001216f <operator delete(void*, unsigned long)>
c00110d4:	83 c4 10             	add    esp,0x10
c00110d7:	83 c4 0c             	add    esp,0xc
c00110da:	c3                   	ret    
c00110db:	90                   	nop

c00110dc <ReservedFilename::~ReservedFilename()>:
c00110dc:	83 ec 0c             	sub    esp,0xc
c00110df:	ba 50 6e 02 c0       	mov    edx,0xc0026e50
c00110e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110e8:	89 10                	mov    DWORD PTR [eax],edx
c00110ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ee:	83 ec 0c             	sub    esp,0xc
c00110f1:	50                   	push   eax
c00110f2:	e8 25 ff ff ff       	call   c001101c <UnixFile::~UnixFile()>
c00110f7:	83 c4 10             	add    esp,0x10
c00110fa:	90                   	nop
c00110fb:	83 c4 0c             	add    esp,0xc
c00110fe:	c3                   	ret    
c00110ff:	90                   	nop

c0011100 <ReservedFilename::~ReservedFilename()>:
c0011100:	83 ec 0c             	sub    esp,0xc
c0011103:	83 ec 0c             	sub    esp,0xc
c0011106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001110a:	e8 cd ff ff ff       	call   c00110dc <ReservedFilename::~ReservedFilename()>
c001110f:	83 c4 10             	add    esp,0x10
c0011112:	83 ec 08             	sub    esp,0x8
c0011115:	6a 0c                	push   0xc
c0011117:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001111b:	e8 4f 10 00 00       	call   c001216f <operator delete(void*, unsigned long)>
c0011120:	83 c4 10             	add    esp,0x10
c0011123:	83 c4 0c             	add    esp,0xc
c0011126:	c3                   	ret    

c0011127 <getFromFileDescriptor(int)>:
c0011127:	53                   	push   ebx
c0011128:	83 ec 08             	sub    esp,0x8
c001112b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001112f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011135:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001113b:	7f 2c                	jg     c0011169 <getFromFileDescriptor(int)+0x42>
c001113d:	83 ec 0c             	sub    esp,0xc
c0011140:	68 58 a5 02 c0       	push   0xc002a558
c0011145:	e8 74 40 01 00       	call   c00251be <LinkedList<UnixFile>::getFirstElement()>
c001114a:	83 c4 10             	add    esp,0x10
c001114d:	85 c0                	test   eax,eax
c001114f:	75 04                	jne    c0011155 <getFromFileDescriptor(int)+0x2e>
c0011151:	31 c0                	xor    eax,eax
c0011153:	eb 6e                	jmp    c00111c3 <getFromFileDescriptor(int)+0x9c>
c0011155:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011158:	74 69                	je     c00111c3 <getFromFileDescriptor(int)+0x9c>
c001115a:	52                   	push   edx
c001115b:	52                   	push   edx
c001115c:	50                   	push   eax
c001115d:	68 58 a5 02 c0       	push   0xc002a558
c0011162:	e8 01 41 01 00       	call   c0025268 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011167:	eb e1                	jmp    c001114a <getFromFileDescriptor(int)+0x23>
c0011169:	a1 4c a5 02 c0       	mov    eax,ds:0xc002a54c
c001116e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011174:	74 4d                	je     c00111c3 <getFromFileDescriptor(int)+0x9c>
c0011176:	a1 50 a5 02 c0       	mov    eax,ds:0xc002a550
c001117b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011181:	74 40                	je     c00111c3 <getFromFileDescriptor(int)+0x9c>
c0011183:	a1 48 a5 02 c0       	mov    eax,ds:0xc002a548
c0011188:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001118e:	74 33                	je     c00111c3 <getFromFileDescriptor(int)+0x9c>
c0011190:	a1 44 a5 02 c0       	mov    eax,ds:0xc002a544
c0011195:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001119b:	74 26                	je     c00111c3 <getFromFileDescriptor(int)+0x9c>
c001119d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00111a3:	83 f8 08             	cmp    eax,0x8
c00111a6:	77 09                	ja     c00111b1 <getFromFileDescriptor(int)+0x8a>
c00111a8:	8b 04 85 20 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ae0]
c00111af:	eb 12                	jmp    c00111c3 <getFromFileDescriptor(int)+0x9c>
c00111b1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00111b7:	83 fb 08             	cmp    ebx,0x8
c00111ba:	77 95                	ja     c0011151 <getFromFileDescriptor(int)+0x2a>
c00111bc:	8b 04 9d e0 a4 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5b20]
c00111c3:	83 c4 08             	add    esp,0x8
c00111c6:	5b                   	pop    ebx
c00111c7:	c3                   	ret    

c00111c8 <__static_initialization_and_destruction_0(int, int)>:
c00111c8:	83 ec 0c             	sub    esp,0xc
c00111cb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00111d0:	75 34                	jne    c0011206 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111d2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00111da:	75 2a                	jne    c0011206 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00111dc:	83 ec 0c             	sub    esp,0xc
c00111df:	68 58 a5 02 c0       	push   0xc002a558
c00111e4:	e8 a9 3e 01 00       	call   c0025092 <LinkedList<UnixFile>::LinkedList()>
c00111e9:	83 c4 10             	add    esp,0x10
c00111ec:	83 ec 04             	sub    esp,0x4
c00111ef:	68 9c 93 02 c0       	push   0xc002939c
c00111f4:	68 58 a5 02 c0       	push   0xc002a558
c00111f9:	68 90 50 02 c0       	push   0xc0025090
c00111fe:	e8 e8 0e 00 00       	call   c00120eb <__cxa_atexit>
c0011203:	83 c4 10             	add    esp,0x10
c0011206:	90                   	nop
c0011207:	83 c4 0c             	add    esp,0xc
c001120a:	c3                   	ret    

c001120b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001120b:	83 ec 0c             	sub    esp,0xc
c001120e:	83 ec 08             	sub    esp,0x8
c0011211:	68 ff ff 00 00       	push   0xffff
c0011216:	6a 01                	push   0x1
c0011218:	e8 ab ff ff ff       	call   c00111c8 <__static_initialization_and_destruction_0(int, int)>
c001121d:	83 c4 10             	add    esp,0x10
c0011220:	83 c4 0c             	add    esp,0xc
c0011223:	c3                   	ret    

c0011224 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011224:	53                   	push   ebx
c0011225:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011229:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001122d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011233:	89 c8                	mov    eax,ecx
c0011235:	d1 e8                	shr    eax,1
c0011237:	03 05 28 94 02 c0    	add    eax,DWORD PTR ds:0xc0029428
c001123d:	83 e1 01             	and    ecx,0x1
c0011240:	8a 10                	mov    dl,BYTE PTR [eax]
c0011242:	75 09                	jne    c001124d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011244:	83 e2 f0             	and    edx,0xfffffff0
c0011247:	09 da                	or     edx,ebx
c0011249:	88 10                	mov    BYTE PTR [eax],dl
c001124b:	5b                   	pop    ebx
c001124c:	c3                   	ret    
c001124d:	c1 e3 04             	shl    ebx,0x4
c0011250:	83 e2 0f             	and    edx,0xf
c0011253:	09 da                	or     edx,ebx
c0011255:	88 10                	mov    BYTE PTR [eax],dl
c0011257:	5b                   	pop    ebx
c0011258:	c3                   	ret    

c0011259 <Virt::getPageState(unsigned long)>:
c0011259:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001125d:	8b 0d 28 94 02 c0    	mov    ecx,DWORD PTR ds:0xc0029428
c0011263:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011269:	89 d0                	mov    eax,edx
c001126b:	d1 e8                	shr    eax,1
c001126d:	83 e2 01             	and    edx,0x1
c0011270:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011273:	75 04                	jne    c0011279 <Virt::getPageState(unsigned long)+0x20>
c0011275:	83 e0 0f             	and    eax,0xf
c0011278:	c3                   	ret    
c0011279:	c0 e8 04             	shr    al,0x4
c001127c:	c3                   	ret    

c001127d <Virt::allocateKernelVirtualPages(int)>:
c001127d:	55                   	push   ebp
c001127e:	31 ed                	xor    ebp,ebp
c0011280:	57                   	push   edi
c0011281:	56                   	push   esi
c0011282:	53                   	push   ebx
c0011283:	31 db                	xor    ebx,ebx
c0011285:	83 ec 1c             	sub    esp,0x1c
c0011288:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001128c:	8b 3d 24 94 02 c0    	mov    edi,DWORD PTR ds:0xc0029424
c0011292:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011297:	57                   	push   edi
c0011298:	e8 bc ff ff ff       	call   c0011259 <Virt::getPageState(unsigned long)>
c001129d:	5a                   	pop    edx
c001129e:	84 c0                	test   al,al
c00112a0:	75 3a                	jne    c00112dc <Virt::allocateKernelVirtualPages(int)+0x5f>
c00112a2:	85 db                	test   ebx,ebx
c00112a4:	75 02                	jne    c00112a8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00112a6:	89 fd                	mov    ebp,edi
c00112a8:	43                   	inc    ebx
c00112a9:	39 f3                	cmp    ebx,esi
c00112ab:	74 5a                	je     c0011307 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00112ad:	47                   	inc    edi
c00112ae:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112b4:	76 31                	jbe    c00112e7 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00112b6:	c7 05 24 94 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0029424,0xc8000
c00112c0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00112c5:	75 28                	jne    c00112ef <Virt::allocateKernelVirtualPages(int)+0x72>
c00112c7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00112cc:	bf 00 80 0c 00       	mov    edi,0xc8000
c00112d1:	57                   	push   edi
c00112d2:	e8 82 ff ff ff       	call   c0011259 <Virt::getPageState(unsigned long)>
c00112d7:	5a                   	pop    edx
c00112d8:	84 c0                	test   al,al
c00112da:	74 c6                	je     c00112a2 <Virt::allocateKernelVirtualPages(int)+0x25>
c00112dc:	31 db                	xor    ebx,ebx
c00112de:	47                   	inc    edi
c00112df:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00112e5:	77 cf                	ja     c00112b6 <Virt::allocateKernelVirtualPages(int)+0x39>
c00112e7:	89 3d 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,edi
c00112ed:	eb a8                	jmp    c0011297 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00112ef:	83 ec 0c             	sub    esp,0xc
c00112f2:	68 64 6e 02 c0       	push   0xc0026e64
c00112f7:	e8 f1 76 00 00       	call   c00189ed <Krnl::panic(char const*)>
c00112fc:	8b 3d 24 94 02 c0    	mov    edi,DWORD PTR ds:0xc0029424
c0011302:	83 c4 10             	add    esp,0x10
c0011305:	eb 90                	jmp    c0011297 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011307:	89 2d 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,ebp
c001130d:	4b                   	dec    ebx
c001130e:	74 5f                	je     c001136f <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011310:	85 f6                	test   esi,esi
c0011312:	74 3d                	je     c0011351 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011314:	89 e8                	mov    eax,ebp
c0011316:	31 db                	xor    ebx,ebx
c0011318:	8d 7e ff             	lea    edi,[esi-0x1]
c001131b:	eb 14                	jmp    c0011331 <Virt::allocateKernelVirtualPages(int)+0xb4>
c001131d:	6a 01                	push   0x1
c001131f:	43                   	inc    ebx
c0011320:	50                   	push   eax
c0011321:	e8 fe fe ff ff       	call   c0011224 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011326:	58                   	pop    eax
c0011327:	39 f3                	cmp    ebx,esi
c0011329:	5a                   	pop    edx
c001132a:	74 25                	je     c0011351 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001132c:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c0011331:	8d 50 01             	lea    edx,[eax+0x1]
c0011334:	85 db                	test   ebx,ebx
c0011336:	89 15 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,edx
c001133c:	74 20                	je     c001135e <Virt::allocateKernelVirtualPages(int)+0xe1>
c001133e:	39 df                	cmp    edi,ebx
c0011340:	75 db                	jne    c001131d <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011342:	6a 03                	push   0x3
c0011344:	43                   	inc    ebx
c0011345:	50                   	push   eax
c0011346:	e8 d9 fe ff ff       	call   c0011224 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001134b:	59                   	pop    ecx
c001134c:	39 f3                	cmp    ebx,esi
c001134e:	58                   	pop    eax
c001134f:	75 db                	jne    c001132c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011351:	83 c4 1c             	add    esp,0x1c
c0011354:	89 e8                	mov    eax,ebp
c0011356:	5b                   	pop    ebx
c0011357:	c1 e0 0c             	shl    eax,0xc
c001135a:	5e                   	pop    esi
c001135b:	5f                   	pop    edi
c001135c:	5d                   	pop    ebp
c001135d:	c3                   	ret    
c001135e:	6a 02                	push   0x2
c0011360:	bb 01 00 00 00       	mov    ebx,0x1
c0011365:	50                   	push   eax
c0011366:	e8 b9 fe ff ff       	call   c0011224 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001136b:	58                   	pop    eax
c001136c:	5a                   	pop    edx
c001136d:	eb bd                	jmp    c001132c <Virt::allocateKernelVirtualPages(int)+0xaf>
c001136f:	6a 04                	push   0x4
c0011371:	8d 45 01             	lea    eax,[ebp+0x1]
c0011374:	55                   	push   ebp
c0011375:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c001137a:	e8 a5 fe ff ff       	call   c0011224 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001137f:	59                   	pop    ecx
c0011380:	89 e8                	mov    eax,ebp
c0011382:	5b                   	pop    ebx
c0011383:	c1 e0 0c             	shl    eax,0xc
c0011386:	83 c4 1c             	add    esp,0x1c
c0011389:	5b                   	pop    ebx
c001138a:	5e                   	pop    esi
c001138b:	5f                   	pop    edi
c001138c:	5d                   	pop    ebp
c001138d:	c3                   	ret    

c001138e <Virt::virtualMemorySetup()>:
c001138e:	53                   	push   ebx
c001138f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011394:	83 ec 08             	sub    esp,0x8
c0011397:	6a 0f                	push   0xf
c0011399:	53                   	push   ebx
c001139a:	43                   	inc    ebx
c001139b:	e8 84 fe ff ff       	call   c0011224 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113a0:	59                   	pop    ecx
c00113a1:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113a7:	58                   	pop    eax
c00113a8:	75 ed                	jne    c0011397 <Virt::virtualMemorySetup()+0x9>
c00113aa:	83 ec 08             	sub    esp,0x8
c00113ad:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113b2:	68 00 00 00 c8       	push   0xc8000000
c00113b7:	68 eb 6f 02 c0       	push   0xc0026feb
c00113bc:	e8 8e 0e 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00113c1:	58                   	pop    eax
c00113c2:	5a                   	pop    edx
c00113c3:	68 00 f0 ff ef       	push   0xeffff000
c00113c8:	68 ff 6f 02 c0       	push   0xc0026fff
c00113cd:	e8 7d 0e 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00113d2:	83 c4 10             	add    esp,0x10
c00113d5:	83 ec 08             	sub    esp,0x8
c00113d8:	6a 00                	push   0x0
c00113da:	53                   	push   ebx
c00113db:	43                   	inc    ebx
c00113dc:	e8 43 fe ff ff       	call   c0011224 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113e1:	83 c4 10             	add    esp,0x10
c00113e4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113ea:	75 e9                	jne    c00113d5 <Virt::virtualMemorySetup()+0x47>
c00113ec:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00113f1:	83 ec 08             	sub    esp,0x8
c00113f4:	6a 0f                	push   0xf
c00113f6:	53                   	push   ebx
c00113f7:	43                   	inc    ebx
c00113f8:	e8 27 fe ff ff       	call   c0011224 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113fd:	83 c4 10             	add    esp,0x10
c0011400:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011406:	75 e9                	jne    c00113f1 <Virt::virtualMemorySetup()+0x63>
c0011408:	83 c4 08             	add    esp,0x8
c001140b:	5b                   	pop    ebx
c001140c:	c3                   	ret    

c001140d <Virt::getAKernelVAS()>:
c001140d:	a1 64 a5 02 c0       	mov    eax,ds:0xc002a564
c0011412:	c3                   	ret    

c0011413 <Virt::setupPageSwapping(int)>:
c0011413:	57                   	push   edi
c0011414:	56                   	push   esi
c0011415:	53                   	push   ebx
c0011416:	83 ec 1c             	sub    esp,0x1c
c0011419:	68 14 01 00 00       	push   0x114
c001141e:	e8 3d 0d 00 00       	call   c0012160 <operator new(unsigned long)>
c0011423:	83 c4 0c             	add    esp,0xc
c0011426:	89 c6                	mov    esi,eax
c0011428:	ff 35 54 b8 02 c0    	push   DWORD PTR ds:0xc002b854
c001142e:	68 13 70 02 c0       	push   0xc0027013
c0011433:	50                   	push   eax
c0011434:	e8 45 13 00 00       	call   c001277e <File::File(char const*, Process*)>
c0011439:	89 34 24             	mov    DWORD PTR [esp],esi
c001143c:	e8 19 15 00 00       	call   c001295a <File::unlink()>
c0011441:	58                   	pop    eax
c0011442:	5a                   	pop    edx
c0011443:	6a 12                	push   0x12
c0011445:	56                   	push   esi
c0011446:	e8 97 13 00 00       	call   c00127e2 <File::open(FileOpenMode)>
c001144b:	83 c4 10             	add    esp,0x10
c001144e:	85 c0                	test   eax,eax
c0011450:	0f 85 bf 00 00 00    	jne    c0011515 <Virt::setupPageSwapping(int)+0x102>
c0011456:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001145a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011462:	c1 e3 08             	shl    ebx,0x8
c0011465:	83 ec 0c             	sub    esp,0xc
c0011468:	68 00 00 01 00       	push   0x10000
c001146d:	e8 d4 dc ff ff       	call   c000f146 <malloc>
c0011472:	83 c4 0c             	add    esp,0xc
c0011475:	89 c7                	mov    edi,eax
c0011477:	68 00 00 01 00       	push   0x10000
c001147c:	6a 00                	push   0x0
c001147e:	50                   	push   eax
c001147f:	e8 48 f2 fe ff       	call   c00006cc <memset>
c0011484:	83 c4 10             	add    esp,0x10
c0011487:	85 db                	test   ebx,ebx
c0011489:	79 03                	jns    c001148e <Virt::setupPageSwapping(int)+0x7b>
c001148b:	83 c3 0f             	add    ebx,0xf
c001148e:	c1 fb 04             	sar    ebx,0x4
c0011491:	4b                   	dec    ebx
c0011492:	83 fb ff             	cmp    ebx,0xffffffff
c0011495:	74 4b                	je     c00114e2 <Virt::setupPageSwapping(int)+0xcf>
c0011497:	83 ec 0c             	sub    esp,0xc
c001149a:	8b 06                	mov    eax,DWORD PTR [esi]
c001149c:	8d 54 24 18          	lea    edx,[esp+0x18]
c00114a0:	52                   	push   edx
c00114a1:	57                   	push   edi
c00114a2:	6a 00                	push   0x0
c00114a4:	68 00 00 01 00       	push   0x10000
c00114a9:	56                   	push   esi
c00114aa:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00114ad:	83 c4 20             	add    esp,0x20
c00114b0:	85 c0                	test   eax,eax
c00114b2:	75 4e                	jne    c0011502 <Virt::setupPageSwapping(int)+0xef>
c00114b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114b8:	3d 00 00 01 00       	cmp    eax,0x10000
c00114bd:	74 d2                	je     c0011491 <Virt::setupPageSwapping(int)+0x7e>
c00114bf:	83 ec 08             	sub    esp,0x8
c00114c2:	4b                   	dec    ebx
c00114c3:	50                   	push   eax
c00114c4:	68 66 70 02 c0       	push   0xc0027066
c00114c9:	e8 81 0d 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00114ce:	c7 04 24 6f 70 02 c0 	mov    DWORD PTR [esp],0xc002706f
c00114d5:	e8 13 75 00 00       	call   c00189ed <Krnl::panic(char const*)>
c00114da:	83 c4 10             	add    esp,0x10
c00114dd:	83 fb ff             	cmp    ebx,0xffffffff
c00114e0:	75 b5                	jne    c0011497 <Virt::setupPageSwapping(int)+0x84>
c00114e2:	83 ec 0c             	sub    esp,0xc
c00114e5:	56                   	push   esi
c00114e6:	e8 55 13 00 00       	call   c0012840 <File::close()>
c00114eb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114ee:	e8 73 dc ff ff       	call   c000f166 <rfree>
c00114f3:	89 34 24             	mov    DWORD PTR [esp],esi
c00114f6:	8b 06                	mov    eax,DWORD PTR [esi]
c00114f8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114fb:	83 c4 20             	add    esp,0x20
c00114fe:	5b                   	pop    ebx
c00114ff:	5e                   	pop    esi
c0011500:	5f                   	pop    edi
c0011501:	c3                   	ret    
c0011502:	83 ec 08             	sub    esp,0x8
c0011505:	50                   	push   eax
c0011506:	68 4e 70 02 c0       	push   0xc002704e
c001150b:	e8 3f 0d 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0011510:	83 c4 10             	add    esp,0x10
c0011513:	eb 9f                	jmp    c00114b4 <Virt::setupPageSwapping(int)+0xa1>
c0011515:	83 ec 08             	sub    esp,0x8
c0011518:	50                   	push   eax
c0011519:	68 2a 70 02 c0       	push   0xc002702a
c001151e:	e8 2c 0d 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0011523:	c7 04 24 33 70 02 c0 	mov    DWORD PTR [esp],0xc0027033
c001152a:	e8 be 74 00 00       	call   c00189ed <Krnl::panic(char const*)>
c001152f:	83 c4 10             	add    esp,0x10
c0011532:	e9 1f ff ff ff       	jmp    c0011456 <Virt::setupPageSwapping(int)+0x43>
c0011537:	90                   	nop

c0011538 <VAS::VAS()>:
c0011538:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001153c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011543:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011547:	a3 64 a5 02 c0       	mov    ds:0xc002a564,eax
c001154c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011550:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011554:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011558:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001155b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001155f:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011566:	90                   	nop
c0011567:	c3                   	ret    

c0011568 <VAS::VAS(VAS*)>:
c0011568:	83 ec 0c             	sub    esp,0xc
c001156b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001156f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011576:	83 ec 0c             	sub    esp,0xc
c0011579:	68 84 6e 02 c0       	push   0xc0026e84
c001157e:	e8 6a 74 00 00       	call   c00189ed <Krnl::panic(char const*)>
c0011583:	83 c4 10             	add    esp,0x10
c0011586:	90                   	nop
c0011587:	83 c4 0c             	add    esp,0xc
c001158a:	c3                   	ret    
c001158b:	90                   	nop

c001158c <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001158c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011590:	89 c2                	mov    edx,eax
c0011592:	c1 e8 0a             	shr    eax,0xa
c0011595:	c1 ea 16             	shr    edx,0x16
c0011598:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001159d:	19 c9                	sbb    ecx,ecx
c001159f:	c1 e2 0c             	shl    edx,0xc
c00115a2:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00115a8:	25 fc 0f 00 00       	and    eax,0xffc
c00115ad:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00115b4:	01 d0                	add    eax,edx
c00115b6:	c3                   	ret    
c00115b7:	90                   	nop

c00115b8 <VAS::getPageTableEntry(unsigned long)>:
c00115b8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115bc:	89 ca                	mov    edx,ecx
c00115be:	c1 e9 0a             	shr    ecx,0xa
c00115c1:	c1 ea 16             	shr    edx,0x16
c00115c4:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00115ca:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00115d0:	c1 e0 0c             	shl    eax,0xc
c00115d3:	8d 04 08             	lea    eax,[eax+ecx*1]
c00115d6:	c3                   	ret    

c00115d7 <Virt::freeKernelVirtualPages(unsigned long)>:
c00115d7:	57                   	push   edi
c00115d8:	56                   	push   esi
c00115d9:	be 01 00 00 00       	mov    esi,0x1
c00115de:	53                   	push   ebx
c00115df:	83 ec 10             	sub    esp,0x10
c00115e2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00115e6:	c1 eb 0c             	shr    ebx,0xc
c00115e9:	eb 3f                	jmp    c001162a <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00115eb:	e8 1d fe ff ff       	call   c001140d <Virt::getAKernelVAS()>
c00115f0:	83 ec 08             	sub    esp,0x8
c00115f3:	57                   	push   edi
c00115f4:	50                   	push   eax
c00115f5:	e8 be ff ff ff       	call   c00115b8 <VAS::getPageTableEntry(unsigned long)>
c00115fa:	83 c4 10             	add    esp,0x10
c00115fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00115ff:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011603:	f6 c4 04             	test   ah,0x4
c0011606:	75 5f                	jne    c0011667 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011608:	80 fa 04             	cmp    dl,0x4
c001160b:	74 78                	je     c0011685 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001160d:	80 fa 02             	cmp    dl,0x2
c0011610:	0f 84 88 00 00 00    	je     c001169e <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011616:	80 fa 03             	cmp    dl,0x3
c0011619:	0f 84 ad 00 00 00    	je     c00116cc <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001161f:	fe ca                	dec    dl
c0011621:	0f 84 92 00 00 00    	je     c00116b9 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011627:	43                   	inc    ebx
c0011628:	31 f6                	xor    esi,esi
c001162a:	53                   	push   ebx
c001162b:	e8 29 fc ff ff       	call   c0011259 <Virt::getPageState(unsigned long)>
c0011630:	5f                   	pop    edi
c0011631:	89 df                	mov    edi,ebx
c0011633:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011637:	c1 e7 0c             	shl    edi,0xc
c001163a:	84 c0                	test   al,al
c001163c:	75 ad                	jne    c00115eb <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001163e:	83 ec 0c             	sub    esp,0xc
c0011641:	68 75 70 02 c0       	push   0xc0027075
c0011646:	e8 a2 73 00 00       	call   c00189ed <Krnl::panic(char const*)>
c001164b:	e8 bd fd ff ff       	call   c001140d <Virt::getAKernelVAS()>
c0011650:	5a                   	pop    edx
c0011651:	59                   	pop    ecx
c0011652:	57                   	push   edi
c0011653:	50                   	push   eax
c0011654:	e8 5f ff ff ff       	call   c00115b8 <VAS::getPageTableEntry(unsigned long)>
c0011659:	83 c4 10             	add    esp,0x10
c001165c:	8b 00                	mov    eax,DWORD PTR [eax]
c001165e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011662:	f6 c4 04             	test   ah,0x4
c0011665:	74 c0                	je     c0011627 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011667:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001166b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011670:	83 ec 0c             	sub    esp,0xc
c0011673:	50                   	push   eax
c0011674:	e8 ed df ff ff       	call   c000f666 <Phys::freePage(unsigned long)>
c0011679:	83 c4 10             	add    esp,0x10
c001167c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011680:	80 fa 04             	cmp    dl,0x4
c0011683:	75 88                	jne    c001160d <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011685:	89 f0                	mov    eax,esi
c0011687:	84 c0                	test   al,al
c0011689:	75 47                	jne    c00116d2 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001168b:	c7 44 24 20 a8 6e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026ea8
c0011693:	83 c4 10             	add    esp,0x10
c0011696:	5b                   	pop    ebx
c0011697:	5e                   	pop    esi
c0011698:	5f                   	pop    edi
c0011699:	e9 4f 73 00 00       	jmp    c00189ed <Krnl::panic(char const*)>
c001169e:	89 f0                	mov    eax,esi
c00116a0:	84 c0                	test   al,al
c00116a2:	75 15                	jne    c00116b9 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116a4:	83 ec 0c             	sub    esp,0xc
c00116a7:	68 91 70 02 c0       	push   0xc0027091
c00116ac:	e8 3c 73 00 00       	call   c00189ed <Krnl::panic(char const*)>
c00116b1:	83 c4 10             	add    esp,0x10
c00116b4:	e9 6e ff ff ff       	jmp    c0011627 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116b9:	83 ec 08             	sub    esp,0x8
c00116bc:	6a 00                	push   0x0
c00116be:	53                   	push   ebx
c00116bf:	e8 60 fb ff ff       	call   c0011224 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116c4:	83 c4 10             	add    esp,0x10
c00116c7:	e9 5b ff ff ff       	jmp    c0011627 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116cc:	89 f0                	mov    eax,esi
c00116ce:	84 c0                	test   al,al
c00116d0:	75 15                	jne    c00116e7 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c00116d2:	83 ec 08             	sub    esp,0x8
c00116d5:	6a 00                	push   0x0
c00116d7:	53                   	push   ebx
c00116d8:	e8 47 fb ff ff       	call   c0011224 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116dd:	83 c4 10             	add    esp,0x10
c00116e0:	83 c4 10             	add    esp,0x10
c00116e3:	5b                   	pop    ebx
c00116e4:	5e                   	pop    esi
c00116e5:	5f                   	pop    edi
c00116e6:	c3                   	ret    
c00116e7:	c7 44 24 20 ad 70 02 c0 	mov    DWORD PTR [esp+0x20],0xc00270ad
c00116ef:	83 c4 10             	add    esp,0x10
c00116f2:	5b                   	pop    ebx
c00116f3:	5e                   	pop    esi
c00116f4:	5f                   	pop    edi
c00116f5:	e9 f3 72 00 00       	jmp    c00189ed <Krnl::panic(char const*)>

c00116fa <VAS::freeAllocatedPages(unsigned long)>:
c00116fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011702:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011706:	74 09                	je     c0011711 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011708:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001170c:	e9 c6 fe ff ff       	jmp    c00115d7 <Virt::freeKernelVirtualPages(unsigned long)>
c0011711:	c7 44 24 04 cc 6e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026ecc
c0011719:	e9 31 0b 00 00       	jmp    c001224f <Dbg::kprintf(char const*, ...)>

c001171e <VAS::virtualToPhysical(unsigned long)>:
c001171e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011722:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011726:	e8 8d fe ff ff       	call   c00115b8 <VAS::getPageTableEntry(unsigned long)>
c001172b:	5a                   	pop    edx
c001172c:	8b 00                	mov    eax,DWORD PTR [eax]
c001172e:	59                   	pop    ecx
c001172f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011734:	c3                   	ret    
c0011735:	90                   	nop

c0011736 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011736:	55                   	push   ebp
c0011737:	57                   	push   edi
c0011738:	56                   	push   esi
c0011739:	53                   	push   ebx
c001173a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001173e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011742:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011746:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001174a:	85 db                	test   ebx,ebx
c001174c:	7e 22                	jle    c0011770 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001174e:	c1 e3 0c             	shl    ebx,0xc
c0011751:	01 f3                	add    ebx,esi
c0011753:	56                   	push   esi
c0011754:	81 c6 00 10 00 00    	add    esi,0x1000
c001175a:	55                   	push   ebp
c001175b:	e8 58 fe ff ff       	call   c00115b8 <VAS::getPageTableEntry(unsigned long)>
c0011760:	5a                   	pop    edx
c0011761:	59                   	pop    ecx
c0011762:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011764:	21 f9                	and    ecx,edi
c0011766:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001176a:	39 f3                	cmp    ebx,esi
c001176c:	89 08                	mov    DWORD PTR [eax],ecx
c001176e:	75 e3                	jne    c0011753 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011770:	5b                   	pop    ebx
c0011771:	5e                   	pop    esi
c0011772:	5f                   	pop    edi
c0011773:	5d                   	pop    ebp
c0011774:	c3                   	ret    
c0011775:	90                   	nop

c0011776 <VAS::setToWriteCombining(unsigned long, int)>:
c0011776:	83 ec 0c             	sub    esp,0xc
c0011779:	e8 ec 60 00 00       	call   c001786a <CPU::current()>
c001177e:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011785:	75 04                	jne    c001178b <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011787:	83 c4 0c             	add    esp,0xc
c001178a:	c3                   	ret    
c001178b:	83 ec 0c             	sub    esp,0xc
c001178e:	68 80 00 00 00       	push   0x80
c0011793:	6a ff                	push   0xffffffff
c0011795:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011799:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001179d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00117a1:	e8 90 ff ff ff       	call   c0011736 <VAS::reflagRange(unsigned long, int, int, int)>
c00117a6:	83 c4 20             	add    esp,0x20
c00117a9:	83 c4 0c             	add    esp,0xc
c00117ac:	c3                   	ret    
c00117ad:	90                   	nop

c00117ae <VAS::mapOtherVASIn(bool, VAS*)>:
c00117ae:	83 ec 0c             	sub    esp,0xc
c00117b1:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00117b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117ba:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00117bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117c1:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00117c4:	19 c0                	sbb    eax,eax
c00117c6:	83 ca 03             	or     edx,0x3
c00117c9:	83 e0 fc             	and    eax,0xfffffffc
c00117cc:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00117d3:	e8 9d 38 01 00       	call   c0025075 <CPU::readCR3()>
c00117d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00117dc:	83 c4 0c             	add    esp,0xc
c00117df:	e9 a3 38 01 00       	jmp    c0025087 <CPU::writeCR3(unsigned long)>

c00117e4 <VAS::~VAS()>:
c00117e4:	83 ec 2c             	sub    esp,0x2c
c00117e7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00117ef:	e8 4c a1 00 00       	call   c001b940 <lockScheduler()>
c00117f4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00117f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00117fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00117fe:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011804:	83 ec 04             	sub    esp,0x4
c0011807:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001180b:	6a 01                	push   0x1
c001180d:	50                   	push   eax
c001180e:	e8 9b ff ff ff       	call   c00117ae <VAS::mapOtherVASIn(bool, VAS*)>
c0011813:	83 c4 10             	add    esp,0x10
c0011816:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001181e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011826:	0f 8f d7 00 00 00    	jg     c0011903 <VAS::~VAS()+0x11f>
c001182c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011830:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011833:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011837:	c1 e2 02             	shl    edx,0x2
c001183a:	01 d0                	add    eax,edx
c001183c:	8b 00                	mov    eax,DWORD PTR [eax]
c001183e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011846:	83 e0 01             	and    eax,0x1
c0011849:	0f 84 ab 00 00 00    	je     c00118fa <VAS::~VAS()+0x116>
c001184f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011857:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001185f:	7f 75                	jg     c00118d6 <VAS::~VAS()+0xf2>
c0011861:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011865:	c1 e0 0a             	shl    eax,0xa
c0011868:	89 c2                	mov    edx,eax
c001186a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001186e:	01 d0                	add    eax,edx
c0011870:	c1 e0 0c             	shl    eax,0xc
c0011873:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011877:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001187c:	8b 00                	mov    eax,DWORD PTR [eax]
c001187e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011881:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011887:	83 ec 04             	sub    esp,0x4
c001188a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001188e:	6a 01                	push   0x1
c0011890:	50                   	push   eax
c0011891:	e8 f6 fc ff ff       	call   c001158c <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011896:	83 c4 10             	add    esp,0x10
c0011899:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001189d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00118a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118ab:	25 01 04 00 00       	and    eax,0x401
c00118b0:	3d 01 04 00 00       	cmp    eax,0x401
c00118b5:	75 19                	jne    c00118d0 <VAS::~VAS()+0xec>
c00118b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118bb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118c0:	83 ec 0c             	sub    esp,0xc
c00118c3:	50                   	push   eax
c00118c4:	e8 9d dd ff ff       	call   c000f666 <Phys::freePage(unsigned long)>
c00118c9:	83 c4 10             	add    esp,0x10
c00118cc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118d0:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00118d4:	eb 81                	jmp    c0011857 <VAS::~VAS()+0x73>
c00118d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118da:	25 00 04 00 00       	and    eax,0x400
c00118df:	74 19                	je     c00118fa <VAS::~VAS()+0x116>
c00118e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118e5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118ea:	83 ec 0c             	sub    esp,0xc
c00118ed:	50                   	push   eax
c00118ee:	e8 73 dd ff ff       	call   c000f666 <Phys::freePage(unsigned long)>
c00118f3:	83 c4 10             	add    esp,0x10
c00118f6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118fa:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00118fe:	e9 1b ff ff ff       	jmp    c001181e <VAS::~VAS()+0x3a>
c0011903:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011907:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001190a:	83 ec 0c             	sub    esp,0xc
c001190d:	50                   	push   eax
c001190e:	e8 c4 fc ff ff       	call   c00115d7 <Virt::freeKernelVirtualPages(unsigned long)>
c0011913:	83 c4 10             	add    esp,0x10
c0011916:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001191a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001191d:	83 ec 0c             	sub    esp,0xc
c0011920:	50                   	push   eax
c0011921:	e8 40 dd ff ff       	call   c000f666 <Phys::freePage(unsigned long)>
c0011926:	83 c4 10             	add    esp,0x10
c0011929:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001192d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011931:	c1 e0 02             	shl    eax,0x2
c0011934:	83 ec 08             	sub    esp,0x8
c0011937:	50                   	push   eax
c0011938:	68 f0 6e 02 c0       	push   0xc0026ef0
c001193d:	e8 0d 09 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0011942:	83 c4 10             	add    esp,0x10
c0011945:	e8 f8 9f 00 00       	call   c001b942 <unlockScheduler()>
c001194a:	90                   	nop
c001194b:	83 c4 2c             	add    esp,0x2c
c001194e:	c3                   	ret    
c001194f:	90                   	nop

c0011950 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011950:	55                   	push   ebp
c0011951:	57                   	push   edi
c0011952:	56                   	push   esi
c0011953:	53                   	push   ebx
c0011954:	83 ec 1c             	sub    esp,0x1c
c0011957:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001195b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001195f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011965:	77 08                	ja     c001196f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011967:	0f 20 d8             	mov    eax,cr3
c001196a:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c001196d:	75 47                	jne    c00119b6 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001196f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011973:	09 d8                	or     eax,ebx
c0011975:	a9 ff 0f 00 00       	test   eax,0xfff
c001197a:	75 57                	jne    c00119d3 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001197c:	89 de                	mov    esi,ebx
c001197e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011981:	c1 ee 16             	shr    esi,0x16
c0011984:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001198b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001198f:	74 54                	je     c00119e5 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011991:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011995:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001199b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001199f:	c1 e6 0c             	shl    esi,0xc
c00119a2:	c1 eb 0a             	shr    ebx,0xa
c00119a5:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00119ab:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00119ae:	83 c4 1c             	add    esp,0x1c
c00119b1:	5b                   	pop    ebx
c00119b2:	5e                   	pop    esi
c00119b3:	5f                   	pop    edi
c00119b4:	5d                   	pop    ebp
c00119b5:	c3                   	ret    
c00119b6:	83 ec 0c             	sub    esp,0xc
c00119b9:	68 10 6f 02 c0       	push   0xc0026f10
c00119be:	e8 8c 08 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00119c3:	83 c4 10             	add    esp,0x10
c00119c6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119ca:	09 d8                	or     eax,ebx
c00119cc:	a9 ff 0f 00 00       	test   eax,0xfff
c00119d1:	74 a9                	je     c001197c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119d3:	83 ec 0c             	sub    esp,0xc
c00119d6:	68 78 6f 02 c0       	push   0xc0026f78
c00119db:	e8 0d 70 00 00       	call   c00189ed <Krnl::panic(char const*)>
c00119e0:	83 c4 10             	add    esp,0x10
c00119e3:	eb 97                	jmp    c001197c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119e9:	e8 02 dd ff ff       	call   c000f6f0 <Phys::allocatePage()>
c00119ee:	89 c5                	mov    ebp,eax
c00119f0:	e8 18 fa ff ff       	call   c001140d <Virt::getAKernelVAS()>
c00119f5:	83 ec 0c             	sub    esp,0xc
c00119f8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00119fc:	6a 01                	push   0x1
c00119fe:	e8 7a f8 ff ff       	call   c001127d <Virt::allocateKernelVirtualPages(int)>
c0011a03:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a0a:	6a 01                	push   0x1
c0011a0c:	50                   	push   eax
c0011a0d:	55                   	push   ebp
c0011a0e:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a14:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a18:	51                   	push   ecx
c0011a19:	e8 1e 02 00 00       	call   c0011c3c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a1e:	83 c4 1c             	add    esp,0x1c
c0011a21:	68 00 10 00 00       	push   0x1000
c0011a26:	6a 00                	push   0x0
c0011a28:	50                   	push   eax
c0011a29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a2d:	e8 9a ec fe ff       	call   c00006cc <memset>
c0011a32:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011a36:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011a39:	e8 99 fb ff ff       	call   c00115d7 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a3e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a42:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011a45:	83 c4 10             	add    esp,0x10
c0011a48:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011a4b:	e9 41 ff ff ff       	jmp    c0011991 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011a50 <VAS::allocatePages(int, int)>:
c0011a50:	55                   	push   ebp
c0011a51:	57                   	push   edi
c0011a52:	56                   	push   esi
c0011a53:	53                   	push   ebx
c0011a54:	83 ec 1c             	sub    esp,0x1c
c0011a57:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a5b:	e8 0a 5e 00 00       	call   c001786a <CPU::current()>
c0011a60:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011a66:	83 e0 01             	and    eax,0x1
c0011a69:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011a6d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a71:	0f 85 d7 00 00 00    	jne    c0011b4e <VAS::allocatePages(int, int)+0xfe>
c0011a77:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011a7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a7e:	85 c0                	test   eax,eax
c0011a80:	0f 84 ac 00 00 00    	je     c0011b32 <VAS::allocatePages(int, int)+0xe2>
c0011a86:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011a8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a8e:	c1 e6 0c             	shl    esi,0xc
c0011a91:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011a95:	85 c0                	test   eax,eax
c0011a97:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011a9a:	7e 33                	jle    c0011acf <VAS::allocatePages(int, int)+0x7f>
c0011a9c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011aa0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011aa4:	81 cd 00 04 00 00    	or     ebp,0x400
c0011aaa:	e8 41 dc ff ff       	call   c000f6f0 <Phys::allocatePage()>
c0011aaf:	55                   	push   ebp
c0011ab0:	53                   	push   ebx
c0011ab1:	50                   	push   eax
c0011ab2:	57                   	push   edi
c0011ab3:	e8 98 fe ff ff       	call   c0011950 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ab8:	83 c4 10             	add    esp,0x10
c0011abb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ac0:	74 03                	je     c0011ac5 <VAS::allocatePages(int, int)+0x75>
c0011ac2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ac5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011acb:	39 de                	cmp    esi,ebx
c0011acd:	75 db                	jne    c0011aaa <VAS::allocatePages(int, int)+0x5a>
c0011acf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ad4:	74 3f                	je     c0011b15 <VAS::allocatePages(int, int)+0xc5>
c0011ad6:	c1 ee 0a             	shr    esi,0xa
c0011ad9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011add:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011ae3:	c1 eb 0a             	shr    ebx,0xa
c0011ae6:	81 ee 00 00 40 00    	sub    esi,0x400000
c0011aec:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011af2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011af8:	39 f3                	cmp    ebx,esi
c0011afa:	77 0d                	ja     c0011b09 <VAS::allocatePages(int, int)+0xb9>
c0011afc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011aff:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b05:	39 de                	cmp    esi,ebx
c0011b07:	73 f3                	jae    c0011afc <VAS::allocatePages(int, int)+0xac>
c0011b09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b0d:	83 c4 1c             	add    esp,0x1c
c0011b10:	5b                   	pop    ebx
c0011b11:	5e                   	pop    esi
c0011b12:	5f                   	pop    edi
c0011b13:	5d                   	pop    ebp
c0011b14:	c3                   	ret    
c0011b15:	e8 5b 35 01 00       	call   c0025075 <CPU::readCR3()>
c0011b1a:	83 ec 0c             	sub    esp,0xc
c0011b1d:	50                   	push   eax
c0011b1e:	e8 64 35 01 00       	call   c0025087 <CPU::writeCR3(unsigned long)>
c0011b23:	83 c4 10             	add    esp,0x10
c0011b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b2a:	83 c4 1c             	add    esp,0x1c
c0011b2d:	5b                   	pop    ebx
c0011b2e:	5e                   	pop    esi
c0011b2f:	5f                   	pop    edi
c0011b30:	5d                   	pop    ebp
c0011b31:	c3                   	ret    
c0011b32:	83 ec 0c             	sub    esp,0xc
c0011b35:	68 9c 6f 02 c0       	push   0xc0026f9c
c0011b3a:	e8 ae 6e 00 00       	call   c00189ed <Krnl::panic(char const*)>
c0011b3f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b42:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b46:	83 c4 10             	add    esp,0x10
c0011b49:	e9 38 ff ff ff       	jmp    c0011a86 <VAS::allocatePages(int, int)+0x36>
c0011b4e:	83 ec 0c             	sub    esp,0xc
c0011b51:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011b55:	e8 23 f7 ff ff       	call   c001127d <Virt::allocateKernelVirtualPages(int)>
c0011b5a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b5e:	83 c4 10             	add    esp,0x10
c0011b61:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b66:	0f 87 94 00 00 00    	ja     c0011c00 <VAS::allocatePages(int, int)+0x1b0>
c0011b6c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011b70:	85 d2                	test   edx,edx
c0011b72:	7e 3c                	jle    c0011bb0 <VAS::allocatePages(int, int)+0x160>
c0011b74:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011b78:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011b7c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b80:	c1 e5 0c             	shl    ebp,0xc
c0011b83:	81 ce 00 04 00 00    	or     esi,0x400
c0011b89:	01 dd                	add    ebp,ebx
c0011b8b:	e8 60 db ff ff       	call   c000f6f0 <Phys::allocatePage()>
c0011b90:	56                   	push   esi
c0011b91:	53                   	push   ebx
c0011b92:	50                   	push   eax
c0011b93:	57                   	push   edi
c0011b94:	e8 b7 fd ff ff       	call   c0011950 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b99:	83 c4 10             	add    esp,0x10
c0011b9c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ba1:	74 03                	je     c0011ba6 <VAS::allocatePages(int, int)+0x156>
c0011ba3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011ba6:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bac:	39 dd                	cmp    ebp,ebx
c0011bae:	75 db                	jne    c0011b8b <VAS::allocatePages(int, int)+0x13b>
c0011bb0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bb5:	0f 84 5a ff ff ff    	je     c0011b15 <VAS::allocatePages(int, int)+0xc5>
c0011bbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011bbf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bc3:	89 d3                	mov    ebx,edx
c0011bc5:	c1 e0 0c             	shl    eax,0xc
c0011bc8:	c1 eb 0a             	shr    ebx,0xa
c0011bcb:	01 d0                	add    eax,edx
c0011bcd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011bd3:	c1 e8 0a             	shr    eax,0xa
c0011bd6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011bdc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011be1:	2d 00 00 40 00       	sub    eax,0x400000
c0011be6:	39 c3                	cmp    ebx,eax
c0011be8:	0f 87 1b ff ff ff    	ja     c0011b09 <VAS::allocatePages(int, int)+0xb9>
c0011bee:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bf1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bf7:	39 d8                	cmp    eax,ebx
c0011bf9:	73 f3                	jae    c0011bee <VAS::allocatePages(int, int)+0x19e>
c0011bfb:	e9 09 ff ff ff       	jmp    c0011b09 <VAS::allocatePages(int, int)+0xb9>
c0011c00:	e8 65 5c 00 00       	call   c001786a <CPU::current()>
c0011c05:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011c0c:	0f 84 5a ff ff ff    	je     c0011b6c <VAS::allocatePages(int, int)+0x11c>
c0011c12:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c1a:	e9 4d ff ff ff       	jmp    c0011b6c <VAS::allocatePages(int, int)+0x11c>
c0011c1f:	90                   	nop

c0011c20 <VAS::setCPUSpecific(unsigned long)>:
c0011c20:	83 ec 0c             	sub    esp,0xc
c0011c23:	6a 05                	push   0x5
c0011c25:	68 00 00 40 c2       	push   0xc2400000
c0011c2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c32:	e8 19 fd ff ff       	call   c0011950 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c37:	83 c4 1c             	add    esp,0x1c
c0011c3a:	c3                   	ret    
c0011c3b:	90                   	nop

c0011c3c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011c3c:	55                   	push   ebp
c0011c3d:	57                   	push   edi
c0011c3e:	56                   	push   esi
c0011c3f:	53                   	push   ebx
c0011c40:	83 ec 1c             	sub    esp,0x1c
c0011c43:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c47:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c4b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011c4f:	e8 16 5c 00 00       	call   c001786a <CPU::current()>
c0011c54:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c5a:	83 e0 01             	and    eax,0x1
c0011c5d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c65:	85 c0                	test   eax,eax
c0011c67:	7e 39                	jle    c0011ca2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c0011c69:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c6d:	89 f3                	mov    ebx,esi
c0011c6f:	c1 e0 0c             	shl    eax,0xc
c0011c72:	01 f0                	add    eax,esi
c0011c74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c78:	55                   	push   ebp
c0011c79:	53                   	push   ebx
c0011c7a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c7e:	29 f0                	sub    eax,esi
c0011c80:	01 d8                	add    eax,ebx
c0011c82:	50                   	push   eax
c0011c83:	57                   	push   edi
c0011c84:	e8 c7 fc ff ff       	call   c0011950 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c89:	83 c4 10             	add    esp,0x10
c0011c8c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c91:	74 03                	je     c0011c96 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c0011c93:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c96:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c9c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011ca0:	75 d6                	jne    c0011c78 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c0011ca2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ca7:	74 42                	je     c0011ceb <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c0011ca9:	89 f3                	mov    ebx,esi
c0011cab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011caf:	c1 eb 0a             	shr    ebx,0xa
c0011cb2:	c1 e0 0c             	shl    eax,0xc
c0011cb5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011cbb:	01 f0                	add    eax,esi
c0011cbd:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011cc3:	c1 e8 0a             	shr    eax,0xa
c0011cc6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ccb:	2d 00 00 40 00       	sub    eax,0x400000
c0011cd0:	39 c3                	cmp    ebx,eax
c0011cd2:	77 0d                	ja     c0011ce1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c0011cd4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cd7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011cdd:	39 d8                	cmp    eax,ebx
c0011cdf:	73 f3                	jae    c0011cd4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c0011ce1:	83 c4 1c             	add    esp,0x1c
c0011ce4:	89 f0                	mov    eax,esi
c0011ce6:	5b                   	pop    ebx
c0011ce7:	5e                   	pop    esi
c0011ce8:	5f                   	pop    edi
c0011ce9:	5d                   	pop    ebp
c0011cea:	c3                   	ret    
c0011ceb:	e8 85 33 01 00       	call   c0025075 <CPU::readCR3()>
c0011cf0:	83 ec 0c             	sub    esp,0xc
c0011cf3:	50                   	push   eax
c0011cf4:	e8 8e 33 01 00       	call   c0025087 <CPU::writeCR3(unsigned long)>
c0011cf9:	89 f0                	mov    eax,esi
c0011cfb:	83 c4 10             	add    esp,0x10
c0011cfe:	83 c4 1c             	add    esp,0x1c
c0011d01:	5b                   	pop    ebx
c0011d02:	5e                   	pop    esi
c0011d03:	5f                   	pop    edi
c0011d04:	5d                   	pop    ebp
c0011d05:	c3                   	ret    

c0011d06 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d06:	55                   	push   ebp
c0011d07:	57                   	push   edi
c0011d08:	56                   	push   esi
c0011d09:	53                   	push   ebx
c0011d0a:	83 ec 1c             	sub    esp,0x1c
c0011d0d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d15:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011d19:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d1d:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d22:	75 4a                	jne    c0011d6e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d24:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011d28:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011d2b:	c1 eb 16             	shr    ebx,0x16
c0011d2e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011d35:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011d39:	74 4d                	je     c0011d88 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011d3b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d3f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011d43:	c1 e8 0a             	shr    eax,0xa
c0011d46:	80 fa 01             	cmp    dl,0x1
c0011d49:	19 d2                	sbb    edx,edx
c0011d4b:	c1 e3 0c             	shl    ebx,0xc
c0011d4e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011d52:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011d58:	25 fc 0f 00 00       	and    eax,0xffc
c0011d5d:	01 d8                	add    eax,ebx
c0011d5f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011d66:	83 c4 1c             	add    esp,0x1c
c0011d69:	5b                   	pop    ebx
c0011d6a:	5e                   	pop    esi
c0011d6b:	5f                   	pop    edi
c0011d6c:	5d                   	pop    ebp
c0011d6d:	c3                   	ret    
c0011d6e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011d72:	83 ec 0c             	sub    esp,0xc
c0011d75:	68 c8 6f 02 c0       	push   0xc0026fc8
c0011d7a:	e8 6e 6c 00 00       	call   c00189ed <Krnl::panic(char const*)>
c0011d7f:	83 c4 10             	add    esp,0x10
c0011d82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011d86:	eb 9c                	jmp    c0011d24 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011d88:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d8c:	e8 5f d9 ff ff       	call   c000f6f0 <Phys::allocatePage()>
c0011d91:	89 c5                	mov    ebp,eax
c0011d93:	e8 75 f6 ff ff       	call   c001140d <Virt::getAKernelVAS()>
c0011d98:	83 ec 0c             	sub    esp,0xc
c0011d9b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011d9f:	6a 01                	push   0x1
c0011da1:	e8 d7 f4 ff ff       	call   c001127d <Virt::allocateKernelVirtualPages(int)>
c0011da6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011dad:	6a 01                	push   0x1
c0011daf:	50                   	push   eax
c0011db0:	55                   	push   ebp
c0011db1:	81 cd 07 04 00 00    	or     ebp,0x407
c0011db7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011dbb:	51                   	push   ecx
c0011dbc:	e8 7b fe ff ff       	call   c0011c3c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011dc1:	83 c4 1c             	add    esp,0x1c
c0011dc4:	68 00 10 00 00       	push   0x1000
c0011dc9:	6a 00                	push   0x0
c0011dcb:	50                   	push   eax
c0011dcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011dd0:	e8 f7 e8 fe ff       	call   c00006cc <memset>
c0011dd5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011dd9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011ddc:	e8 f6 f7 ff ff       	call   c00115d7 <Virt::freeKernelVirtualPages(unsigned long)>
c0011de1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011de4:	83 c4 10             	add    esp,0x10
c0011de7:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011dea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011dee:	e9 48 ff ff ff       	jmp    c0011d3b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0011df3:	90                   	nop

c0011df4 <VAS::VAS(bool)>:
c0011df4:	53                   	push   ebx
c0011df5:	83 ec 28             	sub    esp,0x28
c0011df8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dfc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e0f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011e13:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011e16:	e8 d5 d8 ff ff       	call   c000f6f0 <Phys::allocatePage()>
c0011e1b:	89 c2                	mov    edx,eax
c0011e1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e21:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011e24:	e8 e4 f5 ff ff       	call   c001140d <Virt::getAKernelVAS()>
c0011e29:	89 c3                	mov    ebx,eax
c0011e2b:	83 ec 0c             	sub    esp,0xc
c0011e2e:	6a 01                	push   0x1
c0011e30:	e8 48 f4 ff ff       	call   c001127d <Virt::allocateKernelVirtualPages(int)>
c0011e35:	83 c4 10             	add    esp,0x10
c0011e38:	89 c2                	mov    edx,eax
c0011e3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e3e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e41:	83 ec 0c             	sub    esp,0xc
c0011e44:	6a 03                	push   0x3
c0011e46:	6a 01                	push   0x1
c0011e48:	52                   	push   edx
c0011e49:	50                   	push   eax
c0011e4a:	53                   	push   ebx
c0011e4b:	e8 ec fd ff ff       	call   c0011c3c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e50:	83 c4 20             	add    esp,0x20
c0011e53:	89 c2                	mov    edx,eax
c0011e55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e59:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011e5c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011e64:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011e6c:	7f 1c                	jg     c0011e8a <VAS::VAS(bool)+0x96>
c0011e6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e72:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e75:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e79:	c1 e2 02             	shl    edx,0x2
c0011e7c:	01 d0                	add    eax,edx
c0011e7e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011e84:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e88:	eb da                	jmp    c0011e64 <VAS::VAS(bool)+0x70>
c0011e8a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011e92:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011e9a:	7f 71                	jg     c0011f0d <VAS::VAS(bool)+0x119>
c0011e9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ea0:	2d 00 02 00 00       	sub    eax,0x200
c0011ea5:	c1 e0 0c             	shl    eax,0xc
c0011ea8:	83 c8 03             	or     eax,0x3
c0011eab:	89 c3                	mov    ebx,eax
c0011ead:	e8 b8 59 00 00       	call   c001786a <CPU::current()>
c0011eb2:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011eb8:	83 e0 10             	and    eax,0x10
c0011ebb:	84 c0                	test   al,al
c0011ebd:	74 07                	je     c0011ec6 <VAS::VAS(bool)+0xd2>
c0011ebf:	b8 00 01 00 00       	mov    eax,0x100
c0011ec4:	eb 05                	jmp    c0011ecb <VAS::VAS(bool)+0xd7>
c0011ec6:	b8 00 00 00 00       	mov    eax,0x0
c0011ecb:	09 d8                	or     eax,ebx
c0011ecd:	89 c1                	mov    ecx,eax
c0011ecf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ed3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011ed6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011eda:	c1 e2 02             	shl    edx,0x2
c0011edd:	01 d0                	add    eax,edx
c0011edf:	89 ca                	mov    edx,ecx
c0011ee1:	89 10                	mov    DWORD PTR [eax],edx
c0011ee3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ee7:	2d 40 03 00 00       	sub    eax,0x340
c0011eec:	83 f8 7f             	cmp    eax,0x7f
c0011eef:	77 16                	ja     c0011f07 <VAS::VAS(bool)+0x113>
c0011ef1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011ef8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011efc:	c1 e2 02             	shl    edx,0x2
c0011eff:	01 d0                	add    eax,edx
c0011f01:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f07:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f0b:	eb 85                	jmp    c0011e92 <VAS::VAS(bool)+0x9e>
c0011f0d:	e8 58 59 00 00       	call   c001786a <CPU::current()>
c0011f12:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f18:	83 e0 10             	and    eax,0x10
c0011f1b:	84 c0                	test   al,al
c0011f1d:	74 07                	je     c0011f26 <VAS::VAS(bool)+0x132>
c0011f1f:	b8 03 41 00 00       	mov    eax,0x4103
c0011f24:	eb 05                	jmp    c0011f2b <VAS::VAS(bool)+0x137>
c0011f26:	b8 03 40 00 00       	mov    eax,0x4003
c0011f2b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011f2f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011f32:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011f38:	89 02                	mov    DWORD PTR [edx],eax
c0011f3a:	e8 2b 59 00 00       	call   c001786a <CPU::current()>
c0011f3f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011f45:	83 ec 08             	sub    esp,0x8
c0011f48:	50                   	push   eax
c0011f49:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011f4d:	e8 ce fc ff ff       	call   c0011c20 <VAS::setCPUSpecific(unsigned long)>
c0011f52:	83 c4 10             	add    esp,0x10
c0011f55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f59:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c0011f5c:	e8 09 59 00 00       	call   c001786a <CPU::current()>
c0011f61:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f67:	83 e0 10             	and    eax,0x10
c0011f6a:	84 c0                	test   al,al
c0011f6c:	74 07                	je     c0011f75 <VAS::VAS(bool)+0x181>
c0011f6e:	b8 00 01 00 00       	mov    eax,0x100
c0011f73:	eb 05                	jmp    c0011f7a <VAS::VAS(bool)+0x186>
c0011f75:	b8 00 00 00 00       	mov    eax,0x0
c0011f7a:	09 d8                	or     eax,ebx
c0011f7c:	89 c2                	mov    edx,eax
c0011f7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f82:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011f85:	05 fc 0f 00 00       	add    eax,0xffc
c0011f8a:	83 ca 03             	or     edx,0x3
c0011f8d:	89 10                	mov    DWORD PTR [eax],edx
c0011f8f:	e8 d6 58 00 00       	call   c001786a <CPU::current()>
c0011f94:	83 ec 0c             	sub    esp,0xc
c0011f97:	50                   	push   eax
c0011f98:	e8 9f 19 00 00       	call   c001393c <Device::getName()>
c0011f9d:	83 c4 10             	add    esp,0x10
c0011fa0:	83 ec 08             	sub    esp,0x8
c0011fa3:	68 c7 70 02 c0       	push   0xc00270c7
c0011fa8:	50                   	push   eax
c0011fa9:	e8 0e e8 fe ff       	call   c00007bc <strcmp>
c0011fae:	83 c4 10             	add    esp,0x10
c0011fb1:	85 c0                	test   eax,eax
c0011fb3:	0f 94 c0             	sete   al
c0011fb6:	84 c0                	test   al,al
c0011fb8:	74 64                	je     c001201e <VAS::VAS(bool)+0x22a>
c0011fba:	e8 64 99 00 00       	call   c001b923 <disableIRQs()>
c0011fbf:	e8 a6 58 00 00       	call   c001786a <CPU::current()>
c0011fc4:	05 7c 09 00 00       	add    eax,0x97c
c0011fc9:	83 ec 0c             	sub    esp,0xc
c0011fcc:	50                   	push   eax
c0011fcd:	e8 e6 cb ff ff       	call   c000ebb8 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011fd2:	83 c4 10             	add    esp,0x10
c0011fd5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fda:	89 c3                	mov    ebx,eax
c0011fdc:	e8 89 58 00 00       	call   c001786a <CPU::current()>
c0011fe1:	05 7c 09 00 00       	add    eax,0x97c
c0011fe6:	83 ec 0c             	sub    esp,0xc
c0011fe9:	50                   	push   eax
c0011fea:	e8 c9 cb ff ff       	call   c000ebb8 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0011fef:	83 c4 10             	add    esp,0x10
c0011ff2:	83 ec 08             	sub    esp,0x8
c0011ff5:	50                   	push   eax
c0011ff6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011ffa:	e8 b9 f5 ff ff       	call   c00115b8 <VAS::getPageTableEntry(unsigned long)>
c0011fff:	83 c4 10             	add    esp,0x10
c0012002:	8b 00                	mov    eax,DWORD PTR [eax]
c0012004:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012009:	6a 11                	push   0x11
c001200b:	53                   	push   ebx
c001200c:	50                   	push   eax
c001200d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012011:	e8 3a f9 ff ff       	call   c0011950 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012016:	83 c4 10             	add    esp,0x10
c0012019:	e8 13 99 00 00       	call   c001b931 <enableIRQs()>
c001201e:	90                   	nop
c001201f:	83 c4 28             	add    esp,0x28
c0012022:	5b                   	pop    ebx
c0012023:	c3                   	ret    

c0012024 <mapVASFirstTime>:
c0012024:	55                   	push   ebp
c0012025:	57                   	push   edi
c0012026:	56                   	push   esi
c0012027:	53                   	push   ebx
c0012028:	83 ec 0c             	sub    esp,0xc
c001202b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012030:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012033:	4a                   	dec    edx
c0012034:	0f 84 99 00 00 00    	je     c00120d3 <mapVASFirstTime+0xaf>
c001203a:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001203d:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012040:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012045:	c1 e5 15             	shl    ebp,0x15
c0012048:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c001204d:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012053:	29 eb                	sub    ebx,ebp
c0012055:	29 ee                	sub    esi,ebp
c0012057:	e8 94 d6 ff ff       	call   c000f6f0 <Phys::allocatePage()>
c001205c:	83 ec 0c             	sub    esp,0xc
c001205f:	68 03 04 00 00       	push   0x403
c0012064:	6a 01                	push   0x1
c0012066:	53                   	push   ebx
c0012067:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001206d:	50                   	push   eax
c001206e:	57                   	push   edi
c001206f:	e8 c8 fb ff ff       	call   c0011c3c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012074:	83 c4 20             	add    esp,0x20
c0012077:	39 f3                	cmp    ebx,esi
c0012079:	75 dc                	jne    c0012057 <mapVASFirstTime+0x33>
c001207b:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012080:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012085:	29 ee                	sub    esi,ebp
c0012087:	29 e8                	sub    eax,ebp
c0012089:	89 c5                	mov    ebp,eax
c001208b:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001208f:	19 db                	sbb    ebx,ebx
c0012091:	e8 5a d6 ff ff       	call   c000f6f0 <Phys::allocatePage()>
c0012096:	83 e3 04             	and    ebx,0x4
c0012099:	83 ec 0c             	sub    esp,0xc
c001209c:	81 c3 03 04 00 00    	add    ebx,0x403
c00120a2:	53                   	push   ebx
c00120a3:	6a 01                	push   0x1
c00120a5:	56                   	push   esi
c00120a6:	81 ee 00 10 00 00    	sub    esi,0x1000
c00120ac:	50                   	push   eax
c00120ad:	57                   	push   edi
c00120ae:	e8 89 fb ff ff       	call   c0011c3c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00120b3:	83 c4 20             	add    esp,0x20
c00120b6:	39 f5                	cmp    ebp,esi
c00120b8:	75 d1                	jne    c001208b <mapVASFirstTime+0x67>
c00120ba:	e8 b6 2f 01 00       	call   c0025075 <CPU::readCR3()>
c00120bf:	83 ec 0c             	sub    esp,0xc
c00120c2:	50                   	push   eax
c00120c3:	e8 bf 2f 01 00       	call   c0025087 <CPU::writeCR3(unsigned long)>
c00120c8:	83 c4 10             	add    esp,0x10
c00120cb:	83 c4 0c             	add    esp,0xc
c00120ce:	5b                   	pop    ebx
c00120cf:	5e                   	pop    esi
c00120d0:	5f                   	pop    edi
c00120d1:	5d                   	pop    ebp
c00120d2:	c3                   	ret    
c00120d3:	83 ec 0c             	sub    esp,0xc
c00120d6:	68 d5 70 02 c0       	push   0xc00270d5
c00120db:	e8 6f 01 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00120e0:	83 c4 10             	add    esp,0x10
c00120e3:	83 c4 0c             	add    esp,0xc
c00120e6:	5b                   	pop    ebx
c00120e7:	5e                   	pop    esi
c00120e8:	5f                   	pop    edi
c00120e9:	5d                   	pop    ebp
c00120ea:	c3                   	ret    

c00120eb <__cxa_atexit>:
c00120eb:	31 c0                	xor    eax,eax
c00120ed:	c3                   	ret    

c00120ee <__cxa_finalize>:
c00120ee:	c3                   	ret    

c00120ef <__stack_chk_fail>:
c00120ef:	55                   	push   ebp
c00120f0:	89 e5                	mov    ebp,esp
c00120f2:	83 ec 10             	sub    esp,0x10
c00120f5:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00120f8:	68 ee 70 02 c0       	push   0xc00270ee
c00120fd:	e8 4d 01 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0012102:	58                   	pop    eax
c0012103:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012106:	5a                   	pop    edx
c0012107:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001210a:	68 ee 70 02 c0       	push   0xc00270ee
c001210f:	e8 3b 01 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0012114:	59                   	pop    ecx
c0012115:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012118:	5a                   	pop    edx
c0012119:	8b 00                	mov    eax,DWORD PTR [eax]
c001211b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001211e:	68 ee 70 02 c0       	push   0xc00270ee
c0012123:	e8 27 01 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0012128:	59                   	pop    ecx
c0012129:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001212c:	5a                   	pop    edx
c001212d:	8b 00                	mov    eax,DWORD PTR [eax]
c001212f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012131:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012134:	68 ee 70 02 c0       	push   0xc00270ee
c0012139:	e8 11 01 00 00       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001213e:	c7 04 24 f6 70 02 c0 	mov    DWORD PTR [esp],0xc00270f6
c0012145:	e8 a3 68 00 00       	call   c00189ed <Krnl::panic(char const*)>
c001214a:	83 c4 10             	add    esp,0x10
c001214d:	c9                   	leave  
c001214e:	c3                   	ret    

c001214f <__cxa_pure_virtual>:
c001214f:	83 ec 18             	sub    esp,0x18
c0012152:	68 0e 71 02 c0       	push   0xc002710e
c0012157:	e8 91 68 00 00       	call   c00189ed <Krnl::panic(char const*)>
c001215c:	83 c4 1c             	add    esp,0x1c
c001215f:	c3                   	ret    

c0012160 <operator new(unsigned long)>:
c0012160:	e9 e1 cf ff ff       	jmp    c000f146 <malloc>

c0012165 <operator new[](unsigned long)>:
c0012165:	e9 dc cf ff ff       	jmp    c000f146 <malloc>

c001216a <operator delete(void*)>:
c001216a:	e9 f7 cf ff ff       	jmp    c000f166 <rfree>

c001216f <operator delete(void*, unsigned long)>:
c001216f:	e9 f2 cf ff ff       	jmp    c000f166 <rfree>

c0012174 <operator delete[](void*)>:
c0012174:	e9 ed cf ff ff       	jmp    c000f166 <rfree>

c0012179 <operator delete[](void*, unsigned long)>:
c0012179:	e9 e8 cf ff ff       	jmp    c000f166 <rfree>

c001217e <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c001217e:	57                   	push   edi
c001217f:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012184:	56                   	push   esi
c0012185:	be 24 71 02 c0       	mov    esi,0xc0027124
c001218a:	53                   	push   ebx
c001218b:	83 ec 40             	sub    esp,0x40
c001218e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012192:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012196:	fc                   	cld    
c0012197:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012199:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c001219d:	83 f9 3e             	cmp    ecx,0x3e
c00121a0:	7e 05                	jle    c00121a7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00121a2:	b9 3e 00 00 00       	mov    ecx,0x3e
c00121a7:	89 df                	mov    edi,ebx
c00121a9:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00121ad:	eb 02                	jmp    c00121b1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00121af:	89 c7                	mov    edi,eax
c00121b1:	31 d2                	xor    edx,edx
c00121b3:	46                   	inc    esi
c00121b4:	89 f8                	mov    eax,edi
c00121b6:	f7 f1                	div    ecx
c00121b8:	39 cf                	cmp    edi,ecx
c00121ba:	73 f3                	jae    c00121af <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00121bc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00121bf:	eb 02                	jmp    c00121c3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00121c1:	89 c3                	mov    ebx,eax
c00121c3:	31 d2                	xor    edx,edx
c00121c5:	4e                   	dec    esi
c00121c6:	89 d8                	mov    eax,ebx
c00121c8:	f7 f1                	div    ecx
c00121ca:	39 cb                	cmp    ebx,ecx
c00121cc:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c00121d0:	88 16                	mov    BYTE PTR [esi],dl
c00121d2:	73 ed                	jae    c00121c1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c00121d4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00121d8:	83 c4 40             	add    esp,0x40
c00121db:	5b                   	pop    ebx
c00121dc:	5e                   	pop    esi
c00121dd:	5f                   	pop    edi
c00121de:	c3                   	ret    

c00121df <Dbg::logc(char)>:
c00121df:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00121e3:	ba fd 03 00 00       	mov    edx,0x3fd
c00121e8:	ec                   	in     al,dx
c00121e9:	a8 20                	test   al,0x20
c00121eb:	74 fb                	je     c00121e8 <Dbg::logc(char)+0x9>
c00121ed:	ba f8 03 00 00       	mov    edx,0x3f8
c00121f2:	88 c8                	mov    al,cl
c00121f4:	ee                   	out    dx,al
c00121f5:	c3                   	ret    

c00121f6 <Dbg::logs(char*)>:
c00121f6:	53                   	push   ebx
c00121f7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00121fb:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00121fe:	84 c0                	test   al,al
c0012200:	74 0f                	je     c0012211 <Dbg::logs(char*)+0x1b>
c0012202:	50                   	push   eax
c0012203:	43                   	inc    ebx
c0012204:	e8 d6 ff ff ff       	call   c00121df <Dbg::logc(char)>
c0012209:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001220c:	5a                   	pop    edx
c001220d:	84 c0                	test   al,al
c001220f:	75 f1                	jne    c0012202 <Dbg::logs(char*)+0xc>
c0012211:	5b                   	pop    ebx
c0012212:	c3                   	ret    

c0012213 <Dbg::logWriteInt(unsigned int)>:
c0012213:	83 ec 10             	sub    esp,0x10
c0012216:	6a 0a                	push   0xa
c0012218:	8d 44 24 08          	lea    eax,[esp+0x8]
c001221c:	50                   	push   eax
c001221d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012221:	e8 58 ff ff ff       	call   c001217e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012226:	50                   	push   eax
c0012227:	e8 ca ff ff ff       	call   c00121f6 <Dbg::logs(char*)>
c001222c:	83 c4 20             	add    esp,0x20
c001222f:	c3                   	ret    

c0012230 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012230:	83 ec 10             	sub    esp,0x10
c0012233:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012237:	8d 44 24 08          	lea    eax,[esp+0x8]
c001223b:	50                   	push   eax
c001223c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012240:	e8 39 ff ff ff       	call   c001217e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012245:	50                   	push   eax
c0012246:	e8 ab ff ff ff       	call   c00121f6 <Dbg::logs(char*)>
c001224b:	83 c4 20             	add    esp,0x20
c001224e:	c3                   	ret    

c001224f <Dbg::kprintf(char const*, ...)>:
c001224f:	55                   	push   ebp
c0012250:	57                   	push   edi
c0012251:	56                   	push   esi
c0012252:	53                   	push   ebx
c0012253:	83 ec 0c             	sub    esp,0xc
c0012256:	8d 44 24 24          	lea    eax,[esp+0x24]
c001225a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001225e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012262:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012265:	84 c0                	test   al,al
c0012267:	74 4a                	je     c00122b3 <Dbg::kprintf(char const*, ...)+0x64>
c0012269:	31 db                	xor    ebx,ebx
c001226b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001226e:	3c 25                	cmp    al,0x25
c0012270:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012273:	0f 85 e4 00 00 00    	jne    c001235d <Dbg::kprintf(char const*, ...)+0x10e>
c0012279:	83 c3 02             	add    ebx,0x2
c001227c:	8a 07                	mov    al,BYTE PTR [edi]
c001227e:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012281:	83 e8 25             	sub    eax,0x25
c0012284:	3c 53                	cmp    al,0x53
c0012286:	0f 87 ba 00 00 00    	ja     c0012346 <Dbg::kprintf(char const*, ...)+0xf7>
c001228c:	0f b6 c0             	movzx  eax,al
c001228f:	ff 24 85 64 71 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd8e9c]
c0012296:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001229a:	89 c8                	mov    eax,ecx
c001229c:	83 c1 04             	add    ecx,0x4
c001229f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00122a3:	ff 30                	push   DWORD PTR [eax]
c00122a5:	e8 4c ff ff ff       	call   c00121f6 <Dbg::logs(char*)>
c00122aa:	58                   	pop    eax
c00122ab:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00122af:	84 c0                	test   al,al
c00122b1:	75 b8                	jne    c001226b <Dbg::kprintf(char const*, ...)+0x1c>
c00122b3:	83 c4 0c             	add    esp,0xc
c00122b6:	5b                   	pop    ebx
c00122b7:	5e                   	pop    esi
c00122b8:	5f                   	pop    edi
c00122b9:	5d                   	pop    ebp
c00122ba:	c3                   	ret    
c00122bb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00122bf:	89 d0                	mov    eax,edx
c00122c1:	83 c2 04             	add    edx,0x4
c00122c4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00122c8:	ff 30                	push   DWORD PTR [eax]
c00122ca:	e8 44 ff ff ff       	call   c0012213 <Dbg::logWriteInt(unsigned int)>
c00122cf:	58                   	pop    eax
c00122d0:	eb d9                	jmp    c00122ab <Dbg::kprintf(char const*, ...)+0x5c>
c00122d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00122d6:	89 d0                	mov    eax,edx
c00122d8:	83 c2 04             	add    edx,0x4
c00122db:	0f be 00             	movsx  eax,BYTE PTR [eax]
c00122de:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00122e2:	50                   	push   eax
c00122e3:	e8 f7 fe ff ff       	call   c00121df <Dbg::logc(char)>
c00122e8:	58                   	pop    eax
c00122e9:	eb c0                	jmp    c00122ab <Dbg::kprintf(char const*, ...)+0x5c>
c00122eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00122ef:	89 c8                	mov    eax,ecx
c00122f1:	83 c1 04             	add    ecx,0x4
c00122f4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00122f8:	ff 30                	push   DWORD PTR [eax]
c00122fa:	e8 14 ff ff ff       	call   c0012213 <Dbg::logWriteInt(unsigned int)>
c00122ff:	5f                   	pop    edi
c0012300:	eb a9                	jmp    c00122ab <Dbg::kprintf(char const*, ...)+0x5c>
c0012302:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012306:	89 c8                	mov    eax,ecx
c0012308:	83 c1 04             	add    ecx,0x4
c001230b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001230f:	6a 10                	push   0x10
c0012311:	ff 30                	push   DWORD PTR [eax]
c0012313:	e8 18 ff ff ff       	call   c0012230 <Dbg::logWriteIntBase(unsigned int, int)>
c0012318:	59                   	pop    ecx
c0012319:	5f                   	pop    edi
c001231a:	eb 8f                	jmp    c00122ab <Dbg::kprintf(char const*, ...)+0x5c>
c001231c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012320:	89 d0                	mov    eax,edx
c0012322:	83 c2 08             	add    edx,0x8
c0012325:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012329:	6a 10                	push   0x10
c001232b:	ff 30                	push   DWORD PTR [eax]
c001232d:	e8 fe fe ff ff       	call   c0012230 <Dbg::logWriteIntBase(unsigned int, int)>
c0012332:	58                   	pop    eax
c0012333:	5a                   	pop    edx
c0012334:	e9 72 ff ff ff       	jmp    c00122ab <Dbg::kprintf(char const*, ...)+0x5c>
c0012339:	6a 25                	push   0x25
c001233b:	e8 9f fe ff ff       	call   c00121df <Dbg::logc(char)>
c0012340:	58                   	pop    eax
c0012341:	e9 65 ff ff ff       	jmp    c00122ab <Dbg::kprintf(char const*, ...)+0x5c>
c0012346:	6a 25                	push   0x25
c0012348:	e8 92 fe ff ff       	call   c00121df <Dbg::logc(char)>
c001234d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012350:	50                   	push   eax
c0012351:	e8 89 fe ff ff       	call   c00121df <Dbg::logc(char)>
c0012356:	5a                   	pop    edx
c0012357:	59                   	pop    ecx
c0012358:	e9 4e ff ff ff       	jmp    c00122ab <Dbg::kprintf(char const*, ...)+0x5c>
c001235d:	50                   	push   eax
c001235e:	89 eb                	mov    ebx,ebp
c0012360:	e8 7a fe ff ff       	call   c00121df <Dbg::logc(char)>
c0012365:	89 fd                	mov    ebp,edi
c0012367:	58                   	pop    eax
c0012368:	e9 3e ff ff ff       	jmp    c00122ab <Dbg::kprintf(char const*, ...)+0x5c>
c001236d:	90                   	nop

c001236e <File::read(unsigned long long, void*, int*)>:
c001236e:	53                   	push   ebx
c001236f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012373:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012377:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001237e:	3c 19                	cmp    al,0x19
c0012380:	77 35                	ja     c00123b7 <File::read(unsigned long long, void*, int*)+0x49>
c0012382:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c0012389:	85 c0                	test   eax,eax
c001238b:	74 2a                	je     c00123b7 <File::read(unsigned long long, void*, int*)+0x49>
c001238d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012393:	85 c0                	test   eax,eax
c0012395:	74 20                	je     c00123b7 <File::read(unsigned long long, void*, int*)+0x49>
c0012397:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001239b:	74 21                	je     c00123be <File::read(unsigned long long, void*, int*)+0x50>
c001239d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001239f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00123a3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00123a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00123ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123b1:	5b                   	pop    ebx
c00123b2:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00123b5:	ff e0                	jmp    eax
c00123b7:	b8 0b 00 00 00       	mov    eax,0xb
c00123bc:	eb 05                	jmp    c00123c3 <File::read(unsigned long long, void*, int*)+0x55>
c00123be:	b8 05 00 00 00       	mov    eax,0x5
c00123c3:	5b                   	pop    ebx
c00123c4:	c3                   	ret    
c00123c5:	90                   	nop

c00123c6 <File::write(unsigned long long, void*, int*)>:
c00123c6:	53                   	push   ebx
c00123c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00123cb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123cf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00123d6:	3c 19                	cmp    al,0x19
c00123d8:	77 35                	ja     c001240f <File::write(unsigned long long, void*, int*)+0x49>
c00123da:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c00123e1:	85 c0                	test   eax,eax
c00123e3:	74 2a                	je     c001240f <File::write(unsigned long long, void*, int*)+0x49>
c00123e5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00123eb:	85 c0                	test   eax,eax
c00123ed:	74 20                	je     c001240f <File::write(unsigned long long, void*, int*)+0x49>
c00123ef:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00123f3:	74 21                	je     c0012416 <File::write(unsigned long long, void*, int*)+0x50>
c00123f5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00123f7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00123fb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012401:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012405:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012409:	5b                   	pop    ebx
c001240a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001240d:	ff e0                	jmp    eax
c001240f:	b8 0b 00 00 00       	mov    eax,0xb
c0012414:	eb 05                	jmp    c001241b <File::write(unsigned long long, void*, int*)+0x55>
c0012416:	b8 05 00 00 00       	mov    eax,0x5
c001241b:	5b                   	pop    ebx
c001241c:	c3                   	ret    
c001241d:	90                   	nop

c001241e <Directory::read(unsigned long long, void*, int*)>:
c001241e:	53                   	push   ebx
c001241f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012423:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012427:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001242e:	3c 19                	cmp    al,0x19
c0012430:	77 35                	ja     c0012467 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012432:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c0012439:	85 c0                	test   eax,eax
c001243b:	74 2a                	je     c0012467 <Directory::read(unsigned long long, void*, int*)+0x49>
c001243d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012443:	85 c0                	test   eax,eax
c0012445:	74 20                	je     c0012467 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012447:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001244b:	74 21                	je     c001246e <Directory::read(unsigned long long, void*, int*)+0x50>
c001244d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001244f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012453:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012459:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001245d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012461:	5b                   	pop    ebx
c0012462:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012465:	ff e0                	jmp    eax
c0012467:	b8 0b 00 00 00       	mov    eax,0xb
c001246c:	eb 05                	jmp    c0012473 <Directory::read(unsigned long long, void*, int*)+0x55>
c001246e:	b8 05 00 00 00       	mov    eax,0x5
c0012473:	5b                   	pop    ebx
c0012474:	c3                   	ret    
c0012475:	90                   	nop

c0012476 <Directory::write(unsigned long long, void*, int*)>:
c0012476:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001247a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012481:	b8 0b 00 00 00       	mov    eax,0xb
c0012486:	80 fa 19             	cmp    dl,0x19
c0012489:	77 18                	ja     c00124a3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001248b:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c0012492:	85 d2                	test   edx,edx
c0012494:	74 0d                	je     c00124a3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012496:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001249d:	19 c0                	sbb    eax,eax
c001249f:	83 e0 0a             	and    eax,0xa
c00124a2:	40                   	inc    eax
c00124a3:	c3                   	ret    

c00124a4 <File::isAtty()>:
c00124a4:	31 c0                	xor    eax,eax
c00124a6:	c3                   	ret    
c00124a7:	90                   	nop

c00124a8 <Directory::isAtty()>:
c00124a8:	31 c0                	xor    eax,eax
c00124aa:	c3                   	ret    
c00124ab:	90                   	nop

c00124ac <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00124ac:	b8 0a 00 00 00       	mov    eax,0xa
c00124b1:	c3                   	ret    

c00124b2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00124b2:	b8 0a 00 00 00       	mov    eax,0xa
c00124b7:	c3                   	ret    

c00124b8 <File::~File()>:
c00124b8:	83 ec 0c             	sub    esp,0xc
c00124bb:	ba 20 73 02 c0       	mov    edx,0xc0027320
c00124c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124c4:	89 10                	mov    DWORD PTR [eax],edx
c00124c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124ca:	83 ec 0c             	sub    esp,0xc
c00124cd:	50                   	push   eax
c00124ce:	e8 49 eb ff ff       	call   c001101c <UnixFile::~UnixFile()>
c00124d3:	83 c4 10             	add    esp,0x10
c00124d6:	90                   	nop
c00124d7:	83 c4 0c             	add    esp,0xc
c00124da:	c3                   	ret    
c00124db:	90                   	nop

c00124dc <File::~File()>:
c00124dc:	83 ec 0c             	sub    esp,0xc
c00124df:	83 ec 0c             	sub    esp,0xc
c00124e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124e6:	e8 cd ff ff ff       	call   c00124b8 <File::~File()>
c00124eb:	83 c4 10             	add    esp,0x10
c00124ee:	83 ec 08             	sub    esp,0x8
c00124f1:	68 14 01 00 00       	push   0x114
c00124f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124fa:	e8 70 fc ff ff       	call   c001216f <operator delete(void*, unsigned long)>
c00124ff:	83 c4 10             	add    esp,0x10
c0012502:	83 c4 0c             	add    esp,0xc
c0012505:	c3                   	ret    

c0012506 <Directory::~Directory()>:
c0012506:	83 ec 0c             	sub    esp,0xc
c0012509:	ba 3c 73 02 c0       	mov    edx,0xc002733c
c001250e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012512:	89 10                	mov    DWORD PTR [eax],edx
c0012514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012518:	83 ec 0c             	sub    esp,0xc
c001251b:	50                   	push   eax
c001251c:	e8 fb ea ff ff       	call   c001101c <UnixFile::~UnixFile()>
c0012521:	83 c4 10             	add    esp,0x10
c0012524:	90                   	nop
c0012525:	83 c4 0c             	add    esp,0xc
c0012528:	c3                   	ret    
c0012529:	90                   	nop

c001252a <Directory::~Directory()>:
c001252a:	83 ec 0c             	sub    esp,0xc
c001252d:	83 ec 0c             	sub    esp,0xc
c0012530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012534:	e8 cd ff ff ff       	call   c0012506 <Directory::~Directory()>
c0012539:	83 c4 10             	add    esp,0x10
c001253c:	83 ec 08             	sub    esp,0x8
c001253f:	68 14 01 00 00       	push   0x114
c0012544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012548:	e8 22 fc ff ff       	call   c001216f <operator delete(void*, unsigned long)>
c001254d:	83 c4 10             	add    esp,0x10
c0012550:	83 c4 0c             	add    esp,0xc
c0012553:	c3                   	ret    

c0012554 <Filesystem::Filesystem()>:
c0012554:	ba bc 72 02 c0       	mov    edx,0xc00272bc
c0012559:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001255d:	89 10                	mov    DWORD PTR [eax],edx
c001255f:	8b 15 68 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a568
c0012565:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012569:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001256c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012570:	a3 68 a5 02 c0       	mov    ds:0xc002a568,eax
c0012575:	90                   	nop
c0012576:	c3                   	ret    
c0012577:	90                   	nop

c0012578 <Filesystem::~Filesystem()>:
c0012578:	ba bc 72 02 c0       	mov    edx,0xc00272bc
c001257d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012581:	89 10                	mov    DWORD PTR [eax],edx
c0012583:	90                   	nop
c0012584:	c3                   	ret    
c0012585:	90                   	nop

c0012586 <Filesystem::~Filesystem()>:
c0012586:	83 ec 0c             	sub    esp,0xc
c0012589:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001258d:	e8 e6 ff ff ff       	call   c0012578 <Filesystem::~Filesystem()>
c0012592:	83 c4 04             	add    esp,0x4
c0012595:	83 ec 08             	sub    esp,0x8
c0012598:	6a 08                	push   0x8
c001259a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001259e:	e8 cc fb ff ff       	call   c001216f <operator delete(void*, unsigned long)>
c00125a3:	83 c4 10             	add    esp,0x10
c00125a6:	83 c4 0c             	add    esp,0xc
c00125a9:	c3                   	ret    

c00125aa <initVFS()>:
c00125aa:	83 ec 18             	sub    esp,0x18
c00125ad:	6a 08                	push   0x8
c00125af:	e8 ac fb ff ff       	call   c0012160 <operator new(unsigned long)>
c00125b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00125b7:	e8 62 c1 00 00       	call   c001e71e <FAT::FAT()>
c00125bc:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00125c3:	e8 98 fb ff ff       	call   c0012160 <operator new(unsigned long)>
c00125c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00125cb:	e8 c4 d3 00 00       	call   c001f994 <ISO9660::ISO9660()>
c00125d0:	83 c4 1c             	add    esp,0x1c
c00125d3:	c3                   	ret    

c00125d4 <standardiseFiles(char*, char const*, char const*)>:
c00125d4:	55                   	push   ebp
c00125d5:	57                   	push   edi
c00125d6:	56                   	push   esi
c00125d7:	53                   	push   ebx
c00125d8:	81 ec 10 04 00 00    	sub    esp,0x410
c00125de:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00125e5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00125ec:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00125f3:	68 00 04 00 00       	push   0x400
c00125f8:	6a 00                	push   0x0
c00125fa:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00125fe:	56                   	push   esi
c00125ff:	e8 c8 e0 fe ff       	call   c00006cc <memset>
c0012604:	83 c4 10             	add    esp,0x10
c0012607:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001260b:	75 0b                	jne    c0012618 <standardiseFiles(char*, char const*, char const*)+0x44>
c001260d:	50                   	push   eax
c001260e:	50                   	push   eax
c001260f:	57                   	push   edi
c0012610:	56                   	push   esi
c0012611:	e8 55 e1 fe ff       	call   c000076b <strcpy>
c0012616:	eb 41                	jmp    c0012659 <standardiseFiles(char*, char const*, char const*)+0x85>
c0012618:	8a 07                	mov    al,BYTE PTR [edi]
c001261a:	3c 5c                	cmp    al,0x5c
c001261c:	74 04                	je     c0012622 <standardiseFiles(char*, char const*, char const*)+0x4e>
c001261e:	3c 2f                	cmp    al,0x2f
c0012620:	75 18                	jne    c001263a <standardiseFiles(char*, char const*, char const*)+0x66>
c0012622:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012625:	3c 60                	cmp    al,0x60
c0012627:	7e 03                	jle    c001262c <standardiseFiles(char*, char const*, char const*)+0x58>
c0012629:	83 e8 20             	sub    eax,0x20
c001262c:	88 04 24             	mov    BYTE PTR [esp],al
c001262f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012636:	50                   	push   eax
c0012637:	50                   	push   eax
c0012638:	eb 18                	jmp    c0012652 <standardiseFiles(char*, char const*, char const*)+0x7e>
c001263a:	50                   	push   eax
c001263b:	50                   	push   eax
c001263c:	55                   	push   ebp
c001263d:	56                   	push   esi
c001263e:	e8 28 e1 fe ff       	call   c000076b <strcpy>
c0012643:	5a                   	pop    edx
c0012644:	59                   	pop    ecx
c0012645:	68 cc 85 02 c0       	push   0xc00285cc
c001264a:	56                   	push   esi
c001264b:	e8 d2 e1 fe ff       	call   c0000822 <strcat>
c0012650:	5d                   	pop    ebp
c0012651:	58                   	pop    eax
c0012652:	57                   	push   edi
c0012653:	56                   	push   esi
c0012654:	e8 c9 e1 fe ff       	call   c0000822 <strcat>
c0012659:	83 c4 10             	add    esp,0x10
c001265c:	8a 04 24             	mov    al,BYTE PTR [esp]
c001265f:	3c 60                	cmp    al,0x60
c0012661:	7e 03                	jle    c0012666 <standardiseFiles(char*, char const*, char const*)+0x92>
c0012663:	83 e8 20             	sub    eax,0x20
c0012666:	88 04 24             	mov    BYTE PTR [esp],al
c0012669:	88 03                	mov    BYTE PTR [ebx],al
c001266b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012672:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012678:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001267c:	bf 03 00 00 00       	mov    edi,0x3
c0012681:	b8 03 00 00 00       	mov    eax,0x3
c0012686:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012689:	84 d2                	test   dl,dl
c001268b:	0f 84 91 00 00 00    	je     c0012722 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012691:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012694:	80 fa 5c             	cmp    dl,0x5c
c0012697:	74 05                	je     c001269e <standardiseFiles(char*, char const*, char const*)+0xca>
c0012699:	80 fa 2f             	cmp    dl,0x2f
c001269c:	75 12                	jne    c00126b0 <standardiseFiles(char*, char const*, char const*)+0xdc>
c001269e:	89 c5                	mov    ebp,eax
c00126a0:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00126a5:	74 09                	je     c00126b0 <standardiseFiles(char*, char const*, char const*)+0xdc>
c00126a7:	40                   	inc    eax
c00126a8:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00126ac:	89 cf                	mov    edi,ecx
c00126ae:	eb d6                	jmp    c0012686 <standardiseFiles(char*, char const*, char const*)+0xb2>
c00126b0:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00126b5:	75 5b                	jne    c0012712 <standardiseFiles(char*, char const*, char const*)+0x13e>
c00126b7:	80 fa 2e             	cmp    dl,0x2e
c00126ba:	75 56                	jne    c0012712 <standardiseFiles(char*, char const*, char const*)+0x13e>
c00126bc:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00126c0:	74 19                	je     c00126db <standardiseFiles(char*, char const*, char const*)+0x107>
c00126c2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00126c7:	74 53                	je     c001271c <standardiseFiles(char*, char const*, char const*)+0x148>
c00126c9:	89 f9                	mov    ecx,edi
c00126cb:	41                   	inc    ecx
c00126cc:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00126cf:	80 fa 2f             	cmp    dl,0x2f
c00126d2:	74 f7                	je     c00126cb <standardiseFiles(char*, char const*, char const*)+0xf7>
c00126d4:	80 fa 5c             	cmp    dl,0x5c
c00126d7:	74 f2                	je     c00126cb <standardiseFiles(char*, char const*, char const*)+0xf7>
c00126d9:	eb d1                	jmp    c00126ac <standardiseFiles(char*, char const*, char const*)+0xd8>
c00126db:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00126e0:	74 3a                	je     c001271c <standardiseFiles(char*, char const*, char const*)+0x148>
c00126e2:	83 f8 03             	cmp    eax,0x3
c00126e5:	74 c5                	je     c00126ac <standardiseFiles(char*, char const*, char const*)+0xd8>
c00126e7:	41                   	inc    ecx
c00126e8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00126eb:	80 fa 2f             	cmp    dl,0x2f
c00126ee:	74 f7                	je     c00126e7 <standardiseFiles(char*, char const*, char const*)+0x113>
c00126f0:	80 fa 5c             	cmp    dl,0x5c
c00126f3:	74 f2                	je     c00126e7 <standardiseFiles(char*, char const*, char const*)+0x113>
c00126f5:	48                   	dec    eax
c00126f6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00126fa:	75 06                	jne    c0012702 <standardiseFiles(char*, char const*, char const*)+0x12e>
c00126fc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012700:	eb f3                	jmp    c00126f5 <standardiseFiles(char*, char const*, char const*)+0x121>
c0012702:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012706:	74 07                	je     c001270f <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012708:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001270c:	48                   	dec    eax
c001270d:	eb f3                	jmp    c0012702 <standardiseFiles(char*, char const*, char const*)+0x12e>
c001270f:	40                   	inc    eax
c0012710:	eb 9a                	jmp    c00126ac <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012712:	80 fa 2f             	cmp    dl,0x2f
c0012715:	74 95                	je     c00126ac <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012717:	80 fa 5c             	cmp    dl,0x5c
c001271a:	74 90                	je     c00126ac <standardiseFiles(char*, char const*, char const*)+0xd8>
c001271c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c001271f:	40                   	inc    eax
c0012720:	eb 8a                	jmp    c00126ac <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012722:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012726:	83 ec 0c             	sub    esp,0xc
c0012729:	53                   	push   ebx
c001272a:	e8 ba df fe ff       	call   c00006e9 <strlen>
c001272f:	83 c4 10             	add    esp,0x10
c0012732:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012737:	75 26                	jne    c001275f <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012739:	83 ec 0c             	sub    esp,0xc
c001273c:	53                   	push   ebx
c001273d:	e8 a7 df fe ff       	call   c00006e9 <strlen>
c0012742:	83 c4 10             	add    esp,0x10
c0012745:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001274a:	74 26                	je     c0012772 <standardiseFiles(char*, char const*, char const*)+0x19e>
c001274c:	83 ec 0c             	sub    esp,0xc
c001274f:	53                   	push   ebx
c0012750:	e8 94 df fe ff       	call   c00006e9 <strlen>
c0012755:	83 c4 10             	add    esp,0x10
c0012758:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001275d:	eb c7                	jmp    c0012726 <standardiseFiles(char*, char const*, char const*)+0x152>
c001275f:	83 ec 0c             	sub    esp,0xc
c0012762:	53                   	push   ebx
c0012763:	e8 81 df fe ff       	call   c00006e9 <strlen>
c0012768:	83 c4 10             	add    esp,0x10
c001276b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012770:	74 c7                	je     c0012739 <standardiseFiles(char*, char const*, char const*)+0x165>
c0012772:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012778:	5b                   	pop    ebx
c0012779:	5e                   	pop    esi
c001277a:	5f                   	pop    edi
c001277b:	5d                   	pop    ebp
c001277c:	c3                   	ret    
c001277d:	90                   	nop

c001277e <File::File(char const*, Process*)>:
c001277e:	83 ec 0c             	sub    esp,0xc
c0012781:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012785:	83 ec 08             	sub    esp,0x8
c0012788:	6a 00                	push   0x0
c001278a:	50                   	push   eax
c001278b:	e8 ea e6 ff ff       	call   c0010e7a <UnixFile::UnixFile(int)>
c0012790:	83 c4 10             	add    esp,0x10
c0012793:	ba 20 73 02 c0       	mov    edx,0xc0027320
c0012798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001279c:	89 10                	mov    DWORD PTR [eax],edx
c001279e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127a2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00127a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127ac:	83 c0 0d             	add    eax,0xd
c00127af:	83 ec 04             	sub    esp,0x4
c00127b2:	52                   	push   edx
c00127b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127b7:	50                   	push   eax
c00127b8:	e8 17 fe ff ff       	call   c00125d4 <standardiseFiles(char*, char const*, char const*)>
c00127bd:	83 c4 10             	add    esp,0x10
c00127c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127c4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00127c7:	8d 50 bf             	lea    edx,[eax-0x41]
c00127ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127ce:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00127d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127d8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00127dc:	90                   	nop
c00127dd:	83 c4 0c             	add    esp,0xc
c00127e0:	c3                   	ret    
c00127e1:	90                   	nop

c00127e2 <File::open(FileOpenMode)>:
c00127e2:	53                   	push   ebx
c00127e3:	b8 0b 00 00 00       	mov    eax,0xb
c00127e8:	83 ec 08             	sub    esp,0x8
c00127eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00127ef:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00127f6:	80 fa 19             	cmp    dl,0x19
c00127f9:	77 40                	ja     c001283b <File::open(FileOpenMode)+0x59>
c00127fb:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c0012802:	85 d2                	test   edx,edx
c0012804:	74 35                	je     c001283b <File::open(FileOpenMode)+0x59>
c0012806:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001280c:	85 d2                	test   edx,edx
c001280e:	74 2b                	je     c001283b <File::open(FileOpenMode)+0x59>
c0012810:	b8 06 00 00 00       	mov    eax,0x6
c0012815:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012819:	75 20                	jne    c001283b <File::open(FileOpenMode)+0x59>
c001281b:	8b 02                	mov    eax,DWORD PTR [edx]
c001281d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012823:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012827:	51                   	push   ecx
c0012828:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001282b:	51                   	push   ecx
c001282c:	52                   	push   edx
c001282d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012830:	83 c4 10             	add    esp,0x10
c0012833:	85 c0                	test   eax,eax
c0012835:	75 04                	jne    c001283b <File::open(FileOpenMode)+0x59>
c0012837:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001283b:	83 c4 08             	add    esp,0x8
c001283e:	5b                   	pop    ebx
c001283f:	c3                   	ret    

c0012840 <File::close()>:
c0012840:	53                   	push   ebx
c0012841:	b8 0b 00 00 00       	mov    eax,0xb
c0012846:	83 ec 08             	sub    esp,0x8
c0012849:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001284d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012854:	80 fa 19             	cmp    dl,0x19
c0012857:	77 41                	ja     c001289a <File::close()+0x5a>
c0012859:	8b 1c 95 00 aa 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd5600]
c0012860:	85 db                	test   ebx,ebx
c0012862:	74 36                	je     c001289a <File::close()+0x5a>
c0012864:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001286b:	74 2d                	je     c001289a <File::close()+0x5a>
c001286d:	b8 05 00 00 00       	mov    eax,0x5
c0012872:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012876:	74 22                	je     c001289a <File::close()+0x5a>
c0012878:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001287c:	8b 04 95 00 aa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5600]
c0012883:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012889:	53                   	push   ebx
c001288a:	53                   	push   ebx
c001288b:	8b 10                	mov    edx,DWORD PTR [eax]
c001288d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012893:	50                   	push   eax
c0012894:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012897:	83 c4 10             	add    esp,0x10
c001289a:	83 c4 08             	add    esp,0x8
c001289d:	5b                   	pop    ebx
c001289e:	c3                   	ret    
c001289f:	90                   	nop

c00128a0 <File::seek(unsigned long long)>:
c00128a0:	56                   	push   esi
c00128a1:	53                   	push   ebx
c00128a2:	b8 0b 00 00 00       	mov    eax,0xb
c00128a7:	51                   	push   ecx
c00128a8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00128ac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00128b0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00128b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128bb:	80 fa 19             	cmp    dl,0x19
c00128be:	77 31                	ja     c00128f1 <File::seek(unsigned long long)+0x51>
c00128c0:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c00128c7:	85 d2                	test   edx,edx
c00128c9:	74 26                	je     c00128f1 <File::seek(unsigned long long)+0x51>
c00128cb:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00128d1:	85 d2                	test   edx,edx
c00128d3:	74 1c                	je     c00128f1 <File::seek(unsigned long long)+0x51>
c00128d5:	b8 05 00 00 00       	mov    eax,0x5
c00128da:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00128de:	74 11                	je     c00128f1 <File::seek(unsigned long long)+0x51>
c00128e0:	8b 02                	mov    eax,DWORD PTR [edx]
c00128e2:	53                   	push   ebx
c00128e3:	51                   	push   ecx
c00128e4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00128ea:	52                   	push   edx
c00128eb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00128ee:	83 c4 10             	add    esp,0x10
c00128f1:	5a                   	pop    edx
c00128f2:	5b                   	pop    ebx
c00128f3:	5e                   	pop    esi
c00128f4:	c3                   	ret    
c00128f5:	90                   	nop

c00128f6 <File::tell(unsigned long long*)>:
c00128f6:	83 ec 0c             	sub    esp,0xc
c00128f9:	b8 0b 00 00 00       	mov    eax,0xb
c00128fe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012902:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012909:	80 fa 19             	cmp    dl,0x19
c001290c:	77 34                	ja     c0012942 <File::tell(unsigned long long*)+0x4c>
c001290e:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c0012915:	85 d2                	test   edx,edx
c0012917:	74 29                	je     c0012942 <File::tell(unsigned long long*)+0x4c>
c0012919:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001291f:	85 d2                	test   edx,edx
c0012921:	74 1f                	je     c0012942 <File::tell(unsigned long long*)+0x4c>
c0012923:	b8 05 00 00 00       	mov    eax,0x5
c0012928:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001292c:	74 14                	je     c0012942 <File::tell(unsigned long long*)+0x4c>
c001292e:	50                   	push   eax
c001292f:	8b 02                	mov    eax,DWORD PTR [edx]
c0012931:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012935:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001293b:	52                   	push   edx
c001293c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001293f:	83 c4 10             	add    esp,0x10
c0012942:	83 c4 0c             	add    esp,0xc
c0012945:	c3                   	ret    

c0012946 <File::rewind()>:
c0012946:	83 ec 10             	sub    esp,0x10
c0012949:	6a 00                	push   0x0
c001294b:	6a 00                	push   0x0
c001294d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012951:	e8 4a ff ff ff       	call   c00128a0 <File::seek(unsigned long long)>
c0012956:	83 c4 1c             	add    esp,0x1c
c0012959:	c3                   	ret    

c001295a <File::unlink()>:
c001295a:	83 ec 0c             	sub    esp,0xc
c001295d:	b8 0b 00 00 00       	mov    eax,0xb
c0012962:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012966:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001296d:	80 f9 19             	cmp    cl,0x19
c0012970:	77 2f                	ja     c00129a1 <File::unlink()+0x47>
c0012972:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012979:	85 c9                	test   ecx,ecx
c001297b:	74 24                	je     c00129a1 <File::unlink()+0x47>
c001297d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012983:	85 c9                	test   ecx,ecx
c0012985:	74 1a                	je     c00129a1 <File::unlink()+0x47>
c0012987:	b8 06 00 00 00       	mov    eax,0x6
c001298c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012990:	75 0f                	jne    c00129a1 <File::unlink()+0x47>
c0012992:	83 c2 0d             	add    edx,0xd
c0012995:	50                   	push   eax
c0012996:	50                   	push   eax
c0012997:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012999:	52                   	push   edx
c001299a:	51                   	push   ecx
c001299b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001299e:	83 c4 10             	add    esp,0x10
c00129a1:	83 c4 0c             	add    esp,0xc
c00129a4:	c3                   	ret    
c00129a5:	90                   	nop

c00129a6 <File::rename(char const*)>:
c00129a6:	83 ec 0c             	sub    esp,0xc
c00129a9:	b8 0b 00 00 00       	mov    eax,0xb
c00129ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00129b2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00129b9:	80 f9 19             	cmp    cl,0x19
c00129bc:	77 32                	ja     c00129f0 <File::rename(char const*)+0x4a>
c00129be:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c00129c5:	85 c9                	test   ecx,ecx
c00129c7:	74 27                	je     c00129f0 <File::rename(char const*)+0x4a>
c00129c9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00129cf:	85 c9                	test   ecx,ecx
c00129d1:	74 1d                	je     c00129f0 <File::rename(char const*)+0x4a>
c00129d3:	b8 06 00 00 00       	mov    eax,0x6
c00129d8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00129dc:	75 12                	jne    c00129f0 <File::rename(char const*)+0x4a>
c00129de:	83 c2 0d             	add    edx,0xd
c00129e1:	50                   	push   eax
c00129e2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00129e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00129e8:	52                   	push   edx
c00129e9:	51                   	push   ecx
c00129ea:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00129ed:	83 c4 10             	add    esp,0x10
c00129f0:	83 c4 0c             	add    esp,0xc
c00129f3:	c3                   	ret    

c00129f4 <File::chfatattr(unsigned char, unsigned char)>:
c00129f4:	57                   	push   edi
c00129f5:	b8 0b 00 00 00       	mov    eax,0xb
c00129fa:	56                   	push   esi
c00129fb:	53                   	push   ebx
c00129fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a00:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012a04:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a0b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012a0f:	80 f9 19             	cmp    cl,0x19
c0012a12:	77 37                	ja     c0012a4b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a14:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012a1b:	85 c9                	test   ecx,ecx
c0012a1d:	74 2c                	je     c0012a4b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a1f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a25:	85 c9                	test   ecx,ecx
c0012a27:	74 22                	je     c0012a4b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a29:	b8 06 00 00 00       	mov    eax,0x6
c0012a2e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a32:	75 17                	jne    c0012a4b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012a34:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012a36:	89 f0                	mov    eax,esi
c0012a38:	83 c2 0d             	add    edx,0xd
c0012a3b:	0f b6 f0             	movzx  esi,al
c0012a3e:	0f b6 db             	movzx  ebx,bl
c0012a41:	56                   	push   esi
c0012a42:	53                   	push   ebx
c0012a43:	52                   	push   edx
c0012a44:	51                   	push   ecx
c0012a45:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012a48:	83 c4 10             	add    esp,0x10
c0012a4b:	5b                   	pop    ebx
c0012a4c:	5e                   	pop    esi
c0012a4d:	5f                   	pop    edi
c0012a4e:	c3                   	ret    
c0012a4f:	90                   	nop

c0012a50 <File::exists()>:
c0012a50:	83 ec 0c             	sub    esp,0xc
c0012a53:	31 c0                	xor    eax,eax
c0012a55:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a59:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012a60:	80 f9 19             	cmp    cl,0x19
c0012a63:	77 24                	ja     c0012a89 <File::exists()+0x39>
c0012a65:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012a6c:	85 c9                	test   ecx,ecx
c0012a6e:	74 19                	je     c0012a89 <File::exists()+0x39>
c0012a70:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012a76:	85 c9                	test   ecx,ecx
c0012a78:	74 0f                	je     c0012a89 <File::exists()+0x39>
c0012a7a:	83 c2 0d             	add    edx,0xd
c0012a7d:	50                   	push   eax
c0012a7e:	50                   	push   eax
c0012a7f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012a81:	52                   	push   edx
c0012a82:	51                   	push   ecx
c0012a83:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012a86:	83 c4 10             	add    esp,0x10
c0012a89:	83 c4 0c             	add    esp,0xc
c0012a8c:	c3                   	ret    
c0012a8d:	90                   	nop

c0012a8e <File::stat(unsigned long long*, bool*)>:
c0012a8e:	56                   	push   esi
c0012a8f:	53                   	push   ebx
c0012a90:	50                   	push   eax
c0012a91:	b8 0b 00 00 00       	mov    eax,0xb
c0012a96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012a9a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012a9e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012aa5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012aa9:	80 f9 19             	cmp    cl,0x19
c0012aac:	77 3d                	ja     c0012aeb <File::stat(unsigned long long*, bool*)+0x5d>
c0012aae:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012ab5:	85 c9                	test   ecx,ecx
c0012ab7:	74 32                	je     c0012aeb <File::stat(unsigned long long*, bool*)+0x5d>
c0012ab9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012abf:	85 c9                	test   ecx,ecx
c0012ac1:	74 28                	je     c0012aeb <File::stat(unsigned long long*, bool*)+0x5d>
c0012ac3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ac5:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ac9:	74 13                	je     c0012ade <File::stat(unsigned long long*, bool*)+0x50>
c0012acb:	83 ec 04             	sub    esp,0x4
c0012ace:	56                   	push   esi
c0012acf:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012ad5:	51                   	push   ecx
c0012ad6:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012ad9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012adc:	eb 0a                	jmp    c0012ae8 <File::stat(unsigned long long*, bool*)+0x5a>
c0012ade:	53                   	push   ebx
c0012adf:	83 c2 0d             	add    edx,0xd
c0012ae2:	56                   	push   esi
c0012ae3:	52                   	push   edx
c0012ae4:	51                   	push   ecx
c0012ae5:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012ae8:	83 c4 10             	add    esp,0x10
c0012aeb:	5a                   	pop    edx
c0012aec:	5b                   	pop    ebx
c0012aed:	5e                   	pop    esi
c0012aee:	c3                   	ret    

c0012aef <getcwd(Process*, char*, int)>:
c0012aef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012af3:	31 c0                	xor    eax,eax
c0012af5:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012af8:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012afc:	7d 15                	jge    c0012b13 <getcwd(Process*, char*, int)+0x24>
c0012afe:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b02:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012b09:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012b0c:	84 c9                	test   cl,cl
c0012b0e:	74 06                	je     c0012b16 <getcwd(Process*, char*, int)+0x27>
c0012b10:	40                   	inc    eax
c0012b11:	eb e2                	jmp    c0012af5 <getcwd(Process*, char*, int)+0x6>
c0012b13:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012b16:	31 c0                	xor    eax,eax
c0012b18:	c3                   	ret    

c0012b19 <setcwd(Process*, char*)>:
c0012b19:	55                   	push   ebp
c0012b1a:	57                   	push   edi
c0012b1b:	56                   	push   esi
c0012b1c:	53                   	push   ebx
c0012b1d:	81 ec 20 02 00 00    	sub    esp,0x220
c0012b23:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012b2a:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012b30:	57                   	push   edi
c0012b31:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012b38:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012b3c:	56                   	push   esi
c0012b3d:	e8 92 fa ff ff       	call   c00125d4 <standardiseFiles(char*, char const*, char const*)>
c0012b42:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b45:	e8 9f db fe ff       	call   c00006e9 <strlen>
c0012b4a:	83 c4 10             	add    esp,0x10
c0012b4d:	83 f8 02             	cmp    eax,0x2
c0012b50:	77 17                	ja     c0012b69 <setcwd(Process*, char*)+0x50>
c0012b52:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012b57:	83 e8 41             	sub    eax,0x41
c0012b5a:	83 f8 19             	cmp    eax,0x19
c0012b5d:	76 24                	jbe    c0012b83 <setcwd(Process*, char*)+0x6a>
c0012b5f:	b8 03 00 00 00       	mov    eax,0x3
c0012b64:	e9 cb 00 00 00       	jmp    c0012c34 <setcwd(Process*, char*)+0x11b>
c0012b69:	83 ec 0c             	sub    esp,0xc
c0012b6c:	56                   	push   esi
c0012b6d:	e8 77 db fe ff       	call   c00006e9 <strlen>
c0012b72:	83 c4 10             	add    esp,0x10
c0012b75:	83 f8 03             	cmp    eax,0x3
c0012b78:	75 33                	jne    c0012bad <setcwd(Process*, char*)+0x94>
c0012b7a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012b7f:	75 2c                	jne    c0012bad <setcwd(Process*, char*)+0x94>
c0012b81:	eb cf                	jmp    c0012b52 <setcwd(Process*, char*)+0x39>
c0012b83:	8b 14 85 00 aa 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5600]
c0012b8a:	b8 05 00 00 00       	mov    eax,0x5
c0012b8f:	85 d2                	test   edx,edx
c0012b91:	0f 84 9d 00 00 00    	je     c0012c34 <setcwd(Process*, char*)+0x11b>
c0012b97:	b8 06 00 00 00       	mov    eax,0x6
c0012b9c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012ba3:	0f 84 8b 00 00 00    	je     c0012c34 <setcwd(Process*, char*)+0x11b>
c0012ba9:	51                   	push   ecx
c0012baa:	51                   	push   ecx
c0012bab:	eb 7b                	jmp    c0012c28 <setcwd(Process*, char*)+0x10f>
c0012bad:	83 ec 0c             	sub    esp,0xc
c0012bb0:	68 14 01 00 00       	push   0x114
c0012bb5:	e8 a6 f5 ff ff       	call   c0012160 <operator new(unsigned long)>
c0012bba:	83 c4 0c             	add    esp,0xc
c0012bbd:	89 c3                	mov    ebx,eax
c0012bbf:	55                   	push   ebp
c0012bc0:	56                   	push   esi
c0012bc1:	50                   	push   eax
c0012bc2:	e8 b7 fb ff ff       	call   c001277e <File::File(char const*, Process*)>
c0012bc7:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012bcc:	83 c4 0c             	add    esp,0xc
c0012bcf:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012bd3:	50                   	push   eax
c0012bd4:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012bd8:	50                   	push   eax
c0012bd9:	53                   	push   ebx
c0012bda:	e8 af fe ff ff       	call   c0012a8e <File::stat(unsigned long long*, bool*)>
c0012bdf:	83 c4 10             	add    esp,0x10
c0012be2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012be4:	83 f8 02             	cmp    eax,0x2
c0012be7:	75 09                	jne    c0012bf2 <setcwd(Process*, char*)+0xd9>
c0012be9:	83 ec 0c             	sub    esp,0xc
c0012bec:	53                   	push   ebx
c0012bed:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012bf0:	eb 0d                	jmp    c0012bff <setcwd(Process*, char*)+0xe6>
c0012bf2:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012bf5:	85 c0                	test   eax,eax
c0012bf7:	74 10                	je     c0012c09 <setcwd(Process*, char*)+0xf0>
c0012bf9:	83 ec 0c             	sub    esp,0xc
c0012bfc:	53                   	push   ebx
c0012bfd:	ff d2                	call   edx
c0012bff:	83 c4 10             	add    esp,0x10
c0012c02:	b8 01 00 00 00       	mov    eax,0x1
c0012c07:	eb 2b                	jmp    c0012c34 <setcwd(Process*, char*)+0x11b>
c0012c09:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012c0e:	75 10                	jne    c0012c20 <setcwd(Process*, char*)+0x107>
c0012c10:	83 ec 0c             	sub    esp,0xc
c0012c13:	53                   	push   ebx
c0012c14:	ff d2                	call   edx
c0012c16:	83 c4 10             	add    esp,0x10
c0012c19:	b8 02 00 00 00       	mov    eax,0x2
c0012c1e:	eb 14                	jmp    c0012c34 <setcwd(Process*, char*)+0x11b>
c0012c20:	83 ec 0c             	sub    esp,0xc
c0012c23:	53                   	push   ebx
c0012c24:	ff d2                	call   edx
c0012c26:	58                   	pop    eax
c0012c27:	5a                   	pop    edx
c0012c28:	56                   	push   esi
c0012c29:	57                   	push   edi
c0012c2a:	e8 3c db fe ff       	call   c000076b <strcpy>
c0012c2f:	83 c4 10             	add    esp,0x10
c0012c32:	31 c0                	xor    eax,eax
c0012c34:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012c3a:	5b                   	pop    ebx
c0012c3b:	5e                   	pop    esi
c0012c3c:	5f                   	pop    edi
c0012c3d:	5d                   	pop    ebp
c0012c3e:	c3                   	ret    
c0012c3f:	90                   	nop

c0012c40 <Directory::Directory(char const*, Process*)>:
c0012c40:	83 ec 0c             	sub    esp,0xc
c0012c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c47:	83 ec 08             	sub    esp,0x8
c0012c4a:	6a 00                	push   0x0
c0012c4c:	50                   	push   eax
c0012c4d:	e8 28 e2 ff ff       	call   c0010e7a <UnixFile::UnixFile(int)>
c0012c52:	83 c4 10             	add    esp,0x10
c0012c55:	ba 3c 73 02 c0       	mov    edx,0xc002733c
c0012c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c5e:	89 10                	mov    DWORD PTR [eax],edx
c0012c60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c64:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c6e:	83 c0 0d             	add    eax,0xd
c0012c71:	83 ec 04             	sub    esp,0x4
c0012c74:	52                   	push   edx
c0012c75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c79:	50                   	push   eax
c0012c7a:	e8 55 f9 ff ff       	call   c00125d4 <standardiseFiles(char*, char const*, char const*)>
c0012c7f:	83 c4 10             	add    esp,0x10
c0012c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c86:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c89:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c90:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c9a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012c9e:	90                   	nop
c0012c9f:	83 c4 0c             	add    esp,0xc
c0012ca2:	c3                   	ret    
c0012ca3:	90                   	nop

c0012ca4 <Directory::open()>:
c0012ca4:	53                   	push   ebx
c0012ca5:	b8 0b 00 00 00       	mov    eax,0xb
c0012caa:	83 ec 08             	sub    esp,0x8
c0012cad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012cb1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012cb8:	80 fa 19             	cmp    dl,0x19
c0012cbb:	77 3d                	ja     c0012cfa <Directory::open()+0x56>
c0012cbd:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c0012cc4:	85 d2                	test   edx,edx
c0012cc6:	74 32                	je     c0012cfa <Directory::open()+0x56>
c0012cc8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012cce:	85 d2                	test   edx,edx
c0012cd0:	74 28                	je     c0012cfa <Directory::open()+0x56>
c0012cd2:	b8 06 00 00 00       	mov    eax,0x6
c0012cd7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012cdb:	75 1d                	jne    c0012cfa <Directory::open()+0x56>
c0012cdd:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012ce3:	50                   	push   eax
c0012ce4:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ce6:	51                   	push   ecx
c0012ce7:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012cea:	51                   	push   ecx
c0012ceb:	52                   	push   edx
c0012cec:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012cef:	83 c4 10             	add    esp,0x10
c0012cf2:	85 c0                	test   eax,eax
c0012cf4:	75 04                	jne    c0012cfa <Directory::open()+0x56>
c0012cf6:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012cfa:	83 c4 08             	add    esp,0x8
c0012cfd:	5b                   	pop    ebx
c0012cfe:	c3                   	ret    
c0012cff:	90                   	nop

c0012d00 <Directory::close()>:
c0012d00:	53                   	push   ebx
c0012d01:	b8 0b 00 00 00       	mov    eax,0xb
c0012d06:	83 ec 08             	sub    esp,0x8
c0012d09:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d0d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d14:	80 fa 19             	cmp    dl,0x19
c0012d17:	77 41                	ja     c0012d5a <Directory::close()+0x5a>
c0012d19:	8b 1c 95 00 aa 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd5600]
c0012d20:	85 db                	test   ebx,ebx
c0012d22:	74 36                	je     c0012d5a <Directory::close()+0x5a>
c0012d24:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012d2b:	74 2d                	je     c0012d5a <Directory::close()+0x5a>
c0012d2d:	b8 05 00 00 00       	mov    eax,0x5
c0012d32:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d36:	74 22                	je     c0012d5a <Directory::close()+0x5a>
c0012d38:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d3c:	8b 04 95 00 aa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5600]
c0012d43:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d49:	53                   	push   ebx
c0012d4a:	53                   	push   ebx
c0012d4b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d4d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d53:	50                   	push   eax
c0012d54:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0012d57:	83 c4 10             	add    esp,0x10
c0012d5a:	83 c4 08             	add    esp,0x8
c0012d5d:	5b                   	pop    ebx
c0012d5e:	c3                   	ret    
c0012d5f:	90                   	nop

c0012d60 <Directory::unlink()>:
c0012d60:	83 ec 0c             	sub    esp,0xc
c0012d63:	b8 0b 00 00 00       	mov    eax,0xb
c0012d68:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012d6c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012d73:	80 f9 19             	cmp    cl,0x19
c0012d76:	77 2f                	ja     c0012da7 <Directory::unlink()+0x47>
c0012d78:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012d7f:	85 c9                	test   ecx,ecx
c0012d81:	74 24                	je     c0012da7 <Directory::unlink()+0x47>
c0012d83:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012d89:	85 c9                	test   ecx,ecx
c0012d8b:	74 1a                	je     c0012da7 <Directory::unlink()+0x47>
c0012d8d:	b8 06 00 00 00       	mov    eax,0x6
c0012d92:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d96:	75 0f                	jne    c0012da7 <Directory::unlink()+0x47>
c0012d98:	83 c2 0d             	add    edx,0xd
c0012d9b:	50                   	push   eax
c0012d9c:	50                   	push   eax
c0012d9d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d9f:	52                   	push   edx
c0012da0:	51                   	push   ecx
c0012da1:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012da4:	83 c4 10             	add    esp,0x10
c0012da7:	83 c4 0c             	add    esp,0xc
c0012daa:	c3                   	ret    
c0012dab:	90                   	nop

c0012dac <Directory::rename(char const*)>:
c0012dac:	83 ec 0c             	sub    esp,0xc
c0012daf:	b8 0b 00 00 00       	mov    eax,0xb
c0012db4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012db8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012dbf:	80 f9 19             	cmp    cl,0x19
c0012dc2:	77 32                	ja     c0012df6 <Directory::rename(char const*)+0x4a>
c0012dc4:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012dcb:	85 c9                	test   ecx,ecx
c0012dcd:	74 27                	je     c0012df6 <Directory::rename(char const*)+0x4a>
c0012dcf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012dd5:	85 c9                	test   ecx,ecx
c0012dd7:	74 1d                	je     c0012df6 <Directory::rename(char const*)+0x4a>
c0012dd9:	b8 06 00 00 00       	mov    eax,0x6
c0012dde:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012de2:	75 12                	jne    c0012df6 <Directory::rename(char const*)+0x4a>
c0012de4:	83 c2 0d             	add    edx,0xd
c0012de7:	50                   	push   eax
c0012de8:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012dea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012dee:	52                   	push   edx
c0012def:	51                   	push   ecx
c0012df0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012df3:	83 c4 10             	add    esp,0x10
c0012df6:	83 c4 0c             	add    esp,0xc
c0012df9:	c3                   	ret    

c0012dfa <Directory::exists()>:
c0012dfa:	83 ec 0c             	sub    esp,0xc
c0012dfd:	31 c0                	xor    eax,eax
c0012dff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e03:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e0a:	80 f9 19             	cmp    cl,0x19
c0012e0d:	77 24                	ja     c0012e33 <Directory::exists()+0x39>
c0012e0f:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012e16:	85 c9                	test   ecx,ecx
c0012e18:	74 19                	je     c0012e33 <Directory::exists()+0x39>
c0012e1a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e20:	85 c9                	test   ecx,ecx
c0012e22:	74 0f                	je     c0012e33 <Directory::exists()+0x39>
c0012e24:	83 c2 0d             	add    edx,0xd
c0012e27:	50                   	push   eax
c0012e28:	50                   	push   eax
c0012e29:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e2b:	52                   	push   edx
c0012e2c:	51                   	push   ecx
c0012e2d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012e30:	83 c4 10             	add    esp,0x10
c0012e33:	83 c4 0c             	add    esp,0xc
c0012e36:	c3                   	ret    
c0012e37:	90                   	nop

c0012e38 <Directory::read(dirent*)>:
c0012e38:	83 ec 1c             	sub    esp,0x1c
c0012e3b:	b8 0b 00 00 00       	mov    eax,0xb
c0012e40:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012e44:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e4b:	80 fa 19             	cmp    dl,0x19
c0012e4e:	77 30                	ja     c0012e80 <Directory::read(dirent*)+0x48>
c0012e50:	8b 14 95 00 aa 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5600]
c0012e57:	85 d2                	test   edx,edx
c0012e59:	74 25                	je     c0012e80 <Directory::read(dirent*)+0x48>
c0012e5b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012e62:	74 1c                	je     c0012e80 <Directory::read(dirent*)+0x48>
c0012e64:	83 ec 0c             	sub    esp,0xc
c0012e67:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e69:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012e6d:	52                   	push   edx
c0012e6e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012e72:	6a 00                	push   0x0
c0012e74:	68 10 01 00 00       	push   0x110
c0012e79:	51                   	push   ecx
c0012e7a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012e7d:	83 c4 20             	add    esp,0x20
c0012e80:	83 c4 1c             	add    esp,0x1c
c0012e83:	c3                   	ret    

c0012e84 <Directory::create()>:
c0012e84:	83 ec 0c             	sub    esp,0xc
c0012e87:	b8 0b 00 00 00       	mov    eax,0xb
c0012e8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e90:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e97:	80 f9 19             	cmp    cl,0x19
c0012e9a:	77 2f                	ja     c0012ecb <Directory::create()+0x47>
c0012e9c:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c0012ea3:	85 c9                	test   ecx,ecx
c0012ea5:	74 24                	je     c0012ecb <Directory::create()+0x47>
c0012ea7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ead:	85 c9                	test   ecx,ecx
c0012eaf:	74 1a                	je     c0012ecb <Directory::create()+0x47>
c0012eb1:	b8 06 00 00 00       	mov    eax,0x6
c0012eb6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012eba:	75 0f                	jne    c0012ecb <Directory::create()+0x47>
c0012ebc:	83 c2 0d             	add    edx,0xd
c0012ebf:	50                   	push   eax
c0012ec0:	50                   	push   eax
c0012ec1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ec3:	52                   	push   edx
c0012ec4:	51                   	push   ecx
c0012ec5:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0012ec8:	83 c4 10             	add    esp,0x10
c0012ecb:	83 c4 0c             	add    esp,0xc
c0012ece:	c3                   	ret    
c0012ecf:	90                   	nop

c0012ed0 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0012ed0:	b8 0a 00 00 00       	mov    eax,0xa
c0012ed5:	c3                   	ret    

c0012ed6 <Bus::Bus(char const*)>:
c0012ed6:	83 ec 0c             	sub    esp,0xc
c0012ed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012edd:	83 ec 08             	sub    esp,0x8
c0012ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ee4:	50                   	push   eax
c0012ee5:	e8 60 09 00 00       	call   c001384a <Device::Device(char const*)>
c0012eea:	83 c4 10             	add    esp,0x10
c0012eed:	ba 58 73 02 c0       	mov    edx,0xc0027358
c0012ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ef6:	89 10                	mov    DWORD PTR [eax],edx
c0012ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012efc:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0012f06:	90                   	nop
c0012f07:	83 c4 0c             	add    esp,0xc
c0012f0a:	c3                   	ret    
c0012f0b:	90                   	nop

c0012f0c <Bus::~Bus()>:
c0012f0c:	83 ec 0c             	sub    esp,0xc
c0012f0f:	ba 58 73 02 c0       	mov    edx,0xc0027358
c0012f14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f18:	89 10                	mov    DWORD PTR [eax],edx
c0012f1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f1e:	83 ec 0c             	sub    esp,0xc
c0012f21:	50                   	push   eax
c0012f22:	e8 d5 05 00 00       	call   c00134fc <Device::~Device()>
c0012f27:	83 c4 10             	add    esp,0x10
c0012f2a:	90                   	nop
c0012f2b:	83 c4 0c             	add    esp,0xc
c0012f2e:	c3                   	ret    
c0012f2f:	90                   	nop

c0012f30 <Bus::~Bus()>:
c0012f30:	83 ec 0c             	sub    esp,0xc
c0012f33:	83 ec 0c             	sub    esp,0xc
c0012f36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f3a:	e8 cd ff ff ff       	call   c0012f0c <Bus::~Bus()>
c0012f3f:	83 c4 10             	add    esp,0x10
c0012f42:	83 ec 08             	sub    esp,0x8
c0012f45:	68 58 01 00 00       	push   0x158
c0012f4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f4e:	e8 1c f2 ff ff       	call   c001216f <operator delete(void*, unsigned long)>
c0012f53:	83 c4 10             	add    esp,0x10
c0012f56:	83 c4 0c             	add    esp,0xc
c0012f59:	c3                   	ret    

c0012f5a <Buzzer::Buzzer(char const*)>:
c0012f5a:	83 ec 0c             	sub    esp,0xc
c0012f5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f61:	83 ec 08             	sub    esp,0x8
c0012f64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f68:	50                   	push   eax
c0012f69:	e8 dc 08 00 00       	call   c001384a <Device::Device(char const*)>
c0012f6e:	83 c4 10             	add    esp,0x10
c0012f71:	ba 84 73 02 c0       	mov    edx,0xc0027384
c0012f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f7a:	89 10                	mov    DWORD PTR [eax],edx
c0012f7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f80:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0012f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f8e:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0012f98:	90                   	nop
c0012f99:	83 c4 0c             	add    esp,0xc
c0012f9c:	c3                   	ret    
c0012f9d:	90                   	nop

c0012f9e <Buzzer::~Buzzer()>:
c0012f9e:	83 ec 0c             	sub    esp,0xc
c0012fa1:	ba 84 73 02 c0       	mov    edx,0xc0027384
c0012fa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012faa:	89 10                	mov    DWORD PTR [eax],edx
c0012fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012fb0:	83 ec 0c             	sub    esp,0xc
c0012fb3:	50                   	push   eax
c0012fb4:	e8 43 05 00 00       	call   c00134fc <Device::~Device()>
c0012fb9:	83 c4 10             	add    esp,0x10
c0012fbc:	90                   	nop
c0012fbd:	83 c4 0c             	add    esp,0xc
c0012fc0:	c3                   	ret    
c0012fc1:	90                   	nop

c0012fc2 <Buzzer::~Buzzer()>:
c0012fc2:	83 ec 0c             	sub    esp,0xc
c0012fc5:	83 ec 0c             	sub    esp,0xc
c0012fc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fcc:	e8 cd ff ff ff       	call   c0012f9e <Buzzer::~Buzzer()>
c0012fd1:	83 c4 10             	add    esp,0x10
c0012fd4:	83 ec 08             	sub    esp,0x8
c0012fd7:	68 5c 01 00 00       	push   0x15c
c0012fdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fe0:	e8 8a f1 ff ff       	call   c001216f <operator delete(void*, unsigned long)>
c0012fe5:	83 c4 10             	add    esp,0x10
c0012fe8:	83 c4 0c             	add    esp,0xc
c0012feb:	c3                   	ret    

c0012fec <Buzzer::stop()>:
c0012fec:	83 ec 14             	sub    esp,0x14
c0012fef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ff3:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ff5:	6a 00                	push   0x0
c0012ff7:	50                   	push   eax
c0012ff8:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012ffb:	83 c4 1c             	add    esp,0x1c
c0012ffe:	c3                   	ret    

c0012fff <beepThread(void*)>:
c0012fff:	53                   	push   ebx
c0013000:	83 ec 08             	sub    esp,0x8
c0013003:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013007:	e8 36 89 00 00       	call   c001b942 <unlockScheduler()>
c001300c:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013011:	52                   	push   edx
c0013012:	52                   	push   edx
c0013013:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013019:	52                   	push   edx
c001301a:	50                   	push   eax
c001301b:	e8 68 8e 00 00       	call   c001be88 <nanoSleep(unsigned long long)>
c0013020:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013023:	e8 c4 ff ff ff       	call   c0012fec <Buzzer::stop()>
c0013028:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013030:	83 c4 18             	add    esp,0x18
c0013033:	5b                   	pop    ebx
c0013034:	e9 95 8d 00 00       	jmp    c001bdce <blockTask(TaskState)>
c0013039:	90                   	nop

c001303a <Buzzer::beep(int, int, bool)>:
c001303a:	57                   	push   edi
c001303b:	56                   	push   esi
c001303c:	53                   	push   ebx
c001303d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013041:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013045:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013049:	52                   	push   edx
c001304a:	52                   	push   edx
c001304b:	8b 06                	mov    eax,DWORD PTR [esi]
c001304d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013051:	56                   	push   esi
c0013052:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013055:	83 c4 10             	add    esp,0x10
c0013058:	89 f8                	mov    eax,edi
c001305a:	84 c0                	test   al,al
c001305c:	74 1f                	je     c001307d <Buzzer::beep(int, int, bool)+0x43>
c001305e:	50                   	push   eax
c001305f:	50                   	push   eax
c0013060:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013066:	99                   	cdq    
c0013067:	52                   	push   edx
c0013068:	50                   	push   eax
c0013069:	e8 1a 8e 00 00       	call   c001be88 <nanoSleep(unsigned long long)>
c001306e:	83 c4 10             	add    esp,0x10
c0013071:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013075:	5b                   	pop    ebx
c0013076:	5e                   	pop    esi
c0013077:	5f                   	pop    edi
c0013078:	e9 6f ff ff ff       	jmp    c0012fec <Buzzer::stop()>
c001307d:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013083:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0013088:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013090:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013094:	c7 44 24 14 ff 2f 01 c0 	mov    DWORD PTR [esp+0x14],0xc0012fff
c001309c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00130a0:	5b                   	pop    ebx
c00130a1:	5e                   	pop    esi
c00130a2:	5f                   	pop    edi
c00130a3:	e9 c2 89 00 00       	jmp    c001ba6a <Process::createThread(void (*)(void*), void*, int)>

c00130a8 <loadClockSettings()>:
c00130a8:	c7 05 74 a5 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002a574,0xa
c00130b2:	c6 05 71 a5 02 c0 00 	mov    BYTE PTR ds:0xc002a571,0x0
c00130b9:	c6 05 70 a5 02 c0 01 	mov    BYTE PTR ds:0xc002a570,0x1
c00130c0:	c3                   	ret    
c00130c1:	90                   	nop

c00130c2 <Clock::Clock(char const*)>:
c00130c2:	83 ec 0c             	sub    esp,0xc
c00130c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c9:	83 ec 08             	sub    esp,0x8
c00130cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130d0:	50                   	push   eax
c00130d1:	e8 74 07 00 00       	call   c001384a <Device::Device(char const*)>
c00130d6:	83 c4 10             	add    esp,0x10
c00130d9:	ba b4 73 02 c0       	mov    edx,0xc00273b4
c00130de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130e2:	89 10                	mov    DWORD PTR [eax],edx
c00130e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130e8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00130f2:	90                   	nop
c00130f3:	83 c4 0c             	add    esp,0xc
c00130f6:	c3                   	ret    
c00130f7:	90                   	nop

c00130f8 <Clock::~Clock()>:
c00130f8:	83 ec 0c             	sub    esp,0xc
c00130fb:	ba b4 73 02 c0       	mov    edx,0xc00273b4
c0013100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013104:	89 10                	mov    DWORD PTR [eax],edx
c0013106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001310a:	83 ec 0c             	sub    esp,0xc
c001310d:	50                   	push   eax
c001310e:	e8 e9 03 00 00       	call   c00134fc <Device::~Device()>
c0013113:	83 c4 10             	add    esp,0x10
c0013116:	90                   	nop
c0013117:	83 c4 0c             	add    esp,0xc
c001311a:	c3                   	ret    
c001311b:	90                   	nop

c001311c <Clock::~Clock()>:
c001311c:	83 ec 0c             	sub    esp,0xc
c001311f:	83 ec 0c             	sub    esp,0xc
c0013122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013126:	e8 cd ff ff ff       	call   c00130f8 <Clock::~Clock()>
c001312b:	83 c4 10             	add    esp,0x10
c001312e:	83 ec 08             	sub    esp,0x8
c0013131:	68 58 01 00 00       	push   0x158
c0013136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001313a:	e8 30 f0 ff ff       	call   c001216f <operator delete(void*, unsigned long)>
c001313f:	83 c4 10             	add    esp,0x10
c0013142:	83 c4 0c             	add    esp,0xc
c0013145:	c3                   	ret    

c0013146 <Clock::timeInSecondsLocal()>:
c0013146:	53                   	push   ebx
c0013147:	83 ec 14             	sub    esp,0x14
c001314a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001314e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013150:	50                   	push   eax
c0013151:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013154:	0f b6 0d 70 a5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a570
c001315b:	03 0d 74 a5 02 c0    	add    ecx,DWORD PTR ds:0xc002a574
c0013161:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013167:	89 cb                	mov    ebx,ecx
c0013169:	c1 fb 1f             	sar    ebx,0x1f
c001316c:	01 c8                	add    eax,ecx
c001316e:	11 da                	adc    edx,ebx
c0013170:	83 c4 10             	add    esp,0x10
c0013173:	31 c9                	xor    ecx,ecx
c0013175:	80 3d 71 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a571,0x0
c001317c:	74 05                	je     c0013183 <Clock::timeInSecondsLocal()+0x3d>
c001317e:	b9 08 07 00 00       	mov    ecx,0x708
c0013183:	31 db                	xor    ebx,ebx
c0013185:	01 c8                	add    eax,ecx
c0013187:	11 da                	adc    edx,ebx
c0013189:	83 c4 08             	add    esp,0x8
c001318c:	5b                   	pop    ebx
c001318d:	c3                   	ret    

c001318e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001318e:	57                   	push   edi
c001318f:	56                   	push   esi
c0013190:	53                   	push   ebx
c0013191:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013195:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013199:	8b 01                	mov    eax,DWORD PTR [ecx]
c001319b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001319f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00131a2:	0f b6 05 70 a5 02 c0 	movzx  eax,BYTE PTR ds:0xc002a570
c00131a9:	03 05 74 a5 02 c0    	add    eax,DWORD PTR ds:0xc002a574
c00131af:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00131b5:	99                   	cdq    
c00131b6:	29 c6                	sub    esi,eax
c00131b8:	19 d7                	sbb    edi,edx
c00131ba:	89 f0                	mov    eax,esi
c00131bc:	89 fa                	mov    edx,edi
c00131be:	31 f6                	xor    esi,esi
c00131c0:	80 3d 71 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a571,0x0
c00131c7:	74 05                	je     c00131ce <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00131c9:	be 08 07 00 00       	mov    esi,0x708
c00131ce:	31 ff                	xor    edi,edi
c00131d0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00131d4:	29 f0                	sub    eax,esi
c00131d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00131da:	19 fa                	sbb    edx,edi
c00131dc:	89 d8                	mov    eax,ebx
c00131de:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00131e2:	5b                   	pop    ebx
c00131e3:	5e                   	pop    esi
c00131e4:	5f                   	pop    edi
c00131e5:	ff e0                	jmp    eax

c00131e7 <datetimeToSeconds(datetime_t)>:
c00131e7:	55                   	push   ebp
c00131e8:	57                   	push   edi
c00131e9:	56                   	push   esi
c00131ea:	53                   	push   ebx
c00131eb:	83 ec 14             	sub    esp,0x14
c00131ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00131f2:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00131f6:	89 d3                	mov    ebx,edx
c00131f8:	0f b6 c6             	movzx  eax,dh
c00131fb:	c1 eb 10             	shr    ebx,0x10
c00131fe:	48                   	dec    eax
c00131ff:	66 81 eb 6c 07       	sub    bx,0x76c
c0013204:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013208:	0f b6 f5             	movzx  esi,ch
c001320b:	89 cf                	mov    edi,ecx
c001320d:	6b f6 3c             	imul   esi,esi,0x3c
c0013210:	c1 ef 10             	shr    edi,0x10
c0013213:	0f b6 c9             	movzx  ecx,cl
c0013216:	89 f8                	mov    eax,edi
c0013218:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001321e:	0f b6 f8             	movzx  edi,al
c0013221:	0f b6 d2             	movzx  edx,dl
c0013224:	01 fe                	add    esi,edi
c0013226:	01 f1                	add    ecx,esi
c0013228:	0f b7 f3             	movzx  esi,bx
c001322b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001322f:	c1 f9 1f             	sar    ecx,0x1f
c0013232:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013237:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001323b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013240:	8b 0c 8d 00 74 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd8c00]
c0013247:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001324b:	76 29                	jbe    c0013276 <datetimeToSeconds(datetime_t)+0x8f>
c001324d:	f6 c3 03             	test   bl,0x3
c0013250:	75 24                	jne    c0013276 <datetimeToSeconds(datetime_t)+0x8f>
c0013252:	31 d2                	xor    edx,edx
c0013254:	bf 64 00 00 00       	mov    edi,0x64
c0013259:	89 d8                	mov    eax,ebx
c001325b:	66 f7 f7             	div    di
c001325e:	66 85 d2             	test   dx,dx
c0013261:	75 12                	jne    c0013275 <datetimeToSeconds(datetime_t)+0x8e>
c0013263:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013269:	bf 90 01 00 00       	mov    edi,0x190
c001326e:	99                   	cdq    
c001326f:	f7 ff                	idiv   edi
c0013271:	85 d2                	test   edx,edx
c0013273:	75 01                	jne    c0013276 <datetimeToSeconds(datetime_t)+0x8f>
c0013275:	41                   	inc    ecx
c0013276:	66 83 fb 46          	cmp    bx,0x46
c001327a:	76 45                	jbe    c00132c1 <datetimeToSeconds(datetime_t)+0xda>
c001327c:	bb 46 00 00 00       	mov    ebx,0x46
c0013281:	bf 64 00 00 00       	mov    edi,0x64
c0013286:	bd 90 01 00 00       	mov    ebp,0x190
c001328b:	b8 6d 01 00 00       	mov    eax,0x16d
c0013290:	f6 c3 03             	test   bl,0x3
c0013293:	75 23                	jne    c00132b8 <datetimeToSeconds(datetime_t)+0xd1>
c0013295:	89 d8                	mov    eax,ebx
c0013297:	99                   	cdq    
c0013298:	f7 ff                	idiv   edi
c001329a:	b8 6e 01 00 00       	mov    eax,0x16e
c001329f:	85 d2                	test   edx,edx
c00132a1:	75 15                	jne    c00132b8 <datetimeToSeconds(datetime_t)+0xd1>
c00132a3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00132a9:	99                   	cdq    
c00132aa:	f7 fd                	idiv   ebp
c00132ac:	83 fa 01             	cmp    edx,0x1
c00132af:	19 c0                	sbb    eax,eax
c00132b1:	f7 d0                	not    eax
c00132b3:	05 6e 01 00 00       	add    eax,0x16e
c00132b8:	01 c1                	add    ecx,eax
c00132ba:	43                   	inc    ebx
c00132bb:	39 f3                	cmp    ebx,esi
c00132bd:	7c cc                	jl     c001328b <datetimeToSeconds(datetime_t)+0xa4>
c00132bf:	eb 35                	jmp    c00132f6 <datetimeToSeconds(datetime_t)+0x10f>
c00132c1:	74 33                	je     c00132f6 <datetimeToSeconds(datetime_t)+0x10f>
c00132c3:	b8 45 00 00 00       	mov    eax,0x45
c00132c8:	89 c2                	mov    edx,eax
c00132ca:	83 e2 03             	and    edx,0x3
c00132cd:	39 f0                	cmp    eax,esi
c00132cf:	7e 0f                	jle    c00132e0 <datetimeToSeconds(datetime_t)+0xf9>
c00132d1:	83 fa 01             	cmp    edx,0x1
c00132d4:	19 d2                	sbb    edx,edx
c00132d6:	48                   	dec    eax
c00132d7:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00132de:	eb e8                	jmp    c00132c8 <datetimeToSeconds(datetime_t)+0xe1>
c00132e0:	b8 6d 01 00 00       	mov    eax,0x16d
c00132e5:	85 d2                	test   edx,edx
c00132e7:	75 0b                	jne    c00132f4 <datetimeToSeconds(datetime_t)+0x10d>
c00132e9:	66 83 fb 01          	cmp    bx,0x1
c00132ed:	19 c0                	sbb    eax,eax
c00132ef:	05 6e 01 00 00       	add    eax,0x16e
c00132f4:	29 c1                	sub    ecx,eax
c00132f6:	b8 80 51 01 00       	mov    eax,0x15180
c00132fb:	f7 e9                	imul   ecx
c00132fd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013301:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013305:	83 c4 14             	add    esp,0x14
c0013308:	5b                   	pop    ebx
c0013309:	5e                   	pop    esi
c001330a:	5f                   	pop    edi
c001330b:	5d                   	pop    ebp
c001330c:	c3                   	ret    
c001330d:	90                   	nop

c001330e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001330e:	57                   	push   edi
c001330f:	56                   	push   esi
c0013310:	53                   	push   ebx
c0013311:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013315:	8b 06                	mov    eax,DWORD PTR [esi]
c0013317:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001331a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001331e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013322:	e8 c0 fe ff ff       	call   c00131e7 <datetimeToSeconds(datetime_t)>
c0013327:	59                   	pop    ecx
c0013328:	0f b6 0d 70 a5 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a570
c001332f:	5b                   	pop    ebx
c0013330:	03 0d 74 a5 02 c0    	add    ecx,DWORD PTR ds:0xc002a574
c0013336:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001333c:	89 cb                	mov    ebx,ecx
c001333e:	c1 fb 1f             	sar    ebx,0x1f
c0013341:	29 c8                	sub    eax,ecx
c0013343:	19 da                	sbb    edx,ebx
c0013345:	31 c9                	xor    ecx,ecx
c0013347:	80 3d 71 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a571,0x0
c001334e:	74 05                	je     c0013355 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013350:	b9 08 07 00 00       	mov    ecx,0x708
c0013355:	31 db                	xor    ebx,ebx
c0013357:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001335b:	29 c8                	sub    eax,ecx
c001335d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013361:	19 da                	sbb    edx,ebx
c0013363:	89 f8                	mov    eax,edi
c0013365:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013369:	5b                   	pop    ebx
c001336a:	5e                   	pop    esi
c001336b:	5f                   	pop    edi
c001336c:	ff e0                	jmp    eax

c001336e <secondsToDatetime(unsigned long long)>:
c001336e:	55                   	push   ebp
c001336f:	57                   	push   edi
c0013370:	56                   	push   esi
c0013371:	53                   	push   ebx
c0013372:	83 ec 1c             	sub    esp,0x1c
c0013375:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013379:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001337d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013381:	6a 00                	push   0x0
c0013383:	68 80 51 01 00       	push   0x15180
c0013388:	55                   	push   ebp
c0013389:	57                   	push   edi
c001338a:	e8 cd ff 00 00       	call   c002335c <__udivdi3>
c001338f:	83 c4 10             	add    esp,0x10
c0013392:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013398:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001339c:	6a 00                	push   0x0
c001339e:	68 80 51 01 00       	push   0x15180
c00133a3:	55                   	push   ebp
c00133a4:	57                   	push   edi
c00133a5:	bf 10 0e 00 00       	mov    edi,0xe10
c00133aa:	e8 ad 00 01 00       	call   c002345c <__umoddi3>
c00133af:	83 c4 10             	add    esp,0x10
c00133b2:	99                   	cdq    
c00133b3:	f7 ff                	idiv   edi
c00133b5:	bf 3c 00 00 00       	mov    edi,0x3c
c00133ba:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00133bd:	89 d0                	mov    eax,edx
c00133bf:	99                   	cdq    
c00133c0:	f7 ff                	idiv   edi
c00133c2:	85 db                	test   ebx,ebx
c00133c4:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00133c7:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00133ca:	79 11                	jns    c00133dd <secondsToDatetime(unsigned long long)+0x6f>
c00133cc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00133d0:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00133d6:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00133db:	eb 07                	jmp    c00133e4 <secondsToDatetime(unsigned long long)+0x76>
c00133dd:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00133e2:	89 d8                	mov    eax,ebx
c00133e4:	bf b4 05 00 00       	mov    edi,0x5b4
c00133e9:	99                   	cdq    
c00133ea:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00133ef:	f7 f9                	idiv   ecx
c00133f1:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00133f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00133fa:	31 d2                	xor    edx,edx
c00133fc:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013404:	01 c3                	add    ebx,eax
c0013406:	89 d8                	mov    eax,ebx
c0013408:	f7 f1                	div    ecx
c001340a:	31 d2                	xor    edx,edx
c001340c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001340f:	89 d8                	mov    eax,ebx
c0013411:	f7 f7                	div    edi
c0013413:	31 d2                	xor    edx,edx
c0013415:	29 c1                	sub    ecx,eax
c0013417:	89 d8                	mov    eax,ebx
c0013419:	f7 f5                	div    ebp
c001341b:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013420:	29 c1                	sub    ecx,eax
c0013422:	31 d2                	xor    edx,edx
c0013424:	89 c8                	mov    eax,ecx
c0013426:	f7 f5                	div    ebp
c0013428:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001342d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013431:	31 d2                	xor    edx,edx
c0013433:	89 c8                	mov    eax,ecx
c0013435:	f7 f5                	div    ebp
c0013437:	31 d2                	xor    edx,edx
c0013439:	01 c3                	add    ebx,eax
c001343b:	89 c8                	mov    eax,ecx
c001343d:	f7 f7                	div    edi
c001343f:	bf 99 00 00 00       	mov    edi,0x99
c0013444:	29 c3                	sub    ebx,eax
c0013446:	31 d2                	xor    edx,edx
c0013448:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013450:	29 c3                	sub    ebx,eax
c0013452:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013455:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013458:	bb 05 00 00 00       	mov    ebx,0x5
c001345d:	83 c1 02             	add    ecx,0x2
c0013460:	89 c8                	mov    eax,ecx
c0013462:	f7 f7                	div    edi
c0013464:	31 d2                	xor    edx,edx
c0013466:	89 c7                	mov    edi,eax
c0013468:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001346e:	83 c0 02             	add    eax,0x2
c0013471:	f7 f3                	div    ebx
c0013473:	89 eb                	mov    ebx,ebp
c0013475:	29 c3                	sub    ebx,eax
c0013477:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001347d:	88 1e                	mov    BYTE PTR [esi],bl
c001347f:	19 c0                	sbb    eax,eax
c0013481:	31 d2                	xor    edx,edx
c0013483:	83 e0 0c             	and    eax,0xc
c0013486:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001348a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013492:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013496:	83 f9 01             	cmp    ecx,0x1
c0013499:	0f 96 c2             	setbe  dl
c001349c:	41                   	inc    ecx
c001349d:	01 d0                	add    eax,edx
c001349f:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00134a2:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00134a6:	83 c4 1c             	add    esp,0x1c
c00134a9:	89 f0                	mov    eax,esi
c00134ab:	5b                   	pop    ebx
c00134ac:	5e                   	pop    esi
c00134ad:	5f                   	pop    edi
c00134ae:	5d                   	pop    ebp
c00134af:	c2 04 00             	ret    0x4

c00134b2 <Clock::timeInDatetimeLocal()>:
c00134b2:	53                   	push   ebx
c00134b3:	83 ec 14             	sub    esp,0x14
c00134b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00134ba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00134be:	e8 83 fc ff ff       	call   c0013146 <Clock::timeInSecondsLocal()>
c00134c3:	83 c4 0c             	add    esp,0xc
c00134c6:	52                   	push   edx
c00134c7:	50                   	push   eax
c00134c8:	53                   	push   ebx
c00134c9:	e8 a0 fe ff ff       	call   c001336e <secondsToDatetime(unsigned long long)>
c00134ce:	89 d8                	mov    eax,ebx
c00134d0:	83 c4 14             	add    esp,0x14
c00134d3:	5b                   	pop    ebx
c00134d4:	c2 04 00             	ret    0x4
c00134d7:	90                   	nop

c00134d8 <Device::hibernate()>:
c00134d8:	c3                   	ret    
c00134d9:	90                   	nop

c00134da <Device::wake()>:
c00134da:	c3                   	ret    
c00134db:	90                   	nop

c00134dc <Device::detect()>:
c00134dc:	c3                   	ret    
c00134dd:	90                   	nop

c00134de <Device::disableLegacy()>:
c00134de:	c3                   	ret    
c00134df:	90                   	nop

c00134e0 <Device::powerSaving(PowerSavingLevel)>:
c00134e0:	c3                   	ret    
c00134e1:	90                   	nop

c00134e2 <DriverlessDevice::close(int, int, void*)>:
c00134e2:	31 c0                	xor    eax,eax
c00134e4:	c3                   	ret    
c00134e5:	90                   	nop

c00134e6 <DriverlessDevice::detect()>:
c00134e6:	c3                   	ret    
c00134e7:	90                   	nop

c00134e8 <DriverlessDevice::open(int, int, void*)>:
c00134e8:	83 ec 18             	sub    esp,0x18
c00134eb:	68 30 74 02 c0       	push   0xc0027430
c00134f0:	e8 f8 54 00 00       	call   c00189ed <Krnl::panic(char const*)>
c00134f5:	83 c8 ff             	or     eax,0xffffffff
c00134f8:	83 c4 1c             	add    esp,0x1c
c00134fb:	c3                   	ret    

c00134fc <Device::~Device()>:
c00134fc:	ba 58 74 02 c0       	mov    edx,0xc0027458
c0013501:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013505:	89 10                	mov    DWORD PTR [eax],edx
c0013507:	90                   	nop
c0013508:	c3                   	ret    
c0013509:	90                   	nop

c001350a <Device::~Device()>:
c001350a:	83 ec 0c             	sub    esp,0xc
c001350d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013511:	e8 e6 ff ff ff       	call   c00134fc <Device::~Device()>
c0013516:	83 c4 04             	add    esp,0x4
c0013519:	83 ec 08             	sub    esp,0x8
c001351c:	68 58 01 00 00       	push   0x158
c0013521:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013525:	e8 45 ec ff ff       	call   c001216f <operator delete(void*, unsigned long)>
c001352a:	83 c4 10             	add    esp,0x10
c001352d:	83 c4 0c             	add    esp,0xc
c0013530:	c3                   	ret    
c0013531:	90                   	nop

c0013532 <Device::findAndLoadDriver()>:
c0013532:	c3                   	ret    
c0013533:	90                   	nop

c0013534 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013534:	57                   	push   edi
c0013535:	b9 09 00 00 00       	mov    ecx,0x9
c001353a:	56                   	push   esi
c001353b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001353f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013543:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001354d:	81 c7 18 01 00 00    	add    edi,0x118
c0013553:	fc                   	cld    
c0013554:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013556:	5e                   	pop    esi
c0013557:	5f                   	pop    edi
c0013558:	c3                   	ret    
c0013559:	90                   	nop

c001355a <Device::preOpenACPI(void*, char*, char*)>:
c001355a:	56                   	push   esi
c001355b:	53                   	push   ebx
c001355c:	83 ec 08             	sub    esp,0x8
c001355f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013563:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013567:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013571:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013575:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001357b:	6a 1e                	push   0x1e
c001357d:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013583:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013587:	81 c3 3a 01 00 00    	add    ebx,0x13a
c001358d:	50                   	push   eax
c001358e:	e8 03 d1 fe ff       	call   c0000696 <memcpy>
c0013593:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013597:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001359b:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00135a3:	83 c4 14             	add    esp,0x14
c00135a6:	5b                   	pop    ebx
c00135a7:	5e                   	pop    esi
c00135a8:	e9 e9 d0 fe ff       	jmp    c0000696 <memcpy>
c00135ad:	90                   	nop

c00135ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00135ae:	55                   	push   ebp
c00135af:	57                   	push   edi
c00135b0:	56                   	push   esi
c00135b1:	53                   	push   ebx
c00135b2:	83 ec 0c             	sub    esp,0xc
c00135b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135b9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00135bd:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00135c1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00135c5:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00135ca:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00135d1:	75 0b                	jne    c00135de <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00135d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00135d5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00135d9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00135dc:	eb 24                	jmp    c0013602 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00135de:	e8 87 42 00 00       	call   c001786a <CPU::current()>
c00135e3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00135e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00135eb:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00135ef:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00135f3:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00135f7:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00135fb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00135ff:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013602:	83 c4 0c             	add    esp,0xc
c0013605:	5b                   	pop    ebx
c0013606:	5e                   	pop    esi
c0013607:	5f                   	pop    edi
c0013608:	5d                   	pop    ebp
c0013609:	ff e0                	jmp    eax
c001360b:	90                   	nop

c001360c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001360c:	57                   	push   edi
c001360d:	56                   	push   esi
c001360e:	53                   	push   ebx
c001360f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013613:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013617:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001361b:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0013620:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013627:	75 0b                	jne    c0013634 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c0013629:	8b 00                	mov    eax,DWORD PTR [eax]
c001362b:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c001362f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013632:	eb 20                	jmp    c0013654 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0013634:	e8 31 42 00 00       	call   c001786a <CPU::current()>
c0013639:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001363f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013641:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013645:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0013649:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001364d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013651:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0013654:	5b                   	pop    ebx
c0013655:	5e                   	pop    esi
c0013656:	5f                   	pop    edi
c0013657:	ff e0                	jmp    eax
c0013659:	90                   	nop

c001365a <Device::addChild(Device*)>:
c001365a:	53                   	push   ebx
c001365b:	83 ec 08             	sub    esp,0x8
c001365e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013662:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013666:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001366c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013672:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013674:	85 d2                	test   edx,edx
c0013676:	74 04                	je     c001367c <Device::addChild(Device*)+0x22>
c0013678:	89 d3                	mov    ebx,edx
c001367a:	eb f6                	jmp    c0013672 <Device::addChild(Device*)+0x18>
c001367c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001367f:	83 ec 0c             	sub    esp,0xc
c0013682:	6a 08                	push   0x8
c0013684:	e8 d7 ea ff ff       	call   c0012160 <operator new(unsigned long)>
c0013689:	89 03                	mov    DWORD PTR [ebx],eax
c001368b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013691:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013698:	83 c4 18             	add    esp,0x18
c001369b:	5b                   	pop    ebx
c001369c:	c3                   	ret    
c001369d:	90                   	nop

c001369e <Device::removeAllChildren()>:
c001369e:	56                   	push   esi
c001369f:	53                   	push   ebx
c00136a0:	52                   	push   edx
c00136a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136a5:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00136ab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00136ae:	74 17                	je     c00136c7 <Device::removeAllChildren()+0x29>
c00136b0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00136b3:	85 c0                	test   eax,eax
c00136b5:	74 0c                	je     c00136c3 <Device::removeAllChildren()+0x25>
c00136b7:	83 ec 0c             	sub    esp,0xc
c00136ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00136bc:	50                   	push   eax
c00136bd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00136c0:	83 c4 10             	add    esp,0x10
c00136c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00136c5:	eb e4                	jmp    c00136ab <Device::removeAllChildren()+0xd>
c00136c7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00136cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00136d3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00136d9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00136e0:	58                   	pop    eax
c00136e1:	5b                   	pop    ebx
c00136e2:	5e                   	pop    esi
c00136e3:	c3                   	ret    

c00136e4 <Device::hibernateAll()>:
c00136e4:	53                   	push   ebx
c00136e5:	83 ec 14             	sub    esp,0x14
c00136e8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00136ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136ee:	53                   	push   ebx
c00136ef:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00136f2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00136f8:	83 c4 10             	add    esp,0x10
c00136fb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00136fe:	74 0f                	je     c001370f <Device::hibernateAll()+0x2b>
c0013700:	83 ec 0c             	sub    esp,0xc
c0013703:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013706:	e8 d9 ff ff ff       	call   c00136e4 <Device::hibernateAll()>
c001370b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001370d:	eb e9                	jmp    c00136f8 <Device::hibernateAll()+0x14>
c001370f:	83 c4 08             	add    esp,0x8
c0013712:	5b                   	pop    ebx
c0013713:	c3                   	ret    

c0013714 <Device::wakeAll()>:
c0013714:	53                   	push   ebx
c0013715:	83 ec 14             	sub    esp,0x14
c0013718:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001371c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001371e:	53                   	push   ebx
c001371f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013722:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013728:	83 c4 10             	add    esp,0x10
c001372b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001372e:	74 0f                	je     c001373f <Device::wakeAll()+0x2b>
c0013730:	83 ec 0c             	sub    esp,0xc
c0013733:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013736:	e8 d9 ff ff ff       	call   c0013714 <Device::wakeAll()>
c001373b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001373d:	eb e9                	jmp    c0013728 <Device::wakeAll()+0x14>
c001373f:	83 c4 08             	add    esp,0x8
c0013742:	5b                   	pop    ebx
c0013743:	c3                   	ret    

c0013744 <Device::detectAll()>:
c0013744:	53                   	push   ebx
c0013745:	83 ec 14             	sub    esp,0x14
c0013748:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001374c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001374e:	53                   	push   ebx
c001374f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013752:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013758:	83 c4 10             	add    esp,0x10
c001375b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001375e:	74 0f                	je     c001376f <Device::detectAll()+0x2b>
c0013760:	83 ec 0c             	sub    esp,0xc
c0013763:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013766:	e8 d9 ff ff ff       	call   c0013744 <Device::detectAll()>
c001376b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001376d:	eb e9                	jmp    c0013758 <Device::detectAll()+0x14>
c001376f:	83 c4 08             	add    esp,0x8
c0013772:	5b                   	pop    ebx
c0013773:	c3                   	ret    

c0013774 <Device::disableLegacyAll()>:
c0013774:	53                   	push   ebx
c0013775:	83 ec 14             	sub    esp,0x14
c0013778:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001377c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001377e:	53                   	push   ebx
c001377f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013782:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013788:	83 c4 10             	add    esp,0x10
c001378b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001378e:	74 0f                	je     c001379f <Device::disableLegacyAll()+0x2b>
c0013790:	83 ec 0c             	sub    esp,0xc
c0013793:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013796:	e8 d9 ff ff ff       	call   c0013774 <Device::disableLegacyAll()>
c001379b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001379d:	eb e9                	jmp    c0013788 <Device::disableLegacyAll()+0x14>
c001379f:	83 c4 08             	add    esp,0x8
c00137a2:	5b                   	pop    ebx
c00137a3:	c3                   	ret    

c00137a4 <Device::loadDriversForAll()>:
c00137a4:	53                   	push   ebx
c00137a5:	83 ec 08             	sub    esp,0x8
c00137a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137ac:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00137b2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00137b4:	85 db                	test   ebx,ebx
c00137b6:	74 12                	je     c00137ca <Device::loadDriversForAll()+0x26>
c00137b8:	83 ec 0c             	sub    esp,0xc
c00137bb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00137be:	e8 e1 ff ff ff       	call   c00137a4 <Device::loadDriversForAll()>
c00137c3:	83 c4 10             	add    esp,0x10
c00137c6:	89 d8                	mov    eax,ebx
c00137c8:	eb e8                	jmp    c00137b2 <Device::loadDriversForAll()+0xe>
c00137ca:	83 c4 08             	add    esp,0x8
c00137cd:	5b                   	pop    ebx
c00137ce:	c3                   	ret    
c00137cf:	90                   	nop

c00137d0 <Device::closeAll()>:
c00137d0:	53                   	push   ebx
c00137d1:	83 ec 08             	sub    esp,0x8
c00137d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00137d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137da:	6a 00                	push   0x0
c00137dc:	6a 00                	push   0x0
c00137de:	6a 00                	push   0x0
c00137e0:	53                   	push   ebx
c00137e1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00137e4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00137ea:	83 c4 10             	add    esp,0x10
c00137ed:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00137f0:	74 0f                	je     c0013801 <Device::closeAll()+0x31>
c00137f2:	83 ec 0c             	sub    esp,0xc
c00137f5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00137f8:	e8 d3 ff ff ff       	call   c00137d0 <Device::closeAll()>
c00137fd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00137ff:	eb e9                	jmp    c00137ea <Device::closeAll()+0x1a>
c0013801:	83 c4 08             	add    esp,0x8
c0013804:	5b                   	pop    ebx
c0013805:	c3                   	ret    

c0013806 <Device::powerSavingAll(PowerSavingLevel)>:
c0013806:	56                   	push   esi
c0013807:	53                   	push   ebx
c0013808:	83 ec 0c             	sub    esp,0xc
c001380b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001380f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013813:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013815:	56                   	push   esi
c0013816:	53                   	push   ebx
c0013817:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001381a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013820:	83 c4 10             	add    esp,0x10
c0013823:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013826:	74 0f                	je     c0013837 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013828:	52                   	push   edx
c0013829:	52                   	push   edx
c001382a:	56                   	push   esi
c001382b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001382e:	e8 d3 ff ff ff       	call   c0013806 <Device::powerSavingAll(PowerSavingLevel)>
c0013833:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013835:	eb e9                	jmp    c0013820 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013837:	58                   	pop    eax
c0013838:	5b                   	pop    ebx
c0013839:	5e                   	pop    esi
c001383a:	c3                   	ret    
c001383b:	90                   	nop

c001383c <Device::setName(char const*)>:
c001383c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013844:	e9 22 cf fe ff       	jmp    c000076b <strcpy>
c0013849:	90                   	nop

c001384a <Device::Device(char const*)>:
c001384a:	83 ec 0c             	sub    esp,0xc
c001384d:	ba 58 74 02 c0       	mov    edx,0xc0027458
c0013852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013856:	89 10                	mov    DWORD PTR [eax],edx
c0013858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001385c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001386a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013878:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013886:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013890:	83 ec 08             	sub    esp,0x8
c0013893:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013897:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001389b:	e8 9c ff ff ff       	call   c001383c <Device::setName(char const*)>
c00138a0:	83 c4 10             	add    esp,0x10
c00138a3:	83 ec 0c             	sub    esp,0xc
c00138a6:	6a 08                	push   0x8
c00138a8:	e8 b3 e8 ff ff       	call   c0012160 <operator new(unsigned long)>
c00138ad:	83 c4 10             	add    esp,0x10
c00138b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138b6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00138bd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138c1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00138c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138cb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138d1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00138d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138db:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00138e1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00138e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ec:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00138f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00138fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013902:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001390c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013910:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001391a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001391e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001392c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013936:	90                   	nop
c0013937:	83 c4 0c             	add    esp,0xc
c001393a:	c3                   	ret    
c001393b:	90                   	nop

c001393c <Device::getName()>:
c001393c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013940:	05 d0 00 00 00       	add    eax,0xd0
c0013945:	c3                   	ret    

c0013946 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013946:	83 ec 0c             	sub    esp,0xc
c0013949:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001394d:	83 ec 08             	sub    esp,0x8
c0013950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013954:	50                   	push   eax
c0013955:	e8 f0 fe ff ff       	call   c001384a <Device::Device(char const*)>
c001395a:	83 c4 10             	add    esp,0x10
c001395d:	ba 84 74 02 c0       	mov    edx,0xc0027484
c0013962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013966:	89 10                	mov    DWORD PTR [eax],edx
c0013968:	90                   	nop
c0013969:	83 c4 0c             	add    esp,0xc
c001396c:	c3                   	ret    
c001396d:	90                   	nop

c001396e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001396e:	57                   	push   edi
c001396f:	56                   	push   esi
c0013970:	53                   	push   ebx
c0013971:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013975:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013979:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001397d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013983:	75 0c                	jne    c0013991 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013985:	52                   	push   edx
c0013986:	52                   	push   edx
c0013987:	53                   	push   ebx
c0013988:	56                   	push   esi
c0013989:	e8 26 19 01 00       	call   c00252b4 <LinkedList<Device>::addElement(Device*)>
c001398e:	83 c4 10             	add    esp,0x10
c0013991:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013997:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001399a:	74 12                	je     c00139ae <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001399c:	50                   	push   eax
c001399d:	57                   	push   edi
c001399e:	56                   	push   esi
c001399f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00139a2:	e8 c7 ff ff ff       	call   c001396e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00139a7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00139a9:	83 c4 10             	add    esp,0x10
c00139ac:	eb e9                	jmp    c0013997 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00139ae:	5b                   	pop    ebx
c00139af:	5e                   	pop    esi
c00139b0:	5f                   	pop    edi
c00139b1:	c3                   	ret    

c00139b2 <getDevicesOfType(DeviceType)>:
c00139b2:	53                   	push   ebx
c00139b3:	83 ec 14             	sub    esp,0x14
c00139b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00139ba:	53                   	push   ebx
c00139bb:	e8 d0 19 01 00       	call   c0025390 <LinkedList<Device>::LinkedList()>
c00139c0:	83 c4 0c             	add    esp,0xc
c00139c3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139c7:	53                   	push   ebx
c00139c8:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c00139ce:	e8 9b ff ff ff       	call   c001396e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00139d3:	89 d8                	mov    eax,ebx
c00139d5:	83 c4 18             	add    esp,0x18
c00139d8:	5b                   	pop    ebx
c00139d9:	c2 04 00             	ret    0x4

c00139dc <HardDiskController::HardDiskController(char const*)>:
c00139dc:	83 ec 0c             	sub    esp,0xc
c00139df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139e3:	83 ec 08             	sub    esp,0x8
c00139e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139ea:	50                   	push   eax
c00139eb:	e8 5a fe ff ff       	call   c001384a <Device::Device(char const*)>
c00139f0:	83 c4 10             	add    esp,0x10
c00139f3:	ba b0 74 02 c0       	mov    edx,0xc00274b0
c00139f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139fc:	89 10                	mov    DWORD PTR [eax],edx
c00139fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a02:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013a0c:	90                   	nop
c0013a0d:	83 c4 0c             	add    esp,0xc
c0013a10:	c3                   	ret    
c0013a11:	90                   	nop

c0013a12 <HardDiskController::~HardDiskController()>:
c0013a12:	83 ec 0c             	sub    esp,0xc
c0013a15:	ba b0 74 02 c0       	mov    edx,0xc00274b0
c0013a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a1e:	89 10                	mov    DWORD PTR [eax],edx
c0013a20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a24:	83 ec 0c             	sub    esp,0xc
c0013a27:	50                   	push   eax
c0013a28:	e8 cf fa ff ff       	call   c00134fc <Device::~Device()>
c0013a2d:	83 c4 10             	add    esp,0x10
c0013a30:	90                   	nop
c0013a31:	83 c4 0c             	add    esp,0xc
c0013a34:	c3                   	ret    
c0013a35:	90                   	nop

c0013a36 <HardDiskController::~HardDiskController()>:
c0013a36:	83 ec 0c             	sub    esp,0xc
c0013a39:	83 ec 0c             	sub    esp,0xc
c0013a3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a40:	e8 cd ff ff ff       	call   c0013a12 <HardDiskController::~HardDiskController()>
c0013a45:	83 c4 10             	add    esp,0x10
c0013a48:	83 ec 08             	sub    esp,0x8
c0013a4b:	68 58 01 00 00       	push   0x158
c0013a50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a54:	e8 16 e7 ff ff       	call   c001216f <operator delete(void*, unsigned long)>
c0013a59:	83 c4 10             	add    esp,0x10
c0013a5c:	83 c4 0c             	add    esp,0xc
c0013a5f:	c3                   	ret    

c0013a60 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013a60:	83 ec 0c             	sub    esp,0xc
c0013a63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a67:	83 ec 08             	sub    esp,0x8
c0013a6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a6e:	50                   	push   eax
c0013a6f:	e8 d6 fd ff ff       	call   c001384a <Device::Device(char const*)>
c0013a74:	83 c4 10             	add    esp,0x10
c0013a77:	ba dc 74 02 c0       	mov    edx,0xc00274dc
c0013a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a80:	89 10                	mov    DWORD PTR [eax],edx
c0013a82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a86:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013a8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a91:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013a98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a9c:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013aa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aaa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013aae:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013ab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ab8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013ac2:	90                   	nop
c0013ac3:	83 c4 0c             	add    esp,0xc
c0013ac6:	c3                   	ret    
c0013ac7:	90                   	nop

c0013ac8 <PhysicalDisk::startCache()>:
c0013ac8:	56                   	push   esi
c0013ac9:	53                   	push   ebx
c0013aca:	83 ec 10             	sub    esp,0x10
c0013acd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ad1:	6a 30                	push   0x30
c0013ad3:	e8 88 e6 ff ff       	call   c0012160 <operator new(unsigned long)>
c0013ad8:	89 c6                	mov    esi,eax
c0013ada:	58                   	pop    eax
c0013adb:	5a                   	pop    edx
c0013adc:	53                   	push   ebx
c0013add:	56                   	push   esi
c0013ade:	e8 15 25 00 00       	call   c0015ff8 <VCache::VCache(PhysicalDisk*)>
c0013ae3:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013ae9:	83 c4 14             	add    esp,0x14
c0013aec:	5b                   	pop    ebx
c0013aed:	5e                   	pop    esi
c0013aee:	c3                   	ret    
c0013aef:	90                   	nop

c0013af0 <PhysicalDisk::~PhysicalDisk()>:
c0013af0:	83 ec 0c             	sub    esp,0xc
c0013af3:	ba dc 74 02 c0       	mov    edx,0xc00274dc
c0013af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013afc:	89 10                	mov    DWORD PTR [eax],edx
c0013afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b02:	83 ec 0c             	sub    esp,0xc
c0013b05:	50                   	push   eax
c0013b06:	e8 f1 f9 ff ff       	call   c00134fc <Device::~Device()>
c0013b0b:	83 c4 10             	add    esp,0x10
c0013b0e:	90                   	nop
c0013b0f:	83 c4 0c             	add    esp,0xc
c0013b12:	c3                   	ret    
c0013b13:	90                   	nop

c0013b14 <PhysicalDisk::~PhysicalDisk()>:
c0013b14:	83 ec 0c             	sub    esp,0xc
c0013b17:	83 ec 0c             	sub    esp,0xc
c0013b1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b1e:	e8 cd ff ff ff       	call   c0013af0 <PhysicalDisk::~PhysicalDisk()>
c0013b23:	83 c4 10             	add    esp,0x10
c0013b26:	83 ec 08             	sub    esp,0x8
c0013b29:	68 6c 01 00 00       	push   0x16c
c0013b2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b32:	e8 38 e6 ff ff       	call   c001216f <operator delete(void*, unsigned long)>
c0013b37:	83 c4 10             	add    esp,0x10
c0013b3a:	83 c4 0c             	add    esp,0xc
c0013b3d:	c3                   	ret    

c0013b3e <FPU::FPU(char const*)>:
c0013b3e:	83 ec 0c             	sub    esp,0xc
c0013b41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b45:	83 ec 08             	sub    esp,0x8
c0013b48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b4c:	50                   	push   eax
c0013b4d:	e8 f8 fc ff ff       	call   c001384a <Device::Device(char const*)>
c0013b52:	83 c4 10             	add    esp,0x10
c0013b55:	ba 1c 75 02 c0       	mov    edx,0xc002751c
c0013b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b5e:	89 10                	mov    DWORD PTR [eax],edx
c0013b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b64:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013b6e:	90                   	nop
c0013b6f:	83 c4 0c             	add    esp,0xc
c0013b72:	c3                   	ret    
c0013b73:	90                   	nop

c0013b74 <FPU::~FPU()>:
c0013b74:	83 ec 0c             	sub    esp,0xc
c0013b77:	ba 1c 75 02 c0       	mov    edx,0xc002751c
c0013b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b80:	89 10                	mov    DWORD PTR [eax],edx
c0013b82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b86:	83 ec 0c             	sub    esp,0xc
c0013b89:	50                   	push   eax
c0013b8a:	e8 6d f9 ff ff       	call   c00134fc <Device::~Device()>
c0013b8f:	83 c4 10             	add    esp,0x10
c0013b92:	90                   	nop
c0013b93:	83 c4 0c             	add    esp,0xc
c0013b96:	c3                   	ret    
c0013b97:	90                   	nop

c0013b98 <FPU::~FPU()>:
c0013b98:	83 ec 0c             	sub    esp,0xc
c0013b9b:	83 ec 0c             	sub    esp,0xc
c0013b9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ba2:	e8 cd ff ff ff       	call   c0013b74 <FPU::~FPU()>
c0013ba7:	83 c4 10             	add    esp,0x10
c0013baa:	83 ec 08             	sub    esp,0x8
c0013bad:	68 58 01 00 00       	push   0x158
c0013bb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bb6:	e8 b4 e5 ff ff       	call   c001216f <operator delete(void*, unsigned long)>
c0013bbb:	83 c4 10             	add    esp,0x10
c0013bbe:	83 c4 0c             	add    esp,0xc
c0013bc1:	c3                   	ret    

c0013bc2 <setupFPU()>:
c0013bc2:	53                   	push   ebx
c0013bc3:	83 ec 08             	sub    esp,0x8
c0013bc6:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c0013bcc:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0013bd3:	74 19                	je     c0013bee <setupFPU()+0x2c>
c0013bd5:	83 ec 0c             	sub    esp,0xc
c0013bd8:	68 58 01 00 00       	push   0x158
c0013bdd:	e8 7e e5 ff ff       	call   c0012160 <operator new(unsigned long)>
c0013be2:	89 c3                	mov    ebx,eax
c0013be4:	89 04 24             	mov    DWORD PTR [esp],eax
c0013be7:	e8 40 e4 00 00       	call   c002202c <AVX::AVX()>
c0013bec:	eb 5b                	jmp    c0013c49 <setupFPU()+0x87>
c0013bee:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013bf4:	84 c0                	test   al,al
c0013bf6:	79 19                	jns    c0013c11 <setupFPU()+0x4f>
c0013bf8:	83 ec 0c             	sub    esp,0xc
c0013bfb:	68 58 01 00 00       	push   0x158
c0013c00:	e8 5b e5 ff ff       	call   c0012160 <operator new(unsigned long)>
c0013c05:	89 c3                	mov    ebx,eax
c0013c07:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c0a:	e8 43 e5 00 00       	call   c0022152 <SSE::SSE()>
c0013c0f:	eb 38                	jmp    c0013c49 <setupFPU()+0x87>
c0013c11:	a8 20                	test   al,0x20
c0013c13:	74 19                	je     c0013c2e <setupFPU()+0x6c>
c0013c15:	83 ec 0c             	sub    esp,0xc
c0013c18:	68 58 01 00 00       	push   0x158
c0013c1d:	e8 3e e5 ff ff       	call   c0012160 <operator new(unsigned long)>
c0013c22:	89 c3                	mov    ebx,eax
c0013c24:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c27:	e8 90 e4 00 00       	call   c00220bc <MMX::MMX()>
c0013c2c:	eb 1b                	jmp    c0013c49 <setupFPU()+0x87>
c0013c2e:	a8 10                	test   al,0x10
c0013c30:	74 1c                	je     c0013c4e <setupFPU()+0x8c>
c0013c32:	83 ec 0c             	sub    esp,0xc
c0013c35:	68 58 01 00 00       	push   0x158
c0013c3a:	e8 21 e5 ff ff       	call   c0012160 <operator new(unsigned long)>
c0013c3f:	89 c3                	mov    ebx,eax
c0013c41:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c44:	e8 97 e5 00 00       	call   c00221e0 <x87::x87()>
c0013c49:	83 c4 10             	add    esp,0x10
c0013c4c:	eb 35                	jmp    c0013c83 <setupFPU()+0xc1>
c0013c4e:	83 ec 0c             	sub    esp,0xc
c0013c51:	83 e0 ef             	and    eax,0xffffffef
c0013c54:	31 db                	xor    ebx,ebx
c0013c56:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013c5c:	68 08 75 02 c0       	push   0xc0027508
c0013c61:	e8 e9 e5 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0013c66:	e8 ff 3b 00 00       	call   c001786a <CPU::current()>
c0013c6b:	e8 fa 3b 00 00       	call   c001786a <CPU::current()>
c0013c70:	e8 73 17 01 00       	call   c00253e8 <CPU::readCR0()>
c0013c75:	83 c8 04             	or     eax,0x4
c0013c78:	89 04 24             	mov    DWORD PTR [esp],eax
c0013c7b:	e8 7a 17 01 00       	call   c00253fa <CPU::writeCR0(unsigned long)>
c0013c80:	83 c4 10             	add    esp,0x10
c0013c83:	89 d8                	mov    eax,ebx
c0013c85:	83 c4 08             	add    esp,0x8
c0013c88:	5b                   	pop    ebx
c0013c89:	c3                   	ret    

c0013c8a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013c8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013c8e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c92:	c1 e0 04             	shl    eax,0x4
c0013c95:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013c99:	8d 50 10             	lea    edx,[eax+0x10]
c0013c9c:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013ca2:	74 08                	je     c0013cac <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013ca4:	83 c0 04             	add    eax,0x4
c0013ca7:	39 d0                	cmp    eax,edx
c0013ca9:	75 f1                	jne    c0013c9c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013cab:	c3                   	ret    
c0013cac:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013cb6:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013cc0:	eb e2                	jmp    c0013ca4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013cc2 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013cc2:	57                   	push   edi
c0013cc3:	31 c0                	xor    eax,eax
c0013cc5:	56                   	push   esi
c0013cc6:	53                   	push   ebx
c0013cc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013ccb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013ccf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013cd3:	89 da                	mov    edx,ebx
c0013cd5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013cd9:	c1 e2 04             	shl    edx,0x4
c0013cdc:	01 ca                	add    edx,ecx
c0013cde:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0013ce6:	74 16                	je     c0013cfe <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0013ce8:	40                   	inc    eax
c0013ce9:	83 f8 04             	cmp    eax,0x4
c0013cec:	75 f0                	jne    c0013cde <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0013cee:	c7 44 24 10 4c 75 02 c0 	mov    DWORD PTR [esp+0x10],0xc002754c
c0013cf6:	5b                   	pop    ebx
c0013cf7:	5e                   	pop    esi
c0013cf8:	5f                   	pop    edi
c0013cf9:	e9 ef 4c 00 00       	jmp    c00189ed <Krnl::panic(char const*)>
c0013cfe:	8d 04 98             	lea    eax,[eax+ebx*4]
c0013d01:	8d 04 81             	lea    eax,[ecx+eax*4]
c0013d04:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0013d0a:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0013d10:	5b                   	pop    ebx
c0013d11:	5e                   	pop    esi
c0013d12:	5f                   	pop    edi
c0013d13:	c3                   	ret    

c0013d14 <doubleFault(regs*, void*)>:
c0013d14:	55                   	push   ebp
c0013d15:	89 e5                	mov    ebp,esp
c0013d17:	83 ec 08             	sub    esp,0x8
c0013d1a:	83 ec 0c             	sub    esp,0xc
c0013d1d:	68 87 75 02 c0       	push   0xc0027587
c0013d22:	e8 c6 4c 00 00       	call   c00189ed <Krnl::panic(char const*)>
c0013d27:	83 c4 10             	add    esp,0x10
c0013d2a:	90                   	nop
c0013d2b:	c9                   	leave  
c0013d2c:	c3                   	ret    
c0013d2d:	90                   	nop

c0013d2e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013d2e:	56                   	push   esi
c0013d2f:	53                   	push   ebx
c0013d30:	50                   	push   eax
c0013d31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013d35:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013d39:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013d3e:	75 35                	jne    c0013d75 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0013d40:	8d 43 20             	lea    eax,[ebx+0x20]
c0013d43:	31 d2                	xor    edx,edx
c0013d45:	89 c1                	mov    ecx,eax
c0013d47:	c1 e1 04             	shl    ecx,0x4
c0013d4a:	01 f1                	add    ecx,esi
c0013d4c:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0013d54:	74 3e                	je     c0013d94 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0013d56:	42                   	inc    edx
c0013d57:	83 fa 04             	cmp    edx,0x4
c0013d5a:	75 f0                	jne    c0013d4c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0013d5c:	83 ec 0c             	sub    esp,0xc
c0013d5f:	68 cc 75 02 c0       	push   0xc00275cc
c0013d64:	e8 84 4c 00 00       	call   c00189ed <Krnl::panic(char const*)>
c0013d69:	83 c4 10             	add    esp,0x10
c0013d6c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013d71:	5a                   	pop    edx
c0013d72:	5b                   	pop    ebx
c0013d73:	5e                   	pop    esi
c0013d74:	c3                   	ret    
c0013d75:	83 ec 0c             	sub    esp,0xc
c0013d78:	56                   	push   esi
c0013d79:	e8 be fb ff ff       	call   c001393c <Device::getName()>
c0013d7e:	83 c4 10             	add    esp,0x10
c0013d81:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013d84:	75 ba                	jne    c0013d40 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013d86:	83 fb 0f             	cmp    ebx,0xf
c0013d89:	7f 29                	jg     c0013db4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0013d8b:	0f b6 9b e0 96 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd6920]
c0013d92:	eb ac                	jmp    c0013d40 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013d94:	8d 04 82             	lea    eax,[edx+eax*4]
c0013d97:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d9b:	8d 04 86             	lea    eax,[esi+eax*4]
c0013d9e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0013da4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013da8:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0013dae:	89 d8                	mov    eax,ebx
c0013db0:	5a                   	pop    edx
c0013db1:	5b                   	pop    ebx
c0013db2:	5e                   	pop    esi
c0013db3:	c3                   	ret    
c0013db4:	83 ec 0c             	sub    esp,0xc
c0013db7:	68 94 75 02 c0       	push   0xc0027594
c0013dbc:	e8 2c 4c 00 00       	call   c00189ed <Krnl::panic(char const*)>
c0013dc1:	83 c4 10             	add    esp,0x10
c0013dc4:	e9 77 ff ff ff       	jmp    c0013d40 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013dc9:	90                   	nop

c0013dca <InterruptController::clearAllHandlers(int, bool)>:
c0013dca:	56                   	push   esi
c0013dcb:	53                   	push   ebx
c0013dcc:	52                   	push   edx
c0013dcd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013dd1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013dd5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013dda:	75 61                	jne    c0013e3d <InterruptController::clearAllHandlers(int, bool)+0x73>
c0013ddc:	8d 46 20             	lea    eax,[esi+0x20]
c0013ddf:	c1 e6 04             	shl    esi,0x4
c0013de2:	c1 e0 04             	shl    eax,0x4
c0013de5:	01 de                	add    esi,ebx
c0013de7:	01 d8                	add    eax,ebx
c0013de9:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0013df3:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0013dfd:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0013e07:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0013e11:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0013e1b:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0013e25:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0013e2f:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0013e39:	58                   	pop    eax
c0013e3a:	5b                   	pop    ebx
c0013e3b:	5e                   	pop    esi
c0013e3c:	c3                   	ret    
c0013e3d:	83 ec 0c             	sub    esp,0xc
c0013e40:	53                   	push   ebx
c0013e41:	e8 f6 fa ff ff       	call   c001393c <Device::getName()>
c0013e46:	83 c4 10             	add    esp,0x10
c0013e49:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013e4c:	75 8e                	jne    c0013ddc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e4e:	83 fe 0f             	cmp    esi,0xf
c0013e51:	7f 09                	jg     c0013e5c <InterruptController::clearAllHandlers(int, bool)+0x92>
c0013e53:	0f b6 b6 e0 96 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd6920]
c0013e5a:	eb 80                	jmp    c0013ddc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e5c:	83 ec 0c             	sub    esp,0xc
c0013e5f:	68 08 76 02 c0       	push   0xc0027608
c0013e64:	e8 84 4b 00 00       	call   c00189ed <Krnl::panic(char const*)>
c0013e69:	83 c4 10             	add    esp,0x10
c0013e6c:	e9 6b ff ff ff       	jmp    c0013ddc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013e71:	90                   	nop

c0013e72 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013e72:	56                   	push   esi
c0013e73:	53                   	push   ebx
c0013e74:	52                   	push   edx
c0013e75:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e79:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e7d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013e82:	75 3a                	jne    c0013ebe <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0013e84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e88:	8d 50 20             	lea    edx,[eax+0x20]
c0013e8b:	c1 e2 04             	shl    edx,0x4
c0013e8e:	8d 04 16             	lea    eax,[esi+edx*1]
c0013e91:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0013e95:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0013e9b:	74 0b                	je     c0013ea8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0013e9d:	83 c0 04             	add    eax,0x4
c0013ea0:	39 d0                	cmp    eax,edx
c0013ea2:	75 f1                	jne    c0013e95 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0013ea4:	58                   	pop    eax
c0013ea5:	5b                   	pop    ebx
c0013ea6:	5e                   	pop    esi
c0013ea7:	c3                   	ret    
c0013ea8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013eb2:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013ebc:	eb df                	jmp    c0013e9d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0013ebe:	83 ec 0c             	sub    esp,0xc
c0013ec1:	56                   	push   esi
c0013ec2:	e8 75 fa ff ff       	call   c001393c <Device::getName()>
c0013ec7:	83 c4 10             	add    esp,0x10
c0013eca:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013ecd:	75 b5                	jne    c0013e84 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013ecf:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0013ed4:	7f 11                	jg     c0013ee7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0013ed6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013eda:	0f b6 80 e0 96 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6920]
c0013ee1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ee5:	eb 9d                	jmp    c0013e84 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0013ee7:	83 ec 0c             	sub    esp,0xc
c0013eea:	68 08 76 02 c0       	push   0xc0027608
c0013eef:	e8 f9 4a 00 00       	call   c00189ed <Krnl::panic(char const*)>
c0013ef4:	83 c4 10             	add    esp,0x10
c0013ef7:	eb 8b                	jmp    c0013e84 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0013ef9 <nmiHandler(regs*, void*)>:
c0013ef9:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0013efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013f02:	e9 83 a9 ff ff       	jmp    c000e88a <Computer::handleNMI()>

c0013f07 <int_handler>:
c0013f07:	55                   	push   ebp
c0013f08:	57                   	push   edi
c0013f09:	56                   	push   esi
c0013f0a:	53                   	push   ebx
c0013f0b:	83 ec 0c             	sub    esp,0xc
c0013f0e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013f12:	80 3d 54 ae 02 c0 00 	cmp    BYTE PTR ds:0xc002ae54,0x0
c0013f19:	74 0b                	je     c0013f26 <int_handler+0x1f>
c0013f1b:	fa                   	cli    
c0013f1c:	f4                   	hlt    
c0013f1d:	80 3d 54 ae 02 c0 00 	cmp    BYTE PTR ds:0xc002ae54,0x0
c0013f24:	75 f5                	jne    c0013f1b <int_handler+0x14>
c0013f26:	e8 3f 39 00 00       	call   c001786a <CPU::current()>
c0013f2b:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0013f2e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0013f34:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013f37:	83 f8 17             	cmp    eax,0x17
c0013f3a:	77 13                	ja     c0013f4f <int_handler+0x48>
c0013f3c:	83 ec 08             	sub    esp,0x8
c0013f3f:	8b 17                	mov    edx,DWORD PTR [edi]
c0013f41:	8d 43 e0             	lea    eax,[ebx-0x20]
c0013f44:	0f b6 c0             	movzx  eax,al
c0013f47:	50                   	push   eax
c0013f48:	57                   	push   edi
c0013f49:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0013f4c:	83 c4 10             	add    esp,0x10
c0013f4f:	83 c3 15             	add    ebx,0x15
c0013f52:	c1 e3 04             	shl    ebx,0x4
c0013f55:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0013f59:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0013f60:	31 db                	xor    ebx,ebx
c0013f62:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0013f66:	85 c0                	test   eax,eax
c0013f68:	74 13                	je     c0013f7d <int_handler+0x76>
c0013f6a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013f6d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0013f71:	74 1c                	je     c0013f8f <int_handler+0x88>
c0013f73:	83 ec 08             	sub    esp,0x8
c0013f76:	52                   	push   edx
c0013f77:	56                   	push   esi
c0013f78:	ff d0                	call   eax
c0013f7a:	83 c4 10             	add    esp,0x10
c0013f7d:	43                   	inc    ebx
c0013f7e:	83 fb 04             	cmp    ebx,0x4
c0013f81:	75 df                	jne    c0013f62 <int_handler+0x5b>
c0013f83:	83 c4 0c             	add    esp,0xc
c0013f86:	31 c0                	xor    eax,eax
c0013f88:	5b                   	pop    ebx
c0013f89:	31 d2                	xor    edx,edx
c0013f8b:	5e                   	pop    esi
c0013f8c:	5f                   	pop    edi
c0013f8d:	5d                   	pop    ebp
c0013f8e:	c3                   	ret    
c0013f8f:	83 ec 08             	sub    esp,0x8
c0013f92:	52                   	push   edx
c0013f93:	56                   	push   esi
c0013f94:	ff d0                	call   eax
c0013f96:	83 c4 10             	add    esp,0x10
c0013f99:	83 c4 0c             	add    esp,0xc
c0013f9c:	5b                   	pop    ebx
c0013f9d:	5e                   	pop    esi
c0013f9e:	5f                   	pop    edi
c0013f9f:	5d                   	pop    ebp
c0013fa0:	c3                   	ret    
c0013fa1:	90                   	nop

c0013fa2 <InterruptController::InterruptController(char const*)>:
c0013fa2:	83 ec 1c             	sub    esp,0x1c
c0013fa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fa9:	83 ec 08             	sub    esp,0x8
c0013fac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013fb0:	50                   	push   eax
c0013fb1:	e8 94 f8 ff ff       	call   c001384a <Device::Device(char const*)>
c0013fb6:	83 c4 10             	add    esp,0x10
c0013fb9:	ba 3c 78 02 c0       	mov    edx,0xc002783c
c0013fbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc2:	89 10                	mov    DWORD PTR [eax],edx
c0013fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0013fd2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013fda:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0013fe2:	7f 5e                	jg     c0014042 <InterruptController::InterruptController(char const*)+0xa0>
c0013fe4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013fec:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0013ff1:	7f 49                	jg     c001403c <InterruptController::InterruptController(char const*)+0x9a>
c0013ff3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ff7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013ffb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014002:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014006:	01 ca                	add    edx,ecx
c0014008:	83 c2 54             	add    edx,0x54
c001400b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014013:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014017:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001401b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014022:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014026:	01 ca                	add    edx,ecx
c0014028:	81 c2 54 04 00 00    	add    edx,0x454
c001402e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014036:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001403a:	eb b0                	jmp    c0013fec <InterruptController::InterruptController(char const*)+0x4a>
c001403c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014040:	eb 98                	jmp    c0013fda <InterruptController::InterruptController(char const*)+0x38>
c0014042:	90                   	nop
c0014043:	83 c4 1c             	add    esp,0x1c
c0014046:	c3                   	ret    
c0014047:	90                   	nop

c0014048 <InterruptController::~InterruptController()>:
c0014048:	83 ec 0c             	sub    esp,0xc
c001404b:	ba 3c 78 02 c0       	mov    edx,0xc002783c
c0014050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014054:	89 10                	mov    DWORD PTR [eax],edx
c0014056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001405a:	83 ec 0c             	sub    esp,0xc
c001405d:	50                   	push   eax
c001405e:	e8 99 f4 ff ff       	call   c00134fc <Device::~Device()>
c0014063:	83 c4 10             	add    esp,0x10
c0014066:	90                   	nop
c0014067:	83 c4 0c             	add    esp,0xc
c001406a:	c3                   	ret    
c001406b:	90                   	nop

c001406c <InterruptController::~InterruptController()>:
c001406c:	83 ec 0c             	sub    esp,0xc
c001406f:	83 ec 0c             	sub    esp,0xc
c0014072:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014076:	e8 cd ff ff ff       	call   c0014048 <InterruptController::~InterruptController()>
c001407b:	83 c4 10             	add    esp,0x10
c001407e:	83 ec 08             	sub    esp,0x8
c0014081:	68 58 21 00 00       	push   0x2158
c0014086:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001408a:	e8 e0 e0 ff ff       	call   c001216f <operator delete(void*, unsigned long)>
c001408f:	83 c4 10             	add    esp,0x10
c0014092:	83 c4 0c             	add    esp,0xc
c0014095:	c3                   	ret    

c0014096 <displayDebugInfo(regs*)>:
c0014096:	55                   	push   ebp
c0014097:	57                   	push   edi
c0014098:	56                   	push   esi
c0014099:	53                   	push   ebx
c001409a:	83 ec 24             	sub    esp,0x24
c001409d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00140a1:	0f 20 c2             	mov    edx,cr0
c00140a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00140a8:	0f 20 d7             	mov    edi,cr2
c00140ab:	0f 20 de             	mov    esi,cr3
c00140ae:	0f 20 e5             	mov    ebp,cr4
c00140b1:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00140b4:	68 42 76 02 c0       	push   0xc0027642
c00140b9:	e8 91 e1 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00140be:	58                   	pop    eax
c00140bf:	5a                   	pop    edx
c00140c0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00140c3:	68 4d 76 02 c0       	push   0xc002764d
c00140c8:	e8 82 e1 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00140cd:	59                   	pop    ecx
c00140ce:	58                   	pop    eax
c00140cf:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00140d2:	68 58 76 02 c0       	push   0xc0027658
c00140d7:	e8 73 e1 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00140dc:	58                   	pop    eax
c00140dd:	5a                   	pop    edx
c00140de:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00140e1:	68 63 76 02 c0       	push   0xc0027663
c00140e6:	e8 64 e1 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00140eb:	59                   	pop    ecx
c00140ec:	58                   	pop    eax
c00140ed:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00140f0:	68 6e 76 02 c0       	push   0xc002766e
c00140f5:	e8 55 e1 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00140fa:	58                   	pop    eax
c00140fb:	5a                   	pop    edx
c00140fc:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00140ff:	68 79 76 02 c0       	push   0xc0027679
c0014104:	e8 46 e1 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0014109:	59                   	pop    ecx
c001410a:	58                   	pop    eax
c001410b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001410e:	68 84 76 02 c0       	push   0xc0027684
c0014113:	e8 37 e1 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0014118:	58                   	pop    eax
c0014119:	5a                   	pop    edx
c001411a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001411d:	68 8f 76 02 c0       	push   0xc002768f
c0014122:	e8 28 e1 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0014127:	59                   	pop    ecx
c0014128:	58                   	pop    eax
c0014129:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001412c:	68 9a 76 02 c0       	push   0xc002769a
c0014131:	e8 19 e1 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0014136:	58                   	pop    eax
c0014137:	5a                   	pop    edx
c0014138:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001413b:	68 a9 76 02 c0       	push   0xc00276a9
c0014140:	e8 0a e1 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0014145:	59                   	pop    ecx
c0014146:	58                   	pop    eax
c0014147:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001414a:	68 b4 76 02 c0       	push   0xc00276b4
c001414f:	e8 fb e0 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0014154:	58                   	pop    eax
c0014155:	5a                   	pop    edx
c0014156:	57                   	push   edi
c0014157:	68 bf 76 02 c0       	push   0xc00276bf
c001415c:	e8 ee e0 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0014161:	59                   	pop    ecx
c0014162:	58                   	pop    eax
c0014163:	56                   	push   esi
c0014164:	68 ca 76 02 c0       	push   0xc00276ca
c0014169:	e8 e1 e0 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001416e:	58                   	pop    eax
c001416f:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014174:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001417a:	e8 fc c2 ff ff       	call   c001047b <setActiveTerminal(VgaText*)>
c001417f:	58                   	pop    eax
c0014180:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014183:	5a                   	pop    edx
c0014184:	c1 e0 05             	shl    eax,0x5
c0014187:	05 40 94 02 c0       	add    eax,0xc0029440
c001418c:	50                   	push   eax
c001418d:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014192:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014198:	e8 fd c6 ff ff       	call   c001089a <VgaText::puts(char const*)>
c001419d:	59                   	pop    ecx
c001419e:	58                   	pop    eax
c001419f:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00141a4:	68 d5 76 02 c0       	push   0xc00276d5
c00141a9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141af:	e8 e6 c6 ff ff       	call   c001089a <VgaText::puts(char const*)>
c00141b4:	58                   	pop    eax
c00141b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141ba:	5a                   	pop    edx
c00141bb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00141be:	83 c0 0c             	add    eax,0xc
c00141c1:	50                   	push   eax
c00141c2:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00141c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141cd:	e8 c8 c6 ff ff       	call   c001089a <VgaText::puts(char const*)>
c00141d2:	59                   	pop    ecx
c00141d3:	58                   	pop    eax
c00141d4:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00141d9:	68 de 76 02 c0       	push   0xc00276de
c00141de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141e4:	e8 b1 c6 ff ff       	call   c001089a <VgaText::puts(char const*)>
c00141e9:	58                   	pop    eax
c00141ea:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00141ef:	5a                   	pop    edx
c00141f0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00141f3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00141f9:	e8 c2 c6 ff ff       	call   c00108c0 <VgaText::putx(unsigned int)>
c00141fe:	59                   	pop    ecx
c00141ff:	58                   	pop    eax
c0014200:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014205:	68 e6 76 02 c0       	push   0xc00276e6
c001420a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014210:	e8 85 c6 ff ff       	call   c001089a <VgaText::puts(char const*)>
c0014215:	58                   	pop    eax
c0014216:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001421b:	5a                   	pop    edx
c001421c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001421f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014225:	e8 96 c6 ff ff       	call   c00108c0 <VgaText::putx(unsigned int)>
c001422a:	59                   	pop    ecx
c001422b:	58                   	pop    eax
c001422c:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014231:	68 ee 76 02 c0       	push   0xc00276ee
c0014236:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001423c:	e8 59 c6 ff ff       	call   c001089a <VgaText::puts(char const*)>
c0014241:	58                   	pop    eax
c0014242:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014247:	5a                   	pop    edx
c0014248:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001424b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014251:	e8 6a c6 ff ff       	call   c00108c0 <VgaText::putx(unsigned int)>
c0014256:	59                   	pop    ecx
c0014257:	58                   	pop    eax
c0014258:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001425d:	68 f6 76 02 c0       	push   0xc00276f6
c0014262:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014268:	e8 2d c6 ff ff       	call   c001089a <VgaText::puts(char const*)>
c001426d:	58                   	pop    eax
c001426e:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014273:	5a                   	pop    edx
c0014274:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014277:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001427d:	e8 3e c6 ff ff       	call   c00108c0 <VgaText::putx(unsigned int)>
c0014282:	59                   	pop    ecx
c0014283:	58                   	pop    eax
c0014284:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014289:	68 fe 76 02 c0       	push   0xc00276fe
c001428e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014294:	e8 01 c6 ff ff       	call   c001089a <VgaText::puts(char const*)>
c0014299:	58                   	pop    eax
c001429a:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001429f:	5a                   	pop    edx
c00142a0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00142a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142a9:	e8 12 c6 ff ff       	call   c00108c0 <VgaText::putx(unsigned int)>
c00142ae:	59                   	pop    ecx
c00142af:	58                   	pop    eax
c00142b0:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00142b5:	68 06 77 02 c0       	push   0xc0027706
c00142ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142c0:	e8 d5 c5 ff ff       	call   c001089a <VgaText::puts(char const*)>
c00142c5:	58                   	pop    eax
c00142c6:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00142cb:	5a                   	pop    edx
c00142cc:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00142cf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142d5:	e8 e6 c5 ff ff       	call   c00108c0 <VgaText::putx(unsigned int)>
c00142da:	59                   	pop    ecx
c00142db:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00142e0:	5b                   	pop    ebx
c00142e1:	68 0e 77 02 c0       	push   0xc002770e
c00142e6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142ec:	e8 a9 c5 ff ff       	call   c001089a <VgaText::puts(char const*)>
c00142f1:	58                   	pop    eax
c00142f2:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00142f7:	5a                   	pop    edx
c00142f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00142fc:	52                   	push   edx
c00142fd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014303:	e8 b8 c5 ff ff       	call   c00108c0 <VgaText::putx(unsigned int)>
c0014308:	59                   	pop    ecx
c0014309:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001430e:	5b                   	pop    ebx
c001430f:	68 17 77 02 c0       	push   0xc0027717
c0014314:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001431a:	e8 7b c5 ff ff       	call   c001089a <VgaText::puts(char const*)>
c001431f:	58                   	pop    eax
c0014320:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014325:	5a                   	pop    edx
c0014326:	57                   	push   edi
c0014327:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001432d:	e8 8e c5 ff ff       	call   c00108c0 <VgaText::putx(unsigned int)>
c0014332:	59                   	pop    ecx
c0014333:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014338:	5b                   	pop    ebx
c0014339:	68 1f 77 02 c0       	push   0xc002771f
c001433e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014344:	e8 51 c5 ff ff       	call   c001089a <VgaText::puts(char const*)>
c0014349:	5f                   	pop    edi
c001434a:	58                   	pop    eax
c001434b:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014350:	56                   	push   esi
c0014351:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014357:	e8 64 c5 ff ff       	call   c00108c0 <VgaText::putx(unsigned int)>
c001435c:	58                   	pop    eax
c001435d:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014362:	5a                   	pop    edx
c0014363:	68 27 77 02 c0       	push   0xc0027727
c0014368:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001436e:	e8 27 c5 ff ff       	call   c001089a <VgaText::puts(char const*)>
c0014373:	59                   	pop    ecx
c0014374:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014379:	5b                   	pop    ebx
c001437a:	55                   	push   ebp
c001437b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014381:	e8 3a c5 ff ff       	call   c00108c0 <VgaText::putx(unsigned int)>
c0014386:	5e                   	pop    esi
c0014387:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001438c:	5f                   	pop    edi
c001438d:	68 2f 77 02 c0       	push   0xc002772f
c0014392:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014398:	e8 fd c4 ff ff       	call   c001089a <VgaText::puts(char const*)>
c001439d:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00143a2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00143a8:	e8 56 10 01 00       	call   c0025403 <CPU::readDR0()>
c00143ad:	5d                   	pop    ebp
c00143ae:	5a                   	pop    edx
c00143af:	50                   	push   eax
c00143b0:	53                   	push   ebx
c00143b1:	e8 0a c5 ff ff       	call   c00108c0 <VgaText::putx(unsigned int)>
c00143b6:	59                   	pop    ecx
c00143b7:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00143bc:	5b                   	pop    ebx
c00143bd:	68 38 77 02 c0       	push   0xc0027738
c00143c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143c8:	e8 cd c4 ff ff       	call   c001089a <VgaText::puts(char const*)>
c00143cd:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00143d2:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00143d8:	e8 38 10 01 00       	call   c0025415 <CPU::readDR1()>
c00143dd:	5e                   	pop    esi
c00143de:	5f                   	pop    edi
c00143df:	50                   	push   eax
c00143e0:	53                   	push   ebx
c00143e1:	e8 da c4 ff ff       	call   c00108c0 <VgaText::putx(unsigned int)>
c00143e6:	5d                   	pop    ebp
c00143e7:	58                   	pop    eax
c00143e8:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00143ed:	68 40 77 02 c0       	push   0xc0027740
c00143f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143f8:	e8 9d c4 ff ff       	call   c001089a <VgaText::puts(char const*)>
c00143fd:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014402:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014408:	e8 1a 10 01 00       	call   c0025427 <CPU::readDR2()>
c001440d:	5a                   	pop    edx
c001440e:	59                   	pop    ecx
c001440f:	50                   	push   eax
c0014410:	53                   	push   ebx
c0014411:	e8 aa c4 ff ff       	call   c00108c0 <VgaText::putx(unsigned int)>
c0014416:	5b                   	pop    ebx
c0014417:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001441c:	5e                   	pop    esi
c001441d:	68 48 77 02 c0       	push   0xc0027748
c0014422:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014428:	e8 6d c4 ff ff       	call   c001089a <VgaText::puts(char const*)>
c001442d:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014432:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014438:	e8 fc 0f 01 00       	call   c0025439 <CPU::readDR3()>
c001443d:	5f                   	pop    edi
c001443e:	5d                   	pop    ebp
c001443f:	50                   	push   eax
c0014440:	53                   	push   ebx
c0014441:	e8 7a c4 ff ff       	call   c00108c0 <VgaText::putx(unsigned int)>
c0014446:	58                   	pop    eax
c0014447:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001444c:	5a                   	pop    edx
c001444d:	68 50 77 02 c0       	push   0xc0027750
c0014452:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014458:	e8 3d c4 ff ff       	call   c001089a <VgaText::puts(char const*)>
c001445d:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014462:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014468:	e8 de 0f 01 00       	call   c002544b <CPU::readDR6()>
c001446d:	59                   	pop    ecx
c001446e:	5e                   	pop    esi
c001446f:	50                   	push   eax
c0014470:	53                   	push   ebx
c0014471:	e8 4a c4 ff ff       	call   c00108c0 <VgaText::putx(unsigned int)>
c0014476:	5f                   	pop    edi
c0014477:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c001447c:	5d                   	pop    ebp
c001447d:	68 58 77 02 c0       	push   0xc0027758
c0014482:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014488:	e8 0d c4 ff ff       	call   c001089a <VgaText::puts(char const*)>
c001448d:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0014492:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014498:	e8 c0 0f 01 00       	call   c002545d <CPU::readDR7()>
c001449d:	5a                   	pop    edx
c001449e:	59                   	pop    ecx
c001449f:	50                   	push   eax
c00144a0:	53                   	push   ebx
c00144a1:	e8 1a c4 ff ff       	call   c00108c0 <VgaText::putx(unsigned int)>
c00144a6:	fa                   	cli    
c00144a7:	f4                   	hlt    
c00144a8:	83 c4 10             	add    esp,0x10
c00144ab:	eb fe                	jmp    c00144ab <displayDebugInfo(regs*)+0x415>

c00144ad <x87EmulHandler(regs*, void*)>:
c00144ad:	53                   	push   ebx
c00144ae:	83 ec 14             	sub    esp,0x14
c00144b1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144b5:	53                   	push   ebx
c00144b6:	e8 84 8d 00 00       	call   c001d23f <Vm::x87Handler(regs*)>
c00144bb:	83 c4 10             	add    esp,0x10
c00144be:	84 c0                	test   al,al
c00144c0:	74 05                	je     c00144c7 <x87EmulHandler(regs*, void*)+0x1a>
c00144c2:	83 c4 08             	add    esp,0x8
c00144c5:	5b                   	pop    ebx
c00144c6:	c3                   	ret    
c00144c7:	83 ec 0c             	sub    esp,0xc
c00144ca:	68 60 77 02 c0       	push   0xc0027760
c00144cf:	e8 7b dd ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00144d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144d7:	e8 ba fb ff ff       	call   c0014096 <displayDebugInfo(regs*)>

c00144dc <gpFault(regs*, void*)>:
c00144dc:	53                   	push   ebx
c00144dd:	83 ec 14             	sub    esp,0x14
c00144e0:	c7 05 90 a5 02 c0 b3 c7 01 c0 	mov    DWORD PTR ds:0xc002a590,0xc001c7b3
c00144ea:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144ee:	53                   	push   ebx
c00144ef:	e8 bf 82 00 00       	call   c001c7b3 <Vm::faultHandler(regs*)>
c00144f4:	83 c4 10             	add    esp,0x10
c00144f7:	84 c0                	test   al,al
c00144f9:	74 05                	je     c0014500 <gpFault(regs*, void*)+0x24>
c00144fb:	83 c4 08             	add    esp,0x8
c00144fe:	5b                   	pop    ebx
c00144ff:	c3                   	ret    
c0014500:	83 ec 0c             	sub    esp,0xc
c0014503:	68 76 77 02 c0       	push   0xc0027776
c0014508:	e8 42 dd ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001450d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014510:	e8 81 fb ff ff       	call   c0014096 <displayDebugInfo(regs*)>

c0014515 <pgFault(regs*, void*)>:
c0014515:	83 ec 18             	sub    esp,0x18
c0014518:	68 91 77 02 c0       	push   0xc0027791
c001451d:	e8 2d dd ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0014522:	58                   	pop    eax
c0014523:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014527:	e8 6a fb ff ff       	call   c0014096 <displayDebugInfo(regs*)>

c001452c <otherISRHandler(regs*, void*)>:
c001452c:	53                   	push   ebx
c001452d:	83 ec 0c             	sub    esp,0xc
c0014530:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014534:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014537:	50                   	push   eax
c0014538:	50                   	push   eax
c0014539:	68 9e 77 02 c0       	push   0xc002779e
c001453e:	e8 0c dd ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0014543:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014546:	e8 4b fb ff ff       	call   c0014096 <displayDebugInfo(regs*)>

c001454b <opcodeFault(regs*, void*)>:
c001454b:	55                   	push   ebp
c001454c:	89 e5                	mov    ebp,esp
c001454e:	56                   	push   esi
c001454f:	53                   	push   ebx
c0014550:	83 ec 40             	sub    esp,0x40
c0014553:	e8 12 33 00 00       	call   c001786a <CPU::current()>
c0014558:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001455e:	84 c0                	test   al,al
c0014560:	74 24                	je     c0014586 <opcodeFault(regs*, void*)+0x3b>
c0014562:	83 ec 0c             	sub    esp,0xc
c0014565:	68 bc 77 02 c0       	push   0xc00277bc
c001456a:	e8 e0 dc ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001456f:	83 c4 10             	add    esp,0x10
c0014572:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014575:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014578:	8d 50 19             	lea    edx,[eax+0x19]
c001457b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001457e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014581:	e9 77 05 00 00       	jmp    c0014afd <opcodeFault(regs*, void*)+0x5b2>
c0014586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014589:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001458c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001458f:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014593:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014597:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001459a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001459d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00145a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145a3:	8a 00                	mov    al,BYTE PTR [eax]
c00145a5:	3c f0                	cmp    al,0xf0
c00145a7:	75 17                	jne    c00145c0 <opcodeFault(regs*, void*)+0x75>
c00145a9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00145ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145af:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145b2:	8d 50 01             	lea    edx,[eax+0x1]
c00145b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145b8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145bb:	e9 da 00 00 00       	jmp    c001469a <opcodeFault(regs*, void*)+0x14f>
c00145c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145c3:	8a 00                	mov    al,BYTE PTR [eax]
c00145c5:	3c f2                	cmp    al,0xf2
c00145c7:	74 09                	je     c00145d2 <opcodeFault(regs*, void*)+0x87>
c00145c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145cc:	8a 00                	mov    al,BYTE PTR [eax]
c00145ce:	3c f3                	cmp    al,0xf3
c00145d0:	75 1b                	jne    c00145ed <opcodeFault(regs*, void*)+0xa2>
c00145d2:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00145d6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00145d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145dc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00145df:	8d 50 01             	lea    edx,[eax+0x1]
c00145e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00145e5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00145e8:	e9 ad 00 00 00       	jmp    c001469a <opcodeFault(regs*, void*)+0x14f>
c00145ed:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00145f0:	8a 00                	mov    al,BYTE PTR [eax]
c00145f2:	3c 66                	cmp    al,0x66
c00145f4:	75 1f                	jne    c0014615 <opcodeFault(regs*, void*)+0xca>
c00145f6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00145fa:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00145fe:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014601:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014604:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014607:	8d 50 01             	lea    edx,[eax+0x1]
c001460a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001460d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014610:	e9 85 00 00 00       	jmp    c001469a <opcodeFault(regs*, void*)+0x14f>
c0014615:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014618:	8a 00                	mov    al,BYTE PTR [eax]
c001461a:	3c 67                	cmp    al,0x67
c001461c:	75 18                	jne    c0014636 <opcodeFault(regs*, void*)+0xeb>
c001461e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014622:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014628:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001462b:	8d 50 01             	lea    edx,[eax+0x1]
c001462e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014631:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014634:	eb 64                	jmp    c001469a <opcodeFault(regs*, void*)+0x14f>
c0014636:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014639:	8a 00                	mov    al,BYTE PTR [eax]
c001463b:	3c 2e                	cmp    al,0x2e
c001463d:	74 09                	je     c0014648 <opcodeFault(regs*, void*)+0xfd>
c001463f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014642:	8a 00                	mov    al,BYTE PTR [eax]
c0014644:	3c 3e                	cmp    al,0x3e
c0014646:	75 18                	jne    c0014660 <opcodeFault(regs*, void*)+0x115>
c0014648:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001464c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001464f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014652:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014655:	8d 50 01             	lea    edx,[eax+0x1]
c0014658:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001465b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001465e:	eb 3a                	jmp    c001469a <opcodeFault(regs*, void*)+0x14f>
c0014660:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014663:	8a 00                	mov    al,BYTE PTR [eax]
c0014665:	3c 36                	cmp    al,0x36
c0014667:	74 1b                	je     c0014684 <opcodeFault(regs*, void*)+0x139>
c0014669:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001466c:	8a 00                	mov    al,BYTE PTR [eax]
c001466e:	3c 26                	cmp    al,0x26
c0014670:	74 12                	je     c0014684 <opcodeFault(regs*, void*)+0x139>
c0014672:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014675:	8a 00                	mov    al,BYTE PTR [eax]
c0014677:	3c 64                	cmp    al,0x64
c0014679:	74 09                	je     c0014684 <opcodeFault(regs*, void*)+0x139>
c001467b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001467e:	8a 00                	mov    al,BYTE PTR [eax]
c0014680:	3c 65                	cmp    al,0x65
c0014682:	75 16                	jne    c001469a <opcodeFault(regs*, void*)+0x14f>
c0014684:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014688:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001468b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001468e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014691:	8d 50 01             	lea    edx,[eax+0x1]
c0014694:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014697:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001469a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001469d:	8a 00                	mov    al,BYTE PTR [eax]
c001469f:	3c 0f                	cmp    al,0xf
c00146a1:	0f 85 ad 00 00 00    	jne    c0014754 <opcodeFault(regs*, void*)+0x209>
c00146a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146aa:	40                   	inc    eax
c00146ab:	8a 00                	mov    al,BYTE PTR [eax]
c00146ad:	3c c2                	cmp    al,0xc2
c00146af:	74 0e                	je     c00146bf <opcodeFault(regs*, void*)+0x174>
c00146b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146b4:	40                   	inc    eax
c00146b5:	8a 00                	mov    al,BYTE PTR [eax]
c00146b7:	3c c3                	cmp    al,0xc3
c00146b9:	0f 85 95 00 00 00    	jne    c0014754 <opcodeFault(regs*, void*)+0x209>
c00146bf:	83 ec 0c             	sub    esp,0xc
c00146c2:	68 df 77 02 c0       	push   0xc00277df
c00146c7:	e8 83 db ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00146cc:	83 c4 10             	add    esp,0x10
c00146cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146d2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00146d5:	8d 50 01             	lea    edx,[eax+0x1]
c00146d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00146db:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00146de:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00146e1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146e4:	8a 00                	mov    al,BYTE PTR [eax]
c00146e6:	8d 50 fe             	lea    edx,[eax-0x2]
c00146e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00146ec:	88 10                	mov    BYTE PTR [eax],dl
c00146ee:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00146f1:	50                   	push   eax
c00146f2:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00146f5:	50                   	push   eax
c00146f6:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00146f9:	50                   	push   eax
c00146fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00146fd:	e8 f0 40 00 00       	call   c00187f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014702:	83 c4 10             	add    esp,0x10
c0014705:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014708:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001470b:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001470e:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014711:	01 d0                	add    eax,edx
c0014713:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014719:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001471c:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001471f:	48                   	dec    eax
c0014720:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014723:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014726:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014729:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001472c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001472f:	83 ec 04             	sub    esp,0x4
c0014732:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014735:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014738:	50                   	push   eax
c0014739:	e8 2b ba fe ff       	call   c0000169 <voodooXADD>
c001473e:	83 c4 10             	add    esp,0x10
c0014741:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014744:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014747:	01 c2                	add    edx,eax
c0014749:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001474c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001474f:	e9 a9 03 00 00       	jmp    c0014afd <opcodeFault(regs*, void*)+0x5b2>
c0014754:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014757:	8a 00                	mov    al,BYTE PTR [eax]
c0014759:	3c 0f                	cmp    al,0xf
c001475b:	0f 85 8b 01 00 00    	jne    c00148ec <opcodeFault(regs*, void*)+0x3a1>
c0014761:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014764:	40                   	inc    eax
c0014765:	8a 00                	mov    al,BYTE PTR [eax]
c0014767:	3c c7                	cmp    al,0xc7
c0014769:	0f 86 7d 01 00 00    	jbe    c00148ec <opcodeFault(regs*, void*)+0x3a1>
c001476f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014772:	40                   	inc    eax
c0014773:	8a 00                	mov    al,BYTE PTR [eax]
c0014775:	3c cf                	cmp    al,0xcf
c0014777:	0f 87 6f 01 00 00    	ja     c00148ec <opcodeFault(regs*, void*)+0x3a1>
c001477d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014780:	40                   	inc    eax
c0014781:	8a 00                	mov    al,BYTE PTR [eax]
c0014783:	83 c0 38             	add    eax,0x38
c0014786:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014789:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001478d:	75 0b                	jne    c001479a <opcodeFault(regs*, void*)+0x24f>
c001478f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014792:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014795:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014798:	eb 75                	jmp    c001480f <opcodeFault(regs*, void*)+0x2c4>
c001479a:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001479e:	75 0b                	jne    c00147ab <opcodeFault(regs*, void*)+0x260>
c00147a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147a3:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00147a6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147a9:	eb 64                	jmp    c001480f <opcodeFault(regs*, void*)+0x2c4>
c00147ab:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00147af:	75 0b                	jne    c00147bc <opcodeFault(regs*, void*)+0x271>
c00147b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147b4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00147b7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147ba:	eb 53                	jmp    c001480f <opcodeFault(regs*, void*)+0x2c4>
c00147bc:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00147c0:	75 0b                	jne    c00147cd <opcodeFault(regs*, void*)+0x282>
c00147c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147c5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00147c8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147cb:	eb 42                	jmp    c001480f <opcodeFault(regs*, void*)+0x2c4>
c00147cd:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00147d1:	75 0b                	jne    c00147de <opcodeFault(regs*, void*)+0x293>
c00147d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147d6:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00147d9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147dc:	eb 31                	jmp    c001480f <opcodeFault(regs*, void*)+0x2c4>
c00147de:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00147e2:	75 0b                	jne    c00147ef <opcodeFault(regs*, void*)+0x2a4>
c00147e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147e7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00147ea:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147ed:	eb 20                	jmp    c001480f <opcodeFault(regs*, void*)+0x2c4>
c00147ef:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00147f3:	75 0b                	jne    c0014800 <opcodeFault(regs*, void*)+0x2b5>
c00147f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00147f8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00147fb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00147fe:	eb 0f                	jmp    c001480f <opcodeFault(regs*, void*)+0x2c4>
c0014800:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014804:	75 09                	jne    c001480f <opcodeFault(regs*, void*)+0x2c4>
c0014806:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014809:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001480c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001480f:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014813:	74 10                	je     c0014825 <opcodeFault(regs*, void*)+0x2da>
c0014815:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001481c:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014823:	eb 2d                	jmp    c0014852 <opcodeFault(regs*, void*)+0x307>
c0014825:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014828:	c1 e0 18             	shl    eax,0x18
c001482b:	89 c2                	mov    edx,eax
c001482d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014830:	c1 e0 08             	shl    eax,0x8
c0014833:	25 00 00 ff 00       	and    eax,0xff0000
c0014838:	09 c2                	or     edx,eax
c001483a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001483d:	c1 e8 08             	shr    eax,0x8
c0014840:	25 00 ff 00 00       	and    eax,0xff00
c0014845:	09 c2                	or     edx,eax
c0014847:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001484a:	c1 e8 18             	shr    eax,0x18
c001484d:	09 d0                	or     eax,edx
c001484f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014852:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014856:	75 0b                	jne    c0014863 <opcodeFault(regs*, void*)+0x318>
c0014858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001485b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001485e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014861:	eb 75                	jmp    c00148d8 <opcodeFault(regs*, void*)+0x38d>
c0014863:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014867:	75 0b                	jne    c0014874 <opcodeFault(regs*, void*)+0x329>
c0014869:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001486c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001486f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014872:	eb 64                	jmp    c00148d8 <opcodeFault(regs*, void*)+0x38d>
c0014874:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014878:	75 0b                	jne    c0014885 <opcodeFault(regs*, void*)+0x33a>
c001487a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001487d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014880:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014883:	eb 53                	jmp    c00148d8 <opcodeFault(regs*, void*)+0x38d>
c0014885:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014889:	75 0b                	jne    c0014896 <opcodeFault(regs*, void*)+0x34b>
c001488b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001488e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014891:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014894:	eb 42                	jmp    c00148d8 <opcodeFault(regs*, void*)+0x38d>
c0014896:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001489a:	75 0b                	jne    c00148a7 <opcodeFault(regs*, void*)+0x35c>
c001489c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001489f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148a2:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00148a5:	eb 31                	jmp    c00148d8 <opcodeFault(regs*, void*)+0x38d>
c00148a7:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00148ab:	75 0b                	jne    c00148b8 <opcodeFault(regs*, void*)+0x36d>
c00148ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148b0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148b3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00148b6:	eb 20                	jmp    c00148d8 <opcodeFault(regs*, void*)+0x38d>
c00148b8:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00148bc:	75 0b                	jne    c00148c9 <opcodeFault(regs*, void*)+0x37e>
c00148be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148c1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148c4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00148c7:	eb 0f                	jmp    c00148d8 <opcodeFault(regs*, void*)+0x38d>
c00148c9:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00148cd:	75 09                	jne    c00148d8 <opcodeFault(regs*, void*)+0x38d>
c00148cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148d2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00148d5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00148d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148db:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00148de:	8d 50 02             	lea    edx,[eax+0x2]
c00148e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00148e4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00148e7:	e9 11 02 00 00       	jmp    c0014afd <opcodeFault(regs*, void*)+0x5b2>
c00148ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00148ef:	8a 00                	mov    al,BYTE PTR [eax]
c00148f1:	3c 0f                	cmp    al,0xf
c00148f3:	0f 85 76 01 00 00    	jne    c0014a6f <opcodeFault(regs*, void*)+0x524>
c00148f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00148fc:	40                   	inc    eax
c00148fd:	8a 00                	mov    al,BYTE PTR [eax]
c00148ff:	3c c7                	cmp    al,0xc7
c0014901:	0f 85 68 01 00 00    	jne    c0014a6f <opcodeFault(regs*, void*)+0x524>
c0014907:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001490a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001490d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014910:	8d 50 01             	lea    edx,[eax+0x1]
c0014913:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014916:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014919:	8d 45 ba             	lea    eax,[ebp-0x46]
c001491c:	50                   	push   eax
c001491d:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014920:	50                   	push   eax
c0014921:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014924:	50                   	push   eax
c0014925:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014928:	e8 c5 3e 00 00       	call   c00187f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001492d:	83 c4 10             	add    esp,0x10
c0014930:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014933:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014936:	83 f0 01             	xor    eax,0x1
c0014939:	84 c0                	test   al,al
c001493b:	0f 84 2e 01 00 00    	je     c0014a6f <opcodeFault(regs*, void*)+0x524>
c0014941:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014944:	3c 01                	cmp    al,0x1
c0014946:	0f 85 23 01 00 00    	jne    c0014a6f <opcodeFault(regs*, void*)+0x524>
c001494c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001494f:	83 f0 01             	xor    eax,0x1
c0014952:	84 c0                	test   al,al
c0014954:	0f 84 15 01 00 00    	je     c0014a6f <opcodeFault(regs*, void*)+0x524>
c001495a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001495d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014960:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014963:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001496a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001496d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014970:	89 c2                	mov    edx,eax
c0014972:	b8 00 00 00 00       	mov    eax,0x0
c0014977:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001497a:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001497d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014980:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014983:	ba 00 00 00 00       	mov    edx,0x0
c0014988:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001498b:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001498e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014991:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014994:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014997:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001499e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00149a1:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00149a4:	89 c2                	mov    edx,eax
c00149a6:	b8 00 00 00 00       	mov    eax,0x0
c00149ab:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00149ae:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00149b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149b4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00149b7:	ba 00 00 00 00       	mov    edx,0x0
c00149bc:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00149bf:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00149c2:	e8 79 6f 00 00       	call   c001b940 <lockScheduler()>
c00149c7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00149ca:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00149cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00149cf:	89 c1                	mov    ecx,eax
c00149d1:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00149d4:	89 cb                	mov    ebx,ecx
c00149d6:	89 d0                	mov    eax,edx
c00149d8:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00149db:	89 c6                	mov    esi,eax
c00149dd:	89 f0                	mov    eax,esi
c00149df:	09 d8                	or     eax,ebx
c00149e1:	85 c0                	test   eax,eax
c00149e3:	75 21                	jne    c0014a06 <opcodeFault(regs*, void*)+0x4bb>
c00149e5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00149e8:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00149eb:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00149ee:	89 01                	mov    DWORD PTR [ecx],eax
c00149f0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00149f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149f6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00149f9:	83 c8 40             	or     eax,0x40
c00149fc:	89 c2                	mov    edx,eax
c00149fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a01:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014a04:	eb 3e                	jmp    c0014a44 <opcodeFault(regs*, void*)+0x4f9>
c0014a06:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014a09:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014a0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a0e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014a11:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014a14:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014a17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a1a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014a1d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014a20:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014a23:	89 d0                	mov    eax,edx
c0014a25:	31 d2                	xor    edx,edx
c0014a27:	89 c3                	mov    ebx,eax
c0014a29:	89 d6                	mov    esi,edx
c0014a2b:	89 da                	mov    edx,ebx
c0014a2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a30:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014a33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a36:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014a39:	83 e0 bf             	and    eax,0xffffffbf
c0014a3c:	89 c2                	mov    edx,eax
c0014a3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a41:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014a44:	e8 f9 6e 00 00       	call   c001b942 <unlockScheduler()>
c0014a49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a4c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014a4f:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014a52:	01 c2                	add    edx,eax
c0014a54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a57:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014a5a:	83 ec 0c             	sub    esp,0xc
c0014a5d:	68 ee 77 02 c0       	push   0xc00277ee
c0014a62:	e8 e8 d7 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0014a67:	83 c4 10             	add    esp,0x10
c0014a6a:	e9 8e 00 00 00       	jmp    c0014afd <opcodeFault(regs*, void*)+0x5b2>
c0014a6f:	83 ec 0c             	sub    esp,0xc
c0014a72:	68 01 78 02 c0       	push   0xc0027801
c0014a77:	e8 d3 d7 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0014a7c:	83 c4 10             	add    esp,0x10
c0014a7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a82:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014a85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a88:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a8b:	c1 e0 04             	shl    eax,0x4
c0014a8e:	01 d0                	add    eax,edx
c0014a90:	83 c0 03             	add    eax,0x3
c0014a93:	8a 00                	mov    al,BYTE PTR [eax]
c0014a95:	0f b6 d8             	movzx  ebx,al
c0014a98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a9b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014a9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aa1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014aa4:	c1 e0 04             	shl    eax,0x4
c0014aa7:	01 d0                	add    eax,edx
c0014aa9:	83 c0 02             	add    eax,0x2
c0014aac:	8a 00                	mov    al,BYTE PTR [eax]
c0014aae:	0f b6 c8             	movzx  ecx,al
c0014ab1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ab4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ab7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014abd:	c1 e0 04             	shl    eax,0x4
c0014ac0:	01 d0                	add    eax,edx
c0014ac2:	40                   	inc    eax
c0014ac3:	8a 00                	mov    al,BYTE PTR [eax]
c0014ac5:	0f b6 d0             	movzx  edx,al
c0014ac8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014acb:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0014ace:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ad1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ad4:	c1 e0 04             	shl    eax,0x4
c0014ad7:	01 f0                	add    eax,esi
c0014ad9:	8a 00                	mov    al,BYTE PTR [eax]
c0014adb:	0f b6 c0             	movzx  eax,al
c0014ade:	83 ec 0c             	sub    esp,0xc
c0014ae1:	53                   	push   ebx
c0014ae2:	51                   	push   ecx
c0014ae3:	52                   	push   edx
c0014ae4:	50                   	push   eax
c0014ae5:	68 14 78 02 c0       	push   0xc0027814
c0014aea:	e8 60 d7 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0014aef:	83 c4 20             	add    esp,0x20
c0014af2:	83 ec 0c             	sub    esp,0xc
c0014af5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014af8:	e8 99 f5 ff ff       	call   c0014096 <displayDebugInfo(regs*)>
c0014afd:	8d 65 f8             	lea    esp,[ebp-0x8]
c0014b00:	5b                   	pop    ebx
c0014b01:	5e                   	pop    esi
c0014b02:	5d                   	pop    ebp
c0014b03:	c3                   	ret    

c0014b04 <displayProgramFault(char const*)>:
c0014b04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b09:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b0c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014b12:	85 c0                	test   eax,eax
c0014b14:	74 15                	je     c0014b2b <displayProgramFault(char const*)+0x27>
c0014b16:	83 ec 0c             	sub    esp,0xc
c0014b19:	6a 04                	push   0x4
c0014b1b:	6a 0f                	push   0xf
c0014b1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b21:	50                   	push   eax
c0014b22:	e8 35 ba ff ff       	call   c001055c <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014b27:	83 c4 1c             	add    esp,0x1c
c0014b2a:	c3                   	ret    
c0014b2b:	c3                   	ret    

c0014b2c <setupInterruptController()>:
c0014b2c:	55                   	push   ebp
c0014b2d:	89 e5                	mov    ebp,esp
c0014b2f:	53                   	push   ebx
c0014b30:	83 ec 14             	sub    esp,0x14
c0014b33:	e8 2e 2d 00 00       	call   c0017866 <CPU::getNumber()>
c0014b38:	85 c0                	test   eax,eax
c0014b3a:	0f 95 c0             	setne  al
c0014b3d:	84 c0                	test   al,al
c0014b3f:	74 56                	je     c0014b97 <setupInterruptController()+0x6b>
c0014b41:	83 ec 0c             	sub    esp,0xc
c0014b44:	68 58 21 00 00       	push   0x2158
c0014b49:	e8 12 d6 ff ff       	call   c0012160 <operator new(unsigned long)>
c0014b4e:	83 c4 10             	add    esp,0x10
c0014b51:	89 c3                	mov    ebx,eax
c0014b53:	83 ec 0c             	sub    esp,0xc
c0014b56:	53                   	push   ebx
c0014b57:	e8 2e d8 00 00       	call   c002238a <APIC::APIC()>
c0014b5c:	83 c4 10             	add    esp,0x10
c0014b5f:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0014b62:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0014b65:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014b68:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b6a:	83 c0 08             	add    eax,0x8
c0014b6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b6f:	6a 00                	push   0x0
c0014b71:	6a 00                	push   0x0
c0014b73:	6a 00                	push   0x0
c0014b75:	52                   	push   edx
c0014b76:	ff d0                	call   eax
c0014b78:	83 c4 10             	add    esp,0x10
c0014b7b:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0014b80:	83 ec 08             	sub    esp,0x8
c0014b83:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014b86:	50                   	push   eax
c0014b87:	e8 ce ea ff ff       	call   c001365a <Device::addChild(Device*)>
c0014b8c:	83 c4 10             	add    esp,0x10
c0014b8f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014b92:	e9 48 03 00 00       	jmp    c0014edf <setupInterruptController()+0x3b3>
c0014b97:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0014b9c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014ba2:	83 e0 01             	and    eax,0x1
c0014ba5:	84 c0                	test   al,al
c0014ba7:	0f 95 c0             	setne  al
c0014baa:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0014bad:	83 ec 0c             	sub    esp,0xc
c0014bb0:	68 58 21 00 00       	push   0x2158
c0014bb5:	e8 a6 d5 ff ff       	call   c0012160 <operator new(unsigned long)>
c0014bba:	83 c4 10             	add    esp,0x10
c0014bbd:	89 c3                	mov    ebx,eax
c0014bbf:	83 ec 0c             	sub    esp,0xc
c0014bc2:	53                   	push   ebx
c0014bc3:	e8 84 dc 00 00       	call   c002284c <PIC::PIC()>
c0014bc8:	83 c4 10             	add    esp,0x10
c0014bcb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014bce:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014bd1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bd6:	83 c0 08             	add    eax,0x8
c0014bd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bdb:	6a 00                	push   0x0
c0014bdd:	6a 00                	push   0x0
c0014bdf:	6a 00                	push   0x0
c0014be1:	52                   	push   edx
c0014be2:	ff d0                	call   eax
c0014be4:	83 c4 10             	add    esp,0x10
c0014be7:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0014beb:	74 6e                	je     c0014c5b <setupInterruptController()+0x12f>
c0014bed:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014bf0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bf3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bf5:	83 c0 0c             	add    eax,0xc
c0014bf8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014bfa:	6a 00                	push   0x0
c0014bfc:	6a 00                	push   0x0
c0014bfe:	6a 00                	push   0x0
c0014c00:	52                   	push   edx
c0014c01:	ff d0                	call   eax
c0014c03:	83 c4 10             	add    esp,0x10
c0014c06:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014c0a:	74 15                	je     c0014c21 <setupInterruptController()+0xf5>
c0014c0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c11:	83 c0 04             	add    eax,0x4
c0014c14:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c16:	83 ec 0c             	sub    esp,0xc
c0014c19:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c1c:	ff d0                	call   eax
c0014c1e:	83 c4 10             	add    esp,0x10
c0014c21:	83 ec 0c             	sub    esp,0xc
c0014c24:	68 58 21 00 00       	push   0x2158
c0014c29:	e8 32 d5 ff ff       	call   c0012160 <operator new(unsigned long)>
c0014c2e:	83 c4 10             	add    esp,0x10
c0014c31:	89 c3                	mov    ebx,eax
c0014c33:	83 ec 0c             	sub    esp,0xc
c0014c36:	53                   	push   ebx
c0014c37:	e8 4e d7 00 00       	call   c002238a <APIC::APIC()>
c0014c3c:	83 c4 10             	add    esp,0x10
c0014c3f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0014c42:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0014c45:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c48:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c4a:	83 c0 08             	add    eax,0x8
c0014c4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c4f:	6a 00                	push   0x0
c0014c51:	6a 00                	push   0x0
c0014c53:	6a 00                	push   0x0
c0014c55:	52                   	push   edx
c0014c56:	ff d0                	call   eax
c0014c58:	83 c4 10             	add    esp,0x10
c0014c5b:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0014c60:	83 ec 08             	sub    esp,0x8
c0014c63:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c66:	50                   	push   eax
c0014c67:	e8 ee e9 ff ff       	call   c001365a <Device::addChild(Device*)>
c0014c6c:	83 c4 10             	add    esp,0x10
c0014c6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c74:	83 c0 24             	add    eax,0x24
c0014c77:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c79:	6a 00                	push   0x0
c0014c7b:	68 2c 45 01 c0       	push   0xc001452c
c0014c80:	6a 00                	push   0x0
c0014c82:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014c85:	ff d0                	call   eax
c0014c87:	83 c4 10             	add    esp,0x10
c0014c8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c8d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c8f:	83 c0 24             	add    eax,0x24
c0014c92:	8b 00                	mov    eax,DWORD PTR [eax]
c0014c94:	6a 00                	push   0x0
c0014c96:	68 2c 45 01 c0       	push   0xc001452c
c0014c9b:	6a 01                	push   0x1
c0014c9d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ca0:	ff d0                	call   eax
c0014ca2:	83 c4 10             	add    esp,0x10
c0014ca5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ca8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014caa:	83 c0 24             	add    eax,0x24
c0014cad:	8b 00                	mov    eax,DWORD PTR [eax]
c0014caf:	6a 00                	push   0x0
c0014cb1:	68 f9 3e 01 c0       	push   0xc0013ef9
c0014cb6:	6a 02                	push   0x2
c0014cb8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cbb:	ff d0                	call   eax
c0014cbd:	83 c4 10             	add    esp,0x10
c0014cc0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cc3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cc5:	83 c0 24             	add    eax,0x24
c0014cc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cca:	6a 00                	push   0x0
c0014ccc:	68 2c 45 01 c0       	push   0xc001452c
c0014cd1:	6a 03                	push   0x3
c0014cd3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cd6:	ff d0                	call   eax
c0014cd8:	83 c4 10             	add    esp,0x10
c0014cdb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cde:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ce0:	83 c0 24             	add    eax,0x24
c0014ce3:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ce5:	6a 00                	push   0x0
c0014ce7:	68 2c 45 01 c0       	push   0xc001452c
c0014cec:	6a 04                	push   0x4
c0014cee:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014cf1:	ff d0                	call   eax
c0014cf3:	83 c4 10             	add    esp,0x10
c0014cf6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014cfb:	83 c0 24             	add    eax,0x24
c0014cfe:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d00:	6a 00                	push   0x0
c0014d02:	68 2c 45 01 c0       	push   0xc001452c
c0014d07:	6a 05                	push   0x5
c0014d09:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d0c:	ff d0                	call   eax
c0014d0e:	83 c4 10             	add    esp,0x10
c0014d11:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d14:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d16:	83 c0 24             	add    eax,0x24
c0014d19:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d1b:	6a 00                	push   0x0
c0014d1d:	68 4b 45 01 c0       	push   0xc001454b
c0014d22:	6a 06                	push   0x6
c0014d24:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d27:	ff d0                	call   eax
c0014d29:	83 c4 10             	add    esp,0x10
c0014d2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d31:	83 c0 24             	add    eax,0x24
c0014d34:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d36:	6a 00                	push   0x0
c0014d38:	68 ad 44 01 c0       	push   0xc00144ad
c0014d3d:	6a 07                	push   0x7
c0014d3f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d42:	ff d0                	call   eax
c0014d44:	83 c4 10             	add    esp,0x10
c0014d47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d4c:	83 c0 24             	add    eax,0x24
c0014d4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d51:	6a 00                	push   0x0
c0014d53:	68 14 3d 01 c0       	push   0xc0013d14
c0014d58:	6a 08                	push   0x8
c0014d5a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d5d:	ff d0                	call   eax
c0014d5f:	83 c4 10             	add    esp,0x10
c0014d62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d65:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d67:	83 c0 24             	add    eax,0x24
c0014d6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d6c:	6a 00                	push   0x0
c0014d6e:	68 2c 45 01 c0       	push   0xc001452c
c0014d73:	6a 09                	push   0x9
c0014d75:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d78:	ff d0                	call   eax
c0014d7a:	83 c4 10             	add    esp,0x10
c0014d7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d80:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d82:	83 c0 24             	add    eax,0x24
c0014d85:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d87:	6a 00                	push   0x0
c0014d89:	68 2c 45 01 c0       	push   0xc001452c
c0014d8e:	6a 0a                	push   0xa
c0014d90:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014d93:	ff d0                	call   eax
c0014d95:	83 c4 10             	add    esp,0x10
c0014d98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0014d9d:	83 c0 24             	add    eax,0x24
c0014da0:	8b 00                	mov    eax,DWORD PTR [eax]
c0014da2:	6a 00                	push   0x0
c0014da4:	68 2c 45 01 c0       	push   0xc001452c
c0014da9:	6a 0b                	push   0xb
c0014dab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014dae:	ff d0                	call   eax
c0014db0:	83 c4 10             	add    esp,0x10
c0014db3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014db6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014db8:	83 c0 24             	add    eax,0x24
c0014dbb:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dbd:	6a 00                	push   0x0
c0014dbf:	68 2c 45 01 c0       	push   0xc001452c
c0014dc4:	6a 0c                	push   0xc
c0014dc6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014dc9:	ff d0                	call   eax
c0014dcb:	83 c4 10             	add    esp,0x10
c0014dce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dd3:	83 c0 24             	add    eax,0x24
c0014dd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dd8:	6a 00                	push   0x0
c0014dda:	68 dc 44 01 c0       	push   0xc00144dc
c0014ddf:	6a 0d                	push   0xd
c0014de1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014de4:	ff d0                	call   eax
c0014de6:	83 c4 10             	add    esp,0x10
c0014de9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dec:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dee:	83 c0 24             	add    eax,0x24
c0014df1:	8b 00                	mov    eax,DWORD PTR [eax]
c0014df3:	6a 00                	push   0x0
c0014df5:	68 15 45 01 c0       	push   0xc0014515
c0014dfa:	6a 0e                	push   0xe
c0014dfc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014dff:	ff d0                	call   eax
c0014e01:	83 c4 10             	add    esp,0x10
c0014e04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e07:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e09:	83 c0 24             	add    eax,0x24
c0014e0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e0e:	6a 00                	push   0x0
c0014e10:	68 2c 45 01 c0       	push   0xc001452c
c0014e15:	6a 0f                	push   0xf
c0014e17:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e1a:	ff d0                	call   eax
c0014e1c:	83 c4 10             	add    esp,0x10
c0014e1f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e22:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e24:	83 c0 24             	add    eax,0x24
c0014e27:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e29:	6a 00                	push   0x0
c0014e2b:	68 2c 45 01 c0       	push   0xc001452c
c0014e30:	6a 10                	push   0x10
c0014e32:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e35:	ff d0                	call   eax
c0014e37:	83 c4 10             	add    esp,0x10
c0014e3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e3f:	83 c0 24             	add    eax,0x24
c0014e42:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e44:	6a 00                	push   0x0
c0014e46:	68 2c 45 01 c0       	push   0xc001452c
c0014e4b:	6a 11                	push   0x11
c0014e4d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e50:	ff d0                	call   eax
c0014e52:	83 c4 10             	add    esp,0x10
c0014e55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e58:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e5a:	83 c0 24             	add    eax,0x24
c0014e5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e5f:	6a 00                	push   0x0
c0014e61:	68 2c 45 01 c0       	push   0xc001452c
c0014e66:	6a 12                	push   0x12
c0014e68:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e6b:	ff d0                	call   eax
c0014e6d:	83 c4 10             	add    esp,0x10
c0014e70:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e73:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e75:	83 c0 24             	add    eax,0x24
c0014e78:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e7a:	6a 00                	push   0x0
c0014e7c:	68 2c 45 01 c0       	push   0xc001452c
c0014e81:	6a 13                	push   0x13
c0014e83:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014e86:	ff d0                	call   eax
c0014e88:	83 c4 10             	add    esp,0x10
c0014e8b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e90:	83 c0 24             	add    eax,0x24
c0014e93:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e95:	6a 00                	push   0x0
c0014e97:	68 2c 45 01 c0       	push   0xc001452c
c0014e9c:	6a 14                	push   0x14
c0014e9e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ea1:	ff d0                	call   eax
c0014ea3:	83 c4 10             	add    esp,0x10
c0014ea6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ea9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014eab:	83 c0 24             	add    eax,0x24
c0014eae:	8b 00                	mov    eax,DWORD PTR [eax]
c0014eb0:	6a 00                	push   0x0
c0014eb2:	68 2c 45 01 c0       	push   0xc001452c
c0014eb7:	6a 1e                	push   0x1e
c0014eb9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ebc:	ff d0                	call   eax
c0014ebe:	83 c4 10             	add    esp,0x10
c0014ec1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ec4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ec6:	83 c0 24             	add    eax,0x24
c0014ec9:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ecb:	6a 00                	push   0x0
c0014ecd:	68 57 a3 01 c0       	push   0xc001a357
c0014ed2:	6a 60                	push   0x60
c0014ed4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0014ed7:	ff d0                	call   eax
c0014ed9:	83 c4 10             	add    esp,0x10
c0014edc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014edf:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014ee2:	c9                   	leave  
c0014ee3:	c3                   	ret    

c0014ee4 <InterruptController::convertLegacyIRQNumber(int)>:
c0014ee4:	55                   	push   ebp
c0014ee5:	89 e5                	mov    ebp,esp
c0014ee7:	83 ec 08             	sub    esp,0x8
c0014eea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eed:	83 ec 0c             	sub    esp,0xc
c0014ef0:	50                   	push   eax
c0014ef1:	e8 46 ea ff ff       	call   c001393c <Device::getName()>
c0014ef6:	83 c4 10             	add    esp,0x10
c0014ef9:	8a 00                	mov    al,BYTE PTR [eax]
c0014efb:	3c 41                	cmp    al,0x41
c0014efd:	0f 94 c0             	sete   al
c0014f00:	84 c0                	test   al,al
c0014f02:	74 28                	je     c0014f2c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0014f04:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0014f08:	7f 12                	jg     c0014f1c <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0014f0a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014f0d:	05 e0 96 02 c0       	add    eax,0xc00296e0
c0014f12:	8a 00                	mov    al,BYTE PTR [eax]
c0014f14:	0f b6 c0             	movzx  eax,al
c0014f17:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0014f1a:	eb 10                	jmp    c0014f2c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0014f1c:	83 ec 0c             	sub    esp,0xc
c0014f1f:	68 94 75 02 c0       	push   0xc0027594
c0014f24:	e8 c4 3a 00 00       	call   c00189ed <Krnl::panic(char const*)>
c0014f29:	83 c4 10             	add    esp,0x10
c0014f2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014f2f:	c9                   	leave  
c0014f30:	c3                   	ret    
c0014f31:	90                   	nop

c0014f32 <startGUI(void*)>:
c0014f32:	55                   	push   ebp
c0014f33:	89 e5                	mov    ebp,esp
c0014f35:	53                   	push   ebx
c0014f36:	83 ec 04             	sub    esp,0x4
c0014f39:	e8 04 6a 00 00       	call   c001b942 <unlockScheduler()>
c0014f3e:	e8 e8 69 00 00       	call   c001b92b <getIRQNestingLevel()>
c0014f43:	83 ec 08             	sub    esp,0x8
c0014f46:	50                   	push   eax
c0014f47:	68 7c 78 02 c0       	push   0xc002787c
c0014f4c:	e8 fe d2 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0014f51:	83 c4 10             	add    esp,0x10
c0014f54:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c0014f5a:	83 ec 08             	sub    esp,0x8
c0014f5d:	6a 01                	push   0x1
c0014f5f:	68 96 78 02 c0       	push   0xc0027896
c0014f64:	e8 07 64 00 00       	call   c001b370 <Thr::loadDLL(char const*, bool)>
c0014f69:	83 c4 10             	add    esp,0x10
c0014f6c:	83 ec 08             	sub    esp,0x8
c0014f6f:	53                   	push   ebx
c0014f70:	50                   	push   eax
c0014f71:	e8 c0 65 00 00       	call   c001b536 <Thr::executeDLL(unsigned long, void*)>
c0014f76:	83 c4 10             	add    esp,0x10
c0014f79:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c0014f7f:	83 ec 08             	sub    esp,0x8
c0014f82:	6a 01                	push   0x1
c0014f84:	68 b0 78 02 c0       	push   0xc00278b0
c0014f89:	e8 e2 63 00 00       	call   c001b370 <Thr::loadDLL(char const*, bool)>
c0014f8e:	83 c4 10             	add    esp,0x10
c0014f91:	83 ec 08             	sub    esp,0x8
c0014f94:	53                   	push   ebx
c0014f95:	50                   	push   eax
c0014f96:	e8 9b 65 00 00       	call   c001b536 <Thr::executeDLL(unsigned long, void*)>
c0014f9b:	83 c4 10             	add    esp,0x10
c0014f9e:	90                   	nop
c0014f9f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0014fa2:	c9                   	leave  
c0014fa3:	c3                   	ret    

c0014fa4 <sendKeyToTerminal(unsigned char)>:
c0014fa4:	55                   	push   ebp
c0014fa5:	89 e5                	mov    ebp,esp
c0014fa7:	83 ec 28             	sub    esp,0x28
c0014faa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fad:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0014fb0:	a1 c4 a4 02 c0       	mov    eax,ds:0xc002a4c4
c0014fb5:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0014fb9:	83 ec 08             	sub    esp,0x8
c0014fbc:	52                   	push   edx
c0014fbd:	50                   	push   eax
c0014fbe:	e8 d5 ba ff ff       	call   c0010a98 <VgaText::receiveKey(unsigned char)>
c0014fc3:	83 c4 10             	add    esp,0x10
c0014fc6:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0014fca:	75 41                	jne    c001500d <sendKeyToTerminal(unsigned char)+0x69>
c0014fcc:	e8 96 69 00 00       	call   c001b967 <lockStuff()>
c0014fd1:	a1 a0 a5 02 c0       	mov    eax,ds:0xc002a5a0
c0014fd6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014fd9:	c7 05 a0 a5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a5a0,0x0
c0014fe3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014fe7:	74 1f                	je     c0015008 <sendKeyToTerminal(unsigned char)+0x64>
c0014fe9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fec:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0014fef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014ff2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014ff5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014ff8:	83 ec 0c             	sub    esp,0xc
c0014ffb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014ffe:	e8 4d 6f 00 00       	call   c001bf50 <unblockTask(ThreadControlBlock*)>
c0015003:	83 c4 10             	add    esp,0x10
c0015006:	eb db                	jmp    c0014fe3 <sendKeyToTerminal(unsigned char)+0x3f>
c0015008:	e8 ec 6c 00 00       	call   c001bcf9 <unlockStuff()>
c001500d:	90                   	nop
c001500e:	c9                   	leave  
c001500f:	c3                   	ret    

c0015010 <sendKeyboardToken(KeyboardToken)>:
c0015010:	55                   	push   ebp
c0015011:	89 e5                	mov    ebp,esp
c0015013:	83 ec 18             	sub    esp,0x18
c0015016:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001501c:	0f b7 c0             	movzx  eax,ax
c001501f:	83 f2 01             	xor    edx,0x1
c0015022:	88 90 c0 a5 02 c0    	mov    BYTE PTR [eax-0x3ffd5a40],dl
c0015028:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001502b:	66 3d 03 02          	cmp    ax,0x203
c001502f:	75 07                	jne    c0015038 <sendKeyboardToken(KeyboardToken)+0x28>
c0015031:	a0 c0 a6 02 c0       	mov    al,ds:0xc002a6c0
c0015036:	84 c0                	test   al,al
c0015038:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001503c:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001503f:	a0 c8 a9 02 c0       	mov    al,ds:0xc002a9c8
c0015044:	38 c2                	cmp    dl,al
c0015046:	74 1c                	je     c0015064 <sendKeyboardToken(KeyboardToken)+0x54>
c0015048:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001504b:	a2 c8 a9 02 c0       	mov    ds:0xc002a9c8,al
c0015050:	a0 c8 a9 02 c0       	mov    al,ds:0xc002a9c8
c0015055:	0f b6 c0             	movzx  eax,al
c0015058:	83 ec 0c             	sub    esp,0xc
c001505b:	50                   	push   eax
c001505c:	e8 a5 ac ff ff       	call   c000fd06 <setTerminalScrollLock(bool)>
c0015061:	83 c4 10             	add    esp,0x10
c0015064:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015067:	84 c0                	test   al,al
c0015069:	0f 84 ae 00 00 00    	je     c001511d <sendKeyboardToken(KeyboardToken)+0x10d>
c001506f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015072:	66 3d 10 03          	cmp    ax,0x310
c0015076:	75 06                	jne    c001507e <sendKeyboardToken(KeyboardToken)+0x6e>
c0015078:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001507e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015081:	66 3d 11 03          	cmp    ax,0x311
c0015085:	75 06                	jne    c001508d <sendKeyboardToken(KeyboardToken)+0x7d>
c0015087:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001508d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015090:	66 3d 12 03          	cmp    ax,0x312
c0015094:	75 06                	jne    c001509c <sendKeyboardToken(KeyboardToken)+0x8c>
c0015096:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001509c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001509f:	66 3d 13 03          	cmp    ax,0x313
c00150a3:	75 06                	jne    c00150ab <sendKeyboardToken(KeyboardToken)+0x9b>
c00150a5:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00150ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ae:	66 3d 14 03          	cmp    ax,0x314
c00150b2:	75 06                	jne    c00150ba <sendKeyboardToken(KeyboardToken)+0xaa>
c00150b4:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00150ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150bd:	66 3d 15 03          	cmp    ax,0x315
c00150c1:	75 06                	jne    c00150c9 <sendKeyboardToken(KeyboardToken)+0xb9>
c00150c3:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00150c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150cc:	66 3d 16 03          	cmp    ax,0x316
c00150d0:	75 06                	jne    c00150d8 <sendKeyboardToken(KeyboardToken)+0xc8>
c00150d2:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00150d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150db:	66 3d 17 03          	cmp    ax,0x317
c00150df:	75 06                	jne    c00150e7 <sendKeyboardToken(KeyboardToken)+0xd7>
c00150e1:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00150e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ea:	66 3d 18 03          	cmp    ax,0x318
c00150ee:	75 06                	jne    c00150f6 <sendKeyboardToken(KeyboardToken)+0xe6>
c00150f0:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00150f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f9:	66 3d 19 03          	cmp    ax,0x319
c00150fd:	75 06                	jne    c0015105 <sendKeyboardToken(KeyboardToken)+0xf5>
c00150ff:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015105:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015108:	66 3d 1a 03          	cmp    ax,0x31a
c001510c:	0f 85 c9 00 00 00    	jne    c00151db <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015112:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015118:	e9 be 00 00 00       	jmp    c00151db <sendKeyboardToken(KeyboardToken)+0x1cb>
c001511d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015120:	66 3d 10 03          	cmp    ax,0x310
c0015124:	75 0a                	jne    c0015130 <sendKeyboardToken(KeyboardToken)+0x120>
c0015126:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001512c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015130:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015133:	66 3d 11 03          	cmp    ax,0x311
c0015137:	75 0a                	jne    c0015143 <sendKeyboardToken(KeyboardToken)+0x133>
c0015139:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001513f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015143:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015146:	66 3d 12 03          	cmp    ax,0x312
c001514a:	75 0a                	jne    c0015156 <sendKeyboardToken(KeyboardToken)+0x146>
c001514c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015152:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015156:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015159:	66 3d 13 03          	cmp    ax,0x313
c001515d:	75 0a                	jne    c0015169 <sendKeyboardToken(KeyboardToken)+0x159>
c001515f:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015165:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015169:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001516c:	66 3d 14 03          	cmp    ax,0x314
c0015170:	75 0a                	jne    c001517c <sendKeyboardToken(KeyboardToken)+0x16c>
c0015172:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015178:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001517c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001517f:	66 3d 15 03          	cmp    ax,0x315
c0015183:	75 0a                	jne    c001518f <sendKeyboardToken(KeyboardToken)+0x17f>
c0015185:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001518b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001518f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015192:	66 3d 16 03          	cmp    ax,0x316
c0015196:	75 0a                	jne    c00151a2 <sendKeyboardToken(KeyboardToken)+0x192>
c0015198:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001519e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a5:	66 3d 17 03          	cmp    ax,0x317
c00151a9:	75 0a                	jne    c00151b5 <sendKeyboardToken(KeyboardToken)+0x1a5>
c00151ab:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00151b1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b8:	66 3d 18 03          	cmp    ax,0x318
c00151bc:	75 0a                	jne    c00151c8 <sendKeyboardToken(KeyboardToken)+0x1b8>
c00151be:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00151c4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151cb:	66 3d 19 03          	cmp    ax,0x319
c00151cf:	75 0a                	jne    c00151db <sendKeyboardToken(KeyboardToken)+0x1cb>
c00151d1:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00151d7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00151db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151de:	66 3d 00 02          	cmp    ax,0x200
c00151e2:	75 2a                	jne    c001520e <sendKeyboardToken(KeyboardToken)+0x1fe>
c00151e4:	a0 c0 a9 02 c0       	mov    al,ds:0xc002a9c0
c00151e9:	83 f0 01             	xor    eax,0x1
c00151ec:	84 c0                	test   al,al
c00151ee:	74 1e                	je     c001520e <sendKeyboardToken(KeyboardToken)+0x1fe>
c00151f0:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c00151f5:	6a 01                	push   0x1
c00151f7:	6a 00                	push   0x0
c00151f9:	68 32 4f 01 c0       	push   0xc0014f32
c00151fe:	50                   	push   eax
c00151ff:	e8 66 68 00 00       	call   c001ba6a <Process::createThread(void (*)(void*), void*, int)>
c0015204:	83 c4 10             	add    esp,0x10
c0015207:	c6 05 c0 a9 02 c0 01 	mov    BYTE PTR ds:0xc002a9c0,0x1
c001520e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015211:	66 3d 1d 03          	cmp    ax,0x31d
c0015215:	75 06                	jne    c001521d <sendKeyboardToken(KeyboardToken)+0x20d>
c0015217:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001521d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015220:	66 3d 1c 03          	cmp    ax,0x31c
c0015224:	75 06                	jne    c001522c <sendKeyboardToken(KeyboardToken)+0x21c>
c0015226:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001522c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001522f:	66 3d 1b 03          	cmp    ax,0x31b
c0015233:	75 06                	jne    c001523b <sendKeyboardToken(KeyboardToken)+0x22b>
c0015235:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001523b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001523e:	66 3d 1e 03          	cmp    ax,0x31e
c0015242:	75 06                	jne    c001524a <sendKeyboardToken(KeyboardToken)+0x23a>
c0015244:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001524a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001524d:	66 3d 1f 03          	cmp    ax,0x31f
c0015251:	75 06                	jne    c0015259 <sendKeyboardToken(KeyboardToken)+0x249>
c0015253:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015259:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001525c:	66 3d 1a 03          	cmp    ax,0x31a
c0015260:	75 06                	jne    c0015268 <sendKeyboardToken(KeyboardToken)+0x258>
c0015262:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015268:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001526c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001526f:	83 f0 01             	xor    eax,0x1
c0015272:	84 c0                	test   al,al
c0015274:	74 77                	je     c00152ed <sendKeyboardToken(KeyboardToken)+0x2dd>
c0015276:	a0 c1 a6 02 c0       	mov    al,ds:0xc002a6c1
c001527b:	84 c0                	test   al,al
c001527d:	74 41                	je     c00152c0 <sendKeyboardToken(KeyboardToken)+0x2b0>
c001527f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015283:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015287:	74 2b                	je     c00152b4 <sendKeyboardToken(KeyboardToken)+0x2a4>
c0015289:	8b 15 c4 a9 02 c0    	mov    edx,DWORD PTR ds:0xc002a9c4
c001528f:	89 d0                	mov    eax,edx
c0015291:	c1 e0 02             	shl    eax,0x2
c0015294:	01 d0                	add    eax,edx
c0015296:	01 c0                	add    eax,eax
c0015298:	a3 c4 a9 02 c0       	mov    ds:0xc002a9c4,eax
c001529d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a0:	0f b7 c0             	movzx  eax,ax
c00152a3:	8d 50 d0             	lea    edx,[eax-0x30]
c00152a6:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c00152ab:	01 d0                	add    eax,edx
c00152ad:	a3 c4 a9 02 c0       	mov    ds:0xc002a9c4,eax
c00152b2:	eb 6d                	jmp    c0015321 <sendKeyboardToken(KeyboardToken)+0x311>
c00152b4:	c7 05 c4 a9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a9c4,0x0
c00152be:	eb 61                	jmp    c0015321 <sendKeyboardToken(KeyboardToken)+0x311>
c00152c0:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c00152c5:	85 c0                	test   eax,eax
c00152c7:	74 18                	je     c00152e1 <sendKeyboardToken(KeyboardToken)+0x2d1>
c00152c9:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c00152ce:	0f b6 c0             	movzx  eax,al
c00152d1:	83 ec 0c             	sub    esp,0xc
c00152d4:	50                   	push   eax
c00152d5:	e8 ca fc ff ff       	call   c0014fa4 <sendKeyToTerminal(unsigned char)>
c00152da:	83 c4 10             	add    esp,0x10
c00152dd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00152e1:	c7 05 c4 a9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a9c4,0x0
c00152eb:	eb 34                	jmp    c0015321 <sendKeyboardToken(KeyboardToken)+0x311>
c00152ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f0:	66 3d 01 01          	cmp    ax,0x101
c00152f4:	75 2b                	jne    c0015321 <sendKeyboardToken(KeyboardToken)+0x311>
c00152f6:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c00152fb:	85 c0                	test   eax,eax
c00152fd:	74 18                	je     c0015317 <sendKeyboardToken(KeyboardToken)+0x307>
c00152ff:	a1 c4 a9 02 c0       	mov    eax,ds:0xc002a9c4
c0015304:	0f b6 c0             	movzx  eax,al
c0015307:	83 ec 0c             	sub    esp,0xc
c001530a:	50                   	push   eax
c001530b:	e8 94 fc ff ff       	call   c0014fa4 <sendKeyToTerminal(unsigned char)>
c0015310:	83 c4 10             	add    esp,0x10
c0015313:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015317:	c7 05 c4 a9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a9c4,0x0
c0015321:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015324:	83 f0 01             	xor    eax,0x1
c0015327:	84 c0                	test   al,al
c0015329:	74 4c                	je     c0015377 <sendKeyboardToken(KeyboardToken)+0x367>
c001532b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001532e:	83 f0 01             	xor    eax,0x1
c0015331:	84 c0                	test   al,al
c0015333:	74 42                	je     c0015377 <sendKeyboardToken(KeyboardToken)+0x367>
c0015335:	a0 c0 a6 02 c0       	mov    al,ds:0xc002a6c0
c001533a:	83 f0 01             	xor    eax,0x1
c001533d:	84 c0                	test   al,al
c001533f:	74 36                	je     c0015377 <sendKeyboardToken(KeyboardToken)+0x367>
c0015341:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015344:	66 83 f8 1f          	cmp    ax,0x1f
c0015348:	76 09                	jbe    c0015353 <sendKeyboardToken(KeyboardToken)+0x343>
c001534a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534d:	66 83 f8 7e          	cmp    ax,0x7e
c0015351:	76 12                	jbe    c0015365 <sendKeyboardToken(KeyboardToken)+0x355>
c0015353:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015356:	66 83 f8 0a          	cmp    ax,0xa
c001535a:	74 09                	je     c0015365 <sendKeyboardToken(KeyboardToken)+0x355>
c001535c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535f:	66 83 f8 08          	cmp    ax,0x8
c0015363:	75 12                	jne    c0015377 <sendKeyboardToken(KeyboardToken)+0x367>
c0015365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015368:	0f b6 c0             	movzx  eax,al
c001536b:	83 ec 0c             	sub    esp,0xc
c001536e:	50                   	push   eax
c001536f:	e8 30 fc ff ff       	call   c0014fa4 <sendKeyToTerminal(unsigned char)>
c0015374:	83 c4 10             	add    esp,0x10
c0015377:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001537a:	83 f0 01             	xor    eax,0x1
c001537d:	84 c0                	test   al,al
c001537f:	74 4f                	je     c00153d0 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015381:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015384:	83 f0 01             	xor    eax,0x1
c0015387:	84 c0                	test   al,al
c0015389:	74 45                	je     c00153d0 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001538b:	a0 c0 a6 02 c0       	mov    al,ds:0xc002a6c0
c0015390:	84 c0                	test   al,al
c0015392:	74 3c                	je     c00153d0 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0015394:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015397:	66 83 f8 3f          	cmp    ax,0x3f
c001539b:	76 33                	jbe    c00153d0 <sendKeyboardToken(KeyboardToken)+0x3c0>
c001539d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a0:	66 83 f8 7f          	cmp    ax,0x7f
c00153a4:	77 2a                	ja     c00153d0 <sendKeyboardToken(KeyboardToken)+0x3c0>
c00153a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a9:	88 c2                	mov    dl,al
c00153ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ae:	66 83 f8 5f          	cmp    ax,0x5f
c00153b2:	76 04                	jbe    c00153b8 <sendKeyboardToken(KeyboardToken)+0x3a8>
c00153b4:	b0 20                	mov    al,0x20
c00153b6:	eb 02                	jmp    c00153ba <sendKeyboardToken(KeyboardToken)+0x3aa>
c00153b8:	b0 00                	mov    al,0x0
c00153ba:	29 c2                	sub    edx,eax
c00153bc:	88 d0                	mov    al,dl
c00153be:	83 e8 40             	sub    eax,0x40
c00153c1:	0f b6 c0             	movzx  eax,al
c00153c4:	83 ec 0c             	sub    esp,0xc
c00153c7:	50                   	push   eax
c00153c8:	e8 d7 fb ff ff       	call   c0014fa4 <sendKeyToTerminal(unsigned char)>
c00153cd:	83 c4 10             	add    esp,0x10
c00153d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d3:	66 3d 00 03          	cmp    ax,0x300
c00153d7:	75 0f                	jne    c00153e8 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00153d9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00153dc:	83 f0 01             	xor    eax,0x1
c00153df:	84 c0                	test   al,al
c00153e1:	74 05                	je     c00153e8 <sendKeyboardToken(KeyboardToken)+0x3d8>
c00153e3:	e8 45 b1 ff ff       	call   c001052d <doTerminalCycle()>
c00153e8:	90                   	nop
c00153e9:	c9                   	leave  
c00153ea:	c3                   	ret    

c00153eb <clearInternalKeybuffer(VgaText*)>:
c00153eb:	55                   	push   ebp
c00153ec:	89 e5                	mov    ebp,esp
c00153ee:	83 ec 08             	sub    esp,0x8
c00153f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f4:	05 34 11 00 00       	add    eax,0x1134
c00153f9:	83 ec 0c             	sub    esp,0xc
c00153fc:	50                   	push   eax
c00153fd:	e8 e7 b2 fe ff       	call   c00006e9 <strlen>
c0015402:	83 c4 10             	add    esp,0x10
c0015405:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015408:	81 c2 34 11 00 00    	add    edx,0x1134
c001540e:	83 ec 04             	sub    esp,0x4
c0015411:	50                   	push   eax
c0015412:	6a 00                	push   0x0
c0015414:	52                   	push   edx
c0015415:	e8 b2 b2 fe ff       	call   c00006cc <memset>
c001541a:	83 c4 10             	add    esp,0x10
c001541d:	90                   	nop
c001541e:	c9                   	leave  
c001541f:	c3                   	ret    

c0015420 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015420:	55                   	push   ebp
c0015421:	89 e5                	mov    ebp,esp
c0015423:	83 ec 18             	sub    esp,0x18
c0015426:	fb                   	sti    
c0015427:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001542e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015432:	0f 84 8a 00 00 00    	je     c00154c2 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015438:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543b:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015441:	84 c0                	test   al,al
c0015443:	75 11                	jne    c0015456 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015445:	e8 f6 64 00 00       	call   c001b940 <lockScheduler()>
c001544a:	e8 25 68 00 00       	call   c001bc74 <schedule()>
c001544f:	e8 ee 64 00 00       	call   c001b942 <unlockScheduler()>
c0015454:	eb e2                	jmp    c0015438 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015456:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015459:	8d 50 01             	lea    edx,[eax+0x1]
c001545c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001545f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015462:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015468:	88 10                	mov    BYTE PTR [eax],dl
c001546a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001546d:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015473:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015479:	05 34 11 00 00       	add    eax,0x1134
c001547e:	83 ec 0c             	sub    esp,0xc
c0015481:	50                   	push   eax
c0015482:	e8 62 b2 fe ff       	call   c00006e9 <strlen>
c0015487:	83 c4 10             	add    esp,0x10
c001548a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001548d:	81 c2 34 11 00 00    	add    edx,0x1134
c0015493:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015496:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015499:	81 c2 34 11 00 00    	add    edx,0x1134
c001549f:	83 ec 04             	sub    esp,0x4
c00154a2:	50                   	push   eax
c00154a3:	51                   	push   ecx
c00154a4:	52                   	push   edx
c00154a5:	e8 b4 b1 fe ff       	call   c000065e <memmove>
c00154aa:	83 c4 10             	add    esp,0x10
c00154ad:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00154b0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154b3:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00154b7:	0f 85 71 ff ff ff    	jne    c001542e <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00154bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c0:	eb 03                	jmp    c00154c5 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c00154c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c5:	c9                   	leave  
c00154c6:	c3                   	ret    
c00154c7:	90                   	nop

c00154c8 <Keyboard::Keyboard(char const*)>:
c00154c8:	83 ec 0c             	sub    esp,0xc
c00154cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154cf:	83 ec 08             	sub    esp,0x8
c00154d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154d6:	50                   	push   eax
c00154d7:	e8 6e e3 ff ff       	call   c001384a <Device::Device(char const*)>
c00154dc:	83 c4 10             	add    esp,0x10
c00154df:	ba d4 78 02 c0       	mov    edx,0xc00278d4
c00154e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154e8:	89 10                	mov    DWORD PTR [eax],edx
c00154ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154ee:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00154f8:	c6 05 a4 a5 02 c0 01 	mov    BYTE PTR ds:0xc002a5a4,0x1
c00154ff:	90                   	nop
c0015500:	83 c4 0c             	add    esp,0xc
c0015503:	c3                   	ret    

c0015504 <Keyboard::~Keyboard()>:
c0015504:	83 ec 0c             	sub    esp,0xc
c0015507:	ba d4 78 02 c0       	mov    edx,0xc00278d4
c001550c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015510:	89 10                	mov    DWORD PTR [eax],edx
c0015512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015516:	83 ec 0c             	sub    esp,0xc
c0015519:	50                   	push   eax
c001551a:	e8 dd df ff ff       	call   c00134fc <Device::~Device()>
c001551f:	83 c4 10             	add    esp,0x10
c0015522:	90                   	nop
c0015523:	83 c4 0c             	add    esp,0xc
c0015526:	c3                   	ret    
c0015527:	90                   	nop

c0015528 <Keyboard::~Keyboard()>:
c0015528:	83 ec 0c             	sub    esp,0xc
c001552b:	83 ec 0c             	sub    esp,0xc
c001552e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015532:	e8 cd ff ff ff       	call   c0015504 <Keyboard::~Keyboard()>
c0015537:	83 c4 10             	add    esp,0x10
c001553a:	83 ec 08             	sub    esp,0x8
c001553d:	68 5c 01 00 00       	push   0x15c
c0015542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015546:	e8 24 cc ff ff       	call   c001216f <operator delete(void*, unsigned long)>
c001554b:	83 c4 10             	add    esp,0x10
c001554e:	83 c4 0c             	add    esp,0xc
c0015551:	c3                   	ret    

c0015552 <LogicalDisk::close(int, int, void*)>:
c0015552:	83 c8 ff             	or     eax,0xffffffff
c0015555:	c3                   	ret    

c0015556 <LogicalDisk::~LogicalDisk()>:
c0015556:	83 ec 0c             	sub    esp,0xc
c0015559:	ba 84 79 02 c0       	mov    edx,0xc0027984
c001555e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015562:	89 10                	mov    DWORD PTR [eax],edx
c0015564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015568:	83 ec 0c             	sub    esp,0xc
c001556b:	50                   	push   eax
c001556c:	e8 8b df ff ff       	call   c00134fc <Device::~Device()>
c0015571:	83 c4 10             	add    esp,0x10
c0015574:	90                   	nop
c0015575:	83 c4 0c             	add    esp,0xc
c0015578:	c3                   	ret    
c0015579:	90                   	nop

c001557a <LogicalDisk::~LogicalDisk()>:
c001557a:	83 ec 0c             	sub    esp,0xc
c001557d:	83 ec 0c             	sub    esp,0xc
c0015580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015584:	e8 cd ff ff ff       	call   c0015556 <LogicalDisk::~LogicalDisk()>
c0015589:	83 c4 10             	add    esp,0x10
c001558c:	83 ec 08             	sub    esp,0x8
c001558f:	68 74 01 00 00       	push   0x174
c0015594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015598:	e8 d2 cb ff ff       	call   c001216f <operator delete(void*, unsigned long)>
c001559d:	83 c4 10             	add    esp,0x10
c00155a0:	83 c4 0c             	add    esp,0xc
c00155a3:	c3                   	ret    

c00155a4 <LogicalDisk::open(int, int, void*)>:
c00155a4:	83 ec 18             	sub    esp,0x18
c00155a7:	68 00 79 02 c0       	push   0xc0027900
c00155ac:	e8 3c 34 00 00       	call   c00189ed <Krnl::panic(char const*)>
c00155b1:	83 c8 ff             	or     eax,0xffffffff
c00155b4:	83 c4 1c             	add    esp,0x1c
c00155b7:	c3                   	ret    

c00155b8 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00155b8:	53                   	push   ebx
c00155b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00155bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00155c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00155c5:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00155cb:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00155d1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00155d7:	77 10                	ja     c00155e9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00155d9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00155df:	89 d3                	mov    ebx,edx
c00155e1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00155e7:	72 05                	jb     c00155ee <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00155e9:	83 c8 ff             	or     eax,0xffffffff
c00155ec:	89 c2                	mov    edx,eax
c00155ee:	5b                   	pop    ebx
c00155ef:	c3                   	ret    

c00155f0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00155f0:	56                   	push   esi
c00155f1:	83 c8 ff             	or     eax,0xffffffff
c00155f4:	53                   	push   ebx
c00155f5:	89 c2                	mov    edx,eax
c00155f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00155fb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00155ff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015603:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015609:	77 27                	ja     c0015632 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001560b:	89 d8                	mov    eax,ebx
c001560d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015613:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015619:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001561e:	89 c2                	mov    edx,eax
c0015620:	73 10                	jae    c0015632 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015622:	89 c8                	mov    eax,ecx
c0015624:	89 da                	mov    edx,ebx
c0015626:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001562c:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015632:	5b                   	pop    ebx
c0015633:	5e                   	pop    esi
c0015634:	c3                   	ret    
c0015635:	90                   	nop

c0015636 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015636:	83 ec 1c             	sub    esp,0x1c
c0015639:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001563d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015641:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015645:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015649:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001564d:	89 04 24             	mov    DWORD PTR [esp],eax
c0015650:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015654:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015658:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001565c:	83 ec 08             	sub    esp,0x8
c001565f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015663:	50                   	push   eax
c0015664:	e8 e1 e1 ff ff       	call   c001384a <Device::Device(char const*)>
c0015669:	83 c4 10             	add    esp,0x10
c001566c:	ba 84 79 02 c0       	mov    edx,0xc0027984
c0015671:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015675:	89 10                	mov    DWORD PTR [eax],edx
c0015677:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001567b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015682:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015686:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001568d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015691:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001569b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001569f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00156a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00156a7:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00156ad:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00156b3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00156b7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00156ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00156be:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00156c4:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00156ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00156d2:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00156d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156dc:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00156e6:	90                   	nop
c00156e7:	83 c4 1c             	add    esp,0x1c
c00156ea:	c3                   	ret    
c00156eb:	90                   	nop

c00156ec <LogicalDisk::assignDriveLetter()>:
c00156ec:	55                   	push   ebp
c00156ed:	57                   	push   edi
c00156ee:	56                   	push   esi
c00156ef:	53                   	push   ebx
c00156f0:	83 ec 14             	sub    esp,0x14
c00156f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00156f7:	8b 3d e0 a9 02 c0    	mov    edi,DWORD PTR ds:0xc002a9e0
c00156fd:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015703:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015707:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001570d:	8b 3d e4 a9 02 c0    	mov    edi,DWORD PTR ds:0xc002a9e4
c0015713:	3c 01                	cmp    al,0x1
c0015715:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015719:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001571d:	19 c0                	sbb    eax,eax
c001571f:	83 e0 02             	and    eax,0x2
c0015722:	83 c0 41             	add    eax,0x41
c0015725:	0f be e8             	movsx  ebp,al
c0015728:	3c 43                	cmp    al,0x43
c001572a:	75 10                	jne    c001573c <LogicalDisk::assignDriveLetter()+0x50>
c001572c:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015733:	75 5d                	jne    c0015792 <LogicalDisk::assignDriveLetter()+0xa6>
c0015735:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001573a:	75 56                	jne    c0015792 <LogicalDisk::assignDriveLetter()+0xa6>
c001573c:	8d 75 bf             	lea    esi,[ebp-0x41]
c001573f:	ba 01 00 00 00       	mov    edx,0x1
c0015744:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015748:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001574c:	d3 e2                	shl    edx,cl
c001574e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015752:	89 d7                	mov    edi,edx
c0015754:	89 d6                	mov    esi,edx
c0015756:	c1 ff 1f             	sar    edi,0x1f
c0015759:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001575d:	21 f9                	and    ecx,edi
c001575f:	09 d1                	or     ecx,edx
c0015761:	75 2f                	jne    c0015792 <LogicalDisk::assignDriveLetter()+0xa6>
c0015763:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015767:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001576b:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015771:	09 f2                	or     edx,esi
c0015773:	89 15 e0 a9 02 c0    	mov    DWORD PTR ds:0xc002a9e0,edx
c0015779:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001577d:	09 fa                	or     edx,edi
c001577f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015783:	89 15 e4 a9 02 c0    	mov    DWORD PTR ds:0xc002a9e4,edx
c0015789:	89 1c bd 00 aa 02 c0 	mov    DWORD PTR [edi*4-0x3ffd5600],ebx
c0015790:	eb 08                	jmp    c001579a <LogicalDisk::assignDriveLetter()+0xae>
c0015792:	45                   	inc    ebp
c0015793:	40                   	inc    eax
c0015794:	3c 5b                	cmp    al,0x5b
c0015796:	75 90                	jne    c0015728 <LogicalDisk::assignDriveLetter()+0x3c>
c0015798:	31 c0                	xor    eax,eax
c001579a:	83 c4 14             	add    esp,0x14
c001579d:	5b                   	pop    ebx
c001579e:	5e                   	pop    esi
c001579f:	5f                   	pop    edi
c00157a0:	5d                   	pop    ebp
c00157a1:	c3                   	ret    

c00157a2 <LogicalDisk::mount()>:
c00157a2:	56                   	push   esi
c00157a3:	53                   	push   ebx
c00157a4:	51                   	push   ecx
c00157a5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00157a9:	8b 1d 68 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a568
c00157af:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00157b9:	85 db                	test   ebx,ebx
c00157bb:	74 50                	je     c001580d <LogicalDisk::mount()+0x6b>
c00157bd:	e8 69 61 00 00       	call   c001b92b <getIRQNestingLevel()>
c00157c2:	52                   	push   edx
c00157c3:	52                   	push   edx
c00157c4:	50                   	push   eax
c00157c5:	68 24 79 02 c0       	push   0xc0027924
c00157ca:	e8 80 ca ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00157cf:	83 c4 0c             	add    esp,0xc
c00157d2:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00157d9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00157db:	83 e8 41             	sub    eax,0x41
c00157de:	50                   	push   eax
c00157df:	56                   	push   esi
c00157e0:	53                   	push   ebx
c00157e1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00157e4:	83 c4 10             	add    esp,0x10
c00157e7:	84 c0                	test   al,al
c00157e9:	74 08                	je     c00157f3 <LogicalDisk::mount()+0x51>
c00157eb:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00157f1:	eb 1c                	jmp    c001580f <LogicalDisk::mount()+0x6d>
c00157f3:	e8 33 61 00 00       	call   c001b92b <getIRQNestingLevel()>
c00157f8:	51                   	push   ecx
c00157f9:	51                   	push   ecx
c00157fa:	50                   	push   eax
c00157fb:	68 3f 79 02 c0       	push   0xc002793f
c0015800:	e8 4a ca ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0015805:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015808:	83 c4 10             	add    esp,0x10
c001580b:	eb ac                	jmp    c00157b9 <LogicalDisk::mount()+0x17>
c001580d:	31 c0                	xor    eax,eax
c001580f:	5a                   	pop    edx
c0015810:	5b                   	pop    ebx
c0015811:	5e                   	pop    esi
c0015812:	c3                   	ret    
c0015813:	90                   	nop

c0015814 <LogicalDisk::unmount()>:
c0015814:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015818:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015822:	c3                   	ret    
c0015823:	90                   	nop

c0015824 <LogicalDisk::unassignDriveLetter()>:
c0015824:	57                   	push   edi
c0015825:	56                   	push   esi
c0015826:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001582a:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015831:	84 c9                	test   cl,cl
c0015833:	75 0f                	jne    c0015844 <LogicalDisk::unassignDriveLetter()+0x20>
c0015835:	c7 44 24 0c 5a 79 02 c0 	mov    DWORD PTR [esp+0xc],0xc002795a
c001583d:	5e                   	pop    esi
c001583e:	5f                   	pop    edi
c001583f:	e9 a9 31 00 00       	jmp    c00189ed <Krnl::panic(char const*)>
c0015844:	83 e9 41             	sub    ecx,0x41
c0015847:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001584e:	b8 01 00 00 00       	mov    eax,0x1
c0015853:	c7 04 8d 00 aa 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd5600],0x0
c001585e:	d3 e0                	shl    eax,cl
c0015860:	89 c7                	mov    edi,eax
c0015862:	f7 d0                	not    eax
c0015864:	c1 ff 1f             	sar    edi,0x1f
c0015867:	21 05 e0 a9 02 c0    	and    DWORD PTR ds:0xc002a9e0,eax
c001586d:	89 fe                	mov    esi,edi
c001586f:	f7 d6                	not    esi
c0015871:	21 35 e4 a9 02 c0    	and    DWORD PTR ds:0xc002a9e4,esi
c0015877:	5e                   	pop    esi
c0015878:	5f                   	pop    edi
c0015879:	c3                   	ret    

c001587a <LogicalDisk::read(unsigned long long, int, void*)>:
c001587a:	57                   	push   edi
c001587b:	56                   	push   esi
c001587c:	53                   	push   ebx
c001587d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015881:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015885:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001588d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015893:	77 41                	ja     c00158d6 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015895:	99                   	cdq    
c0015896:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001589c:	01 c8                	add    eax,ecx
c001589e:	11 da                	adc    edx,ebx
c00158a0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00158a6:	19 d7                	sbb    edi,edx
c00158a8:	72 33                	jb     c00158dd <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00158aa:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00158b0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00158b6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00158ba:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00158be:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00158c4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00158ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00158ce:	5b                   	pop    ebx
c00158cf:	5e                   	pop    esi
c00158d0:	5f                   	pop    edi
c00158d1:	e9 9a 09 00 00       	jmp    c0016270 <VCache::read(unsigned long long, int, void*)>
c00158d6:	b8 05 00 00 00       	mov    eax,0x5
c00158db:	eb 05                	jmp    c00158e2 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00158dd:	b8 07 00 00 00       	mov    eax,0x7
c00158e2:	5b                   	pop    ebx
c00158e3:	5e                   	pop    esi
c00158e4:	5f                   	pop    edi
c00158e5:	c3                   	ret    

c00158e6 <LogicalDisk::write(unsigned long long, int, void*)>:
c00158e6:	57                   	push   edi
c00158e7:	56                   	push   esi
c00158e8:	53                   	push   ebx
c00158e9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00158ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00158f1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00158f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00158f9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00158ff:	77 41                	ja     c0015942 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015901:	99                   	cdq    
c0015902:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015908:	01 c8                	add    eax,ecx
c001590a:	11 da                	adc    edx,ebx
c001590c:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015912:	19 d7                	sbb    edi,edx
c0015914:	72 33                	jb     c0015949 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015916:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001591c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015922:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015926:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001592a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015930:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015936:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001593a:	5b                   	pop    ebx
c001593b:	5e                   	pop    esi
c001593c:	5f                   	pop    edi
c001593d:	e9 4a 08 00 00       	jmp    c001618c <VCache::write(unsigned long long, int, void*)>
c0015942:	b8 05 00 00 00       	mov    eax,0x5
c0015947:	eb 05                	jmp    c001594e <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015949:	b8 07 00 00 00       	mov    eax,0x7
c001594e:	5b                   	pop    ebx
c001594f:	5e                   	pop    esi
c0015950:	5f                   	pop    edi
c0015951:	c3                   	ret    

c0015952 <Mouse::Mouse(char const*)>:
c0015952:	83 ec 0c             	sub    esp,0xc
c0015955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015959:	83 ec 08             	sub    esp,0x8
c001595c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015960:	50                   	push   eax
c0015961:	e8 e4 de ff ff       	call   c001384a <Device::Device(char const*)>
c0015966:	83 c4 10             	add    esp,0x10
c0015969:	ba b0 79 02 c0       	mov    edx,0xc00279b0
c001596e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015972:	89 10                	mov    DWORD PTR [eax],edx
c0015974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015978:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015982:	90                   	nop
c0015983:	83 c4 0c             	add    esp,0xc
c0015986:	c3                   	ret    
c0015987:	90                   	nop

c0015988 <Mouse::~Mouse()>:
c0015988:	83 ec 0c             	sub    esp,0xc
c001598b:	ba b0 79 02 c0       	mov    edx,0xc00279b0
c0015990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015994:	89 10                	mov    DWORD PTR [eax],edx
c0015996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001599a:	83 ec 0c             	sub    esp,0xc
c001599d:	50                   	push   eax
c001599e:	e8 59 db ff ff       	call   c00134fc <Device::~Device()>
c00159a3:	83 c4 10             	add    esp,0x10
c00159a6:	90                   	nop
c00159a7:	83 c4 0c             	add    esp,0xc
c00159aa:	c3                   	ret    
c00159ab:	90                   	nop

c00159ac <Mouse::~Mouse()>:
c00159ac:	83 ec 0c             	sub    esp,0xc
c00159af:	83 ec 0c             	sub    esp,0xc
c00159b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159b6:	e8 cd ff ff ff       	call   c0015988 <Mouse::~Mouse()>
c00159bb:	83 c4 10             	add    esp,0x10
c00159be:	83 ec 08             	sub    esp,0x8
c00159c1:	68 58 01 00 00       	push   0x158
c00159c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159ca:	e8 a0 c7 ff ff       	call   c001216f <operator delete(void*, unsigned long)>
c00159cf:	83 c4 10             	add    esp,0x10
c00159d2:	83 c4 0c             	add    esp,0xc
c00159d5:	c3                   	ret    

c00159d6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00159d6:	55                   	push   ebp
c00159d7:	57                   	push   edi
c00159d8:	56                   	push   esi
c00159d9:	53                   	push   ebx
c00159da:	81 ec 28 01 00 00    	sub    esp,0x128
c00159e0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00159e7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00159ee:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00159f5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00159fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015a00:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015a04:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015a0b:	e8 2c df ff ff       	call   c001393c <Device::getName()>
c0015a10:	5a                   	pop    edx
c0015a11:	59                   	pop    ecx
c0015a12:	50                   	push   eax
c0015a13:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015a17:	55                   	push   ebp
c0015a18:	e8 4e ad fe ff       	call   c000076b <strcpy>
c0015a1d:	5b                   	pop    ebx
c0015a1e:	58                   	pop    eax
c0015a1f:	68 d4 79 02 c0       	push   0xc00279d4
c0015a24:	55                   	push   ebp
c0015a25:	e8 f8 ad fe ff       	call   c0000822 <strcat>
c0015a2a:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015a31:	e8 2a c7 ff ff       	call   c0012160 <operator new(unsigned long)>
c0015a36:	83 c4 0c             	add    esp,0xc
c0015a39:	89 c3                	mov    ebx,eax
c0015a3b:	57                   	push   edi
c0015a3c:	56                   	push   esi
c0015a3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015a45:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015a4c:	55                   	push   ebp
c0015a4d:	50                   	push   eax
c0015a4e:	e8 e3 fb ff ff       	call   c0015636 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015a53:	83 c4 14             	add    esp,0x14
c0015a56:	53                   	push   ebx
c0015a57:	e8 90 fc ff ff       	call   c00156ec <LogicalDisk::assignDriveLetter()>
c0015a5c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015a5f:	e8 3e fd ff ff       	call   c00157a2 <LogicalDisk::mount()>
c0015a64:	58                   	pop    eax
c0015a65:	5a                   	pop    edx
c0015a66:	53                   	push   ebx
c0015a67:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015a6e:	e8 e7 db ff ff       	call   c001365a <Device::addChild(Device*)>
c0015a73:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015a79:	5b                   	pop    ebx
c0015a7a:	5e                   	pop    esi
c0015a7b:	5f                   	pop    edi
c0015a7c:	5d                   	pop    ebp
c0015a7d:	c3                   	ret    

c0015a7e <createPartitionsForDisk(PhysicalDisk*)>:
c0015a7e:	55                   	push   ebp
c0015a7f:	57                   	push   edi
c0015a80:	56                   	push   esi
c0015a81:	53                   	push   ebx
c0015a82:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0015a88:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015a8f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015a95:	3d 00 02 00 00       	cmp    eax,0x200
c0015a9a:	74 27                	je     c0015ac3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0015a9c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0015aa2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0015aa8:	83 ec 10             	sub    esp,0x10
c0015aab:	0f a4 f7 0a          	shld   edi,esi,0xa
c0015aaf:	99                   	cdq    
c0015ab0:	c1 e6 0a             	shl    esi,0xa
c0015ab3:	52                   	push   edx
c0015ab4:	89 fd                	mov    ebp,edi
c0015ab6:	50                   	push   eax
c0015ab7:	55                   	push   ebp
c0015ab8:	56                   	push   esi
c0015ab9:	e8 9e d8 00 00       	call   c002335c <__udivdi3>
c0015abe:	e9 b1 00 00 00       	jmp    c0015b74 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015ac3:	83 ec 0c             	sub    esp,0xc
c0015ac6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ac8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0015acc:	56                   	push   esi
c0015acd:	6a 01                	push   0x1
c0015acf:	6a 00                	push   0x0
c0015ad1:	6a 00                	push   0x0
c0015ad3:	53                   	push   ebx
c0015ad4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015ad7:	83 c4 20             	add    esp,0x20
c0015ada:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0015ae2:	75 0a                	jne    c0015aee <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0015ae4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0015aec:	74 2c                	je     c0015b1a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0015aee:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015af4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015afa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015b00:	83 ec 10             	sub    esp,0x10
c0015b03:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015b07:	89 f7                	mov    edi,esi
c0015b09:	c1 e0 0a             	shl    eax,0xa
c0015b0c:	c1 ff 1f             	sar    edi,0x1f
c0015b0f:	57                   	push   edi
c0015b10:	56                   	push   esi
c0015b11:	52                   	push   edx
c0015b12:	50                   	push   eax
c0015b13:	e8 44 d8 00 00       	call   c002335c <__udivdi3>
c0015b18:	eb 5a                	jmp    c0015b74 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0015b1a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0015b21:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0015b28:	83 e1 7f             	and    ecx,0x7f
c0015b2b:	83 e0 7f             	and    eax,0x7f
c0015b2e:	01 c1                	add    ecx,eax
c0015b30:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0015b37:	83 e0 7f             	and    eax,0x7f
c0015b3a:	01 c1                	add    ecx,eax
c0015b3c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015b43:	83 e0 7f             	and    eax,0x7f
c0015b46:	00 c1                	add    cl,al
c0015b48:	74 41                	je     c0015b8b <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0015b4a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015b50:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015b56:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015b5c:	83 ec 10             	sub    esp,0x10
c0015b5f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015b63:	89 f7                	mov    edi,esi
c0015b65:	c1 e0 0a             	shl    eax,0xa
c0015b68:	c1 ff 1f             	sar    edi,0x1f
c0015b6b:	57                   	push   edi
c0015b6c:	56                   	push   esi
c0015b6d:	52                   	push   edx
c0015b6e:	50                   	push   eax
c0015b6f:	e8 e8 d7 00 00       	call   c002335c <__udivdi3>
c0015b74:	83 c4 14             	add    esp,0x14
c0015b77:	52                   	push   edx
c0015b78:	50                   	push   eax
c0015b79:	6a 00                	push   0x0
c0015b7b:	6a 00                	push   0x0
c0015b7d:	53                   	push   ebx
c0015b7e:	e8 53 fe ff ff       	call   c00159d6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015b83:	83 c4 20             	add    esp,0x20
c0015b86:	e9 79 01 00 00       	jmp    c0015d04 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0015b8b:	89 f0                	mov    eax,esi
c0015b8d:	31 f6                	xor    esi,esi
c0015b8f:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0015b96:	75 02                	jne    c0015b9a <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0015b98:	89 f1                	mov    ecx,esi
c0015b9a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0015ba1:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0015ba8:	c1 e2 08             	shl    edx,0x8
c0015bab:	c1 e7 10             	shl    edi,0x10
c0015bae:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0015bb6:	09 fa                	or     edx,edi
c0015bb8:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0015bc0:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0015bc7:	83 c0 10             	add    eax,0x10
c0015bca:	09 fa                	or     edx,edi
c0015bcc:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0015bd3:	c1 e7 18             	shl    edi,0x18
c0015bd6:	09 fa                	or     edx,edi
c0015bd8:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0015bdf:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0015be3:	c1 e7 10             	shl    edi,0x10
c0015be6:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0015bed:	c1 e2 08             	shl    edx,0x8
c0015bf0:	09 fa                	or     edx,edi
c0015bf2:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0015bf9:	09 fa                	or     edx,edi
c0015bfb:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0015c02:	c1 e7 18             	shl    edi,0x18
c0015c05:	09 fa                	or     edx,edi
c0015c07:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0015c0b:	46                   	inc    esi
c0015c0c:	83 fe 04             	cmp    esi,0x4
c0015c0f:	0f 85 7a ff ff ff    	jne    c0015b8f <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0015c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c19:	83 f0 01             	xor    eax,0x1
c0015c1c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0015c20:	75 57                	jne    c0015c79 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015c22:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c26:	83 f0 01             	xor    eax,0x1
c0015c29:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0015c2d:	75 4a                	jne    c0015c79 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015c2f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0015c33:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015c3b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015c43:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015c49:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015c4f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015c55:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015c59:	89 f7                	mov    edi,esi
c0015c5b:	c1 e0 0a             	shl    eax,0xa
c0015c5e:	c1 ff 1f             	sar    edi,0x1f
c0015c61:	57                   	push   edi
c0015c62:	56                   	push   esi
c0015c63:	52                   	push   edx
c0015c64:	50                   	push   eax
c0015c65:	e8 f2 d6 00 00       	call   c002335c <__udivdi3>
c0015c6a:	83 c4 10             	add    esp,0x10
c0015c6d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c71:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c75:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0015c79:	84 c9                	test   cl,cl
c0015c7b:	74 53                	je     c0015cd0 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0015c7d:	0f b6 c9             	movzx  ecx,cl
c0015c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c84:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015c88:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015c8c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015c90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015c94:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015c98:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0015c9c:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0015ca0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015ca4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015ca8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015cac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015cb0:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0015cb4:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0015cb8:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0015cbc:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0015cc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015cc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015cc8:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0015ccc:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0015cd0:	31 ed                	xor    ebp,ebp
c0015cd2:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0015cd6:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0015cda:	89 f8                	mov    eax,edi
c0015cdc:	09 f0                	or     eax,esi
c0015cde:	74 1e                	je     c0015cfe <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015ce0:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0015ce4:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0015ce8:	89 d1                	mov    ecx,edx
c0015cea:	09 c1                	or     ecx,eax
c0015cec:	74 10                	je     c0015cfe <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0015cee:	83 ec 0c             	sub    esp,0xc
c0015cf1:	57                   	push   edi
c0015cf2:	56                   	push   esi
c0015cf3:	52                   	push   edx
c0015cf4:	50                   	push   eax
c0015cf5:	53                   	push   ebx
c0015cf6:	e8 db fc ff ff       	call   c00159d6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015cfb:	83 c4 20             	add    esp,0x20
c0015cfe:	45                   	inc    ebp
c0015cff:	83 fd 04             	cmp    ebp,0x4
c0015d02:	75 ce                	jne    c0015cd2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0015d04:	81 c4 5c 02 00 00    	add    esp,0x25c
c0015d0a:	5b                   	pop    ebx
c0015d0b:	5e                   	pop    esi
c0015d0c:	5f                   	pop    edi
c0015d0d:	5d                   	pop    ebp
c0015d0e:	c3                   	ret    
c0015d0f:	90                   	nop

c0015d10 <Timer::Timer(char const*)>:
c0015d10:	83 ec 0c             	sub    esp,0xc
c0015d13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d17:	83 ec 08             	sub    esp,0x8
c0015d1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d1e:	50                   	push   eax
c0015d1f:	e8 26 db ff ff       	call   c001384a <Device::Device(char const*)>
c0015d24:	83 c4 10             	add    esp,0x10
c0015d27:	ba e8 79 02 c0       	mov    edx,0xc00279e8
c0015d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d30:	89 10                	mov    DWORD PTR [eax],edx
c0015d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d36:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0015d40:	90                   	nop
c0015d41:	83 c4 0c             	add    esp,0xc
c0015d44:	c3                   	ret    
c0015d45:	90                   	nop

c0015d46 <Timer::~Timer()>:
c0015d46:	83 ec 0c             	sub    esp,0xc
c0015d49:	ba e8 79 02 c0       	mov    edx,0xc00279e8
c0015d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d52:	89 10                	mov    DWORD PTR [eax],edx
c0015d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d58:	83 ec 0c             	sub    esp,0xc
c0015d5b:	50                   	push   eax
c0015d5c:	e8 9b d7 ff ff       	call   c00134fc <Device::~Device()>
c0015d61:	83 c4 10             	add    esp,0x10
c0015d64:	90                   	nop
c0015d65:	83 c4 0c             	add    esp,0xc
c0015d68:	c3                   	ret    
c0015d69:	90                   	nop

c0015d6a <Timer::~Timer()>:
c0015d6a:	83 ec 0c             	sub    esp,0xc
c0015d6d:	83 ec 0c             	sub    esp,0xc
c0015d70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d74:	e8 cd ff ff ff       	call   c0015d46 <Timer::~Timer()>
c0015d79:	83 c4 10             	add    esp,0x10
c0015d7c:	83 ec 08             	sub    esp,0x8
c0015d7f:	68 5c 01 00 00       	push   0x15c
c0015d84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d88:	e8 e2 c3 ff ff       	call   c001216f <operator delete(void*, unsigned long)>
c0015d8d:	83 c4 10             	add    esp,0x10
c0015d90:	83 c4 0c             	add    esp,0xc
c0015d93:	c3                   	ret    

c0015d94 <Timer::read()>:
c0015d94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015d98:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015d9e:	c3                   	ret    

c0015d9f <timerHandler(unsigned long long)>:
c0015d9f:	55                   	push   ebp
c0015da0:	57                   	push   edi
c0015da1:	56                   	push   esi
c0015da2:	53                   	push   ebx
c0015da3:	83 ec 0c             	sub    esp,0xc
c0015da6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0015daa:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0015dae:	01 35 70 aa 02 c0    	add    DWORD PTR ds:0xc002aa70,esi
c0015db4:	11 3d 74 aa 02 c0    	adc    DWORD PTR ds:0xc002aa74,edi
c0015dba:	80 3d 0d a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a40d,0x0
c0015dc1:	0f 84 07 01 00 00    	je     c0015ece <timerHandler(unsigned long long)+0x12f>
c0015dc7:	e8 9b 5b 00 00       	call   c001b967 <lockStuff()>
c0015dcc:	83 ec 0c             	sub    esp,0xc
c0015dcf:	68 3c b8 02 c0       	push   0xc002b83c
c0015dd4:	e8 97 f6 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015dd9:	c7 04 24 3c b8 02 c0 	mov    DWORD PTR [esp],0xc002b83c
c0015de0:	89 c3                	mov    ebx,eax
c0015de2:	e8 91 f6 00 00       	call   c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015de7:	83 c4 10             	add    esp,0x10
c0015dea:	84 c0                	test   al,al
c0015dec:	74 60                	je     c0015e4e <timerHandler(unsigned long long)+0xaf>
c0015dee:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015df4:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0015df7:	85 c0                	test   eax,eax
c0015df9:	0f 85 91 00 00 00    	jne    c0015e90 <timerHandler(unsigned long long)+0xf1>
c0015dff:	e9 be 00 00 00       	jmp    c0015ec2 <timerHandler(unsigned long long)+0x123>
c0015e04:	83 ec 0c             	sub    esp,0xc
c0015e07:	55                   	push   ebp
c0015e08:	e8 43 61 00 00       	call   c001bf50 <unblockTask(ThreadControlBlock*)>
c0015e0d:	83 c4 10             	add    esp,0x10
c0015e10:	39 eb                	cmp    ebx,ebp
c0015e12:	75 12                	jne    c0015e26 <timerHandler(unsigned long long)+0x87>
c0015e14:	83 ec 0c             	sub    esp,0xc
c0015e17:	68 3c b8 02 c0       	push   0xc002b83c
c0015e1c:	e8 4f f6 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e21:	89 c3                	mov    ebx,eax
c0015e23:	83 c4 10             	add    esp,0x10
c0015e26:	83 ec 0c             	sub    esp,0xc
c0015e29:	68 3c b8 02 c0       	push   0xc002b83c
c0015e2e:	e8 45 f6 00 00       	call   c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015e33:	83 c4 10             	add    esp,0x10
c0015e36:	84 c0                	test   al,al
c0015e38:	75 b4                	jne    c0015dee <timerHandler(unsigned long long)+0x4f>
c0015e3a:	83 ec 0c             	sub    esp,0xc
c0015e3d:	68 3c b8 02 c0       	push   0xc002b83c
c0015e42:	e8 29 f6 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e47:	83 c4 10             	add    esp,0x10
c0015e4a:	39 d8                	cmp    eax,ebx
c0015e4c:	74 a0                	je     c0015dee <timerHandler(unsigned long long)+0x4f>
c0015e4e:	83 ec 0c             	sub    esp,0xc
c0015e51:	68 3c b8 02 c0       	push   0xc002b83c
c0015e56:	e8 15 f6 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015e5b:	c7 04 24 3c b8 02 c0 	mov    DWORD PTR [esp],0xc002b83c
c0015e62:	89 c5                	mov    ebp,eax
c0015e64:	e8 2b f6 00 00       	call   c0025494 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015e69:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0015e6c:	83 c4 10             	add    esp,0x10
c0015e6f:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0015e72:	39 15 70 aa 02 c0    	cmp    DWORD PTR ds:0xc002aa70,edx
c0015e78:	a1 74 aa 02 c0       	mov    eax,ds:0xc002aa74
c0015e7d:	19 c8                	sbb    eax,ecx
c0015e7f:	73 83                	jae    c0015e04 <timerHandler(unsigned long long)+0x65>
c0015e81:	50                   	push   eax
c0015e82:	50                   	push   eax
c0015e83:	55                   	push   ebp
c0015e84:	68 3c b8 02 c0       	push   0xc002b83c
c0015e89:	e8 b4 f6 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015e8e:	eb 93                	jmp    c0015e23 <timerHandler(unsigned long long)+0x84>
c0015e90:	80 3d 0c a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a40c,0x0
c0015e97:	74 29                	je     c0015ec2 <timerHandler(unsigned long long)+0x123>
c0015e99:	39 c6                	cmp    esi,eax
c0015e9b:	bb 00 00 00 00       	mov    ebx,0x0
c0015ea0:	19 df                	sbb    edi,ebx
c0015ea2:	72 19                	jb     c0015ebd <timerHandler(unsigned long long)+0x11e>
c0015ea4:	e8 97 5a 00 00       	call   c001b940 <lockScheduler()>
c0015ea9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eae:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0015eb1:	e8 be 5d 00 00       	call   c001bc74 <schedule()>
c0015eb6:	e8 87 5a 00 00       	call   c001b942 <unlockScheduler()>
c0015ebb:	eb 05                	jmp    c0015ec2 <timerHandler(unsigned long long)+0x123>
c0015ebd:	29 f0                	sub    eax,esi
c0015ebf:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0015ec2:	83 c4 0c             	add    esp,0xc
c0015ec5:	5b                   	pop    ebx
c0015ec6:	5e                   	pop    esi
c0015ec7:	5f                   	pop    edi
c0015ec8:	5d                   	pop    ebp
c0015ec9:	e9 2b 5e 00 00       	jmp    c001bcf9 <unlockStuff()>
c0015ece:	83 c4 0c             	add    esp,0xc
c0015ed1:	5b                   	pop    ebx
c0015ed2:	5e                   	pop    esi
c0015ed3:	5f                   	pop    edi
c0015ed4:	5d                   	pop    ebp
c0015ed5:	c3                   	ret    

c0015ed6 <setupTimer(int)>:
c0015ed6:	57                   	push   edi
c0015ed7:	56                   	push   esi
c0015ed8:	53                   	push   ebx
c0015ed9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015edd:	e8 84 19 00 00       	call   c0017866 <CPU::getNumber()>
c0015ee2:	85 c0                	test   eax,eax
c0015ee4:	74 32                	je     c0015f18 <setupTimer(int)+0x42>
c0015ee6:	83 ec 0c             	sub    esp,0xc
c0015ee9:	68 60 01 00 00       	push   0x160
c0015eee:	e8 6d c2 ff ff       	call   c0012160 <operator new(unsigned long)>
c0015ef3:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ef6:	89 c3                	mov    ebx,eax
c0015ef8:	e8 fd ce 00 00       	call   c0022dfa <APICTimer::APICTimer()>
c0015efd:	6a 00                	push   0x0
c0015eff:	6a 00                	push   0x0
c0015f01:	56                   	push   esi
c0015f02:	53                   	push   ebx
c0015f03:	e8 fa cd 00 00       	call   c0022d02 <APICTimer::open(int, int, void*)>
c0015f08:	83 c4 20             	add    esp,0x20
c0015f0b:	e8 5a 19 00 00       	call   c001786a <CPU::current()>
c0015f10:	56                   	push   esi
c0015f11:	56                   	push   esi
c0015f12:	53                   	push   ebx
c0015f13:	e9 96 00 00 00       	jmp    c0015fae <setupTimer(int)+0xd8>
c0015f18:	e8 4d 19 00 00       	call   c001786a <CPU::current()>
c0015f1d:	83 ec 0c             	sub    esp,0xc
c0015f20:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015f26:	e8 11 da ff ff       	call   c001393c <Device::getName()>
c0015f2b:	83 c4 10             	add    esp,0x10
c0015f2e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0015f31:	0f 85 87 00 00 00    	jne    c0015fbe <setupTimer(int)+0xe8>
c0015f37:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0015f3c:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0015f43:	74 79                	je     c0015fbe <setupTimer(int)+0xe8>
c0015f45:	83 ec 0c             	sub    esp,0xc
c0015f48:	68 5c 01 00 00       	push   0x15c
c0015f4d:	e8 0e c2 ff ff       	call   c0012160 <operator new(unsigned long)>
c0015f52:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f55:	89 c3                	mov    ebx,eax
c0015f57:	e8 ee cf 00 00       	call   c0022f4a <PIT::PIT()>
c0015f5c:	59                   	pop    ecx
c0015f5d:	5f                   	pop    edi
c0015f5e:	53                   	push   ebx
c0015f5f:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c0015f65:	e8 f0 d6 ff ff       	call   c001365a <Device::addChild(Device*)>
c0015f6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f6c:	6a 00                	push   0x0
c0015f6e:	6a 00                	push   0x0
c0015f70:	56                   	push   esi
c0015f71:	53                   	push   ebx
c0015f72:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f75:	83 c4 14             	add    esp,0x14
c0015f78:	68 60 01 00 00       	push   0x160
c0015f7d:	e8 de c1 ff ff       	call   c0012160 <operator new(unsigned long)>
c0015f82:	89 04 24             	mov    DWORD PTR [esp],eax
c0015f85:	89 c7                	mov    edi,eax
c0015f87:	e8 6e ce 00 00       	call   c0022dfa <APICTimer::APICTimer()>
c0015f8c:	6a 00                	push   0x0
c0015f8e:	6a 00                	push   0x0
c0015f90:	56                   	push   esi
c0015f91:	57                   	push   edi
c0015f92:	e8 6b cd 00 00       	call   c0022d02 <APICTimer::open(int, int, void*)>
c0015f97:	83 c4 20             	add    esp,0x20
c0015f9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f9c:	6a 00                	push   0x0
c0015f9e:	6a 00                	push   0x0
c0015fa0:	6a 00                	push   0x0
c0015fa2:	53                   	push   ebx
c0015fa3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015fa6:	e8 bf 18 00 00       	call   c001786a <CPU::current()>
c0015fab:	5a                   	pop    edx
c0015fac:	59                   	pop    ecx
c0015fad:	57                   	push   edi
c0015fae:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0015fb4:	e8 a1 d6 ff ff       	call   c001365a <Device::addChild(Device*)>
c0015fb9:	83 c4 10             	add    esp,0x10
c0015fbc:	eb 33                	jmp    c0015ff1 <setupTimer(int)+0x11b>
c0015fbe:	83 ec 0c             	sub    esp,0xc
c0015fc1:	68 5c 01 00 00       	push   0x15c
c0015fc6:	e8 95 c1 ff ff       	call   c0012160 <operator new(unsigned long)>
c0015fcb:	89 04 24             	mov    DWORD PTR [esp],eax
c0015fce:	89 c3                	mov    ebx,eax
c0015fd0:	e8 75 cf 00 00       	call   c0022f4a <PIT::PIT()>
c0015fd5:	58                   	pop    eax
c0015fd6:	5a                   	pop    edx
c0015fd7:	53                   	push   ebx
c0015fd8:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c0015fde:	e8 77 d6 ff ff       	call   c001365a <Device::addChild(Device*)>
c0015fe3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fe5:	6a 00                	push   0x0
c0015fe7:	6a 00                	push   0x0
c0015fe9:	56                   	push   esi
c0015fea:	53                   	push   ebx
c0015feb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015fee:	83 c4 20             	add    esp,0x20
c0015ff1:	89 d8                	mov    eax,ebx
c0015ff3:	5b                   	pop    ebx
c0015ff4:	5e                   	pop    esi
c0015ff5:	5f                   	pop    edi
c0015ff6:	c3                   	ret    
c0015ff7:	90                   	nop

c0015ff8 <VCache::VCache(PhysicalDisk*)>:
c0015ff8:	53                   	push   ebx
c0015ff9:	83 ec 08             	sub    esp,0x8
c0015ffc:	ba 18 7a 02 c0       	mov    edx,0xc0027a18
c0016001:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016005:	89 10                	mov    DWORD PTR [eax],edx
c0016007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001600b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016016:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001601d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016021:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016028:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001602f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016033:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001603a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016045:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001604c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016050:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016054:	83 ec 0c             	sub    esp,0xc
c0016057:	6a 10                	push   0x10
c0016059:	e8 02 c1 ff ff       	call   c0012160 <operator new(unsigned long)>
c001605e:	83 c4 10             	add    esp,0x10
c0016061:	89 c3                	mov    ebx,eax
c0016063:	83 ec 0c             	sub    esp,0xc
c0016066:	53                   	push   ebx
c0016067:	e8 ec 59 00 00       	call   c001ba58 <Mutex::Mutex()>
c001606c:	83 c4 10             	add    esp,0x10
c001606f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016073:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001607a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001607e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016081:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016085:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001608c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016090:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001609a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001609d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160a1:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00160a7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00160ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00160b1:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00160b4:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00160b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160bb:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00160bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00160c3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00160c9:	c1 e0 06             	shl    eax,0x6
c00160cc:	83 ec 0c             	sub    esp,0xc
c00160cf:	50                   	push   eax
c00160d0:	e8 71 90 ff ff       	call   c000f146 <malloc>
c00160d5:	83 c4 10             	add    esp,0x10
c00160d8:	89 c2                	mov    edx,eax
c00160da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160de:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00160e1:	90                   	nop
c00160e2:	83 c4 08             	add    esp,0x8
c00160e5:	5b                   	pop    ebx
c00160e6:	c3                   	ret    
c00160e7:	90                   	nop

c00160e8 <VCache::writeWriteBuffer()>:
c00160e8:	53                   	push   ebx
c00160e9:	83 ec 14             	sub    esp,0x14
c00160ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00160f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00160f3:	8b 10                	mov    edx,DWORD PTR [eax]
c00160f5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00160f8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00160fb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00160fe:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016101:	50                   	push   eax
c0016102:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016105:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001610c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016113:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016117:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001611e:	83 c4 28             	add    esp,0x28
c0016121:	5b                   	pop    ebx
c0016122:	c3                   	ret    
c0016123:	90                   	nop

c0016124 <VCache::~VCache()>:
c0016124:	83 ec 0c             	sub    esp,0xc
c0016127:	ba 18 7a 02 c0       	mov    edx,0xc0027a18
c001612c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016130:	89 10                	mov    DWORD PTR [eax],edx
c0016132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016136:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016139:	84 c0                	test   al,al
c001613b:	74 0f                	je     c001614c <VCache::~VCache()+0x28>
c001613d:	83 ec 0c             	sub    esp,0xc
c0016140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016144:	e8 9f ff ff ff       	call   c00160e8 <VCache::writeWriteBuffer()>
c0016149:	83 c4 10             	add    esp,0x10
c001614c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016150:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016153:	83 ec 0c             	sub    esp,0xc
c0016156:	50                   	push   eax
c0016157:	e8 fa 8f ff ff       	call   c000f156 <free>
c001615c:	83 c4 10             	add    esp,0x10
c001615f:	90                   	nop
c0016160:	83 c4 0c             	add    esp,0xc
c0016163:	c3                   	ret    

c0016164 <VCache::~VCache()>:
c0016164:	83 ec 0c             	sub    esp,0xc
c0016167:	83 ec 0c             	sub    esp,0xc
c001616a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001616e:	e8 b1 ff ff ff       	call   c0016124 <VCache::~VCache()>
c0016173:	83 c4 10             	add    esp,0x10
c0016176:	83 ec 08             	sub    esp,0x8
c0016179:	6a 30                	push   0x30
c001617b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001617f:	e8 eb bf ff ff       	call   c001216f <operator delete(void*, unsigned long)>
c0016184:	83 c4 10             	add    esp,0x10
c0016187:	83 c4 0c             	add    esp,0xc
c001618a:	c3                   	ret    
c001618b:	90                   	nop

c001618c <VCache::write(unsigned long long, int, void*)>:
c001618c:	55                   	push   ebp
c001618d:	57                   	push   edi
c001618e:	56                   	push   esi
c001618f:	53                   	push   ebx
c0016190:	83 ec 28             	sub    esp,0x28
c0016193:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016197:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001619b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001619f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00161a3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00161a6:	e8 0f 5d 00 00       	call   c001beba <Semaphore::acquire()>
c00161ab:	83 c4 10             	add    esp,0x10
c00161ae:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00161b2:	74 66                	je     c001621a <VCache::write(unsigned long long, int, void*)+0x8e>
c00161b4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00161b7:	99                   	cdq    
c00161b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00161bc:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00161bf:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00161c2:	89 c1                	mov    ecx,eax
c00161c4:	89 d0                	mov    eax,edx
c00161c6:	31 f1                	xor    ecx,esi
c00161c8:	31 f8                	xor    eax,edi
c00161ca:	89 ca                	mov    edx,ecx
c00161cc:	09 c2                	or     edx,eax
c00161ce:	75 3e                	jne    c001620e <VCache::write(unsigned long long, int, void*)+0x82>
c00161d0:	83 fd 01             	cmp    ebp,0x1
c00161d3:	75 39                	jne    c001620e <VCache::write(unsigned long long, int, void*)+0x82>
c00161d5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00161d8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00161de:	51                   	push   ecx
c00161df:	50                   	push   eax
c00161e0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00161e4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00161e8:	0f af c8             	imul   ecx,eax
c00161eb:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00161ee:	51                   	push   ecx
c00161ef:	e8 a2 a4 fe ff       	call   c0000696 <memcpy>
c00161f4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00161f7:	83 c4 10             	add    esp,0x10
c00161fa:	40                   	inc    eax
c00161fb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00161fe:	83 f8 40             	cmp    eax,0x40
c0016201:	75 57                	jne    c001625a <VCache::write(unsigned long long, int, void*)+0xce>
c0016203:	83 ec 0c             	sub    esp,0xc
c0016206:	53                   	push   ebx
c0016207:	e8 dc fe ff ff       	call   c00160e8 <VCache::writeWriteBuffer()>
c001620c:	eb 34                	jmp    c0016242 <VCache::write(unsigned long long, int, void*)+0xb6>
c001620e:	83 ec 0c             	sub    esp,0xc
c0016211:	53                   	push   ebx
c0016212:	e8 d1 fe ff ff       	call   c00160e8 <VCache::writeWriteBuffer()>
c0016217:	83 c4 10             	add    esp,0x10
c001621a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001621d:	83 fd 3f             	cmp    ebp,0x3f
c0016220:	7f 25                	jg     c0016247 <VCache::write(unsigned long long, int, void*)+0xbb>
c0016222:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016225:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016228:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001622b:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001622f:	52                   	push   edx
c0016230:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016236:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001623a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001623d:	e8 54 a4 fe ff       	call   c0000696 <memcpy>
c0016242:	83 c4 10             	add    esp,0x10
c0016245:	eb 13                	jmp    c001625a <VCache::write(unsigned long long, int, void*)+0xce>
c0016247:	83 ec 0c             	sub    esp,0xc
c001624a:	8b 10                	mov    edx,DWORD PTR [eax]
c001624c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016250:	55                   	push   ebp
c0016251:	57                   	push   edi
c0016252:	56                   	push   esi
c0016253:	50                   	push   eax
c0016254:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016257:	83 c4 20             	add    esp,0x20
c001625a:	83 ec 0c             	sub    esp,0xc
c001625d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016260:	e8 dd 61 00 00       	call   c001c442 <Semaphore::release()>
c0016265:	83 c4 2c             	add    esp,0x2c
c0016268:	31 c0                	xor    eax,eax
c001626a:	5b                   	pop    ebx
c001626b:	5e                   	pop    esi
c001626c:	5f                   	pop    edi
c001626d:	5d                   	pop    ebp
c001626e:	c3                   	ret    
c001626f:	90                   	nop

c0016270 <VCache::read(unsigned long long, int, void*)>:
c0016270:	57                   	push   edi
c0016271:	56                   	push   esi
c0016272:	53                   	push   ebx
c0016273:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016277:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001627b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001627f:	83 ec 0c             	sub    esp,0xc
c0016282:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016285:	e8 30 5c 00 00       	call   c001beba <Semaphore::acquire()>
c001628a:	83 c4 10             	add    esp,0x10
c001628d:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016291:	74 0c                	je     c001629f <VCache::read(unsigned long long, int, void*)+0x2f>
c0016293:	83 ec 0c             	sub    esp,0xc
c0016296:	53                   	push   ebx
c0016297:	e8 4c fe ff ff       	call   c00160e8 <VCache::writeWriteBuffer()>
c001629c:	83 c4 10             	add    esp,0x10
c001629f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00162a2:	83 ec 0c             	sub    esp,0xc
c00162a5:	8b 10                	mov    edx,DWORD PTR [eax]
c00162a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162af:	57                   	push   edi
c00162b0:	56                   	push   esi
c00162b1:	50                   	push   eax
c00162b2:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00162b5:	83 c4 14             	add    esp,0x14
c00162b8:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00162bb:	e8 82 61 00 00       	call   c001c442 <Semaphore::release()>
c00162c0:	83 c4 10             	add    esp,0x10
c00162c3:	31 c0                	xor    eax,eax
c00162c5:	5b                   	pop    ebx
c00162c6:	5e                   	pop    esi
c00162c7:	5f                   	pop    edi
c00162c8:	c3                   	ret    
c00162c9:	90                   	nop

c00162ca <Video::putrect(int, int, int, int, unsigned int)>:
c00162ca:	55                   	push   ebp
c00162cb:	57                   	push   edi
c00162cc:	56                   	push   esi
c00162cd:	53                   	push   ebx
c00162ce:	83 ec 1c             	sub    esp,0x1c
c00162d1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00162d5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00162d9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00162dd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00162e1:	01 e8                	add    eax,ebp
c00162e3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00162e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00162eb:	01 df                	add    edi,ebx
c00162ed:	39 fb                	cmp    ebx,edi
c00162ef:	7d 1b                	jge    c001630c <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00162f1:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00162f5:	7d 12                	jge    c0016309 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00162f7:	8b 16                	mov    edx,DWORD PTR [esi]
c00162f9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00162fd:	53                   	push   ebx
c00162fe:	55                   	push   ebp
c00162ff:	45                   	inc    ebp
c0016300:	56                   	push   esi
c0016301:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016304:	83 c4 10             	add    esp,0x10
c0016307:	eb e8                	jmp    c00162f1 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0016309:	43                   	inc    ebx
c001630a:	eb e1                	jmp    c00162ed <Video::putrect(int, int, int, int, unsigned int)+0x23>
c001630c:	83 c4 1c             	add    esp,0x1c
c001630f:	5b                   	pop    ebx
c0016310:	5e                   	pop    esi
c0016311:	5f                   	pop    edi
c0016312:	5d                   	pop    ebp
c0016313:	c3                   	ret    

c0016314 <Video::blit(unsigned int*, int, int, int, int)>:
c0016314:	55                   	push   ebp
c0016315:	57                   	push   edi
c0016316:	56                   	push   esi
c0016317:	53                   	push   ebx
c0016318:	83 ec 1c             	sub    esp,0x1c
c001631b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001631f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016323:	85 c0                	test   eax,eax
c0016325:	79 02                	jns    c0016329 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016327:	31 c0                	xor    eax,eax
c0016329:	c1 e0 02             	shl    eax,0x2
c001632c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016330:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016334:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016338:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001633c:	39 d8                	cmp    eax,ebx
c001633e:	7e 49                	jle    c0016389 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016340:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016346:	7c 41                	jl     c0016389 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016348:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001634c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016350:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016354:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016358:	39 f9                	cmp    ecx,edi
c001635a:	7e 22                	jle    c001637e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001635c:	83 c5 04             	add    ebp,0x4
c001635f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016365:	7c 14                	jl     c001637b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016367:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016369:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001636c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016370:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016374:	56                   	push   esi
c0016375:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016378:	83 c4 10             	add    esp,0x10
c001637b:	47                   	inc    edi
c001637c:	eb d2                	jmp    c0016350 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001637e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016382:	43                   	inc    ebx
c0016383:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016387:	eb ab                	jmp    c0016334 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016389:	83 c4 1c             	add    esp,0x1c
c001638c:	5b                   	pop    ebx
c001638d:	5e                   	pop    esi
c001638e:	5f                   	pop    edi
c001638f:	5d                   	pop    ebp
c0016390:	c3                   	ret    
c0016391:	90                   	nop

c0016392 <Video::clearScreen(unsigned int)>:
c0016392:	57                   	push   edi
c0016393:	56                   	push   esi
c0016394:	53                   	push   ebx
c0016395:	31 db                	xor    ebx,ebx
c0016397:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001639b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00163a1:	7e 1f                	jle    c00163c2 <Video::clearScreen(unsigned int)+0x30>
c00163a3:	31 ff                	xor    edi,edi
c00163a5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00163ab:	7e 12                	jle    c00163bf <Video::clearScreen(unsigned int)+0x2d>
c00163ad:	8b 06                	mov    eax,DWORD PTR [esi]
c00163af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00163b3:	53                   	push   ebx
c00163b4:	57                   	push   edi
c00163b5:	47                   	inc    edi
c00163b6:	56                   	push   esi
c00163b7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00163ba:	83 c4 10             	add    esp,0x10
c00163bd:	eb e6                	jmp    c00163a5 <Video::clearScreen(unsigned int)+0x13>
c00163bf:	43                   	inc    ebx
c00163c0:	eb d9                	jmp    c001639b <Video::clearScreen(unsigned int)+0x9>
c00163c2:	5b                   	pop    ebx
c00163c3:	5e                   	pop    esi
c00163c4:	5f                   	pop    edi
c00163c5:	c3                   	ret    

c00163c6 <Video::putpixel(int, int, unsigned int)>:
c00163c6:	c7 44 24 04 20 7a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0027a20
c00163ce:	e9 7c be ff ff       	jmp    c001224f <Dbg::kprintf(char const*, ...)>
c00163d3:	90                   	nop

c00163d4 <Video::Video(char const*)>:
c00163d4:	83 ec 0c             	sub    esp,0xc
c00163d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163db:	83 ec 08             	sub    esp,0x8
c00163de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163e2:	50                   	push   eax
c00163e3:	e8 62 d4 ff ff       	call   c001384a <Device::Device(char const*)>
c00163e8:	83 c4 10             	add    esp,0x10
c00163eb:	ba 38 7a 02 c0       	mov    edx,0xc0027a38
c00163f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163f4:	89 10                	mov    DWORD PTR [eax],edx
c00163f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163fa:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016404:	90                   	nop
c0016405:	83 c4 0c             	add    esp,0xc
c0016408:	c3                   	ret    
c0016409:	90                   	nop

c001640a <Video::~Video()>:
c001640a:	83 ec 0c             	sub    esp,0xc
c001640d:	ba 38 7a 02 c0       	mov    edx,0xc0027a38
c0016412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016416:	89 10                	mov    DWORD PTR [eax],edx
c0016418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001641c:	83 ec 0c             	sub    esp,0xc
c001641f:	50                   	push   eax
c0016420:	e8 d7 d0 ff ff       	call   c00134fc <Device::~Device()>
c0016425:	83 c4 10             	add    esp,0x10
c0016428:	90                   	nop
c0016429:	83 c4 0c             	add    esp,0xc
c001642c:	c3                   	ret    
c001642d:	90                   	nop

c001642e <Video::~Video()>:
c001642e:	83 ec 0c             	sub    esp,0xc
c0016431:	83 ec 0c             	sub    esp,0xc
c0016434:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016438:	e8 cd ff ff ff       	call   c001640a <Video::~Video()>
c001643d:	83 c4 10             	add    esp,0x10
c0016440:	83 ec 08             	sub    esp,0x8
c0016443:	68 64 01 00 00       	push   0x164
c0016448:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001644c:	e8 1e bd ff ff       	call   c001216f <operator delete(void*, unsigned long)>
c0016451:	83 c4 10             	add    esp,0x10
c0016454:	83 c4 0c             	add    esp,0xc
c0016457:	c3                   	ret    

c0016458 <Video::isMonochrome()>:
c0016458:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001645c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016462:	c3                   	ret    
c0016463:	90                   	nop

c0016464 <Video::getWidth()>:
c0016464:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016468:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001646e:	c3                   	ret    
c001646f:	90                   	nop

c0016470 <Video::getHeight()>:
c0016470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016474:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001647a:	c3                   	ret    
c001647b:	90                   	nop

c001647c <Video::drawCursor(int, int, unsigned char*, int)>:
c001647c:	55                   	push   ebp
c001647d:	57                   	push   edi
c001647e:	56                   	push   esi
c001647f:	53                   	push   ebx
c0016480:	83 ec 2c             	sub    esp,0x2c
c0016483:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016487:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001648b:	83 f8 01             	cmp    eax,0x1
c001648e:	19 c9                	sbb    ecx,ecx
c0016490:	31 db                	xor    ebx,ebx
c0016492:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016496:	89 cd                	mov    ebp,ecx
c0016498:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00164a0:	f7 d5                	not    ebp
c00164a2:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00164a8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00164ac:	01 d8                	add    eax,ebx
c00164ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00164b2:	56                   	push   esi
c00164b3:	e8 b8 ff ff ff       	call   c0016470 <Video::getHeight()>
c00164b8:	59                   	pop    ecx
c00164b9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00164bd:	7e 70                	jle    c001652f <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00164bf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00164c3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00164c7:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00164ca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00164ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00164d2:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00164d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00164dd:	89 f8                	mov    eax,edi
c00164df:	83 c0 20             	add    eax,0x20
c00164e2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00164e6:	56                   	push   esi
c00164e7:	e8 78 ff ff ff       	call   c0016464 <Video::getWidth()>
c00164ec:	5a                   	pop    edx
c00164ed:	39 c7                	cmp    edi,eax
c00164ef:	7d 34                	jge    c0016525 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00164f1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00164f6:	74 05                	je     c00164fd <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00164f8:	8b 06                	mov    eax,DWORD PTR [esi]
c00164fa:	55                   	push   ebp
c00164fb:	eb 0d                	jmp    c001650a <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00164fd:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016502:	74 12                	je     c0016516 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016504:	8b 06                	mov    eax,DWORD PTR [esi]
c0016506:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001650a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001650e:	57                   	push   edi
c001650f:	56                   	push   esi
c0016510:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016513:	83 c4 10             	add    esp,0x10
c0016516:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001651a:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001651e:	47                   	inc    edi
c001651f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016523:	75 c1                	jne    c00164e6 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016525:	43                   	inc    ebx
c0016526:	83 fb 20             	cmp    ebx,0x20
c0016529:	0f 85 79 ff ff ff    	jne    c00164a8 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001652f:	83 c4 2c             	add    esp,0x2c
c0016532:	5b                   	pop    ebx
c0016533:	5e                   	pop    esi
c0016534:	5f                   	pop    edi
c0016535:	5d                   	pop    ebp
c0016536:	c3                   	ret    
c0016537:	90                   	nop

c0016538 <ACPI::close(int, int, void*)>:
c0016538:	83 ec 1c             	sub    esp,0x1c
c001653b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016543:	74 0a                	je     c001654f <ACPI::close(int, int, void*)+0x17>
c0016545:	b8 00 00 00 00       	mov    eax,0x0
c001654a:	e9 9a 00 00 00       	jmp    c00165e9 <ACPI::close(int, int, void*)+0xb1>
c001654f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016554:	75 37                	jne    c001658d <ACPI::close(int, int, void*)+0x55>
c0016556:	83 ec 0c             	sub    esp,0xc
c0016559:	68 70 7a 02 c0       	push   0xc0027a70
c001655e:	e8 ec bc ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0016563:	83 c4 10             	add    esp,0x10
c0016566:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c001656b:	85 c0                	test   eax,eax
c001656d:	74 07                	je     c0016576 <ACPI::close(int, int, void*)+0x3e>
c001656f:	a1 88 aa 02 c0       	mov    eax,ds:0xc002aa88
c0016574:	ff d0                	call   eax
c0016576:	83 ec 0c             	sub    esp,0xc
c0016579:	68 24 7b 02 c0       	push   0xc0027b24
c001657e:	e8 6a 24 00 00       	call   c00189ed <Krnl::panic(char const*)>
c0016583:	83 c4 10             	add    esp,0x10
c0016586:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001658b:	eb 5c                	jmp    c00165e9 <ACPI::close(int, int, void*)+0xb1>
c001658d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016592:	75 50                	jne    c00165e4 <ACPI::close(int, int, void*)+0xac>
c0016594:	a1 84 aa 02 c0       	mov    eax,ds:0xc002aa84
c0016599:	85 c0                	test   eax,eax
c001659b:	74 07                	je     c00165a4 <ACPI::close(int, int, void*)+0x6c>
c001659d:	a1 84 aa 02 c0       	mov    eax,ds:0xc002aa84
c00165a2:	ff d0                	call   eax
c00165a4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00165a9:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00165ae:	83 e0 02             	and    eax,0x2
c00165b1:	74 1c                	je     c00165cf <ACPI::close(int, int, void*)+0x97>
c00165b3:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00165ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00165be:	89 c2                	mov    edx,eax
c00165c0:	ec                   	in     al,dx
c00165c1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00165c5:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00165c9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00165cd:	eb da                	jmp    c00165a9 <ACPI::close(int, int, void*)+0x71>
c00165cf:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00165d6:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00165db:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00165df:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00165e3:	ee                   	out    dx,al
c00165e4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165e9:	83 c4 1c             	add    esp,0x1c
c00165ec:	c3                   	ret    

c00165ed <findRSDP()>:
c00165ed:	83 ec 1c             	sub    esp,0x1c
c00165f0:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c00165f5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00165fb:	83 e0 04             	and    eax,0x4
c00165fe:	84 c0                	test   al,al
c0016600:	75 07                	jne    c0016609 <findRSDP()+0x1c>
c0016602:	b8 00 00 00 00       	mov    eax,0x0
c0016607:	eb 6a                	jmp    c0016673 <findRSDP()+0x86>
c0016609:	a1 50 a4 02 c0       	mov    eax,ds:0xc002a450
c001660e:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016613:	7f 1b                	jg     c0016630 <findRSDP()+0x43>
c0016615:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c001661a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016620:	83 e2 fb             	and    edx,0xfffffffb
c0016623:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016629:	b8 00 00 00 00       	mov    eax,0x0
c001662e:	eb 43                	jmp    c0016673 <findRSDP()+0x86>
c0016630:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016638:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016640:	77 2c                	ja     c001666e <findRSDP()+0x81>
c0016642:	83 ec 04             	sub    esp,0x4
c0016645:	6a 08                	push   0x8
c0016647:	68 7d 7a 02 c0       	push   0xc0027a7d
c001664c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016650:	e8 de 9f fe ff       	call   c0000633 <memcmp>
c0016655:	83 c4 10             	add    esp,0x10
c0016658:	85 c0                	test   eax,eax
c001665a:	0f 94 c0             	sete   al
c001665d:	84 c0                	test   al,al
c001665f:	74 06                	je     c0016667 <findRSDP()+0x7a>
c0016661:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016665:	eb 0c                	jmp    c0016673 <findRSDP()+0x86>
c0016667:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001666c:	eb ca                	jmp    c0016638 <findRSDP()+0x4b>
c001666e:	b8 00 00 00 00       	mov    eax,0x0
c0016673:	83 c4 1c             	add    esp,0x1c
c0016676:	c3                   	ret    

c0016677 <loadACPITables(unsigned char*)>:
c0016677:	56                   	push   esi
c0016678:	53                   	push   ebx
c0016679:	83 ec 44             	sub    esp,0x44
c001667c:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016681:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016687:	83 e0 04             	and    eax,0x4
c001668a:	84 c0                	test   al,al
c001668c:	0f 84 05 02 00 00    	je     c0016897 <loadACPITables(unsigned char*)+0x220>
c0016692:	a0 a0 ac 02 c0       	mov    al,ds:0xc002aca0
c0016697:	84 c0                	test   al,al
c0016699:	74 75                	je     c0016710 <loadACPITables(unsigned char*)+0x99>
c001669b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001669f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00166a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00166a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00166aa:	83 e8 24             	sub    eax,0x24
c00166ad:	c1 e8 03             	shr    eax,0x3
c00166b0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00166b4:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00166bc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00166c0:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00166c4:	0f 8d b2 00 00 00    	jge    c001677c <loadACPITables(unsigned char*)+0x105>
c00166ca:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00166ce:	83 c0 24             	add    eax,0x24
c00166d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00166d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166d9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00166dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00166e1:	c1 e0 03             	shl    eax,0x3
c00166e4:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00166e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00166ec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00166ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00166f1:	89 c1                	mov    ecx,eax
c00166f3:	a1 8c aa 02 c0       	mov    eax,ds:0xc002aa8c
c00166f8:	8d 50 01             	lea    edx,[eax+0x1]
c00166fb:	89 15 8c aa 02 c0    	mov    DWORD PTR ds:0xc002aa8c,edx
c0016701:	89 ca                	mov    edx,ecx
c0016703:	89 14 c5 a4 aa 02 c0 	mov    DWORD PTR [eax*8-0x3ffd555c],edx
c001670a:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c001670e:	eb ac                	jmp    c00166bc <loadACPITables(unsigned char*)+0x45>
c0016710:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016714:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016718:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001671c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001671f:	83 e8 24             	sub    eax,0x24
c0016722:	c1 e8 02             	shr    eax,0x2
c0016725:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016729:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016731:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016735:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016739:	7d 41                	jge    c001677c <loadACPITables(unsigned char*)+0x105>
c001673b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001673f:	83 c0 24             	add    eax,0x24
c0016742:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016746:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001674a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001674e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016752:	c1 e0 02             	shl    eax,0x2
c0016755:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016759:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001675d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001675f:	a1 8c aa 02 c0       	mov    eax,ds:0xc002aa8c
c0016764:	8d 50 01             	lea    edx,[eax+0x1]
c0016767:	89 15 8c aa 02 c0    	mov    DWORD PTR ds:0xc002aa8c,edx
c001676d:	89 ca                	mov    edx,ecx
c001676f:	89 14 c5 a4 aa 02 c0 	mov    DWORD PTR [eax*8-0x3ffd555c],edx
c0016776:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c001677a:	eb b5                	jmp    c0016731 <loadACPITables(unsigned char*)+0xba>
c001677c:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016784:	a1 8c aa 02 c0       	mov    eax,ds:0xc002aa8c
c0016789:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c001678d:	0f 8d 05 01 00 00    	jge    c0016898 <loadACPITables(unsigned char*)+0x221>
c0016793:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016797:	8b 04 c5 a4 aa 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd555c]
c001679e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167ae:	25 ff 0f 00 00       	and    eax,0xfff
c00167b3:	89 c6                	mov    esi,eax
c00167b5:	e8 53 ac ff ff       	call   c001140d <Virt::getAKernelVAS()>
c00167ba:	89 c3                	mov    ebx,eax
c00167bc:	83 ec 0c             	sub    esp,0xc
c00167bf:	6a 01                	push   0x1
c00167c1:	e8 b7 aa ff ff       	call   c001127d <Virt::allocateKernelVirtualPages(int)>
c00167c6:	83 c4 10             	add    esp,0x10
c00167c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00167d3:	83 ec 0c             	sub    esp,0xc
c00167d6:	6a 01                	push   0x1
c00167d8:	6a 01                	push   0x1
c00167da:	50                   	push   eax
c00167db:	52                   	push   edx
c00167dc:	53                   	push   ebx
c00167dd:	e8 5a b4 ff ff       	call   c0011c3c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00167e2:	83 c4 20             	add    esp,0x20
c00167e5:	09 f0                	or     eax,esi
c00167e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00167eb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00167ef:	c1 e0 03             	shl    eax,0x3
c00167f2:	05 a0 aa 02 c0       	add    eax,0xc002aaa0
c00167f7:	83 ec 04             	sub    esp,0x4
c00167fa:	6a 04                	push   0x4
c00167fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016800:	50                   	push   eax
c0016801:	e8 90 9e fe ff       	call   c0000696 <memcpy>
c0016806:	83 c4 10             	add    esp,0x10
c0016809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001680d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016810:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016814:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016818:	05 00 10 00 00       	add    eax,0x1000
c001681d:	c1 e8 0c             	shr    eax,0xc
c0016820:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016828:	89 04 24             	mov    DWORD PTR [esp],eax
c001682b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001682f:	25 ff 0f 00 00       	and    eax,0xfff
c0016834:	89 c6                	mov    esi,eax
c0016836:	e8 d2 ab ff ff       	call   c001140d <Virt::getAKernelVAS()>
c001683b:	89 c3                	mov    ebx,eax
c001683d:	83 ec 0c             	sub    esp,0xc
c0016840:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016844:	e8 34 aa ff ff       	call   c001127d <Virt::allocateKernelVirtualPages(int)>
c0016849:	83 c4 10             	add    esp,0x10
c001684c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016850:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016856:	83 ec 0c             	sub    esp,0xc
c0016859:	6a 01                	push   0x1
c001685b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001685f:	50                   	push   eax
c0016860:	52                   	push   edx
c0016861:	53                   	push   ebx
c0016862:	e8 d5 b3 ff ff       	call   c0011c3c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016867:	83 c4 20             	add    esp,0x20
c001686a:	09 f0                	or     eax,esi
c001686c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016870:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016873:	83 ec 0c             	sub    esp,0xc
c0016876:	50                   	push   eax
c0016877:	e8 5b ad ff ff       	call   c00115d7 <Virt::freeKernelVirtualPages(unsigned long)>
c001687c:	83 c4 10             	add    esp,0x10
c001687f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016883:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016887:	89 14 c5 a4 aa 02 c0 	mov    DWORD PTR [eax*8-0x3ffd555c],edx
c001688e:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0016892:	e9 ed fe ff ff       	jmp    c0016784 <loadACPITables(unsigned char*)+0x10d>
c0016897:	90                   	nop
c0016898:	83 c4 44             	add    esp,0x44
c001689b:	5b                   	pop    ebx
c001689c:	5e                   	pop    esi
c001689d:	c3                   	ret    

c001689e <findRSDT(unsigned char*)>:
c001689e:	56                   	push   esi
c001689f:	53                   	push   ebx
c00168a0:	83 ec 44             	sub    esp,0x44
c00168a3:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c00168a8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00168ae:	83 e0 04             	and    eax,0x4
c00168b1:	84 c0                	test   al,al
c00168b3:	75 0a                	jne    c00168bf <findRSDT(unsigned char*)+0x21>
c00168b5:	b8 00 00 00 00       	mov    eax,0x0
c00168ba:	e9 f7 00 00 00       	jmp    c00169b6 <findRSDT(unsigned char*)+0x118>
c00168bf:	83 ec 04             	sub    esp,0x4
c00168c2:	6a 24                	push   0x24
c00168c4:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00168c8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00168cc:	50                   	push   eax
c00168cd:	e8 c4 9d fe ff       	call   c0000696 <memcpy>
c00168d2:	83 c4 10             	add    esp,0x10
c00168d5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00168d9:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00168dd:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00168e5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00168e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00168ed:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00168f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168f5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00168f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00168fd:	25 ff 0f 00 00       	and    eax,0xfff
c0016902:	89 c6                	mov    esi,eax
c0016904:	e8 04 ab ff ff       	call   c001140d <Virt::getAKernelVAS()>
c0016909:	89 c3                	mov    ebx,eax
c001690b:	83 ec 0c             	sub    esp,0xc
c001690e:	6a 02                	push   0x2
c0016910:	e8 68 a9 ff ff       	call   c001127d <Virt::allocateKernelVirtualPages(int)>
c0016915:	83 c4 10             	add    esp,0x10
c0016918:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001691c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016922:	83 ec 0c             	sub    esp,0xc
c0016925:	6a 01                	push   0x1
c0016927:	6a 02                	push   0x2
c0016929:	50                   	push   eax
c001692a:	52                   	push   edx
c001692b:	53                   	push   ebx
c001692c:	e8 0b b3 ff ff       	call   c0011c3c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016931:	83 c4 20             	add    esp,0x20
c0016934:	09 f0                	or     eax,esi
c0016936:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001693a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001693e:	25 ff 0f 00 00       	and    eax,0xfff
c0016943:	89 c6                	mov    esi,eax
c0016945:	e8 c3 aa ff ff       	call   c001140d <Virt::getAKernelVAS()>
c001694a:	89 c3                	mov    ebx,eax
c001694c:	83 ec 0c             	sub    esp,0xc
c001694f:	6a 02                	push   0x2
c0016951:	e8 27 a9 ff ff       	call   c001127d <Virt::allocateKernelVirtualPages(int)>
c0016956:	83 c4 10             	add    esp,0x10
c0016959:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001695d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016963:	83 ec 0c             	sub    esp,0xc
c0016966:	6a 01                	push   0x1
c0016968:	6a 02                	push   0x2
c001696a:	50                   	push   eax
c001696b:	52                   	push   edx
c001696c:	53                   	push   ebx
c001696d:	e8 ca b2 ff ff       	call   c0011c3c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016972:	83 c4 20             	add    esp,0x20
c0016975:	09 f0                	or     eax,esi
c0016977:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001697b:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0016980:	75 11                	jne    c0016993 <findRSDT(unsigned char*)+0xf5>
c0016982:	c6 05 a0 ac 02 c0 00 	mov    BYTE PTR ds:0xc002aca0,0x0
c0016989:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001698d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016991:	eb 1f                	jmp    c00169b2 <findRSDT(unsigned char*)+0x114>
c0016993:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0016998:	75 11                	jne    c00169ab <findRSDT(unsigned char*)+0x10d>
c001699a:	c6 05 a0 ac 02 c0 01 	mov    BYTE PTR ds:0xc002aca0,0x1
c00169a1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00169a5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00169a9:	eb 07                	jmp    c00169b2 <findRSDT(unsigned char*)+0x114>
c00169ab:	b8 00 00 00 00       	mov    eax,0x0
c00169b0:	eb 04                	jmp    c00169b6 <findRSDT(unsigned char*)+0x118>
c00169b2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00169b6:	83 c4 44             	add    esp,0x44
c00169b9:	5b                   	pop    ebx
c00169ba:	5e                   	pop    esi
c00169bb:	c3                   	ret    

c00169bc <findDataTable(unsigned char*, char*)>:
c00169bc:	83 ec 1c             	sub    esp,0x1c
c00169bf:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c00169c4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00169ca:	83 e0 04             	and    eax,0x4
c00169cd:	84 c0                	test   al,al
c00169cf:	75 07                	jne    c00169d8 <findDataTable(unsigned char*, char*)+0x1c>
c00169d1:	b8 00 00 00 00       	mov    eax,0x0
c00169d6:	eb 7c                	jmp    c0016a54 <findDataTable(unsigned char*, char*)+0x98>
c00169d8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00169e0:	a1 8c aa 02 c0       	mov    eax,ds:0xc002aa8c
c00169e5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00169e9:	7d 3a                	jge    c0016a25 <findDataTable(unsigned char*, char*)+0x69>
c00169eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169ef:	c1 e0 03             	shl    eax,0x3
c00169f2:	05 a0 aa 02 c0       	add    eax,0xc002aaa0
c00169f7:	83 ec 04             	sub    esp,0x4
c00169fa:	6a 04                	push   0x4
c00169fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a00:	50                   	push   eax
c0016a01:	e8 2d 9c fe ff       	call   c0000633 <memcmp>
c0016a06:	83 c4 10             	add    esp,0x10
c0016a09:	85 c0                	test   eax,eax
c0016a0b:	0f 94 c0             	sete   al
c0016a0e:	84 c0                	test   al,al
c0016a10:	74 0d                	je     c0016a1f <findDataTable(unsigned char*, char*)+0x63>
c0016a12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a16:	8b 04 c5 a4 aa 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd555c]
c0016a1d:	eb 35                	jmp    c0016a54 <findDataTable(unsigned char*, char*)+0x98>
c0016a1f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016a23:	eb bb                	jmp    c00169e0 <findDataTable(unsigned char*, char*)+0x24>
c0016a25:	a0 a0 ac 02 c0       	mov    al,ds:0xc002aca0
c0016a2a:	84 c0                	test   al,al
c0016a2c:	74 07                	je     c0016a35 <findDataTable(unsigned char*, char*)+0x79>
c0016a2e:	b8 58 00 00 00       	mov    eax,0x58
c0016a33:	eb 05                	jmp    c0016a3a <findDataTable(unsigned char*, char*)+0x7e>
c0016a35:	b8 52 00 00 00       	mov    eax,0x52
c0016a3a:	83 ec 04             	sub    esp,0x4
c0016a3d:	50                   	push   eax
c0016a3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a42:	68 48 7b 02 c0       	push   0xc0027b48
c0016a47:	e8 03 b8 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0016a4c:	83 c4 10             	add    esp,0x10
c0016a4f:	b8 00 00 00 00       	mov    eax,0x0
c0016a54:	83 c4 1c             	add    esp,0x1c
c0016a57:	c3                   	ret    

c0016a58 <scanMADT()>:
c0016a58:	83 ec 2c             	sub    esp,0x2c
c0016a5b:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016a60:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016a66:	83 e0 04             	and    eax,0x4
c0016a69:	84 c0                	test   al,al
c0016a6b:	0f 84 73 03 00 00    	je     c0016de4 <scanMADT()+0x38c>
c0016a71:	e8 77 fb ff ff       	call   c00165ed <findRSDP()>
c0016a76:	a3 ac ac 02 c0       	mov    ds:0xc002acac,eax
c0016a7b:	a1 ac ac 02 c0       	mov    eax,ds:0xc002acac
c0016a80:	85 c0                	test   eax,eax
c0016a82:	75 19                	jne    c0016a9d <scanMADT()+0x45>
c0016a84:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016a89:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016a8f:	83 e2 fb             	and    edx,0xfffffffb
c0016a92:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016a98:	e9 4b 03 00 00       	jmp    c0016de8 <scanMADT()+0x390>
c0016a9d:	a1 ac ac 02 c0       	mov    eax,ds:0xc002acac
c0016aa2:	83 ec 0c             	sub    esp,0xc
c0016aa5:	50                   	push   eax
c0016aa6:	e8 f3 fd ff ff       	call   c001689e <findRSDT(unsigned char*)>
c0016aab:	83 c4 10             	add    esp,0x10
c0016aae:	a3 a8 ac 02 c0       	mov    ds:0xc002aca8,eax
c0016ab3:	a1 a8 ac 02 c0       	mov    eax,ds:0xc002aca8
c0016ab8:	85 c0                	test   eax,eax
c0016aba:	75 19                	jne    c0016ad5 <scanMADT()+0x7d>
c0016abc:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016ac1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016ac7:	83 e2 fb             	and    edx,0xfffffffb
c0016aca:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016ad0:	e9 13 03 00 00       	jmp    c0016de8 <scanMADT()+0x390>
c0016ad5:	a1 a8 ac 02 c0       	mov    eax,ds:0xc002aca8
c0016ada:	83 ec 0c             	sub    esp,0xc
c0016add:	50                   	push   eax
c0016ade:	e8 94 fb ff ff       	call   c0016677 <loadACPITables(unsigned char*)>
c0016ae3:	83 c4 10             	add    esp,0x10
c0016ae6:	a1 a8 ac 02 c0       	mov    eax,ds:0xc002aca8
c0016aeb:	83 ec 08             	sub    esp,0x8
c0016aee:	68 86 7a 02 c0       	push   0xc0027a86
c0016af3:	50                   	push   eax
c0016af4:	e8 c3 fe ff ff       	call   c00169bc <findDataTable(unsigned char*, char*)>
c0016af9:	83 c4 10             	add    esp,0x10
c0016afc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016b00:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0016b05:	75 19                	jne    c0016b20 <scanMADT()+0xc8>
c0016b07:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0016b0c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016b12:	83 e2 fe             	and    edx,0xfffffffe
c0016b15:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016b1b:	e9 c8 02 00 00       	jmp    c0016de8 <scanMADT()+0x390>
c0016b20:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016b28:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016b2f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0016b33:	0f 87 af 02 00 00    	ja     c0016de8 <scanMADT()+0x390>
c0016b39:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0016b41:	0f 87 a1 02 00 00    	ja     c0016de8 <scanMADT()+0x390>
c0016b47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b4b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b53:	8d 50 01             	lea    edx,[eax+0x1]
c0016b56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b5a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b5e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016b62:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016b66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b6a:	8d 50 01             	lea    edx,[eax+0x1]
c0016b6d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b71:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016b75:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016b79:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0016b7d:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0016b82:	0f 86 5f 02 00 00    	jbe    c0016de7 <scanMADT()+0x38f>
c0016b88:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0016b8d:	75 57                	jne    c0016be6 <scanMADT()+0x18e>
c0016b8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b93:	8d 50 01             	lea    edx,[eax+0x1]
c0016b96:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016b9a:	8a 15 e0 ad 02 c0    	mov    dl,BYTE PTR ds:0xc002ade0
c0016ba0:	0f b6 d2             	movzx  edx,dl
c0016ba3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016ba7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016bab:	88 82 20 ae 02 c0    	mov    BYTE PTR [edx-0x3ffd51e0],al
c0016bb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bb5:	8d 50 01             	lea    edx,[eax+0x1]
c0016bb8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016bbc:	8a 15 e0 ad 02 c0    	mov    dl,BYTE PTR ds:0xc002ade0
c0016bc2:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016bc5:	88 0d e0 ad 02 c0    	mov    BYTE PTR ds:0xc002ade0,cl
c0016bcb:	0f b6 d2             	movzx  edx,dl
c0016bce:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016bd2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016bd6:	88 82 00 ae 02 c0    	mov    BYTE PTR [edx-0x3ffd5200],al
c0016bdc:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016be1:	e9 ea 01 00 00       	jmp    c0016dd0 <scanMADT()+0x378>
c0016be6:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0016beb:	0f 85 14 01 00 00    	jne    c0016d05 <scanMADT()+0x2ad>
c0016bf1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bf5:	8d 50 01             	lea    edx,[eax+0x1]
c0016bf8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016bfc:	8a 15 b0 ac 02 c0    	mov    dl,BYTE PTR ds:0xc002acb0
c0016c02:	0f b6 d2             	movzx  edx,dl
c0016c05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016c09:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016c0d:	88 82 c0 ac 02 c0    	mov    BYTE PTR [edx-0x3ffd5340],al
c0016c13:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0016c17:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016c1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c1f:	01 d0                	add    eax,edx
c0016c21:	83 c0 2c             	add    eax,0x2c
c0016c24:	8a 00                	mov    al,BYTE PTR [eax]
c0016c26:	0f b6 d0             	movzx  edx,al
c0016c29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c2d:	8d 48 01             	lea    ecx,[eax+0x1]
c0016c30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c34:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016c38:	0f b6 c0             	movzx  eax,al
c0016c3b:	c1 e0 08             	shl    eax,0x8
c0016c3e:	89 d1                	mov    ecx,edx
c0016c40:	09 c1                	or     ecx,eax
c0016c42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c46:	8d 50 02             	lea    edx,[eax+0x2]
c0016c49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c4d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c51:	0f b6 c0             	movzx  eax,al
c0016c54:	c1 e0 10             	shl    eax,0x10
c0016c57:	09 c1                	or     ecx,eax
c0016c59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c5d:	8d 50 03             	lea    edx,[eax+0x3]
c0016c60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c64:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016c68:	0f b6 c0             	movzx  eax,al
c0016c6b:	c1 e0 18             	shl    eax,0x18
c0016c6e:	09 c1                	or     ecx,eax
c0016c70:	89 ca                	mov    edx,ecx
c0016c72:	a0 b0 ac 02 c0       	mov    al,ds:0xc002acb0
c0016c77:	0f b6 c0             	movzx  eax,al
c0016c7a:	89 14 85 e0 ac 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5320],edx
c0016c81:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016c86:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016c8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c8e:	01 d0                	add    eax,edx
c0016c90:	83 c0 2c             	add    eax,0x2c
c0016c93:	8a 00                	mov    al,BYTE PTR [eax]
c0016c95:	0f b6 d0             	movzx  edx,al
c0016c98:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c9c:	8d 48 01             	lea    ecx,[eax+0x1]
c0016c9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016ca3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016ca7:	0f b6 c0             	movzx  eax,al
c0016caa:	c1 e0 08             	shl    eax,0x8
c0016cad:	89 d1                	mov    ecx,edx
c0016caf:	09 c1                	or     ecx,eax
c0016cb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cb5:	8d 50 02             	lea    edx,[eax+0x2]
c0016cb8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016cbc:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016cc0:	0f b6 c0             	movzx  eax,al
c0016cc3:	c1 e0 10             	shl    eax,0x10
c0016cc6:	09 c1                	or     ecx,eax
c0016cc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ccc:	8d 50 03             	lea    edx,[eax+0x3]
c0016ccf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016cd3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016cd7:	0f b6 c0             	movzx  eax,al
c0016cda:	c1 e0 18             	shl    eax,0x18
c0016cdd:	09 c1                	or     ecx,eax
c0016cdf:	89 ca                	mov    edx,ecx
c0016ce1:	a0 b0 ac 02 c0       	mov    al,ds:0xc002acb0
c0016ce6:	0f b6 c0             	movzx  eax,al
c0016ce9:	89 14 85 60 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd52a0],edx
c0016cf0:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016cf5:	a0 b0 ac 02 c0       	mov    al,ds:0xc002acb0
c0016cfa:	40                   	inc    eax
c0016cfb:	a2 b0 ac 02 c0       	mov    ds:0xc002acb0,al
c0016d00:	e9 cb 00 00 00       	jmp    c0016dd0 <scanMADT()+0x378>
c0016d05:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0016d0a:	0f 85 a6 00 00 00    	jne    c0016db6 <scanMADT()+0x35e>
c0016d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d14:	8d 50 01             	lea    edx,[eax+0x1]
c0016d17:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016d1b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016d1f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016d23:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016d27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d2b:	8d 50 01             	lea    edx,[eax+0x1]
c0016d2e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016d32:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016d36:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016d3a:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016d3e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016d42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d46:	01 d0                	add    eax,edx
c0016d48:	83 c0 2c             	add    eax,0x2c
c0016d4b:	8a 00                	mov    al,BYTE PTR [eax]
c0016d4d:	0f b6 d0             	movzx  edx,al
c0016d50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d54:	8d 48 01             	lea    ecx,[eax+0x1]
c0016d57:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d5b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016d5f:	0f b6 c0             	movzx  eax,al
c0016d62:	c1 e0 08             	shl    eax,0x8
c0016d65:	89 d1                	mov    ecx,edx
c0016d67:	09 c1                	or     ecx,eax
c0016d69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d6d:	8d 50 02             	lea    edx,[eax+0x2]
c0016d70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d74:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016d78:	0f b6 c0             	movzx  eax,al
c0016d7b:	c1 e0 10             	shl    eax,0x10
c0016d7e:	09 c1                	or     ecx,eax
c0016d80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d84:	8d 50 03             	lea    edx,[eax+0x3]
c0016d87:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d8b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016d8f:	0f b6 c0             	movzx  eax,al
c0016d92:	c1 e0 18             	shl    eax,0x18
c0016d95:	09 c8                	or     eax,ecx
c0016d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d9b:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016da0:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0016da5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016daa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016dae:	88 90 e0 96 02 c0    	mov    BYTE PTR [eax-0x3ffd6920],dl
c0016db4:	eb 1a                	jmp    c0016dd0 <scanMADT()+0x378>
c0016db6:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0016dbb:	75 07                	jne    c0016dc4 <scanMADT()+0x36c>
c0016dbd:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0016dc2:	eb 0c                	jmp    c0016dd0 <scanMADT()+0x378>
c0016dc4:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0016dc9:	75 05                	jne    c0016dd0 <scanMADT()+0x378>
c0016dcb:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0016dd0:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0016dd5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016dd9:	01 d0                	add    eax,edx
c0016ddb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ddf:	e9 44 fd ff ff       	jmp    c0016b28 <scanMADT()+0xd0>
c0016de4:	90                   	nop
c0016de5:	eb 01                	jmp    c0016de8 <scanMADT()+0x390>
c0016de7:	90                   	nop
c0016de8:	83 c4 2c             	add    esp,0x2c
c0016deb:	c3                   	ret    

c0016dec <ACPI::ACPI()>:
c0016dec:	83 ec 0c             	sub    esp,0xc
c0016def:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016df3:	83 ec 08             	sub    esp,0x8
c0016df6:	68 8b 7a 02 c0       	push   0xc0027a8b
c0016dfb:	50                   	push   eax
c0016dfc:	e8 49 ca ff ff       	call   c001384a <Device::Device(char const*)>
c0016e01:	83 c4 10             	add    esp,0x10
c0016e04:	ba 14 7c 02 c0       	mov    edx,0xc0027c14
c0016e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e0d:	89 10                	mov    DWORD PTR [eax],edx
c0016e0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e13:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0016e1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e1e:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0016e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e2c:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0016e36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e3a:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0016e41:	e8 12 fc ff ff       	call   c0016a58 <scanMADT()>
c0016e46:	90                   	nop
c0016e47:	83 c4 0c             	add    esp,0xc
c0016e4a:	c3                   	ret    
c0016e4b:	90                   	nop

c0016e4c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0016e4c:	83 ec 2c             	sub    esp,0x2c
c0016e4f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016e53:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016e57:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0016e5b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016e5f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0016e64:	88 d0                	mov    al,dl
c0016e66:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016e6a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0016e6f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016e77:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e7b:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016e81:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0016e85:	0f 8d 97 00 00 00    	jge    c0016f22 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0016e8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e8f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016e93:	83 c2 2a             	add    edx,0x2a
c0016e96:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0016e9a:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0016e9f:	75 78                	jne    c0016f19 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016ea1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ea5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ea9:	83 c2 2a             	add    edx,0x2a
c0016eac:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0016eb0:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0016eb4:	75 63                	jne    c0016f19 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0016eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016ebb:	74 3a                	je     c0016ef7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0016ebd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ec1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ec5:	83 c2 2a             	add    edx,0x2a
c0016ec8:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0016ecc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ed0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016ed3:	39 c2                	cmp    edx,eax
c0016ed5:	74 10                	je     c0016ee7 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0016ed7:	83 ec 0c             	sub    esp,0xc
c0016eda:	68 78 7b 02 c0       	push   0xc0027b78
c0016edf:	e8 09 1b 00 00       	call   c00189ed <Krnl::panic(char const*)>
c0016ee4:	83 c4 10             	add    esp,0x10
c0016ee7:	83 ec 0c             	sub    esp,0xc
c0016eea:	68 90 7a 02 c0       	push   0xc0027a90
c0016eef:	e8 f9 1a 00 00       	call   c00189ed <Krnl::panic(char const*)>
c0016ef4:	83 c4 10             	add    esp,0x10
c0016ef7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016efb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016eff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016f03:	83 c2 2a             	add    edx,0x2a
c0016f06:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0016f0a:	8b 02                	mov    eax,DWORD PTR [edx]
c0016f0c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0016f0f:	89 01                	mov    DWORD PTR [ecx],eax
c0016f11:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016f14:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0016f19:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0016f1d:	e9 55 ff ff ff       	jmp    c0016e77 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0016f22:	90                   	nop
c0016f23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f27:	83 c4 2c             	add    esp,0x2c
c0016f2a:	c2 04 00             	ret    0x4
c0016f2d:	90                   	nop

c0016f2e <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0016f2e:	56                   	push   esi
c0016f2f:	53                   	push   ebx
c0016f30:	83 ec 14             	sub    esp,0x14
c0016f33:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f37:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016f3b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016f3f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0016f44:	88 c8                	mov    al,cl
c0016f46:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016f4a:	88 d0                	mov    al,dl
c0016f4c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016f50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f54:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0016f5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f5e:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0016f64:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0016f69:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0016f6e:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0016f73:	83 ec 04             	sub    esp,0x4
c0016f76:	56                   	push   esi
c0016f77:	53                   	push   ebx
c0016f78:	51                   	push   ecx
c0016f79:	52                   	push   edx
c0016f7a:	50                   	push   eax
c0016f7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016f7f:	68 a8 7b 02 c0       	push   0xc0027ba8
c0016f84:	e8 c6 b2 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0016f89:	83 c4 20             	add    esp,0x20
c0016f8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f90:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016f96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f9a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0016f9d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0016fa1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0016fa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fa9:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016faf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016fb3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0016fb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016fba:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0016fbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fc3:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016fc9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0016fcd:	8d 48 01             	lea    ecx,[eax+0x1]
c0016fd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd4:	83 c2 2a             	add    edx,0x2a
c0016fd7:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0016fdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fdf:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0016fe5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fe9:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0016fec:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016ff0:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0016ff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ff8:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016ffe:	8d 50 01             	lea    edx,[eax+0x1]
c0017001:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017005:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c001700b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001700f:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017015:	3d 00 08 00 00       	cmp    eax,0x800
c001701a:	75 10                	jne    c001702c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c001701c:	83 ec 0c             	sub    esp,0xc
c001701f:	68 9f 7a 02 c0       	push   0xc0027a9f
c0017024:	e8 c4 19 00 00       	call   c00189ed <Krnl::panic(char const*)>
c0017029:	83 c4 10             	add    esp,0x10
c001702c:	90                   	nop
c001702d:	83 c4 14             	add    esp,0x14
c0017030:	5b                   	pop    ebx
c0017031:	5e                   	pop    esi
c0017032:	c3                   	ret    
c0017033:	90                   	nop

c0017034 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017034:	b8 00 00 00 00       	mov    eax,0x0
c0017039:	c3                   	ret    

c001703a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001703a:	83 ec 1c             	sub    esp,0x1c
c001703d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017041:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017044:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017048:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c001704d:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017052:	83 ec 08             	sub    esp,0x8
c0017055:	52                   	push   edx
c0017056:	50                   	push   eax
c0017057:	e8 fa 76 ff ff       	call   c000e756 <Computer::readCMOS(unsigned char)>
c001705c:	83 c4 10             	add    esp,0x10
c001705f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017063:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0017068:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001706d:	83 ec 04             	sub    esp,0x4
c0017070:	6a 01                	push   0x1
c0017072:	52                   	push   edx
c0017073:	50                   	push   eax
c0017074:	e8 f3 77 ff ff       	call   c000e86c <Computer::writeCMOS(unsigned char, unsigned char)>
c0017079:	83 c4 10             	add    esp,0x10
c001707c:	90                   	nop
c001707d:	83 c4 1c             	add    esp,0x1c
c0017080:	c3                   	ret    
c0017081:	90                   	nop

c0017082 <ACPI::open(int, int, void*)>:
c0017082:	53                   	push   ebx
c0017083:	83 ec 18             	sub    esp,0x18
c0017086:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001708a:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017091:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017095:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c001709b:	84 c0                	test   al,al
c001709d:	74 60                	je     c00170ff <ACPI::open(int, int, void*)+0x7d>
c001709f:	83 ec 0c             	sub    esp,0xc
c00170a2:	68 58 01 00 00       	push   0x158
c00170a7:	e8 b4 b0 ff ff       	call   c0012160 <operator new(unsigned long)>
c00170ac:	83 c4 10             	add    esp,0x10
c00170af:	89 c3                	mov    ebx,eax
c00170b1:	83 ec 0c             	sub    esp,0xc
c00170b4:	53                   	push   ebx
c00170b5:	e8 12 90 00 00       	call   c00200cc <PCI::PCI()>
c00170ba:	83 c4 10             	add    esp,0x10
c00170bd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00170c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c5:	83 ec 08             	sub    esp,0x8
c00170c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00170cc:	50                   	push   eax
c00170cd:	e8 88 c5 ff ff       	call   c001365a <Device::addChild(Device*)>
c00170d2:	83 c4 10             	add    esp,0x10
c00170d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00170db:	83 c0 08             	add    eax,0x8
c00170de:	8b 00                	mov    eax,DWORD PTR [eax]
c00170e0:	6a 00                	push   0x0
c00170e2:	6a 00                	push   0x0
c00170e4:	6a 00                	push   0x0
c00170e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170ea:	ff d0                	call   eax
c00170ec:	83 c4 10             	add    esp,0x10
c00170ef:	83 ec 0c             	sub    esp,0xc
c00170f2:	68 bc 7a 02 c0       	push   0xc0027abc
c00170f7:	e8 53 b1 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00170fc:	83 c4 10             	add    esp,0x10
c00170ff:	83 ec 0c             	sub    esp,0xc
c0017102:	68 c7 7a 02 c0       	push   0xc0027ac7
c0017107:	e8 82 37 00 00       	call   c001a88e <Thr::loadKernelSymbolTable(char const*)>
c001710c:	83 c4 10             	add    esp,0x10
c001710f:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c0017115:	83 ec 08             	sub    esp,0x8
c0017118:	6a 01                	push   0x1
c001711a:	68 e5 7a 02 c0       	push   0xc0027ae5
c001711f:	e8 4c 42 00 00       	call   c001b370 <Thr::loadDLL(char const*, bool)>
c0017124:	83 c4 10             	add    esp,0x10
c0017127:	83 ec 08             	sub    esp,0x8
c001712a:	53                   	push   ebx
c001712b:	50                   	push   eax
c001712c:	e8 05 44 00 00       	call   c001b536 <Thr::executeDLL(unsigned long, void*)>
c0017131:	83 c4 10             	add    esp,0x10
c0017134:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0017139:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001713f:	83 e0 04             	and    eax,0x4
c0017142:	84 c0                	test   al,al
c0017144:	0f 84 cf 00 00 00    	je     c0017219 <ACPI::open(int, int, void*)+0x197>
c001714a:	83 ec 0c             	sub    esp,0xc
c001714d:	68 14 01 00 00       	push   0x114
c0017152:	e8 09 b0 ff ff       	call   c0012160 <operator new(unsigned long)>
c0017157:	83 c4 10             	add    esp,0x10
c001715a:	89 c3                	mov    ebx,eax
c001715c:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0017161:	83 ec 04             	sub    esp,0x4
c0017164:	50                   	push   eax
c0017165:	68 02 7b 02 c0       	push   0xc0027b02
c001716a:	53                   	push   ebx
c001716b:	e8 0e b6 ff ff       	call   c001277e <File::File(char const*, Process*)>
c0017170:	83 c4 10             	add    esp,0x10
c0017173:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017177:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001717c:	74 17                	je     c0017195 <ACPI::open(int, int, void*)+0x113>
c001717e:	83 ec 0c             	sub    esp,0xc
c0017181:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017185:	e8 c6 b8 ff ff       	call   c0012a50 <File::exists()>
c001718a:	83 c4 10             	add    esp,0x10
c001718d:	84 c0                	test   al,al
c001718f:	74 04                	je     c0017195 <ACPI::open(int, int, void*)+0x113>
c0017191:	b0 01                	mov    al,0x1
c0017193:	eb 02                	jmp    c0017197 <ACPI::open(int, int, void*)+0x115>
c0017195:	b0 00                	mov    al,0x0
c0017197:	84 c0                	test   al,al
c0017199:	74 25                	je     c00171c0 <ACPI::open(int, int, void*)+0x13e>
c001719b:	8b 1d 08 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a408
c00171a1:	83 ec 08             	sub    esp,0x8
c00171a4:	6a 01                	push   0x1
c00171a6:	68 02 7b 02 c0       	push   0xc0027b02
c00171ab:	e8 c0 41 00 00       	call   c001b370 <Thr::loadDLL(char const*, bool)>
c00171b0:	83 c4 10             	add    esp,0x10
c00171b3:	83 ec 08             	sub    esp,0x8
c00171b6:	53                   	push   ebx
c00171b7:	50                   	push   eax
c00171b8:	e8 79 43 00 00       	call   c001b536 <Thr::executeDLL(unsigned long, void*)>
c00171bd:	83 c4 10             	add    esp,0x10
c00171c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00171c5:	74 1e                	je     c00171e5 <ACPI::open(int, int, void*)+0x163>
c00171c7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00171cc:	74 17                	je     c00171e5 <ACPI::open(int, int, void*)+0x163>
c00171ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00171d4:	83 c0 08             	add    eax,0x8
c00171d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00171d9:	83 ec 0c             	sub    esp,0xc
c00171dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00171e0:	ff d0                	call   eax
c00171e2:	83 c4 10             	add    esp,0x10
c00171e5:	a1 a8 ac 02 c0       	mov    eax,ds:0xc002aca8
c00171ea:	83 ec 08             	sub    esp,0x8
c00171ed:	68 1f 7b 02 c0       	push   0xc0027b1f
c00171f2:	50                   	push   eax
c00171f3:	e8 c4 f7 ff ff       	call   c00169bc <findDataTable(unsigned char*, char*)>
c00171f8:	83 c4 10             	add    esp,0x10
c00171fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00171ff:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0017204:	74 13                	je     c0017219 <ACPI::open(int, int, void*)+0x197>
c0017206:	83 ec 08             	sub    esp,0x8
c0017209:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001720d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017211:	e8 24 fe ff ff       	call   c001703a <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017216:	83 c4 10             	add    esp,0x10
c0017219:	b8 00 00 00 00       	mov    eax,0x0
c001721e:	83 c4 18             	add    esp,0x18
c0017221:	5b                   	pop    ebx
c0017222:	c3                   	ret    
c0017223:	90                   	nop

c0017224 <ACPI::sleep()>:
c0017224:	83 ec 0c             	sub    esp,0xc
c0017227:	a1 80 aa 02 c0       	mov    eax,ds:0xc002aa80
c001722c:	85 c0                	test   eax,eax
c001722e:	74 07                	je     c0017237 <ACPI::sleep()+0x13>
c0017230:	a1 80 aa 02 c0       	mov    eax,ds:0xc002aa80
c0017235:	ff d0                	call   eax
c0017237:	90                   	nop
c0017238:	83 c4 0c             	add    esp,0xc
c001723b:	c3                   	ret    

c001723c <CPU::close(int, int, void*)>:
c001723c:	31 c0                	xor    eax,eax
c001723e:	c3                   	ret    
c001723f:	90                   	nop

c0017240 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017240:	55                   	push   ebp
c0017241:	57                   	push   edi
c0017242:	56                   	push   esi
c0017243:	53                   	push   ebx
c0017244:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017248:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001724c:	89 ce                	mov    esi,ecx
c001724e:	89 d5                	mov    ebp,edx
c0017250:	80 f9 04             	cmp    cl,0x4
c0017253:	75 28                	jne    c001727d <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017255:	8d 42 f9             	lea    eax,[edx-0x7]
c0017258:	3c 03                	cmp    al,0x3
c001725a:	0f 86 63 01 00 00    	jbe    c00173c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017260:	80 fa 03             	cmp    dl,0x3
c0017263:	0f 84 5a 01 00 00    	je     c00173c3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017269:	8d 7a f2             	lea    edi,[edx-0xe]
c001726c:	b8 b0 98 02 c0       	mov    eax,0xc00298b0
c0017271:	89 fb                	mov    ebx,edi
c0017273:	80 fb 01             	cmp    bl,0x1
c0017276:	77 4e                	ja     c00172c6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017278:	e9 52 01 00 00       	jmp    c00173cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001727d:	80 f9 05             	cmp    cl,0x5
c0017280:	75 4d                	jne    c00172cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017282:	b8 c0 98 02 c0       	mov    eax,0xc00298c0
c0017287:	80 fa 03             	cmp    dl,0x3
c001728a:	0f 86 3f 01 00 00    	jbe    c00173cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017290:	8d 7a fa             	lea    edi,[edx-0x6]
c0017293:	b8 d0 98 02 c0       	mov    eax,0xc00298d0
c0017298:	89 fb                	mov    ebx,edi
c001729a:	80 fb 01             	cmp    bl,0x1
c001729d:	0f 86 2c 01 00 00    	jbe    c00173cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00172a3:	b8 e0 98 02 c0       	mov    eax,0xc00298e0
c00172a8:	80 fa 08             	cmp    dl,0x8
c00172ab:	0f 84 1e 01 00 00    	je     c00173cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00172b1:	89 d7                	mov    edi,edx
c00172b3:	b8 f0 98 02 c0       	mov    eax,0xc00298f0
c00172b8:	83 e7 fb             	and    edi,0xfffffffb
c00172bb:	89 fb                	mov    ebx,edi
c00172bd:	80 fb 09             	cmp    bl,0x9
c00172c0:	0f 84 09 01 00 00    	je     c00173cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00172c6:	31 c0                	xor    eax,eax
c00172c8:	89 eb                	mov    ebx,ebp
c00172ca:	0f b6 fb             	movzx  edi,bl
c00172cd:	eb 30                	jmp    c00172ff <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00172cf:	31 c0                	xor    eax,eax
c00172d1:	80 f9 06             	cmp    cl,0x6
c00172d4:	75 f2                	jne    c00172c8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00172d6:	80 fa 0a             	cmp    dl,0xa
c00172d9:	77 ed                	ja     c00172c8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00172db:	bf de 05 00 00       	mov    edi,0x5de
c00172e0:	0f a3 d7             	bt     edi,edx
c00172e3:	73 e3                	jae    c00172c8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00172e5:	b8 00 99 02 c0       	mov    eax,0xc0029900
c00172ea:	e9 e0 00 00 00       	jmp    c00173cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00172ef:	39 c7                	cmp    edi,eax
c00172f1:	0f 84 d3 00 00 00    	je     c00173ca <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00172f7:	40                   	inc    eax
c00172f8:	3d d0 00 00 00       	cmp    eax,0xd0
c00172fd:	74 09                	je     c0017308 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00172ff:	89 f3                	mov    ebx,esi
c0017301:	80 fb 0f             	cmp    bl,0xf
c0017304:	75 f1                	jne    c00172f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017306:	eb e7                	jmp    c00172ef <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017308:	80 f9 10             	cmp    cl,0x10
c001730b:	75 14                	jne    c0017321 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001730d:	8d 42 fc             	lea    eax,[edx-0x4]
c0017310:	83 e0 fb             	and    eax,0xfffffffb
c0017313:	3c 02                	cmp    al,0x2
c0017315:	76 34                	jbe    c001734b <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017317:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c001731c:	80 fa 02             	cmp    dl,0x2
c001731f:	eb 24                	jmp    c0017345 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017321:	80 f9 11             	cmp    cl,0x11
c0017324:	75 13                	jne    c0017339 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017326:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c001732b:	80 fa 03             	cmp    dl,0x3
c001732e:	0f 85 9b 00 00 00    	jne    c00173cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017334:	e9 91 00 00 00       	jmp    c00173ca <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017339:	80 f9 12             	cmp    cl,0x12
c001733c:	75 14                	jne    c0017352 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001733e:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c0017343:	fe ca                	dec    dl
c0017345:	0f 85 84 00 00 00    	jne    c00173cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001734b:	b8 20 99 02 c0       	mov    eax,0xc0029920
c0017350:	eb 7d                	jmp    c00173cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017352:	80 f9 14             	cmp    cl,0x14
c0017355:	75 12                	jne    c0017369 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017357:	4a                   	dec    edx
c0017358:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c001735d:	80 fa 01             	cmp    dl,0x1
c0017360:	77 6d                	ja     c00173cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017362:	b8 30 99 02 c0       	mov    eax,0xc0029930
c0017367:	eb 66                	jmp    c00173cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017369:	80 f9 15             	cmp    cl,0x15
c001736c:	75 31                	jne    c001739f <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001736e:	b8 40 99 02 c0       	mov    eax,0xc0029940
c0017373:	80 fa 01             	cmp    dl,0x1
c0017376:	74 57                	je     c00173cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017378:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c001737d:	80 fa 13             	cmp    dl,0x13
c0017380:	76 0c                	jbe    c001738e <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0017382:	80 fa 30             	cmp    dl,0x30
c0017385:	75 48                	jne    c00173cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017387:	b8 60 99 02 c0       	mov    eax,0xc0029960
c001738c:	eb 41                	jmp    c00173cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001738e:	b9 04 00 09 00       	mov    ecx,0x90004
c0017393:	0f a3 d1             	bt     ecx,edx
c0017396:	73 37                	jae    c00173cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017398:	b8 50 99 02 c0       	mov    eax,0xc0029950
c001739d:	eb 30                	jmp    c00173cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001739f:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c00173a4:	80 f9 16             	cmp    cl,0x16
c00173a7:	75 26                	jne    c00173cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173a9:	b8 70 99 02 c0       	mov    eax,0xc0029970
c00173ae:	84 d2                	test   dl,dl
c00173b0:	74 1d                	je     c00173cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173b2:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c00173b7:	80 fa 30             	cmp    dl,0x30
c00173ba:	75 13                	jne    c00173cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173bc:	b8 80 99 02 c0       	mov    eax,0xc0029980
c00173c1:	eb 0c                	jmp    c00173cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173c3:	b8 a0 98 02 c0       	mov    eax,0xc00298a0
c00173c8:	eb 05                	jmp    c00173cf <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00173ca:	b8 10 99 02 c0       	mov    eax,0xc0029910
c00173cf:	5b                   	pop    ebx
c00173d0:	5e                   	pop    esi
c00173d1:	5f                   	pop    edi
c00173d2:	5d                   	pop    ebp
c00173d3:	c3                   	ret    

c00173d4 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00173d4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00173d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00173dc:	80 f9 04             	cmp    cl,0x4
c00173df:	75 6b                	jne    c001744c <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00173e1:	b8 00 97 02 c0       	mov    eax,0xc0029700
c00173e6:	80 fa 01             	cmp    dl,0x1
c00173e9:	0f 86 92 02 00 00    	jbe    c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00173ef:	b8 10 97 02 c0       	mov    eax,0xc0029710
c00173f4:	80 fa 02             	cmp    dl,0x2
c00173f7:	0f 84 84 02 00 00    	je     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00173fd:	b8 20 97 02 c0       	mov    eax,0xc0029720
c0017402:	80 fa 03             	cmp    dl,0x3
c0017405:	0f 84 76 02 00 00    	je     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001740b:	b8 30 97 02 c0       	mov    eax,0xc0029730
c0017410:	80 fa 04             	cmp    dl,0x4
c0017413:	0f 84 68 02 00 00    	je     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017419:	b8 40 97 02 c0       	mov    eax,0xc0029740
c001741e:	80 fa 05             	cmp    dl,0x5
c0017421:	0f 84 5a 02 00 00    	je     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017427:	b8 20 97 02 c0       	mov    eax,0xc0029720
c001742c:	80 fa 07             	cmp    dl,0x7
c001742f:	0f 84 4c 02 00 00    	je     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017435:	83 ea 08             	sub    edx,0x8
c0017438:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c001743d:	80 fa 01             	cmp    dl,0x1
c0017440:	0f 87 3b 02 00 00    	ja     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017446:	b8 50 97 02 c0       	mov    eax,0xc0029750
c001744b:	c3                   	ret    
c001744c:	80 f9 05             	cmp    cl,0x5
c001744f:	75 45                	jne    c0017496 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017451:	8d 4a ff             	lea    ecx,[edx-0x1]
c0017454:	b8 60 97 02 c0       	mov    eax,0xc0029760
c0017459:	80 f9 02             	cmp    cl,0x2
c001745c:	0f 86 1f 02 00 00    	jbe    c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017462:	80 fa 04             	cmp    dl,0x4
c0017465:	0f 84 f3 01 00 00    	je     c001765e <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001746b:	80 fa 07             	cmp    dl,0x7
c001746e:	0f 84 0d 02 00 00    	je     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017474:	b8 70 97 02 c0       	mov    eax,0xc0029770
c0017479:	80 fa 08             	cmp    dl,0x8
c001747c:	0f 84 ff 01 00 00    	je     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017482:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c0017487:	80 fa 09             	cmp    dl,0x9
c001748a:	0f 85 f1 01 00 00    	jne    c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017490:	b8 80 97 02 c0       	mov    eax,0xc0029780
c0017495:	c3                   	ret    
c0017496:	80 f9 06             	cmp    cl,0x6
c0017499:	0f 85 85 01 00 00    	jne    c0017624 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c001749f:	b8 90 97 02 c0       	mov    eax,0xc0029790
c00174a4:	80 fa 01             	cmp    dl,0x1
c00174a7:	0f 84 d4 01 00 00    	je     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174ad:	8d 42 fb             	lea    eax,[edx-0x5]
c00174b0:	3c 01                	cmp    al,0x1
c00174b2:	0f 86 ac 01 00 00    	jbe    c0017664 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00174b8:	80 fa 03             	cmp    dl,0x3
c00174bb:	0f 84 a3 01 00 00    	je     c0017664 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00174c1:	8d 4a f9             	lea    ecx,[edx-0x7]
c00174c4:	b8 b0 97 02 c0       	mov    eax,0xc00297b0
c00174c9:	80 f9 01             	cmp    cl,0x1
c00174cc:	0f 86 af 01 00 00    	jbe    c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174d2:	80 fa 09             	cmp    dl,0x9
c00174d5:	0f 84 8f 01 00 00    	je     c001766a <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c00174db:	8d 4a f6             	lea    ecx,[edx-0xa]
c00174de:	80 f9 01             	cmp    cl,0x1
c00174e1:	0f 86 9a 01 00 00    	jbe    c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174e7:	b8 c0 97 02 c0       	mov    eax,0xc00297c0
c00174ec:	80 fa 0d             	cmp    dl,0xd
c00174ef:	0f 84 8c 01 00 00    	je     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00174f5:	b8 d0 97 02 c0       	mov    eax,0xc00297d0
c00174fa:	80 fa 0e             	cmp    dl,0xe
c00174fd:	0f 84 7e 01 00 00    	je     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017503:	b8 e0 97 02 c0       	mov    eax,0xc00297e0
c0017508:	80 fa 0f             	cmp    dl,0xf
c001750b:	0f 84 70 01 00 00    	je     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017511:	b8 c0 97 02 c0       	mov    eax,0xc00297c0
c0017516:	80 fa 15             	cmp    dl,0x15
c0017519:	0f 84 62 01 00 00    	je     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001751f:	8d 4a ea             	lea    ecx,[edx-0x16]
c0017522:	b8 e0 97 02 c0       	mov    eax,0xc00297e0
c0017527:	80 f9 01             	cmp    cl,0x1
c001752a:	0f 86 51 01 00 00    	jbe    c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017530:	80 fa 1a             	cmp    dl,0x1a
c0017533:	0f 84 37 01 00 00    	je     c0017670 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0017539:	80 fa 1c             	cmp    dl,0x1c
c001753c:	0f 84 34 01 00 00    	je     c0017676 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0017542:	80 fa 1d             	cmp    dl,0x1d
c0017545:	0f 84 36 01 00 00    	je     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001754b:	b8 10 98 02 c0       	mov    eax,0xc0029810
c0017550:	80 fa 25             	cmp    dl,0x25
c0017553:	0f 84 28 01 00 00    	je     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017559:	8d 4a da             	lea    ecx,[edx-0x26]
c001755c:	b8 00 98 02 c0       	mov    eax,0xc0029800
c0017561:	80 f9 01             	cmp    cl,0x1
c0017564:	0f 86 17 01 00 00    	jbe    c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001756a:	b8 20 98 02 c0       	mov    eax,0xc0029820
c001756f:	80 fa 2a             	cmp    dl,0x2a
c0017572:	0f 84 09 01 00 00    	je     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017578:	b8 10 98 02 c0       	mov    eax,0xc0029810
c001757d:	80 fa 2c             	cmp    dl,0x2c
c0017580:	0f 84 fb 00 00 00    	je     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017586:	b8 20 98 02 c0       	mov    eax,0xc0029820
c001758b:	80 fa 2d             	cmp    dl,0x2d
c001758e:	0f 84 ed 00 00 00    	je     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017594:	b8 f0 97 02 c0       	mov    eax,0xc00297f0
c0017599:	80 fa 2e             	cmp    dl,0x2e
c001759c:	0f 84 df 00 00 00    	je     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175a2:	b8 10 98 02 c0       	mov    eax,0xc0029810
c00175a7:	80 fa 2f             	cmp    dl,0x2f
c00175aa:	0f 84 d1 00 00 00    	je     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175b0:	8d 4a cb             	lea    ecx,[edx-0x35]
c00175b3:	b8 00 98 02 c0       	mov    eax,0xc0029800
c00175b8:	80 f9 01             	cmp    cl,0x1
c00175bb:	0f 86 c0 00 00 00    	jbe    c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175c1:	b8 30 98 02 c0       	mov    eax,0xc0029830
c00175c6:	80 fa 37             	cmp    dl,0x37
c00175c9:	0f 84 b2 00 00 00    	je     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175cf:	b8 40 98 02 c0       	mov    eax,0xc0029840
c00175d4:	80 fa 3a             	cmp    dl,0x3a
c00175d7:	0f 84 a4 00 00 00    	je     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175dd:	b8 50 98 02 c0       	mov    eax,0xc0029850
c00175e2:	80 fa 3c             	cmp    dl,0x3c
c00175e5:	0f 84 96 00 00 00    	je     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175eb:	b8 60 98 02 c0       	mov    eax,0xc0029860
c00175f0:	80 fa 3d             	cmp    dl,0x3d
c00175f3:	0f 84 88 00 00 00    	je     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00175f9:	b8 40 98 02 c0       	mov    eax,0xc0029840
c00175fe:	80 fa 3e             	cmp    dl,0x3e
c0017601:	74 7e                	je     c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017603:	8d 42 bb             	lea    eax,[edx-0x45]
c0017606:	3c 01                	cmp    al,0x1
c0017608:	76 72                	jbe    c001767c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001760a:	80 fa 3f             	cmp    dl,0x3f
c001760d:	74 6d                	je     c001767c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001760f:	80 fa 4a             	cmp    dl,0x4a
c0017612:	74 0a                	je     c001761e <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0017614:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c0017619:	80 fa 4d             	cmp    dl,0x4d
c001761c:	75 63                	jne    c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001761e:	b8 30 98 02 c0       	mov    eax,0xc0029830
c0017623:	c3                   	ret    
c0017624:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c0017629:	80 f9 0b             	cmp    cl,0xb
c001762c:	75 0a                	jne    c0017638 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c001762e:	fe ca                	dec    dl
c0017630:	75 4f                	jne    c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017632:	b8 70 98 02 c0       	mov    eax,0xc0029870
c0017637:	c3                   	ret    
c0017638:	80 f9 0f             	cmp    cl,0xf
c001763b:	75 44                	jne    c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001763d:	b8 80 98 02 c0       	mov    eax,0xc0029880
c0017642:	80 fa 02             	cmp    dl,0x2
c0017645:	76 3a                	jbe    c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017647:	8d 42 fd             	lea    eax,[edx-0x3]
c001764a:	3c 01                	cmp    al,0x1
c001764c:	76 0a                	jbe    c0017658 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c001764e:	b8 2a 7f 02 c0       	mov    eax,0xc0027f2a
c0017653:	80 fa 06             	cmp    dl,0x6
c0017656:	75 29                	jne    c0017681 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017658:	b8 90 98 02 c0       	mov    eax,0xc0029890
c001765d:	c3                   	ret    
c001765e:	b8 70 97 02 c0       	mov    eax,0xc0029770
c0017663:	c3                   	ret    
c0017664:	b8 a0 97 02 c0       	mov    eax,0xc00297a0
c0017669:	c3                   	ret    
c001766a:	b8 c0 97 02 c0       	mov    eax,0xc00297c0
c001766f:	c3                   	ret    
c0017670:	b8 f0 97 02 c0       	mov    eax,0xc00297f0
c0017675:	c3                   	ret    
c0017676:	b8 00 98 02 c0       	mov    eax,0xc0029800
c001767b:	c3                   	ret    
c001767c:	b8 50 98 02 c0       	mov    eax,0xc0029850
c0017681:	c3                   	ret    

c0017682 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0017682:	60                   	pusha  
c0017683:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017687:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001768b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001768f:	9c                   	pushf  
c0017690:	fa                   	cli    
c0017691:	0f 09                	wbinvd 
c0017693:	0f 30                	wrmsr  
c0017695:	9d                   	popf   
c0017696:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001769a:	89 02                	mov    DWORD PTR [edx],eax
c001769c:	61                   	popa   
c001769d:	c3                   	ret    

c001769e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001769e:	60                   	pusha  
c001769f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00176a3:	9c                   	pushf  
c00176a4:	fa                   	cli    
c00176a5:	0f 09                	wbinvd 
c00176a7:	31 c0                	xor    eax,eax
c00176a9:	31 d2                	xor    edx,edx
c00176ab:	0f 32                	rdmsr  
c00176ad:	9d                   	popf   
c00176ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00176b2:	89 02                	mov    DWORD PTR [edx],eax
c00176b4:	61                   	popa   
c00176b5:	c3                   	ret    

c00176b6 <CPU::AMD_K6_writeback(int, int, int)>:
c00176b6:	56                   	push   esi
c00176b7:	53                   	push   ebx
c00176b8:	83 ec 10             	sub    esp,0x10
c00176bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00176bf:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00176c4:	75 5d                	jne    c0017723 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00176c6:	83 f8 08             	cmp    eax,0x8
c00176c9:	75 09                	jne    c00176d4 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00176cb:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00176d0:	7e 13                	jle    c00176e5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00176d2:	eb 30                	jmp    c0017704 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00176d4:	83 f8 06             	cmp    eax,0x6
c00176d7:	7c 4a                	jl     c0017723 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00176d9:	83 f8 07             	cmp    eax,0x7
c00176dc:	7e 07                	jle    c00176e5 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00176de:	83 f8 09             	cmp    eax,0x9
c00176e1:	74 21                	je     c0017704 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00176e3:	eb 3e                	jmp    c0017723 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00176e5:	89 e6                	mov    esi,esp
c00176e7:	8b 1d 44 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a444
c00176ed:	56                   	push   esi
c00176ee:	c1 eb 15             	shr    ebx,0x15
c00176f1:	68 82 00 00 c0       	push   0xc0000082
c00176f6:	83 e3 7e             	and    ebx,0x7e
c00176f9:	e8 a0 ff ff ff       	call   c001769e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00176fe:	56                   	push   esi
c00176ff:	6a 00                	push   0x0
c0017701:	53                   	push   ebx
c0017702:	eb 12                	jmp    c0017716 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0017704:	89 e3                	mov    ebx,esp
c0017706:	53                   	push   ebx
c0017707:	68 82 00 00 c0       	push   0xc0000082
c001770c:	e8 8d ff ff ff       	call   c001769e <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0017711:	53                   	push   ebx
c0017712:	6a 00                	push   0x0
c0017714:	6a 00                	push   0x0
c0017716:	68 82 00 00 c0       	push   0xc0000082
c001771b:	e8 62 ff ff ff       	call   c0017682 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0017720:	83 c4 18             	add    esp,0x18
c0017723:	83 c4 10             	add    esp,0x10
c0017726:	5b                   	pop    ebx
c0017727:	5e                   	pop    esi
c0017728:	c3                   	ret    
c0017729:	90                   	nop

c001772a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001772a:	55                   	push   ebp
c001772b:	57                   	push   edi
c001772c:	56                   	push   esi
c001772d:	53                   	push   ebx
c001772e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017732:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017736:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001773a:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001773e:	39 05 a0 99 02 c0    	cmp    DWORD PTR ds:0xc00299a0,eax
c0017744:	75 23                	jne    c0017769 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0017746:	a1 4c ae 02 c0       	mov    eax,ds:0xc002ae4c
c001774b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001774f:	89 06                	mov    DWORD PTR [esi],eax
c0017751:	a1 48 ae 02 c0       	mov    eax,ds:0xc002ae48
c0017756:	89 07                	mov    DWORD PTR [edi],eax
c0017758:	a1 44 ae 02 c0       	mov    eax,ds:0xc002ae44
c001775d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0017760:	a1 40 ae 02 c0       	mov    eax,ds:0xc002ae40
c0017765:	89 02                	mov    DWORD PTR [edx],eax
c0017767:	eb 3f                	jmp    c00177a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0017769:	31 c9                	xor    ecx,ecx
c001776b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001776f:	0f a2                	cpuid  
c0017771:	89 06                	mov    DWORD PTR [esi],eax
c0017773:	89 1f                	mov    DWORD PTR [edi],ebx
c0017775:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017779:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001777c:	89 10                	mov    DWORD PTR [eax],edx
c001777e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017782:	a3 a0 99 02 c0       	mov    ds:0xc00299a0,eax
c0017787:	8b 06                	mov    eax,DWORD PTR [esi]
c0017789:	a3 4c ae 02 c0       	mov    ds:0xc002ae4c,eax
c001778e:	8b 07                	mov    eax,DWORD PTR [edi]
c0017790:	a3 48 ae 02 c0       	mov    ds:0xc002ae48,eax
c0017795:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017798:	a3 44 ae 02 c0       	mov    ds:0xc002ae44,eax
c001779d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00177a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00177a3:	a3 40 ae 02 c0       	mov    ds:0xc002ae40,eax
c00177a8:	5b                   	pop    ebx
c00177a9:	5e                   	pop    esi
c00177aa:	5f                   	pop    edi
c00177ab:	5d                   	pop    ebp
c00177ac:	c3                   	ret    
c00177ad:	90                   	nop

c00177ae <CPU::cpuidCheckEDX(unsigned int)>:
c00177ae:	83 ec 10             	sub    esp,0x10
c00177b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177b5:	50                   	push   eax
c00177b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177ba:	50                   	push   eax
c00177bb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177bf:	50                   	push   eax
c00177c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177c4:	50                   	push   eax
c00177c5:	6a 01                	push   0x1
c00177c7:	e8 5e ff ff ff       	call   c001772a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00177cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177d0:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00177d4:	0f 95 c0             	setne  al
c00177d7:	83 c4 24             	add    esp,0x24
c00177da:	c3                   	ret    
c00177db:	90                   	nop

c00177dc <CPU::cpuidCheckECX(unsigned int)>:
c00177dc:	83 ec 10             	sub    esp,0x10
c00177df:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177e3:	50                   	push   eax
c00177e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177e8:	50                   	push   eax
c00177e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177ed:	50                   	push   eax
c00177ee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177f2:	50                   	push   eax
c00177f3:	6a 01                	push   0x1
c00177f5:	e8 30 ff ff ff       	call   c001772a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00177fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177fe:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017802:	0f 95 c0             	setne  al
c0017805:	83 c4 24             	add    esp,0x24
c0017808:	c3                   	ret    
c0017809:	90                   	nop

c001780a <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001780a:	83 ec 10             	sub    esp,0x10
c001780d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017811:	50                   	push   eax
c0017812:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017816:	50                   	push   eax
c0017817:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001781b:	50                   	push   eax
c001781c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017820:	50                   	push   eax
c0017821:	6a 07                	push   0x7
c0017823:	e8 02 ff ff ff       	call   c001772a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017828:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001782c:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0017830:	0f 95 c0             	setne  al
c0017833:	83 c4 24             	add    esp,0x24
c0017836:	c3                   	ret    
c0017837:	90                   	nop

c0017838 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0017838:	83 ec 10             	sub    esp,0x10
c001783b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001783f:	50                   	push   eax
c0017840:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017844:	50                   	push   eax
c0017845:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017849:	50                   	push   eax
c001784a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001784e:	50                   	push   eax
c001784f:	6a 07                	push   0x7
c0017851:	e8 d4 fe ff ff       	call   c001772a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017856:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001785a:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001785e:	0f 95 c0             	setne  al
c0017861:	83 c4 24             	add    esp,0x24
c0017864:	c3                   	ret    
c0017865:	90                   	nop

c0017866 <CPU::getNumber()>:
c0017866:	31 c0                	xor    eax,eax
c0017868:	c3                   	ret    
c0017869:	90                   	nop

c001786a <CPU::current()>:
c001786a:	e8 f7 ff ff ff       	call   c0017866 <CPU::getNumber()>
c001786f:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c0017875:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c001787c:	c3                   	ret    
c001787d:	90                   	nop

c001787e <CPU::CPU()>:
c001787e:	83 ec 0c             	sub    esp,0xc
c0017881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017885:	83 ec 08             	sub    esp,0x8
c0017888:	68 2a 7f 02 c0       	push   0xc0027f2a
c001788d:	50                   	push   eax
c001788e:	e8 b7 bf ff ff       	call   c001384a <Device::Device(char const*)>
c0017893:	83 c4 10             	add    esp,0x10
c0017896:	ba 04 80 02 c0       	mov    edx,0xc0028004
c001789b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001789f:	89 10                	mov    DWORD PTR [eax],edx
c00178a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178a5:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00178af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178b3:	05 78 01 00 00       	add    eax,0x178
c00178b8:	83 ec 0c             	sub    esp,0xc
c00178bb:	50                   	push   eax
c00178bc:	e8 95 70 ff ff       	call   c000e956 <GDT::GDT()>
c00178c1:	83 c4 10             	add    esp,0x10
c00178c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178c8:	05 7c 09 00 00       	add    eax,0x97c
c00178cd:	83 ec 0c             	sub    esp,0xc
c00178d0:	50                   	push   eax
c00178d1:	e8 e0 72 ff ff       	call   c000ebb6 <IDT::IDT()>
c00178d6:	83 c4 10             	add    esp,0x10
c00178d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178dd:	05 7c 11 00 00       	add    eax,0x117c
c00178e2:	83 ec 0c             	sub    esp,0xc
c00178e5:	50                   	push   eax
c00178e6:	e8 0f 93 ff ff       	call   c0010bfa <TSS::TSS()>
c00178eb:	83 c4 10             	add    esp,0x10
c00178ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178f2:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00178f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00178fd:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0017907:	90                   	nop
c0017908:	83 c4 0c             	add    esp,0xc
c001790b:	c3                   	ret    

c001790c <CPU::displayFeatures()>:
c001790c:	53                   	push   ebx
c001790d:	83 ec 10             	sub    esp,0x10
c0017910:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017914:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001791a:	68 38 7c 02 c0       	push   0xc0027c38
c001791f:	e8 2b a9 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0017924:	59                   	pop    ecx
c0017925:	58                   	pop    eax
c0017926:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001792c:	50                   	push   eax
c001792d:	68 49 7c 02 c0       	push   0xc0027c49
c0017932:	e8 18 a9 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0017937:	58                   	pop    eax
c0017938:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001793e:	5a                   	pop    edx
c001793f:	c1 e8 0e             	shr    eax,0xe
c0017942:	0f b6 c0             	movzx  eax,al
c0017945:	50                   	push   eax
c0017946:	68 5a 7c 02 c0       	push   0xc0027c5a
c001794b:	e8 ff a8 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0017950:	59                   	pop    ecx
c0017951:	58                   	pop    eax
c0017952:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017958:	66 c1 e8 06          	shr    ax,0x6
c001795c:	0f b6 c0             	movzx  eax,al
c001795f:	50                   	push   eax
c0017960:	68 6b 7c 02 c0       	push   0xc0027c6b
c0017965:	e8 e5 a8 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001796a:	c7 04 24 7e 80 02 c0 	mov    DWORD PTR [esp],0xc002807e
c0017971:	e8 d9 a8 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0017976:	83 c4 10             	add    esp,0x10
c0017979:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c001797e:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0017985:	74 05                	je     c001798c <CPU::displayFeatures()+0x80>
c0017987:	b8 58 69 02 c0       	mov    eax,0xc0026958
c001798c:	52                   	push   edx
c001798d:	52                   	push   edx
c001798e:	50                   	push   eax
c001798f:	68 7c 7c 02 c0       	push   0xc0027c7c
c0017994:	e8 b6 a8 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0017999:	83 c4 10             	add    esp,0x10
c001799c:	b8 58 69 02 c0       	mov    eax,0xc0026958
c00179a1:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00179a8:	78 05                	js     c00179af <CPU::displayFeatures()+0xa3>
c00179aa:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c00179af:	51                   	push   ecx
c00179b0:	51                   	push   ecx
c00179b1:	50                   	push   eax
c00179b2:	68 93 7c 02 c0       	push   0xc0027c93
c00179b7:	e8 93 a8 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00179bc:	83 c4 10             	add    esp,0x10
c00179bf:	b8 58 69 02 c0       	mov    eax,0xc0026958
c00179c4:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00179cb:	75 05                	jne    c00179d2 <CPU::displayFeatures()+0xc6>
c00179cd:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c00179d2:	52                   	push   edx
c00179d3:	52                   	push   edx
c00179d4:	50                   	push   eax
c00179d5:	68 aa 7c 02 c0       	push   0xc0027caa
c00179da:	e8 70 a8 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00179df:	83 c4 10             	add    esp,0x10
c00179e2:	b8 58 69 02 c0       	mov    eax,0xc0026958
c00179e7:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00179ee:	75 05                	jne    c00179f5 <CPU::displayFeatures()+0xe9>
c00179f0:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c00179f5:	51                   	push   ecx
c00179f6:	51                   	push   ecx
c00179f7:	50                   	push   eax
c00179f8:	68 c1 7c 02 c0       	push   0xc0027cc1
c00179fd:	e8 4d a8 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0017a02:	83 c4 10             	add    esp,0x10
c0017a05:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017a0a:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0017a11:	75 05                	jne    c0017a18 <CPU::displayFeatures()+0x10c>
c0017a13:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017a18:	52                   	push   edx
c0017a19:	52                   	push   edx
c0017a1a:	50                   	push   eax
c0017a1b:	68 d8 7c 02 c0       	push   0xc0027cd8
c0017a20:	e8 2a a8 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0017a25:	83 c4 10             	add    esp,0x10
c0017a28:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017a2d:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017a34:	75 05                	jne    c0017a3b <CPU::displayFeatures()+0x12f>
c0017a36:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017a3b:	51                   	push   ecx
c0017a3c:	51                   	push   ecx
c0017a3d:	50                   	push   eax
c0017a3e:	68 ef 7c 02 c0       	push   0xc0027cef
c0017a43:	e8 07 a8 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0017a48:	83 c4 10             	add    esp,0x10
c0017a4b:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017a50:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017a57:	75 05                	jne    c0017a5e <CPU::displayFeatures()+0x152>
c0017a59:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017a5e:	52                   	push   edx
c0017a5f:	52                   	push   edx
c0017a60:	50                   	push   eax
c0017a61:	68 06 7d 02 c0       	push   0xc0027d06
c0017a66:	e8 e4 a7 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0017a6b:	83 c4 10             	add    esp,0x10
c0017a6e:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017a73:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017a7a:	75 05                	jne    c0017a81 <CPU::displayFeatures()+0x175>
c0017a7c:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017a81:	51                   	push   ecx
c0017a82:	51                   	push   ecx
c0017a83:	50                   	push   eax
c0017a84:	68 1d 7d 02 c0       	push   0xc0027d1d
c0017a89:	e8 c1 a7 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0017a8e:	83 c4 10             	add    esp,0x10
c0017a91:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017a96:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017a9d:	75 05                	jne    c0017aa4 <CPU::displayFeatures()+0x198>
c0017a9f:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017aa4:	52                   	push   edx
c0017aa5:	52                   	push   edx
c0017aa6:	50                   	push   eax
c0017aa7:	68 34 7d 02 c0       	push   0xc0027d34
c0017aac:	e8 9e a7 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0017ab1:	83 c4 10             	add    esp,0x10
c0017ab4:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017ab9:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0017ac0:	75 05                	jne    c0017ac7 <CPU::displayFeatures()+0x1bb>
c0017ac2:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017ac7:	51                   	push   ecx
c0017ac8:	51                   	push   ecx
c0017ac9:	50                   	push   eax
c0017aca:	68 4b 7d 02 c0       	push   0xc0027d4b
c0017acf:	e8 7b a7 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0017ad4:	83 c4 10             	add    esp,0x10
c0017ad7:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017adc:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017ae3:	75 05                	jne    c0017aea <CPU::displayFeatures()+0x1de>
c0017ae5:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017aea:	52                   	push   edx
c0017aeb:	52                   	push   edx
c0017aec:	50                   	push   eax
c0017aed:	68 62 7d 02 c0       	push   0xc0027d62
c0017af2:	e8 58 a7 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0017af7:	83 c4 10             	add    esp,0x10
c0017afa:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017aff:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0017b06:	75 05                	jne    c0017b0d <CPU::displayFeatures()+0x201>
c0017b08:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017b0d:	51                   	push   ecx
c0017b0e:	51                   	push   ecx
c0017b0f:	50                   	push   eax
c0017b10:	68 79 7d 02 c0       	push   0xc0027d79
c0017b15:	e8 35 a7 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0017b1a:	83 c4 10             	add    esp,0x10
c0017b1d:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017b22:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0017b29:	75 05                	jne    c0017b30 <CPU::displayFeatures()+0x224>
c0017b2b:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017b30:	52                   	push   edx
c0017b31:	52                   	push   edx
c0017b32:	50                   	push   eax
c0017b33:	68 90 7d 02 c0       	push   0xc0027d90
c0017b38:	e8 12 a7 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0017b3d:	83 c4 10             	add    esp,0x10
c0017b40:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017b45:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0017b4c:	78 05                	js     c0017b53 <CPU::displayFeatures()+0x247>
c0017b4e:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017b53:	51                   	push   ecx
c0017b54:	51                   	push   ecx
c0017b55:	50                   	push   eax
c0017b56:	68 a7 7d 02 c0       	push   0xc0027da7
c0017b5b:	e8 ef a6 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0017b60:	83 c4 10             	add    esp,0x10
c0017b63:	b8 58 69 02 c0       	mov    eax,0xc0026958
c0017b68:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0017b6f:	75 05                	jne    c0017b76 <CPU::displayFeatures()+0x26a>
c0017b71:	b8 5c 69 02 c0       	mov    eax,0xc002695c
c0017b76:	52                   	push   edx
c0017b77:	52                   	push   edx
c0017b78:	50                   	push   eax
c0017b79:	68 be 7d 02 c0       	push   0xc0027dbe
c0017b7e:	e8 cc a6 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0017b83:	83 c4 18             	add    esp,0x18
c0017b86:	5b                   	pop    ebx
c0017b87:	c3                   	ret    

c0017b88 <CPU::detectFeatures()>:
c0017b88:	55                   	push   ebp
c0017b89:	57                   	push   edi
c0017b8a:	56                   	push   esi
c0017b8b:	53                   	push   ebx
c0017b8c:	83 ec 50             	sub    esp,0x50
c0017b8f:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0017b93:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0017b9d:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0017ba4:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0017baa:	6a 0d                	push   0xd
c0017bac:	6a 00                	push   0x0
c0017bae:	57                   	push   edi
c0017baf:	e8 18 8b fe ff       	call   c00006cc <memset>
c0017bb4:	83 c4 10             	add    esp,0x10
c0017bb7:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0017bbc:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0017bc3:	0f 84 20 09 00 00    	je     c00184e9 <CPU::detectFeatures()+0x961>
c0017bc9:	83 ec 0c             	sub    esp,0xc
c0017bcc:	6a 10                	push   0x10
c0017bce:	e8 db fb ff ff       	call   c00177ae <CPU::cpuidCheckEDX(unsigned int)>
c0017bd3:	83 e0 01             	and    eax,0x1
c0017bd6:	8d 14 00             	lea    edx,[eax+eax*1]
c0017bd9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017bdf:	83 e0 fd             	and    eax,0xfffffffd
c0017be2:	09 d0                	or     eax,edx
c0017be4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017bea:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0017bf1:	e8 b8 fb ff ff       	call   c00177ae <CPU::cpuidCheckEDX(unsigned int)>
c0017bf6:	83 e0 01             	and    eax,0x1
c0017bf9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0017c00:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c06:	83 e0 fb             	and    eax,0xfffffffb
c0017c09:	09 d0                	or     eax,edx
c0017c0b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c11:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0017c18:	e8 91 fb ff ff       	call   c00177ae <CPU::cpuidCheckEDX(unsigned int)>
c0017c1d:	83 e0 01             	and    eax,0x1
c0017c20:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017c27:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c2d:	83 e0 f7             	and    eax,0xfffffff7
c0017c30:	09 d0                	or     eax,edx
c0017c32:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c38:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0017c3f:	e8 6a fb ff ff       	call   c00177ae <CPU::cpuidCheckEDX(unsigned int)>
c0017c44:	83 e0 01             	and    eax,0x1
c0017c47:	c1 e0 04             	shl    eax,0x4
c0017c4a:	88 c2                	mov    dl,al
c0017c4c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c52:	83 e0 ef             	and    eax,0xffffffef
c0017c55:	09 d0                	or     eax,edx
c0017c57:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c5d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0017c64:	e8 45 fb ff ff       	call   c00177ae <CPU::cpuidCheckEDX(unsigned int)>
c0017c69:	83 e0 01             	and    eax,0x1
c0017c6c:	c1 e0 05             	shl    eax,0x5
c0017c6f:	88 c2                	mov    dl,al
c0017c71:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017c77:	83 e0 df             	and    eax,0xffffffdf
c0017c7a:	09 d0                	or     eax,edx
c0017c7c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017c82:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0017c89:	e8 20 fb ff ff       	call   c00177ae <CPU::cpuidCheckEDX(unsigned int)>
c0017c8e:	83 e0 01             	and    eax,0x1
c0017c91:	8d 14 00             	lea    edx,[eax+eax*1]
c0017c94:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017c9a:	83 e0 fd             	and    eax,0xfffffffd
c0017c9d:	09 d0                	or     eax,edx
c0017c9f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017ca5:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0017cac:	e8 fd fa ff ff       	call   c00177ae <CPU::cpuidCheckEDX(unsigned int)>
c0017cb1:	83 e0 01             	and    eax,0x1
c0017cb4:	c1 e0 06             	shl    eax,0x6
c0017cb7:	88 c2                	mov    dl,al
c0017cb9:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017cbf:	83 e0 bf             	and    eax,0xffffffbf
c0017cc2:	09 d0                	or     eax,edx
c0017cc4:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017cca:	58                   	pop    eax
c0017ccb:	8d 74 24 28          	lea    esi,[esp+0x28]
c0017ccf:	56                   	push   esi
c0017cd0:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0017cd4:	55                   	push   ebp
c0017cd5:	8d 44 24 28          	lea    eax,[esp+0x28]
c0017cd9:	50                   	push   eax
c0017cda:	8d 54 24 28          	lea    edx,[esp+0x28]
c0017cde:	52                   	push   edx
c0017cdf:	6a 00                	push   0x0
c0017ce1:	e8 44 fa ff ff       	call   c001772a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017ce6:	83 c4 1c             	add    esp,0x1c
c0017ce9:	6a 04                	push   0x4
c0017ceb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017cef:	50                   	push   eax
c0017cf0:	57                   	push   edi
c0017cf1:	e8 a0 89 fe ff       	call   c0000696 <memcpy>
c0017cf6:	83 c4 0c             	add    esp,0xc
c0017cf9:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0017cff:	6a 04                	push   0x4
c0017d01:	56                   	push   esi
c0017d02:	50                   	push   eax
c0017d03:	e8 8e 89 fe ff       	call   c0000696 <memcpy>
c0017d08:	83 c4 0c             	add    esp,0xc
c0017d0b:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0017d11:	6a 04                	push   0x4
c0017d13:	55                   	push   ebp
c0017d14:	50                   	push   eax
c0017d15:	e8 7c 89 fe ff       	call   c0000696 <memcpy>
c0017d1a:	58                   	pop    eax
c0017d1b:	5a                   	pop    edx
c0017d1c:	68 d5 7d 02 c0       	push   0xc0027dd5
c0017d21:	57                   	push   edi
c0017d22:	e8 95 8a fe ff       	call   c00007bc <strcmp>
c0017d27:	83 c4 10             	add    esp,0x10
c0017d2a:	85 c0                	test   eax,eax
c0017d2c:	75 0f                	jne    c0017d3d <CPU::detectFeatures()+0x1b5>
c0017d2e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0017d38:	e9 22 02 00 00       	jmp    c0017f5f <CPU::detectFeatures()+0x3d7>
c0017d3d:	50                   	push   eax
c0017d3e:	50                   	push   eax
c0017d3f:	68 e2 7d 02 c0       	push   0xc0027de2
c0017d44:	57                   	push   edi
c0017d45:	e8 72 8a fe ff       	call   c00007bc <strcmp>
c0017d4a:	83 c4 10             	add    esp,0x10
c0017d4d:	85 c0                	test   eax,eax
c0017d4f:	74 dd                	je     c0017d2e <CPU::detectFeatures()+0x1a6>
c0017d51:	51                   	push   ecx
c0017d52:	51                   	push   ecx
c0017d53:	68 ef 7d 02 c0       	push   0xc0027def
c0017d58:	57                   	push   edi
c0017d59:	e8 5e 8a fe ff       	call   c00007bc <strcmp>
c0017d5e:	83 c4 10             	add    esp,0x10
c0017d61:	85 c0                	test   eax,eax
c0017d63:	74 2a                	je     c0017d8f <CPU::detectFeatures()+0x207>
c0017d65:	52                   	push   edx
c0017d66:	52                   	push   edx
c0017d67:	68 fc 7d 02 c0       	push   0xc0027dfc
c0017d6c:	57                   	push   edi
c0017d6d:	e8 4a 8a fe ff       	call   c00007bc <strcmp>
c0017d72:	83 c4 10             	add    esp,0x10
c0017d75:	85 c0                	test   eax,eax
c0017d77:	74 16                	je     c0017d8f <CPU::detectFeatures()+0x207>
c0017d79:	50                   	push   eax
c0017d7a:	50                   	push   eax
c0017d7b:	68 09 7e 02 c0       	push   0xc0027e09
c0017d80:	57                   	push   edi
c0017d81:	e8 36 8a fe ff       	call   c00007bc <strcmp>
c0017d86:	83 c4 10             	add    esp,0x10
c0017d89:	85 c0                	test   eax,eax
c0017d8b:	74 48                	je     c0017dd5 <CPU::detectFeatures()+0x24d>
c0017d8d:	eb 0f                	jmp    c0017d9e <CPU::detectFeatures()+0x216>
c0017d8f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0017d99:	e9 c1 01 00 00       	jmp    c0017f5f <CPU::detectFeatures()+0x3d7>
c0017d9e:	50                   	push   eax
c0017d9f:	50                   	push   eax
c0017da0:	68 16 7e 02 c0       	push   0xc0027e16
c0017da5:	57                   	push   edi
c0017da6:	e8 11 8a fe ff       	call   c00007bc <strcmp>
c0017dab:	83 c4 10             	add    esp,0x10
c0017dae:	85 c0                	test   eax,eax
c0017db0:	74 23                	je     c0017dd5 <CPU::detectFeatures()+0x24d>
c0017db2:	50                   	push   eax
c0017db3:	50                   	push   eax
c0017db4:	68 23 7e 02 c0       	push   0xc0027e23
c0017db9:	57                   	push   edi
c0017dba:	e8 fd 89 fe ff       	call   c00007bc <strcmp>
c0017dbf:	83 c4 10             	add    esp,0x10
c0017dc2:	85 c0                	test   eax,eax
c0017dc4:	75 1e                	jne    c0017de4 <CPU::detectFeatures()+0x25c>
c0017dc6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017dd0:	e9 8a 01 00 00       	jmp    c0017f5f <CPU::detectFeatures()+0x3d7>
c0017dd5:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0017ddf:	e9 7b 01 00 00       	jmp    c0017f5f <CPU::detectFeatures()+0x3d7>
c0017de4:	50                   	push   eax
c0017de5:	50                   	push   eax
c0017de6:	68 30 7e 02 c0       	push   0xc0027e30
c0017deb:	57                   	push   edi
c0017dec:	e8 cb 89 fe ff       	call   c00007bc <strcmp>
c0017df1:	83 c4 10             	add    esp,0x10
c0017df4:	85 c0                	test   eax,eax
c0017df6:	75 0f                	jne    c0017e07 <CPU::detectFeatures()+0x27f>
c0017df8:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0017e02:	e9 58 01 00 00       	jmp    c0017f5f <CPU::detectFeatures()+0x3d7>
c0017e07:	50                   	push   eax
c0017e08:	50                   	push   eax
c0017e09:	68 ef 7d 02 c0       	push   0xc0027def
c0017e0e:	57                   	push   edi
c0017e0f:	e8 a8 89 fe ff       	call   c00007bc <strcmp>
c0017e14:	83 c4 10             	add    esp,0x10
c0017e17:	85 c0                	test   eax,eax
c0017e19:	75 0f                	jne    c0017e2a <CPU::detectFeatures()+0x2a2>
c0017e1b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0017e25:	e9 35 01 00 00       	jmp    c0017f5f <CPU::detectFeatures()+0x3d7>
c0017e2a:	50                   	push   eax
c0017e2b:	50                   	push   eax
c0017e2c:	68 3d 7e 02 c0       	push   0xc0027e3d
c0017e31:	57                   	push   edi
c0017e32:	e8 85 89 fe ff       	call   c00007bc <strcmp>
c0017e37:	83 c4 10             	add    esp,0x10
c0017e3a:	85 c0                	test   eax,eax
c0017e3c:	75 0f                	jne    c0017e4d <CPU::detectFeatures()+0x2c5>
c0017e3e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0017e48:	e9 12 01 00 00       	jmp    c0017f5f <CPU::detectFeatures()+0x3d7>
c0017e4d:	51                   	push   ecx
c0017e4e:	51                   	push   ecx
c0017e4f:	68 4a 7e 02 c0       	push   0xc0027e4a
c0017e54:	57                   	push   edi
c0017e55:	e8 62 89 fe ff       	call   c00007bc <strcmp>
c0017e5a:	83 c4 10             	add    esp,0x10
c0017e5d:	85 c0                	test   eax,eax
c0017e5f:	75 0f                	jne    c0017e70 <CPU::detectFeatures()+0x2e8>
c0017e61:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0017e6b:	e9 ef 00 00 00       	jmp    c0017f5f <CPU::detectFeatures()+0x3d7>
c0017e70:	52                   	push   edx
c0017e71:	52                   	push   edx
c0017e72:	68 57 7e 02 c0       	push   0xc0027e57
c0017e77:	57                   	push   edi
c0017e78:	e8 3f 89 fe ff       	call   c00007bc <strcmp>
c0017e7d:	83 c4 10             	add    esp,0x10
c0017e80:	85 c0                	test   eax,eax
c0017e82:	75 0f                	jne    c0017e93 <CPU::detectFeatures()+0x30b>
c0017e84:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0017e8e:	e9 cc 00 00 00       	jmp    c0017f5f <CPU::detectFeatures()+0x3d7>
c0017e93:	50                   	push   eax
c0017e94:	50                   	push   eax
c0017e95:	68 64 7e 02 c0       	push   0xc0027e64
c0017e9a:	57                   	push   edi
c0017e9b:	e8 1c 89 fe ff       	call   c00007bc <strcmp>
c0017ea0:	83 c4 10             	add    esp,0x10
c0017ea3:	85 c0                	test   eax,eax
c0017ea5:	75 0f                	jne    c0017eb6 <CPU::detectFeatures()+0x32e>
c0017ea7:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0017eb1:	e9 a9 00 00 00       	jmp    c0017f5f <CPU::detectFeatures()+0x3d7>
c0017eb6:	50                   	push   eax
c0017eb7:	50                   	push   eax
c0017eb8:	68 71 7e 02 c0       	push   0xc0027e71
c0017ebd:	57                   	push   edi
c0017ebe:	e8 f9 88 fe ff       	call   c00007bc <strcmp>
c0017ec3:	83 c4 10             	add    esp,0x10
c0017ec6:	85 c0                	test   eax,eax
c0017ec8:	75 0f                	jne    c0017ed9 <CPU::detectFeatures()+0x351>
c0017eca:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0017ed4:	e9 86 00 00 00       	jmp    c0017f5f <CPU::detectFeatures()+0x3d7>
c0017ed9:	50                   	push   eax
c0017eda:	50                   	push   eax
c0017edb:	68 7e 7e 02 c0       	push   0xc0027e7e
c0017ee0:	57                   	push   edi
c0017ee1:	e8 d6 88 fe ff       	call   c00007bc <strcmp>
c0017ee6:	83 c4 10             	add    esp,0x10
c0017ee9:	85 c0                	test   eax,eax
c0017eeb:	75 0c                	jne    c0017ef9 <CPU::detectFeatures()+0x371>
c0017eed:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0017ef7:	eb 66                	jmp    c0017f5f <CPU::detectFeatures()+0x3d7>
c0017ef9:	50                   	push   eax
c0017efa:	50                   	push   eax
c0017efb:	68 8b 7e 02 c0       	push   0xc0027e8b
c0017f00:	57                   	push   edi
c0017f01:	e8 b6 88 fe ff       	call   c00007bc <strcmp>
c0017f06:	83 c4 10             	add    esp,0x10
c0017f09:	85 c0                	test   eax,eax
c0017f0b:	75 0c                	jne    c0017f19 <CPU::detectFeatures()+0x391>
c0017f0d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0017f17:	eb 46                	jmp    c0017f5f <CPU::detectFeatures()+0x3d7>
c0017f19:	50                   	push   eax
c0017f1a:	50                   	push   eax
c0017f1b:	68 98 7e 02 c0       	push   0xc0027e98
c0017f20:	57                   	push   edi
c0017f21:	e8 96 88 fe ff       	call   c00007bc <strcmp>
c0017f26:	83 c4 10             	add    esp,0x10
c0017f29:	85 c0                	test   eax,eax
c0017f2b:	74 e0                	je     c0017f0d <CPU::detectFeatures()+0x385>
c0017f2d:	50                   	push   eax
c0017f2e:	50                   	push   eax
c0017f2f:	68 a5 7e 02 c0       	push   0xc0027ea5
c0017f34:	57                   	push   edi
c0017f35:	e8 82 88 fe ff       	call   c00007bc <strcmp>
c0017f3a:	83 c4 10             	add    esp,0x10
c0017f3d:	85 c0                	test   eax,eax
c0017f3f:	74 cc                	je     c0017f0d <CPU::detectFeatures()+0x385>
c0017f41:	51                   	push   ecx
c0017f42:	51                   	push   ecx
c0017f43:	68 b2 7e 02 c0       	push   0xc0027eb2
c0017f48:	57                   	push   edi
c0017f49:	e8 6e 88 fe ff       	call   c00007bc <strcmp>
c0017f4e:	83 c4 10             	add    esp,0x10
c0017f51:	85 c0                	test   eax,eax
c0017f53:	74 b8                	je     c0017f0d <CPU::detectFeatures()+0x385>
c0017f55:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0017f5f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0017f64:	0f 86 be 00 00 00    	jbe    c0018028 <CPU::detectFeatures()+0x4a0>
c0017f6a:	83 ec 0c             	sub    esp,0xc
c0017f6d:	68 80 00 00 00       	push   0x80
c0017f72:	e8 93 f8 ff ff       	call   c001780a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0017f77:	83 e0 01             	and    eax,0x1
c0017f7a:	c1 e0 06             	shl    eax,0x6
c0017f7d:	88 c2                	mov    dl,al
c0017f7f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017f85:	83 e0 bf             	and    eax,0xffffffbf
c0017f88:	09 d0                	or     eax,edx
c0017f8a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017f90:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0017f97:	e8 6e f8 ff ff       	call   c001780a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0017f9c:	83 e0 01             	and    eax,0x1
c0017f9f:	c1 e0 04             	shl    eax,0x4
c0017fa2:	88 c2                	mov    dl,al
c0017fa4:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017faa:	83 e0 ef             	and    eax,0xffffffef
c0017fad:	09 d0                	or     eax,edx
c0017faf:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017fb5:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0017fbc:	e8 49 f8 ff ff       	call   c001780a <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0017fc1:	c1 e0 07             	shl    eax,0x7
c0017fc4:	88 c2                	mov    dl,al
c0017fc6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017fcc:	83 e0 7f             	and    eax,0x7f
c0017fcf:	09 d0                	or     eax,edx
c0017fd1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017fd7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017fde:	e8 55 f8 ff ff       	call   c0017838 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0017fe3:	83 e0 01             	and    eax,0x1
c0017fe6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0017fed:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017ff3:	83 e0 f7             	and    eax,0xfffffff7
c0017ff6:	09 d0                	or     eax,edx
c0017ff8:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017ffe:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018005:	e8 2e f8 ff ff       	call   c0017838 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001800a:	83 c4 10             	add    esp,0x10
c001800d:	83 e0 01             	and    eax,0x1
c0018010:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018017:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001801d:	83 e0 fb             	and    eax,0xfffffffb
c0018020:	09 d0                	or     eax,edx
c0018022:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018028:	83 ec 0c             	sub    esp,0xc
c001802b:	56                   	push   esi
c001802c:	55                   	push   ebp
c001802d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018031:	57                   	push   edi
c0018032:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018036:	50                   	push   eax
c0018037:	6a 01                	push   0x1
c0018039:	e8 ec f6 ff ff       	call   c001772a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001803e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018042:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018048:	88 ca                	mov    dl,cl
c001804a:	83 e0 f0             	and    eax,0xfffffff0
c001804d:	83 e2 0f             	and    edx,0xf
c0018050:	09 d0                	or     eax,edx
c0018052:	88 ca                	mov    dl,cl
c0018054:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001805a:	c0 ea 04             	shr    dl,0x4
c001805d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018061:	0f b6 c2             	movzx  eax,dl
c0018064:	83 c4 20             	add    esp,0x20
c0018067:	c1 e0 06             	shl    eax,0x6
c001806a:	89 c5                	mov    ebp,eax
c001806c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018072:	66 25 3f c0          	and    ax,0xc03f
c0018076:	09 e8                	or     eax,ebp
c0018078:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001807f:	89 c8                	mov    eax,ecx
c0018081:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018087:	c1 e8 08             	shr    eax,0x8
c001808a:	83 e2 3f             	and    edx,0x3f
c001808d:	83 e0 0f             	and    eax,0xf
c0018090:	89 c5                	mov    ebp,eax
c0018092:	c1 e5 06             	shl    ebp,0x6
c0018095:	09 d5                	or     ebp,edx
c0018097:	89 ea                	mov    edx,ebp
c0018099:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001809f:	88 c2                	mov    dl,al
c00180a1:	c0 ea 02             	shr    dl,0x2
c00180a4:	89 d5                	mov    ebp,edx
c00180a6:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00180ac:	83 e2 c0             	and    edx,0xffffffc0
c00180af:	09 d5                	or     ebp,edx
c00180b1:	89 ea                	mov    edx,ebp
c00180b3:	89 cd                	mov    ebp,ecx
c00180b5:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00180bb:	c1 ed 0c             	shr    ebp,0xc
c00180be:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00180c4:	83 e5 03             	and    ebp,0x3
c00180c7:	83 e2 cf             	and    edx,0xffffffcf
c00180ca:	c1 e5 04             	shl    ebp,0x4
c00180cd:	09 d5                	or     ebp,edx
c00180cf:	3c 06                	cmp    al,0x6
c00180d1:	89 ea                	mov    edx,ebp
c00180d3:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00180d9:	74 04                	je     c00180df <CPU::detectFeatures()+0x557>
c00180db:	3c 0f                	cmp    al,0xf
c00180dd:	75 5c                	jne    c001813b <CPU::detectFeatures()+0x5b3>
c00180df:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00180e3:	89 cd                	mov    ebp,ecx
c00180e5:	c1 ed 10             	shr    ebp,0x10
c00180e8:	c1 e5 04             	shl    ebp,0x4
c00180eb:	09 ea                	or     edx,ebp
c00180ed:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00180f3:	0f b6 d2             	movzx  edx,dl
c00180f6:	66 81 e5 3f c0       	and    bp,0xc03f
c00180fb:	c1 e2 06             	shl    edx,0x6
c00180fe:	09 ea                	or     edx,ebp
c0018100:	3c 0f                	cmp    al,0xf
c0018102:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018109:	75 30                	jne    c001813b <CPU::detectFeatures()+0x5b3>
c001810b:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018111:	c1 e9 14             	shr    ecx,0x14
c0018114:	83 e0 3f             	and    eax,0x3f
c0018117:	83 c1 0f             	add    ecx,0xf
c001811a:	88 ca                	mov    dl,cl
c001811c:	c0 e9 02             	shr    cl,0x2
c001811f:	c1 e2 06             	shl    edx,0x6
c0018122:	09 d0                	or     eax,edx
c0018124:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001812a:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018130:	83 e0 c0             	and    eax,0xffffffc0
c0018133:	09 c1                	or     ecx,eax
c0018135:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001813b:	83 ec 0c             	sub    esp,0xc
c001813e:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018145:	56                   	push   esi
c0018146:	8d 44 24 28          	lea    eax,[esp+0x28]
c001814a:	50                   	push   eax
c001814b:	57                   	push   edi
c001814c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018150:	55                   	push   ebp
c0018151:	68 00 00 00 80       	push   0x80000000
c0018156:	e8 cf f5 ff ff       	call   c001772a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001815b:	83 c4 20             	add    esp,0x20
c001815e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018166:	8d 44 24 18          	lea    eax,[esp+0x18]
c001816a:	76 1e                	jbe    c001818a <CPU::detectFeatures()+0x602>
c001816c:	83 ec 0c             	sub    esp,0xc
c001816f:	56                   	push   esi
c0018170:	50                   	push   eax
c0018171:	57                   	push   edi
c0018172:	55                   	push   ebp
c0018173:	68 01 00 00 80       	push   0x80000001
c0018178:	e8 ad f5 ff ff       	call   c001772a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001817d:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018187:	83 c4 20             	add    esp,0x20
c001818a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018190:	83 f8 01             	cmp    eax,0x1
c0018193:	75 6f                	jne    c0018204 <CPU::detectFeatures()+0x67c>
c0018195:	51                   	push   ecx
c0018196:	51                   	push   ecx
c0018197:	68 be 7e 02 c0       	push   0xc0027ebe
c001819c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00181a0:	56                   	push   esi
c00181a1:	e8 c5 85 fe ff       	call   c000076b <strcpy>
c00181a6:	5f                   	pop    edi
c00181a7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00181ad:	5d                   	pop    ebp
c00181ae:	66 c1 e8 06          	shr    ax,0x6
c00181b2:	0f b6 c0             	movzx  eax,al
c00181b5:	50                   	push   eax
c00181b6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00181bc:	c1 e8 0e             	shr    eax,0xe
c00181bf:	0f b6 c0             	movzx  eax,al
c00181c2:	50                   	push   eax
c00181c3:	e8 0c f2 ff ff       	call   c00173d4 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00181c8:	5a                   	pop    edx
c00181c9:	59                   	pop    ecx
c00181ca:	50                   	push   eax
c00181cb:	56                   	push   esi
c00181cc:	e8 51 86 fe ff       	call   c0000822 <strcat>
c00181d1:	5f                   	pop    edi
c00181d2:	5d                   	pop    ebp
c00181d3:	56                   	push   esi
c00181d4:	53                   	push   ebx
c00181d5:	e8 62 b6 ff ff       	call   c001383c <Device::setName(char const*)>
c00181da:	58                   	pop    eax
c00181db:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00181e1:	5a                   	pop    edx
c00181e2:	68 c5 7e 02 c0       	push   0xc0027ec5
c00181e7:	50                   	push   eax
c00181e8:	e8 cf 85 fe ff       	call   c00007bc <strcmp>
c00181ed:	83 c4 10             	add    esp,0x10
c00181f0:	85 c0                	test   eax,eax
c00181f2:	0f 85 73 03 00 00    	jne    c001856b <CPU::detectFeatures()+0x9e3>
c00181f8:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00181ff:	e9 67 03 00 00       	jmp    c001856b <CPU::detectFeatures()+0x9e3>
c0018204:	83 f8 02             	cmp    eax,0x2
c0018207:	0f 85 b5 00 00 00    	jne    c00182c2 <CPU::detectFeatures()+0x73a>
c001820d:	57                   	push   edi
c001820e:	57                   	push   edi
c001820f:	68 d7 7e 02 c0       	push   0xc0027ed7
c0018214:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018218:	56                   	push   esi
c0018219:	e8 4d 85 fe ff       	call   c000076b <strcpy>
c001821e:	5d                   	pop    ebp
c001821f:	58                   	pop    eax
c0018220:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018226:	66 c1 e8 06          	shr    ax,0x6
c001822a:	0f b6 c0             	movzx  eax,al
c001822d:	50                   	push   eax
c001822e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018234:	c1 e8 0e             	shr    eax,0xe
c0018237:	0f b6 c0             	movzx  eax,al
c001823a:	50                   	push   eax
c001823b:	e8 00 f0 ff ff       	call   c0017240 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018240:	5a                   	pop    edx
c0018241:	59                   	pop    ecx
c0018242:	50                   	push   eax
c0018243:	56                   	push   esi
c0018244:	e8 d9 85 fe ff       	call   c0000822 <strcat>
c0018249:	5f                   	pop    edi
c001824a:	5d                   	pop    ebp
c001824b:	56                   	push   esi
c001824c:	53                   	push   ebx
c001824d:	e8 ea b5 ff ff       	call   c001383c <Device::setName(char const*)>
c0018252:	58                   	pop    eax
c0018253:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018259:	5a                   	pop    edx
c001825a:	68 dc 7e 02 c0       	push   0xc0027edc
c001825f:	50                   	push   eax
c0018260:	e8 57 85 fe ff       	call   c00007bc <strcmp>
c0018265:	83 c4 10             	add    esp,0x10
c0018268:	85 c0                	test   eax,eax
c001826a:	75 20                	jne    c001828c <CPU::detectFeatures()+0x704>
c001826c:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c0018272:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018278:	a8 01                	test   al,0x1
c001827a:	74 10                	je     c001828c <CPU::detectFeatures()+0x704>
c001827c:	83 e0 fe             	and    eax,0xfffffffe
c001827f:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018285:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001828c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018292:	c1 e8 0e             	shr    eax,0xe
c0018295:	3c 05                	cmp    al,0x5
c0018297:	0f 85 ce 02 00 00    	jne    c001856b <CPU::detectFeatures()+0x9e3>
c001829d:	56                   	push   esi
c001829e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00182a4:	83 e0 0f             	and    eax,0xf
c00182a7:	50                   	push   eax
c00182a8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182ae:	66 c1 e8 06          	shr    ax,0x6
c00182b2:	0f b6 c0             	movzx  eax,al
c00182b5:	50                   	push   eax
c00182b6:	6a 05                	push   0x5
c00182b8:	e8 f9 f3 ff ff       	call   c00176b6 <CPU::AMD_K6_writeback(int, int, int)>
c00182bd:	e9 1f 02 00 00       	jmp    c00184e1 <CPU::detectFeatures()+0x959>
c00182c2:	8d 50 fd             	lea    edx,[eax-0x3]
c00182c5:	83 fa 01             	cmp    edx,0x1
c00182c8:	76 09                	jbe    c00182d3 <CPU::detectFeatures()+0x74b>
c00182ca:	83 f8 06             	cmp    eax,0x6
c00182cd:	0f 85 91 01 00 00    	jne    c0018464 <CPU::detectFeatures()+0x8dc>
c00182d3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00182d9:	c1 ea 0e             	shr    edx,0xe
c00182dc:	80 fa 05             	cmp    dl,0x5
c00182df:	75 7b                	jne    c001835c <CPU::detectFeatures()+0x7d4>
c00182e1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00182e7:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00182ec:	66 81 fa 00 01       	cmp    dx,0x100
c00182f1:	75 0c                	jne    c00182ff <CPU::detectFeatures()+0x777>
c00182f3:	51                   	push   ecx
c00182f4:	51                   	push   ecx
c00182f5:	68 e3 7e 02 c0       	push   0xc0027ee3
c00182fa:	e9 dc 01 00 00       	jmp    c00184db <CPU::detectFeatures()+0x953>
c00182ff:	66 81 fa 00 02       	cmp    dx,0x200
c0018304:	75 0c                	jne    c0018312 <CPU::detectFeatures()+0x78a>
c0018306:	52                   	push   edx
c0018307:	52                   	push   edx
c0018308:	68 f6 7e 02 c0       	push   0xc0027ef6
c001830d:	e9 c9 01 00 00       	jmp    c00184db <CPU::detectFeatures()+0x953>
c0018312:	66 81 fa 40 02       	cmp    dx,0x240
c0018317:	75 0c                	jne    c0018325 <CPU::detectFeatures()+0x79d>
c0018319:	50                   	push   eax
c001831a:	50                   	push   eax
c001831b:	68 08 7f 02 c0       	push   0xc0027f08
c0018320:	e9 b6 01 00 00       	jmp    c00184db <CPU::detectFeatures()+0x953>
c0018325:	83 f8 06             	cmp    eax,0x6
c0018328:	75 0c                	jne    c0018336 <CPU::detectFeatures()+0x7ae>
c001832a:	50                   	push   eax
c001832b:	50                   	push   eax
c001832c:	68 1a 7f 02 c0       	push   0xc0027f1a
c0018331:	e9 a5 01 00 00       	jmp    c00184db <CPU::detectFeatures()+0x953>
c0018336:	83 f8 04             	cmp    eax,0x4
c0018339:	75 0c                	jne    c0018347 <CPU::detectFeatures()+0x7bf>
c001833b:	50                   	push   eax
c001833c:	50                   	push   eax
c001833d:	68 26 7f 02 c0       	push   0xc0027f26
c0018342:	e9 94 01 00 00       	jmp    c00184db <CPU::detectFeatures()+0x953>
c0018347:	83 f8 03             	cmp    eax,0x3
c001834a:	0f 85 1b 02 00 00    	jne    c001856b <CPU::detectFeatures()+0x9e3>
c0018350:	50                   	push   eax
c0018351:	50                   	push   eax
c0018352:	68 2e 7f 02 c0       	push   0xc0027f2e
c0018357:	e9 7f 01 00 00       	jmp    c00184db <CPU::detectFeatures()+0x953>
c001835c:	80 fa 06             	cmp    dl,0x6
c001835f:	0f 85 db 00 00 00    	jne    c0018440 <CPU::detectFeatures()+0x8b8>
c0018365:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001836b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018370:	66 81 fa 80 01       	cmp    dx,0x180
c0018375:	75 0c                	jne    c0018383 <CPU::detectFeatures()+0x7fb>
c0018377:	50                   	push   eax
c0018378:	50                   	push   eax
c0018379:	68 39 7f 02 c0       	push   0xc0027f39
c001837e:	e9 58 01 00 00       	jmp    c00184db <CPU::detectFeatures()+0x953>
c0018383:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018389:	66 f7 c1 80 ff       	test   cx,0xff80
c001838e:	75 0c                	jne    c001839c <CPU::detectFeatures()+0x814>
c0018390:	50                   	push   eax
c0018391:	50                   	push   eax
c0018392:	68 49 7f 02 c0       	push   0xc0027f49
c0018397:	e9 3f 01 00 00       	jmp    c00184db <CPU::detectFeatures()+0x953>
c001839c:	66 81 fa 40 02       	cmp    dx,0x240
c00183a1:	75 0c                	jne    c00183af <CPU::detectFeatures()+0x827>
c00183a3:	55                   	push   ebp
c00183a4:	55                   	push   ebp
c00183a5:	68 50 7f 02 c0       	push   0xc0027f50
c00183aa:	e9 2c 01 00 00       	jmp    c00184db <CPU::detectFeatures()+0x953>
c00183af:	66 81 fa 80 02       	cmp    dx,0x280
c00183b4:	75 0c                	jne    c00183c2 <CPU::detectFeatures()+0x83a>
c00183b6:	57                   	push   edi
c00183b7:	57                   	push   edi
c00183b8:	68 59 7f 02 c0       	push   0xc0027f59
c00183bd:	e9 19 01 00 00       	jmp    c00184db <CPU::detectFeatures()+0x953>
c00183c2:	66 81 fa 40 03       	cmp    dx,0x340
c00183c7:	74 ed                	je     c00183b6 <CPU::detectFeatures()+0x82e>
c00183c9:	66 81 fa c0 03       	cmp    dx,0x3c0
c00183ce:	75 0c                	jne    c00183dc <CPU::detectFeatures()+0x854>
c00183d0:	56                   	push   esi
c00183d1:	56                   	push   esi
c00183d2:	68 60 7f 02 c0       	push   0xc0027f60
c00183d7:	e9 ff 00 00 00       	jmp    c00184db <CPU::detectFeatures()+0x953>
c00183dc:	83 f8 06             	cmp    eax,0x6
c00183df:	0f 84 45 ff ff ff    	je     c001832a <CPU::detectFeatures()+0x7a2>
c00183e5:	83 f8 04             	cmp    eax,0x4
c00183e8:	0f 84 4d ff ff ff    	je     c001833b <CPU::detectFeatures()+0x7b3>
c00183ee:	83 f8 03             	cmp    eax,0x3
c00183f1:	0f 85 74 01 00 00    	jne    c001856b <CPU::detectFeatures()+0x9e3>
c00183f7:	51                   	push   ecx
c00183f8:	51                   	push   ecx
c00183f9:	68 69 7f 02 c0       	push   0xc0027f69
c00183fe:	53                   	push   ebx
c00183ff:	e8 38 b4 ff ff       	call   c001383c <Device::setName(char const*)>
c0018404:	b1 c1                	mov    cl,0xc1
c0018406:	88 c8                	mov    al,cl
c0018408:	e6 22                	out    0x22,al
c001840a:	e4 23                	in     al,0x23
c001840c:	88 c2                	mov    dl,al
c001840e:	88 c8                	mov    al,cl
c0018410:	e6 22                	out    0x22,al
c0018412:	88 d0                	mov    al,dl
c0018414:	83 c8 10             	or     eax,0x10
c0018417:	e6 23                	out    0x23,al
c0018419:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018420:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018423:	89 d0                	mov    eax,edx
c0018425:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001842b:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001842f:	40                   	inc    eax
c0018430:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018436:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001843b:	e9 a1 00 00 00       	jmp    c00184e1 <CPU::detectFeatures()+0x959>
c0018440:	83 f8 06             	cmp    eax,0x6
c0018443:	0f 84 e1 fe ff ff    	je     c001832a <CPU::detectFeatures()+0x7a2>
c0018449:	83 f8 04             	cmp    eax,0x4
c001844c:	0f 84 e9 fe ff ff    	je     c001833b <CPU::detectFeatures()+0x7b3>
c0018452:	83 f8 03             	cmp    eax,0x3
c0018455:	0f 85 10 01 00 00    	jne    c001856b <CPU::detectFeatures()+0x9e3>
c001845b:	52                   	push   edx
c001845c:	52                   	push   edx
c001845d:	68 74 7f 02 c0       	push   0xc0027f74
c0018462:	eb 77                	jmp    c00184db <CPU::detectFeatures()+0x953>
c0018464:	83 f8 07             	cmp    eax,0x7
c0018467:	75 09                	jne    c0018472 <CPU::detectFeatures()+0x8ea>
c0018469:	50                   	push   eax
c001846a:	50                   	push   eax
c001846b:	68 7e 7f 02 c0       	push   0xc0027f7e
c0018470:	eb 69                	jmp    c00184db <CPU::detectFeatures()+0x953>
c0018472:	83 f8 0a             	cmp    eax,0xa
c0018475:	75 09                	jne    c0018480 <CPU::detectFeatures()+0x8f8>
c0018477:	50                   	push   eax
c0018478:	50                   	push   eax
c0018479:	68 89 7f 02 c0       	push   0xc0027f89
c001847e:	eb 5b                	jmp    c00184db <CPU::detectFeatures()+0x953>
c0018480:	83 f8 0b             	cmp    eax,0xb
c0018483:	75 09                	jne    c001848e <CPU::detectFeatures()+0x906>
c0018485:	50                   	push   eax
c0018486:	50                   	push   eax
c0018487:	68 91 7f 02 c0       	push   0xc0027f91
c001848c:	eb 4d                	jmp    c00184db <CPU::detectFeatures()+0x953>
c001848e:	83 f8 08             	cmp    eax,0x8
c0018491:	75 09                	jne    c001849c <CPU::detectFeatures()+0x914>
c0018493:	50                   	push   eax
c0018494:	50                   	push   eax
c0018495:	68 9a 7f 02 c0       	push   0xc0027f9a
c001849a:	eb 3f                	jmp    c00184db <CPU::detectFeatures()+0x953>
c001849c:	83 f8 09             	cmp    eax,0x9
c001849f:	75 09                	jne    c00184aa <CPU::detectFeatures()+0x922>
c00184a1:	50                   	push   eax
c00184a2:	50                   	push   eax
c00184a3:	68 a2 7f 02 c0       	push   0xc0027fa2
c00184a8:	eb 31                	jmp    c00184db <CPU::detectFeatures()+0x953>
c00184aa:	83 f8 05             	cmp    eax,0x5
c00184ad:	75 09                	jne    c00184b8 <CPU::detectFeatures()+0x930>
c00184af:	50                   	push   eax
c00184b0:	50                   	push   eax
c00184b1:	68 aa 7f 02 c0       	push   0xc0027faa
c00184b6:	eb 23                	jmp    c00184db <CPU::detectFeatures()+0x953>
c00184b8:	83 f8 0c             	cmp    eax,0xc
c00184bb:	75 09                	jne    c00184c6 <CPU::detectFeatures()+0x93e>
c00184bd:	55                   	push   ebp
c00184be:	55                   	push   ebp
c00184bf:	68 b8 7f 02 c0       	push   0xc0027fb8
c00184c4:	eb 15                	jmp    c00184db <CPU::detectFeatures()+0x953>
c00184c6:	83 f8 0d             	cmp    eax,0xd
c00184c9:	75 09                	jne    c00184d4 <CPU::detectFeatures()+0x94c>
c00184cb:	57                   	push   edi
c00184cc:	57                   	push   edi
c00184cd:	68 c3 7f 02 c0       	push   0xc0027fc3
c00184d2:	eb 07                	jmp    c00184db <CPU::detectFeatures()+0x953>
c00184d4:	56                   	push   esi
c00184d5:	56                   	push   esi
c00184d6:	68 d7 7f 02 c0       	push   0xc0027fd7
c00184db:	53                   	push   ebx
c00184dc:	e8 5b b3 ff ff       	call   c001383c <Device::setName(char const*)>
c00184e1:	83 c4 10             	add    esp,0x10
c00184e4:	e9 82 00 00 00       	jmp    c001856b <CPU::detectFeatures()+0x9e3>
c00184e9:	51                   	push   ecx
c00184ea:	51                   	push   ecx
c00184eb:	68 23 7e 02 c0       	push   0xc0027e23
c00184f0:	57                   	push   edi
c00184f1:	e8 75 82 fe ff       	call   c000076b <strcpy>
c00184f6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018500:	e8 5e 7d fe ff       	call   c0000263 <is486>
c0018505:	83 c4 10             	add    esp,0x10
c0018508:	85 c0                	test   eax,eax
c001850a:	74 2d                	je     c0018539 <CPU::detectFeatures()+0x9b1>
c001850c:	52                   	push   edx
c001850d:	52                   	push   edx
c001850e:	68 e3 7f 02 c0       	push   0xc0027fe3
c0018513:	53                   	push   ebx
c0018514:	e8 23 b3 ff ff       	call   c001383c <Device::setName(char const*)>
c0018519:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018520:	e8 c3 ce 00 00       	call   c00253e8 <CPU::readCR0()>
c0018525:	83 c4 10             	add    esp,0x10
c0018528:	83 e0 14             	and    eax,0x14
c001852b:	83 f8 04             	cmp    eax,0x4
c001852e:	75 1f                	jne    c001854f <CPU::detectFeatures()+0x9c7>
c0018530:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0018537:	eb 32                	jmp    c001856b <CPU::detectFeatures()+0x9e3>
c0018539:	50                   	push   eax
c001853a:	50                   	push   eax
c001853b:	68 ee 7f 02 c0       	push   0xc0027fee
c0018540:	53                   	push   ebx
c0018541:	e8 f6 b2 ff ff       	call   c001383c <Device::setName(char const*)>
c0018546:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001854d:	eb d1                	jmp    c0018520 <CPU::detectFeatures()+0x998>
c001854f:	e8 ea 7c fe ff       	call   c000023e <hasLegacyFPU>
c0018554:	83 e0 01             	and    eax,0x1
c0018557:	8d 14 00             	lea    edx,[eax+eax*1]
c001855a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018560:	83 e0 fd             	and    eax,0xfffffffd
c0018563:	09 d0                	or     eax,edx
c0018565:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001856b:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018572:	83 c4 4c             	add    esp,0x4c
c0018575:	5b                   	pop    ebx
c0018576:	5e                   	pop    esi
c0018577:	5f                   	pop    edi
c0018578:	5d                   	pop    ebp
c0018579:	c3                   	ret    

c001857a <CPU::setupSMEP()>:
c001857a:	83 ec 0c             	sub    esp,0xc
c001857d:	e8 30 d1 00 00       	call   c00256b2 <CPU::readCR4()>
c0018582:	0d 00 00 10 00       	or     eax,0x100000
c0018587:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001858b:	83 c4 0c             	add    esp,0xc
c001858e:	e9 3a d1 00 00       	jmp    c00256cd <CPU::writeCR4(unsigned long)>
c0018593:	90                   	nop

c0018594 <CPU::setupUMIP()>:
c0018594:	83 ec 0c             	sub    esp,0xc
c0018597:	e8 16 d1 00 00       	call   c00256b2 <CPU::readCR4()>
c001859c:	80 cc 08             	or     ah,0x8
c001859f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185a3:	83 c4 0c             	add    esp,0xc
c00185a6:	e9 22 d1 00 00       	jmp    c00256cd <CPU::writeCR4(unsigned long)>
c00185ab:	90                   	nop

c00185ac <CPU::setupTSC()>:
c00185ac:	83 ec 0c             	sub    esp,0xc
c00185af:	e8 fe d0 00 00       	call   c00256b2 <CPU::readCR4()>
c00185b4:	83 c8 04             	or     eax,0x4
c00185b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185bb:	83 c4 0c             	add    esp,0xc
c00185be:	e9 0a d1 00 00       	jmp    c00256cd <CPU::writeCR4(unsigned long)>
c00185c3:	90                   	nop

c00185c4 <CPU::setupLargePages()>:
c00185c4:	83 ec 0c             	sub    esp,0xc
c00185c7:	e8 e6 d0 00 00       	call   c00256b2 <CPU::readCR4()>
c00185cc:	83 c8 10             	or     eax,0x10
c00185cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185d3:	83 c4 0c             	add    esp,0xc
c00185d6:	e9 f2 d0 00 00       	jmp    c00256cd <CPU::writeCR4(unsigned long)>
c00185db:	90                   	nop

c00185dc <CPU::setupPAT()>:
c00185dc:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c00185e1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00185e8:	74 2c                	je     c0018616 <CPU::setupPAT()+0x3a>
c00185ea:	53                   	push   ebx
c00185eb:	83 ec 10             	sub    esp,0x10
c00185ee:	68 77 02 00 00       	push   0x277
c00185f3:	50                   	push   eax
c00185f4:	e8 ed 60 ff ff       	call   c000e6e6 <Computer::rdmsr(unsigned int)>
c00185f9:	83 e2 f8             	and    edx,0xfffffff8
c00185fc:	83 ca 01             	or     edx,0x1
c00185ff:	52                   	push   edx
c0018600:	50                   	push   eax
c0018601:	68 77 02 00 00       	push   0x277
c0018606:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c001860c:	e8 01 61 ff ff       	call   c000e712 <Computer::wrmsr(unsigned int, unsigned long long)>
c0018611:	83 c4 28             	add    esp,0x28
c0018614:	5b                   	pop    ebx
c0018615:	c3                   	ret    
c0018616:	c3                   	ret    
c0018617:	90                   	nop

c0018618 <CPU::setupMTRR()>:
c0018618:	c3                   	ret    
c0018619:	90                   	nop

c001861a <CPU::setupGlobalPages()>:
c001861a:	83 ec 0c             	sub    esp,0xc
c001861d:	e8 90 d0 00 00       	call   c00256b2 <CPU::readCR4()>
c0018622:	0c 80                	or     al,0x80
c0018624:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018628:	83 c4 0c             	add    esp,0xc
c001862b:	e9 9d d0 00 00       	jmp    c00256cd <CPU::writeCR4(unsigned long)>

c0018630 <CPU::allowUsermodeDataAccess()>:
c0018630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018634:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001863b:	74 03                	je     c0018640 <CPU::allowUsermodeDataAccess()+0x10>
c001863d:	0f 01 cb             	stac   
c0018640:	c3                   	ret    
c0018641:	90                   	nop

c0018642 <CPU::prohibitUsermodeDataAccess()>:
c0018642:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018646:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001864d:	74 03                	je     c0018652 <CPU::prohibitUsermodeDataAccess()+0x10>
c001864f:	0f 01 ca             	clac   
c0018652:	c3                   	ret    
c0018653:	90                   	nop

c0018654 <CPU::setupSMAP()>:
c0018654:	53                   	push   ebx
c0018655:	83 ec 08             	sub    esp,0x8
c0018658:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001865c:	e8 51 d0 00 00       	call   c00256b2 <CPU::readCR4()>
c0018661:	83 ec 0c             	sub    esp,0xc
c0018664:	0d 00 00 20 00       	or     eax,0x200000
c0018669:	50                   	push   eax
c001866a:	e8 5e d0 00 00       	call   c00256cd <CPU::writeCR4(unsigned long)>
c001866f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0018673:	83 c4 18             	add    esp,0x18
c0018676:	5b                   	pop    ebx
c0018677:	eb c9                	jmp    c0018642 <CPU::prohibitUsermodeDataAccess()>
c0018679:	90                   	nop

c001867a <CPU::setupFeatures()>:
c001867a:	53                   	push   ebx
c001867b:	83 ec 08             	sub    esp,0x8
c001867e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018682:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018689:	74 0c                	je     c0018697 <CPU::setupFeatures()+0x1d>
c001868b:	83 ec 0c             	sub    esp,0xc
c001868e:	53                   	push   ebx
c001868f:	e8 e6 fe ff ff       	call   c001857a <CPU::setupSMEP()>
c0018694:	83 c4 10             	add    esp,0x10
c0018697:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001869e:	74 0c                	je     c00186ac <CPU::setupFeatures()+0x32>
c00186a0:	83 ec 0c             	sub    esp,0xc
c00186a3:	53                   	push   ebx
c00186a4:	e8 ab ff ff ff       	call   c0018654 <CPU::setupSMAP()>
c00186a9:	83 c4 10             	add    esp,0x10
c00186ac:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00186b3:	74 0c                	je     c00186c1 <CPU::setupFeatures()+0x47>
c00186b5:	83 ec 0c             	sub    esp,0xc
c00186b8:	53                   	push   ebx
c00186b9:	e8 d6 fe ff ff       	call   c0018594 <CPU::setupUMIP()>
c00186be:	83 c4 10             	add    esp,0x10
c00186c1:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00186c8:	74 0c                	je     c00186d6 <CPU::setupFeatures()+0x5c>
c00186ca:	83 ec 0c             	sub    esp,0xc
c00186cd:	53                   	push   ebx
c00186ce:	e8 d9 fe ff ff       	call   c00185ac <CPU::setupTSC()>
c00186d3:	83 c4 10             	add    esp,0x10
c00186d6:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00186dd:	74 0c                	je     c00186eb <CPU::setupFeatures()+0x71>
c00186df:	83 ec 0c             	sub    esp,0xc
c00186e2:	53                   	push   ebx
c00186e3:	e8 dc fe ff ff       	call   c00185c4 <CPU::setupLargePages()>
c00186e8:	83 c4 10             	add    esp,0x10
c00186eb:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00186f2:	74 0c                	je     c0018700 <CPU::setupFeatures()+0x86>
c00186f4:	83 ec 0c             	sub    esp,0xc
c00186f7:	53                   	push   ebx
c00186f8:	e8 1d ff ff ff       	call   c001861a <CPU::setupGlobalPages()>
c00186fd:	83 c4 10             	add    esp,0x10
c0018700:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018707:	74 0d                	je     c0018716 <CPU::setupFeatures()+0x9c>
c0018709:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001870d:	83 c4 08             	add    esp,0x8
c0018710:	5b                   	pop    ebx
c0018711:	e9 c6 fe ff ff       	jmp    c00185dc <CPU::setupPAT()>
c0018716:	83 c4 08             	add    esp,0x8
c0018719:	5b                   	pop    ebx
c001871a:	c3                   	ret    
c001871b:	90                   	nop

c001871c <CPU::open(int, int, void*)>:
c001871c:	57                   	push   edi
c001871d:	56                   	push   esi
c001871e:	53                   	push   ebx
c001871f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018723:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018727:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001872d:	83 ec 0c             	sub    esp,0xc
c0018730:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0018736:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001873c:	50                   	push   eax
c001873d:	e8 90 62 ff ff       	call   c000e9d2 <GDT::setup()>
c0018742:	83 c4 0c             	add    esp,0xc
c0018745:	6a 00                	push   0x0
c0018747:	68 ef be ad de       	push   0xdeadbeef
c001874c:	57                   	push   edi
c001874d:	e8 e8 84 ff ff       	call   c0010c3a <TSS::setup(unsigned long, unsigned long)>
c0018752:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018755:	e8 c0 84 ff ff       	call   c0010c1a <TSS::flush()>
c001875a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0018760:	89 04 24             	mov    DWORD PTR [esp],eax
c0018763:	e8 c4 64 ff ff       	call   c000ec2c <IDT::setup()>
c0018768:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c001876f:	e8 50 cf 00 00       	call   c00256c4 <CPU::writeDR7(unsigned long)>
c0018774:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001877e:	e8 6d 6f ff ff       	call   c000f6f0 <Phys::allocatePage()>
c0018783:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0018789:	89 30                	mov    DWORD PTR [eax],esi
c001878b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0018791:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0018794:	58                   	pop    eax
c0018795:	5a                   	pop    edx
c0018796:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001879c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00187a0:	e8 7b 94 ff ff       	call   c0011c20 <VAS::setCPUSpecific(unsigned long)>
c00187a5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187a8:	e8 db f3 ff ff       	call   c0017b88 <CPU::detectFeatures()>
c00187ad:	e8 7a c3 ff ff       	call   c0014b2c <setupInterruptController()>
c00187b2:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00187b8:	a1 20 a4 02 c0       	mov    eax,ds:0xc002a420
c00187bd:	83 e0 10             	and    eax,0x10
c00187c0:	83 f8 01             	cmp    eax,0x1
c00187c3:	19 c0                	sbb    eax,eax
c00187c5:	83 e0 46             	and    eax,0x46
c00187c8:	83 c0 1e             	add    eax,0x1e
c00187cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00187ce:	e8 03 d7 ff ff       	call   c0015ed6 <setupTimer(int)>
c00187d3:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00187d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187dc:	e8 99 fe ff ff       	call   c001867a <CPU::setupFeatures()>
c00187e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187e4:	e8 23 f1 ff ff       	call   c001790c <CPU::displayFeatures()>
c00187e9:	83 c4 10             	add    esp,0x10
c00187ec:	31 c0                	xor    eax,eax
c00187ee:	5b                   	pop    ebx
c00187ef:	5e                   	pop    esi
c00187f0:	5f                   	pop    edi
c00187f1:	c3                   	ret    

c00187f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00187f2:	57                   	push   edi
c00187f3:	56                   	push   esi
c00187f4:	53                   	push   ebx
c00187f5:	51                   	push   ecx
c00187f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00187fa:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00187fd:	0f 02 c0             	lar    eax,ax
c0018800:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0018803:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018807:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c001880a:	88 ca                	mov    dl,cl
c001880c:	c0 ea 06             	shr    dl,0x6
c001880f:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0018813:	89 ca                	mov    edx,ecx
c0018815:	66 c1 ea 03          	shr    dx,0x3
c0018819:	83 e2 07             	and    edx,0x7
c001881c:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0018821:	88 17                	mov    BYTE PTR [edi],dl
c0018823:	0f 84 a6 01 00 00    	je     c00189cf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0018829:	83 e1 07             	and    ecx,0x7
c001882c:	80 f9 04             	cmp    cl,0x4
c001882f:	0f 84 98 00 00 00    	je     c00188cd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0018835:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001883a:	0f 95 c0             	setne  al
c001883d:	80 f9 05             	cmp    cl,0x5
c0018840:	0f 95 c2             	setne  dl
c0018843:	08 c2                	or     dl,al
c0018845:	74 79                	je     c00188c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0018847:	84 c9                	test   cl,cl
c0018849:	75 05                	jne    c0018850 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001884b:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001884e:	eb 3c                	jmp    c001888c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018850:	80 f9 01             	cmp    cl,0x1
c0018853:	75 05                	jne    c001885a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0018855:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0018858:	eb 32                	jmp    c001888c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001885a:	80 f9 02             	cmp    cl,0x2
c001885d:	75 05                	jne    c0018864 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001885f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018862:	eb 28                	jmp    c001888c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018864:	31 c0                	xor    eax,eax
c0018866:	80 f9 03             	cmp    cl,0x3
c0018869:	75 05                	jne    c0018870 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001886b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001886e:	eb 1c                	jmp    c001888c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018870:	80 f9 05             	cmp    cl,0x5
c0018873:	75 05                	jne    c001887a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0018875:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0018878:	eb 12                	jmp    c001888c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001887a:	80 f9 06             	cmp    cl,0x6
c001887d:	75 05                	jne    c0018884 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001887f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018882:	eb 08                	jmp    c001888c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018884:	80 f9 07             	cmp    cl,0x7
c0018887:	75 03                	jne    c001888c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0018889:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001888c:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0018891:	75 10                	jne    c00188a3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0018893:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0018897:	b9 03 00 00 00       	mov    ecx,0x3
c001889c:	01 d0                	add    eax,edx
c001889e:	e9 37 01 00 00       	jmp    c00189da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00188a3:	b9 02 00 00 00       	mov    ecx,0x2
c00188a8:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00188ad:	0f 85 27 01 00 00    	jne    c00189da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00188b3:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00188b6:	b9 06 00 00 00       	mov    ecx,0x6
c00188bb:	e9 1a 01 00 00       	jmp    c00189da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00188c0:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00188c3:	b9 06 00 00 00       	mov    ecx,0x6
c00188c8:	e9 0f 01 00 00       	jmp    c00189dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00188cd:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00188d0:	88 ca                	mov    dl,cl
c00188d2:	c0 ea 06             	shr    dl,0x6
c00188d5:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00188d9:	89 ca                	mov    edx,ecx
c00188db:	66 c1 ea 03          	shr    dx,0x3
c00188df:	83 e2 07             	and    edx,0x7
c00188e2:	80 e1 07             	and    cl,0x7
c00188e5:	75 05                	jne    c00188ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00188e7:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00188ea:	eb 4c                	jmp    c0018938 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00188ec:	80 f9 01             	cmp    cl,0x1
c00188ef:	75 05                	jne    c00188f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00188f1:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00188f4:	eb 42                	jmp    c0018938 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00188f6:	80 f9 02             	cmp    cl,0x2
c00188f9:	75 05                	jne    c0018900 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00188fb:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00188fe:	eb 38                	jmp    c0018938 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018900:	80 f9 03             	cmp    cl,0x3
c0018903:	75 05                	jne    c001890a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0018905:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0018908:	eb 2e                	jmp    c0018938 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001890a:	80 f9 04             	cmp    cl,0x4
c001890d:	75 12                	jne    c0018921 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001890f:	f6 c4 60             	test   ah,0x60
c0018912:	75 08                	jne    c001891c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0018914:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0018917:	8d 78 14             	lea    edi,[eax+0x14]
c001891a:	eb 1c                	jmp    c0018938 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001891c:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001891f:	eb 17                	jmp    c0018938 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018921:	80 f9 05             	cmp    cl,0x5
c0018924:	75 05                	jne    c001892b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0018926:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0018929:	eb 0d                	jmp    c0018938 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001892b:	80 f9 06             	cmp    cl,0x6
c001892e:	75 05                	jne    c0018935 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0018930:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0018933:	eb 03                	jmp    c0018938 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0018935:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0018938:	84 d2                	test   dl,dl
c001893a:	75 05                	jne    c0018941 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001893c:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001893f:	eb 3c                	jmp    c001897d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018941:	80 fa 01             	cmp    dl,0x1
c0018944:	75 05                	jne    c001894b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0018946:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0018949:	eb 32                	jmp    c001897d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001894b:	80 fa 02             	cmp    dl,0x2
c001894e:	75 05                	jne    c0018955 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0018950:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0018953:	eb 28                	jmp    c001897d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018955:	80 fa 03             	cmp    dl,0x3
c0018958:	75 05                	jne    c001895f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001895a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001895d:	eb 1e                	jmp    c001897d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001895f:	31 c0                	xor    eax,eax
c0018961:	80 fa 04             	cmp    dl,0x4
c0018964:	74 17                	je     c001897d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018966:	80 fa 05             	cmp    dl,0x5
c0018969:	75 05                	jne    c0018970 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001896b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001896e:	eb 0d                	jmp    c001897d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0018970:	80 fa 06             	cmp    dl,0x6
c0018973:	75 05                	jne    c001897a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0018975:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018978:	eb 03                	jmp    c001897d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001897a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001897d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0018982:	0f 94 c2             	sete   dl
c0018985:	80 f9 05             	cmp    cl,0x5
c0018988:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001898c:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0018991:	d3 e0                	shl    eax,cl
c0018993:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0018997:	74 0a                	je     c00189a3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0018999:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001899c:	b9 07 00 00 00       	mov    ecx,0x7
c00189a1:	eb 37                	jmp    c00189da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00189a3:	01 f8                	add    eax,edi
c00189a5:	b9 03 00 00 00       	mov    ecx,0x3
c00189aa:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00189af:	74 2b                	je     c00189dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189b1:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00189b6:	75 0d                	jne    c00189c5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00189b8:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00189bc:	01 c8                	add    eax,ecx
c00189be:	b9 04 00 00 00       	mov    ecx,0x4
c00189c3:	eb 17                	jmp    c00189dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189c5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00189c8:	b9 07 00 00 00       	mov    ecx,0x7
c00189cd:	eb 0d                	jmp    c00189dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189cf:	b9 02 00 00 00       	mov    ecx,0x2
c00189d4:	b2 01                	mov    dl,0x1
c00189d6:	31 c0                	xor    eax,eax
c00189d8:	eb 02                	jmp    c00189dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00189da:	31 d2                	xor    edx,edx
c00189dc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00189e0:	89 0b                	mov    DWORD PTR [ebx],ecx
c00189e2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00189e6:	88 11                	mov    BYTE PTR [ecx],dl
c00189e8:	5a                   	pop    edx
c00189e9:	5b                   	pop    ebx
c00189ea:	5e                   	pop    esi
c00189eb:	5f                   	pop    edi
c00189ec:	c3                   	ret    

c00189ed <Krnl::panic(char const*)>:
c00189ed:	55                   	push   ebp
c00189ee:	89 e5                	mov    ebp,esp
c00189f0:	53                   	push   ebx
c00189f1:	50                   	push   eax
c00189f2:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c00189f7:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00189fa:	85 c0                	test   eax,eax
c00189fc:	74 02                	je     c0018a00 <Krnl::panic(char const*)+0x13>
c00189fe:	ff d0                	call   eax
c0018a00:	fa                   	cli    
c0018a01:	c6 05 54 ae 02 c0 01 	mov    BYTE PTR ds:0xc002ae54,0x1
c0018a08:	83 ec 08             	sub    esp,0x8
c0018a0b:	c6 05 c0 93 02 c0 00 	mov    BYTE PTR ds:0xc00293c0,0x0
c0018a12:	53                   	push   ebx
c0018a13:	68 28 80 02 c0       	push   0xc0028028
c0018a18:	e8 32 98 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0018a1d:	58                   	pop    eax
c0018a1e:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a23:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a29:	e8 4d 7a ff ff       	call   c001047b <setActiveTerminal(VgaText*)>
c0018a2e:	83 c4 0c             	add    esp,0xc
c0018a31:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a36:	6a 01                	push   0x1
c0018a38:	6a 0f                	push   0xf
c0018a3a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a40:	e8 75 74 ff ff       	call   c000feba <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018a45:	5a                   	pop    edx
c0018a46:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a4b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a51:	e8 c6 7c ff ff       	call   c001071c <VgaText::clearScreen()>
c0018a56:	59                   	pop    ecx
c0018a57:	58                   	pop    eax
c0018a58:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a5d:	68 41 80 02 c0       	push   0xc0028041
c0018a62:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a68:	e8 2d 7e ff ff       	call   c001089a <VgaText::puts(char const*)>
c0018a6d:	58                   	pop    eax
c0018a6e:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a73:	5a                   	pop    edx
c0018a74:	68 e8 80 02 c0       	push   0xc00280e8
c0018a79:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a7f:	e8 16 7e ff ff       	call   c001089a <VgaText::puts(char const*)>
c0018a84:	59                   	pop    ecx
c0018a85:	58                   	pop    eax
c0018a86:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018a8b:	68 5d 80 02 c0       	push   0xc002805d
c0018a90:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018a96:	e8 ff 7d ff ff       	call   c001089a <VgaText::puts(char const*)>
c0018a9b:	58                   	pop    eax
c0018a9c:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018aa1:	5a                   	pop    edx
c0018aa2:	53                   	push   ebx
c0018aa3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018aa9:	e8 ec 7d ff ff       	call   c001089a <VgaText::puts(char const*)>
c0018aae:	59                   	pop    ecx
c0018aaf:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018ab4:	5b                   	pop    ebx
c0018ab5:	68 7d 80 02 c0       	push   0xc002807d
c0018aba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ac0:	e8 d5 7d ff ff       	call   c001089a <VgaText::puts(char const*)>
c0018ac5:	58                   	pop    eax
c0018ac6:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018acb:	5a                   	pop    edx
c0018acc:	68 24 81 02 c0       	push   0xc0028124
c0018ad1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ad7:	e8 be 7d ff ff       	call   c001089a <VgaText::puts(char const*)>
c0018adc:	59                   	pop    ecx
c0018add:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018ae2:	5b                   	pop    ebx
c0018ae3:	68 5d 80 02 c0       	push   0xc002805d
c0018ae8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018aee:	e8 a7 7d ff ff       	call   c001089a <VgaText::puts(char const*)>
c0018af3:	58                   	pop    eax
c0018af4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018af9:	5a                   	pop    edx
c0018afa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018afd:	83 c0 0c             	add    eax,0xc
c0018b00:	50                   	push   eax
c0018b01:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018b06:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b0c:	e8 89 7d ff ff       	call   c001089a <VgaText::puts(char const*)>
c0018b11:	59                   	pop    ecx
c0018b12:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018b17:	5b                   	pop    ebx
c0018b18:	68 7c 80 02 c0       	push   0xc002807c
c0018b1d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b23:	e8 72 7d ff ff       	call   c001089a <VgaText::puts(char const*)>
c0018b28:	58                   	pop    eax
c0018b29:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018b2e:	5a                   	pop    edx
c0018b2f:	68 50 81 02 c0       	push   0xc0028150
c0018b34:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b3a:	e8 5b 7d ff ff       	call   c001089a <VgaText::puts(char const*)>
c0018b3f:	59                   	pop    ecx
c0018b40:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018b45:	5b                   	pop    ebx
c0018b46:	68 90 81 02 c0       	push   0xc0028190
c0018b4b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b51:	e8 44 7d ff ff       	call   c001089a <VgaText::puts(char const*)>
c0018b56:	58                   	pop    eax
c0018b57:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018b5c:	5a                   	pop    edx
c0018b5d:	68 68 80 02 c0       	push   0xc0028068
c0018b62:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018b68:	e8 2d 7d ff ff       	call   c001089a <VgaText::puts(char const*)>
c0018b6d:	59                   	pop    ecx
c0018b6e:	5b                   	pop    ebx
c0018b6f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0018b72:	68 80 80 02 c0       	push   0xc0028080
c0018b77:	e8 d3 96 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0018b7c:	58                   	pop    eax
c0018b7d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018b80:	5a                   	pop    edx
c0018b81:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018b84:	68 89 80 02 c0       	push   0xc0028089
c0018b89:	e8 c1 96 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0018b8e:	59                   	pop    ecx
c0018b8f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018b92:	5b                   	pop    ebx
c0018b93:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b95:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0018b98:	68 92 80 02 c0       	push   0xc0028092
c0018b9d:	e8 ad 96 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0018ba2:	58                   	pop    eax
c0018ba3:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018ba8:	5a                   	pop    edx
c0018ba9:	68 d4 81 02 c0       	push   0xc00281d4
c0018bae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bb4:	e8 e1 7c ff ff       	call   c001089a <VgaText::puts(char const*)>
c0018bb9:	59                   	pop    ecx
c0018bba:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018bbf:	5b                   	pop    ebx
c0018bc0:	68 9b 80 02 c0       	push   0xc002809b
c0018bc5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bcb:	e8 ca 7c ff ff       	call   c001089a <VgaText::puts(char const*)>
c0018bd0:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018bd5:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018bdb:	e8 08 c8 00 00       	call   c00253e8 <CPU::readCR0()>
c0018be0:	5a                   	pop    edx
c0018be1:	59                   	pop    ecx
c0018be2:	50                   	push   eax
c0018be3:	53                   	push   ebx
c0018be4:	e8 d7 7c ff ff       	call   c00108c0 <VgaText::putx(unsigned int)>
c0018be9:	5b                   	pop    ebx
c0018bea:	58                   	pop    eax
c0018beb:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018bf0:	68 a5 80 02 c0       	push   0xc00280a5
c0018bf5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018bfb:	e8 9a 7c ff ff       	call   c001089a <VgaText::puts(char const*)>
c0018c00:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c05:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018c0b:	e8 c6 ca 00 00       	call   c00256d6 <CPU::readCR2()>
c0018c10:	5a                   	pop    edx
c0018c11:	59                   	pop    ecx
c0018c12:	50                   	push   eax
c0018c13:	53                   	push   ebx
c0018c14:	e8 a7 7c ff ff       	call   c00108c0 <VgaText::putx(unsigned int)>
c0018c19:	5b                   	pop    ebx
c0018c1a:	58                   	pop    eax
c0018c1b:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c20:	68 af 80 02 c0       	push   0xc00280af
c0018c25:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c2b:	e8 6a 7c ff ff       	call   c001089a <VgaText::puts(char const*)>
c0018c30:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c35:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018c3b:	e8 35 c4 00 00       	call   c0025075 <CPU::readCR3()>
c0018c40:	5a                   	pop    edx
c0018c41:	59                   	pop    ecx
c0018c42:	50                   	push   eax
c0018c43:	53                   	push   ebx
c0018c44:	e8 77 7c ff ff       	call   c00108c0 <VgaText::putx(unsigned int)>
c0018c49:	5b                   	pop    ebx
c0018c4a:	58                   	pop    eax
c0018c4b:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c50:	68 c2 80 02 c0       	push   0xc00280c2
c0018c55:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c5b:	e8 3a 7c ff ff       	call   c001089a <VgaText::puts(char const*)>
c0018c60:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c65:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0018c6b:	e8 42 ca 00 00       	call   c00256b2 <CPU::readCR4()>
c0018c70:	5a                   	pop    edx
c0018c71:	59                   	pop    ecx
c0018c72:	50                   	push   eax
c0018c73:	53                   	push   ebx
c0018c74:	e8 47 7c ff ff       	call   c00108c0 <VgaText::putx(unsigned int)>
c0018c79:	5b                   	pop    ebx
c0018c7a:	58                   	pop    eax
c0018c7b:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c80:	68 cc 80 02 c0       	push   0xc00280cc
c0018c85:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018c8b:	e8 0a 7c ff ff       	call   c001089a <VgaText::puts(char const*)>
c0018c90:	5a                   	pop    edx
c0018c91:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018c96:	59                   	pop    ecx
c0018c97:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018c9d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0018ca0:	50                   	push   eax
c0018ca1:	e8 1a 7c ff ff       	call   c00108c0 <VgaText::putx(unsigned int)>
c0018ca6:	5b                   	pop    ebx
c0018ca7:	58                   	pop    eax
c0018ca8:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018cad:	68 e3 80 02 c0       	push   0xc00280e3
c0018cb2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018cb8:	e8 dd 7b ff ff       	call   c001089a <VgaText::puts(char const*)>
c0018cbd:	5a                   	pop    edx
c0018cbe:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018cc3:	59                   	pop    ecx
c0018cc4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018cca:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018ccd:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0018cd0:	50                   	push   eax
c0018cd1:	e8 ea 7b ff ff       	call   c00108c0 <VgaText::putx(unsigned int)>
c0018cd6:	5b                   	pop    ebx
c0018cd7:	58                   	pop    eax
c0018cd8:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018cdd:	68 e3 80 02 c0       	push   0xc00280e3
c0018ce2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0018ce8:	e8 ad 7b ff ff       	call   c001089a <VgaText::puts(char const*)>
c0018ced:	59                   	pop    ecx
c0018cee:	a1 54 b8 02 c0       	mov    eax,ds:0xc002b854
c0018cf3:	5b                   	pop    ebx
c0018cf4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018cfa:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0018cfd:	8b 12                	mov    edx,DWORD PTR [edx]
c0018cff:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0018d02:	50                   	push   eax
c0018d03:	e8 b8 7b ff ff       	call   c00108c0 <VgaText::putx(unsigned int)>
c0018d08:	83 c4 10             	add    esp,0x10
c0018d0b:	b2 fe                	mov    dl,0xfe
c0018d0d:	e4 60                	in     al,0x60
c0018d0f:	3c 1c                	cmp    al,0x1c
c0018d11:	74 04                	je     c0018d17 <Krnl::panic(char const*)+0x32a>
c0018d13:	3c 5a                	cmp    al,0x5a
c0018d15:	75 f6                	jne    c0018d0d <Krnl::panic(char const*)+0x320>
c0018d17:	e4 64                	in     al,0x64
c0018d19:	a8 02                	test   al,0x2
c0018d1b:	75 fa                	jne    c0018d17 <Krnl::panic(char const*)+0x32a>
c0018d1d:	88 d0                	mov    al,dl
c0018d1f:	e6 64                	out    0x64,al
c0018d21:	fa                   	cli    
c0018d22:	f4                   	hlt    
c0018d23:	eb e8                	jmp    c0018d0d <Krnl::panic(char const*)+0x320>

c0018d25 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0018d25:	55                   	push   ebp
c0018d26:	57                   	push   edi
c0018d27:	56                   	push   esi
c0018d28:	53                   	push   ebx
c0018d29:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018d2f:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0018d36:	8a 1e                	mov    bl,BYTE PTR [esi]
c0018d38:	8d 6e 01             	lea    ebp,[esi+0x1]
c0018d3b:	80 fb 40             	cmp    bl,0x40
c0018d3e:	75 1b                	jne    c0018d5b <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0018d40:	8a 16                	mov    dl,BYTE PTR [esi]
c0018d42:	84 d2                	test   dl,dl
c0018d44:	0f 84 f1 00 00 00    	je     c0018e3b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018d4a:	8d 46 01             	lea    eax,[esi+0x1]
c0018d4d:	80 fa 3a             	cmp    dl,0x3a
c0018d50:	74 04                	je     c0018d56 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0018d52:	89 c6                	mov    esi,eax
c0018d54:	eb ea                	jmp    c0018d40 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0018d56:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0018d59:	89 c6                	mov    esi,eax
c0018d5b:	50                   	push   eax
c0018d5c:	6a 40                	push   0x40
c0018d5e:	6a 00                	push   0x0
c0018d60:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018d64:	50                   	push   eax
c0018d65:	e8 62 79 fe ff       	call   c00006cc <memset>
c0018d6a:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0018d71:	31 c0                	xor    eax,eax
c0018d73:	83 c4 10             	add    esp,0x10
c0018d76:	8a 0f                	mov    cl,BYTE PTR [edi]
c0018d78:	84 c9                	test   cl,cl
c0018d7a:	0f 84 bb 00 00 00    	je     c0018e3b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018d80:	3d c7 00 00 00       	cmp    eax,0xc7
c0018d85:	0f 8f b0 00 00 00    	jg     c0018e3b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018d8b:	80 f9 0a             	cmp    cl,0xa
c0018d8e:	0f 85 98 00 00 00    	jne    c0018e2c <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0018d94:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0018d99:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0018d9d:	a8 df                	test   al,0xdf
c0018d9f:	0f 94 c1             	sete   cl
c0018da2:	3c 23                	cmp    al,0x23
c0018da4:	0f 94 c2             	sete   dl
c0018da7:	08 d1                	or     cl,dl
c0018da9:	75 4a                	jne    c0018df5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018dab:	8d 50 f7             	lea    edx,[eax-0x9]
c0018dae:	80 fa 01             	cmp    dl,0x1
c0018db1:	76 42                	jbe    c0018df5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018db3:	3c 5b                	cmp    al,0x5b
c0018db5:	75 42                	jne    c0018df9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0018db7:	80 fb 40             	cmp    bl,0x40
c0018dba:	75 39                	jne    c0018df5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018dbc:	83 ec 0c             	sub    esp,0xc
c0018dbf:	8d 54 24 65          	lea    edx,[esp+0x65]
c0018dc3:	52                   	push   edx
c0018dc4:	e8 20 79 fe ff       	call   c00006e9 <strlen>
c0018dc9:	83 c4 10             	add    esp,0x10
c0018dcc:	83 f8 3f             	cmp    eax,0x3f
c0018dcf:	77 6a                	ja     c0018e3b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018dd1:	50                   	push   eax
c0018dd2:	50                   	push   eax
c0018dd3:	8d 54 24 61          	lea    edx,[esp+0x61]
c0018dd7:	52                   	push   edx
c0018dd8:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018ddc:	52                   	push   edx
c0018ddd:	e8 89 79 fe ff       	call   c000076b <strcpy>
c0018de2:	58                   	pop    eax
c0018de3:	8d 54 24 24          	lea    edx,[esp+0x24]
c0018de7:	52                   	push   edx
c0018de8:	e8 fc 78 fe ff       	call   c00006e9 <strlen>
c0018ded:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0018df2:	83 c4 10             	add    esp,0x10
c0018df5:	31 d2                	xor    edx,edx
c0018df7:	eb 3a                	jmp    c0018e33 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0018df9:	80 fb 40             	cmp    bl,0x40
c0018dfc:	74 06                	je     c0018e04 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0018dfe:	8d 44 24 58          	lea    eax,[esp+0x58]
c0018e02:	eb 20                	jmp    c0018e24 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0018e04:	50                   	push   eax
c0018e05:	50                   	push   eax
c0018e06:	55                   	push   ebp
c0018e07:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018e0b:	50                   	push   eax
c0018e0c:	e8 ab 79 fe ff       	call   c00007bc <strcmp>
c0018e11:	83 c4 10             	add    esp,0x10
c0018e14:	85 c0                	test   eax,eax
c0018e16:	75 dd                	jne    c0018df5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018e18:	eb e4                	jmp    c0018dfe <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0018e1a:	8d 50 01             	lea    edx,[eax+0x1]
c0018e1d:	80 f9 3d             	cmp    cl,0x3d
c0018e20:	74 1d                	je     c0018e3f <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0018e22:	89 d0                	mov    eax,edx
c0018e24:	8a 08                	mov    cl,BYTE PTR [eax]
c0018e26:	84 c9                	test   cl,cl
c0018e28:	75 f0                	jne    c0018e1a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0018e2a:	eb 0f                	jmp    c0018e3b <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0018e2c:	8d 50 01             	lea    edx,[eax+0x1]
c0018e2f:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0018e33:	47                   	inc    edi
c0018e34:	89 d0                	mov    eax,edx
c0018e36:	e9 3b ff ff ff       	jmp    c0018d76 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0018e3b:	31 c0                	xor    eax,eax
c0018e3d:	eb 33                	jmp    c0018e72 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0018e3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018e43:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018e46:	50                   	push   eax
c0018e47:	50                   	push   eax
c0018e48:	8d 44 24 60          	lea    eax,[esp+0x60]
c0018e4c:	50                   	push   eax
c0018e4d:	56                   	push   esi
c0018e4e:	e8 69 79 fe ff       	call   c00007bc <strcmp>
c0018e53:	83 c4 10             	add    esp,0x10
c0018e56:	85 c0                	test   eax,eax
c0018e58:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e5c:	75 97                	jne    c0018df5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0018e5e:	51                   	push   ecx
c0018e5f:	51                   	push   ecx
c0018e60:	52                   	push   edx
c0018e61:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018e68:	e8 fe 78 fe ff       	call   c000076b <strcpy>
c0018e6d:	83 c4 10             	add    esp,0x10
c0018e70:	b0 01                	mov    al,0x1
c0018e72:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018e78:	5b                   	pop    ebx
c0018e79:	5e                   	pop    esi
c0018e7a:	5f                   	pop    edi
c0018e7b:	5d                   	pop    ebp
c0018e7c:	c3                   	ret    

c0018e7d <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0018e7d:	57                   	push   edi
c0018e7e:	56                   	push   esi
c0018e7f:	53                   	push   ebx
c0018e80:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018e86:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0018e8d:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0018e94:	53                   	push   ebx
c0018e95:	e8 4f 78 fe ff       	call   c00006e9 <strlen>
c0018e9a:	89 34 24             	mov    DWORD PTR [esp],esi
c0018e9d:	89 c7                	mov    edi,eax
c0018e9f:	e8 45 78 fe ff       	call   c00006e9 <strlen>
c0018ea4:	83 c4 10             	add    esp,0x10
c0018ea7:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0018eab:	31 ff                	xor    edi,edi
c0018ead:	3d ff 00 00 00       	cmp    eax,0xff
c0018eb2:	0f 87 18 01 00 00    	ja     c0018fd0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0018eb8:	51                   	push   ecx
c0018eb9:	51                   	push   ecx
c0018eba:	56                   	push   esi
c0018ebb:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0018ebf:	56                   	push   esi
c0018ec0:	e8 a6 78 fe ff       	call   c000076b <strcpy>
c0018ec5:	58                   	pop    eax
c0018ec6:	5a                   	pop    edx
c0018ec7:	68 cc 85 02 c0       	push   0xc00285cc
c0018ecc:	56                   	push   esi
c0018ecd:	e8 50 79 fe ff       	call   c0000822 <strcat>
c0018ed2:	59                   	pop    ecx
c0018ed3:	58                   	pop    eax
c0018ed4:	53                   	push   ebx
c0018ed5:	56                   	push   esi
c0018ed6:	e8 47 79 fe ff       	call   c0000822 <strcat>
c0018edb:	58                   	pop    eax
c0018edc:	5a                   	pop    edx
c0018edd:	68 fa 81 02 c0       	push   0xc00281fa
c0018ee2:	56                   	push   esi
c0018ee3:	e8 3a 79 fe ff       	call   c0000822 <strcat>
c0018ee8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018eef:	e8 6c 92 ff ff       	call   c0012160 <operator new(unsigned long)>
c0018ef4:	83 c4 0c             	add    esp,0xc
c0018ef7:	89 c3                	mov    ebx,eax
c0018ef9:	ff 35 54 b8 02 c0    	push   DWORD PTR ds:0xc002b854
c0018eff:	56                   	push   esi
c0018f00:	50                   	push   eax
c0018f01:	e8 78 98 ff ff       	call   c001277e <File::File(char const*, Process*)>
c0018f06:	59                   	pop    ecx
c0018f07:	5e                   	pop    esi
c0018f08:	6a 01                	push   0x1
c0018f0a:	53                   	push   ebx
c0018f0b:	e8 d2 98 ff ff       	call   c00127e2 <File::open(FileOpenMode)>
c0018f10:	83 c4 10             	add    esp,0x10
c0018f13:	85 c0                	test   eax,eax
c0018f15:	74 08                	je     c0018f1f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0018f17:	83 ec 0c             	sub    esp,0xc
c0018f1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f1c:	53                   	push   ebx
c0018f1d:	eb 2e                	jmp    c0018f4d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0018f1f:	52                   	push   edx
c0018f20:	8d 44 24 07          	lea    eax,[esp+0x7]
c0018f24:	50                   	push   eax
c0018f25:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018f29:	50                   	push   eax
c0018f2a:	53                   	push   ebx
c0018f2b:	e8 5e 9b ff ff       	call   c0012a8e <File::stat(unsigned long long*, bool*)>
c0018f30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018f34:	83 c4 10             	add    esp,0x10
c0018f37:	89 c1                	mov    ecx,eax
c0018f39:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0018f3d:	75 13                	jne    c0018f52 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0018f3f:	83 ec 0c             	sub    esp,0xc
c0018f42:	53                   	push   ebx
c0018f43:	e8 f8 98 ff ff       	call   c0012840 <File::close()>
c0018f48:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f4d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018f50:	eb 7b                	jmp    c0018fcd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0018f52:	83 ec 0c             	sub    esp,0xc
c0018f55:	50                   	push   eax
c0018f56:	e8 eb 61 ff ff       	call   c000f146 <malloc>
c0018f5b:	89 c6                	mov    esi,eax
c0018f5d:	58                   	pop    eax
c0018f5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f60:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018f64:	52                   	push   edx
c0018f65:	56                   	push   esi
c0018f66:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018f6a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018f6e:	53                   	push   ebx
c0018f6f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0018f72:	83 c4 20             	add    esp,0x20
c0018f75:	85 c0                	test   eax,eax
c0018f77:	75 0a                	jne    c0018f83 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0018f79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f7d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018f81:	74 18                	je     c0018f9b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0018f83:	83 ec 0c             	sub    esp,0xc
c0018f86:	31 ff                	xor    edi,edi
c0018f88:	53                   	push   ebx
c0018f89:	e8 b2 98 ff ff       	call   c0012840 <File::close()>
c0018f8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018f90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018f93:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018f96:	83 c4 10             	add    esp,0x10
c0018f99:	eb 35                	jmp    c0018fd0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0018f9b:	83 ec 0c             	sub    esp,0xc
c0018f9e:	53                   	push   ebx
c0018f9f:	e8 9c 98 ff ff       	call   c0012840 <File::close()>
c0018fa4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018fa6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018fa9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018fac:	83 c4 0c             	add    esp,0xc
c0018faf:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0018fb6:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0018fbd:	56                   	push   esi
c0018fbe:	e8 62 fd ff ff       	call   c0018d25 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0018fc3:	89 34 24             	mov    DWORD PTR [esp],esi
c0018fc6:	89 c7                	mov    edi,eax
c0018fc8:	e8 89 61 ff ff       	call   c000f156 <free>
c0018fcd:	83 c4 10             	add    esp,0x10
c0018fd0:	81 c4 10 01 00 00    	add    esp,0x110
c0018fd6:	89 f8                	mov    eax,edi
c0018fd8:	5b                   	pop    ebx
c0018fd9:	5e                   	pop    esi
c0018fda:	5f                   	pop    edi
c0018fdb:	c3                   	ret    

c0018fdc <Reg::getLine(char*, char*, char*)>:
c0018fdc:	57                   	push   edi
c0018fdd:	56                   	push   esi
c0018fde:	53                   	push   ebx
c0018fdf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018fe3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018fe7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0018feb:	57                   	push   edi
c0018fec:	56                   	push   esi
c0018fed:	53                   	push   ebx
c0018fee:	68 ff 81 02 c0       	push   0xc00281ff
c0018ff3:	e8 85 fe ff ff       	call   c0018e7d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0018ff8:	83 c4 10             	add    esp,0x10
c0018ffb:	84 c0                	test   al,al
c0018ffd:	75 10                	jne    c001900f <Reg::getLine(char*, char*, char*)+0x33>
c0018fff:	57                   	push   edi
c0019000:	56                   	push   esi
c0019001:	53                   	push   ebx
c0019002:	68 24 82 02 c0       	push   0xc0028224
c0019007:	e8 71 fe ff ff       	call   c0018e7d <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001900c:	83 c4 10             	add    esp,0x10
c001900f:	5b                   	pop    ebx
c0019010:	5e                   	pop    esi
c0019011:	5f                   	pop    edi
c0019012:	c3                   	ret    

c0019013 <Reg::readInt(char*, char*, int*)>:
c0019013:	55                   	push   ebp
c0019014:	57                   	push   edi
c0019015:	56                   	push   esi
c0019016:	53                   	push   ebx
c0019017:	81 ec f0 00 00 00    	sub    esp,0xf0
c001901d:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0019021:	57                   	push   edi
c0019022:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0019029:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0019030:	e8 a7 ff ff ff       	call   c0018fdc <Reg::getLine(char*, char*, char*)>
c0019035:	83 c4 10             	add    esp,0x10
c0019038:	84 c0                	test   al,al
c001903a:	0f 84 b3 00 00 00    	je     c00190f3 <Reg::readInt(char*, char*, int*)+0xe0>
c0019040:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0019044:	80 fa 2b             	cmp    dl,0x2b
c0019047:	74 0c                	je     c0019055 <Reg::readInt(char*, char*, int*)+0x42>
c0019049:	80 fa 2d             	cmp    dl,0x2d
c001904c:	75 0e                	jne    c001905c <Reg::readInt(char*, char*, int*)+0x49>
c001904e:	ba 01 00 00 00       	mov    edx,0x1
c0019053:	eb 0b                	jmp    c0019060 <Reg::readInt(char*, char*, int*)+0x4d>
c0019055:	ba 01 00 00 00       	mov    edx,0x1
c001905a:	eb 02                	jmp    c001905e <Reg::readInt(char*, char*, int*)+0x4b>
c001905c:	31 d2                	xor    edx,edx
c001905e:	31 c0                	xor    eax,eax
c0019060:	be 0a 00 00 00       	mov    esi,0xa
c0019065:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001906a:	75 20                	jne    c001908c <Reg::readInt(char*, char*, int*)+0x79>
c001906c:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0019070:	80 f9 78             	cmp    cl,0x78
c0019073:	75 0a                	jne    c001907f <Reg::readInt(char*, char*, int*)+0x6c>
c0019075:	83 c2 02             	add    edx,0x2
c0019078:	be 10 00 00 00       	mov    esi,0x10
c001907d:	eb 0d                	jmp    c001908c <Reg::readInt(char*, char*, int*)+0x79>
c001907f:	80 f9 62             	cmp    cl,0x62
c0019082:	75 08                	jne    c001908c <Reg::readInt(char*, char*, int*)+0x79>
c0019084:	83 c2 02             	add    edx,0x2
c0019087:	be 02 00 00 00       	mov    esi,0x2
c001908c:	01 d7                	add    edi,edx
c001908e:	31 d2                	xor    edx,edx
c0019090:	8a 1f                	mov    bl,BYTE PTR [edi]
c0019092:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0019096:	80 fb 0d             	cmp    bl,0xd
c0019099:	0f 94 c3             	sete   bl
c001909c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00190a1:	0f 94 c1             	sete   cl
c00190a4:	08 cb                	or     bl,cl
c00190a6:	75 3a                	jne    c00190e2 <Reg::readInt(char*, char*, int*)+0xcf>
c00190a8:	0f af d6             	imul   edx,esi
c00190ab:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00190b0:	83 fe 10             	cmp    esi,0x10
c00190b3:	75 26                	jne    c00190db <Reg::readInt(char*, char*, int*)+0xc8>
c00190b5:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00190b9:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00190bc:	89 e9                	mov    ecx,ebp
c00190be:	80 f9 05             	cmp    cl,0x5
c00190c1:	77 06                	ja     c00190c9 <Reg::readInt(char*, char*, int*)+0xb6>
c00190c3:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00190c7:	eb 16                	jmp    c00190df <Reg::readInt(char*, char*, int*)+0xcc>
c00190c9:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00190cd:	83 e9 61             	sub    ecx,0x61
c00190d0:	80 f9 05             	cmp    cl,0x5
c00190d3:	77 06                	ja     c00190db <Reg::readInt(char*, char*, int*)+0xc8>
c00190d5:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00190d9:	eb 04                	jmp    c00190df <Reg::readInt(char*, char*, int*)+0xcc>
c00190db:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00190df:	47                   	inc    edi
c00190e0:	eb ae                	jmp    c0019090 <Reg::readInt(char*, char*, int*)+0x7d>
c00190e2:	84 c0                	test   al,al
c00190e4:	74 02                	je     c00190e8 <Reg::readInt(char*, char*, int*)+0xd5>
c00190e6:	f7 da                	neg    edx
c00190e8:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00190ef:	89 10                	mov    DWORD PTR [eax],edx
c00190f1:	88 d8                	mov    al,bl
c00190f3:	81 c4 ec 00 00 00    	add    esp,0xec
c00190f9:	5b                   	pop    ebx
c00190fa:	5e                   	pop    esi
c00190fb:	5f                   	pop    edi
c00190fc:	5d                   	pop    ebp
c00190fd:	c3                   	ret    

c00190fe <Reg::readString(char*, char*, char*, int)>:
c00190fe:	57                   	push   edi
c00190ff:	56                   	push   esi
c0019100:	53                   	push   ebx
c0019101:	81 ec d4 00 00 00    	sub    esp,0xd4
c0019107:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001910e:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0019112:	57                   	push   edi
c0019113:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001911a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0019121:	e8 b6 fe ff ff       	call   c0018fdc <Reg::getLine(char*, char*, char*)>
c0019126:	83 c4 10             	add    esp,0x10
c0019129:	89 c6                	mov    esi,eax
c001912b:	84 c0                	test   al,al
c001912d:	74 44                	je     c0019173 <Reg::readString(char*, char*, char*, int)+0x75>
c001912f:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0019136:	31 c0                	xor    eax,eax
c0019138:	4a                   	dec    edx
c0019139:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001913c:	84 c9                	test   cl,cl
c001913e:	74 0f                	je     c001914f <Reg::readString(char*, char*, char*, int)+0x51>
c0019140:	39 c2                	cmp    edx,eax
c0019142:	7e 0b                	jle    c001914f <Reg::readString(char*, char*, char*, int)+0x51>
c0019144:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0019147:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001914c:	40                   	inc    eax
c001914d:	eb ea                	jmp    c0019139 <Reg::readString(char*, char*, char*, int)+0x3b>
c001914f:	83 ec 0c             	sub    esp,0xc
c0019152:	53                   	push   ebx
c0019153:	e8 91 75 fe ff       	call   c00006e9 <strlen>
c0019158:	83 c4 10             	add    esp,0x10
c001915b:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0019160:	75 11                	jne    c0019173 <Reg::readString(char*, char*, char*, int)+0x75>
c0019162:	83 ec 0c             	sub    esp,0xc
c0019165:	53                   	push   ebx
c0019166:	e8 7e 75 fe ff       	call   c00006e9 <strlen>
c001916b:	83 c4 10             	add    esp,0x10
c001916e:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0019173:	81 c4 d0 00 00 00    	add    esp,0xd0
c0019179:	89 f0                	mov    eax,esi
c001917b:	5b                   	pop    ebx
c001917c:	5e                   	pop    esi
c001917d:	5f                   	pop    edi
c001917e:	c3                   	ret    

c001917f <Reg::readBool(char*, char*, bool*)>:
c001917f:	83 ec 20             	sub    esp,0x20
c0019182:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019186:	50                   	push   eax
c0019187:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001918b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001918f:	e8 7f fe ff ff       	call   c0019013 <Reg::readInt(char*, char*, int*)>
c0019194:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019199:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001919d:	0f 95 02             	setne  BYTE PTR [edx]
c00191a0:	83 c4 2c             	add    esp,0x2c
c00191a3:	c3                   	ret    

c00191a4 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00191a4:	53                   	push   ebx
c00191a5:	83 ec 1c             	sub    esp,0x1c
c00191a8:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00191ac:	8d 44 24 13          	lea    eax,[esp+0x13]
c00191b0:	50                   	push   eax
c00191b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191b9:	e8 c1 ff ff ff       	call   c001917f <Reg::readBool(char*, char*, bool*)>
c00191be:	83 c4 10             	add    esp,0x10
c00191c1:	84 c0                	test   al,al
c00191c3:	74 04                	je     c00191c9 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00191c5:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00191c9:	88 d8                	mov    al,bl
c00191cb:	83 c4 18             	add    esp,0x18
c00191ce:	5b                   	pop    ebx
c00191cf:	c3                   	ret    

c00191d0 <Reg::readIntWithDefault(char*, char*, int)>:
c00191d0:	53                   	push   ebx
c00191d1:	83 ec 1c             	sub    esp,0x1c
c00191d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00191d8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00191dc:	50                   	push   eax
c00191dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00191e5:	e8 29 fe ff ff       	call   c0019013 <Reg::readInt(char*, char*, int*)>
c00191ea:	83 c4 10             	add    esp,0x10
c00191ed:	84 c0                	test   al,al
c00191ef:	74 04                	je     c00191f5 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00191f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00191f5:	89 d8                	mov    eax,ebx
c00191f7:	83 c4 18             	add    esp,0x18
c00191fa:	5b                   	pop    ebx
c00191fb:	c3                   	ret    

c00191fc <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00191fc:	56                   	push   esi
c00191fd:	53                   	push   ebx
c00191fe:	51                   	push   ecx
c00191ff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019203:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019207:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001920b:	56                   	push   esi
c001920c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019210:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019214:	e8 e5 fe ff ff       	call   c00190fe <Reg::readString(char*, char*, char*, int)>
c0019219:	83 c4 10             	add    esp,0x10
c001921c:	84 c0                	test   al,al
c001921e:	74 02                	je     c0019222 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0019220:	89 f3                	mov    ebx,esi
c0019222:	89 d8                	mov    eax,ebx
c0019224:	5a                   	pop    edx
c0019225:	5b                   	pop    ebx
c0019226:	5e                   	pop    esi
c0019227:	c3                   	ret    

c0019228 <Sys::exit(regs*)>:
c0019228:	83 ec 18             	sub    esp,0x18
c001922b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001922f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019232:	e8 1f 31 00 00       	call   c001c356 <terminateTask(int)>
c0019237:	83 c8 ff             	or     eax,0xffffffff
c001923a:	83 c4 1c             	add    esp,0x1c
c001923d:	89 c2                	mov    edx,eax
c001923f:	c3                   	ret    

c0019240 <Sys::loadDLL(regs*)>:
c0019240:	56                   	push   esi
c0019241:	53                   	push   ebx
c0019242:	31 d2                	xor    edx,edx
c0019244:	51                   	push   ecx
c0019245:	b8 01 00 00 00       	mov    eax,0x1
c001924a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001924e:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0019252:	74 7d                	je     c00192d1 <Sys::loadDLL(regs*)+0x91>
c0019254:	83 ec 0c             	sub    esp,0xc
c0019257:	68 14 01 00 00       	push   0x114
c001925c:	e8 ff 8e ff ff       	call   c0012160 <operator new(unsigned long)>
c0019261:	83 c4 0c             	add    esp,0xc
c0019264:	89 c3                	mov    ebx,eax
c0019266:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001926b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001926e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0019271:	53                   	push   ebx
c0019272:	e8 07 95 ff ff       	call   c001277e <File::File(char const*, Process*)>
c0019277:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001927a:	e8 d1 97 ff ff       	call   c0012a50 <File::exists()>
c001927f:	83 c4 10             	add    esp,0x10
c0019282:	84 c0                	test   al,al
c0019284:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019286:	75 11                	jne    c0019299 <Sys::loadDLL(regs*)+0x59>
c0019288:	83 ec 0c             	sub    esp,0xc
c001928b:	53                   	push   ebx
c001928c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001928f:	83 c4 10             	add    esp,0x10
c0019292:	b8 03 00 00 00       	mov    eax,0x3
c0019297:	eb 36                	jmp    c00192cf <Sys::loadDLL(regs*)+0x8f>
c0019299:	83 ec 0c             	sub    esp,0xc
c001929c:	53                   	push   ebx
c001929d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00192a0:	58                   	pop    eax
c00192a1:	5a                   	pop    edx
c00192a2:	6a 00                	push   0x0
c00192a4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00192a7:	e8 c4 20 00 00       	call   c001b370 <Thr::loadDLL(char const*, bool)>
c00192ac:	83 c4 10             	add    esp,0x10
c00192af:	89 c1                	mov    ecx,eax
c00192b1:	31 d2                	xor    edx,edx
c00192b3:	b8 04 00 00 00       	mov    eax,0x4
c00192b8:	85 c9                	test   ecx,ecx
c00192ba:	74 15                	je     c00192d1 <Sys::loadDLL(regs*)+0x91>
c00192bc:	53                   	push   ebx
c00192bd:	53                   	push   ebx
c00192be:	ff 35 08 a4 02 c0    	push   DWORD PTR ds:0xc002a408
c00192c4:	51                   	push   ecx
c00192c5:	e8 6c 22 00 00       	call   c001b536 <Thr::executeDLL(unsigned long, void*)>
c00192ca:	83 c4 10             	add    esp,0x10
c00192cd:	31 c0                	xor    eax,eax
c00192cf:	31 d2                	xor    edx,edx
c00192d1:	59                   	pop    ecx
c00192d2:	5b                   	pop    ebx
c00192d3:	5e                   	pop    esi
c00192d4:	c3                   	ret    

c00192d5 <Sys::read(regs*)>:
c00192d5:	57                   	push   edi
c00192d6:	56                   	push   esi
c00192d7:	53                   	push   ebx
c00192d8:	83 ec 10             	sub    esp,0x10
c00192db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00192df:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00192e2:	83 f8 02             	cmp    eax,0x2
c00192e5:	77 10                	ja     c00192f7 <Sys::read(regs*)+0x22>
c00192e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00192ec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00192ef:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00192f5:	eb 0e                	jmp    c0019305 <Sys::read(regs*)+0x30>
c00192f7:	83 ec 0c             	sub    esp,0xc
c00192fa:	50                   	push   eax
c00192fb:	e8 27 7e ff ff       	call   c0011127 <getFromFileDescriptor(int)>
c0019300:	83 c4 10             	add    esp,0x10
c0019303:	89 c1                	mov    ecx,eax
c0019305:	83 c8 ff             	or     eax,0xffffffff
c0019308:	85 c9                	test   ecx,ecx
c001930a:	89 c2                	mov    edx,eax
c001930c:	74 28                	je     c0019336 <Sys::read(regs*)+0x61>
c001930e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019316:	31 ff                	xor    edi,edi
c0019318:	83 ec 0c             	sub    esp,0xc
c001931b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001931d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019321:	52                   	push   edx
c0019322:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019325:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0019328:	57                   	push   edi
c0019329:	56                   	push   esi
c001932a:	51                   	push   ecx
c001932b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001932e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019332:	83 c4 20             	add    esp,0x20
c0019335:	99                   	cdq    
c0019336:	83 c4 10             	add    esp,0x10
c0019339:	5b                   	pop    ebx
c001933a:	5e                   	pop    esi
c001933b:	5f                   	pop    edi
c001933c:	c3                   	ret    

c001933d <Sys::sbrk(regs*)>:
c001933d:	56                   	push   esi
c001933e:	53                   	push   ebx
c001933f:	50                   	push   eax
c0019340:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019345:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019349:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001934c:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001934f:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0019355:	85 db                	test   ebx,ebx
c0019357:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001935a:	74 02                	je     c001935e <Sys::sbrk(regs*)+0x21>
c001935c:	79 06                	jns    c0019364 <Sys::sbrk(regs*)+0x27>
c001935e:	89 f0                	mov    eax,esi
c0019360:	31 d2                	xor    edx,edx
c0019362:	eb 2a                	jmp    c001938e <Sys::sbrk(regs*)+0x51>
c0019364:	83 c8 ff             	or     eax,0xffffffff
c0019367:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001936d:	89 c2                	mov    edx,eax
c001936f:	77 1d                	ja     c001938e <Sys::sbrk(regs*)+0x51>
c0019371:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0019377:	50                   	push   eax
c0019378:	c1 ea 0c             	shr    edx,0xc
c001937b:	68 07 04 00 00       	push   0x407
c0019380:	52                   	push   edx
c0019381:	51                   	push   ecx
c0019382:	e8 c9 86 ff ff       	call   c0011a50 <VAS::allocatePages(int, int)>
c0019387:	89 f0                	mov    eax,esi
c0019389:	31 d2                	xor    edx,edx
c001938b:	83 c4 10             	add    esp,0x10
c001938e:	59                   	pop    ecx
c001938f:	5b                   	pop    ebx
c0019390:	5e                   	pop    esi
c0019391:	c3                   	ret    

c0019392 <Sys::write(regs*)>:
c0019392:	57                   	push   edi
c0019393:	56                   	push   esi
c0019394:	53                   	push   ebx
c0019395:	83 ec 10             	sub    esp,0x10
c0019398:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001939c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001939f:	83 f8 02             	cmp    eax,0x2
c00193a2:	77 10                	ja     c00193b4 <Sys::write(regs*)+0x22>
c00193a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00193a9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00193ac:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00193b2:	eb 0e                	jmp    c00193c2 <Sys::write(regs*)+0x30>
c00193b4:	83 ec 0c             	sub    esp,0xc
c00193b7:	50                   	push   eax
c00193b8:	e8 6a 7d ff ff       	call   c0011127 <getFromFileDescriptor(int)>
c00193bd:	83 c4 10             	add    esp,0x10
c00193c0:	89 c1                	mov    ecx,eax
c00193c2:	83 c8 ff             	or     eax,0xffffffff
c00193c5:	85 c9                	test   ecx,ecx
c00193c7:	89 c2                	mov    edx,eax
c00193c9:	74 28                	je     c00193f3 <Sys::write(regs*)+0x61>
c00193cb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00193d3:	31 ff                	xor    edi,edi
c00193d5:	83 ec 0c             	sub    esp,0xc
c00193d8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00193da:	8d 54 24 18          	lea    edx,[esp+0x18]
c00193de:	52                   	push   edx
c00193df:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00193e2:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00193e5:	57                   	push   edi
c00193e6:	56                   	push   esi
c00193e7:	51                   	push   ecx
c00193e8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00193eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00193ef:	83 c4 20             	add    esp,0x20
c00193f2:	99                   	cdq    
c00193f3:	83 c4 10             	add    esp,0x10
c00193f6:	5b                   	pop    ebx
c00193f7:	5e                   	pop    esi
c00193f8:	5f                   	pop    edi
c00193f9:	c3                   	ret    

c00193fa <Sys::yield(regs*)>:
c00193fa:	83 ec 0c             	sub    esp,0xc
c00193fd:	e8 3e 25 00 00       	call   c001b940 <lockScheduler()>
c0019402:	e8 6d 28 00 00       	call   c001bc74 <schedule()>
c0019407:	e8 36 25 00 00       	call   c001b942 <unlockScheduler()>
c001940c:	31 c0                	xor    eax,eax
c001940e:	31 d2                	xor    edx,edx
c0019410:	83 c4 0c             	add    esp,0xc
c0019413:	c3                   	ret    

c0019414 <sysCallGetPID(regs*)>:
c0019414:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019419:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001941c:	8b 00                	mov    eax,DWORD PTR [eax]
c001941e:	99                   	cdq    
c001941f:	c3                   	ret    

c0019420 <sysCallSeekDir(regs*)>:
c0019420:	31 c0                	xor    eax,eax
c0019422:	31 d2                	xor    edx,edx
c0019424:	c3                   	ret    

c0019425 <sysCallTellDir(regs*)>:
c0019425:	31 c0                	xor    eax,eax
c0019427:	31 d2                	xor    edx,edx
c0019429:	c3                   	ret    

c001942a <sysCallVerify(regs*)>:
c001942a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001942e:	31 d2                	xor    edx,edx
c0019430:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019433:	c3                   	ret    

c0019434 <sysCallFork(regs*)>:
c0019434:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019439:	ba ff ff ff ff       	mov    edx,0xffffffff
c001943e:	c3                   	ret    

c001943f <sysCallExecve(regs*)>:
c001943f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019444:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019449:	c3                   	ret    

c001944a <sysCallGetArgc(regs*)>:
c001944a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001944f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019452:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c0019458:	99                   	cdq    
c0019459:	c3                   	ret    

c001945a <sysFormatDisk(regs*)>:
c001945a:	56                   	push   esi
c001945b:	53                   	push   ebx
c001945c:	53                   	push   ebx
c001945d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019461:	8b 1d 68 a5 02 c0    	mov    ebx,DWORD PTR ds:0xc002a568
c0019467:	eb 25                	jmp    c001948e <sysFormatDisk(regs*)+0x34>
c0019469:	83 ec 0c             	sub    esp,0xc
c001946c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001946f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019471:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0019474:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0019477:	50                   	push   eax
c0019478:	ff 34 85 00 aa 02 c0 	push   DWORD PTR [eax*4-0x3ffd5600]
c001947f:	53                   	push   ebx
c0019480:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0019483:	83 c4 20             	add    esp,0x20
c0019486:	83 f8 08             	cmp    eax,0x8
c0019489:	75 12                	jne    c001949d <sysFormatDisk(regs*)+0x43>
c001948b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001948e:	85 db                	test   ebx,ebx
c0019490:	75 d7                	jne    c0019469 <sysFormatDisk(regs*)+0xf>
c0019492:	59                   	pop    ecx
c0019493:	b8 03 00 00 00       	mov    eax,0x3
c0019498:	31 d2                	xor    edx,edx
c001949a:	5b                   	pop    ebx
c001949b:	5e                   	pop    esi
c001949c:	c3                   	ret    
c001949d:	85 c0                	test   eax,eax
c001949f:	74 1b                	je     c00194bc <sysFormatDisk(regs*)+0x62>
c00194a1:	83 f8 09             	cmp    eax,0x9
c00194a4:	74 0b                	je     c00194b1 <sysFormatDisk(regs*)+0x57>
c00194a6:	59                   	pop    ecx
c00194a7:	b8 02 00 00 00       	mov    eax,0x2
c00194ac:	31 d2                	xor    edx,edx
c00194ae:	5b                   	pop    ebx
c00194af:	5e                   	pop    esi
c00194b0:	c3                   	ret    
c00194b1:	59                   	pop    ecx
c00194b2:	b8 01 00 00 00       	mov    eax,0x1
c00194b7:	31 d2                	xor    edx,edx
c00194b9:	5b                   	pop    ebx
c00194ba:	5e                   	pop    esi
c00194bb:	c3                   	ret    
c00194bc:	59                   	pop    ecx
c00194bd:	31 c0                	xor    eax,eax
c00194bf:	31 d2                	xor    edx,edx
c00194c1:	5b                   	pop    ebx
c00194c2:	5e                   	pop    esi
c00194c3:	c3                   	ret    

c00194c4 <sysSetDiskVolumeLabel(regs*)>:
c00194c4:	56                   	push   esi
c00194c5:	53                   	push   ebx
c00194c6:	53                   	push   ebx
c00194c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00194cb:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00194ce:	83 f8 19             	cmp    eax,0x19
c00194d1:	77 29                	ja     c00194fc <sysSetDiskVolumeLabel(regs*)+0x38>
c00194d3:	8b 0c 85 00 aa 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5600]
c00194da:	85 c9                	test   ecx,ecx
c00194dc:	74 1e                	je     c00194fc <sysSetDiskVolumeLabel(regs*)+0x38>
c00194de:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00194e1:	85 d2                	test   edx,edx
c00194e3:	74 17                	je     c00194fc <sysSetDiskVolumeLabel(regs*)+0x38>
c00194e5:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c00194eb:	8b 33                	mov    esi,DWORD PTR [ebx]
c00194ed:	52                   	push   edx
c00194ee:	50                   	push   eax
c00194ef:	51                   	push   ecx
c00194f0:	53                   	push   ebx
c00194f1:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00194f4:	83 c4 10             	add    esp,0x10
c00194f7:	99                   	cdq    
c00194f8:	59                   	pop    ecx
c00194f9:	5b                   	pop    ebx
c00194fa:	5e                   	pop    esi
c00194fb:	c3                   	ret    
c00194fc:	59                   	pop    ecx
c00194fd:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019502:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019507:	5b                   	pop    ebx
c0019508:	5e                   	pop    esi
c0019509:	c3                   	ret    

c001950a <sysGetDiskVolumeLabel(regs*)>:
c001950a:	57                   	push   edi
c001950b:	56                   	push   esi
c001950c:	53                   	push   ebx
c001950d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019511:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019514:	83 fa 19             	cmp    edx,0x19
c0019517:	77 34                	ja     c001954d <sysGetDiskVolumeLabel(regs*)+0x43>
c0019519:	8b 0c 95 00 aa 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd5600]
c0019520:	85 c9                	test   ecx,ecx
c0019522:	74 29                	je     c001954d <sysGetDiskVolumeLabel(regs*)+0x43>
c0019524:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0019527:	85 db                	test   ebx,ebx
c0019529:	74 22                	je     c001954d <sysGetDiskVolumeLabel(regs*)+0x43>
c001952b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001952e:	85 c0                	test   eax,eax
c0019530:	74 1b                	je     c001954d <sysGetDiskVolumeLabel(regs*)+0x43>
c0019532:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c0019538:	83 ec 0c             	sub    esp,0xc
c001953b:	8b 3e                	mov    edi,DWORD PTR [esi]
c001953d:	50                   	push   eax
c001953e:	53                   	push   ebx
c001953f:	52                   	push   edx
c0019540:	51                   	push   ecx
c0019541:	56                   	push   esi
c0019542:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0019545:	83 c4 20             	add    esp,0x20
c0019548:	99                   	cdq    
c0019549:	5b                   	pop    ebx
c001954a:	5e                   	pop    esi
c001954b:	5f                   	pop    edi
c001954c:	c3                   	ret    
c001954d:	5b                   	pop    ebx
c001954e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019553:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019558:	5e                   	pop    esi
c0019559:	5f                   	pop    edi
c001955a:	c3                   	ret    

c001955b <sysShutdown(regs*)>:
c001955b:	83 ec 0c             	sub    esp,0xc
c001955e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019562:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019565:	85 c0                	test   eax,eax
c0019567:	74 18                	je     c0019581 <sysShutdown(regs*)+0x26>
c0019569:	83 f8 01             	cmp    eax,0x1
c001956c:	74 38                	je     c00195a6 <sysShutdown(regs*)+0x4b>
c001956e:	83 f8 02             	cmp    eax,0x2
c0019571:	74 24                	je     c0019597 <sysShutdown(regs*)+0x3c>
c0019573:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019578:	ba ff ff ff ff       	mov    edx,0xffffffff
c001957d:	83 c4 0c             	add    esp,0xc
c0019580:	c3                   	ret    
c0019581:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0019586:	8b 10                	mov    edx,DWORD PTR [eax]
c0019588:	6a 00                	push   0x0
c001958a:	6a 00                	push   0x0
c001958c:	6a 00                	push   0x0
c001958e:	50                   	push   eax
c001958f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019592:	83 c4 10             	add    esp,0x10
c0019595:	eb dc                	jmp    c0019573 <sysShutdown(regs*)+0x18>
c0019597:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c001959c:	8b 10                	mov    edx,DWORD PTR [eax]
c001959e:	6a 00                	push   0x0
c00195a0:	6a 00                	push   0x0
c00195a2:	6a 01                	push   0x1
c00195a4:	eb e8                	jmp    c001958e <sysShutdown(regs*)+0x33>
c00195a6:	a1 80 aa 02 c0       	mov    eax,ds:0xc002aa80
c00195ab:	85 c0                	test   eax,eax
c00195ad:	74 02                	je     c00195b1 <sysShutdown(regs*)+0x56>
c00195af:	ff d0                	call   eax
c00195b1:	31 c0                	xor    eax,eax
c00195b3:	31 d2                	xor    edx,edx
c00195b5:	83 c4 0c             	add    esp,0xc
c00195b8:	c3                   	ret    

c00195b9 <sysCallGetCwd(regs*)>:
c00195b9:	83 ec 10             	sub    esp,0x10
c00195bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195c0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00195c3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00195c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00195cb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00195ce:	e8 1c 95 ff ff       	call   c0012aef <getcwd(Process*, char*, int)>
c00195d3:	83 c4 1c             	add    esp,0x1c
c00195d6:	99                   	cdq    
c00195d7:	c3                   	ret    

c00195d8 <sysCallSetCwd(regs*)>:
c00195d8:	83 ec 14             	sub    esp,0x14
c00195db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00195df:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00195e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00195e7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00195ea:	e8 2a 95 ff ff       	call   c0012b19 <setcwd(Process*, char*)>
c00195ef:	83 c4 1c             	add    esp,0x1c
c00195f2:	99                   	cdq    
c00195f3:	c3                   	ret    

c00195f4 <sysCallRealpath(regs*)>:
c00195f4:	83 ec 0c             	sub    esp,0xc
c00195f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195fb:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00195fe:	85 d2                	test   edx,edx
c0019600:	74 07                	je     c0019609 <sysCallRealpath(regs*)+0x15>
c0019602:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019605:	85 c0                	test   eax,eax
c0019607:	75 0b                	jne    c0019614 <sysCallRealpath(regs*)+0x20>
c0019609:	b8 01 00 00 00       	mov    eax,0x1
c001960e:	31 d2                	xor    edx,edx
c0019610:	83 c4 0c             	add    esp,0xc
c0019613:	c3                   	ret    
c0019614:	51                   	push   ecx
c0019615:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001961b:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001961e:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0019624:	51                   	push   ecx
c0019625:	52                   	push   edx
c0019626:	50                   	push   eax
c0019627:	e8 a8 8f ff ff       	call   c00125d4 <standardiseFiles(char*, char const*, char const*)>
c001962c:	83 c4 10             	add    esp,0x10
c001962f:	31 c0                	xor    eax,eax
c0019631:	31 d2                	xor    edx,edx
c0019633:	83 c4 0c             	add    esp,0xc
c0019636:	c3                   	ret    

c0019637 <sysCallReadDir(regs*)>:
c0019637:	53                   	push   ebx
c0019638:	83 ec 18             	sub    esp,0x18
c001963b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001963f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019642:	83 f8 02             	cmp    eax,0x2
c0019645:	76 53                	jbe    c001969a <sysCallReadDir(regs*)+0x63>
c0019647:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001964a:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0019650:	77 4f                	ja     c00196a1 <sysCallReadDir(regs*)+0x6a>
c0019652:	83 ec 0c             	sub    esp,0xc
c0019655:	50                   	push   eax
c0019656:	e8 cc 7a ff ff       	call   c0011127 <getFromFileDescriptor(int)>
c001965b:	83 c4 10             	add    esp,0x10
c001965e:	85 c0                	test   eax,eax
c0019660:	74 50                	je     c00196b2 <sysCallReadDir(regs*)+0x7b>
c0019662:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001966a:	83 ec 0c             	sub    esp,0xc
c001966d:	8b 10                	mov    edx,DWORD PTR [eax]
c001966f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0019673:	51                   	push   ecx
c0019674:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019677:	6a 00                	push   0x0
c0019679:	68 10 01 00 00       	push   0x110
c001967e:	50                   	push   eax
c001967f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019682:	83 c4 20             	add    esp,0x20
c0019685:	85 c0                	test   eax,eax
c0019687:	74 38                	je     c00196c1 <sysCallReadDir(regs*)+0x8a>
c0019689:	83 f8 07             	cmp    eax,0x7
c001968c:	74 0c                	je     c001969a <sysCallReadDir(regs*)+0x63>
c001968e:	b8 02 00 00 00       	mov    eax,0x2
c0019693:	31 d2                	xor    edx,edx
c0019695:	83 c4 18             	add    esp,0x18
c0019698:	5b                   	pop    ebx
c0019699:	c3                   	ret    
c001969a:	b8 01 00 00 00       	mov    eax,0x1
c001969f:	eb f2                	jmp    c0019693 <sysCallReadDir(regs*)+0x5c>
c00196a1:	83 ec 08             	sub    esp,0x8
c00196a4:	52                   	push   edx
c00196a5:	68 40 82 02 c0       	push   0xc0028240
c00196aa:	e8 a0 8b ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00196af:	83 c4 10             	add    esp,0x10
c00196b2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00196b7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00196bc:	83 c4 18             	add    esp,0x18
c00196bf:	5b                   	pop    ebx
c00196c0:	c3                   	ret    
c00196c1:	31 c0                	xor    eax,eax
c00196c3:	eb ce                	jmp    c0019693 <sysCallReadDir(regs*)+0x5c>

c00196c5 <sysCallIsATTY(regs*)>:
c00196c5:	83 ec 0c             	sub    esp,0xc
c00196c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196cc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00196cf:	83 f8 02             	cmp    eax,0x2
c00196d2:	76 07                	jbe    c00196db <sysCallIsATTY(regs*)+0x16>
c00196d4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00196d9:	75 26                	jne    c0019701 <sysCallIsATTY(regs*)+0x3c>
c00196db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00196e0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00196e3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00196e9:	85 c0                	test   eax,eax
c00196eb:	74 24                	je     c0019711 <sysCallIsATTY(regs*)+0x4c>
c00196ed:	83 ec 0c             	sub    esp,0xc
c00196f0:	8b 10                	mov    edx,DWORD PTR [eax]
c00196f2:	50                   	push   eax
c00196f3:	ff 12                	call   DWORD PTR [edx]
c00196f5:	31 d2                	xor    edx,edx
c00196f7:	0f b6 c0             	movzx  eax,al
c00196fa:	83 c4 10             	add    esp,0x10
c00196fd:	83 c4 0c             	add    esp,0xc
c0019700:	c3                   	ret    
c0019701:	83 ec 0c             	sub    esp,0xc
c0019704:	50                   	push   eax
c0019705:	e8 1d 7a ff ff       	call   c0011127 <getFromFileDescriptor(int)>
c001970a:	83 c4 10             	add    esp,0x10
c001970d:	85 c0                	test   eax,eax
c001970f:	75 dc                	jne    c00196ed <sysCallIsATTY(regs*)+0x28>
c0019711:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019716:	ba ff ff ff ff       	mov    edx,0xffffffff
c001971b:	83 c4 0c             	add    esp,0xc
c001971e:	c3                   	ret    

c001971f <sysCallSeek(regs*)>:
c001971f:	53                   	push   ebx
c0019720:	83 ec 08             	sub    esp,0x8
c0019723:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019727:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001972a:	83 f8 02             	cmp    eax,0x2
c001972d:	76 4a                	jbe    c0019779 <sysCallSeek(regs*)+0x5a>
c001972f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019734:	77 32                	ja     c0019768 <sysCallSeek(regs*)+0x49>
c0019736:	83 ec 0c             	sub    esp,0xc
c0019739:	50                   	push   eax
c001973a:	e8 e8 79 ff ff       	call   c0011127 <getFromFileDescriptor(int)>
c001973f:	83 c4 0c             	add    esp,0xc
c0019742:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0019745:	31 db                	xor    ebx,ebx
c0019747:	53                   	push   ebx
c0019748:	51                   	push   ecx
c0019749:	50                   	push   eax
c001974a:	e8 51 91 ff ff       	call   c00128a0 <File::seek(unsigned long long)>
c001974f:	83 c4 10             	add    esp,0x10
c0019752:	85 c0                	test   eax,eax
c0019754:	0f 95 c0             	setne  al
c0019757:	31 d2                	xor    edx,edx
c0019759:	0f b6 c0             	movzx  eax,al
c001975c:	f7 d8                	neg    eax
c001975e:	83 d2 00             	adc    edx,0x0
c0019761:	83 c4 08             	add    esp,0x8
c0019764:	f7 da                	neg    edx
c0019766:	5b                   	pop    ebx
c0019767:	c3                   	ret    
c0019768:	83 ec 08             	sub    esp,0x8
c001976b:	50                   	push   eax
c001976c:	68 fc 82 02 c0       	push   0xc00282fc
c0019771:	e8 d9 8a ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0019776:	83 c4 10             	add    esp,0x10
c0019779:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001977e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019783:	83 c4 08             	add    esp,0x8
c0019786:	5b                   	pop    ebx
c0019787:	c3                   	ret    

c0019788 <sysCallTell(regs*)>:
c0019788:	53                   	push   ebx
c0019789:	83 ec 08             	sub    esp,0x8
c001978c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019790:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0019793:	83 f8 02             	cmp    eax,0x2
c0019796:	76 5e                	jbe    c00197f6 <sysCallTell(regs*)+0x6e>
c0019798:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001979d:	77 2d                	ja     c00197cc <sysCallTell(regs*)+0x44>
c001979f:	83 ec 0c             	sub    esp,0xc
c00197a2:	50                   	push   eax
c00197a3:	e8 7f 79 ff ff       	call   c0011127 <getFromFileDescriptor(int)>
c00197a8:	5a                   	pop    edx
c00197a9:	59                   	pop    ecx
c00197aa:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00197ad:	50                   	push   eax
c00197ae:	e8 43 91 ff ff       	call   c00128f6 <File::tell(unsigned long long*)>
c00197b3:	83 c4 10             	add    esp,0x10
c00197b6:	85 c0                	test   eax,eax
c00197b8:	0f 95 c0             	setne  al
c00197bb:	31 d2                	xor    edx,edx
c00197bd:	0f b6 c0             	movzx  eax,al
c00197c0:	f7 d8                	neg    eax
c00197c2:	83 d2 00             	adc    edx,0x0
c00197c5:	83 c4 08             	add    esp,0x8
c00197c8:	f7 da                	neg    edx
c00197ca:	5b                   	pop    ebx
c00197cb:	c3                   	ret    
c00197cc:	83 ec 08             	sub    esp,0x8
c00197cf:	50                   	push   eax
c00197d0:	68 16 83 02 c0       	push   0xc0028316
c00197d5:	e8 75 8a ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00197da:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00197dd:	83 c4 10             	add    esp,0x10
c00197e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00197e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00197ed:	31 d2                	xor    edx,edx
c00197ef:	31 c0                	xor    eax,eax
c00197f1:	83 c4 08             	add    esp,0x8
c00197f4:	5b                   	pop    ebx
c00197f5:	c3                   	ret    
c00197f6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00197fb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019800:	83 c4 08             	add    esp,0x8
c0019803:	5b                   	pop    ebx
c0019804:	c3                   	ret    

c0019805 <sysCallSizeFromFilename(regs*)>:
c0019805:	57                   	push   edi
c0019806:	56                   	push   esi
c0019807:	53                   	push   ebx
c0019808:	83 ec 10             	sub    esp,0x10
c001980b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001980f:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0019812:	83 fb 02             	cmp    ebx,0x2
c0019815:	0f 86 8a 00 00 00    	jbe    c00198a5 <sysCallSizeFromFilename(regs*)+0xa0>
c001981b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0019821:	77 56                	ja     c0019879 <sysCallSizeFromFilename(regs*)+0x74>
c0019823:	83 ec 0c             	sub    esp,0xc
c0019826:	68 14 01 00 00       	push   0x114
c001982b:	e8 30 89 ff ff       	call   c0012160 <operator new(unsigned long)>
c0019830:	83 c4 0c             	add    esp,0xc
c0019833:	89 c7                	mov    edi,eax
c0019835:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001983a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001983d:	53                   	push   ebx
c001983e:	57                   	push   edi
c001983f:	e8 3a 8f ff ff       	call   c001277e <File::File(char const*, Process*)>
c0019844:	83 c4 0c             	add    esp,0xc
c0019847:	8d 44 24 13          	lea    eax,[esp+0x13]
c001984b:	50                   	push   eax
c001984c:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001984f:	57                   	push   edi
c0019850:	e8 39 92 ff ff       	call   c0012a8e <File::stat(unsigned long long*, bool*)>
c0019855:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019858:	89 c3                	mov    ebx,eax
c001985a:	8b 07                	mov    eax,DWORD PTR [edi]
c001985c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001985f:	83 c4 10             	add    esp,0x10
c0019862:	31 c0                	xor    eax,eax
c0019864:	85 db                	test   ebx,ebx
c0019866:	0f 95 c0             	setne  al
c0019869:	31 d2                	xor    edx,edx
c001986b:	f7 d8                	neg    eax
c001986d:	83 d2 00             	adc    edx,0x0
c0019870:	83 c4 10             	add    esp,0x10
c0019873:	f7 da                	neg    edx
c0019875:	5b                   	pop    ebx
c0019876:	5e                   	pop    esi
c0019877:	5f                   	pop    edi
c0019878:	c3                   	ret    
c0019879:	83 ec 08             	sub    esp,0x8
c001987c:	53                   	push   ebx
c001987d:	68 30 83 02 c0       	push   0xc0028330
c0019882:	e8 c8 89 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0019887:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001988a:	83 c4 10             	add    esp,0x10
c001988d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019893:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001989a:	31 d2                	xor    edx,edx
c001989c:	83 c4 10             	add    esp,0x10
c001989f:	31 c0                	xor    eax,eax
c00198a1:	5b                   	pop    ebx
c00198a2:	5e                   	pop    esi
c00198a3:	5f                   	pop    edi
c00198a4:	c3                   	ret    
c00198a5:	83 c4 10             	add    esp,0x10
c00198a8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00198ad:	5b                   	pop    ebx
c00198ae:	ba ff ff ff ff       	mov    edx,0xffffffff
c00198b3:	5e                   	pop    esi
c00198b4:	5f                   	pop    edi
c00198b5:	c3                   	ret    

c00198b6 <sysCallSize(regs*)>:
c00198b6:	53                   	push   ebx
c00198b7:	83 ec 18             	sub    esp,0x18
c00198ba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00198be:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00198c1:	83 f8 02             	cmp    eax,0x2
c00198c4:	76 64                	jbe    c001992a <sysCallSize(regs*)+0x74>
c00198c6:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00198cb:	77 33                	ja     c0019900 <sysCallSize(regs*)+0x4a>
c00198cd:	83 ec 0c             	sub    esp,0xc
c00198d0:	50                   	push   eax
c00198d1:	e8 51 78 ff ff       	call   c0011127 <getFromFileDescriptor(int)>
c00198d6:	83 c4 0c             	add    esp,0xc
c00198d9:	8d 54 24 13          	lea    edx,[esp+0x13]
c00198dd:	52                   	push   edx
c00198de:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00198e1:	50                   	push   eax
c00198e2:	e8 a7 91 ff ff       	call   c0012a8e <File::stat(unsigned long long*, bool*)>
c00198e7:	83 c4 10             	add    esp,0x10
c00198ea:	85 c0                	test   eax,eax
c00198ec:	0f 95 c0             	setne  al
c00198ef:	31 d2                	xor    edx,edx
c00198f1:	0f b6 c0             	movzx  eax,al
c00198f4:	f7 d8                	neg    eax
c00198f6:	83 d2 00             	adc    edx,0x0
c00198f9:	83 c4 18             	add    esp,0x18
c00198fc:	f7 da                	neg    edx
c00198fe:	5b                   	pop    ebx
c00198ff:	c3                   	ret    
c0019900:	83 ec 08             	sub    esp,0x8
c0019903:	50                   	push   eax
c0019904:	68 30 83 02 c0       	push   0xc0028330
c0019909:	e8 41 89 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001990e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0019911:	83 c4 10             	add    esp,0x10
c0019914:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001991a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019921:	31 d2                	xor    edx,edx
c0019923:	31 c0                	xor    eax,eax
c0019925:	83 c4 18             	add    esp,0x18
c0019928:	5b                   	pop    ebx
c0019929:	c3                   	ret    
c001992a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001992f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019934:	83 c4 18             	add    esp,0x18
c0019937:	5b                   	pop    ebx
c0019938:	c3                   	ret    

c0019939 <sysCallClose(regs*)>:
c0019939:	53                   	push   ebx
c001993a:	83 ec 08             	sub    esp,0x8
c001993d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019941:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019944:	83 f8 02             	cmp    eax,0x2
c0019947:	76 50                	jbe    c0019999 <sysCallClose(regs*)+0x60>
c0019949:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001994e:	74 58                	je     c00199a8 <sysCallClose(regs*)+0x6f>
c0019950:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019955:	74 60                	je     c00199b7 <sysCallClose(regs*)+0x7e>
c0019957:	77 2f                	ja     c0019988 <sysCallClose(regs*)+0x4f>
c0019959:	83 ec 0c             	sub    esp,0xc
c001995c:	50                   	push   eax
c001995d:	e8 c5 77 ff ff       	call   c0011127 <getFromFileDescriptor(int)>
c0019962:	89 c3                	mov    ebx,eax
c0019964:	89 04 24             	mov    DWORD PTR [esp],eax
c0019967:	e8 d4 8e ff ff       	call   c0012840 <File::close()>
c001996c:	83 c4 10             	add    esp,0x10
c001996f:	85 db                	test   ebx,ebx
c0019971:	74 0c                	je     c001997f <sysCallClose(regs*)+0x46>
c0019973:	83 ec 0c             	sub    esp,0xc
c0019976:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019978:	53                   	push   ebx
c0019979:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001997c:	83 c4 10             	add    esp,0x10
c001997f:	31 c0                	xor    eax,eax
c0019981:	31 d2                	xor    edx,edx
c0019983:	83 c4 08             	add    esp,0x8
c0019986:	5b                   	pop    ebx
c0019987:	c3                   	ret    
c0019988:	83 ec 08             	sub    esp,0x8
c001998b:	50                   	push   eax
c001998c:	68 64 82 02 c0       	push   0xc0028264
c0019991:	e8 b9 88 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0019996:	83 c4 10             	add    esp,0x10
c0019999:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001999e:	ba ff ff ff ff       	mov    edx,0xffffffff
c00199a3:	83 c4 08             	add    esp,0x8
c00199a6:	5b                   	pop    ebx
c00199a7:	c3                   	ret    
c00199a8:	83 ec 0c             	sub    esp,0xc
c00199ab:	68 4b 83 02 c0       	push   0xc002834b
c00199b0:	e8 9a 88 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00199b5:	eb c5                	jmp    c001997c <sysCallClose(regs*)+0x43>
c00199b7:	83 ec 0c             	sub    esp,0xc
c00199ba:	68 59 83 02 c0       	push   0xc0028359
c00199bf:	eb ef                	jmp    c00199b0 <sysCallClose(regs*)+0x77>

c00199c1 <sysCallOpenDir(regs*)>:
c00199c1:	56                   	push   esi
c00199c2:	53                   	push   ebx
c00199c3:	53                   	push   ebx
c00199c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00199c8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00199cb:	85 f6                	test   esi,esi
c00199cd:	74 51                	je     c0019a20 <sysCallOpenDir(regs*)+0x5f>
c00199cf:	83 ec 0c             	sub    esp,0xc
c00199d2:	68 14 01 00 00       	push   0x114
c00199d7:	e8 84 87 ff ff       	call   c0012160 <operator new(unsigned long)>
c00199dc:	83 c4 0c             	add    esp,0xc
c00199df:	89 c6                	mov    esi,eax
c00199e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199e6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00199e9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00199ec:	56                   	push   esi
c00199ed:	e8 4e 92 ff ff       	call   c0012c40 <Directory::Directory(char const*, Process*)>
c00199f2:	89 34 24             	mov    DWORD PTR [esp],esi
c00199f5:	e8 aa 92 ff ff       	call   c0012ca4 <Directory::open()>
c00199fa:	83 c4 10             	add    esp,0x10
c00199fd:	85 c0                	test   eax,eax
c00199ff:	75 1f                	jne    c0019a20 <sysCallOpenDir(regs*)+0x5f>
c0019a01:	83 ec 0c             	sub    esp,0xc
c0019a04:	56                   	push   esi
c0019a05:	e8 68 74 ff ff       	call   c0010e72 <UnixFile::getFileDescriptor()>
c0019a0a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0019a0d:	83 c4 10             	add    esp,0x10
c0019a10:	89 02                	mov    DWORD PTR [edx],eax
c0019a12:	c1 f8 1f             	sar    eax,0x1f
c0019a15:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0019a18:	31 c0                	xor    eax,eax
c0019a1a:	59                   	pop    ecx
c0019a1b:	31 d2                	xor    edx,edx
c0019a1d:	5b                   	pop    ebx
c0019a1e:	5e                   	pop    esi
c0019a1f:	c3                   	ret    
c0019a20:	59                   	pop    ecx
c0019a21:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019a26:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019a2b:	5b                   	pop    ebx
c0019a2c:	5e                   	pop    esi
c0019a2d:	c3                   	ret    

c0019a2e <sysCallMakeDir(regs*)>:
c0019a2e:	56                   	push   esi
c0019a2f:	53                   	push   ebx
c0019a30:	83 ec 10             	sub    esp,0x10
c0019a33:	68 14 01 00 00       	push   0x114
c0019a38:	e8 23 87 ff ff       	call   c0012160 <operator new(unsigned long)>
c0019a3d:	83 c4 0c             	add    esp,0xc
c0019a40:	89 c3                	mov    ebx,eax
c0019a42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019a47:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019a4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019a4e:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019a51:	53                   	push   ebx
c0019a52:	e8 e9 91 ff ff       	call   c0012c40 <Directory::Directory(char const*, Process*)>
c0019a57:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a5a:	e8 25 94 ff ff       	call   c0012e84 <Directory::create()>
c0019a5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a62:	89 c6                	mov    esi,eax
c0019a64:	e8 97 92 ff ff       	call   c0012d00 <Directory::close()>
c0019a69:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019a6e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019a71:	31 c0                	xor    eax,eax
c0019a73:	85 f6                	test   esi,esi
c0019a75:	0f 95 c0             	setne  al
c0019a78:	31 d2                	xor    edx,edx
c0019a7a:	f7 d8                	neg    eax
c0019a7c:	83 d2 00             	adc    edx,0x0
c0019a7f:	83 c4 14             	add    esp,0x14
c0019a82:	f7 da                	neg    edx
c0019a84:	5b                   	pop    ebx
c0019a85:	5e                   	pop    esi
c0019a86:	c3                   	ret    

c0019a87 <sysCallCloseDir(regs*)>:
c0019a87:	53                   	push   ebx
c0019a88:	83 ec 08             	sub    esp,0x8
c0019a8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a8f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019a92:	83 f8 02             	cmp    eax,0x2
c0019a95:	76 47                	jbe    c0019ade <sysCallCloseDir(regs*)+0x57>
c0019a97:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0019a9c:	77 2f                	ja     c0019acd <sysCallCloseDir(regs*)+0x46>
c0019a9e:	83 ec 0c             	sub    esp,0xc
c0019aa1:	50                   	push   eax
c0019aa2:	e8 80 76 ff ff       	call   c0011127 <getFromFileDescriptor(int)>
c0019aa7:	89 c3                	mov    ebx,eax
c0019aa9:	89 04 24             	mov    DWORD PTR [esp],eax
c0019aac:	e8 4f 92 ff ff       	call   c0012d00 <Directory::close()>
c0019ab1:	83 c4 10             	add    esp,0x10
c0019ab4:	85 db                	test   ebx,ebx
c0019ab6:	74 0c                	je     c0019ac4 <sysCallCloseDir(regs*)+0x3d>
c0019ab8:	83 ec 0c             	sub    esp,0xc
c0019abb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019abd:	53                   	push   ebx
c0019abe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019ac1:	83 c4 10             	add    esp,0x10
c0019ac4:	31 c0                	xor    eax,eax
c0019ac6:	31 d2                	xor    edx,edx
c0019ac8:	83 c4 08             	add    esp,0x8
c0019acb:	5b                   	pop    ebx
c0019acc:	c3                   	ret    
c0019acd:	83 ec 08             	sub    esp,0x8
c0019ad0:	50                   	push   eax
c0019ad1:	68 8c 82 02 c0       	push   0xc002828c
c0019ad6:	e8 74 87 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0019adb:	83 c4 10             	add    esp,0x10
c0019ade:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0019ae3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0019ae8:	83 c4 08             	add    esp,0x8
c0019aeb:	5b                   	pop    ebx
c0019aec:	c3                   	ret    

c0019aed <sysCallWait(regs*)>:
c0019aed:	83 ec 10             	sub    esp,0x10
c0019af0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019af4:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0019af7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019afa:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0019afd:	e8 ed 22 00 00       	call   c001bdef <waitTask(int, int*, int)>
c0019b02:	83 c4 1c             	add    esp,0x1c
c0019b05:	99                   	cdq    
c0019b06:	c3                   	ret    

c0019b07 <sysCallRmdir(regs*)>:
c0019b07:	56                   	push   esi
c0019b08:	53                   	push   ebx
c0019b09:	83 ec 10             	sub    esp,0x10
c0019b0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b10:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019b13:	68 14 01 00 00       	push   0x114
c0019b18:	e8 43 86 ff ff       	call   c0012160 <operator new(unsigned long)>
c0019b1d:	83 c4 0c             	add    esp,0xc
c0019b20:	89 c3                	mov    ebx,eax
c0019b22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b27:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019b2a:	56                   	push   esi
c0019b2b:	53                   	push   ebx
c0019b2c:	e8 4d 8c ff ff       	call   c001277e <File::File(char const*, Process*)>
c0019b31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b34:	e8 21 8e ff ff       	call   c001295a <File::unlink()>
c0019b39:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b3c:	89 c6                	mov    esi,eax
c0019b3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b40:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b43:	31 c0                	xor    eax,eax
c0019b45:	85 f6                	test   esi,esi
c0019b47:	0f 95 c0             	setne  al
c0019b4a:	31 d2                	xor    edx,edx
c0019b4c:	f7 d8                	neg    eax
c0019b4e:	83 d2 00             	adc    edx,0x0
c0019b51:	83 c4 14             	add    esp,0x14
c0019b54:	f7 da                	neg    edx
c0019b56:	5b                   	pop    ebx
c0019b57:	5e                   	pop    esi
c0019b58:	c3                   	ret    

c0019b59 <sysCallUnlink(regs*)>:
c0019b59:	56                   	push   esi
c0019b5a:	53                   	push   ebx
c0019b5b:	83 ec 10             	sub    esp,0x10
c0019b5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b62:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0019b65:	68 14 01 00 00       	push   0x114
c0019b6a:	e8 f1 85 ff ff       	call   c0012160 <operator new(unsigned long)>
c0019b6f:	83 c4 0c             	add    esp,0xc
c0019b72:	89 c3                	mov    ebx,eax
c0019b74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b79:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019b7c:	56                   	push   esi
c0019b7d:	53                   	push   ebx
c0019b7e:	e8 fb 8b ff ff       	call   c001277e <File::File(char const*, Process*)>
c0019b83:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b86:	e8 cf 8d ff ff       	call   c001295a <File::unlink()>
c0019b8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019b8e:	89 c6                	mov    esi,eax
c0019b90:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b92:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019b95:	31 c0                	xor    eax,eax
c0019b97:	85 f6                	test   esi,esi
c0019b99:	0f 95 c0             	setne  al
c0019b9c:	31 d2                	xor    edx,edx
c0019b9e:	f7 d8                	neg    eax
c0019ba0:	83 d2 00             	adc    edx,0x0
c0019ba3:	83 c4 14             	add    esp,0x14
c0019ba6:	f7 da                	neg    edx
c0019ba8:	5b                   	pop    ebx
c0019ba9:	5e                   	pop    esi
c0019baa:	c3                   	ret    

c0019bab <sysCallGetArgv(regs*)>:
c0019bab:	83 ec 0c             	sub    esp,0xc
c0019bae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bb2:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0019bb5:	85 c0                	test   eax,eax
c0019bb7:	78 2b                	js     c0019be4 <sysCallGetArgv(regs*)+0x39>
c0019bb9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019bbf:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0019bc2:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0019bc8:	7d 1a                	jge    c0019be4 <sysCallGetArgv(regs*)+0x39>
c0019bca:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0019bd1:	85 c0                	test   eax,eax
c0019bd3:	74 17                	je     c0019bec <sysCallGetArgv(regs*)+0x41>
c0019bd5:	83 ec 08             	sub    esp,0x8
c0019bd8:	50                   	push   eax
c0019bd9:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0019bdc:	e8 8a 6b fe ff       	call   c000076b <strcpy>
c0019be1:	83 c4 10             	add    esp,0x10
c0019be4:	31 c0                	xor    eax,eax
c0019be6:	31 d2                	xor    edx,edx
c0019be8:	83 c4 0c             	add    esp,0xc
c0019beb:	c3                   	ret    
c0019bec:	b8 01 00 00 00       	mov    eax,0x1
c0019bf1:	31 d2                	xor    edx,edx
c0019bf3:	83 c4 0c             	add    esp,0xc
c0019bf6:	c3                   	ret    

c0019bf7 <sysCallTTYName(regs*)>:
c0019bf7:	56                   	push   esi
c0019bf8:	53                   	push   ebx
c0019bf9:	53                   	push   ebx
c0019bfa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019bfe:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019c01:	85 c0                	test   eax,eax
c0019c03:	74 5f                	je     c0019c64 <sysCallTTYName(regs*)+0x6d>
c0019c05:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019c08:	83 f8 02             	cmp    eax,0x2
c0019c0b:	77 3e                	ja     c0019c4b <sysCallTTYName(regs*)+0x54>
c0019c0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c12:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019c15:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0019c1b:	85 db                	test   ebx,ebx
c0019c1d:	74 45                	je     c0019c64 <sysCallTTYName(regs*)+0x6d>
c0019c1f:	83 ec 0c             	sub    esp,0xc
c0019c22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c24:	53                   	push   ebx
c0019c25:	ff 10                	call   DWORD PTR [eax]
c0019c27:	83 c4 10             	add    esp,0x10
c0019c2a:	84 c0                	test   al,al
c0019c2c:	74 41                	je     c0019c6f <sysCallTTYName(regs*)+0x78>
c0019c2e:	83 ec 08             	sub    esp,0x8
c0019c31:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0019c37:	53                   	push   ebx
c0019c38:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0019c3b:	e8 2b 6b fe ff       	call   c000076b <strcpy>
c0019c40:	83 c4 10             	add    esp,0x10
c0019c43:	31 c0                	xor    eax,eax
c0019c45:	59                   	pop    ecx
c0019c46:	31 d2                	xor    edx,edx
c0019c48:	5b                   	pop    ebx
c0019c49:	5e                   	pop    esi
c0019c4a:	c3                   	ret    
c0019c4b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0019c50:	74 bb                	je     c0019c0d <sysCallTTYName(regs*)+0x16>
c0019c52:	83 ec 0c             	sub    esp,0xc
c0019c55:	50                   	push   eax
c0019c56:	e8 cc 74 ff ff       	call   c0011127 <getFromFileDescriptor(int)>
c0019c5b:	83 c4 10             	add    esp,0x10
c0019c5e:	89 c3                	mov    ebx,eax
c0019c60:	85 db                	test   ebx,ebx
c0019c62:	75 bb                	jne    c0019c1f <sysCallTTYName(regs*)+0x28>
c0019c64:	59                   	pop    ecx
c0019c65:	b8 01 00 00 00       	mov    eax,0x1
c0019c6a:	31 d2                	xor    edx,edx
c0019c6c:	5b                   	pop    ebx
c0019c6d:	5e                   	pop    esi
c0019c6e:	c3                   	ret    
c0019c6f:	59                   	pop    ecx
c0019c70:	b8 02 00 00 00       	mov    eax,0x2
c0019c75:	31 d2                	xor    edx,edx
c0019c77:	5b                   	pop    ebx
c0019c78:	5e                   	pop    esi
c0019c79:	c3                   	ret    

c0019c7a <sysCallGetEnv(regs*)>:
c0019c7a:	83 ec 0c             	sub    esp,0xc
c0019c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c81:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0019c84:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0019c87:	85 c9                	test   ecx,ecx
c0019c89:	75 22                	jne    c0019cad <sysCallGetEnv(regs*)+0x33>
c0019c8b:	85 d2                	test   edx,edx
c0019c8d:	74 08                	je     c0019c97 <sysCallGetEnv(regs*)+0x1d>
c0019c8f:	31 c0                	xor    eax,eax
c0019c91:	31 d2                	xor    edx,edx
c0019c93:	83 c4 0c             	add    esp,0xc
c0019c96:	c3                   	ret    
c0019c97:	83 ec 0c             	sub    esp,0xc
c0019c9a:	68 b0 82 02 c0       	push   0xc00282b0
c0019c9f:	e8 45 6a fe ff       	call   c00006e9 <strlen>
c0019ca4:	83 c4 10             	add    esp,0x10
c0019ca7:	31 d2                	xor    edx,edx
c0019ca9:	83 c4 0c             	add    esp,0xc
c0019cac:	c3                   	ret    
c0019cad:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019cb0:	85 d2                	test   edx,edx
c0019cb2:	74 05                	je     c0019cb9 <sysCallGetEnv(regs*)+0x3f>
c0019cb4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0019cb7:	eb d6                	jmp    c0019c8f <sysCallGetEnv(regs*)+0x15>
c0019cb9:	83 ec 08             	sub    esp,0x8
c0019cbc:	68 b0 82 02 c0       	push   0xc00282b0
c0019cc1:	50                   	push   eax
c0019cc2:	e8 a4 6a fe ff       	call   c000076b <strcpy>
c0019cc7:	83 c4 10             	add    esp,0x10
c0019cca:	eb c3                	jmp    c0019c8f <sysCallGetEnv(regs*)+0x15>

c0019ccc <sysCallUSleep(regs*)>:
c0019ccc:	83 ec 14             	sub    esp,0x14
c0019ccf:	b8 e8 03 00 00       	mov    eax,0x3e8
c0019cd4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019cd8:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0019cdf:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0019ce2:	01 ca                	add    edx,ecx
c0019ce4:	52                   	push   edx
c0019ce5:	50                   	push   eax
c0019ce6:	e8 9d 21 00 00       	call   c001be88 <nanoSleep(unsigned long long)>
c0019ceb:	31 c0                	xor    eax,eax
c0019ced:	31 d2                	xor    edx,edx
c0019cef:	83 c4 1c             	add    esp,0x1c
c0019cf2:	c3                   	ret    

c0019cf3 <sysCallSpawn(regs*)>:
c0019cf3:	56                   	push   esi
c0019cf4:	53                   	push   ebx
c0019cf5:	53                   	push   ebx
c0019cf6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019cfa:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019cfd:	85 f6                	test   esi,esi
c0019cff:	75 08                	jne    c0019d09 <sysCallSpawn(regs*)+0x16>
c0019d01:	59                   	pop    ecx
c0019d02:	31 c0                	xor    eax,eax
c0019d04:	31 d2                	xor    edx,edx
c0019d06:	5b                   	pop    ebx
c0019d07:	5e                   	pop    esi
c0019d08:	c3                   	ret    
c0019d09:	83 ec 0c             	sub    esp,0xc
c0019d0c:	68 3b 07 00 00       	push   0x73b
c0019d11:	e8 4a 84 ff ff       	call   c0012160 <operator new(unsigned long)>
c0019d16:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0019d19:	89 c6                	mov    esi,eax
c0019d1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019d20:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019d23:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019d26:	56                   	push   esi
c0019d27:	e8 bc 18 00 00       	call   c001b5e8 <Process::Process(char const*, Process*, char**)>
c0019d2c:	83 c4 20             	add    esp,0x20
c0019d2f:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0019d36:	75 c9                	jne    c0019d01 <sysCallSpawn(regs*)+0xe>
c0019d38:	83 ec 0c             	sub    esp,0xc
c0019d3b:	56                   	push   esi
c0019d3c:	e8 0d 1e 00 00       	call   c001bb4e <Process::createUserThread()>
c0019d41:	8b 06                	mov    eax,DWORD PTR [esi]
c0019d43:	83 c4 10             	add    esp,0x10
c0019d46:	99                   	cdq    
c0019d47:	59                   	pop    ecx
c0019d48:	5b                   	pop    ebx
c0019d49:	5e                   	pop    esi
c0019d4a:	c3                   	ret    

c0019d4b <sysAppSettings(regs*)>:
c0019d4b:	53                   	push   ebx
c0019d4c:	83 ec 08             	sub    esp,0x8
c0019d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d53:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0019d56:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c0019d5c:	25 e0 1f 00 00       	and    eax,0x1fe0
c0019d61:	66 3d c0 09          	cmp    ax,0x9c0
c0019d65:	75 2f                	jne    c0019d96 <sysAppSettings(regs*)+0x4b>
c0019d67:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0019d6d:	83 e0 1f             	and    eax,0x1f
c0019d70:	3c 01                	cmp    al,0x1
c0019d72:	74 2e                	je     c0019da2 <sysAppSettings(regs*)+0x57>
c0019d74:	3c 07                	cmp    al,0x7
c0019d76:	0f 84 bd 00 00 00    	je     c0019e39 <sysAppSettings(regs*)+0xee>
c0019d7c:	84 c0                	test   al,al
c0019d7e:	0f 84 dc 00 00 00    	je     c0019e60 <sysAppSettings(regs*)+0x115>
c0019d84:	3c 08                	cmp    al,0x8
c0019d86:	74 6d                	je     c0019df5 <sysAppSettings(regs*)+0xaa>
c0019d88:	0f b6 c0             	movzx  eax,al
c0019d8b:	83 c4 08             	add    esp,0x8
c0019d8e:	05 e8 03 00 00       	add    eax,0x3e8
c0019d93:	5b                   	pop    ebx
c0019d94:	99                   	cdq    
c0019d95:	c3                   	ret    
c0019d96:	b8 01 00 00 00       	mov    eax,0x1
c0019d9b:	31 d2                	xor    edx,edx
c0019d9d:	83 c4 08             	add    esp,0x8
c0019da0:	5b                   	pop    ebx
c0019da1:	c3                   	ret    
c0019da2:	51                   	push   ecx
c0019da3:	68 00 01 00 00       	push   0x100
c0019da8:	6a 00                	push   0x0
c0019daa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019daf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019db2:	83 c0 0c             	add    eax,0xc
c0019db5:	50                   	push   eax
c0019db6:	e8 11 69 fe ff       	call   c00006cc <memset>
c0019dbb:	83 c4 0c             	add    esp,0xc
c0019dbe:	68 ff 00 00 00       	push   0xff
c0019dc3:	53                   	push   ebx
c0019dc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019dc9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019dcc:	83 c0 0c             	add    eax,0xc
c0019dcf:	50                   	push   eax
c0019dd0:	e8 c1 68 fe ff       	call   c0000696 <memcpy>
c0019dd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019dda:	5b                   	pop    ebx
c0019ddb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019dde:	5a                   	pop    edx
c0019ddf:	8d 50 0c             	lea    edx,[eax+0xc]
c0019de2:	52                   	push   edx
c0019de3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019de9:	e8 00 65 ff ff       	call   c00102ee <VgaText::setTitle(char*)>
c0019dee:	83 c4 10             	add    esp,0x10
c0019df1:	31 c0                	xor    eax,eax
c0019df3:	eb a6                	jmp    c0019d9b <sysAppSettings(regs*)+0x50>
c0019df5:	83 ec 08             	sub    esp,0x8
c0019df8:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0019dfe:	83 e0 0f             	and    eax,0xf
c0019e01:	50                   	push   eax
c0019e02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e07:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e0a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e10:	e8 c9 64 ff ff       	call   c00102de <VgaText::setTitleColour(VgaColour)>
c0019e15:	58                   	pop    eax
c0019e16:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0019e1c:	5a                   	pop    edx
c0019e1d:	c1 e8 04             	shr    eax,0x4
c0019e20:	83 e0 0f             	and    eax,0xf
c0019e23:	50                   	push   eax
c0019e24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e29:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e2c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e32:	e8 97 64 ff ff       	call   c00102ce <VgaText::setTitleTextColour(VgaColour)>
c0019e37:	eb b5                	jmp    c0019dee <sysAppSettings(regs*)+0xa3>
c0019e39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e3e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019e41:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0019e47:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0019e4d:	c0 e8 06             	shr    al,0x6
c0019e50:	83 e0 01             	and    eax,0x1
c0019e53:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0019e59:	31 c0                	xor    eax,eax
c0019e5b:	e9 3b ff ff ff       	jmp    c0019d9b <sysAppSettings(regs*)+0x50>
c0019e60:	b8 02 00 00 00       	mov    eax,0x2
c0019e65:	e9 31 ff ff ff       	jmp    c0019d9b <sysAppSettings(regs*)+0x50>

c0019e6a <sysSetFatAttrib(regs*)>:
c0019e6a:	57                   	push   edi
c0019e6b:	56                   	push   esi
c0019e6c:	53                   	push   ebx
c0019e6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019e71:	83 ec 0c             	sub    esp,0xc
c0019e74:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019e77:	68 14 01 00 00       	push   0x114
c0019e7c:	e8 df 82 ff ff       	call   c0012160 <operator new(unsigned long)>
c0019e81:	83 c4 0c             	add    esp,0xc
c0019e84:	89 c3                	mov    ebx,eax
c0019e86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019e8b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0019e8e:	57                   	push   edi
c0019e8f:	53                   	push   ebx
c0019e90:	e8 e9 88 ff ff       	call   c001277e <File::File(char const*, Process*)>
c0019e95:	83 c4 0c             	add    esp,0xc
c0019e98:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019e9b:	0f b6 d4             	movzx  edx,ah
c0019e9e:	0f b6 c0             	movzx  eax,al
c0019ea1:	52                   	push   edx
c0019ea2:	50                   	push   eax
c0019ea3:	53                   	push   ebx
c0019ea4:	e8 4b 8b ff ff       	call   c00129f4 <File::chfatattr(unsigned char, unsigned char)>
c0019ea9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019eac:	89 c6                	mov    esi,eax
c0019eae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019eb0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019eb3:	83 c4 10             	add    esp,0x10
c0019eb6:	31 c0                	xor    eax,eax
c0019eb8:	5b                   	pop    ebx
c0019eb9:	85 f6                	test   esi,esi
c0019ebb:	5e                   	pop    esi
c0019ebc:	0f 95 c0             	setne  al
c0019ebf:	5f                   	pop    edi
c0019ec0:	31 d2                	xor    edx,edx
c0019ec2:	f7 d8                	neg    eax
c0019ec4:	83 d2 00             	adc    edx,0x0
c0019ec7:	f7 da                	neg    edx
c0019ec9:	c3                   	ret    

c0019eca <sysPanic(regs*)>:
c0019eca:	83 ec 18             	sub    esp,0x18
c0019ecd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019ed1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0019ed4:	e8 14 eb ff ff       	call   c00189ed <Krnl::panic(char const*)>
c0019ed9:	c7 04 24 67 83 02 c0 	mov    DWORD PTR [esp],0xc0028367
c0019ee0:	e8 08 eb ff ff       	call   c00189ed <Krnl::panic(char const*)>
c0019ee5:	b8 01 00 00 00       	mov    eax,0x1
c0019eea:	31 d2                	xor    edx,edx
c0019eec:	83 c4 1c             	add    esp,0x1c
c0019eef:	c3                   	ret    

c0019ef0 <sysPipe(regs*)>:
c0019ef0:	57                   	push   edi
c0019ef1:	56                   	push   esi
c0019ef2:	53                   	push   ebx
c0019ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ef7:	83 ec 0c             	sub    esp,0xc
c0019efa:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0019efd:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0019f00:	6a 20                	push   0x20
c0019f02:	e8 59 82 ff ff       	call   c0012160 <operator new(unsigned long)>
c0019f07:	89 c3                	mov    ebx,eax
c0019f09:	58                   	pop    eax
c0019f0a:	5a                   	pop    edx
c0019f0b:	68 00 50 00 00       	push   0x5000
c0019f10:	53                   	push   ebx
c0019f11:	e8 16 5d ff ff       	call   c000fc2c <Pipe::Pipe(int)>
c0019f16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f19:	e8 54 6f ff ff       	call   c0010e72 <UnixFile::getFileDescriptor()>
c0019f1e:	89 07                	mov    DWORD PTR [edi],eax
c0019f20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f23:	e8 4a 6f ff ff       	call   c0010e72 <UnixFile::getFileDescriptor()>
c0019f28:	83 c4 10             	add    esp,0x10
c0019f2b:	89 06                	mov    DWORD PTR [esi],eax
c0019f2d:	31 d2                	xor    edx,edx
c0019f2f:	5b                   	pop    ebx
c0019f30:	31 c0                	xor    eax,eax
c0019f32:	5e                   	pop    esi
c0019f33:	5f                   	pop    edi
c0019f34:	c3                   	ret    

c0019f35 <sysGetUnixTime(regs*)>:
c0019f35:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0019f3a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019f40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f44:	e9 fd 91 ff ff       	jmp    c0013146 <Clock::timeInSecondsLocal()>

c0019f49 <string_ends_with(char const*, char const*)>:
c0019f49:	57                   	push   edi
c0019f4a:	56                   	push   esi
c0019f4b:	53                   	push   ebx
c0019f4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f50:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019f54:	83 ec 0c             	sub    esp,0xc
c0019f57:	53                   	push   ebx
c0019f58:	e8 8c 67 fe ff       	call   c00006e9 <strlen>
c0019f5d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019f60:	89 c6                	mov    esi,eax
c0019f62:	e8 82 67 fe ff       	call   c00006e9 <strlen>
c0019f67:	83 c4 10             	add    esp,0x10
c0019f6a:	39 c6                	cmp    esi,eax
c0019f6c:	7d 06                	jge    c0019f74 <string_ends_with(char const*, char const*)+0x2b>
c0019f6e:	5b                   	pop    ebx
c0019f6f:	31 c0                	xor    eax,eax
c0019f71:	5e                   	pop    esi
c0019f72:	5f                   	pop    edi
c0019f73:	c3                   	ret    
c0019f74:	83 ec 08             	sub    esp,0x8
c0019f77:	29 c6                	sub    esi,eax
c0019f79:	57                   	push   edi
c0019f7a:	01 f3                	add    ebx,esi
c0019f7c:	53                   	push   ebx
c0019f7d:	e8 3a 68 fe ff       	call   c00007bc <strcmp>
c0019f82:	83 c4 10             	add    esp,0x10
c0019f85:	85 c0                	test   eax,eax
c0019f87:	5b                   	pop    ebx
c0019f88:	0f 94 c0             	sete   al
c0019f8b:	5e                   	pop    esi
c0019f8c:	0f b6 c0             	movzx  eax,al
c0019f8f:	5f                   	pop    edi
c0019f90:	c3                   	ret    

c0019f91 <sysCallOpen(regs*)>:
c0019f91:	56                   	push   esi
c0019f92:	53                   	push   ebx
c0019f93:	81 ec 04 01 00 00    	sub    esp,0x104
c0019f99:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0019fa0:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0019fa3:	85 c9                	test   ecx,ecx
c0019fa5:	0f 84 b3 00 00 00    	je     c001a05e <sysCallOpen(regs*)+0xcd>
c0019fab:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0019fae:	85 c0                	test   eax,eax
c0019fb0:	0f 84 a8 00 00 00    	je     c001a05e <sysCallOpen(regs*)+0xcd>
c0019fb6:	52                   	push   edx
c0019fb7:	68 76 83 02 c0       	push   0xc0028376
c0019fbc:	50                   	push   eax
c0019fbd:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0019fc1:	56                   	push   esi
c0019fc2:	e8 0d 86 ff ff       	call   c00125d4 <standardiseFiles(char*, char const*, char const*)>
c0019fc7:	89 34 24             	mov    DWORD PTR [esp],esi
c0019fca:	e8 1a 67 fe ff       	call   c00006e9 <strlen>
c0019fcf:	83 c4 10             	add    esp,0x10
c0019fd2:	48                   	dec    eax
c0019fd3:	74 1d                	je     c0019ff2 <sysCallOpen(regs*)+0x61>
c0019fd5:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0019fd8:	eb 0f                	jmp    c0019fe9 <sysCallOpen(regs*)+0x58>
c0019fda:	80 fa 3a             	cmp    dl,0x3a
c0019fdd:	74 0f                	je     c0019fee <sysCallOpen(regs*)+0x5d>
c0019fdf:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0019fe3:	48                   	dec    eax
c0019fe4:	74 0c                	je     c0019ff2 <sysCallOpen(regs*)+0x61>
c0019fe6:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0019fe9:	80 fa 2e             	cmp    dl,0x2e
c0019fec:	75 ec                	jne    c0019fda <sysCallOpen(regs*)+0x49>
c0019fee:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0019ff2:	83 ec 08             	sub    esp,0x8
c0019ff5:	68 7a 83 02 c0       	push   0xc002837a
c0019ffa:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0019ffd:	e8 47 ff ff ff       	call   c0019f49 <string_ends_with(char const*, char const*)>
c001a002:	83 c4 10             	add    esp,0x10
c001a005:	85 c0                	test   eax,eax
c001a007:	75 17                	jne    c001a020 <sysCallOpen(regs*)+0x8f>
c001a009:	83 ec 08             	sub    esp,0x8
c001a00c:	68 9b 83 02 c0       	push   0xc002839b
c001a011:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a014:	e8 30 ff ff ff       	call   c0019f49 <string_ends_with(char const*, char const*)>
c001a019:	83 c4 10             	add    esp,0x10
c001a01c:	85 c0                	test   eax,eax
c001a01e:	74 51                	je     c001a071 <sysCallOpen(regs*)+0xe0>
c001a020:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a023:	83 ec 08             	sub    esp,0x8
c001a026:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001a02c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a033:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a036:	ff 30                	push   DWORD PTR [eax]
c001a038:	68 7f 83 02 c0       	push   0xc002837f
c001a03d:	e8 0d 82 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001a042:	c7 04 24 8e 83 02 c0 	mov    DWORD PTR [esp],0xc002838e
c001a049:	e8 01 82 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001a04e:	83 c4 10             	add    esp,0x10
c001a051:	81 c4 04 01 00 00    	add    esp,0x104
c001a057:	31 c0                	xor    eax,eax
c001a059:	31 d2                	xor    edx,edx
c001a05b:	5b                   	pop    ebx
c001a05c:	5e                   	pop    esi
c001a05d:	c3                   	ret    
c001a05e:	81 c4 04 01 00 00    	add    esp,0x104
c001a064:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a069:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a06e:	5b                   	pop    ebx
c001a06f:	5e                   	pop    esi
c001a070:	c3                   	ret    
c001a071:	83 ec 08             	sub    esp,0x8
c001a074:	68 7b 83 02 c0       	push   0xc002837b
c001a079:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a07c:	e8 3b 67 fe ff       	call   c00007bc <strcmp>
c001a081:	83 c4 10             	add    esp,0x10
c001a084:	85 c0                	test   eax,eax
c001a086:	74 98                	je     c001a020 <sysCallOpen(regs*)+0x8f>
c001a088:	83 ec 08             	sub    esp,0x8
c001a08b:	68 7a 83 02 c0       	push   0xc002837a
c001a090:	56                   	push   esi
c001a091:	e8 b3 fe ff ff       	call   c0019f49 <string_ends_with(char const*, char const*)>
c001a096:	83 c4 10             	add    esp,0x10
c001a099:	85 c0                	test   eax,eax
c001a09b:	75 83                	jne    c001a020 <sysCallOpen(regs*)+0x8f>
c001a09d:	83 ec 08             	sub    esp,0x8
c001a0a0:	68 a0 83 02 c0       	push   0xc00283a0
c001a0a5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0a8:	e8 9c fe ff ff       	call   c0019f49 <string_ends_with(char const*, char const*)>
c001a0ad:	83 c4 10             	add    esp,0x10
c001a0b0:	85 c0                	test   eax,eax
c001a0b2:	0f 85 d1 00 00 00    	jne    c001a189 <sysCallOpen(regs*)+0x1f8>
c001a0b8:	83 ec 08             	sub    esp,0x8
c001a0bb:	68 a5 83 02 c0       	push   0xc00283a5
c001a0c0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0c3:	e8 81 fe ff ff       	call   c0019f49 <string_ends_with(char const*, char const*)>
c001a0c8:	83 c4 10             	add    esp,0x10
c001a0cb:	85 c0                	test   eax,eax
c001a0cd:	0f 85 b6 00 00 00    	jne    c001a189 <sysCallOpen(regs*)+0x1f8>
c001a0d3:	83 ec 08             	sub    esp,0x8
c001a0d6:	68 a1 83 02 c0       	push   0xc00283a1
c001a0db:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a0de:	e8 d9 66 fe ff       	call   c00007bc <strcmp>
c001a0e3:	83 c4 10             	add    esp,0x10
c001a0e6:	85 c0                	test   eax,eax
c001a0e8:	0f 84 9b 00 00 00    	je     c001a189 <sysCallOpen(regs*)+0x1f8>
c001a0ee:	83 ec 08             	sub    esp,0x8
c001a0f1:	68 a0 83 02 c0       	push   0xc00283a0
c001a0f6:	56                   	push   esi
c001a0f7:	e8 4d fe ff ff       	call   c0019f49 <string_ends_with(char const*, char const*)>
c001a0fc:	83 c4 10             	add    esp,0x10
c001a0ff:	85 c0                	test   eax,eax
c001a101:	0f 85 82 00 00 00    	jne    c001a189 <sysCallOpen(regs*)+0x1f8>
c001a107:	83 ec 0c             	sub    esp,0xc
c001a10a:	68 14 01 00 00       	push   0x114
c001a10f:	e8 4c 80 ff ff       	call   c0012160 <operator new(unsigned long)>
c001a114:	83 c4 0c             	add    esp,0xc
c001a117:	89 c6                	mov    esi,eax
c001a119:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a11e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a121:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a124:	56                   	push   esi
c001a125:	e8 54 86 ff ff       	call   c001277e <File::File(char const*, Process*)>
c001a12a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001a12d:	83 c4 10             	add    esp,0x10
c001a130:	0f b6 c2             	movzx  eax,dl
c001a133:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001a136:	89 d0                	mov    eax,edx
c001a138:	83 e0 01             	and    eax,0x1
c001a13b:	f6 c2 02             	test   dl,0x2
c001a13e:	74 03                	je     c001a143 <sysCallOpen(regs*)+0x1b2>
c001a140:	83 c8 02             	or     eax,0x2
c001a143:	f6 c2 04             	test   dl,0x4
c001a146:	74 03                	je     c001a14b <sysCallOpen(regs*)+0x1ba>
c001a148:	83 c8 04             	or     eax,0x4
c001a14b:	f6 c2 08             	test   dl,0x8
c001a14e:	74 03                	je     c001a153 <sysCallOpen(regs*)+0x1c2>
c001a150:	83 c8 0a             	or     eax,0xa
c001a153:	83 e2 10             	and    edx,0x10
c001a156:	74 03                	je     c001a15b <sysCallOpen(regs*)+0x1ca>
c001a158:	83 c8 12             	or     eax,0x12
c001a15b:	83 ec 08             	sub    esp,0x8
c001a15e:	50                   	push   eax
c001a15f:	56                   	push   esi
c001a160:	e8 7d 86 ff ff       	call   c00127e2 <File::open(FileOpenMode)>
c001a165:	83 c4 10             	add    esp,0x10
c001a168:	85 c0                	test   eax,eax
c001a16a:	0f 85 ee fe ff ff    	jne    c001a05e <sysCallOpen(regs*)+0xcd>
c001a170:	83 ec 0c             	sub    esp,0xc
c001a173:	56                   	push   esi
c001a174:	e8 f9 6c ff ff       	call   c0010e72 <UnixFile::getFileDescriptor()>
c001a179:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a17c:	89 02                	mov    DWORD PTR [edx],eax
c001a17e:	c1 f8 1f             	sar    eax,0x1f
c001a181:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a184:	e9 c5 fe ff ff       	jmp    c001a04e <sysCallOpen(regs*)+0xbd>
c001a189:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a18c:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001a192:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a199:	e9 b3 fe ff ff       	jmp    c001a051 <sysCallOpen(regs*)+0xc0>

c001a19e <setupSystemCalls()>:
c001a19e:	c7 05 60 ae 02 c0 fa 93 01 c0 	mov    DWORD PTR ds:0xc002ae60,0xc00193fa
c001a1a8:	c7 05 64 ae 02 c0 28 92 01 c0 	mov    DWORD PTR ds:0xc002ae64,0xc0019228
c001a1b2:	c7 05 68 ae 02 c0 3d 93 01 c0 	mov    DWORD PTR ds:0xc002ae68,0xc001933d
c001a1bc:	c7 05 6c ae 02 c0 92 93 01 c0 	mov    DWORD PTR ds:0xc002ae6c,0xc0019392
c001a1c6:	c7 05 70 ae 02 c0 d5 92 01 c0 	mov    DWORD PTR ds:0xc002ae70,0xc00192d5
c001a1d0:	c7 05 74 ae 02 c0 14 94 01 c0 	mov    DWORD PTR ds:0xc002ae74,0xc0019414
c001a1da:	c7 05 78 ae 02 c0 b9 95 01 c0 	mov    DWORD PTR ds:0xc002ae78,0xc00195b9
c001a1e4:	c7 05 7c ae 02 c0 d8 95 01 c0 	mov    DWORD PTR ds:0xc002ae7c,0xc00195d8
c001a1ee:	c7 05 84 ae 02 c0 39 99 01 c0 	mov    DWORD PTR ds:0xc002ae84,0xc0019939
c001a1f8:	c7 05 80 ae 02 c0 91 9f 01 c0 	mov    DWORD PTR ds:0xc002ae80,0xc0019f91
c001a202:	c7 05 88 ae 02 c0 c1 99 01 c0 	mov    DWORD PTR ds:0xc002ae88,0xc00199c1
c001a20c:	c7 05 8c ae 02 c0 37 96 01 c0 	mov    DWORD PTR ds:0xc002ae8c,0xc0019637
c001a216:	c7 05 90 ae 02 c0 20 94 01 c0 	mov    DWORD PTR ds:0xc002ae90,0xc0019420
c001a220:	c7 05 94 ae 02 c0 25 94 01 c0 	mov    DWORD PTR ds:0xc002ae94,0xc0019425
c001a22a:	c7 05 98 ae 02 c0 2e 9a 01 c0 	mov    DWORD PTR ds:0xc002ae98,0xc0019a2e
c001a234:	c7 05 9c ae 02 c0 87 9a 01 c0 	mov    DWORD PTR ds:0xc002ae9c,0xc0019a87
c001a23e:	c7 05 a0 ae 02 c0 1f 97 01 c0 	mov    DWORD PTR ds:0xc002aea0,0xc001971f
c001a248:	c7 05 a4 ae 02 c0 88 97 01 c0 	mov    DWORD PTR ds:0xc002aea4,0xc0019788
c001a252:	c7 05 a8 ae 02 c0 b6 98 01 c0 	mov    DWORD PTR ds:0xc002aea8,0xc00198b6
c001a25c:	c7 05 ac ae 02 c0 2a 94 01 c0 	mov    DWORD PTR ds:0xc002aeac,0xc001942a
c001a266:	c7 05 b0 ae 02 c0 ed 9a 01 c0 	mov    DWORD PTR ds:0xc002aeb0,0xc0019aed
c001a270:	c7 05 b4 ae 02 c0 34 94 01 c0 	mov    DWORD PTR ds:0xc002aeb4,0xc0019434
c001a27a:	c7 05 b8 ae 02 c0 3f 94 01 c0 	mov    DWORD PTR ds:0xc002aeb8,0xc001943f
c001a284:	c7 05 bc ae 02 c0 07 9b 01 c0 	mov    DWORD PTR ds:0xc002aebc,0xc0019b07
c001a28e:	c7 05 c0 ae 02 c0 59 9b 01 c0 	mov    DWORD PTR ds:0xc002aec0,0xc0019b59
c001a298:	c7 05 c4 ae 02 c0 4a 94 01 c0 	mov    DWORD PTR ds:0xc002aec4,0xc001944a
c001a2a2:	c7 05 c8 ae 02 c0 ab 9b 01 c0 	mov    DWORD PTR ds:0xc002aec8,0xc0019bab
c001a2ac:	c7 05 cc ae 02 c0 f4 95 01 c0 	mov    DWORD PTR ds:0xc002aecc,0xc00195f4
c001a2b6:	c7 05 d0 ae 02 c0 f7 9b 01 c0 	mov    DWORD PTR ds:0xc002aed0,0xc0019bf7
c001a2c0:	c7 05 d4 ae 02 c0 c5 96 01 c0 	mov    DWORD PTR ds:0xc002aed4,0xc00196c5
c001a2ca:	c7 05 d8 ae 02 c0 cc 9c 01 c0 	mov    DWORD PTR ds:0xc002aed8,0xc0019ccc
c001a2d4:	c7 05 dc ae 02 c0 05 98 01 c0 	mov    DWORD PTR ds:0xc002aedc,0xc0019805
c001a2de:	c7 05 e0 ae 02 c0 f3 9c 01 c0 	mov    DWORD PTR ds:0xc002aee0,0xc0019cf3
c001a2e8:	c7 05 e4 ae 02 c0 7a 9c 01 c0 	mov    DWORD PTR ds:0xc002aee4,0xc0019c7a
c001a2f2:	c7 05 e8 ae 02 c0 4b 9d 01 c0 	mov    DWORD PTR ds:0xc002aee8,0xc0019d4b
c001a2fc:	c7 05 ec ae 02 c0 5a 94 01 c0 	mov    DWORD PTR ds:0xc002aeec,0xc001945a
c001a306:	c7 05 f0 ae 02 c0 c4 94 01 c0 	mov    DWORD PTR ds:0xc002aef0,0xc00194c4
c001a310:	c7 05 f4 ae 02 c0 0a 95 01 c0 	mov    DWORD PTR ds:0xc002aef4,0xc001950a
c001a31a:	c7 05 f8 ae 02 c0 6a 9e 01 c0 	mov    DWORD PTR ds:0xc002aef8,0xc0019e6a
c001a324:	c7 05 fc ae 02 c0 ca 9e 01 c0 	mov    DWORD PTR ds:0xc002aefc,0xc0019eca
c001a32e:	c7 05 00 af 02 c0 5b 95 01 c0 	mov    DWORD PTR ds:0xc002af00,0xc001955b
c001a338:	c7 05 04 af 02 c0 f0 9e 01 c0 	mov    DWORD PTR ds:0xc002af04,0xc0019ef0
c001a342:	c7 05 08 af 02 c0 35 9f 01 c0 	mov    DWORD PTR ds:0xc002af08,0xc0019f35
c001a34c:	c7 05 0c af 02 c0 40 92 01 c0 	mov    DWORD PTR ds:0xc002af0c,0xc0019240
c001a356:	c3                   	ret    

c001a357 <systemCall(regs*, void*)>:
c001a357:	53                   	push   ebx
c001a358:	83 ec 08             	sub    esp,0x8
c001a35b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a35f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a362:	83 f8 7f             	cmp    eax,0x7f
c001a365:	77 16                	ja     c001a37d <systemCall(regs*, void*)+0x26>
c001a367:	8b 14 85 60 ae 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd51a0]
c001a36e:	85 d2                	test   edx,edx
c001a370:	74 0b                	je     c001a37d <systemCall(regs*, void*)+0x26>
c001a372:	83 ec 0c             	sub    esp,0xc
c001a375:	53                   	push   ebx
c001a376:	ff d2                	call   edx
c001a378:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a37b:	eb 0d                	jmp    c001a38a <systemCall(regs*, void*)+0x33>
c001a37d:	52                   	push   edx
c001a37e:	52                   	push   edx
c001a37f:	50                   	push   eax
c001a380:	68 aa 83 02 c0       	push   0xc00283aa
c001a385:	e8 c5 7e ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001a38a:	83 c4 10             	add    esp,0x10
c001a38d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a392:	31 d2                	xor    edx,edx
c001a394:	83 c4 08             	add    esp,0x8
c001a397:	5b                   	pop    ebx
c001a398:	c3                   	ret    

c001a399 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001a399:	55                   	push   ebp
c001a39a:	89 e5                	mov    ebp,esp
c001a39c:	57                   	push   edi
c001a39d:	56                   	push   esi
c001a39e:	53                   	push   ebx
c001a39f:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001a3a5:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001a3a8:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001a3ab:	85 c0                	test   eax,eax
c001a3ad:	0f 95 c1             	setne  cl
c001a3b0:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001a3b4:	0f 94 c2             	sete   dl
c001a3b7:	84 d1                	test   cl,dl
c001a3b9:	74 26                	je     c001a3e1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a3bb:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001a3c2:	74 1d                	je     c001a3e1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001a3c4:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001a3c7:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001a3cd:	89 d6                	mov    esi,edx
c001a3cf:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001a3d5:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001a3db:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001a3de:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001a3e1:	83 ec 0c             	sub    esp,0xc
c001a3e4:	05 ff 0f 00 00       	add    eax,0xfff
c001a3e9:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001a3ec:	6a 01                	push   0x1
c001a3ee:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001a3f4:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001a3fa:	e8 7e 6e ff ff       	call   c001127d <Virt::allocateKernelVirtualPages(int)>
c001a3ff:	83 c4 10             	add    esp,0x10
c001a402:	89 c6                	mov    esi,eax
c001a404:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001a40a:	0f 86 21 01 00 00    	jbe    c001a531 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001a410:	c1 eb 0c             	shr    ebx,0xc
c001a413:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001a41d:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001a423:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a426:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001a429:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001a42f:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001a432:	29 d8                	sub    eax,ebx
c001a434:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001a43a:	0f 83 f4 00 00 00    	jae    c001a534 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001a440:	83 ec 0c             	sub    esp,0xc
c001a443:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001a449:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001a44c:	3d 00 10 00 00       	cmp    eax,0x1000
c001a451:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001a453:	52                   	push   edx
c001a454:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001a45a:	52                   	push   edx
c001a45b:	76 05                	jbe    c001a462 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001a45d:	b8 00 10 00 00       	mov    eax,0x1000
c001a462:	31 d2                	xor    edx,edx
c001a464:	52                   	push   edx
c001a465:	50                   	push   eax
c001a466:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001a469:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a46c:	83 c4 20             	add    esp,0x20
c001a46f:	85 c0                	test   eax,eax
c001a471:	74 1f                	je     c001a492 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001a473:	51                   	push   ecx
c001a474:	51                   	push   ecx
c001a475:	50                   	push   eax
c001a476:	68 be 83 02 c0       	push   0xc00283be
c001a47b:	e8 cf 7d ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001a480:	89 34 24             	mov    DWORD PTR [esp],esi
c001a483:	e8 4f 71 ff ff       	call   c00115d7 <Virt::freeKernelVirtualPages(unsigned long)>
c001a488:	83 c4 10             	add    esp,0x10
c001a48b:	31 c0                	xor    eax,eax
c001a48d:	e9 7c 01 00 00       	jmp    c001a60e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001a492:	e8 a9 14 00 00       	call   c001b940 <lockScheduler()>
c001a497:	e8 54 52 ff ff       	call   c000f6f0 <Phys::allocatePage()>
c001a49c:	6a 07                	push   0x7
c001a49e:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001a4a4:	56                   	push   esi
c001a4a5:	50                   	push   eax
c001a4a6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a4ac:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a4af:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a4b5:	e8 96 74 ff ff       	call   c0011950 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a4ba:	83 c4 0c             	add    esp,0xc
c001a4bd:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a4c3:	6a 00                	push   0x0
c001a4c5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a4cb:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001a4ce:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001a4d4:	e8 d5 72 ff ff       	call   c00117ae <VAS::mapOtherVASIn(bool, VAS*)>
c001a4d9:	58                   	pop    eax
c001a4da:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001a4e0:	5a                   	pop    edx
c001a4e1:	68 07 04 00 00       	push   0x407
c001a4e6:	53                   	push   ebx
c001a4e7:	81 c3 00 10 00 00    	add    ebx,0x1000
c001a4ed:	50                   	push   eax
c001a4ee:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a4f4:	6a 00                	push   0x0
c001a4f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4fb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a4fe:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a504:	e8 fd 77 ff ff       	call   c0011d06 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001a509:	83 c4 1c             	add    esp,0x1c
c001a50c:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001a512:	68 00 10 00 00       	push   0x1000
c001a517:	50                   	push   eax
c001a518:	56                   	push   esi
c001a519:	e8 78 61 fe ff       	call   c0000696 <memcpy>
c001a51e:	e8 1f 14 00 00       	call   c001b942 <unlockScheduler()>
c001a523:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001a529:	83 c4 10             	add    esp,0x10
c001a52c:	e9 f5 fe ff ff       	jmp    c001a426 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001a531:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001a534:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001a53e:	0f 86 bc 00 00 00    	jbe    c001a600 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001a544:	e8 f7 13 00 00       	call   c001b940 <lockScheduler()>
c001a549:	51                   	push   ecx
c001a54a:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a550:	6a 00                	push   0x0
c001a552:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a557:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a55a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a560:	e8 49 72 ff ff       	call   c00117ae <VAS::mapOtherVASIn(bool, VAS*)>
c001a565:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001a56b:	83 c4 10             	add    esp,0x10
c001a56e:	c1 e8 0c             	shr    eax,0xc
c001a571:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001a57b:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001a581:	e8 6a 51 ff ff       	call   c000f6f0 <Phys::allocatePage()>
c001a586:	6a 07                	push   0x7
c001a588:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001a58e:	56                   	push   esi
c001a58f:	50                   	push   eax
c001a590:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a596:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a599:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001a59f:	e8 ac 73 ff ff       	call   c0011950 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a5a4:	58                   	pop    eax
c001a5a5:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001a5ab:	5a                   	pop    edx
c001a5ac:	68 07 04 00 00       	push   0x407
c001a5b1:	53                   	push   ebx
c001a5b2:	81 c3 00 10 00 00    	add    ebx,0x1000
c001a5b8:	50                   	push   eax
c001a5b9:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001a5bf:	6a 00                	push   0x0
c001a5c1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5c6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5c9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001a5cf:	e8 32 77 ff ff       	call   c0011d06 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001a5d4:	83 c4 1c             	add    esp,0x1c
c001a5d7:	68 00 10 00 00       	push   0x1000
c001a5dc:	6a 00                	push   0x0
c001a5de:	56                   	push   esi
c001a5df:	e8 e8 60 fe ff       	call   c00006cc <memset>
c001a5e4:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001a5ea:	83 c4 10             	add    esp,0x10
c001a5ed:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001a5f3:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001a5f9:	77 86                	ja     c001a581 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001a5fb:	e8 42 13 00 00       	call   c001b942 <unlockScheduler()>
c001a600:	83 ec 0c             	sub    esp,0xc
c001a603:	56                   	push   esi
c001a604:	e8 ce 6f ff ff       	call   c00115d7 <Virt::freeKernelVirtualPages(unsigned long)>
c001a609:	83 c4 10             	add    esp,0x10
c001a60c:	b0 01                	mov    al,0x1
c001a60e:	8d 65 f4             	lea    esp,[ebp-0xc]
c001a611:	5b                   	pop    ebx
c001a612:	5e                   	pop    esi
c001a613:	5f                   	pop    edi
c001a614:	5d                   	pop    ebp
c001a615:	c3                   	ret    

c001a616 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001a616:	55                   	push   ebp
c001a617:	57                   	push   edi
c001a618:	56                   	push   esi
c001a619:	53                   	push   ebx
c001a61a:	83 ec 48             	sub    esp,0x48
c001a61d:	68 14 01 00 00       	push   0x114
c001a622:	e8 39 7b ff ff       	call   c0012160 <operator new(unsigned long)>
c001a627:	83 c4 0c             	add    esp,0xc
c001a62a:	89 c6                	mov    esi,eax
c001a62c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001a630:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a634:	50                   	push   eax
c001a635:	e8 44 81 ff ff       	call   c001277e <File::File(char const*, Process*)>
c001a63a:	58                   	pop    eax
c001a63b:	5a                   	pop    edx
c001a63c:	6a 01                	push   0x1
c001a63e:	56                   	push   esi
c001a63f:	e8 9e 81 ff ff       	call   c00127e2 <File::open(FileOpenMode)>
c001a644:	83 c4 10             	add    esp,0x10
c001a647:	85 c0                	test   eax,eax
c001a649:	0f 85 47 01 00 00    	jne    c001a796 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a64f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001a657:	83 ec 0c             	sub    esp,0xc
c001a65a:	6a 34                	push   0x34
c001a65c:	e8 e5 4a ff ff       	call   c000f146 <malloc>
c001a661:	89 c3                	mov    ebx,eax
c001a663:	58                   	pop    eax
c001a664:	8b 06                	mov    eax,DWORD PTR [esi]
c001a666:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001a66a:	57                   	push   edi
c001a66b:	53                   	push   ebx
c001a66c:	6a 00                	push   0x0
c001a66e:	6a 34                	push   0x34
c001a670:	56                   	push   esi
c001a671:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a674:	83 c4 20             	add    esp,0x20
c001a677:	85 c0                	test   eax,eax
c001a679:	0f 85 17 01 00 00    	jne    c001a796 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a67f:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001a685:	0f 85 0b 01 00 00    	jne    c001a796 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a68b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a68e:	85 c0                	test   eax,eax
c001a690:	0f 84 00 01 00 00    	je     c001a796 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a696:	31 d2                	xor    edx,edx
c001a698:	55                   	push   ebp
c001a699:	52                   	push   edx
c001a69a:	50                   	push   eax
c001a69b:	56                   	push   esi
c001a69c:	e8 ff 81 ff ff       	call   c00128a0 <File::seek(unsigned long long)>
c001a6a1:	83 c4 10             	add    esp,0x10
c001a6a4:	85 c0                	test   eax,eax
c001a6a6:	0f 85 ea 00 00 00    	jne    c001a796 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a6ac:	83 ec 0c             	sub    esp,0xc
c001a6af:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001a6b2:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001a6b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a6ba:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001a6be:	0f af c2             	imul   eax,edx
c001a6c1:	50                   	push   eax
c001a6c2:	e8 7f 4a ff ff       	call   c000f146 <malloc>
c001a6c7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a6ca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a6ce:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a6d0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a6d4:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001a6d8:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001a6dc:	0f af c2             	imul   eax,edx
c001a6df:	99                   	cdq    
c001a6e0:	52                   	push   edx
c001a6e1:	50                   	push   eax
c001a6e2:	56                   	push   esi
c001a6e3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a6e6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001a6e9:	83 c4 20             	add    esp,0x20
c001a6ec:	85 c0                	test   eax,eax
c001a6ee:	0f 84 a2 00 00 00    	je     c001a796 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a6f4:	31 d2                	xor    edx,edx
c001a6f6:	51                   	push   ecx
c001a6f7:	52                   	push   edx
c001a6f8:	50                   	push   eax
c001a6f9:	56                   	push   esi
c001a6fa:	e8 a1 81 ff ff       	call   c00128a0 <File::seek(unsigned long long)>
c001a6ff:	83 c4 10             	add    esp,0x10
c001a702:	85 c0                	test   eax,eax
c001a704:	0f 85 8c 00 00 00    	jne    c001a796 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001a70a:	83 ec 0c             	sub    esp,0xc
c001a70d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001a711:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001a715:	31 ed                	xor    ebp,ebp
c001a717:	0f af c2             	imul   eax,edx
c001a71a:	50                   	push   eax
c001a71b:	e8 26 4a ff ff       	call   c000f146 <malloc>
c001a720:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a723:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a727:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a729:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a72d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001a731:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001a735:	0f af c2             	imul   eax,edx
c001a738:	99                   	cdq    
c001a739:	52                   	push   edx
c001a73a:	50                   	push   eax
c001a73b:	56                   	push   esi
c001a73c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a73f:	83 c4 20             	add    esp,0x20
c001a742:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a74a:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001a74e:	0f 86 80 00 00 00    	jbe    c001a7d4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001a754:	0f b7 fd             	movzx  edi,bp
c001a757:	c1 e7 05             	shl    edi,0x5
c001a75a:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001a75e:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001a761:	75 6b                	jne    c001a7ce <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001a763:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001a766:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a76a:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001a76d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a771:	52                   	push   edx
c001a772:	31 d2                	xor    edx,edx
c001a774:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001a777:	52                   	push   edx
c001a778:	50                   	push   eax
c001a779:	56                   	push   esi
c001a77a:	e8 21 81 ff ff       	call   c00128a0 <File::seek(unsigned long long)>
c001a77f:	83 c4 10             	add    esp,0x10
c001a782:	85 c0                	test   eax,eax
c001a784:	74 17                	je     c001a79d <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001a786:	83 ec 0c             	sub    esp,0xc
c001a789:	68 e9 83 02 c0       	push   0xc00283e9
c001a78e:	e8 bc 7a ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001a793:	83 c4 10             	add    esp,0x10
c001a796:	31 c0                	xor    eax,eax
c001a798:	e9 87 00 00 00       	jmp    c001a824 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001a79d:	83 ec 0c             	sub    esp,0xc
c001a7a0:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001a7a3:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001a7a6:	50                   	push   eax
c001a7a7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a7ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7af:	56                   	push   esi
c001a7b0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001a7b4:	e8 e0 fb ff ff       	call   c001a399 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001a7b9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a7bd:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001a7c1:	83 c4 20             	add    esp,0x20
c001a7c4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001a7c8:	73 04                	jae    c001a7ce <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001a7ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a7ce:	45                   	inc    ebp
c001a7cf:	e9 76 ff ff ff       	jmp    c001a74a <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001a7d4:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001a7d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a7dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7e0:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001a7e6:	83 ec 0c             	sub    esp,0xc
c001a7e9:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001a7ef:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a7f4:	05 00 10 00 00       	add    eax,0x1000
c001a7f9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001a7fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a800:	e8 51 49 ff ff       	call   c000f156 <free>
c001a805:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a808:	e8 49 49 ff ff       	call   c000f156 <free>
c001a80d:	58                   	pop    eax
c001a80e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a812:	e8 3f 49 ff ff       	call   c000f156 <free>
c001a817:	89 34 24             	mov    DWORD PTR [esp],esi
c001a81a:	e8 21 80 ff ff       	call   c0012840 <File::close()>
c001a81f:	83 c4 10             	add    esp,0x10
c001a822:	b0 01                	mov    al,0x1
c001a824:	83 c4 3c             	add    esp,0x3c
c001a827:	5b                   	pop    ebx
c001a828:	5e                   	pop    esi
c001a829:	5f                   	pop    edi
c001a82a:	5d                   	pop    ebp
c001a82b:	c3                   	ret    

c001a82c <Thr::runtimeReferenceHelper()>:
c001a82c:	83 ec 18             	sub    esp,0x18
c001a82f:	68 f1 83 02 c0       	push   0xc00283f1
c001a834:	e8 16 7a ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001a839:	fa                   	cli    
c001a83a:	83 c4 10             	add    esp,0x10
c001a83d:	eb fe                	jmp    c001a83d <Thr::runtimeReferenceHelper()+0x11>

c001a83f <Thr::getAddressOfKernelSymbol(char const*)>:
c001a83f:	57                   	push   edi
c001a840:	56                   	push   esi
c001a841:	53                   	push   ebx
c001a842:	31 db                	xor    ebx,ebx
c001a844:	39 1d 00 b8 02 c0    	cmp    DWORD PTR ds:0xc002b800,ebx
c001a84a:	7e 3c                	jle    c001a888 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001a84c:	8b 34 9d 80 b7 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd4880]
c001a853:	31 ff                	xor    edi,edi
c001a855:	39 3c 9d 80 b6 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd4980],edi
c001a85c:	7e 27                	jle    c001a885 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001a85e:	50                   	push   eax
c001a85f:	50                   	push   eax
c001a860:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a864:	8b 06                	mov    eax,DWORD PTR [esi]
c001a866:	03 04 9d 00 b7 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd4900]
c001a86d:	50                   	push   eax
c001a86e:	e8 49 5f fe ff       	call   c00007bc <strcmp>
c001a873:	83 c4 10             	add    esp,0x10
c001a876:	85 c0                	test   eax,eax
c001a878:	75 05                	jne    c001a87f <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001a87a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a87d:	eb 0b                	jmp    c001a88a <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001a87f:	83 c6 10             	add    esi,0x10
c001a882:	47                   	inc    edi
c001a883:	eb d0                	jmp    c001a855 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001a885:	43                   	inc    ebx
c001a886:	eb bc                	jmp    c001a844 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001a888:	31 c0                	xor    eax,eax
c001a88a:	5b                   	pop    ebx
c001a88b:	5e                   	pop    esi
c001a88c:	5f                   	pop    edi
c001a88d:	c3                   	ret    

c001a88e <Thr::loadKernelSymbolTable(char const*)>:
c001a88e:	55                   	push   ebp
c001a88f:	57                   	push   edi
c001a890:	56                   	push   esi
c001a891:	53                   	push   ebx
c001a892:	83 ec 68             	sub    esp,0x68
c001a895:	8b 35 54 b8 02 c0    	mov    esi,DWORD PTR ds:0xc002b854
c001a89b:	68 14 01 00 00       	push   0x114
c001a8a0:	e8 bb 78 ff ff       	call   c0012160 <operator new(unsigned long)>
c001a8a5:	83 c4 0c             	add    esp,0xc
c001a8a8:	89 c3                	mov    ebx,eax
c001a8aa:	56                   	push   esi
c001a8ab:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a8af:	50                   	push   eax
c001a8b0:	e8 c9 7e ff ff       	call   c001277e <File::File(char const*, Process*)>
c001a8b5:	5e                   	pop    esi
c001a8b6:	5f                   	pop    edi
c001a8b7:	6a 01                	push   0x1
c001a8b9:	53                   	push   ebx
c001a8ba:	e8 23 7f ff ff       	call   c00127e2 <File::open(FileOpenMode)>
c001a8bf:	83 c4 10             	add    esp,0x10
c001a8c2:	31 d2                	xor    edx,edx
c001a8c4:	85 c0                	test   eax,eax
c001a8c6:	0f 85 79 02 00 00    	jne    c001ab45 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001a8cc:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001a8d4:	83 ec 0c             	sub    esp,0xc
c001a8d7:	6a 34                	push   0x34
c001a8d9:	e8 68 48 ff ff       	call   c000f146 <malloc>
c001a8de:	59                   	pop    ecx
c001a8df:	89 c7                	mov    edi,eax
c001a8e1:	8d 74 24 34          	lea    esi,[esp+0x34]
c001a8e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a8e7:	56                   	push   esi
c001a8e8:	57                   	push   edi
c001a8e9:	6a 00                	push   0x0
c001a8eb:	6a 34                	push   0x34
c001a8ed:	53                   	push   ebx
c001a8ee:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a8f1:	83 c4 20             	add    esp,0x20
c001a8f4:	85 c0                	test   eax,eax
c001a8f6:	74 17                	je     c001a90f <Thr::loadKernelSymbolTable(char const*)+0x81>
c001a8f8:	83 ec 0c             	sub    esp,0xc
c001a8fb:	68 13 84 02 c0       	push   0xc0028413
c001a900:	e8 e8 e0 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c001a905:	83 c4 10             	add    esp,0x10
c001a908:	31 d2                	xor    edx,edx
c001a90a:	e9 36 02 00 00       	jmp    c001ab45 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001a90f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001a915:	75 e1                	jne    c001a8f8 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001a917:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001a91a:	85 c0                	test   eax,eax
c001a91c:	74 da                	je     c001a8f8 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001a91e:	52                   	push   edx
c001a91f:	31 d2                	xor    edx,edx
c001a921:	52                   	push   edx
c001a922:	50                   	push   eax
c001a923:	53                   	push   ebx
c001a924:	e8 77 7f ff ff       	call   c00128a0 <File::seek(unsigned long long)>
c001a929:	83 c4 10             	add    esp,0x10
c001a92c:	85 c0                	test   eax,eax
c001a92e:	75 c8                	jne    c001a8f8 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001a930:	83 ec 0c             	sub    esp,0xc
c001a933:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001a937:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001a93b:	31 ed                	xor    ebp,ebp
c001a93d:	0f af c2             	imul   eax,edx
c001a940:	50                   	push   eax
c001a941:	e8 00 48 ff ff       	call   c000f146 <malloc>
c001a946:	89 34 24             	mov    DWORD PTR [esp],esi
c001a949:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a94d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001a94f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a953:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001a957:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001a95b:	0f af c2             	imul   eax,edx
c001a95e:	99                   	cdq    
c001a95f:	52                   	push   edx
c001a960:	50                   	push   eax
c001a961:	53                   	push   ebx
c001a962:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001a965:	83 c4 20             	add    esp,0x20
c001a968:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a970:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001a978:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a980:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a988:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001a98c:	0f 86 aa 00 00 00    	jbe    c001aa3c <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001a992:	0f b7 f5             	movzx  esi,bp
c001a995:	6b f6 28             	imul   esi,esi,0x28
c001a998:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c001a99c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a99f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a9a3:	50                   	push   eax
c001a9a4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a9a8:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001a9ac:	8b 16                	mov    edx,DWORD PTR [esi]
c001a9ae:	6b c0 28             	imul   eax,eax,0x28
c001a9b1:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001a9b5:	89 d0                	mov    eax,edx
c001a9b7:	31 d2                	xor    edx,edx
c001a9b9:	52                   	push   edx
c001a9ba:	50                   	push   eax
c001a9bb:	53                   	push   ebx
c001a9bc:	e8 df 7e ff ff       	call   c00128a0 <File::seek(unsigned long long)>
c001a9c1:	83 c4 0c             	add    esp,0xc
c001a9c4:	6a 20                	push   0x20
c001a9c6:	6a 00                	push   0x0
c001a9c8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001a9cc:	52                   	push   edx
c001a9cd:	e8 fa 5c fe ff       	call   c00006cc <memset>
c001a9d2:	58                   	pop    eax
c001a9d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9d5:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001a9d9:	51                   	push   ecx
c001a9da:	8d 54 24 40          	lea    edx,[esp+0x40]
c001a9de:	52                   	push   edx
c001a9df:	6a 00                	push   0x0
c001a9e1:	6a 1f                	push   0x1f
c001a9e3:	53                   	push   ebx
c001a9e4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a9e7:	83 c4 18             	add    esp,0x18
c001a9ea:	68 2a 84 02 c0       	push   0xc002842a
c001a9ef:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001a9f3:	52                   	push   edx
c001a9f4:	e8 c3 5d fe ff       	call   c00007bc <strcmp>
c001a9f9:	83 c4 10             	add    esp,0x10
c001a9fc:	85 c0                	test   eax,eax
c001a9fe:	75 0f                	jne    c001aa0f <Thr::loadKernelSymbolTable(char const*)+0x181>
c001aa00:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001aa03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aa07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aa0f:	50                   	push   eax
c001aa10:	50                   	push   eax
c001aa11:	68 32 84 02 c0       	push   0xc0028432
c001aa16:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001aa1a:	50                   	push   eax
c001aa1b:	e8 9c 5d fe ff       	call   c00007bc <strcmp>
c001aa20:	83 c4 10             	add    esp,0x10
c001aa23:	85 c0                	test   eax,eax
c001aa25:	75 0f                	jne    c001aa36 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001aa27:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001aa2a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa36:	45                   	inc    ebp
c001aa37:	e9 4c ff ff ff       	jmp    c001a988 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001aa3c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001aa41:	75 10                	jne    c001aa53 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001aa43:	83 ec 0c             	sub    esp,0xc
c001aa46:	68 3a 84 02 c0       	push   0xc002843a
c001aa4b:	e8 9d df ff ff       	call   c00189ed <Krnl::panic(char const*)>
c001aa50:	83 c4 10             	add    esp,0x10
c001aa53:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aa58:	75 10                	jne    c001aa6a <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001aa5a:	83 ec 0c             	sub    esp,0xc
c001aa5d:	68 3a 84 02 c0       	push   0xc002843a
c001aa62:	e8 86 df ff ff       	call   c00189ed <Krnl::panic(char const*)>
c001aa67:	83 c4 10             	add    esp,0x10
c001aa6a:	31 d2                	xor    edx,edx
c001aa6c:	50                   	push   eax
c001aa6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa71:	52                   	push   edx
c001aa72:	50                   	push   eax
c001aa73:	53                   	push   ebx
c001aa74:	e8 27 7e ff ff       	call   c00128a0 <File::seek(unsigned long long)>
c001aa79:	5a                   	pop    edx
c001aa7a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001aa7e:	e8 c3 46 ff ff       	call   c000f146 <malloc>
c001aa83:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001aa8b:	89 c1                	mov    ecx,eax
c001aa8d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa95:	5e                   	pop    esi
c001aa96:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aa98:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001aa9c:	55                   	push   ebp
c001aa9d:	51                   	push   ecx
c001aa9e:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001aaa2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aaa6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aaaa:	53                   	push   ebx
c001aaab:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aaae:	83 c4 14             	add    esp,0x14
c001aab1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aab5:	e8 8c 46 ff ff       	call   c000f146 <malloc>
c001aaba:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001aabd:	89 c6                	mov    esi,eax
c001aabf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aac1:	56                   	push   esi
c001aac2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aac6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aaca:	53                   	push   ebx
c001aacb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001aace:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aad2:	8b 15 00 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b800
c001aad8:	83 c4 1c             	add    esp,0x1c
c001aadb:	c1 e8 04             	shr    eax,0x4
c001aade:	89 04 95 80 b6 02 c0 	mov    DWORD PTR [edx*4-0x3ffd4980],eax
c001aae5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aae9:	31 d2                	xor    edx,edx
c001aaeb:	52                   	push   edx
c001aaec:	50                   	push   eax
c001aaed:	53                   	push   ebx
c001aaee:	e8 ad 7d ff ff       	call   c00128a0 <File::seek(unsigned long long)>
c001aaf3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001aaf6:	31 d2                	xor    edx,edx
c001aaf8:	56                   	push   esi
c001aaf9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001aafd:	52                   	push   edx
c001aafe:	50                   	push   eax
c001aaff:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab01:	53                   	push   ebx
c001ab02:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ab05:	83 c4 14             	add    esp,0x14
c001ab08:	53                   	push   ebx
c001ab09:	e8 32 7d ff ff       	call   c0012840 <File::close()>
c001ab0e:	5d                   	pop    ebp
c001ab0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab13:	e8 3e 46 ff ff       	call   c000f156 <free>
c001ab18:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ab1b:	e8 36 46 ff ff       	call   c000f156 <free>
c001ab20:	a1 00 b8 02 c0       	mov    eax,ds:0xc002b800
c001ab25:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001ab29:	8d 50 01             	lea    edx,[eax+0x1]
c001ab2c:	89 0c 85 80 b7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4880],ecx
c001ab33:	89 15 00 b8 02 c0    	mov    DWORD PTR ds:0xc002b800,edx
c001ab39:	89 34 85 00 b7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4900],esi
c001ab40:	83 c4 10             	add    esp,0x10
c001ab43:	b2 01                	mov    dl,0x1
c001ab45:	83 c4 5c             	add    esp,0x5c
c001ab48:	88 d0                	mov    al,dl
c001ab4a:	5b                   	pop    ebx
c001ab4b:	5e                   	pop    esi
c001ab4c:	5f                   	pop    edi
c001ab4d:	5d                   	pop    ebp
c001ab4e:	c3                   	ret    

c001ab4f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001ab4f:	55                   	push   ebp
c001ab50:	57                   	push   edi
c001ab51:	56                   	push   esi
c001ab52:	53                   	push   ebx
c001ab53:	81 ec 68 03 00 00    	sub    esp,0x368
c001ab59:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001ab60:	8b 1d 54 b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b854
c001ab66:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ab6a:	68 14 01 00 00       	push   0x114
c001ab6f:	e8 ec 75 ff ff       	call   c0012160 <operator new(unsigned long)>
c001ab74:	83 c4 0c             	add    esp,0xc
c001ab77:	89 c7                	mov    edi,eax
c001ab79:	53                   	push   ebx
c001ab7a:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001ab81:	50                   	push   eax
c001ab82:	e8 f7 7b ff ff       	call   c001277e <File::File(char const*, Process*)>
c001ab87:	5e                   	pop    esi
c001ab88:	5d                   	pop    ebp
c001ab89:	6a 01                	push   0x1
c001ab8b:	57                   	push   edi
c001ab8c:	e8 51 7c ff ff       	call   c00127e2 <File::open(FileOpenMode)>
c001ab91:	83 c4 10             	add    esp,0x10
c001ab94:	85 c0                	test   eax,eax
c001ab96:	0f 85 10 07 00 00    	jne    c001b2ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ab9c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001aba4:	83 ec 0c             	sub    esp,0xc
c001aba7:	6a 34                	push   0x34
c001aba9:	e8 98 45 ff ff       	call   c000f146 <malloc>
c001abae:	5b                   	pop    ebx
c001abaf:	89 c5                	mov    ebp,eax
c001abb1:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001abb5:	8b 07                	mov    eax,DWORD PTR [edi]
c001abb7:	53                   	push   ebx
c001abb8:	55                   	push   ebp
c001abb9:	6a 00                	push   0x0
c001abbb:	6a 34                	push   0x34
c001abbd:	57                   	push   edi
c001abbe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001abc1:	83 c4 20             	add    esp,0x20
c001abc4:	85 c0                	test   eax,eax
c001abc6:	0f 85 e0 06 00 00    	jne    c001b2ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001abcc:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c001abd3:	0f 85 d3 06 00 00    	jne    c001b2ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001abd9:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001abdc:	85 c0                	test   eax,eax
c001abde:	0f 84 c8 06 00 00    	je     c001b2ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001abe4:	31 d2                	xor    edx,edx
c001abe6:	51                   	push   ecx
c001abe7:	52                   	push   edx
c001abe8:	50                   	push   eax
c001abe9:	57                   	push   edi
c001abea:	e8 b1 7c ff ff       	call   c00128a0 <File::seek(unsigned long long)>
c001abef:	83 c4 10             	add    esp,0x10
c001abf2:	85 c0                	test   eax,eax
c001abf4:	0f 85 b2 06 00 00    	jne    c001b2ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001abfa:	83 ec 0c             	sub    esp,0xc
c001abfd:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001ac00:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001ac04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac08:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001ac0c:	0f af c2             	imul   eax,edx
c001ac0f:	50                   	push   eax
c001ac10:	e8 31 45 ff ff       	call   c000f146 <malloc>
c001ac15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac18:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac1c:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ac1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac22:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c001ac26:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001ac2a:	0f af c2             	imul   eax,edx
c001ac2d:	99                   	cdq    
c001ac2e:	52                   	push   edx
c001ac2f:	50                   	push   eax
c001ac30:	57                   	push   edi
c001ac31:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ac34:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c001ac37:	83 c4 20             	add    esp,0x20
c001ac3a:	85 c0                	test   eax,eax
c001ac3c:	0f 84 6a 06 00 00    	je     c001b2ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ac42:	52                   	push   edx
c001ac43:	31 d2                	xor    edx,edx
c001ac45:	52                   	push   edx
c001ac46:	50                   	push   eax
c001ac47:	57                   	push   edi
c001ac48:	e8 53 7c ff ff       	call   c00128a0 <File::seek(unsigned long long)>
c001ac4d:	83 c4 10             	add    esp,0x10
c001ac50:	85 c0                	test   eax,eax
c001ac52:	0f 85 54 06 00 00    	jne    c001b2ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001ac58:	83 ec 0c             	sub    esp,0xc
c001ac5b:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001ac5f:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001ac63:	31 f6                	xor    esi,esi
c001ac65:	0f af c2             	imul   eax,edx
c001ac68:	50                   	push   eax
c001ac69:	e8 d8 44 ff ff       	call   c000f146 <malloc>
c001ac6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ac71:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ac75:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ac77:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac7b:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001ac7f:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c001ac83:	0f af c2             	imul   eax,edx
c001ac86:	99                   	cdq    
c001ac87:	52                   	push   edx
c001ac88:	50                   	push   eax
c001ac89:	57                   	push   edi
c001ac8a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ac8d:	83 c4 20             	add    esp,0x20
c001ac90:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c001ac94:	0f 86 af 00 00 00    	jbe    c001ad49 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c001ac9a:	0f b7 de             	movzx  ebx,si
c001ac9d:	c1 e3 05             	shl    ebx,0x5
c001aca0:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001aca4:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001aca7:	0f 85 96 00 00 00    	jne    c001ad43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c001acad:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001acb0:	31 d2                	xor    edx,edx
c001acb2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001acb6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001acb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001acbd:	50                   	push   eax
c001acbe:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001acc1:	52                   	push   edx
c001acc2:	50                   	push   eax
c001acc3:	57                   	push   edi
c001acc4:	e8 d7 7b ff ff       	call   c00128a0 <File::seek(unsigned long long)>
c001acc9:	83 c4 10             	add    esp,0x10
c001accc:	85 c0                	test   eax,eax
c001acce:	0f 85 d8 05 00 00    	jne    c001b2ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001acd4:	52                   	push   edx
c001acd5:	52                   	push   edx
c001acd6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001acda:	68 54 84 02 c0       	push   0xc0028454
c001acdf:	e8 6b 75 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001ace4:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c001aceb:	31 d2                	xor    edx,edx
c001aced:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c001acf1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001acf5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001acf9:	59                   	pop    ecx
c001acfa:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001acfc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ad03:	50                   	push   eax
c001ad04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ad08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad0c:	52                   	push   edx
c001ad0d:	50                   	push   eax
c001ad0e:	57                   	push   edi
c001ad0f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ad12:	83 c4 18             	add    esp,0x18
c001ad15:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ad18:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ad1b:	50                   	push   eax
c001ad1c:	68 78 84 02 c0       	push   0xc0028478
c001ad21:	e8 29 75 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001ad26:	83 c4 0c             	add    esp,0xc
c001ad29:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ad2c:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001ad2f:	50                   	push   eax
c001ad30:	6a 00                	push   0x0
c001ad32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad36:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ad3a:	50                   	push   eax
c001ad3b:	e8 8c 59 fe ff       	call   c00006cc <memset>
c001ad40:	83 c4 10             	add    esp,0x10
c001ad43:	46                   	inc    esi
c001ad44:	e9 47 ff ff ff       	jmp    c001ac90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c001ad49:	31 db                	xor    ebx,ebx
c001ad4b:	50                   	push   eax
c001ad4c:	68 00 01 00 00       	push   0x100
c001ad51:	6a 00                	push   0x0
c001ad53:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ad57:	50                   	push   eax
c001ad58:	e8 6f 59 fe ff       	call   c00006cc <memset>
c001ad5d:	83 c4 0c             	add    esp,0xc
c001ad60:	68 00 01 00 00       	push   0x100
c001ad65:	6a 00                	push   0x0
c001ad67:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ad6e:	50                   	push   eax
c001ad6f:	e8 58 59 fe ff       	call   c00006cc <memset>
c001ad74:	83 c4 10             	add    esp,0x10
c001ad77:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ad7f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ad87:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ad8f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ad97:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ad9f:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c001ada3:	0f 86 2f 01 00 00    	jbe    c001aed8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c001ada9:	0f b7 f3             	movzx  esi,bx
c001adac:	6b f6 28             	imul   esi,esi,0x28
c001adaf:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001adb3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001adb6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001adba:	50                   	push   eax
c001adbb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001adbf:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001adc3:	8b 06                	mov    eax,DWORD PTR [esi]
c001adc5:	6b d2 28             	imul   edx,edx,0x28
c001adc8:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001adcc:	31 d2                	xor    edx,edx
c001adce:	52                   	push   edx
c001adcf:	50                   	push   eax
c001add0:	57                   	push   edi
c001add1:	e8 ca 7a ff ff       	call   c00128a0 <File::seek(unsigned long long)>
c001add6:	83 c4 0c             	add    esp,0xc
c001add9:	6a 20                	push   0x20
c001addb:	6a 00                	push   0x0
c001addd:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ade4:	51                   	push   ecx
c001ade5:	e8 e2 58 fe ff       	call   c00006cc <memset>
c001adea:	58                   	pop    eax
c001adeb:	8b 07                	mov    eax,DWORD PTR [edi]
c001aded:	8d 54 24 58          	lea    edx,[esp+0x58]
c001adf1:	52                   	push   edx
c001adf2:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001adf9:	51                   	push   ecx
c001adfa:	6a 00                	push   0x0
c001adfc:	6a 1f                	push   0x1f
c001adfe:	57                   	push   edi
c001adff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae02:	83 c4 1c             	add    esp,0x1c
c001ae05:	6a 09                	push   0x9
c001ae07:	68 95 84 02 c0       	push   0xc0028495
c001ae0c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ae13:	51                   	push   ecx
c001ae14:	e8 1a 58 fe ff       	call   c0000633 <memcmp>
c001ae19:	83 c4 10             	add    esp,0x10
c001ae1c:	85 c0                	test   eax,eax
c001ae1e:	75 21                	jne    c001ae41 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c001ae20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae24:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ae28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae2c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ae30:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ae33:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001ae3a:	89 c8                	mov    eax,ecx
c001ae3c:	40                   	inc    eax
c001ae3d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae41:	50                   	push   eax
c001ae42:	6a 09                	push   0x9
c001ae44:	68 9f 84 02 c0       	push   0xc002849f
c001ae49:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ae50:	50                   	push   eax
c001ae51:	e8 dd 57 fe ff       	call   c0000633 <memcmp>
c001ae56:	83 c4 10             	add    esp,0x10
c001ae59:	85 c0                	test   eax,eax
c001ae5b:	75 21                	jne    c001ae7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c001ae5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae61:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ae65:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae69:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ae6d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ae70:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001ae77:	89 c8                	mov    eax,ecx
c001ae79:	40                   	inc    eax
c001ae7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae7e:	50                   	push   eax
c001ae7f:	50                   	push   eax
c001ae80:	68 2a 84 02 c0       	push   0xc002842a
c001ae85:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ae8c:	50                   	push   eax
c001ae8d:	e8 2a 59 fe ff       	call   c00007bc <strcmp>
c001ae92:	83 c4 10             	add    esp,0x10
c001ae95:	85 c0                	test   eax,eax
c001ae97:	75 0f                	jne    c001aea8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c001ae99:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ae9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aea0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aea4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aea8:	50                   	push   eax
c001aea9:	50                   	push   eax
c001aeaa:	68 32 84 02 c0       	push   0xc0028432
c001aeaf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001aeb6:	50                   	push   eax
c001aeb7:	e8 00 59 fe ff       	call   c00007bc <strcmp>
c001aebc:	83 c4 10             	add    esp,0x10
c001aebf:	85 c0                	test   eax,eax
c001aec1:	75 0f                	jne    c001aed2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c001aec3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001aec6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aeca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aece:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aed2:	43                   	inc    ebx
c001aed3:	e9 c7 fe ff ff       	jmp    c001ad9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c001aed8:	31 d2                	xor    edx,edx
c001aeda:	50                   	push   eax
c001aedb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aedf:	52                   	push   edx
c001aee0:	50                   	push   eax
c001aee1:	57                   	push   edi
c001aee2:	e8 b9 79 ff ff       	call   c00128a0 <File::seek(unsigned long long)>
c001aee7:	5a                   	pop    edx
c001aee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aeec:	e8 55 42 ff ff       	call   c000f146 <malloc>
c001aef1:	31 d2                	xor    edx,edx
c001aef3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001aef7:	59                   	pop    ecx
c001aef8:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001aefa:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001aefe:	53                   	push   ebx
c001aeff:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001af03:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af07:	52                   	push   edx
c001af08:	50                   	push   eax
c001af09:	57                   	push   edi
c001af0a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001af0d:	83 c4 14             	add    esp,0x14
c001af10:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001af14:	e8 2d 42 ff ff       	call   c000f146 <malloc>
c001af19:	31 d2                	xor    edx,edx
c001af1b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af1f:	83 c4 0c             	add    esp,0xc
c001af22:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af26:	52                   	push   edx
c001af27:	50                   	push   eax
c001af28:	57                   	push   edi
c001af29:	e8 72 79 ff ff       	call   c00128a0 <File::seek(unsigned long long)>
c001af2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001af31:	31 d2                	xor    edx,edx
c001af33:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001af37:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001af39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af3d:	52                   	push   edx
c001af3e:	50                   	push   eax
c001af3f:	57                   	push   edi
c001af40:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001af43:	83 c4 20             	add    esp,0x20
c001af46:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001af4e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001af52:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001af56:	0f 84 54 03 00 00    	je     c001b2b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c001af5c:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001af63:	31 d2                	xor    edx,edx
c001af65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af69:	c1 e8 03             	shr    eax,0x3
c001af6c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001af70:	50                   	push   eax
c001af71:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001af75:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001af79:	52                   	push   edx
c001af7a:	50                   	push   eax
c001af7b:	57                   	push   edi
c001af7c:	e8 1f 79 ff ff       	call   c00128a0 <File::seek(unsigned long long)>
c001af81:	58                   	pop    eax
c001af82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001af86:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001af8d:	e8 b4 41 ff ff       	call   c000f146 <malloc>
c001af92:	31 d2                	xor    edx,edx
c001af94:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af98:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001af9a:	58                   	pop    eax
c001af9b:	8d 44 24 58          	lea    eax,[esp+0x58]
c001af9f:	50                   	push   eax
c001afa0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001afa4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001afa8:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001afaf:	52                   	push   edx
c001afb0:	50                   	push   eax
c001afb1:	57                   	push   edi
c001afb2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001afb5:	83 c4 20             	add    esp,0x20
c001afb8:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001afc0:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001afc4:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001afc8:	0f 8d c6 02 00 00    	jge    c001b294 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c001afce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001afd2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afd6:	31 db                	xor    ebx,ebx
c001afd8:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001afdb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001afdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001afe3:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001afe7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001afeb:	c1 e8 08             	shr    eax,0x8
c001afee:	89 c6                	mov    esi,eax
c001aff0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001aff4:	c1 e6 04             	shl    esi,0x4
c001aff7:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001affb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001affe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b002:	85 c0                	test   eax,eax
c001b004:	0f 85 17 01 00 00    	jne    c001b121 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b00a:	83 ec 0c             	sub    esp,0xc
c001b00d:	b3 01                	mov    bl,0x1
c001b00f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b013:	03 06                	add    eax,DWORD PTR [esi]
c001b015:	50                   	push   eax
c001b016:	e8 24 f8 ff ff       	call   c001a83f <Thr::getAddressOfKernelSymbol(char const*)>
c001b01b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b01f:	83 c4 10             	add    esp,0x10
c001b022:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b027:	0f 85 f4 00 00 00    	jne    c001b121 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b02d:	50                   	push   eax
c001b02e:	50                   	push   eax
c001b02f:	68 a9 84 02 c0       	push   0xc00284a9
c001b034:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b038:	03 06                	add    eax,DWORD PTR [esi]
c001b03a:	50                   	push   eax
c001b03b:	e8 7c 57 fe ff       	call   c00007bc <strcmp>
c001b040:	83 c4 10             	add    esp,0x10
c001b043:	85 c0                	test   eax,eax
c001b045:	75 0a                	jne    c001b051 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c001b047:	b8 5c 33 02 c0       	mov    eax,0xc002335c
c001b04c:	e9 ca 00 00 00       	jmp    c001b11b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b051:	50                   	push   eax
c001b052:	50                   	push   eax
c001b053:	68 b3 84 02 c0       	push   0xc00284b3
c001b058:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b05c:	03 06                	add    eax,DWORD PTR [esi]
c001b05e:	50                   	push   eax
c001b05f:	e8 58 57 fe ff       	call   c00007bc <strcmp>
c001b064:	83 c4 10             	add    esp,0x10
c001b067:	85 c0                	test   eax,eax
c001b069:	75 0a                	jne    c001b075 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c001b06b:	b8 90 30 02 c0       	mov    eax,0xc0023090
c001b070:	e9 a6 00 00 00       	jmp    c001b11b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b075:	53                   	push   ebx
c001b076:	53                   	push   ebx
c001b077:	68 bc 84 02 c0       	push   0xc00284bc
c001b07c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b080:	03 06                	add    eax,DWORD PTR [esi]
c001b082:	50                   	push   eax
c001b083:	e8 34 57 fe ff       	call   c00007bc <strcmp>
c001b088:	83 c4 10             	add    esp,0x10
c001b08b:	85 c0                	test   eax,eax
c001b08d:	75 0a                	jne    c001b099 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c001b08f:	b8 5c 34 02 c0       	mov    eax,0xc002345c
c001b094:	e9 82 00 00 00       	jmp    c001b11b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001b099:	51                   	push   ecx
c001b09a:	51                   	push   ecx
c001b09b:	68 c6 84 02 c0       	push   0xc00284c6
c001b0a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0a4:	03 06                	add    eax,DWORD PTR [esi]
c001b0a6:	50                   	push   eax
c001b0a7:	e8 10 57 fe ff       	call   c00007bc <strcmp>
c001b0ac:	83 c4 10             	add    esp,0x10
c001b0af:	85 c0                	test   eax,eax
c001b0b1:	74 63                	je     c001b116 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c001b0b3:	50                   	push   eax
c001b0b4:	50                   	push   eax
c001b0b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0b9:	03 06                	add    eax,DWORD PTR [esi]
c001b0bb:	50                   	push   eax
c001b0bc:	68 cf 84 02 c0       	push   0xc00284cf
c001b0c1:	e8 89 71 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001b0c6:	58                   	pop    eax
c001b0c7:	5a                   	pop    edx
c001b0c8:	68 e9 84 02 c0       	push   0xc00284e9
c001b0cd:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001b0d4:	53                   	push   ebx
c001b0d5:	e8 91 56 fe ff       	call   c000076b <strcpy>
c001b0da:	59                   	pop    ecx
c001b0db:	58                   	pop    eax
c001b0dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b0e0:	03 06                	add    eax,DWORD PTR [esi]
c001b0e2:	50                   	push   eax
c001b0e3:	53                   	push   ebx
c001b0e4:	e8 39 57 fe ff       	call   c0000822 <strcat>
c001b0e9:	58                   	pop    eax
c001b0ea:	5a                   	pop    edx
c001b0eb:	68 7f 85 02 c0       	push   0xc002857f
c001b0f0:	53                   	push   ebx
c001b0f1:	e8 2c 57 fe ff       	call   c0000822 <strcat>
c001b0f6:	83 c4 10             	add    esp,0x10
c001b0f9:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b0fe:	0f 84 4b 01 00 00    	je     c001b24f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b104:	83 ec 0c             	sub    esp,0xc
c001b107:	53                   	push   ebx
c001b108:	e8 e0 d8 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c001b10d:	83 c4 10             	add    esp,0x10
c001b110:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001b114:	eb 0b                	jmp    c001b121 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c001b116:	b8 dc 31 02 c0       	mov    eax,0xc00231dc
c001b11b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b11f:	b3 01                	mov    bl,0x1
c001b121:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001b126:	0f 85 80 00 00 00    	jne    c001b1ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c001b12c:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001b133:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b137:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001b13b:	01 ce                	add    esi,ecx
c001b13d:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b145:	8b 06                	mov    eax,DWORD PTR [esi]
c001b147:	0f 94 c2             	sete   dl
c001b14a:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b152:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001b157:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001b15b:	84 db                	test   bl,bl
c001b15d:	74 31                	je     c001b190 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c001b15f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b163:	01 c3                	add    ebx,eax
c001b165:	84 d2                	test   dl,dl
c001b167:	75 0a                	jne    c001b173 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c001b169:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b16d:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b171:	76 32                	jbe    c001b1a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b173:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b178:	0f 84 d1 00 00 00    	je     c001b24f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b17e:	83 ec 0c             	sub    esp,0xc
c001b181:	68 00 85 02 c0       	push   0xc0028500
c001b186:	e8 62 d8 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c001b18b:	83 c4 10             	add    esp,0x10
c001b18e:	eb 15                	jmp    c001b1a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b190:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001b193:	84 d2                	test   dl,dl
c001b195:	75 0e                	jne    c001b1a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b197:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b19b:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b19f:	77 04                	ja     c001b1a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001b1a1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001b1a5:	89 1e                	mov    DWORD PTR [esi],ebx
c001b1a7:	e9 df 00 00 00       	jmp    c001b28b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b1ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001b1b1:	75 6e                	jne    c001b221 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c001b1b3:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001b1ba:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001b1be:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001b1c2:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001b1ca:	74 17                	je     c001b1e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001b1cc:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001b1d4:	74 0d                	je     c001b1e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c001b1d6:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001b1da:	83 e8 04             	sub    eax,0x4
c001b1dd:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001b1e1:	76 17                	jbe    c001b1fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001b1e3:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b1e8:	74 65                	je     c001b24f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b1ea:	83 ec 0c             	sub    esp,0xc
c001b1ed:	68 1c 85 02 c0       	push   0xc002851c
c001b1f2:	e8 f6 d7 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c001b1f7:	83 c4 10             	add    esp,0x10
c001b1fa:	8b 16                	mov    edx,DWORD PTR [esi]
c001b1fc:	84 db                	test   bl,bl
c001b1fe:	74 13                	je     c001b213 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c001b200:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b204:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001b20b:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b20f:	01 d0                	add    eax,edx
c001b211:	eb 06                	jmp    c001b219 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c001b213:	89 d0                	mov    eax,edx
c001b215:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001b219:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001b21d:	89 06                	mov    DWORD PTR [esi],eax
c001b21f:	eb 6a                	jmp    c001b28b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b221:	50                   	push   eax
c001b222:	50                   	push   eax
c001b223:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001b228:	50                   	push   eax
c001b229:	68 38 85 02 c0       	push   0xc0028538
c001b22e:	e8 1c 70 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001b233:	83 c4 10             	add    esp,0x10
c001b236:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001b23b:	74 12                	je     c001b24f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c001b23d:	83 ec 0c             	sub    esp,0xc
c001b240:	68 43 85 02 c0       	push   0xc0028543
c001b245:	e8 a3 d7 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c001b24a:	83 c4 10             	add    esp,0x10
c001b24d:	eb 3c                	jmp    c001b28b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001b24f:	83 ec 0c             	sub    esp,0xc
c001b252:	57                   	push   edi
c001b253:	e8 e8 75 ff ff       	call   c0012840 <File::close()>
c001b258:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b25b:	8b 07                	mov    eax,DWORD PTR [edi]
c001b25d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b260:	59                   	pop    ecx
c001b261:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b265:	e8 ec 3e ff ff       	call   c000f156 <free>
c001b26a:	5b                   	pop    ebx
c001b26b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b26f:	e8 e2 3e ff ff       	call   c000f156 <free>
c001b274:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b277:	e8 da 3e ff ff       	call   c000f156 <free>
c001b27c:	5e                   	pop    esi
c001b27d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b281:	e8 d0 3e ff ff       	call   c000f156 <free>
c001b286:	83 c4 10             	add    esp,0x10
c001b289:	eb 21                	jmp    c001b2ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001b28b:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001b28f:	e9 2c fd ff ff       	jmp    c001afc0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c001b294:	83 ec 0c             	sub    esp,0xc
c001b297:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b29b:	e8 b6 3e ff ff       	call   c000f156 <free>
c001b2a0:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001b2a4:	83 c4 10             	add    esp,0x10
c001b2a7:	e9 a2 fc ff ff       	jmp    c001af4e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c001b2ac:	31 c0                	xor    eax,eax
c001b2ae:	eb 32                	jmp    c001b2e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c001b2b0:	83 ec 0c             	sub    esp,0xc
c001b2b3:	57                   	push   edi
c001b2b4:	e8 87 75 ff ff       	call   c0012840 <File::close()>
c001b2b9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b2bc:	8b 07                	mov    eax,DWORD PTR [edi]
c001b2be:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b2c1:	58                   	pop    eax
c001b2c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b2c6:	e8 8b 3e ff ff       	call   c000f156 <free>
c001b2cb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b2ce:	e8 83 3e ff ff       	call   c000f156 <free>
c001b2d3:	5a                   	pop    edx
c001b2d4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b2d8:	e8 79 3e ff ff       	call   c000f156 <free>
c001b2dd:	83 c4 10             	add    esp,0x10
c001b2e0:	b0 01                	mov    al,0x1
c001b2e2:	81 c4 5c 03 00 00    	add    esp,0x35c
c001b2e8:	5b                   	pop    ebx
c001b2e9:	5e                   	pop    esi
c001b2ea:	5f                   	pop    edi
c001b2eb:	5d                   	pop    ebp
c001b2ec:	c3                   	ret    

c001b2ed <Thr::getDriverBaseFromAddress(unsigned long)>:
c001b2ed:	56                   	push   esi
c001b2ee:	31 d2                	xor    edx,edx
c001b2f0:	53                   	push   ebx
c001b2f1:	8b 1d 60 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b060
c001b2f7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b2fb:	39 d3                	cmp    ebx,edx
c001b2fd:	7e 1b                	jle    c001b31a <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001b2ff:	8b 04 95 80 b2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd4d80]
c001b306:	39 c8                	cmp    eax,ecx
c001b308:	77 0d                	ja     c001b317 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001b30a:	8b 34 95 80 b0 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd4f80]
c001b311:	01 c6                	add    esi,eax
c001b313:	39 ce                	cmp    esi,ecx
c001b315:	77 05                	ja     c001b31c <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001b317:	42                   	inc    edx
c001b318:	eb e1                	jmp    c001b2fb <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001b31a:	31 c0                	xor    eax,eax
c001b31c:	5b                   	pop    ebx
c001b31d:	5e                   	pop    esi
c001b31e:	c3                   	ret    

c001b31f <Thr::getDriverNameFromAddress(unsigned long)>:
c001b31f:	53                   	push   ebx
c001b320:	31 c0                	xor    eax,eax
c001b322:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b326:	8b 1d 60 b0 02 c0    	mov    ebx,DWORD PTR ds:0xc002b060
c001b32c:	39 c3                	cmp    ebx,eax
c001b32e:	7e 22                	jle    c001b352 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001b330:	8b 14 85 80 b2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4d80]
c001b337:	39 ca                	cmp    edx,ecx
c001b339:	77 14                	ja     c001b34f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b33b:	03 14 85 80 b0 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd4f80]
c001b342:	39 ca                	cmp    edx,ecx
c001b344:	76 09                	jbe    c001b34f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001b346:	8b 04 85 80 b4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4b80]
c001b34d:	eb 05                	jmp    c001b354 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001b34f:	40                   	inc    eax
c001b350:	eb da                	jmp    c001b32c <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001b352:	31 c0                	xor    eax,eax
c001b354:	5b                   	pop    ebx
c001b355:	c3                   	ret    

c001b356 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001b356:	53                   	push   ebx
c001b357:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b35b:	53                   	push   ebx
c001b35c:	e8 8c ff ff ff       	call   c001b2ed <Thr::getDriverBaseFromAddress(unsigned long)>
c001b361:	5a                   	pop    edx
c001b362:	31 d2                	xor    edx,edx
c001b364:	85 c0                	test   eax,eax
c001b366:	74 04                	je     c001b36c <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001b368:	89 da                	mov    edx,ebx
c001b36a:	29 c2                	sub    edx,eax
c001b36c:	89 d0                	mov    eax,edx
c001b36e:	5b                   	pop    ebx
c001b36f:	c3                   	ret    

c001b370 <Thr::loadDLL(char const*, bool)>:
c001b370:	55                   	push   ebp
c001b371:	57                   	push   edi
c001b372:	56                   	push   esi
c001b373:	53                   	push   ebx
c001b374:	81 ec 34 01 00 00    	sub    esp,0x134
c001b37a:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001b381:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001b388:	56                   	push   esi
c001b389:	68 5b 85 02 c0       	push   0xc002855b
c001b38e:	e8 bc 6e ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001b393:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b39a:	e8 c1 6d ff ff       	call   c0012160 <operator new(unsigned long)>
c001b39f:	83 c4 0c             	add    esp,0xc
c001b3a2:	89 c3                	mov    ebx,eax
c001b3a4:	ff 35 54 b8 02 c0    	push   DWORD PTR ds:0xc002b854
c001b3aa:	56                   	push   esi
c001b3ab:	50                   	push   eax
c001b3ac:	e8 cd 73 ff ff       	call   c001277e <File::File(char const*, Process*)>
c001b3b1:	83 c4 0c             	add    esp,0xc
c001b3b4:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001b3b8:	50                   	push   eax
c001b3b9:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b3bd:	50                   	push   eax
c001b3be:	53                   	push   ebx
c001b3bf:	e8 ca 76 ff ff       	call   c0012a8e <File::stat(unsigned long long*, bool*)>
c001b3c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b3c9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3cc:	83 c4 10             	add    esp,0x10
c001b3cf:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001b3d4:	75 0a                	jne    c001b3e0 <Thr::loadDLL(char const*, bool)+0x70>
c001b3d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b3da:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001b3de:	75 3c                	jne    c001b41c <Thr::loadDLL(char const*, bool)+0xac>
c001b3e0:	89 e8                	mov    eax,ebp
c001b3e2:	84 c0                	test   al,al
c001b3e4:	0f 84 3d 01 00 00    	je     c001b527 <Thr::loadDLL(char const*, bool)+0x1b7>
c001b3ea:	50                   	push   eax
c001b3eb:	50                   	push   eax
c001b3ec:	68 6c 85 02 c0       	push   0xc002856c
c001b3f1:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001b3f5:	53                   	push   ebx
c001b3f6:	e8 70 53 fe ff       	call   c000076b <strcpy>
c001b3fb:	58                   	pop    eax
c001b3fc:	5a                   	pop    edx
c001b3fd:	56                   	push   esi
c001b3fe:	53                   	push   ebx
c001b3ff:	e8 1e 54 fe ff       	call   c0000822 <strcat>
c001b404:	59                   	pop    ecx
c001b405:	5f                   	pop    edi
c001b406:	68 7f 85 02 c0       	push   0xc002857f
c001b40b:	53                   	push   ebx
c001b40c:	e8 11 54 fe ff       	call   c0000822 <strcat>
c001b411:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b414:	e8 d4 d5 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c001b419:	83 c4 10             	add    esp,0x10
c001b41c:	e8 ec 5f ff ff       	call   c001140d <Virt::getAKernelVAS()>
c001b421:	51                   	push   ecx
c001b422:	6a 03                	push   0x3
c001b424:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001b428:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b42c:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001b432:	83 d3 00             	adc    ebx,0x0
c001b435:	89 ca                	mov    edx,ecx
c001b437:	89 d1                	mov    ecx,edx
c001b439:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001b43d:	51                   	push   ecx
c001b43e:	50                   	push   eax
c001b43f:	e8 0c 66 ff ff       	call   c0011a50 <VAS::allocatePages(int, int)>
c001b444:	89 34 24             	mov    DWORD PTR [esp],esi
c001b447:	89 c3                	mov    ebx,eax
c001b449:	e8 9b 52 fe ff       	call   c00006e9 <strlen>
c001b44e:	8b 3d 60 b0 02 c0    	mov    edi,DWORD PTR ds:0xc002b060
c001b454:	40                   	inc    eax
c001b455:	89 04 24             	mov    DWORD PTR [esp],eax
c001b458:	e8 e9 3c ff ff       	call   c000f146 <malloc>
c001b45d:	89 04 bd 80 b4 02 c0 	mov    DWORD PTR [edi*4-0x3ffd4b80],eax
c001b464:	5f                   	pop    edi
c001b465:	58                   	pop    eax
c001b466:	a1 60 b0 02 c0       	mov    eax,ds:0xc002b060
c001b46b:	56                   	push   esi
c001b46c:	ff 34 85 80 b4 02 c0 	push   DWORD PTR [eax*4-0x3ffd4b80]
c001b473:	e8 f3 52 fe ff       	call   c000076b <strcpy>
c001b478:	a1 60 b0 02 c0       	mov    eax,ds:0xc002b060
c001b47d:	8d 50 01             	lea    edx,[eax+0x1]
c001b480:	89 1c 85 80 b2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4d80],ebx
c001b487:	89 15 60 b0 02 c0    	mov    DWORD PTR ds:0xc002b060,edx
c001b48d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b491:	83 c4 0c             	add    esp,0xc
c001b494:	89 14 85 80 b0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4f80],edx
c001b49b:	6a 01                	push   0x1
c001b49d:	53                   	push   ebx
c001b49e:	56                   	push   esi
c001b49f:	e8 ab f6 ff ff       	call   c001ab4f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001b4a4:	83 c4 10             	add    esp,0x10
c001b4a7:	89 c7                	mov    edi,eax
c001b4a9:	fe c8                	dec    al
c001b4ab:	74 16                	je     c001b4c3 <Thr::loadDLL(char const*, bool)+0x153>
c001b4ad:	89 e8                	mov    eax,ebp
c001b4af:	84 c0                	test   al,al
c001b4b1:	74 10                	je     c001b4c3 <Thr::loadDLL(char const*, bool)+0x153>
c001b4b3:	83 ec 0c             	sub    esp,0xc
c001b4b6:	68 81 85 02 c0       	push   0xc0028581
c001b4bb:	e8 2d d5 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c001b4c0:	83 c4 10             	add    esp,0x10
c001b4c3:	31 f6                	xor    esi,esi
c001b4c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4c9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b4cd:	05 ff 0f 00 00       	add    eax,0xfff
c001b4d2:	83 d2 00             	adc    edx,0x0
c001b4d5:	0f ac d0 0c          	shrd   eax,edx,0xc
c001b4d9:	c1 ea 0c             	shr    edx,0xc
c001b4dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b4e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b4e4:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001b4e8:	ba 00 00 00 00       	mov    edx,0x0
c001b4ed:	89 d0                	mov    eax,edx
c001b4ef:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001b4f3:	73 2c                	jae    c001b521 <Thr::loadDLL(char const*, bool)+0x1b1>
c001b4f5:	e8 13 5f ff ff       	call   c001140d <Virt::getAKernelVAS()>
c001b4fa:	89 f5                	mov    ebp,esi
c001b4fc:	c1 e5 0c             	shl    ebp,0xc
c001b4ff:	52                   	push   edx
c001b500:	01 dd                	add    ebp,ebx
c001b502:	52                   	push   edx
c001b503:	55                   	push   ebp
c001b504:	50                   	push   eax
c001b505:	e8 ae 60 ff ff       	call   c00115b8 <VAS::getPageTableEntry(unsigned long)>
c001b50a:	83 c4 10             	add    esp,0x10
c001b50d:	f6 00 60             	test   BYTE PTR [eax],0x60
c001b510:	75 0c                	jne    c001b51e <Thr::loadDLL(char const*, bool)+0x1ae>
c001b512:	83 ec 0c             	sub    esp,0xc
c001b515:	55                   	push   ebp
c001b516:	e8 4b 41 ff ff       	call   c000f666 <Phys::freePage(unsigned long)>
c001b51b:	83 c4 10             	add    esp,0x10
c001b51e:	46                   	inc    esi
c001b51f:	eb a4                	jmp    c001b4c5 <Thr::loadDLL(char const*, bool)+0x155>
c001b521:	89 f8                	mov    eax,edi
c001b523:	84 c0                	test   al,al
c001b525:	75 02                	jne    c001b529 <Thr::loadDLL(char const*, bool)+0x1b9>
c001b527:	31 db                	xor    ebx,ebx
c001b529:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b52f:	89 d8                	mov    eax,ebx
c001b531:	5b                   	pop    ebx
c001b532:	5e                   	pop    esi
c001b533:	5f                   	pop    edi
c001b534:	5d                   	pop    ebp
c001b535:	c3                   	ret    

c001b536 <Thr::executeDLL(unsigned long, void*)>:
c001b536:	56                   	push   esi
c001b537:	53                   	push   ebx
c001b538:	51                   	push   ecx
c001b539:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b53d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b541:	85 db                	test   ebx,ebx
c001b543:	75 10                	jne    c001b555 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001b545:	83 ec 0c             	sub    esp,0xc
c001b548:	68 a0 85 02 c0       	push   0xc00285a0
c001b54d:	e8 9b d4 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c001b552:	83 c4 10             	add    esp,0x10
c001b555:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b559:	89 d8                	mov    eax,ebx
c001b55b:	5a                   	pop    edx
c001b55c:	5b                   	pop    ebx
c001b55d:	5e                   	pop    esi
c001b55e:	ff e0                	jmp    eax

c001b560 <changeTSS>:
c001b560:	83 ec 0c             	sub    esp,0xc
c001b563:	e8 02 c3 ff ff       	call   c001786a <CPU::current()>
c001b568:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b56e:	83 ec 08             	sub    esp,0x8
c001b571:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001b574:	05 7c 11 00 00       	add    eax,0x117c
c001b579:	c1 e1 15             	shl    ecx,0x15
c001b57c:	ba 00 00 e8 01       	mov    edx,0x1e80000
c001b581:	29 ca                	sub    edx,ecx
c001b583:	52                   	push   edx
c001b584:	50                   	push   eax
c001b585:	e8 7e 56 ff ff       	call   c0010c08 <TSS::setESP(unsigned long)>
c001b58a:	83 c4 1c             	add    esp,0x1c
c001b58d:	c3                   	ret    

c001b58e <Process::addArgs(char**)>:
c001b58e:	57                   	push   edi
c001b58f:	56                   	push   esi
c001b590:	53                   	push   ebx
c001b591:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b595:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b599:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001b5a3:	85 ff                	test   edi,edi
c001b5a5:	74 3d                	je     c001b5e4 <Process::addArgs(char**)+0x56>
c001b5a7:	8b 07                	mov    eax,DWORD PTR [edi]
c001b5a9:	85 c0                	test   eax,eax
c001b5ab:	74 37                	je     c001b5e4 <Process::addArgs(char**)+0x56>
c001b5ad:	31 db                	xor    ebx,ebx
c001b5af:	83 ec 0c             	sub    esp,0xc
c001b5b2:	50                   	push   eax
c001b5b3:	e8 31 51 fe ff       	call   c00006e9 <strlen>
c001b5b8:	40                   	inc    eax
c001b5b9:	89 04 24             	mov    DWORD PTR [esp],eax
c001b5bc:	e8 85 3b ff ff       	call   c000f146 <malloc>
c001b5c1:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001b5c8:	5a                   	pop    edx
c001b5c9:	59                   	pop    ecx
c001b5ca:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001b5cd:	43                   	inc    ebx
c001b5ce:	50                   	push   eax
c001b5cf:	e8 97 51 fe ff       	call   c000076b <strcpy>
c001b5d4:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001b5da:	83 c4 10             	add    esp,0x10
c001b5dd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b5e0:	85 c0                	test   eax,eax
c001b5e2:	75 cb                	jne    c001b5af <Process::addArgs(char**)+0x21>
c001b5e4:	5b                   	pop    ebx
c001b5e5:	5e                   	pop    esi
c001b5e6:	5f                   	pop    edi
c001b5e7:	c3                   	ret    

c001b5e8 <Process::Process(char const*, Process*, char**)>:
c001b5e8:	56                   	push   esi
c001b5e9:	53                   	push   ebx
c001b5ea:	83 ec 14             	sub    esp,0x14
c001b5ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b5f1:	05 0c 02 00 00       	add    eax,0x20c
c001b5f6:	bb 07 00 00 00       	mov    ebx,0x7
c001b5fb:	89 c6                	mov    esi,eax
c001b5fd:	85 db                	test   ebx,ebx
c001b5ff:	78 12                	js     c001b613 <Process::Process(char const*, Process*, char**)+0x2b>
c001b601:	83 ec 0c             	sub    esp,0xc
c001b604:	56                   	push   esi
c001b605:	e8 e0 a0 00 00       	call   c00256ea <ThreadControlBlock::ThreadControlBlock()>
c001b60a:	83 c4 10             	add    esp,0x10
c001b60d:	83 c6 63             	add    esi,0x63
c001b610:	4b                   	dec    ebx
c001b611:	eb ea                	jmp    c001b5fd <Process::Process(char const*, Process*, char**)+0x15>
c001b613:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b617:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001b61e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b622:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001b62b:	a1 a4 99 02 c0       	mov    eax,ds:0xc00299a4
c001b630:	8d 50 01             	lea    edx,[eax+0x1]
c001b633:	89 15 a4 99 02 c0    	mov    DWORD PTR ds:0xc00299a4,edx
c001b639:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b63d:	89 02                	mov    DWORD PTR [edx],eax
c001b63f:	83 ec 0c             	sub    esp,0xc
c001b642:	6a 10                	push   0x10
c001b644:	e8 17 6b ff ff       	call   c0012160 <operator new(unsigned long)>
c001b649:	83 c4 10             	add    esp,0x10
c001b64c:	89 c3                	mov    ebx,eax
c001b64e:	83 ec 08             	sub    esp,0x8
c001b651:	6a 00                	push   0x0
c001b653:	53                   	push   ebx
c001b654:	e8 9b 67 ff ff       	call   c0011df4 <VAS::VAS(bool)>
c001b659:	83 c4 10             	add    esp,0x10
c001b65c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b660:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001b666:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b66a:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001b674:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b678:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b67c:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001b682:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b686:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b68c:	85 c0                	test   eax,eax
c001b68e:	74 42                	je     c001b6d2 <Process::Process(char const*, Process*, char**)+0xea>
c001b690:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b694:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b69a:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b6a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6a4:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001b6aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6ae:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b6b4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001b6ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6be:	05 0c 01 00 00       	add    eax,0x10c
c001b6c3:	83 ec 08             	sub    esp,0x8
c001b6c6:	52                   	push   edx
c001b6c7:	50                   	push   eax
c001b6c8:	e8 9e 50 fe ff       	call   c000076b <strcpy>
c001b6cd:	83 c4 10             	add    esp,0x10
c001b6d0:	eb 5c                	jmp    c001b72e <Process::Process(char const*, Process*, char**)+0x146>
c001b6d2:	83 ec 0c             	sub    esp,0xc
c001b6d5:	68 60 12 00 00       	push   0x1260
c001b6da:	e8 81 6a ff ff       	call   c0012160 <operator new(unsigned long)>
c001b6df:	83 c4 10             	add    esp,0x10
c001b6e2:	89 c3                	mov    ebx,eax
c001b6e4:	83 ec 08             	sub    esp,0x8
c001b6e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6eb:	53                   	push   ebx
c001b6ec:	e8 15 52 ff ff       	call   c0010906 <VgaText::VgaText(char const*)>
c001b6f1:	83 c4 10             	add    esp,0x10
c001b6f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6f8:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001b6fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b702:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b708:	83 ec 0c             	sub    esp,0xc
c001b70b:	50                   	push   eax
c001b70c:	e8 f6 45 ff ff       	call   c000fd07 <addToTerminalCycle(VgaText*)>
c001b711:	83 c4 10             	add    esp,0x10
c001b714:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b718:	05 0c 01 00 00       	add    eax,0x10c
c001b71d:	83 ec 08             	sub    esp,0x8
c001b720:	68 ca 85 02 c0       	push   0xc00285ca
c001b725:	50                   	push   eax
c001b726:	e8 40 50 fe ff       	call   c000076b <strcpy>
c001b72b:	83 c4 10             	add    esp,0x10
c001b72e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b732:	83 c0 0c             	add    eax,0xc
c001b735:	83 ec 08             	sub    esp,0x8
c001b738:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b73c:	50                   	push   eax
c001b73d:	e8 29 50 fe ff       	call   c000076b <strcpy>
c001b742:	83 c4 10             	add    esp,0x10
c001b745:	83 ec 08             	sub    esp,0x8
c001b748:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b74c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b750:	e8 39 fe ff ff       	call   c001b58e <Process::addArgs(char**)>
c001b755:	83 c4 10             	add    esp,0x10
c001b758:	83 ec 08             	sub    esp,0x8
c001b75b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b75f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b763:	e8 ae ee ff ff       	call   c001a616 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001b768:	83 c4 10             	add    esp,0x10
c001b76b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b76f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b773:	83 f0 01             	xor    eax,0x1
c001b776:	88 c2                	mov    dl,al
c001b778:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b77c:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001b782:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001b787:	83 ec 08             	sub    esp,0x8
c001b78a:	50                   	push   eax
c001b78b:	68 c8 86 02 c0       	push   0xc00286c8
c001b790:	e8 ba 6a ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001b795:	83 c4 10             	add    esp,0x10
c001b798:	90                   	nop
c001b799:	83 c4 14             	add    esp,0x14
c001b79c:	5b                   	pop    ebx
c001b79d:	5e                   	pop    esi
c001b79e:	c3                   	ret    
c001b79f:	90                   	nop

c001b7a0 <Process::Process(bool, char const*, Process*, char**)>:
c001b7a0:	56                   	push   esi
c001b7a1:	53                   	push   ebx
c001b7a2:	83 ec 14             	sub    esp,0x14
c001b7a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b7a9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b7ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7b1:	05 0c 02 00 00       	add    eax,0x20c
c001b7b6:	bb 07 00 00 00       	mov    ebx,0x7
c001b7bb:	89 c6                	mov    esi,eax
c001b7bd:	85 db                	test   ebx,ebx
c001b7bf:	78 12                	js     c001b7d3 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001b7c1:	83 ec 0c             	sub    esp,0xc
c001b7c4:	56                   	push   esi
c001b7c5:	e8 20 9f 00 00       	call   c00256ea <ThreadControlBlock::ThreadControlBlock()>
c001b7ca:	83 c4 10             	add    esp,0x10
c001b7cd:	83 c6 63             	add    esi,0x63
c001b7d0:	4b                   	dec    ebx
c001b7d1:	eb ea                	jmp    c001b7bd <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001b7d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7d7:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001b7de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b7e2:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001b7eb:	a1 a4 99 02 c0       	mov    eax,ds:0xc00299a4
c001b7f0:	8d 50 01             	lea    edx,[eax+0x1]
c001b7f3:	89 15 a4 99 02 c0    	mov    DWORD PTR ds:0xc00299a4,edx
c001b7f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b7fd:	89 02                	mov    DWORD PTR [edx],eax
c001b7ff:	83 ec 0c             	sub    esp,0xc
c001b802:	6a 10                	push   0x10
c001b804:	e8 57 69 ff ff       	call   c0012160 <operator new(unsigned long)>
c001b809:	83 c4 10             	add    esp,0x10
c001b80c:	89 c3                	mov    ebx,eax
c001b80e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b813:	83 ec 08             	sub    esp,0x8
c001b816:	50                   	push   eax
c001b817:	53                   	push   ebx
c001b818:	e8 d7 65 ff ff       	call   c0011df4 <VAS::VAS(bool)>
c001b81d:	83 c4 10             	add    esp,0x10
c001b820:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b824:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001b82a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b82e:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001b838:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b83c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b840:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001b846:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b84a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b850:	85 c0                	test   eax,eax
c001b852:	74 42                	je     c001b896 <Process::Process(bool, char const*, Process*, char**)+0xf6>
c001b854:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b858:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b85e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b864:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b868:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001b86e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b872:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001b878:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001b87e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b882:	05 0c 01 00 00       	add    eax,0x10c
c001b887:	83 ec 08             	sub    esp,0x8
c001b88a:	52                   	push   edx
c001b88b:	50                   	push   eax
c001b88c:	e8 da 4e fe ff       	call   c000076b <strcpy>
c001b891:	83 c4 10             	add    esp,0x10
c001b894:	eb 5c                	jmp    c001b8f2 <Process::Process(bool, char const*, Process*, char**)+0x152>
c001b896:	83 ec 0c             	sub    esp,0xc
c001b899:	68 60 12 00 00       	push   0x1260
c001b89e:	e8 bd 68 ff ff       	call   c0012160 <operator new(unsigned long)>
c001b8a3:	83 c4 10             	add    esp,0x10
c001b8a6:	89 c3                	mov    ebx,eax
c001b8a8:	83 ec 08             	sub    esp,0x8
c001b8ab:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b8af:	53                   	push   ebx
c001b8b0:	e8 51 50 ff ff       	call   c0010906 <VgaText::VgaText(char const*)>
c001b8b5:	83 c4 10             	add    esp,0x10
c001b8b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8bc:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001b8c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8c6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b8cc:	83 ec 0c             	sub    esp,0xc
c001b8cf:	50                   	push   eax
c001b8d0:	e8 32 44 ff ff       	call   c000fd07 <addToTerminalCycle(VgaText*)>
c001b8d5:	83 c4 10             	add    esp,0x10
c001b8d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8dc:	05 0c 01 00 00       	add    eax,0x10c
c001b8e1:	83 ec 08             	sub    esp,0x8
c001b8e4:	68 ca 85 02 c0       	push   0xc00285ca
c001b8e9:	50                   	push   eax
c001b8ea:	e8 7c 4e fe ff       	call   c000076b <strcpy>
c001b8ef:	83 c4 10             	add    esp,0x10
c001b8f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8f6:	83 c0 0c             	add    eax,0xc
c001b8f9:	83 ec 08             	sub    esp,0x8
c001b8fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b900:	50                   	push   eax
c001b901:	e8 65 4e fe ff       	call   c000076b <strcpy>
c001b906:	83 c4 10             	add    esp,0x10
c001b909:	83 ec 08             	sub    esp,0x8
c001b90c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b910:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b914:	e8 75 fc ff ff       	call   c001b58e <Process::addArgs(char**)>
c001b919:	83 c4 10             	add    esp,0x10
c001b91c:	90                   	nop
c001b91d:	83 c4 14             	add    esp,0x14
c001b920:	5b                   	pop    ebx
c001b921:	5e                   	pop    esi
c001b922:	c3                   	ret    

c001b923 <disableIRQs()>:
c001b923:	fa                   	cli    
c001b924:	ff 05 2c b8 02 c0    	inc    DWORD PTR ds:0xc002b82c
c001b92a:	c3                   	ret    

c001b92b <getIRQNestingLevel()>:
c001b92b:	a1 2c b8 02 c0       	mov    eax,ds:0xc002b82c
c001b930:	c3                   	ret    

c001b931 <enableIRQs()>:
c001b931:	a1 2c b8 02 c0       	mov    eax,ds:0xc002b82c
c001b936:	48                   	dec    eax
c001b937:	a3 2c b8 02 c0       	mov    ds:0xc002b82c,eax
c001b93c:	75 01                	jne    c001b93f <enableIRQs()+0xe>
c001b93e:	fb                   	sti    
c001b93f:	c3                   	ret    

c001b940 <lockScheduler()>:
c001b940:	eb e1                	jmp    c001b923 <disableIRQs()>

c001b942 <unlockScheduler()>:
c001b942:	eb ed                	jmp    c001b931 <enableIRQs()>

c001b944 <userModeEntryPoint(void*)>:
c001b944:	83 ec 0c             	sub    esp,0xc
c001b947:	e8 f6 ff ff ff       	call   c001b942 <unlockScheduler()>
c001b94c:	fb                   	sti    
c001b94d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b952:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b955:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001b95b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b95f:	83 c4 0c             	add    esp,0xc
c001b962:	e9 63 49 fe ff       	jmp    c00002ca <goToUsermode>

c001b967 <lockStuff()>:
c001b967:	e8 b7 ff ff ff       	call   c001b923 <disableIRQs()>
c001b96c:	ff 05 28 b8 02 c0    	inc    DWORD PTR ds:0xc002b828
c001b972:	c3                   	ret    

c001b973 <taskStartupFunction>:
c001b973:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b978:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001b97b:	c3                   	ret    

c001b97c <updateTimeUsed()>:
c001b97c:	57                   	push   edi
c001b97d:	56                   	push   esi
c001b97e:	53                   	push   ebx
c001b97f:	e8 e6 be ff ff       	call   c001786a <CPU::current()>
c001b984:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001b98b:	74 49                	je     c001b9d6 <updateTimeUsed()+0x5a>
c001b98d:	0f 31                	rdtsc  
c001b98f:	89 c1                	mov    ecx,eax
c001b991:	a3 68 b8 02 c0       	mov    ds:0xc002b868,eax
c001b996:	2b 0d 58 b8 02 c0    	sub    ecx,DWORD PTR ds:0xc002b858
c001b99c:	89 d3                	mov    ebx,edx
c001b99e:	89 0d 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,ecx
c001b9a4:	1b 1d 5c b8 02 c0    	sbb    ebx,DWORD PTR ds:0xc002b85c
c001b9aa:	a3 58 b8 02 c0       	mov    ds:0xc002b858,eax
c001b9af:	89 1d 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,ebx
c001b9b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9ba:	89 15 6c b8 02 c0    	mov    DWORD PTR ds:0xc002b86c,edx
c001b9c0:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001b9c3:	89 15 5c b8 02 c0    	mov    DWORD PTR ds:0xc002b85c,edx
c001b9c9:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001b9cc:	01 f1                	add    ecx,esi
c001b9ce:	11 fb                	adc    ebx,edi
c001b9d0:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001b9d3:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001b9d6:	5b                   	pop    ebx
c001b9d7:	5e                   	pop    esi
c001b9d8:	5f                   	pop    edi
c001b9d9:	c3                   	ret    

c001b9da <switchToThread(ThreadControlBlock*)>:
c001b9da:	53                   	push   ebx
c001b9db:	83 ec 08             	sub    esp,0x8
c001b9de:	a1 28 b8 02 c0       	mov    eax,ds:0xc002b828
c001b9e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b9e7:	85 c0                	test   eax,eax
c001b9e9:	75 30                	jne    c001ba1b <switchToThread(ThreadControlBlock*)+0x41>
c001b9eb:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001b9ee:	3c ff                	cmp    al,0xff
c001b9f0:	74 25                	je     c001ba17 <switchToThread(ThreadControlBlock*)+0x3d>
c001b9f2:	0f b6 d0             	movzx  edx,al
c001b9f5:	b8 84 03 00 00       	mov    eax,0x384
c001b9fa:	29 d0                	sub    eax,edx
c001b9fc:	c1 e0 10             	shl    eax,0x10
c001b9ff:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001ba02:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001ba05:	e8 72 ff ff ff       	call   c001b97c <updateTimeUsed()>
c001ba0a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ba0e:	83 c4 08             	add    esp,0x8
c001ba11:	5b                   	pop    ebx
c001ba12:	e9 ec 48 fe ff       	jmp    c0000303 <switchToThreadASM>
c001ba17:	31 c0                	xor    eax,eax
c001ba19:	eb e7                	jmp    c001ba02 <switchToThread(ThreadControlBlock*)+0x28>
c001ba1b:	c7 05 24 b8 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002b824,0x1
c001ba25:	83 c4 08             	add    esp,0x8
c001ba28:	5b                   	pop    ebx
c001ba29:	c3                   	ret    

c001ba2a <Semaphore::Semaphore(int)>:
c001ba2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba32:	89 10                	mov    DWORD PTR [eax],edx
c001ba34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba38:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ba3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba43:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba4e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ba55:	90                   	nop
c001ba56:	c3                   	ret    
c001ba57:	90                   	nop

c001ba58 <Mutex::Mutex()>:
c001ba58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba5c:	6a 01                	push   0x1
c001ba5e:	50                   	push   eax
c001ba5f:	e8 c6 ff ff ff       	call   c001ba2a <Semaphore::Semaphore(int)>
c001ba64:	83 c4 08             	add    esp,0x8
c001ba67:	90                   	nop
c001ba68:	c3                   	ret    
c001ba69:	90                   	nop

c001ba6a <Process::createThread(void (*)(void*), void*, int)>:
c001ba6a:	55                   	push   ebp
c001ba6b:	31 c9                	xor    ecx,ecx
c001ba6d:	57                   	push   edi
c001ba6e:	56                   	push   esi
c001ba6f:	53                   	push   ebx
c001ba70:	83 ec 1c             	sub    esp,0x1c
c001ba73:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba77:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001ba7e:	89 f2                	mov    edx,esi
c001ba80:	0f b7 c2             	movzx  eax,dx
c001ba83:	83 e2 01             	and    edx,0x1
c001ba86:	74 14                	je     c001ba9c <Process::createThread(void (*)(void*), void*, int)+0x32>
c001ba88:	d1 f8                	sar    eax,1
c001ba8a:	41                   	inc    ecx
c001ba8b:	89 c2                	mov    edx,eax
c001ba8d:	83 f9 10             	cmp    ecx,0x10
c001ba90:	75 ee                	jne    c001ba80 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001ba92:	83 c4 1c             	add    esp,0x1c
c001ba95:	31 c0                	xor    eax,eax
c001ba97:	5b                   	pop    ebx
c001ba98:	5e                   	pop    esi
c001ba99:	5f                   	pop    edi
c001ba9a:	5d                   	pop    ebp
c001ba9b:	c3                   	ret    
c001ba9c:	83 ec 08             	sub    esp,0x8
c001ba9f:	b8 01 00 00 00       	mov    eax,0x1
c001baa4:	d3 e0                	shl    eax,cl
c001baa6:	09 c6                	or     esi,eax
c001baa8:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001baae:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001bab5:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001bab8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001babb:	01 ce                	add    esi,ecx
c001babd:	89 f0                	mov    eax,esi
c001babf:	c1 e0 05             	shl    eax,0x5
c001bac2:	01 c6                	add    esi,eax
c001bac4:	8d 04 33             	lea    eax,[ebx+esi*1]
c001bac7:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001bacd:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001bad3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001bad7:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001badd:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001bae3:	89 ca                	mov    edx,ecx
c001bae5:	f7 da                	neg    edx
c001bae7:	c1 e2 15             	shl    edx,0x15
c001baea:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001baf0:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001baf6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001bafa:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001bb04:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001bb0a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bb0e:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001bb14:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001bb1e:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001bb28:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001bb2f:	50                   	push   eax
c001bb30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb34:	68 48 b8 02 c0       	push   0xc002b848
c001bb39:	e8 04 9a 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bb3e:	83 c4 10             	add    esp,0x10
c001bb41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb45:	83 c4 1c             	add    esp,0x1c
c001bb48:	5b                   	pop    ebx
c001bb49:	5e                   	pop    esi
c001bb4a:	5f                   	pop    edi
c001bb4b:	5d                   	pop    ebp
c001bb4c:	c3                   	ret    
c001bb4d:	90                   	nop

c001bb4e <Process::createUserThread()>:
c001bb4e:	83 ec 0c             	sub    esp,0xc
c001bb51:	68 80 00 00 00       	push   0x80
c001bb56:	6a 00                	push   0x0
c001bb58:	68 44 b9 01 c0       	push   0xc001b944
c001bb5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb61:	e8 04 ff ff ff       	call   c001ba6a <Process::createThread(void (*)(void*), void*, int)>
c001bb66:	83 c4 1c             	add    esp,0x1c
c001bb69:	c3                   	ret    

c001bb6a <setupMultitasking(void (*)())>:
c001bb6a:	56                   	push   esi
c001bb6b:	53                   	push   ebx
c001bb6c:	53                   	push   ebx
c001bb6d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb71:	eb 10                	jmp    c001bb83 <setupMultitasking(void (*)())+0x19>
c001bb73:	83 ec 0c             	sub    esp,0xc
c001bb76:	68 48 b8 02 c0       	push   0xc002b848
c001bb7b:	e8 14 99 00 00       	call   c0025494 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001bb80:	83 c4 10             	add    esp,0x10
c001bb83:	83 ec 0c             	sub    esp,0xc
c001bb86:	68 48 b8 02 c0       	push   0xc002b848
c001bb8b:	e8 e8 98 00 00       	call   c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001bb90:	83 c4 10             	add    esp,0x10
c001bb93:	84 c0                	test   al,al
c001bb95:	74 dc                	je     c001bb73 <setupMultitasking(void (*)())+0x9>
c001bb97:	83 ec 0c             	sub    esp,0xc
c001bb9a:	68 3b 07 00 00       	push   0x73b
c001bb9f:	e8 bc 65 ff ff       	call   c0012160 <operator new(unsigned long)>
c001bba4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001bbab:	89 c3                	mov    ebx,eax
c001bbad:	6a 00                	push   0x0
c001bbaf:	68 ce 85 02 c0       	push   0xc00285ce
c001bbb4:	6a 01                	push   0x1
c001bbb6:	50                   	push   eax
c001bbb7:	e8 e4 fb ff ff       	call   c001b7a0 <Process::Process(bool, char const*, Process*, char**)>
c001bbbc:	83 c4 18             	add    esp,0x18
c001bbbf:	89 1d 54 b8 02 c0    	mov    DWORD PTR ds:0xc002b854,ebx
c001bbc5:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001bbcb:	68 f0 86 02 c0       	push   0xc00286f0
c001bbd0:	e8 7a 66 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001bbd5:	58                   	pop    eax
c001bbd6:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001bbdc:	e8 9a 48 ff ff       	call   c001047b <setActiveTerminal(VgaText*)>
c001bbe1:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001bbe9:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001bbef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001bbf2:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001bbfc:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001bc02:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001bc08:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001bc12:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001bc1c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001bc26:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001bc2c:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001bc32:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001bc3c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001bc42:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001bc4c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001bc52:	5a                   	pop    edx
c001bc53:	59                   	pop    ecx
c001bc54:	68 ca 85 02 c0       	push   0xc00285ca
c001bc59:	50                   	push   eax
c001bc5a:	e8 0c 4b fe ff       	call   c000076b <strcpy>
c001bc5f:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001bc66:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001bc6a:	83 c4 14             	add    esp,0x14
c001bc6d:	5b                   	pop    ebx
c001bc6e:	5e                   	pop    esi
c001bc6f:	e9 81 46 fe ff       	jmp    c00002f5 <switchToThreadASMFirstTime>

c001bc74 <schedule()>:
c001bc74:	a1 28 b8 02 c0       	mov    eax,ds:0xc002b828
c001bc79:	85 c0                	test   eax,eax
c001bc7b:	74 0b                	je     c001bc88 <schedule()+0x14>
c001bc7d:	c7 05 24 b8 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002b824,0x1
c001bc87:	c3                   	ret    
c001bc88:	53                   	push   ebx
c001bc89:	83 ec 14             	sub    esp,0x14
c001bc8c:	68 48 b8 02 c0       	push   0xc002b848
c001bc91:	e8 e2 97 00 00       	call   c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001bc96:	83 c4 10             	add    esp,0x10
c001bc99:	84 c0                	test   al,al
c001bc9b:	75 38                	jne    c001bcd5 <schedule()+0x61>
c001bc9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bca2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001bca5:	4a                   	dec    edx
c001bca6:	74 32                	je     c001bcda <schedule()+0x66>
c001bca8:	83 ec 0c             	sub    esp,0xc
c001bcab:	68 48 b8 02 c0       	push   0xc002b848
c001bcb0:	e8 bb 97 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001bcb5:	c7 04 24 48 b8 02 c0 	mov    DWORD PTR [esp],0xc002b848
c001bcbc:	89 c3                	mov    ebx,eax
c001bcbe:	e8 d1 97 00 00       	call   c0025494 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001bcc3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001bcca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bccd:	e8 08 fd ff ff       	call   c001b9da <switchToThread(ThreadControlBlock*)>
c001bcd2:	83 c4 10             	add    esp,0x10
c001bcd5:	83 c4 08             	add    esp,0x8
c001bcd8:	5b                   	pop    ebx
c001bcd9:	c3                   	ret    
c001bcda:	83 ec 08             	sub    esp,0x8
c001bcdd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bce4:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001bcea:	68 48 b8 02 c0       	push   0xc002b848
c001bcef:	e8 4e 98 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bcf4:	83 c4 10             	add    esp,0x10
c001bcf7:	eb af                	jmp    c001bca8 <schedule()+0x34>

c001bcf9 <unlockStuff()>:
c001bcf9:	a1 28 b8 02 c0       	mov    eax,ds:0xc002b828
c001bcfe:	48                   	dec    eax
c001bcff:	a3 28 b8 02 c0       	mov    ds:0xc002b828,eax
c001bd04:	75 09                	jne    c001bd0f <unlockStuff()+0x16>
c001bd06:	a1 24 b8 02 c0       	mov    eax,ds:0xc002b824
c001bd0b:	85 c0                	test   eax,eax
c001bd0d:	75 05                	jne    c001bd14 <unlockStuff()+0x1b>
c001bd0f:	e9 1d fc ff ff       	jmp    c001b931 <enableIRQs()>
c001bd14:	83 ec 0c             	sub    esp,0xc
c001bd17:	c7 05 24 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b824,0x0
c001bd21:	e8 4e ff ff ff       	call   c001bc74 <schedule()>
c001bd26:	83 c4 0c             	add    esp,0xc
c001bd29:	e9 03 fc ff ff       	jmp    c001b931 <enableIRQs()>

c001bd2e <Semaphore::tryAcquire()>:
c001bd2e:	83 ec 0c             	sub    esp,0xc
c001bd31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd35:	e8 2d fc ff ff       	call   c001b967 <lockStuff()>
c001bd3a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001bd3d:	3b 10                	cmp    edx,DWORD PTR [eax]
c001bd3f:	7c 0b                	jl     c001bd4c <Semaphore::tryAcquire()+0x1e>
c001bd41:	e8 b3 ff ff ff       	call   c001bcf9 <unlockStuff()>
c001bd46:	31 c0                	xor    eax,eax
c001bd48:	83 c4 0c             	add    esp,0xc
c001bd4b:	c3                   	ret    
c001bd4c:	42                   	inc    edx
c001bd4d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bd50:	e8 a4 ff ff ff       	call   c001bcf9 <unlockStuff()>
c001bd55:	b0 01                	mov    al,0x1
c001bd57:	83 c4 0c             	add    esp,0xc
c001bd5a:	c3                   	ret    
c001bd5b:	90                   	nop

c001bd5c <Semaphore::assertLocked(char const*)>:
c001bd5c:	83 ec 0c             	sub    esp,0xc
c001bd5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bd67:	e8 fb fb ff ff       	call   c001b967 <lockStuff()>
c001bd6c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001bd6e:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001bd71:	7c 05                	jl     c001bd78 <Semaphore::assertLocked(char const*)+0x1c>
c001bd73:	83 c4 0c             	add    esp,0xc
c001bd76:	eb 81                	jmp    c001bcf9 <unlockStuff()>
c001bd78:	83 ec 0c             	sub    esp,0xc
c001bd7b:	52                   	push   edx
c001bd7c:	e8 6c cc ff ff       	call   c00189ed <Krnl::panic(char const*)>
c001bd81:	83 c4 10             	add    esp,0x10
c001bd84:	83 c4 0c             	add    esp,0xc
c001bd87:	e9 6d ff ff ff       	jmp    c001bcf9 <unlockStuff()>

c001bd8c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001bd8c:	83 ec 0c             	sub    esp,0xc
c001bd8f:	e8 97 fb ff ff       	call   c001b92b <getIRQNestingLevel()>
c001bd94:	83 ec 08             	sub    esp,0x8
c001bd97:	50                   	push   eax
c001bd98:	68 24 87 02 c0       	push   0xc0028724
c001bd9d:	e8 ad 64 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001bda2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bda6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdab:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bdae:	e8 c1 fe ff ff       	call   c001bc74 <schedule()>
c001bdb3:	e8 8a fb ff ff       	call   c001b942 <unlockScheduler()>
c001bdb8:	e8 6e fb ff ff       	call   c001b92b <getIRQNestingLevel()>
c001bdbd:	5a                   	pop    edx
c001bdbe:	59                   	pop    ecx
c001bdbf:	50                   	push   eax
c001bdc0:	68 58 87 02 c0       	push   0xc0028758
c001bdc5:	e8 85 64 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001bdca:	83 c4 1c             	add    esp,0x1c
c001bdcd:	c3                   	ret    

c001bdce <blockTask(TaskState)>:
c001bdce:	83 ec 0c             	sub    esp,0xc
c001bdd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bdd5:	e8 66 fb ff ff       	call   c001b940 <lockScheduler()>
c001bdda:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bddf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001bde2:	e8 8d fe ff ff       	call   c001bc74 <schedule()>
c001bde7:	83 c4 0c             	add    esp,0xc
c001bdea:	e9 53 fb ff ff       	jmp    c001b942 <unlockScheduler()>

c001bdef <waitTask(int, int*, int)>:
c001bdef:	83 ec 18             	sub    esp,0x18
c001bdf2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdf7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bdfb:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001bdfe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001be02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be07:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001be0a:	6a 07                	push   0x7
c001be0c:	e8 bd ff ff ff       	call   c001bdce <blockTask(TaskState)>
c001be11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be16:	83 c4 10             	add    esp,0x10
c001be19:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001be1c:	85 d2                	test   edx,edx
c001be1e:	74 0a                	je     c001be2a <waitTask(int, int*, int)+0x3b>
c001be20:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001be23:	89 02                	mov    DWORD PTR [edx],eax
c001be25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be2a:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001be2d:	83 c4 0c             	add    esp,0xc
c001be30:	c3                   	ret    

c001be31 <nanoSleepUntil(unsigned long long)>:
c001be31:	83 ec 0c             	sub    esp,0xc
c001be34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be38:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be3c:	3b 05 70 aa 02 c0    	cmp    eax,DWORD PTR ds:0xc002aa70
c001be42:	89 d1                	mov    ecx,edx
c001be44:	1b 0d 74 aa 02 c0    	sbb    ecx,DWORD PTR ds:0xc002aa74
c001be4a:	73 04                	jae    c001be50 <nanoSleepUntil(unsigned long long)+0x1f>
c001be4c:	83 c4 0c             	add    esp,0xc
c001be4f:	c3                   	ret    
c001be50:	e8 12 fb ff ff       	call   c001b967 <lockStuff()>
c001be55:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001be5b:	83 ec 08             	sub    esp,0x8
c001be5e:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001be61:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001be64:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001be6a:	68 3c b8 02 c0       	push   0xc002b83c
c001be6f:	e8 ce 96 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001be74:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001be7b:	e8 4e ff ff ff       	call   c001bdce <blockTask(TaskState)>
c001be80:	83 c4 1c             	add    esp,0x1c
c001be83:	e9 71 fe ff ff       	jmp    c001bcf9 <unlockStuff()>

c001be88 <nanoSleep(unsigned long long)>:
c001be88:	a1 70 aa 02 c0       	mov    eax,ds:0xc002aa70
c001be8d:	8b 15 74 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa74
c001be93:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001be97:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001be9b:	eb 94                	jmp    c001be31 <nanoSleepUntil(unsigned long long)>

c001be9d <sleep(unsigned long long)>:
c001be9d:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001bea5:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001beaa:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001beae:	01 ca                	add    edx,ecx
c001beb0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001beb4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001beb8:	eb ce                	jmp    c001be88 <nanoSleep(unsigned long long)>

c001beba <Semaphore::acquire()>:
c001beba:	83 ec 0c             	sub    esp,0xc
c001bebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bec1:	e8 a1 fa ff ff       	call   c001b967 <lockStuff()>
c001bec6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001bec9:	3b 10                	cmp    edx,DWORD PTR [eax]
c001becb:	7d 0c                	jge    c001bed9 <Semaphore::acquire()+0x1f>
c001becd:	42                   	inc    edx
c001bece:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bed1:	83 c4 0c             	add    esp,0xc
c001bed4:	e9 20 fe ff ff       	jmp    c001bcf9 <unlockStuff()>
c001bed9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bedf:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001bee6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001bee9:	85 d2                	test   edx,edx
c001beeb:	74 2a                	je     c001bf17 <Semaphore::acquire()+0x5d>
c001beed:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001bef0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bef6:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001bef9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001beff:	83 ec 0c             	sub    esp,0xc
c001bf02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bf05:	6a 05                	push   0x5
c001bf07:	e8 c2 fe ff ff       	call   c001bdce <blockTask(TaskState)>
c001bf0c:	83 c4 10             	add    esp,0x10
c001bf0f:	83 c4 0c             	add    esp,0xc
c001bf12:	e9 e2 fd ff ff       	jmp    c001bcf9 <unlockStuff()>
c001bf17:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bf1d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bf20:	eb d7                	jmp    c001bef9 <Semaphore::acquire()+0x3f>

c001bf22 <taskReturned>:
c001bf22:	83 ec 18             	sub    esp,0x18
c001bf25:	68 8c 87 02 c0       	push   0xc002878c
c001bf2a:	e8 be ca ff ff       	call   c00189ed <Krnl::panic(char const*)>
c001bf2f:	83 c4 10             	add    esp,0x10
c001bf32:	83 ec 0c             	sub    esp,0xc
c001bf35:	6a 02                	push   0x2
c001bf37:	e8 92 fe ff ff       	call   c001bdce <blockTask(TaskState)>
c001bf3c:	e8 ff f9 ff ff       	call   c001b940 <lockScheduler()>
c001bf41:	e8 2e fd ff ff       	call   c001bc74 <schedule()>
c001bf46:	e8 f7 f9 ff ff       	call   c001b942 <unlockScheduler()>
c001bf4b:	83 c4 10             	add    esp,0x10
c001bf4e:	eb e2                	jmp    c001bf32 <taskReturned+0x10>

c001bf50 <unblockTask(ThreadControlBlock*)>:
c001bf50:	53                   	push   ebx
c001bf51:	83 ec 08             	sub    esp,0x8
c001bf54:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf58:	e8 e3 f9 ff ff       	call   c001b940 <lockScheduler()>
c001bf5d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001bf60:	85 c0                	test   eax,eax
c001bf62:	74 5c                	je     c001bfc0 <unblockTask(ThreadControlBlock*)+0x70>
c001bf64:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001bf67:	48                   	dec    eax
c001bf68:	74 31                	je     c001bf9b <unblockTask(ThreadControlBlock*)+0x4b>
c001bf6a:	83 ec 0c             	sub    esp,0xc
c001bf6d:	68 48 b8 02 c0       	push   0xc002b848
c001bf72:	e8 f9 94 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001bf77:	83 c4 10             	add    esp,0x10
c001bf7a:	85 c0                	test   eax,eax
c001bf7c:	75 17                	jne    c001bf95 <unblockTask(ThreadControlBlock*)+0x45>
c001bf7e:	eb 65                	jmp    c001bfe5 <unblockTask(ThreadControlBlock*)+0x95>
c001bf80:	83 ec 08             	sub    esp,0x8
c001bf83:	50                   	push   eax
c001bf84:	68 48 b8 02 c0       	push   0xc002b848
c001bf89:	e8 f2 97 00 00       	call   c0025780 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001bf8e:	83 c4 10             	add    esp,0x10
c001bf91:	85 c0                	test   eax,eax
c001bf93:	74 50                	je     c001bfe5 <unblockTask(ThreadControlBlock*)+0x95>
c001bf95:	39 c3                	cmp    ebx,eax
c001bf97:	75 e7                	jne    c001bf80 <unblockTask(ThreadControlBlock*)+0x30>
c001bf99:	eb 1c                	jmp    c001bfb7 <unblockTask(ThreadControlBlock*)+0x67>
c001bf9b:	83 ec 0c             	sub    esp,0xc
c001bf9e:	68 7c 88 02 c0       	push   0xc002887c
c001bfa3:	e8 a7 62 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001bfa8:	c7 04 24 08 88 02 c0 	mov    DWORD PTR [esp],0xc0028808
c001bfaf:	e8 9b 62 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001bfb4:	83 c4 10             	add    esp,0x10
c001bfb7:	83 c4 08             	add    esp,0x8
c001bfba:	5b                   	pop    ebx
c001bfbb:	e9 82 f9 ff ff       	jmp    c001b942 <unlockScheduler()>
c001bfc0:	83 ec 0c             	sub    esp,0xc
c001bfc3:	68 c0 87 02 c0       	push   0xc00287c0
c001bfc8:	e8 82 62 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001bfcd:	c7 04 24 08 88 02 c0 	mov    DWORD PTR [esp],0xc0028808
c001bfd4:	e8 76 62 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001bfd9:	83 c4 10             	add    esp,0x10
c001bfdc:	83 c4 08             	add    esp,0x8
c001bfdf:	5b                   	pop    ebx
c001bfe0:	e9 5d f9 ff ff       	jmp    c001b942 <unlockScheduler()>
c001bfe5:	83 ec 08             	sub    esp,0x8
c001bfe8:	53                   	push   ebx
c001bfe9:	68 48 b8 02 c0       	push   0xc002b848
c001bfee:	e8 4f 95 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001bff3:	83 c4 10             	add    esp,0x10
c001bff6:	83 c4 08             	add    esp,0x8
c001bff9:	5b                   	pop    ebx
c001bffa:	e9 43 f9 ff ff       	jmp    c001b942 <unlockScheduler()>

c001bfff <cleanupTerminatedTask(ThreadControlBlock*)>:
c001bfff:	55                   	push   ebp
c001c000:	57                   	push   edi
c001c001:	56                   	push   esi
c001c002:	53                   	push   ebx
c001c003:	83 ec 1c             	sub    esp,0x1c
c001c006:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c00a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c00d:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c001c013:	85 c9                	test   ecx,ecx
c001c015:	7e 20                	jle    c001c037 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001c017:	31 f6                	xor    esi,esi
c001c019:	83 ec 0c             	sub    esp,0xc
c001c01c:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001c023:	46                   	inc    esi
c001c024:	e8 2d 31 ff ff       	call   c000f156 <free>
c001c029:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c02c:	83 c4 10             	add    esp,0x10
c001c02f:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001c035:	7f e2                	jg     c001c019 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001c037:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001c041:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001c046:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001c049:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001c04c:	d3 c0                	rol    eax,cl
c001c04e:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001c055:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c058:	89 f7                	mov    edi,esi
c001c05a:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001c062:	0f 85 4f 01 00 00    	jne    c001c1b7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c001c068:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c06e:	85 c0                	test   eax,eax
c001c070:	0f 84 aa 00 00 00    	je     c001c120 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c076:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001c079:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c07d:	31 c9                	xor    ecx,ecx
c001c07f:	eb 10                	jmp    c001c091 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c001c081:	41                   	inc    ecx
c001c082:	83 f9 10             	cmp    ecx,0x10
c001c085:	0f 84 95 00 00 00    	je     c001c120 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c001c08b:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c091:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001c098:	d3 fa                	sar    edx,cl
c001c09a:	83 e2 01             	and    edx,0x1
c001c09d:	74 e2                	je     c001c081 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c09f:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001c0a2:	01 ca                	add    edx,ecx
c001c0a4:	89 d5                	mov    ebp,edx
c001c0a6:	c1 e5 05             	shl    ebp,0x5
c001c0a9:	01 ea                	add    edx,ebp
c001c0ab:	01 d0                	add    eax,edx
c001c0ad:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001c0b3:	83 fd 07             	cmp    ebp,0x7
c001c0b6:	75 c9                	jne    c001c081 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c0b8:	05 40 02 00 00       	add    eax,0x240
c001c0bd:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001c0c0:	83 fd ff             	cmp    ebp,0xffffffff
c001c0c3:	0f 8c 08 01 00 00    	jl     c001c1d1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d2>
c001c0c9:	0f 84 b9 01 00 00    	je     c001c288 <cleanupTerminatedTask(ThreadControlBlock*)+0x289>
c001c0cf:	85 ed                	test   ebp,ebp
c001c0d1:	0f 84 a0 01 00 00    	je     c001c277 <cleanupTerminatedTask(ThreadControlBlock*)+0x278>
c001c0d7:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001c0d9:	75 a6                	jne    c001c081 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c0db:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001c0e1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c0e5:	01 d0                	add    eax,edx
c001c0e7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001c0eb:	83 ec 0c             	sub    esp,0xc
c001c0ee:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001c0f4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c0f7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001c0fd:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001c104:	50                   	push   eax
c001c105:	e8 46 fe ff ff       	call   c001bf50 <unblockTask(ThreadControlBlock*)>
c001c10a:	83 c4 10             	add    esp,0x10
c001c10d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c110:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c114:	89 f7                	mov    edi,esi
c001c116:	41                   	inc    ecx
c001c117:	83 f9 10             	cmp    ecx,0x10
c001c11a:	0f 85 6b ff ff ff    	jne    c001c08b <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c001c120:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001c126:	85 c0                	test   eax,eax
c001c128:	74 5d                	je     c001c187 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c12a:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001c130:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001c136:	74 4f                	je     c001c187 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c001c138:	83 ec 0c             	sub    esp,0xc
c001c13b:	68 48 b8 02 c0       	push   0xc002b848
c001c140:	e8 2b 93 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c145:	c7 04 24 48 b8 02 c0 	mov    DWORD PTR [esp],0xc002b848
c001c14c:	89 c7                	mov    edi,eax
c001c14e:	e8 25 93 00 00       	call   c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c153:	83 c4 10             	add    esp,0x10
c001c156:	84 c0                	test   al,al
c001c158:	0f 84 e4 00 00 00    	je     c001c242 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001c15e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c161:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c167:	85 d2                	test   edx,edx
c001c169:	74 0f                	je     c001c17a <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c001c16b:	83 ec 0c             	sub    esp,0xc
c001c16e:	8b 02                	mov    eax,DWORD PTR [edx]
c001c170:	52                   	push   edx
c001c171:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c174:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c177:	83 c4 10             	add    esp,0x10
c001c17a:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001c184:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001c187:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001c18d:	85 db                	test   ebx,ebx
c001c18f:	74 16                	je     c001c1a7 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c001c191:	83 ec 0c             	sub    esp,0xc
c001c194:	53                   	push   ebx
c001c195:	e8 4a 56 ff ff       	call   c00117e4 <VAS::~VAS()>
c001c19a:	58                   	pop    eax
c001c19b:	5a                   	pop    edx
c001c19c:	6a 10                	push   0x10
c001c19e:	53                   	push   ebx
c001c19f:	e8 cb 5f ff ff       	call   c001216f <operator delete(void*, unsigned long)>
c001c1a4:	83 c4 10             	add    esp,0x10
c001c1a7:	83 ec 0c             	sub    esp,0xc
c001c1aa:	68 d5 85 02 c0       	push   0xc00285d5
c001c1af:	e8 9b 60 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001c1b4:	83 c4 10             	add    esp,0x10
c001c1b7:	83 ec 08             	sub    esp,0x8
c001c1ba:	68 3b 07 00 00       	push   0x73b
c001c1bf:	68 e3 85 02 c0       	push   0xc00285e3
c001c1c4:	e8 86 60 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001c1c9:	83 c4 2c             	add    esp,0x2c
c001c1cc:	5b                   	pop    ebx
c001c1cd:	5e                   	pop    esi
c001c1ce:	5f                   	pop    edi
c001c1cf:	5d                   	pop    ebp
c001c1d0:	c3                   	ret    
c001c1d1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c1d5:	83 ec 0c             	sub    esp,0xc
c001c1d8:	68 c0 88 02 c0       	push   0xc00288c0
c001c1dd:	e8 0b c8 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c001c1e2:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001c1e5:	83 c4 10             	add    esp,0x10
c001c1e8:	89 f7                	mov    edi,esi
c001c1ea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c1ee:	e9 8e fe ff ff       	jmp    c001c081 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c001c1f3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001c1f9:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001c1ff:	75 1c                	jne    c001c21d <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c201:	83 ec 0c             	sub    esp,0xc
c001c204:	68 28 89 02 c0       	push   0xc0028928
c001c209:	e8 41 60 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001c20e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001c215:	e8 b4 fb ff ff       	call   c001bdce <blockTask(TaskState)>
c001c21a:	83 c4 10             	add    esp,0x10
c001c21d:	83 ec 08             	sub    esp,0x8
c001c220:	56                   	push   esi
c001c221:	68 48 b8 02 c0       	push   0xc002b848
c001c226:	e8 17 93 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c22b:	c7 04 24 48 b8 02 c0 	mov    DWORD PTR [esp],0xc002b848
c001c232:	e8 39 92 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c237:	83 c4 10             	add    esp,0x10
c001c23a:	39 f8                	cmp    eax,edi
c001c23c:	0f 84 1c ff ff ff    	je     c001c15e <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c001c242:	83 ec 0c             	sub    esp,0xc
c001c245:	68 48 b8 02 c0       	push   0xc002b848
c001c24a:	e8 21 92 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c24f:	c7 04 24 48 b8 02 c0 	mov    DWORD PTR [esp],0xc002b848
c001c256:	89 c6                	mov    esi,eax
c001c258:	e8 37 92 00 00       	call   c0025494 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c25d:	83 c4 10             	add    esp,0x10
c001c260:	39 f3                	cmp    ebx,esi
c001c262:	74 b9                	je     c001c21d <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c264:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001c267:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c26a:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001c270:	75 ab                	jne    c001c21d <cleanupTerminatedTask(ThreadControlBlock*)+0x21e>
c001c272:	e9 7c ff ff ff       	jmp    c001c1f3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001c277:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c27b:	83 ec 0c             	sub    esp,0xc
c001c27e:	68 f4 88 02 c0       	push   0xc00288f4
c001c283:	e9 55 ff ff ff       	jmp    c001c1dd <cleanupTerminatedTask(ThreadControlBlock*)+0x1de>
c001c288:	8b 36                	mov    esi,DWORD PTR [esi]
c001c28a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c28e:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001c291:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001c294:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001c29a:	01 d7                	add    edi,edx
c001c29c:	89 f8                	mov    eax,edi
c001c29e:	e9 44 fe ff ff       	jmp    c001c0e7 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c001c2a3 <cleanerTaskFunction(void*)>:
c001c2a3:	53                   	push   ebx
c001c2a4:	83 ec 08             	sub    esp,0x8
c001c2a7:	e8 96 f6 ff ff       	call   c001b942 <unlockScheduler()>
c001c2ac:	e8 8f f6 ff ff       	call   c001b940 <lockScheduler()>
c001c2b1:	80 3d 0c b8 02 c0 00 	cmp    BYTE PTR ds:0xc002b80c,0x0
c001c2b8:	0f 85 8e 00 00 00    	jne    c001c34c <cleanerTaskFunction(void*)+0xa9>
c001c2be:	83 ec 0c             	sub    esp,0xc
c001c2c1:	6a 02                	push   0x2
c001c2c3:	e8 c4 fa ff ff       	call   c001bd8c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001c2c8:	83 c4 10             	add    esp,0x10
c001c2cb:	c6 05 0c b8 02 c0 00 	mov    BYTE PTR ds:0xc002b80c,0x0
c001c2d2:	e8 90 f6 ff ff       	call   c001b967 <lockStuff()>
c001c2d7:	e8 64 f6 ff ff       	call   c001b940 <lockScheduler()>
c001c2dc:	83 ec 0c             	sub    esp,0xc
c001c2df:	68 30 b8 02 c0       	push   0xc002b830
c001c2e4:	e8 8f 91 00 00       	call   c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001c2e9:	83 c4 10             	add    esp,0x10
c001c2ec:	84 c0                	test   al,al
c001c2ee:	75 40                	jne    c001c330 <cleanerTaskFunction(void*)+0x8d>
c001c2f0:	83 ec 0c             	sub    esp,0xc
c001c2f3:	68 30 b8 02 c0       	push   0xc002b830
c001c2f8:	e8 73 91 00 00       	call   c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001c2fd:	c7 04 24 30 b8 02 c0 	mov    DWORD PTR [esp],0xc002b830
c001c304:	89 c3                	mov    ebx,eax
c001c306:	e8 89 91 00 00       	call   c0025494 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001c30b:	c7 04 24 f9 85 02 c0 	mov    DWORD PTR [esp],0xc00285f9
c001c312:	e8 38 5f ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001c317:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c31a:	e8 e0 fc ff ff       	call   c001bfff <cleanupTerminatedTask(ThreadControlBlock*)>
c001c31f:	c7 04 24 12 86 02 c0 	mov    DWORD PTR [esp],0xc0028612
c001c326:	e8 24 5f ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001c32b:	83 c4 10             	add    esp,0x10
c001c32e:	eb ac                	jmp    c001c2dc <cleanerTaskFunction(void*)+0x39>
c001c330:	e8 0d f6 ff ff       	call   c001b942 <unlockScheduler()>
c001c335:	e8 bf f9 ff ff       	call   c001bcf9 <unlockStuff()>
c001c33a:	e8 01 f6 ff ff       	call   c001b940 <lockScheduler()>
c001c33f:	80 3d 0c b8 02 c0 00 	cmp    BYTE PTR ds:0xc002b80c,0x0
c001c346:	0f 84 72 ff ff ff    	je     c001c2be <cleanerTaskFunction(void*)+0x1b>
c001c34c:	e8 f1 f5 ff ff       	call   c001b942 <unlockScheduler()>
c001c351:	e9 75 ff ff ff       	jmp    c001c2cb <cleanerTaskFunction(void*)+0x28>

c001c356 <terminateTask(int)>:
c001c356:	83 ec 14             	sub    esp,0x14
c001c359:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c35e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c361:	83 c0 0c             	add    eax,0xc
c001c364:	50                   	push   eax
c001c365:	68 50 89 02 c0       	push   0xc0028950
c001c36a:	e8 e0 5e ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001c36f:	e8 f3 f5 ff ff       	call   c001b967 <lockStuff()>
c001c374:	e8 c7 f5 ff ff       	call   c001b940 <lockScheduler()>
c001c379:	c7 04 24 25 86 02 c0 	mov    DWORD PTR [esp],0xc0028625
c001c380:	e8 ca 5e ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001c385:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c389:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c38e:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001c391:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c396:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c399:	5a                   	pop    edx
c001c39a:	59                   	pop    ecx
c001c39b:	50                   	push   eax
c001c39c:	68 30 b8 02 c0       	push   0xc002b830
c001c3a1:	e8 9c 91 00 00       	call   c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001c3a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3ab:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001c3b2:	c7 04 24 3f 86 02 c0 	mov    DWORD PTR [esp],0xc002863f
c001c3b9:	e8 91 5e ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001c3be:	83 c4 10             	add    esp,0x10
c001c3c1:	a1 08 b8 02 c0       	mov    eax,ds:0xc002b808
c001c3c6:	85 c0                	test   eax,eax
c001c3c8:	74 5a                	je     c001c424 <terminateTask(int)+0xce>
c001c3ca:	83 ec 0c             	sub    esp,0xc
c001c3cd:	68 59 86 02 c0       	push   0xc0028659
c001c3d2:	e8 78 5e ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001c3d7:	58                   	pop    eax
c001c3d8:	c6 05 0c b8 02 c0 01 	mov    BYTE PTR ds:0xc002b80c,0x1
c001c3df:	ff 35 08 b8 02 c0    	push   DWORD PTR ds:0xc002b808
c001c3e5:	e8 66 fb ff ff       	call   c001bf50 <unblockTask(ThreadControlBlock*)>
c001c3ea:	c7 04 24 73 86 02 c0 	mov    DWORD PTR [esp],0xc0028673
c001c3f1:	e8 59 5e ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001c3f6:	83 c4 10             	add    esp,0x10
c001c3f9:	e8 44 f5 ff ff       	call   c001b942 <unlockScheduler()>
c001c3fe:	e8 f6 f8 ff ff       	call   c001bcf9 <unlockStuff()>
c001c403:	83 ec 0c             	sub    esp,0xc
c001c406:	68 ab 86 02 c0       	push   0xc00286ab
c001c40b:	e8 3f 5e ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001c410:	83 c4 10             	add    esp,0x10
c001c413:	e8 28 f5 ff ff       	call   c001b940 <lockScheduler()>
c001c418:	e8 57 f8 ff ff       	call   c001bc74 <schedule()>
c001c41d:	e8 20 f5 ff ff       	call   c001b942 <unlockScheduler()>
c001c422:	eb ef                	jmp    c001c413 <terminateTask(int)+0xbd>
c001c424:	83 ec 0c             	sub    esp,0xc
c001c427:	68 8d 86 02 c0       	push   0xc002868d
c001c42c:	e8 1e 5e ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001c431:	83 c4 10             	add    esp,0x10
c001c434:	eb c3                	jmp    c001c3f9 <terminateTask(int)+0xa3>

c001c436 <Thr::terminateFromIRQ(int)>:
c001c436:	83 ec 18             	sub    esp,0x18
c001c439:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c43d:	e8 14 ff ff ff       	call   c001c356 <terminateTask(int)>

c001c442 <Semaphore::release()>:
c001c442:	83 ec 0c             	sub    esp,0xc
c001c445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c449:	e8 19 f5 ff ff       	call   c001b967 <lockStuff()>
c001c44e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c451:	85 d2                	test   edx,edx
c001c453:	74 1a                	je     c001c46f <Semaphore::release()+0x2d>
c001c455:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001c458:	83 ec 0c             	sub    esp,0xc
c001c45b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c45e:	52                   	push   edx
c001c45f:	e8 ec fa ff ff       	call   c001bf50 <unblockTask(ThreadControlBlock*)>
c001c464:	83 c4 10             	add    esp,0x10
c001c467:	83 c4 0c             	add    esp,0xc
c001c46a:	e9 8a f8 ff ff       	jmp    c001bcf9 <unlockStuff()>
c001c46f:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001c472:	83 c4 0c             	add    esp,0xc
c001c475:	e9 7f f8 ff ff       	jmp    c001bcf9 <unlockStuff()>

c001c47a <__static_initialization_and_destruction_0(int, int)>:
c001c47a:	83 ec 0c             	sub    esp,0xc
c001c47d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001c482:	0f 85 88 00 00 00    	jne    c001c510 <__static_initialization_and_destruction_0(int, int)+0x96>
c001c488:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001c490:	75 7e                	jne    c001c510 <__static_initialization_and_destruction_0(int, int)+0x96>
c001c492:	83 ec 0c             	sub    esp,0xc
c001c495:	68 48 b8 02 c0       	push   0xc002b848
c001c49a:	e8 89 92 00 00       	call   c0025728 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c49f:	83 c4 10             	add    esp,0x10
c001c4a2:	83 ec 04             	sub    esp,0x4
c001c4a5:	68 9c 93 02 c0       	push   0xc002939c
c001c4aa:	68 48 b8 02 c0       	push   0xc002b848
c001c4af:	68 e8 56 02 c0       	push   0xc00256e8
c001c4b4:	e8 32 5c ff ff       	call   c00120eb <__cxa_atexit>
c001c4b9:	83 c4 10             	add    esp,0x10
c001c4bc:	83 ec 0c             	sub    esp,0xc
c001c4bf:	68 3c b8 02 c0       	push   0xc002b83c
c001c4c4:	e8 5f 92 00 00       	call   c0025728 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c4c9:	83 c4 10             	add    esp,0x10
c001c4cc:	83 ec 04             	sub    esp,0x4
c001c4cf:	68 9c 93 02 c0       	push   0xc002939c
c001c4d4:	68 3c b8 02 c0       	push   0xc002b83c
c001c4d9:	68 e8 56 02 c0       	push   0xc00256e8
c001c4de:	e8 08 5c ff ff       	call   c00120eb <__cxa_atexit>
c001c4e3:	83 c4 10             	add    esp,0x10
c001c4e6:	83 ec 0c             	sub    esp,0xc
c001c4e9:	68 30 b8 02 c0       	push   0xc002b830
c001c4ee:	e8 35 92 00 00       	call   c0025728 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001c4f3:	83 c4 10             	add    esp,0x10
c001c4f6:	83 ec 04             	sub    esp,0x4
c001c4f9:	68 9c 93 02 c0       	push   0xc002939c
c001c4fe:	68 30 b8 02 c0       	push   0xc002b830
c001c503:	68 e8 56 02 c0       	push   0xc00256e8
c001c508:	e8 de 5b ff ff       	call   c00120eb <__cxa_atexit>
c001c50d:	83 c4 10             	add    esp,0x10
c001c510:	90                   	nop
c001c511:	83 c4 0c             	add    esp,0xc
c001c514:	c3                   	ret    

c001c515 <_GLOBAL__sub_I_kernelProcess>:
c001c515:	83 ec 0c             	sub    esp,0xc
c001c518:	83 ec 08             	sub    esp,0x8
c001c51b:	68 ff ff 00 00       	push   0xffff
c001c520:	6a 01                	push   0x1
c001c522:	e8 53 ff ff ff       	call   c001c47a <__static_initialization_and_destruction_0(int, int)>
c001c527:	83 c4 10             	add    esp,0x10
c001c52a:	83 c4 0c             	add    esp,0xc
c001c52d:	c3                   	ret    

c001c52e <Vm::vm8086EntryPoint(void*)>:
c001c52e:	83 ec 0c             	sub    esp,0xc
c001c531:	e8 0c f4 ff ff       	call   c001b942 <unlockScheduler()>
c001c536:	fb                   	sti    
c001c537:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c53c:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001c540:	52                   	push   edx
c001c541:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001c545:	52                   	push   edx
c001c546:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001c54a:	52                   	push   edx
c001c54b:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001c54f:	50                   	push   eax
c001c550:	e8 44 3d fe ff       	call   c0000299 <goToVM86>
c001c555:	83 c4 1c             	add    esp,0x1c
c001c558:	c3                   	ret    

c001c559 <Vm::inbv(unsigned short)>:
c001c559:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c55d:	ec                   	in     al,dx
c001c55e:	c3                   	ret    

c001c55f <Vm::outbv(unsigned short, unsigned char)>:
c001c55f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c563:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c567:	ee                   	out    dx,al
c001c568:	c3                   	ret    

c001c569 <Vm::realToLinear(unsigned short, unsigned short)>:
c001c569:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c56e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c573:	c1 e0 04             	shl    eax,0x4
c001c576:	01 d0                	add    eax,edx
c001c578:	c3                   	ret    

c001c579 <Vm::getSegment(unsigned int)>:
c001c579:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c57d:	c1 e8 10             	shr    eax,0x10
c001c580:	c3                   	ret    

c001c581 <Vm::getOffset(unsigned int)>:
c001c581:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c585:	c3                   	ret    

c001c586 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001c586:	55                   	push   ebp
c001c587:	57                   	push   edi
c001c588:	56                   	push   esi
c001c589:	53                   	push   ebx
c001c58a:	83 ec 2c             	sub    esp,0x2c
c001c58d:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001c591:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c595:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c599:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c59d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c5a1:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001c5a5:	e8 96 f3 ff ff       	call   c001b940 <lockScheduler()>
c001c5aa:	68 80 00 00 00       	push   0x80
c001c5af:	6a 00                	push   0x0
c001c5b1:	68 2e c5 01 c0       	push   0xc001c52e
c001c5b6:	55                   	push   ebp
c001c5b7:	e8 ae f4 ff ff       	call   c001ba6a <Process::createThread(void (*)(void*), void*, int)>
c001c5bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c5c0:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001c5c4:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001c5c8:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c001c5cc:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c001c5d0:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001c5d4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c5db:	e8 80 5b ff ff       	call   c0012160 <operator new(unsigned long)>
c001c5e0:	83 c4 0c             	add    esp,0xc
c001c5e3:	89 c3                	mov    ebx,eax
c001c5e5:	55                   	push   ebp
c001c5e6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c5ea:	50                   	push   eax
c001c5eb:	e8 8e 61 ff ff       	call   c001277e <File::File(char const*, Process*)>
c001c5f0:	83 c4 0c             	add    esp,0xc
c001c5f3:	8d 44 24 17          	lea    eax,[esp+0x17]
c001c5f7:	50                   	push   eax
c001c5f8:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c5fc:	50                   	push   eax
c001c5fd:	53                   	push   ebx
c001c5fe:	e8 8b 64 ff ff       	call   c0012a8e <File::stat(unsigned long long*, bool*)>
c001c603:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c001c607:	83 c4 10             	add    esp,0x10
c001c60a:	84 d2                	test   dl,dl
c001c60c:	74 1c                	je     c001c62a <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c001c60e:	83 ec 0c             	sub    esp,0xc
c001c611:	68 6f 89 02 c0       	push   0xc002896f
c001c616:	e8 d2 c3 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c001c61b:	e8 22 f3 ff ff       	call   c001b942 <unlockScheduler()>
c001c620:	83 c4 10             	add    esp,0x10
c001c623:	31 d2                	xor    edx,edx
c001c625:	e9 81 00 00 00       	jmp    c001c6ab <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001c62a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c62e:	51                   	push   ecx
c001c62f:	51                   	push   ecx
c001c630:	6a 01                	push   0x1
c001c632:	53                   	push   ebx
c001c633:	e8 aa 61 ff ff       	call   c00127e2 <File::open(FileOpenMode)>
c001c638:	83 c4 10             	add    esp,0x10
c001c63b:	85 c0                	test   eax,eax
c001c63d:	74 1b                	je     c001c65a <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c001c63f:	83 ec 0c             	sub    esp,0xc
c001c642:	68 88 89 02 c0       	push   0xc0028988
c001c647:	e8 a1 c3 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c001c64c:	e8 f1 f2 ff ff       	call   c001b942 <unlockScheduler()>
c001c651:	83 c4 10             	add    esp,0x10
c001c654:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001c658:	eb 51                	jmp    c001c6ab <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001c65a:	83 ec 0c             	sub    esp,0xc
c001c65d:	0f b7 ff             	movzx  edi,di
c001c660:	6a 07                	push   0x7
c001c662:	0f b7 f6             	movzx  esi,si
c001c665:	68 00 01 00 00       	push   0x100
c001c66a:	6a 00                	push   0x0
c001c66c:	6a 00                	push   0x0
c001c66e:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c001c674:	e8 c3 55 ff ff       	call   c0011c3c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c679:	83 c4 18             	add    esp,0x18
c001c67c:	57                   	push   edi
c001c67d:	56                   	push   esi
c001c67e:	e8 e6 fe ff ff       	call   c001c569 <Vm::realToLinear(unsigned short, unsigned short)>
c001c683:	5a                   	pop    edx
c001c684:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c686:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001c68a:	51                   	push   ecx
c001c68b:	50                   	push   eax
c001c68c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c690:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c694:	53                   	push   ebx
c001c695:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c698:	83 c4 14             	add    esp,0x14
c001c69b:	53                   	push   ebx
c001c69c:	e8 9f 61 ff ff       	call   c0012840 <File::close()>
c001c6a1:	e8 9c f2 ff ff       	call   c001b942 <unlockScheduler()>
c001c6a6:	83 c4 10             	add    esp,0x10
c001c6a9:	b2 01                	mov    dl,0x1
c001c6ab:	83 c4 2c             	add    esp,0x2c
c001c6ae:	88 d0                	mov    al,dl
c001c6b0:	5b                   	pop    ebx
c001c6b1:	5e                   	pop    esi
c001c6b2:	5f                   	pop    edi
c001c6b3:	5d                   	pop    ebp
c001c6b4:	c3                   	ret    

c001c6b5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001c6b5:	57                   	push   edi
c001c6b6:	56                   	push   esi
c001c6b7:	53                   	push   ebx
c001c6b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c6bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c6c0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c6c4:	83 e8 06             	sub    eax,0x6
c001c6c7:	0f b7 c0             	movzx  eax,ax
c001c6ca:	50                   	push   eax
c001c6cb:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001c6d0:	50                   	push   eax
c001c6d1:	e8 93 fe ff ff       	call   c001c569 <Vm::realToLinear(unsigned short, unsigned short)>
c001c6d6:	5a                   	pop    edx
c001c6d7:	5e                   	pop    esi
c001c6d8:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001c6db:	8d 56 fa             	lea    edx,[esi-0x6]
c001c6de:	81 e2 ff ff 00 00    	and    edx,0xffff
c001c6e4:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001c6e7:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001c6ea:	83 c2 02             	add    edx,0x2
c001c6ed:	66 89 10             	mov    WORD PTR [eax],dx
c001c6f0:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001c6f3:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001c6f7:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001c6fa:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001c6fe:	89 d6                	mov    esi,edx
c001c700:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001c706:	66 81 e6 ff fd       	and    si,0xfdff
c001c70b:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001c70f:	74 07                	je     c001c718 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001c711:	89 d6                	mov    esi,edx
c001c713:	66 81 ce 00 02       	or     si,0x200
c001c718:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001c71c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c721:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001c725:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001c72d:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001c730:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001c738:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001c73b:	5b                   	pop    ebx
c001c73c:	5e                   	pop    esi
c001c73d:	5f                   	pop    edi
c001c73e:	c3                   	ret    

c001c73f <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001c73f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c744:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c749:	c1 e0 04             	shl    eax,0x4
c001c74c:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001c74f:	c3                   	ret    

c001c750 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001c750:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c755:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c75a:	c1 e0 04             	shl    eax,0x4
c001c75d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001c761:	c3                   	ret    

c001c762 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001c762:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c767:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c76c:	c1 e0 04             	shl    eax,0x4
c001c76f:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001c772:	c3                   	ret    

c001c773 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001c773:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c778:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c77d:	c1 e0 04             	shl    eax,0x4
c001c780:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c784:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001c787:	c3                   	ret    

c001c788 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001c788:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c78d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c792:	c1 e0 04             	shl    eax,0x4
c001c795:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c799:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001c79d:	c3                   	ret    

c001c79e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001c79e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c7a3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001c7a8:	c1 e0 04             	shl    eax,0x4
c001c7ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c7af:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001c7b2:	c3                   	ret    

c001c7b3 <Vm::faultHandler(regs*)>:
c001c7b3:	55                   	push   ebp
c001c7b4:	57                   	push   edi
c001c7b5:	56                   	push   esi
c001c7b6:	53                   	push   ebx
c001c7b7:	83 ec 1c             	sub    esp,0x1c
c001c7ba:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c7be:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001c7c1:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001c7c5:	0f b7 f0             	movzx  esi,ax
c001c7c8:	52                   	push   edx
c001c7c9:	0f b7 c0             	movzx  eax,ax
c001c7cc:	50                   	push   eax
c001c7cd:	e8 97 fd ff ff       	call   c001c569 <Vm::realToLinear(unsigned short, unsigned short)>
c001c7d2:	5a                   	pop    edx
c001c7d3:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001c7d6:	59                   	pop    ecx
c001c7d7:	89 c7                	mov    edi,eax
c001c7d9:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001c7dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c7e0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001c7e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c7e9:	0f b7 c5             	movzx  eax,bp
c001c7ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7f0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001c7f4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c7f8:	e8 6c fd ff ff       	call   c001c569 <Vm::realToLinear(unsigned short, unsigned short)>
c001c7fd:	5a                   	pop    edx
c001c7fe:	59                   	pop    ecx
c001c7ff:	b1 06                	mov    cl,0x6
c001c801:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001c806:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001c80b:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001c80e:	80 fa 9d             	cmp    dl,0x9d
c001c811:	0f 84 1d 02 00 00    	je     c001ca34 <Vm::faultHandler(regs*)+0x281>
c001c817:	0f 87 8e 00 00 00    	ja     c001c8ab <Vm::faultHandler(regs*)+0xf8>
c001c81d:	80 fa 66             	cmp    dl,0x66
c001c820:	0f 84 89 01 00 00    	je     c001c9af <Vm::faultHandler(regs*)+0x1fc>
c001c826:	77 44                	ja     c001c86c <Vm::faultHandler(regs*)+0xb9>
c001c828:	80 fa 36             	cmp    dl,0x36
c001c82b:	0f 84 74 01 00 00    	je     c001c9a5 <Vm::faultHandler(regs*)+0x1f2>
c001c831:	77 1a                	ja     c001c84d <Vm::faultHandler(regs*)+0x9a>
c001c833:	80 fa 26             	cmp    dl,0x26
c001c836:	0f 84 4b 01 00 00    	je     c001c987 <Vm::faultHandler(regs*)+0x1d4>
c001c83c:	80 fa 2e             	cmp    dl,0x2e
c001c83f:	0f 85 4a 05 00 00    	jne    c001cd8f <Vm::faultHandler(regs*)+0x5dc>
c001c845:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c848:	31 c9                	xor    ecx,ecx
c001c84a:	47                   	inc    edi
c001c84b:	eb be                	jmp    c001c80b <Vm::faultHandler(regs*)+0x58>
c001c84d:	80 fa 64             	cmp    dl,0x64
c001c850:	0f 84 3b 01 00 00    	je     c001c991 <Vm::faultHandler(regs*)+0x1de>
c001c856:	0f 87 3f 01 00 00    	ja     c001c99b <Vm::faultHandler(regs*)+0x1e8>
c001c85c:	80 fa 3e             	cmp    dl,0x3e
c001c85f:	0f 85 2a 05 00 00    	jne    c001cd8f <Vm::faultHandler(regs*)+0x5dc>
c001c865:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c868:	b1 01                	mov    cl,0x1
c001c86a:	eb de                	jmp    c001c84a <Vm::faultHandler(regs*)+0x97>
c001c86c:	80 fa 6d             	cmp    dl,0x6d
c001c86f:	0f 84 bf 02 00 00    	je     c001cb34 <Vm::faultHandler(regs*)+0x381>
c001c875:	77 17                	ja     c001c88e <Vm::faultHandler(regs*)+0xdb>
c001c877:	80 fa 67             	cmp    dl,0x67
c001c87a:	0f 84 3c 01 00 00    	je     c001c9bc <Vm::faultHandler(regs*)+0x209>
c001c880:	80 fa 6c             	cmp    dl,0x6c
c001c883:	0f 84 5d 02 00 00    	je     c001cae6 <Vm::faultHandler(regs*)+0x333>
c001c889:	e9 01 05 00 00       	jmp    c001cd8f <Vm::faultHandler(regs*)+0x5dc>
c001c88e:	80 fa 6f             	cmp    dl,0x6f
c001c891:	0f 84 8b 03 00 00    	je     c001cc22 <Vm::faultHandler(regs*)+0x46f>
c001c897:	0f 82 0f 03 00 00    	jb     c001cbac <Vm::faultHandler(regs*)+0x3f9>
c001c89d:	80 fa 9c             	cmp    dl,0x9c
c001c8a0:	0f 84 23 01 00 00    	je     c001c9c9 <Vm::faultHandler(regs*)+0x216>
c001c8a6:	e9 e4 04 00 00       	jmp    c001cd8f <Vm::faultHandler(regs*)+0x5dc>
c001c8ab:	80 fa ec             	cmp    dl,0xec
c001c8ae:	0f 84 7f 04 00 00    	je     c001cd33 <Vm::faultHandler(regs*)+0x580>
c001c8b4:	77 7b                	ja     c001c931 <Vm::faultHandler(regs*)+0x17e>
c001c8b6:	80 fa e4             	cmp    dl,0xe4
c001c8b9:	0f 84 fe 03 00 00    	je     c001ccbd <Vm::faultHandler(regs*)+0x50a>
c001c8bf:	77 53                	ja     c001c914 <Vm::faultHandler(regs*)+0x161>
c001c8c1:	80 fa cd             	cmp    dl,0xcd
c001c8c4:	0f 84 cd 01 00 00    	je     c001ca97 <Vm::faultHandler(regs*)+0x2e4>
c001c8ca:	80 fa cf             	cmp    dl,0xcf
c001c8cd:	0f 85 bc 04 00 00    	jne    c001cd8f <Vm::faultHandler(regs*)+0x5dc>
c001c8d3:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001c8d6:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001c8d9:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001c8dd:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001c8e0:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001c8e4:	81 ca 00 02 02 00    	or     edx,0x20200
c001c8ea:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001c8ed:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001c8f1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c8f7:	66 c1 e8 09          	shr    ax,0x9
c001c8fb:	83 e0 01             	and    eax,0x1
c001c8fe:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001c901:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001c904:	83 c0 06             	add    eax,0x6
c001c907:	25 ff ff 00 00       	and    eax,0xffff
c001c90c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001c90f:	e9 77 04 00 00       	jmp    c001cd8b <Vm::faultHandler(regs*)+0x5d8>
c001c914:	80 fa e6             	cmp    dl,0xe6
c001c917:	0f 84 ea 03 00 00    	je     c001cd07 <Vm::faultHandler(regs*)+0x554>
c001c91d:	0f 82 b6 03 00 00    	jb     c001ccd9 <Vm::faultHandler(regs*)+0x526>
c001c923:	80 fa e7             	cmp    dl,0xe7
c001c926:	0f 84 f2 03 00 00    	je     c001cd1e <Vm::faultHandler(regs*)+0x56b>
c001c92c:	e9 5e 04 00 00       	jmp    c001cd8f <Vm::faultHandler(regs*)+0x5dc>
c001c931:	80 fa ef             	cmp    dl,0xef
c001c934:	0f 84 3c 04 00 00    	je     c001cd76 <Vm::faultHandler(regs*)+0x5c3>
c001c93a:	77 28                	ja     c001c964 <Vm::faultHandler(regs*)+0x1b1>
c001c93c:	80 fa ed             	cmp    dl,0xed
c001c93f:	0f 84 0a 04 00 00    	je     c001cd4f <Vm::faultHandler(regs*)+0x59c>
c001c945:	80 fa ee             	cmp    dl,0xee
c001c948:	0f 85 41 04 00 00    	jne    c001cd8f <Vm::faultHandler(regs*)+0x5dc>
c001c94e:	50                   	push   eax
c001c94f:	50                   	push   eax
c001c950:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001c954:	50                   	push   eax
c001c955:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001c959:	50                   	push   eax
c001c95a:	e8 00 fc ff ff       	call   c001c55f <Vm::outbv(unsigned short, unsigned char)>
c001c95f:	e9 0a 04 00 00       	jmp    c001cd6e <Vm::faultHandler(regs*)+0x5bb>
c001c964:	80 fa fa             	cmp    dl,0xfa
c001c967:	0f 84 5d 01 00 00    	je     c001caca <Vm::faultHandler(regs*)+0x317>
c001c96d:	80 fa fb             	cmp    dl,0xfb
c001c970:	0f 84 62 01 00 00    	je     c001cad8 <Vm::faultHandler(regs*)+0x325>
c001c976:	80 fa f3             	cmp    dl,0xf3
c001c979:	0f 85 10 04 00 00    	jne    c001cd8f <Vm::faultHandler(regs*)+0x5dc>
c001c97f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c982:	e9 c3 fe ff ff       	jmp    c001c84a <Vm::faultHandler(regs*)+0x97>
c001c987:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c98a:	b1 02                	mov    cl,0x2
c001c98c:	e9 b9 fe ff ff       	jmp    c001c84a <Vm::faultHandler(regs*)+0x97>
c001c991:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c994:	b1 03                	mov    cl,0x3
c001c996:	e9 af fe ff ff       	jmp    c001c84a <Vm::faultHandler(regs*)+0x97>
c001c99b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c99e:	b1 04                	mov    cl,0x4
c001c9a0:	e9 a5 fe ff ff       	jmp    c001c84a <Vm::faultHandler(regs*)+0x97>
c001c9a5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c9a8:	b1 05                	mov    cl,0x5
c001c9aa:	e9 9b fe ff ff       	jmp    c001c84a <Vm::faultHandler(regs*)+0x97>
c001c9af:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c9b2:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001c9b7:	e9 8e fe ff ff       	jmp    c001c84a <Vm::faultHandler(regs*)+0x97>
c001c9bc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001c9bf:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001c9c4:	e9 81 fe ff ff       	jmp    c001c84a <Vm::faultHandler(regs*)+0x97>
c001c9c9:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001c9cc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c9d0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001c9d5:	74 30                	je     c001ca07 <Vm::faultHandler(regs*)+0x254>
c001c9d7:	83 e9 04             	sub    ecx,0x4
c001c9da:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001c9e0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001c9e6:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001c9e9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001c9ec:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c9f2:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001c9f6:	0f 84 8c 03 00 00    	je     c001cd88 <Vm::faultHandler(regs*)+0x5d5>
c001c9fc:	80 ce 02             	or     dh,0x2
c001c9ff:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001ca02:	e9 81 03 00 00       	jmp    c001cd88 <Vm::faultHandler(regs*)+0x5d5>
c001ca07:	83 e9 02             	sub    ecx,0x2
c001ca0a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ca10:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ca13:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ca17:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ca1d:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001ca21:	74 05                	je     c001ca28 <Vm::faultHandler(regs*)+0x275>
c001ca23:	80 ce 02             	or     dh,0x2
c001ca26:	eb 03                	jmp    c001ca2b <Vm::faultHandler(regs*)+0x278>
c001ca28:	80 e6 fd             	and    dh,0xfd
c001ca2b:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ca2f:	e9 54 03 00 00       	jmp    c001cd88 <Vm::faultHandler(regs*)+0x5d5>
c001ca34:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ca39:	74 2a                	je     c001ca65 <Vm::faultHandler(regs*)+0x2b2>
c001ca3b:	8b 10                	mov    edx,DWORD PTR [eax]
c001ca3d:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ca43:	81 ca 00 02 02 00    	or     edx,0x20200
c001ca49:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ca4c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca4e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ca54:	c1 e8 09             	shr    eax,0x9
c001ca57:	83 e0 01             	and    eax,0x1
c001ca5a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ca5d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ca60:	83 c0 04             	add    eax,0x4
c001ca63:	eb 25                	jmp    c001ca8a <Vm::faultHandler(regs*)+0x2d7>
c001ca65:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001ca68:	81 ca 00 02 02 00    	or     edx,0x20200
c001ca6e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001ca71:	66 8b 00             	mov    ax,WORD PTR [eax]
c001ca74:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ca7a:	66 c1 e8 09          	shr    ax,0x9
c001ca7e:	83 e0 01             	and    eax,0x1
c001ca81:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ca84:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001ca87:	83 c0 02             	add    eax,0x2
c001ca8a:	25 ff ff 00 00       	and    eax,0xffff
c001ca8f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001ca92:	e9 f1 02 00 00       	jmp    c001cd88 <Vm::faultHandler(regs*)+0x5d5>
c001ca97:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001ca9b:	3c ff                	cmp    al,0xff
c001ca9d:	75 10                	jne    c001caaf <Vm::faultHandler(regs*)+0x2fc>
c001ca9f:	83 ec 0c             	sub    esp,0xc
c001caa2:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001caa5:	e8 8c f9 ff ff       	call   c001c436 <Thr::terminateFromIRQ(int)>
c001caaa:	e9 c2 02 00 00       	jmp    c001cd71 <Vm::faultHandler(regs*)+0x5be>
c001caaf:	83 ec 0c             	sub    esp,0xc
c001cab2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caba:	57                   	push   edi
c001cabb:	50                   	push   eax
c001cabc:	53                   	push   ebx
c001cabd:	e8 f3 fb ff ff       	call   c001c6b5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001cac2:	83 c4 20             	add    esp,0x20
c001cac5:	e9 c1 02 00 00       	jmp    c001cd8b <Vm::faultHandler(regs*)+0x5d8>
c001caca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cacf:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001cad3:	e9 b0 02 00 00       	jmp    c001cd88 <Vm::faultHandler(regs*)+0x5d5>
c001cad8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cadd:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001cae1:	e9 a2 02 00 00       	jmp    c001cd88 <Vm::faultHandler(regs*)+0x5d5>
c001cae6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001caeb:	74 0d                	je     c001cafa <Vm::faultHandler(regs*)+0x347>
c001caed:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001caf4:	0f 87 e9 02 00 00    	ja     c001cde3 <Vm::faultHandler(regs*)+0x630>
c001cafa:	83 ec 0c             	sub    esp,0xc
c001cafd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001cb00:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cb04:	50                   	push   eax
c001cb05:	e8 4f fa ff ff       	call   c001c559 <Vm::inbv(unsigned short)>
c001cb0a:	83 c4 0c             	add    esp,0xc
c001cb0d:	0f b6 c0             	movzx  eax,al
c001cb10:	0f b7 c9             	movzx  ecx,cx
c001cb13:	50                   	push   eax
c001cb14:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001cb18:	50                   	push   eax
c001cb19:	51                   	push   ecx
c001cb1a:	e8 54 fc ff ff       	call   c001c773 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001cb1f:	83 c4 10             	add    esp,0x10
c001cb22:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cb25:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cb29:	74 03                	je     c001cb2e <Vm::faultHandler(regs*)+0x37b>
c001cb2b:	48                   	dec    eax
c001cb2c:	eb 01                	jmp    c001cb2f <Vm::faultHandler(regs*)+0x37c>
c001cb2e:	40                   	inc    eax
c001cb2f:	0f b7 c0             	movzx  eax,ax
c001cb32:	eb 70                	jmp    c001cba4 <Vm::faultHandler(regs*)+0x3f1>
c001cb34:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001cb37:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001cb3a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cb3f:	74 0c                	je     c001cb4d <Vm::faultHandler(regs*)+0x39a>
c001cb41:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001cb47:	0f 87 96 02 00 00    	ja     c001cde3 <Vm::faultHandler(regs*)+0x630>
c001cb4d:	0f b7 c9             	movzx  ecx,cx
c001cb50:	0f b7 f6             	movzx  esi,si
c001cb53:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001cb56:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cb5b:	74 20                	je     c001cb7d <Vm::faultHandler(regs*)+0x3ca>
c001cb5d:	ed                   	in     eax,dx
c001cb5e:	55                   	push   ebp
c001cb5f:	50                   	push   eax
c001cb60:	51                   	push   ecx
c001cb61:	56                   	push   esi
c001cb62:	e8 37 fc ff ff       	call   c001c79e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001cb67:	83 c4 10             	add    esp,0x10
c001cb6a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cb6d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cb71:	74 05                	je     c001cb78 <Vm::faultHandler(regs*)+0x3c5>
c001cb73:	83 e8 04             	sub    eax,0x4
c001cb76:	eb 27                	jmp    c001cb9f <Vm::faultHandler(regs*)+0x3ec>
c001cb78:	83 c0 04             	add    eax,0x4
c001cb7b:	eb 22                	jmp    c001cb9f <Vm::faultHandler(regs*)+0x3ec>
c001cb7d:	66 ed                	in     ax,dx
c001cb7f:	0f b7 c0             	movzx  eax,ax
c001cb82:	57                   	push   edi
c001cb83:	50                   	push   eax
c001cb84:	51                   	push   ecx
c001cb85:	56                   	push   esi
c001cb86:	e8 fd fb ff ff       	call   c001c788 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001cb8b:	83 c4 10             	add    esp,0x10
c001cb8e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cb91:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cb95:	74 05                	je     c001cb9c <Vm::faultHandler(regs*)+0x3e9>
c001cb97:	83 e8 02             	sub    eax,0x2
c001cb9a:	eb 03                	jmp    c001cb9f <Vm::faultHandler(regs*)+0x3ec>
c001cb9c:	83 c0 02             	add    eax,0x2
c001cb9f:	25 ff ff 00 00       	and    eax,0xffff
c001cba4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001cba7:	e9 dc 01 00 00       	jmp    c001cd88 <Vm::faultHandler(regs*)+0x5d5>
c001cbac:	49                   	dec    ecx
c001cbad:	80 f9 05             	cmp    cl,0x5
c001cbb0:	77 24                	ja     c001cbd6 <Vm::faultHandler(regs*)+0x423>
c001cbb2:	0f b6 c9             	movzx  ecx,cl
c001cbb5:	ff 24 8d d0 89 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd7630]
c001cbbc:	0f b7 f5             	movzx  esi,bp
c001cbbf:	eb 15                	jmp    c001cbd6 <Vm::faultHandler(regs*)+0x423>
c001cbc1:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c001cbc5:	eb 0f                	jmp    c001cbd6 <Vm::faultHandler(regs*)+0x423>
c001cbc7:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c001cbcb:	eb 09                	jmp    c001cbd6 <Vm::faultHandler(regs*)+0x423>
c001cbcd:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c001cbd1:	eb 03                	jmp    c001cbd6 <Vm::faultHandler(regs*)+0x423>
c001cbd3:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c001cbd6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cbd9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cbde:	74 0b                	je     c001cbeb <Vm::faultHandler(regs*)+0x438>
c001cbe0:	3d ff ff 00 00       	cmp    eax,0xffff
c001cbe5:	0f 87 f8 01 00 00    	ja     c001cde3 <Vm::faultHandler(regs*)+0x630>
c001cbeb:	0f b7 c0             	movzx  eax,ax
c001cbee:	52                   	push   edx
c001cbef:	52                   	push   edx
c001cbf0:	50                   	push   eax
c001cbf1:	56                   	push   esi
c001cbf2:	e8 48 fb ff ff       	call   c001c73f <Vm::readByteFromReal(unsigned short, unsigned short)>
c001cbf7:	59                   	pop    ecx
c001cbf8:	0f b6 c0             	movzx  eax,al
c001cbfb:	5e                   	pop    esi
c001cbfc:	50                   	push   eax
c001cbfd:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cc01:	50                   	push   eax
c001cc02:	e8 58 f9 ff ff       	call   c001c55f <Vm::outbv(unsigned short, unsigned char)>
c001cc07:	83 c4 10             	add    esp,0x10
c001cc0a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cc0d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001cc11:	74 03                	je     c001cc16 <Vm::faultHandler(regs*)+0x463>
c001cc13:	48                   	dec    eax
c001cc14:	eb 01                	jmp    c001cc17 <Vm::faultHandler(regs*)+0x464>
c001cc16:	40                   	inc    eax
c001cc17:	0f b7 c0             	movzx  eax,ax
c001cc1a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001cc1d:	e9 66 01 00 00       	jmp    c001cd88 <Vm::faultHandler(regs*)+0x5d5>
c001cc22:	49                   	dec    ecx
c001cc23:	80 f9 05             	cmp    cl,0x5
c001cc26:	77 1f                	ja     c001cc47 <Vm::faultHandler(regs*)+0x494>
c001cc28:	0f b6 c9             	movzx  ecx,cl
c001cc2b:	ff 24 8d e8 89 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffd7618]
c001cc32:	89 ee                	mov    esi,ebp
c001cc34:	eb 11                	jmp    c001cc47 <Vm::faultHandler(regs*)+0x494>
c001cc36:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001cc39:	eb 0c                	jmp    c001cc47 <Vm::faultHandler(regs*)+0x494>
c001cc3b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001cc3e:	eb 07                	jmp    c001cc47 <Vm::faultHandler(regs*)+0x494>
c001cc40:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c001cc43:	eb 02                	jmp    c001cc47 <Vm::faultHandler(regs*)+0x494>
c001cc45:	8b 33                	mov    esi,DWORD PTR [ebx]
c001cc47:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001cc4a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001cc4f:	74 0c                	je     c001cc5d <Vm::faultHandler(regs*)+0x4aa>
c001cc51:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001cc57:	0f 87 86 01 00 00    	ja     c001cde3 <Vm::faultHandler(regs*)+0x630>
c001cc5d:	0f b7 d6             	movzx  edx,si
c001cc60:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001cc63:	0f b7 c1             	movzx  eax,cx
c001cc66:	81 e7 00 04 00 00    	and    edi,0x400
c001cc6c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001cc6f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cc74:	74 1d                	je     c001cc93 <Vm::faultHandler(regs*)+0x4e0>
c001cc76:	55                   	push   ebp
c001cc77:	55                   	push   ebp
c001cc78:	50                   	push   eax
c001cc79:	52                   	push   edx
c001cc7a:	e8 e3 fa ff ff       	call   c001c762 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001cc7f:	83 c4 10             	add    esp,0x10
c001cc82:	89 f2                	mov    edx,esi
c001cc84:	ef                   	out    dx,eax
c001cc85:	85 ff                	test   edi,edi
c001cc87:	74 05                	je     c001cc8e <Vm::faultHandler(regs*)+0x4db>
c001cc89:	83 e9 04             	sub    ecx,0x4
c001cc8c:	eb 21                	jmp    c001ccaf <Vm::faultHandler(regs*)+0x4fc>
c001cc8e:	83 c1 04             	add    ecx,0x4
c001cc91:	eb 1c                	jmp    c001ccaf <Vm::faultHandler(regs*)+0x4fc>
c001cc93:	55                   	push   ebp
c001cc94:	55                   	push   ebp
c001cc95:	50                   	push   eax
c001cc96:	52                   	push   edx
c001cc97:	e8 b4 fa ff ff       	call   c001c750 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001cc9c:	83 c4 10             	add    esp,0x10
c001cc9f:	89 f2                	mov    edx,esi
c001cca1:	66 ef                	out    dx,ax
c001cca3:	85 ff                	test   edi,edi
c001cca5:	74 05                	je     c001ccac <Vm::faultHandler(regs*)+0x4f9>
c001cca7:	83 e9 02             	sub    ecx,0x2
c001ccaa:	eb 03                	jmp    c001ccaf <Vm::faultHandler(regs*)+0x4fc>
c001ccac:	83 c1 02             	add    ecx,0x2
c001ccaf:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ccb5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c001ccb8:	e9 cb 00 00 00       	jmp    c001cd88 <Vm::faultHandler(regs*)+0x5d5>
c001ccbd:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ccc4:	83 ec 0c             	sub    esp,0xc
c001ccc7:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cccb:	50                   	push   eax
c001cccc:	e8 88 f8 ff ff       	call   c001c559 <Vm::inbv(unsigned short)>
c001ccd1:	0f b6 c0             	movzx  eax,al
c001ccd4:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ccd7:	eb 3f                	jmp    c001cd18 <Vm::faultHandler(regs*)+0x565>
c001ccd9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ccde:	74 07                	je     c001cce7 <Vm::faultHandler(regs*)+0x534>
c001cce0:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001cce4:	ed                   	in     eax,dx
c001cce5:	eb 14                	jmp    c001ccfb <Vm::faultHandler(regs*)+0x548>
c001cce7:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c001ccea:	66 31 c9             	xor    cx,cx
c001cced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c001ccf0:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001ccf4:	66 ed                	in     ax,dx
c001ccf6:	0f b7 c0             	movzx  eax,ax
c001ccf9:	09 c8                	or     eax,ecx
c001ccfb:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ccfe:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001cd02:	e9 84 00 00 00       	jmp    c001cd8b <Vm::faultHandler(regs*)+0x5d8>
c001cd07:	52                   	push   edx
c001cd08:	52                   	push   edx
c001cd09:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001cd0d:	50                   	push   eax
c001cd0e:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cd12:	50                   	push   eax
c001cd13:	e8 47 f8 ff ff       	call   c001c55f <Vm::outbv(unsigned short, unsigned char)>
c001cd18:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001cd1c:	eb 53                	jmp    c001cd71 <Vm::faultHandler(regs*)+0x5be>
c001cd1e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cd21:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c001cd25:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cd2a:	74 03                	je     c001cd2f <Vm::faultHandler(regs*)+0x57c>
c001cd2c:	ef                   	out    dx,eax
c001cd2d:	eb cf                	jmp    c001ccfe <Vm::faultHandler(regs*)+0x54b>
c001cd2f:	66 ef                	out    dx,ax
c001cd31:	eb cb                	jmp    c001ccfe <Vm::faultHandler(regs*)+0x54b>
c001cd33:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001cd3a:	83 ec 0c             	sub    esp,0xc
c001cd3d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001cd41:	50                   	push   eax
c001cd42:	e8 12 f8 ff ff       	call   c001c559 <Vm::inbv(unsigned short)>
c001cd47:	0f b6 c0             	movzx  eax,al
c001cd4a:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001cd4d:	eb 1f                	jmp    c001cd6e <Vm::faultHandler(regs*)+0x5bb>
c001cd4f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001cd52:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cd57:	74 03                	je     c001cd5c <Vm::faultHandler(regs*)+0x5a9>
c001cd59:	ed                   	in     eax,dx
c001cd5a:	eb 0d                	jmp    c001cd69 <Vm::faultHandler(regs*)+0x5b6>
c001cd5c:	66 ed                	in     ax,dx
c001cd5e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001cd61:	0f b7 c0             	movzx  eax,ax
c001cd64:	66 31 d2             	xor    dx,dx
c001cd67:	09 d0                	or     eax,edx
c001cd69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cd6c:	eb 1a                	jmp    c001cd88 <Vm::faultHandler(regs*)+0x5d5>
c001cd6e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cd71:	83 c4 10             	add    esp,0x10
c001cd74:	eb 15                	jmp    c001cd8b <Vm::faultHandler(regs*)+0x5d8>
c001cd76:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cd79:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001cd7c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001cd81:	74 03                	je     c001cd86 <Vm::faultHandler(regs*)+0x5d3>
c001cd83:	ef                   	out    dx,eax
c001cd84:	eb 02                	jmp    c001cd88 <Vm::faultHandler(regs*)+0x5d5>
c001cd86:	66 ef                	out    dx,ax
c001cd88:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001cd8b:	b0 01                	mov    al,0x1
c001cd8d:	eb 56                	jmp    c001cde5 <Vm::faultHandler(regs*)+0x632>
c001cd8f:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c001cd93:	50                   	push   eax
c001cd94:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c001cd98:	50                   	push   eax
c001cd99:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c001cd9d:	50                   	push   eax
c001cd9e:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c001cda2:	50                   	push   eax
c001cda3:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001cda7:	50                   	push   eax
c001cda8:	52                   	push   edx
c001cda9:	52                   	push   edx
c001cdaa:	68 a1 89 02 c0       	push   0xc00289a1
c001cdaf:	e8 9b 54 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001cdb4:	83 c4 20             	add    esp,0x20
c001cdb7:	83 ec 0c             	sub    esp,0xc
c001cdba:	6a 60                	push   0x60
c001cdbc:	e8 98 f7 ff ff       	call   c001c559 <Vm::inbv(unsigned short)>
c001cdc1:	83 c4 10             	add    esp,0x10
c001cdc4:	3c 1c                	cmp    al,0x1c
c001cdc6:	74 04                	je     c001cdcc <Vm::faultHandler(regs*)+0x619>
c001cdc8:	3c 5a                	cmp    al,0x5a
c001cdca:	75 eb                	jne    c001cdb7 <Vm::faultHandler(regs*)+0x604>
c001cdcc:	3c 5a                	cmp    al,0x5a
c001cdce:	74 04                	je     c001cdd4 <Vm::faultHandler(regs*)+0x621>
c001cdd0:	3c 1c                	cmp    al,0x1c
c001cdd2:	75 0f                	jne    c001cde3 <Vm::faultHandler(regs*)+0x630>
c001cdd4:	83 ec 0c             	sub    esp,0xc
c001cdd7:	6a 60                	push   0x60
c001cdd9:	e8 7b f7 ff ff       	call   c001c559 <Vm::inbv(unsigned short)>
c001cdde:	83 c4 10             	add    esp,0x10
c001cde1:	eb e9                	jmp    c001cdcc <Vm::faultHandler(regs*)+0x619>
c001cde3:	31 c0                	xor    eax,eax
c001cde5:	83 c4 1c             	add    esp,0x1c
c001cde8:	5b                   	pop    ebx
c001cde9:	5e                   	pop    esi
c001cdea:	5f                   	pop    edi
c001cdeb:	5d                   	pop    ebp
c001cdec:	c3                   	ret    

c001cded <Vm::fpuInternalTo32(unsigned long long)>:
c001cded:	57                   	push   edi
c001cdee:	56                   	push   esi
c001cdef:	53                   	push   ebx
c001cdf0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cdf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdf8:	89 d6                	mov    esi,edx
c001cdfa:	89 d7                	mov    edi,edx
c001cdfc:	89 c1                	mov    ecx,eax
c001cdfe:	c1 ef 14             	shr    edi,0x14
c001ce01:	89 d3                	mov    ebx,edx
c001ce03:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ce09:	31 d2                	xor    edx,edx
c001ce0b:	89 f8                	mov    eax,edi
c001ce0d:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ce13:	bf ff 00 00 00       	mov    edi,0xff
c001ce18:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ce1d:	83 d2 ff             	adc    edx,0xffffffff
c001ce20:	39 c7                	cmp    edi,eax
c001ce22:	bf 00 00 00 00       	mov    edi,0x0
c001ce27:	19 d7                	sbb    edi,edx
c001ce29:	72 15                	jb     c001ce40 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ce2b:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ce2f:	c1 e0 17             	shl    eax,0x17
c001ce32:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ce38:	09 f1                	or     ecx,esi
c001ce3a:	09 c1                	or     ecx,eax
c001ce3c:	89 cf                	mov    edi,ecx
c001ce3e:	eb 02                	jmp    c001ce42 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ce40:	31 ff                	xor    edi,edi
c001ce42:	89 f8                	mov    eax,edi
c001ce44:	5b                   	pop    ebx
c001ce45:	5e                   	pop    esi
c001ce46:	5f                   	pop    edi
c001ce47:	c3                   	ret    

c001ce48 <Vm::fpuInternalTo64(unsigned long long)>:
c001ce48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce4c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ce50:	c3                   	ret    

c001ce51 <Vm::fpu32ToInternal(unsigned int)>:
c001ce51:	57                   	push   edi
c001ce52:	31 ff                	xor    edi,edi
c001ce54:	56                   	push   esi
c001ce55:	53                   	push   ebx
c001ce56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ce5a:	89 cb                	mov    ebx,ecx
c001ce5c:	89 ce                	mov    esi,ecx
c001ce5e:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ce64:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ce6a:	c1 e9 17             	shr    ecx,0x17
c001ce6d:	89 f0                	mov    eax,esi
c001ce6f:	0f b6 d1             	movzx  edx,cl
c001ce72:	81 c2 80 03 00 00    	add    edx,0x380
c001ce78:	89 d1                	mov    ecx,edx
c001ce7a:	89 fa                	mov    edx,edi
c001ce7c:	c1 e1 14             	shl    ecx,0x14
c001ce7f:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001ce83:	c1 e0 1d             	shl    eax,0x1d
c001ce86:	89 d7                	mov    edi,edx
c001ce88:	89 c6                	mov    esi,eax
c001ce8a:	89 ca                	mov    edx,ecx
c001ce8c:	89 f0                	mov    eax,esi
c001ce8e:	09 fa                	or     edx,edi
c001ce90:	09 da                	or     edx,ebx
c001ce92:	5b                   	pop    ebx
c001ce93:	5e                   	pop    esi
c001ce94:	5f                   	pop    edi
c001ce95:	c3                   	ret    

c001ce96 <Vm::fpu64ToInternal(unsigned long long)>:
c001ce96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce9a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ce9e:	c3                   	ret    

c001ce9f <Vm::fpuFloatToLong(unsigned long long)>:
c001ce9f:	57                   	push   edi
c001cea0:	31 c0                	xor    eax,eax
c001cea2:	56                   	push   esi
c001cea3:	31 d2                	xor    edx,edx
c001cea5:	53                   	push   ebx
c001cea6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ceaa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ceae:	89 d9                	mov    ecx,ebx
c001ceb0:	c1 e9 14             	shr    ecx,0x14
c001ceb3:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ceb9:	89 cf                	mov    edi,ecx
c001cebb:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001cec1:	78 33                	js     c001cef6 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001cec3:	89 d9                	mov    ecx,ebx
c001cec5:	89 f0                	mov    eax,esi
c001cec7:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001cecd:	81 c9 00 00 10 00    	or     ecx,0x100000
c001ced3:	89 ca                	mov    edx,ecx
c001ced5:	b9 34 00 00 00       	mov    ecx,0x34
c001ceda:	29 f9                	sub    ecx,edi
c001cedc:	0f ad d0             	shrd   eax,edx,cl
c001cedf:	d3 fa                	sar    edx,cl
c001cee1:	f6 c1 20             	test   cl,0x20
c001cee4:	74 05                	je     c001ceeb <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001cee6:	89 d0                	mov    eax,edx
c001cee8:	c1 fa 1f             	sar    edx,0x1f
c001ceeb:	85 db                	test   ebx,ebx
c001ceed:	79 07                	jns    c001cef6 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ceef:	f7 d8                	neg    eax
c001cef1:	83 d2 00             	adc    edx,0x0
c001cef4:	f7 da                	neg    edx
c001cef6:	5b                   	pop    ebx
c001cef7:	5e                   	pop    esi
c001cef8:	5f                   	pop    edi
c001cef9:	c3                   	ret    

c001cefa <Vm::fpuULongToFloat(unsigned long long)>:
c001cefa:	57                   	push   edi
c001cefb:	31 c9                	xor    ecx,ecx
c001cefd:	56                   	push   esi
c001cefe:	53                   	push   ebx
c001ceff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cf03:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cf07:	0f ba e7 14          	bt     edi,0x14
c001cf0b:	72 07                	jb     c001cf14 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001cf0d:	01 f6                	add    esi,esi
c001cf0f:	11 ff                	adc    edi,edi
c001cf11:	41                   	inc    ecx
c001cf12:	eb f3                	jmp    c001cf07 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001cf14:	89 fa                	mov    edx,edi
c001cf16:	89 f0                	mov    eax,esi
c001cf18:	bb 33 04 00 00       	mov    ebx,0x433
c001cf1d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001cf23:	29 cb                	sub    ebx,ecx
c001cf25:	89 d9                	mov    ecx,ebx
c001cf27:	5b                   	pop    ebx
c001cf28:	c1 e1 14             	shl    ecx,0x14
c001cf2b:	5e                   	pop    esi
c001cf2c:	09 ca                	or     edx,ecx
c001cf2e:	5f                   	pop    edi
c001cf2f:	c3                   	ret    

c001cf30 <Vm::fpuLongToFloat(long long)>:
c001cf30:	56                   	push   esi
c001cf31:	31 c0                	xor    eax,eax
c001cf33:	53                   	push   ebx
c001cf34:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cf38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cf3c:	39 c8                	cmp    eax,ecx
c001cf3e:	19 d8                	sbb    eax,ebx
c001cf40:	7d 04                	jge    c001cf46 <Vm::fpuLongToFloat(long long)+0x16>
c001cf42:	31 f6                	xor    esi,esi
c001cf44:	eb 0c                	jmp    c001cf52 <Vm::fpuLongToFloat(long long)+0x22>
c001cf46:	f7 d9                	neg    ecx
c001cf48:	be 01 00 00 00       	mov    esi,0x1
c001cf4d:	83 d3 00             	adc    ebx,0x0
c001cf50:	f7 db                	neg    ebx
c001cf52:	31 c0                	xor    eax,eax
c001cf54:	0f ba e3 14          	bt     ebx,0x14
c001cf58:	72 07                	jb     c001cf61 <Vm::fpuLongToFloat(long long)+0x31>
c001cf5a:	01 c9                	add    ecx,ecx
c001cf5c:	11 db                	adc    ebx,ebx
c001cf5e:	40                   	inc    eax
c001cf5f:	eb f3                	jmp    c001cf54 <Vm::fpuLongToFloat(long long)+0x24>
c001cf61:	ba 33 04 00 00       	mov    edx,0x433
c001cf66:	29 c2                	sub    edx,eax
c001cf68:	89 c8                	mov    eax,ecx
c001cf6a:	c1 e2 14             	shl    edx,0x14
c001cf6d:	89 d9                	mov    ecx,ebx
c001cf6f:	89 f3                	mov    ebx,esi
c001cf71:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001cf77:	09 ca                	or     edx,ecx
c001cf79:	84 db                	test   bl,bl
c001cf7b:	74 06                	je     c001cf83 <Vm::fpuLongToFloat(long long)+0x53>
c001cf7d:	81 ca 00 00 00 80    	or     edx,0x80000000
c001cf83:	5b                   	pop    ebx
c001cf84:	5e                   	pop    esi
c001cf85:	c3                   	ret    

c001cf86 <Vm::fpuGet0()>:
c001cf86:	31 c0                	xor    eax,eax
c001cf88:	31 d2                	xor    edx,edx
c001cf8a:	c3                   	ret    

c001cf8b <Vm::fpuGet1()>:
c001cf8b:	b8 01 00 00 00       	mov    eax,0x1
c001cf90:	31 d2                	xor    edx,edx
c001cf92:	c3                   	ret    

c001cf93 <Vm::fpuGetPi()>:
c001cf93:	b8 03 00 00 00       	mov    eax,0x3
c001cf98:	31 d2                	xor    edx,edx
c001cf9a:	c3                   	ret    

c001cf9b <Vm::fpuGetLog2E()>:
c001cf9b:	83 ec 18             	sub    esp,0x18
c001cf9e:	68 00 8a 02 c0       	push   0xc0028a00
c001cfa3:	e8 45 ba ff ff       	call   c00189ed <Krnl::panic(char const*)>
c001cfa8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cfad:	31 d2                	xor    edx,edx
c001cfaf:	83 c4 1c             	add    esp,0x1c
c001cfb2:	c3                   	ret    

c001cfb3 <Vm::fpuGetLogE2()>:
c001cfb3:	83 ec 18             	sub    esp,0x18
c001cfb6:	68 0c 8a 02 c0       	push   0xc0028a0c
c001cfbb:	e8 2d ba ff ff       	call   c00189ed <Krnl::panic(char const*)>
c001cfc0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cfc5:	31 d2                	xor    edx,edx
c001cfc7:	83 c4 1c             	add    esp,0x1c
c001cfca:	c3                   	ret    

c001cfcb <Vm::fpuGetLog210()>:
c001cfcb:	83 ec 18             	sub    esp,0x18
c001cfce:	68 18 8a 02 c0       	push   0xc0028a18
c001cfd3:	e8 15 ba ff ff       	call   c00189ed <Krnl::panic(char const*)>
c001cfd8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cfdd:	31 d2                	xor    edx,edx
c001cfdf:	83 c4 1c             	add    esp,0x1c
c001cfe2:	c3                   	ret    

c001cfe3 <Vm::fpuGetLog102()>:
c001cfe3:	83 ec 18             	sub    esp,0x18
c001cfe6:	68 25 8a 02 c0       	push   0xc0028a25
c001cfeb:	e8 fd b9 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c001cff0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cff5:	31 d2                	xor    edx,edx
c001cff7:	83 c4 1c             	add    esp,0x1c
c001cffa:	c3                   	ret    

c001cffb <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001cffb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cfff:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001d003:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d007:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001d00b:	0f 92 c0             	setb   al
c001d00e:	c3                   	ret    

c001d00f <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001d00f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d017:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001d01b:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001d01f:	09 c2                	or     edx,eax
c001d021:	0f 94 c0             	sete   al
c001d024:	c3                   	ret    

c001d025 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001d025:	57                   	push   edi
c001d026:	56                   	push   esi
c001d027:	53                   	push   ebx
c001d028:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d02c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d030:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001d034:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d038:	57                   	push   edi
c001d039:	56                   	push   esi
c001d03a:	53                   	push   ebx
c001d03b:	51                   	push   ecx
c001d03c:	e8 ce ff ff ff       	call   c001d00f <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001d041:	83 c4 10             	add    esp,0x10
c001d044:	88 c2                	mov    dl,al
c001d046:	31 c0                	xor    eax,eax
c001d048:	84 d2                	test   dl,dl
c001d04a:	75 0c                	jne    c001d058 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001d04c:	57                   	push   edi
c001d04d:	56                   	push   esi
c001d04e:	53                   	push   ebx
c001d04f:	51                   	push   ecx
c001d050:	e8 a6 ff ff ff       	call   c001cffb <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001d055:	83 c4 10             	add    esp,0x10
c001d058:	83 e0 01             	and    eax,0x1
c001d05b:	5b                   	pop    ebx
c001d05c:	88 c1                	mov    cl,al
c001d05e:	83 e2 01             	and    edx,0x1
c001d061:	a0 81 b8 02 c0       	mov    al,ds:0xc002b881
c001d066:	c1 e2 06             	shl    edx,0x6
c001d069:	83 e0 ba             	and    eax,0xffffffba
c001d06c:	5e                   	pop    esi
c001d06d:	09 c8                	or     eax,ecx
c001d06f:	5f                   	pop    edi
c001d070:	09 d0                	or     eax,edx
c001d072:	a2 81 b8 02 c0       	mov    ds:0xc002b881,al
c001d077:	c3                   	ret    

c001d078 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001d078:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d07c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d080:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d084:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001d088:	c3                   	ret    

c001d089 <Vm::fpuAbs(unsigned long long)>:
c001d089:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d08d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d091:	c3                   	ret    

c001d092 <Vm::fpuChs(unsigned long long)>:
c001d092:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d096:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d09a:	f7 d8                	neg    eax
c001d09c:	83 d2 00             	adc    edx,0x0
c001d09f:	f7 da                	neg    edx
c001d0a1:	c3                   	ret    

c001d0a2 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001d0a2:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001d0a6:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001d0ab:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001d0af:	eb c7                	jmp    c001d078 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001d0b1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001d0b1:	53                   	push   ebx
c001d0b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d0b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d0ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d0be:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d0c2:	0f af ca             	imul   ecx,edx
c001d0c5:	0f af d8             	imul   ebx,eax
c001d0c8:	f7 e2                	mul    edx
c001d0ca:	01 d9                	add    ecx,ebx
c001d0cc:	5b                   	pop    ebx
c001d0cd:	01 ca                	add    edx,ecx
c001d0cf:	c3                   	ret    

c001d0d0 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001d0d0:	83 ec 0c             	sub    esp,0xc
c001d0d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0e3:	e8 74 62 00 00       	call   c002335c <__udivdi3>
c001d0e8:	83 c4 1c             	add    esp,0x1c
c001d0eb:	c3                   	ret    

c001d0ec <Vm::fpuSquare(unsigned long long)>:
c001d0ec:	50                   	push   eax
c001d0ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d0f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d0f5:	52                   	push   edx
c001d0f6:	50                   	push   eax
c001d0f7:	52                   	push   edx
c001d0f8:	50                   	push   eax
c001d0f9:	e8 b3 ff ff ff       	call   c001d0b1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d0fe:	83 c4 14             	add    esp,0x14
c001d101:	c3                   	ret    

c001d102 <Vm::fpuGetReg(int)>:
c001d102:	83 ec 0c             	sub    esp,0xc
c001d105:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d10a:	76 10                	jbe    c001d11c <Vm::fpuGetReg(int)+0x1a>
c001d10c:	83 ec 0c             	sub    esp,0xc
c001d10f:	68 32 8a 02 c0       	push   0xc0028a32
c001d114:	e8 d4 b8 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c001d119:	83 c4 10             	add    esp,0x10
c001d11c:	a0 81 b8 02 c0       	mov    al,ds:0xc002b881
c001d121:	b9 08 00 00 00       	mov    ecx,0x8
c001d126:	c0 e8 03             	shr    al,0x3
c001d129:	83 e0 07             	and    eax,0x7
c001d12c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d130:	99                   	cdq    
c001d131:	f7 f9                	idiv   ecx
c001d133:	8b 04 d5 84 b8 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd477c]
c001d13a:	8b 14 d5 88 b8 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd4778]
c001d141:	83 c4 0c             	add    esp,0xc
c001d144:	c3                   	ret    

c001d145 <Vm::fpuSetReg(int, unsigned long long)>:
c001d145:	57                   	push   edi
c001d146:	56                   	push   esi
c001d147:	52                   	push   edx
c001d148:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d14c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001d150:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001d155:	76 10                	jbe    c001d167 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001d157:	83 ec 0c             	sub    esp,0xc
c001d15a:	68 45 8a 02 c0       	push   0xc0028a45
c001d15f:	e8 89 b8 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c001d164:	83 c4 10             	add    esp,0x10
c001d167:	a0 81 b8 02 c0       	mov    al,ds:0xc002b881
c001d16c:	b9 08 00 00 00       	mov    ecx,0x8
c001d171:	c0 e8 03             	shr    al,0x3
c001d174:	83 e0 07             	and    eax,0x7
c001d177:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d17b:	99                   	cdq    
c001d17c:	f7 f9                	idiv   ecx
c001d17e:	89 34 d5 84 b8 02 c0 	mov    DWORD PTR [edx*8-0x3ffd477c],esi
c001d185:	89 3c d5 88 b8 02 c0 	mov    DWORD PTR [edx*8-0x3ffd4778],edi
c001d18c:	58                   	pop    eax
c001d18d:	5e                   	pop    esi
c001d18e:	5f                   	pop    edi
c001d18f:	c3                   	ret    

c001d190 <Vm::fpuPush(unsigned long long)>:
c001d190:	a0 81 b8 02 c0       	mov    al,ds:0xc002b881
c001d195:	c0 e8 03             	shr    al,0x3
c001d198:	83 e0 07             	and    eax,0x7
c001d19b:	83 c0 07             	add    eax,0x7
c001d19e:	88 c2                	mov    dl,al
c001d1a0:	83 e0 07             	and    eax,0x7
c001d1a3:	83 e2 07             	and    edx,0x7
c001d1a6:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001d1ad:	8a 15 81 b8 02 c0    	mov    dl,BYTE PTR ds:0xc002b881
c001d1b3:	83 e2 c7             	and    edx,0xffffffc7
c001d1b6:	09 ca                	or     edx,ecx
c001d1b8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d1bc:	88 15 81 b8 02 c0    	mov    BYTE PTR ds:0xc002b881,dl
c001d1c2:	89 0c c5 88 b8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd4778],ecx
c001d1c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d1cd:	89 14 c5 84 b8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd477c],edx
c001d1d4:	a1 c4 b8 02 c0       	mov    eax,ds:0xc002b8c4
c001d1d9:	83 f8 08             	cmp    eax,0x8
c001d1dc:	75 08                	jne    c001d1e6 <Vm::fpuPush(unsigned long long)+0x56>
c001d1de:	80 0d 80 b8 02 c0 40 	or     BYTE PTR ds:0xc002b880,0x40
c001d1e5:	c3                   	ret    
c001d1e6:	40                   	inc    eax
c001d1e7:	a3 c4 b8 02 c0       	mov    ds:0xc002b8c4,eax
c001d1ec:	c3                   	ret    

c001d1ed <Vm::fpuPop()>:
c001d1ed:	8a 0d 81 b8 02 c0    	mov    cl,BYTE PTR ds:0xc002b881
c001d1f3:	53                   	push   ebx
c001d1f4:	c0 e9 03             	shr    cl,0x3
c001d1f7:	8a 1d 81 b8 02 c0    	mov    bl,BYTE PTR ds:0xc002b881
c001d1fd:	83 e1 07             	and    ecx,0x7
c001d200:	83 e3 c7             	and    ebx,0xffffffc7
c001d203:	8b 04 cd 84 b8 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd477c]
c001d20a:	8b 14 cd 88 b8 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd4778]
c001d211:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001d218:	83 e1 38             	and    ecx,0x38
c001d21b:	09 d9                	or     ecx,ebx
c001d21d:	88 0d 81 b8 02 c0    	mov    BYTE PTR ds:0xc002b881,cl
c001d223:	8b 0d c4 b8 02 c0    	mov    ecx,DWORD PTR ds:0xc002b8c4
c001d229:	85 c9                	test   ecx,ecx
c001d22b:	74 09                	je     c001d236 <Vm::fpuPop()+0x49>
c001d22d:	49                   	dec    ecx
c001d22e:	89 0d c4 b8 02 c0    	mov    DWORD PTR ds:0xc002b8c4,ecx
c001d234:	eb 07                	jmp    c001d23d <Vm::fpuPop()+0x50>
c001d236:	80 0d 80 b8 02 c0 40 	or     BYTE PTR ds:0xc002b880,0x40
c001d23d:	5b                   	pop    ebx
c001d23e:	c3                   	ret    

c001d23f <Vm::x87Handler(regs*)>:
c001d23f:	55                   	push   ebp
c001d240:	57                   	push   edi
c001d241:	56                   	push   esi
c001d242:	53                   	push   ebx
c001d243:	83 ec 1c             	sub    esp,0x1c
c001d246:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d24a:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001d24f:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001d252:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001d25a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001d25e:	50                   	push   eax
c001d25f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001d263:	50                   	push   eax
c001d264:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d268:	50                   	push   eax
c001d269:	53                   	push   ebx
c001d26a:	e8 83 b5 ff ff       	call   c00187f2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001d26f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001d272:	83 c4 10             	add    esp,0x10
c001d275:	89 c6                	mov    esi,eax
c001d277:	80 fa d9             	cmp    dl,0xd9
c001d27a:	0f 85 52 01 00 00    	jne    c001d3d2 <Vm::x87Handler(regs*)+0x193>
c001d280:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d284:	8d 50 20             	lea    edx,[eax+0x20]
c001d287:	80 fa 0e             	cmp    dl,0xe
c001d28a:	0f 87 86 00 00 00    	ja     c001d316 <Vm::x87Handler(regs*)+0xd7>
c001d290:	0f b6 d2             	movzx  edx,dl
c001d293:	ff 24 95 58 8a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd75a8]
c001d29a:	e8 e7 fc ff ff       	call   c001cf86 <Vm::fpuGet0()>
c001d29f:	eb 05                	jmp    c001d2a6 <Vm::x87Handler(regs*)+0x67>
c001d2a1:	e8 e5 fc ff ff       	call   c001cf8b <Vm::fpuGet1()>
c001d2a6:	57                   	push   edi
c001d2a7:	57                   	push   edi
c001d2a8:	52                   	push   edx
c001d2a9:	50                   	push   eax
c001d2aa:	e8 e1 fe ff ff       	call   c001d190 <Vm::fpuPush(unsigned long long)>
c001d2af:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d2b3:	83 c4 10             	add    esp,0x10
c001d2b6:	b0 01                	mov    al,0x1
c001d2b8:	e9 e3 09 00 00       	jmp    c001dca0 <Vm::x87Handler(regs*)+0xa61>
c001d2bd:	83 ec 0c             	sub    esp,0xc
c001d2c0:	6a 00                	push   0x0
c001d2c2:	e8 3b fe ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d2c7:	59                   	pop    ecx
c001d2c8:	5e                   	pop    esi
c001d2c9:	52                   	push   edx
c001d2ca:	50                   	push   eax
c001d2cb:	e8 c2 fd ff ff       	call   c001d092 <Vm::fpuChs(unsigned long long)>
c001d2d0:	eb 13                	jmp    c001d2e5 <Vm::x87Handler(regs*)+0xa6>
c001d2d2:	83 ec 0c             	sub    esp,0xc
c001d2d5:	6a 00                	push   0x0
c001d2d7:	e8 26 fe ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d2dc:	5f                   	pop    edi
c001d2dd:	5d                   	pop    ebp
c001d2de:	52                   	push   edx
c001d2df:	50                   	push   eax
c001d2e0:	e8 a4 fd ff ff       	call   c001d089 <Vm::fpuAbs(unsigned long long)>
c001d2e5:	83 c4 0c             	add    esp,0xc
c001d2e8:	52                   	push   edx
c001d2e9:	50                   	push   eax
c001d2ea:	6a 00                	push   0x0
c001d2ec:	e8 54 fe ff ff       	call   c001d145 <Vm::fpuSetReg(int, unsigned long long)>
c001d2f1:	eb bc                	jmp    c001d2af <Vm::x87Handler(regs*)+0x70>
c001d2f3:	e8 d3 fc ff ff       	call   c001cfcb <Vm::fpuGetLog210()>
c001d2f8:	eb ac                	jmp    c001d2a6 <Vm::x87Handler(regs*)+0x67>
c001d2fa:	e8 9c fc ff ff       	call   c001cf9b <Vm::fpuGetLog2E()>
c001d2ff:	eb a5                	jmp    c001d2a6 <Vm::x87Handler(regs*)+0x67>
c001d301:	e8 8d fc ff ff       	call   c001cf93 <Vm::fpuGetPi()>
c001d306:	eb 9e                	jmp    c001d2a6 <Vm::x87Handler(regs*)+0x67>
c001d308:	e8 d6 fc ff ff       	call   c001cfe3 <Vm::fpuGetLog102()>
c001d30d:	eb 97                	jmp    c001d2a6 <Vm::x87Handler(regs*)+0x67>
c001d30f:	e8 9f fc ff ff       	call   c001cfb3 <Vm::fpuGetLogE2()>
c001d314:	eb 90                	jmp    c001d2a6 <Vm::x87Handler(regs*)+0x67>
c001d316:	8d 50 40             	lea    edx,[eax+0x40]
c001d319:	80 fa 07             	cmp    dl,0x7
c001d31c:	77 15                	ja     c001d333 <Vm::x87Handler(regs*)+0xf4>
c001d31e:	83 ec 0c             	sub    esp,0xc
c001d321:	2d c0 00 00 00       	sub    eax,0xc0
c001d326:	50                   	push   eax
c001d327:	e8 d6 fd ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d32c:	59                   	pop    ecx
c001d32d:	5e                   	pop    esi
c001d32e:	e9 75 ff ff ff       	jmp    c001d2a8 <Vm::x87Handler(regs*)+0x69>
c001d333:	8d 50 38             	lea    edx,[eax+0x38]
c001d336:	80 fa 07             	cmp    dl,0x7
c001d339:	77 3c                	ja     c001d377 <Vm::x87Handler(regs*)+0x138>
c001d33b:	83 ec 0c             	sub    esp,0xc
c001d33e:	2d c8 00 00 00       	sub    eax,0xc8
c001d343:	50                   	push   eax
c001d344:	e8 b9 fd ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d349:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d350:	89 c6                	mov    esi,eax
c001d352:	89 d7                	mov    edi,edx
c001d354:	e8 a9 fd ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d359:	83 c4 0c             	add    esp,0xc
c001d35c:	52                   	push   edx
c001d35d:	50                   	push   eax
c001d35e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d362:	2d c8 00 00 00       	sub    eax,0xc8
c001d367:	50                   	push   eax
c001d368:	e8 d8 fd ff ff       	call   c001d145 <Vm::fpuSetReg(int, unsigned long long)>
c001d36d:	83 c4 0c             	add    esp,0xc
c001d370:	57                   	push   edi
c001d371:	56                   	push   esi
c001d372:	e9 73 ff ff ff       	jmp    c001d2ea <Vm::x87Handler(regs*)+0xab>
c001d377:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d37b:	84 d2                	test   dl,dl
c001d37d:	75 0f                	jne    c001d38e <Vm::x87Handler(regs*)+0x14f>
c001d37f:	83 ec 0c             	sub    esp,0xc
c001d382:	ff 36                	push   DWORD PTR [esi]
c001d384:	e8 c8 fa ff ff       	call   c001ce51 <Vm::fpu32ToInternal(unsigned int)>
c001d389:	e9 bf 00 00 00       	jmp    c001d44d <Vm::x87Handler(regs*)+0x20e>
c001d38e:	80 fa 03             	cmp    dl,0x3
c001d391:	75 13                	jne    c001d3a6 <Vm::x87Handler(regs*)+0x167>
c001d393:	e8 55 fe ff ff       	call   c001d1ed <Vm::fpuPop()>
c001d398:	55                   	push   ebp
c001d399:	55                   	push   ebp
c001d39a:	52                   	push   edx
c001d39b:	50                   	push   eax
c001d39c:	e8 4c fa ff ff       	call   c001cded <Vm::fpuInternalTo32(unsigned long long)>
c001d3a1:	e9 88 00 00 00       	jmp    c001d42e <Vm::x87Handler(regs*)+0x1ef>
c001d3a6:	80 fa 05             	cmp    dl,0x5
c001d3a9:	75 0e                	jne    c001d3b9 <Vm::x87Handler(regs*)+0x17a>
c001d3ab:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d3ae:	66 a3 82 b8 02 c0    	mov    ds:0xc002b882,ax
c001d3b4:	e9 df 00 00 00       	jmp    c001d498 <Vm::x87Handler(regs*)+0x259>
c001d3b9:	31 c0                	xor    eax,eax
c001d3bb:	80 fa 07             	cmp    dl,0x7
c001d3be:	0f 85 dc 08 00 00    	jne    c001dca0 <Vm::x87Handler(regs*)+0xa61>
c001d3c4:	66 a1 82 b8 02 c0    	mov    ax,ds:0xc002b882
c001d3ca:	66 89 06             	mov    WORD PTR [esi],ax
c001d3cd:	e9 c6 00 00 00       	jmp    c001d498 <Vm::x87Handler(regs*)+0x259>
c001d3d2:	80 fa d8             	cmp    dl,0xd8
c001d3d5:	0f 84 c9 00 00 00    	je     c001d4a4 <Vm::x87Handler(regs*)+0x265>
c001d3db:	80 fa dc             	cmp    dl,0xdc
c001d3de:	0f 84 0d 02 00 00    	je     c001d5f1 <Vm::x87Handler(regs*)+0x3b2>
c001d3e4:	80 fa de             	cmp    dl,0xde
c001d3e7:	0f 84 cd 02 00 00    	je     c001d6ba <Vm::x87Handler(regs*)+0x47b>
c001d3ed:	80 fa dd             	cmp    dl,0xdd
c001d3f0:	0f 84 5f 04 00 00    	je     c001d855 <Vm::x87Handler(regs*)+0x616>
c001d3f6:	80 fa da             	cmp    dl,0xda
c001d3f9:	0f 84 24 05 00 00    	je     c001d923 <Vm::x87Handler(regs*)+0x6e4>
c001d3ff:	80 fa df             	cmp    dl,0xdf
c001d402:	0f 84 68 05 00 00    	je     c001d970 <Vm::x87Handler(regs*)+0x731>
c001d408:	31 c0                	xor    eax,eax
c001d40a:	80 fa db             	cmp    dl,0xdb
c001d40d:	0f 85 8d 08 00 00    	jne    c001dca0 <Vm::x87Handler(regs*)+0xa61>
c001d413:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d417:	80 fa 03             	cmp    dl,0x3
c001d41a:	0f 85 70 06 00 00    	jne    c001da90 <Vm::x87Handler(regs*)+0x851>
c001d420:	e8 c8 fd ff ff       	call   c001d1ed <Vm::fpuPop()>
c001d425:	55                   	push   ebp
c001d426:	55                   	push   ebp
c001d427:	52                   	push   edx
c001d428:	50                   	push   eax
c001d429:	e8 71 fa ff ff       	call   c001ce9f <Vm::fpuFloatToLong(unsigned long long)>
c001d42e:	83 c4 10             	add    esp,0x10
c001d431:	89 06                	mov    DWORD PTR [esi],eax
c001d433:	eb 63                	jmp    c001d498 <Vm::x87Handler(regs*)+0x259>
c001d435:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d439:	84 d2                	test   dl,dl
c001d43b:	0f 85 e6 05 00 00    	jne    c001da27 <Vm::x87Handler(regs*)+0x7e8>
c001d441:	57                   	push   edi
c001d442:	57                   	push   edi
c001d443:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001d446:	ff 36                	push   DWORD PTR [esi]
c001d448:	e8 49 fa ff ff       	call   c001ce96 <Vm::fpu64ToInternal(unsigned long long)>
c001d44d:	5e                   	pop    esi
c001d44e:	5f                   	pop    edi
c001d44f:	52                   	push   edx
c001d450:	50                   	push   eax
c001d451:	e8 3a fd ff ff       	call   c001d190 <Vm::fpuPush(unsigned long long)>
c001d456:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d45a:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001d45d:	e9 51 fe ff ff       	jmp    c001d2b3 <Vm::x87Handler(regs*)+0x74>
c001d462:	80 fa 03             	cmp    dl,0x3
c001d465:	0f 85 d7 06 00 00    	jne    c001db42 <Vm::x87Handler(regs*)+0x903>
c001d46b:	57                   	push   edi
c001d46c:	57                   	push   edi
c001d46d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001d470:	ff 36                	push   DWORD PTR [esi]
c001d472:	e8 1f fa ff ff       	call   c001ce96 <Vm::fpu64ToInternal(unsigned long long)>
c001d477:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d47e:	89 c6                	mov    esi,eax
c001d480:	89 d7                	mov    edi,edx
c001d482:	e8 7b fc ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d487:	57                   	push   edi
c001d488:	56                   	push   esi
c001d489:	52                   	push   edx
c001d48a:	50                   	push   eax
c001d48b:	e8 95 fb ff ff       	call   c001d025 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d490:	83 c4 20             	add    esp,0x20
c001d493:	e8 55 fd ff ff       	call   c001d1ed <Vm::fpuPop()>
c001d498:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d49c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001d49f:	e9 12 fe ff ff       	jmp    c001d2b6 <Vm::x87Handler(regs*)+0x77>
c001d4a4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d4a8:	8d 50 40             	lea    edx,[eax+0x40]
c001d4ab:	80 fa 07             	cmp    dl,0x7
c001d4ae:	77 29                	ja     c001d4d9 <Vm::x87Handler(regs*)+0x29a>
c001d4b0:	83 ec 0c             	sub    esp,0xc
c001d4b3:	2d c0 00 00 00       	sub    eax,0xc0
c001d4b8:	50                   	push   eax
c001d4b9:	e8 44 fc ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d4be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d4c5:	89 c6                	mov    esi,eax
c001d4c7:	89 d7                	mov    edi,edx
c001d4c9:	e8 34 fc ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d4ce:	57                   	push   edi
c001d4cf:	56                   	push   esi
c001d4d0:	52                   	push   edx
c001d4d1:	50                   	push   eax
c001d4d2:	e8 a1 fb ff ff       	call   c001d078 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d4d7:	eb 2f                	jmp    c001d508 <Vm::x87Handler(regs*)+0x2c9>
c001d4d9:	8d 50 38             	lea    edx,[eax+0x38]
c001d4dc:	80 fa 07             	cmp    dl,0x7
c001d4df:	77 2f                	ja     c001d510 <Vm::x87Handler(regs*)+0x2d1>
c001d4e1:	83 ec 0c             	sub    esp,0xc
c001d4e4:	2d c8 00 00 00       	sub    eax,0xc8
c001d4e9:	50                   	push   eax
c001d4ea:	e8 13 fc ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d4ef:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d4f6:	89 c6                	mov    esi,eax
c001d4f8:	89 d7                	mov    edi,edx
c001d4fa:	e8 03 fc ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d4ff:	57                   	push   edi
c001d500:	56                   	push   esi
c001d501:	52                   	push   edx
c001d502:	50                   	push   eax
c001d503:	e8 a9 fb ff ff       	call   c001d0b1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d508:	83 c4 1c             	add    esp,0x1c
c001d50b:	e9 d8 fd ff ff       	jmp    c001d2e8 <Vm::x87Handler(regs*)+0xa9>
c001d510:	8d 50 30             	lea    edx,[eax+0x30]
c001d513:	80 fa 07             	cmp    dl,0x7
c001d516:	77 0d                	ja     c001d525 <Vm::x87Handler(regs*)+0x2e6>
c001d518:	83 ec 0c             	sub    esp,0xc
c001d51b:	2d d0 00 00 00       	sub    eax,0xd0
c001d520:	e9 99 03 00 00       	jmp    c001d8be <Vm::x87Handler(regs*)+0x67f>
c001d525:	8d 50 28             	lea    edx,[eax+0x28]
c001d528:	80 fa 07             	cmp    dl,0x7
c001d52b:	77 0d                	ja     c001d53a <Vm::x87Handler(regs*)+0x2fb>
c001d52d:	83 ec 0c             	sub    esp,0xc
c001d530:	2d d8 00 00 00       	sub    eax,0xd8
c001d535:	e9 c0 03 00 00       	jmp    c001d8fa <Vm::x87Handler(regs*)+0x6bb>
c001d53a:	8d 50 20             	lea    edx,[eax+0x20]
c001d53d:	80 fa 07             	cmp    dl,0x7
c001d540:	77 1b                	ja     c001d55d <Vm::x87Handler(regs*)+0x31e>
c001d542:	83 ec 0c             	sub    esp,0xc
c001d545:	2d e0 00 00 00       	sub    eax,0xe0
c001d54a:	50                   	push   eax
c001d54b:	e8 b2 fb ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d550:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d557:	89 c6                	mov    esi,eax
c001d559:	89 d7                	mov    edi,edx
c001d55b:	eb 22                	jmp    c001d57f <Vm::x87Handler(regs*)+0x340>
c001d55d:	8d 50 18             	lea    edx,[eax+0x18]
c001d560:	80 fa 07             	cmp    dl,0x7
c001d563:	77 2d                	ja     c001d592 <Vm::x87Handler(regs*)+0x353>
c001d565:	83 ec 0c             	sub    esp,0xc
c001d568:	6a 00                	push   0x0
c001d56a:	e8 93 fb ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d56f:	89 c6                	mov    esi,eax
c001d571:	89 d7                	mov    edi,edx
c001d573:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d577:	2d e8 00 00 00       	sub    eax,0xe8
c001d57c:	89 04 24             	mov    DWORD PTR [esp],eax
c001d57f:	e8 7e fb ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d584:	57                   	push   edi
c001d585:	56                   	push   esi
c001d586:	52                   	push   edx
c001d587:	50                   	push   eax
c001d588:	e8 15 fb ff ff       	call   c001d0a2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d58d:	e9 76 ff ff ff       	jmp    c001d508 <Vm::x87Handler(regs*)+0x2c9>
c001d592:	8d 50 10             	lea    edx,[eax+0x10]
c001d595:	80 fa 07             	cmp    dl,0x7
c001d598:	77 1b                	ja     c001d5b5 <Vm::x87Handler(regs*)+0x376>
c001d59a:	83 ec 0c             	sub    esp,0xc
c001d59d:	2d f0 00 00 00       	sub    eax,0xf0
c001d5a2:	50                   	push   eax
c001d5a3:	e8 5a fb ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d5a8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d5af:	89 c6                	mov    esi,eax
c001d5b1:	89 d7                	mov    edi,edx
c001d5b3:	eb 22                	jmp    c001d5d7 <Vm::x87Handler(regs*)+0x398>
c001d5b5:	3c f7                	cmp    al,0xf7
c001d5b7:	0f 86 d1 03 00 00    	jbe    c001d98e <Vm::x87Handler(regs*)+0x74f>
c001d5bd:	83 ec 0c             	sub    esp,0xc
c001d5c0:	6a 00                	push   0x0
c001d5c2:	e8 3b fb ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d5c7:	89 c6                	mov    esi,eax
c001d5c9:	89 d7                	mov    edi,edx
c001d5cb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d5cf:	2d f8 00 00 00       	sub    eax,0xf8
c001d5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5d7:	e8 26 fb ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d5dc:	57                   	push   edi
c001d5dd:	56                   	push   esi
c001d5de:	52                   	push   edx
c001d5df:	50                   	push   eax
c001d5e0:	e8 eb fa ff ff       	call   c001d0d0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d5e5:	83 c4 1c             	add    esp,0x1c
c001d5e8:	52                   	push   edx
c001d5e9:	50                   	push   eax
c001d5ea:	6a 00                	push   0x0
c001d5ec:	e9 51 02 00 00       	jmp    c001d842 <Vm::x87Handler(regs*)+0x603>
c001d5f1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d5f5:	8d 50 40             	lea    edx,[eax+0x40]
c001d5f8:	80 fa 07             	cmp    dl,0x7
c001d5fb:	77 37                	ja     c001d634 <Vm::x87Handler(regs*)+0x3f5>
c001d5fd:	83 ec 0c             	sub    esp,0xc
c001d600:	2d c0 00 00 00       	sub    eax,0xc0
c001d605:	50                   	push   eax
c001d606:	e8 f7 fa ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d60b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d612:	89 c6                	mov    esi,eax
c001d614:	89 d7                	mov    edi,edx
c001d616:	e8 e7 fa ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d61b:	57                   	push   edi
c001d61c:	56                   	push   esi
c001d61d:	52                   	push   edx
c001d61e:	50                   	push   eax
c001d61f:	e8 54 fa ff ff       	call   c001d078 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d624:	83 c4 1c             	add    esp,0x1c
c001d627:	52                   	push   edx
c001d628:	50                   	push   eax
c001d629:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d62d:	2d c0 00 00 00       	sub    eax,0xc0
c001d632:	eb 3d                	jmp    c001d671 <Vm::x87Handler(regs*)+0x432>
c001d634:	8d 50 38             	lea    edx,[eax+0x38]
c001d637:	80 fa 07             	cmp    dl,0x7
c001d63a:	77 3b                	ja     c001d677 <Vm::x87Handler(regs*)+0x438>
c001d63c:	83 ec 0c             	sub    esp,0xc
c001d63f:	2d c8 00 00 00       	sub    eax,0xc8
c001d644:	50                   	push   eax
c001d645:	e8 b8 fa ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d64a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d651:	89 c6                	mov    esi,eax
c001d653:	89 d7                	mov    edi,edx
c001d655:	e8 a8 fa ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d65a:	57                   	push   edi
c001d65b:	56                   	push   esi
c001d65c:	52                   	push   edx
c001d65d:	50                   	push   eax
c001d65e:	e8 4e fa ff ff       	call   c001d0b1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d663:	83 c4 1c             	add    esp,0x1c
c001d666:	52                   	push   edx
c001d667:	50                   	push   eax
c001d668:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d66c:	2d c8 00 00 00       	sub    eax,0xc8
c001d671:	50                   	push   eax
c001d672:	e9 75 fc ff ff       	jmp    c001d2ec <Vm::x87Handler(regs*)+0xad>
c001d677:	83 c0 18             	add    eax,0x18
c001d67a:	3c 07                	cmp    al,0x7
c001d67c:	0f 87 3b 04 00 00    	ja     c001dabd <Vm::x87Handler(regs*)+0x87e>
c001d682:	83 ec 0c             	sub    esp,0xc
c001d685:	6a 00                	push   0x0
c001d687:	e8 76 fa ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d68c:	89 c6                	mov    esi,eax
c001d68e:	89 d7                	mov    edi,edx
c001d690:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d694:	2d e8 00 00 00       	sub    eax,0xe8
c001d699:	89 04 24             	mov    DWORD PTR [esp],eax
c001d69c:	e8 61 fa ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d6a1:	57                   	push   edi
c001d6a2:	56                   	push   esi
c001d6a3:	52                   	push   edx
c001d6a4:	50                   	push   eax
c001d6a5:	e8 f8 f9 ff ff       	call   c001d0a2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d6aa:	83 c4 1c             	add    esp,0x1c
c001d6ad:	52                   	push   edx
c001d6ae:	50                   	push   eax
c001d6af:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d6b3:	2d e8 00 00 00       	sub    eax,0xe8
c001d6b8:	eb b7                	jmp    c001d671 <Vm::x87Handler(regs*)+0x432>
c001d6ba:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d6be:	8d 50 40             	lea    edx,[eax+0x40]
c001d6c1:	80 fa 07             	cmp    dl,0x7
c001d6c4:	77 3a                	ja     c001d700 <Vm::x87Handler(regs*)+0x4c1>
c001d6c6:	83 ec 0c             	sub    esp,0xc
c001d6c9:	2d c0 00 00 00       	sub    eax,0xc0
c001d6ce:	50                   	push   eax
c001d6cf:	e8 2e fa ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d6d4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d6db:	89 c6                	mov    esi,eax
c001d6dd:	89 d7                	mov    edi,edx
c001d6df:	e8 1e fa ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d6e4:	57                   	push   edi
c001d6e5:	56                   	push   esi
c001d6e6:	52                   	push   edx
c001d6e7:	50                   	push   eax
c001d6e8:	e8 8b f9 ff ff       	call   c001d078 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001d6ed:	83 c4 1c             	add    esp,0x1c
c001d6f0:	52                   	push   edx
c001d6f1:	50                   	push   eax
c001d6f2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d6f6:	2d c0 00 00 00       	sub    eax,0xc0
c001d6fb:	e9 9e 01 00 00       	jmp    c001d89e <Vm::x87Handler(regs*)+0x65f>
c001d700:	8d 50 20             	lea    edx,[eax+0x20]
c001d703:	80 fa 07             	cmp    dl,0x7
c001d706:	77 3a                	ja     c001d742 <Vm::x87Handler(regs*)+0x503>
c001d708:	83 ec 0c             	sub    esp,0xc
c001d70b:	2d e0 00 00 00       	sub    eax,0xe0
c001d710:	50                   	push   eax
c001d711:	e8 ec f9 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d71d:	89 c6                	mov    esi,eax
c001d71f:	89 d7                	mov    edi,edx
c001d721:	e8 dc f9 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d726:	57                   	push   edi
c001d727:	56                   	push   esi
c001d728:	52                   	push   edx
c001d729:	50                   	push   eax
c001d72a:	e8 73 f9 ff ff       	call   c001d0a2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d72f:	83 c4 1c             	add    esp,0x1c
c001d732:	52                   	push   edx
c001d733:	50                   	push   eax
c001d734:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d738:	2d e0 00 00 00       	sub    eax,0xe0
c001d73d:	e9 5c 01 00 00       	jmp    c001d89e <Vm::x87Handler(regs*)+0x65f>
c001d742:	8d 50 18             	lea    edx,[eax+0x18]
c001d745:	80 fa 07             	cmp    dl,0x7
c001d748:	77 3b                	ja     c001d785 <Vm::x87Handler(regs*)+0x546>
c001d74a:	83 ec 0c             	sub    esp,0xc
c001d74d:	6a 00                	push   0x0
c001d74f:	e8 ae f9 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d754:	89 c6                	mov    esi,eax
c001d756:	89 d7                	mov    edi,edx
c001d758:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d75c:	2d e8 00 00 00       	sub    eax,0xe8
c001d761:	89 04 24             	mov    DWORD PTR [esp],eax
c001d764:	e8 99 f9 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d769:	57                   	push   edi
c001d76a:	56                   	push   esi
c001d76b:	52                   	push   edx
c001d76c:	50                   	push   eax
c001d76d:	e8 30 f9 ff ff       	call   c001d0a2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001d772:	83 c4 1c             	add    esp,0x1c
c001d775:	52                   	push   edx
c001d776:	50                   	push   eax
c001d777:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d77b:	2d e8 00 00 00       	sub    eax,0xe8
c001d780:	e9 19 01 00 00       	jmp    c001d89e <Vm::x87Handler(regs*)+0x65f>
c001d785:	8d 50 38             	lea    edx,[eax+0x38]
c001d788:	80 fa 07             	cmp    dl,0x7
c001d78b:	77 37                	ja     c001d7c4 <Vm::x87Handler(regs*)+0x585>
c001d78d:	83 ec 0c             	sub    esp,0xc
c001d790:	2d c8 00 00 00       	sub    eax,0xc8
c001d795:	50                   	push   eax
c001d796:	e8 67 f9 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d79b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d7a2:	89 c6                	mov    esi,eax
c001d7a4:	89 d7                	mov    edi,edx
c001d7a6:	e8 57 f9 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d7ab:	57                   	push   edi
c001d7ac:	56                   	push   esi
c001d7ad:	52                   	push   edx
c001d7ae:	50                   	push   eax
c001d7af:	e8 fd f8 ff ff       	call   c001d0b1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001d7b4:	83 c4 1c             	add    esp,0x1c
c001d7b7:	52                   	push   edx
c001d7b8:	50                   	push   eax
c001d7b9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d7bd:	2d c8 00 00 00       	sub    eax,0xc8
c001d7c2:	eb 7d                	jmp    c001d841 <Vm::x87Handler(regs*)+0x602>
c001d7c4:	3c f7                	cmp    al,0xf7
c001d7c6:	76 38                	jbe    c001d800 <Vm::x87Handler(regs*)+0x5c1>
c001d7c8:	83 ec 0c             	sub    esp,0xc
c001d7cb:	6a 00                	push   0x0
c001d7cd:	e8 30 f9 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d7d2:	89 c6                	mov    esi,eax
c001d7d4:	89 d7                	mov    edi,edx
c001d7d6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d7da:	2d f8 00 00 00       	sub    eax,0xf8
c001d7df:	89 04 24             	mov    DWORD PTR [esp],eax
c001d7e2:	e8 1b f9 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d7e7:	57                   	push   edi
c001d7e8:	56                   	push   esi
c001d7e9:	52                   	push   edx
c001d7ea:	50                   	push   eax
c001d7eb:	e8 e0 f8 ff ff       	call   c001d0d0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d7f0:	83 c4 1c             	add    esp,0x1c
c001d7f3:	52                   	push   edx
c001d7f4:	50                   	push   eax
c001d7f5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d7f9:	2d f8 00 00 00       	sub    eax,0xf8
c001d7fe:	eb 41                	jmp    c001d841 <Vm::x87Handler(regs*)+0x602>
c001d800:	8d 50 10             	lea    edx,[eax+0x10]
c001d803:	80 fa 07             	cmp    dl,0x7
c001d806:	0f 87 5a 01 00 00    	ja     c001d966 <Vm::x87Handler(regs*)+0x727>
c001d80c:	83 ec 0c             	sub    esp,0xc
c001d80f:	2d f0 00 00 00       	sub    eax,0xf0
c001d814:	50                   	push   eax
c001d815:	e8 e8 f8 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d81a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d821:	89 c6                	mov    esi,eax
c001d823:	89 d7                	mov    edi,edx
c001d825:	e8 d8 f8 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d82a:	57                   	push   edi
c001d82b:	56                   	push   esi
c001d82c:	52                   	push   edx
c001d82d:	50                   	push   eax
c001d82e:	e8 9d f8 ff ff       	call   c001d0d0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001d833:	83 c4 1c             	add    esp,0x1c
c001d836:	52                   	push   edx
c001d837:	50                   	push   eax
c001d838:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d83c:	2d f0 00 00 00       	sub    eax,0xf0
c001d841:	50                   	push   eax
c001d842:	e8 fe f8 ff ff       	call   c001d145 <Vm::fpuSetReg(int, unsigned long long)>
c001d847:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d84b:	e8 9d f9 ff ff       	call   c001d1ed <Vm::fpuPop()>
c001d850:	e9 5e fa ff ff       	jmp    c001d2b3 <Vm::x87Handler(regs*)+0x74>
c001d855:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d859:	8d 50 30             	lea    edx,[eax+0x30]
c001d85c:	80 fa 07             	cmp    dl,0x7
c001d85f:	77 1d                	ja     c001d87e <Vm::x87Handler(regs*)+0x63f>
c001d861:	83 ec 0c             	sub    esp,0xc
c001d864:	6a 00                	push   0x0
c001d866:	e8 97 f8 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d86b:	83 c4 0c             	add    esp,0xc
c001d86e:	52                   	push   edx
c001d86f:	50                   	push   eax
c001d870:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d874:	2d d0 00 00 00       	sub    eax,0xd0
c001d879:	e9 f3 fd ff ff       	jmp    c001d671 <Vm::x87Handler(regs*)+0x432>
c001d87e:	8d 50 28             	lea    edx,[eax+0x28]
c001d881:	80 fa 07             	cmp    dl,0x7
c001d884:	77 28                	ja     c001d8ae <Vm::x87Handler(regs*)+0x66f>
c001d886:	83 ec 0c             	sub    esp,0xc
c001d889:	6a 00                	push   0x0
c001d88b:	e8 72 f8 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d890:	83 c4 0c             	add    esp,0xc
c001d893:	52                   	push   edx
c001d894:	50                   	push   eax
c001d895:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001d899:	2d d8 00 00 00       	sub    eax,0xd8
c001d89e:	50                   	push   eax
c001d89f:	e8 a1 f8 ff ff       	call   c001d145 <Vm::fpuSetReg(int, unsigned long long)>
c001d8a4:	e8 44 f9 ff ff       	call   c001d1ed <Vm::fpuPop()>
c001d8a9:	e9 01 fa ff ff       	jmp    c001d2af <Vm::x87Handler(regs*)+0x70>
c001d8ae:	8d 50 20             	lea    edx,[eax+0x20]
c001d8b1:	80 fa 07             	cmp    dl,0x7
c001d8b4:	77 30                	ja     c001d8e6 <Vm::x87Handler(regs*)+0x6a7>
c001d8b6:	83 ec 0c             	sub    esp,0xc
c001d8b9:	2d e0 00 00 00       	sub    eax,0xe0
c001d8be:	50                   	push   eax
c001d8bf:	e8 3e f8 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d8c4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d8cb:	89 c6                	mov    esi,eax
c001d8cd:	89 d7                	mov    edi,edx
c001d8cf:	e8 2e f8 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d8d4:	57                   	push   edi
c001d8d5:	56                   	push   esi
c001d8d6:	52                   	push   edx
c001d8d7:	50                   	push   eax
c001d8d8:	e8 48 f7 ff ff       	call   c001d025 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d8dd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d8e1:	e9 54 02 00 00       	jmp    c001db3a <Vm::x87Handler(regs*)+0x8fb>
c001d8e6:	8d 50 18             	lea    edx,[eax+0x18]
c001d8e9:	80 fa 07             	cmp    dl,0x7
c001d8ec:	0f 87 43 fb ff ff    	ja     c001d435 <Vm::x87Handler(regs*)+0x1f6>
c001d8f2:	83 ec 0c             	sub    esp,0xc
c001d8f5:	2d e8 00 00 00       	sub    eax,0xe8
c001d8fa:	50                   	push   eax
c001d8fb:	e8 02 f8 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d900:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d907:	89 c6                	mov    esi,eax
c001d909:	89 d7                	mov    edi,edx
c001d90b:	e8 f2 f7 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d910:	57                   	push   edi
c001d911:	56                   	push   esi
c001d912:	52                   	push   edx
c001d913:	50                   	push   eax
c001d914:	e8 0c f7 ff ff       	call   c001d025 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d919:	83 c4 20             	add    esp,0x20
c001d91c:	e8 cc f8 ff ff       	call   c001d1ed <Vm::fpuPop()>
c001d921:	eb 62                	jmp    c001d985 <Vm::x87Handler(regs*)+0x746>
c001d923:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001d927:	0f 85 0f 01 00 00    	jne    c001da3c <Vm::x87Handler(regs*)+0x7fd>
c001d92d:	83 ec 0c             	sub    esp,0xc
c001d930:	6a 01                	push   0x1
c001d932:	e8 cb f7 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d937:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d93e:	89 c6                	mov    esi,eax
c001d940:	89 d7                	mov    edi,edx
c001d942:	e8 bb f7 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d947:	57                   	push   edi
c001d948:	56                   	push   esi
c001d949:	52                   	push   edx
c001d94a:	50                   	push   eax
c001d94b:	e8 d5 f6 ff ff       	call   c001d025 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001d950:	83 c4 20             	add    esp,0x20
c001d953:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d957:	e8 91 f8 ff ff       	call   c001d1ed <Vm::fpuPop()>
c001d95c:	e8 8c f8 ff ff       	call   c001d1ed <Vm::fpuPop()>
c001d961:	e9 50 f9 ff ff       	jmp    c001d2b6 <Vm::x87Handler(regs*)+0x77>
c001d966:	3c d9                	cmp    al,0xd9
c001d968:	0f 85 b5 02 00 00    	jne    c001dc23 <Vm::x87Handler(regs*)+0x9e4>
c001d96e:	eb bd                	jmp    c001d92d <Vm::x87Handler(regs*)+0x6ee>
c001d970:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001d974:	0f 85 ea 02 00 00    	jne    c001dc64 <Vm::x87Handler(regs*)+0xa25>
c001d97a:	0f b7 05 80 b8 02 c0 	movzx  eax,WORD PTR ds:0xc002b880
c001d981:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001d985:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001d989:	e9 28 f9 ff ff       	jmp    c001d2b6 <Vm::x87Handler(regs*)+0x77>
c001d98e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001d992:	84 d2                	test   dl,dl
c001d994:	75 0f                	jne    c001d9a5 <Vm::x87Handler(regs*)+0x766>
c001d996:	83 ec 0c             	sub    esp,0xc
c001d999:	ff 36                	push   DWORD PTR [esi]
c001d99b:	e8 b1 f4 ff ff       	call   c001ce51 <Vm::fpu32ToInternal(unsigned int)>
c001d9a0:	e9 2c 01 00 00       	jmp    c001dad1 <Vm::x87Handler(regs*)+0x892>
c001d9a5:	80 fa 01             	cmp    dl,0x1
c001d9a8:	75 0f                	jne    c001d9b9 <Vm::x87Handler(regs*)+0x77a>
c001d9aa:	83 ec 0c             	sub    esp,0xc
c001d9ad:	ff 36                	push   DWORD PTR [esi]
c001d9af:	e8 9d f4 ff ff       	call   c001ce51 <Vm::fpu32ToInternal(unsigned int)>
c001d9b4:	e9 81 02 00 00       	jmp    c001dc3a <Vm::x87Handler(regs*)+0x9fb>
c001d9b9:	80 fa 04             	cmp    dl,0x4
c001d9bc:	75 0f                	jne    c001d9cd <Vm::x87Handler(regs*)+0x78e>
c001d9be:	83 ec 0c             	sub    esp,0xc
c001d9c1:	ff 36                	push   DWORD PTR [esi]
c001d9c3:	e8 89 f4 ff ff       	call   c001ce51 <Vm::fpu32ToInternal(unsigned int)>
c001d9c8:	e9 86 01 00 00       	jmp    c001db53 <Vm::x87Handler(regs*)+0x914>
c001d9cd:	80 fa 05             	cmp    dl,0x5
c001d9d0:	75 1b                	jne    c001d9ed <Vm::x87Handler(regs*)+0x7ae>
c001d9d2:	83 ec 0c             	sub    esp,0xc
c001d9d5:	6a 00                	push   0x0
c001d9d7:	e8 26 f7 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001d9dc:	89 c7                	mov    edi,eax
c001d9de:	89 d5                	mov    ebp,edx
c001d9e0:	58                   	pop    eax
c001d9e1:	ff 36                	push   DWORD PTR [esi]
c001d9e3:	e8 69 f4 ff ff       	call   c001ce51 <Vm::fpu32ToInternal(unsigned int)>
c001d9e8:	e9 a3 01 00 00       	jmp    c001db90 <Vm::x87Handler(regs*)+0x951>
c001d9ed:	80 fa 06             	cmp    dl,0x6
c001d9f0:	75 0f                	jne    c001da01 <Vm::x87Handler(regs*)+0x7c2>
c001d9f2:	83 ec 0c             	sub    esp,0xc
c001d9f5:	ff 36                	push   DWORD PTR [esi]
c001d9f7:	e8 55 f4 ff ff       	call   c001ce51 <Vm::fpu32ToInternal(unsigned int)>
c001d9fc:	e9 ae 01 00 00       	jmp    c001dbaf <Vm::x87Handler(regs*)+0x970>
c001da01:	31 c0                	xor    eax,eax
c001da03:	80 fa 07             	cmp    dl,0x7
c001da06:	0f 85 94 02 00 00    	jne    c001dca0 <Vm::x87Handler(regs*)+0xa61>
c001da0c:	83 ec 0c             	sub    esp,0xc
c001da0f:	6a 00                	push   0x0
c001da11:	e8 ec f6 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001da16:	89 c7                	mov    edi,eax
c001da18:	89 d5                	mov    ebp,edx
c001da1a:	58                   	pop    eax
c001da1b:	ff 36                	push   DWORD PTR [esi]
c001da1d:	e8 2f f4 ff ff       	call   c001ce51 <Vm::fpu32ToInternal(unsigned int)>
c001da22:	e9 cb 01 00 00       	jmp    c001dbf2 <Vm::x87Handler(regs*)+0x9b3>
c001da27:	80 fa 03             	cmp    dl,0x3
c001da2a:	0f 85 d3 01 00 00    	jne    c001dc03 <Vm::x87Handler(regs*)+0x9c4>
c001da30:	e8 b8 f7 ff ff       	call   c001d1ed <Vm::fpuPop()>
c001da35:	51                   	push   ecx
c001da36:	51                   	push   ecx
c001da37:	e9 de 01 00 00       	jmp    c001dc1a <Vm::x87Handler(regs*)+0x9db>
c001da3c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001da40:	80 fa 01             	cmp    dl,0x1
c001da43:	75 09                	jne    c001da4e <Vm::x87Handler(regs*)+0x80f>
c001da45:	57                   	push   edi
c001da46:	57                   	push   edi
c001da47:	8b 06                	mov    eax,DWORD PTR [esi]
c001da49:	e9 e3 01 00 00       	jmp    c001dc31 <Vm::x87Handler(regs*)+0x9f2>
c001da4e:	80 fa 04             	cmp    dl,0x4
c001da51:	75 12                	jne    c001da65 <Vm::x87Handler(regs*)+0x826>
c001da53:	31 d2                	xor    edx,edx
c001da55:	51                   	push   ecx
c001da56:	51                   	push   ecx
c001da57:	8b 06                	mov    eax,DWORD PTR [esi]
c001da59:	52                   	push   edx
c001da5a:	50                   	push   eax
c001da5b:	e8 d0 f4 ff ff       	call   c001cf30 <Vm::fpuLongToFloat(long long)>
c001da60:	e9 ee 00 00 00       	jmp    c001db53 <Vm::x87Handler(regs*)+0x914>
c001da65:	31 c0                	xor    eax,eax
c001da67:	80 fa 07             	cmp    dl,0x7
c001da6a:	0f 85 30 02 00 00    	jne    c001dca0 <Vm::x87Handler(regs*)+0xa61>
c001da70:	83 ec 0c             	sub    esp,0xc
c001da73:	6a 00                	push   0x0
c001da75:	e8 88 f6 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001da7a:	89 c7                	mov    edi,eax
c001da7c:	89 d5                	mov    ebp,edx
c001da7e:	58                   	pop    eax
c001da7f:	8b 06                	mov    eax,DWORD PTR [esi]
c001da81:	5a                   	pop    edx
c001da82:	31 d2                	xor    edx,edx
c001da84:	52                   	push   edx
c001da85:	50                   	push   eax
c001da86:	e8 a5 f4 ff ff       	call   c001cf30 <Vm::fpuLongToFloat(long long)>
c001da8b:	e9 62 01 00 00       	jmp    c001dbf2 <Vm::x87Handler(regs*)+0x9b3>
c001da90:	84 d2                	test   dl,dl
c001da92:	75 0d                	jne    c001daa1 <Vm::x87Handler(regs*)+0x862>
c001da94:	31 d2                	xor    edx,edx
c001da96:	55                   	push   ebp
c001da97:	55                   	push   ebp
c001da98:	8b 06                	mov    eax,DWORD PTR [esi]
c001da9a:	52                   	push   edx
c001da9b:	50                   	push   eax
c001da9c:	e9 d3 01 00 00       	jmp    c001dc74 <Vm::x87Handler(regs*)+0xa35>
c001daa1:	31 c0                	xor    eax,eax
c001daa3:	80 fa 02             	cmp    dl,0x2
c001daa6:	0f 85 f4 01 00 00    	jne    c001dca0 <Vm::x87Handler(regs*)+0xa61>
c001daac:	83 ec 0c             	sub    esp,0xc
c001daaf:	6a 00                	push   0x0
c001dab1:	e8 4c f6 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001dab6:	59                   	pop    ecx
c001dab7:	5f                   	pop    edi
c001dab8:	e9 6a f9 ff ff       	jmp    c001d427 <Vm::x87Handler(regs*)+0x1e8>
c001dabd:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001dac1:	84 d2                	test   dl,dl
c001dac3:	75 2a                	jne    c001daef <Vm::x87Handler(regs*)+0x8b0>
c001dac5:	50                   	push   eax
c001dac6:	50                   	push   eax
c001dac7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001daca:	ff 36                	push   DWORD PTR [esi]
c001dacc:	e8 c5 f3 ff ff       	call   c001ce96 <Vm::fpu64ToInternal(unsigned long long)>
c001dad1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dad8:	89 c6                	mov    esi,eax
c001dada:	89 d7                	mov    edi,edx
c001dadc:	e8 21 f6 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001dae1:	57                   	push   edi
c001dae2:	56                   	push   esi
c001dae3:	52                   	push   edx
c001dae4:	50                   	push   eax
c001dae5:	e8 8e f5 ff ff       	call   c001d078 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001daea:	e9 64 01 00 00       	jmp    c001dc53 <Vm::x87Handler(regs*)+0xa14>
c001daef:	80 fa 01             	cmp    dl,0x1
c001daf2:	75 11                	jne    c001db05 <Vm::x87Handler(regs*)+0x8c6>
c001daf4:	50                   	push   eax
c001daf5:	50                   	push   eax
c001daf6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001daf9:	ff 36                	push   DWORD PTR [esi]
c001dafb:	e8 96 f3 ff ff       	call   c001ce96 <Vm::fpu64ToInternal(unsigned long long)>
c001db00:	e9 35 01 00 00       	jmp    c001dc3a <Vm::x87Handler(regs*)+0x9fb>
c001db05:	80 fa 02             	cmp    dl,0x2
c001db08:	0f 85 54 f9 ff ff    	jne    c001d462 <Vm::x87Handler(regs*)+0x223>
c001db0e:	55                   	push   ebp
c001db0f:	55                   	push   ebp
c001db10:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001db13:	ff 36                	push   DWORD PTR [esi]
c001db15:	e8 7c f3 ff ff       	call   c001ce96 <Vm::fpu64ToInternal(unsigned long long)>
c001db1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001db21:	89 c6                	mov    esi,eax
c001db23:	89 d7                	mov    edi,edx
c001db25:	e8 d8 f5 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001db2a:	57                   	push   edi
c001db2b:	56                   	push   esi
c001db2c:	52                   	push   edx
c001db2d:	50                   	push   eax
c001db2e:	e8 f2 f4 ff ff       	call   c001d025 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001db33:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001db37:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001db3a:	83 c4 20             	add    esp,0x20
c001db3d:	e9 74 f7 ff ff       	jmp    c001d2b6 <Vm::x87Handler(regs*)+0x77>
c001db42:	80 fa 04             	cmp    dl,0x4
c001db45:	75 2a                	jne    c001db71 <Vm::x87Handler(regs*)+0x932>
c001db47:	51                   	push   ecx
c001db48:	51                   	push   ecx
c001db49:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001db4c:	ff 36                	push   DWORD PTR [esi]
c001db4e:	e8 43 f3 ff ff       	call   c001ce96 <Vm::fpu64ToInternal(unsigned long long)>
c001db53:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001db5a:	89 c6                	mov    esi,eax
c001db5c:	89 d7                	mov    edi,edx
c001db5e:	e8 9f f5 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001db63:	57                   	push   edi
c001db64:	56                   	push   esi
c001db65:	52                   	push   edx
c001db66:	50                   	push   eax
c001db67:	e8 36 f5 ff ff       	call   c001d0a2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001db6c:	e9 e2 00 00 00       	jmp    c001dc53 <Vm::x87Handler(regs*)+0xa14>
c001db71:	80 fa 05             	cmp    dl,0x5
c001db74:	75 28                	jne    c001db9e <Vm::x87Handler(regs*)+0x95f>
c001db76:	83 ec 0c             	sub    esp,0xc
c001db79:	6a 00                	push   0x0
c001db7b:	e8 82 f5 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001db80:	89 c7                	mov    edi,eax
c001db82:	89 d5                	mov    ebp,edx
c001db84:	58                   	pop    eax
c001db85:	5a                   	pop    edx
c001db86:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001db89:	ff 36                	push   DWORD PTR [esi]
c001db8b:	e8 06 f3 ff ff       	call   c001ce96 <Vm::fpu64ToInternal(unsigned long long)>
c001db90:	83 c4 10             	add    esp,0x10
c001db93:	55                   	push   ebp
c001db94:	57                   	push   edi
c001db95:	52                   	push   edx
c001db96:	50                   	push   eax
c001db97:	e8 06 f5 ff ff       	call   c001d0a2 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001db9c:	eb 60                	jmp    c001dbfe <Vm::x87Handler(regs*)+0x9bf>
c001db9e:	80 fa 06             	cmp    dl,0x6
c001dba1:	75 2a                	jne    c001dbcd <Vm::x87Handler(regs*)+0x98e>
c001dba3:	51                   	push   ecx
c001dba4:	51                   	push   ecx
c001dba5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dba8:	ff 36                	push   DWORD PTR [esi]
c001dbaa:	e8 e7 f2 ff ff       	call   c001ce96 <Vm::fpu64ToInternal(unsigned long long)>
c001dbaf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dbb6:	89 c6                	mov    esi,eax
c001dbb8:	89 d7                	mov    edi,edx
c001dbba:	e8 43 f5 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001dbbf:	57                   	push   edi
c001dbc0:	56                   	push   esi
c001dbc1:	52                   	push   edx
c001dbc2:	50                   	push   eax
c001dbc3:	e8 08 f5 ff ff       	call   c001d0d0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001dbc8:	e9 86 00 00 00       	jmp    c001dc53 <Vm::x87Handler(regs*)+0xa14>
c001dbcd:	31 c0                	xor    eax,eax
c001dbcf:	80 fa 07             	cmp    dl,0x7
c001dbd2:	0f 85 c8 00 00 00    	jne    c001dca0 <Vm::x87Handler(regs*)+0xa61>
c001dbd8:	83 ec 0c             	sub    esp,0xc
c001dbdb:	6a 00                	push   0x0
c001dbdd:	e8 20 f5 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001dbe2:	89 c7                	mov    edi,eax
c001dbe4:	89 d5                	mov    ebp,edx
c001dbe6:	58                   	pop    eax
c001dbe7:	5a                   	pop    edx
c001dbe8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dbeb:	ff 36                	push   DWORD PTR [esi]
c001dbed:	e8 a4 f2 ff ff       	call   c001ce96 <Vm::fpu64ToInternal(unsigned long long)>
c001dbf2:	83 c4 10             	add    esp,0x10
c001dbf5:	55                   	push   ebp
c001dbf6:	57                   	push   edi
c001dbf7:	52                   	push   edx
c001dbf8:	50                   	push   eax
c001dbf9:	e8 d2 f4 ff ff       	call   c001d0d0 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001dbfe:	83 c4 0c             	add    esp,0xc
c001dc01:	eb 53                	jmp    c001dc56 <Vm::x87Handler(regs*)+0xa17>
c001dc03:	31 c0                	xor    eax,eax
c001dc05:	80 fa 02             	cmp    dl,0x2
c001dc08:	0f 85 92 00 00 00    	jne    c001dca0 <Vm::x87Handler(regs*)+0xa61>
c001dc0e:	83 ec 0c             	sub    esp,0xc
c001dc11:	6a 00                	push   0x0
c001dc13:	e8 ea f4 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001dc18:	59                   	pop    ecx
c001dc19:	5f                   	pop    edi
c001dc1a:	52                   	push   edx
c001dc1b:	50                   	push   eax
c001dc1c:	e8 27 f2 ff ff       	call   c001ce48 <Vm::fpuInternalTo64(unsigned long long)>
c001dc21:	eb 70                	jmp    c001dc93 <Vm::x87Handler(regs*)+0xa54>
c001dc23:	31 c0                	xor    eax,eax
c001dc25:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001dc2a:	75 74                	jne    c001dca0 <Vm::x87Handler(regs*)+0xa61>
c001dc2c:	50                   	push   eax
c001dc2d:	50                   	push   eax
c001dc2e:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001dc31:	31 d2                	xor    edx,edx
c001dc33:	52                   	push   edx
c001dc34:	50                   	push   eax
c001dc35:	e8 f6 f2 ff ff       	call   c001cf30 <Vm::fpuLongToFloat(long long)>
c001dc3a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dc41:	89 c6                	mov    esi,eax
c001dc43:	89 d7                	mov    edi,edx
c001dc45:	e8 b8 f4 ff ff       	call   c001d102 <Vm::fpuGetReg(int)>
c001dc4a:	57                   	push   edi
c001dc4b:	56                   	push   esi
c001dc4c:	52                   	push   edx
c001dc4d:	50                   	push   eax
c001dc4e:	e8 5e f4 ff ff       	call   c001d0b1 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001dc53:	83 c4 1c             	add    esp,0x1c
c001dc56:	52                   	push   edx
c001dc57:	50                   	push   eax
c001dc58:	6a 00                	push   0x0
c001dc5a:	e8 e6 f4 ff ff       	call   c001d145 <Vm::fpuSetReg(int, unsigned long long)>
c001dc5f:	e9 f2 f7 ff ff       	jmp    c001d456 <Vm::x87Handler(regs*)+0x217>
c001dc64:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001dc68:	80 fa 05             	cmp    dl,0x5
c001dc6b:	75 11                	jne    c001dc7e <Vm::x87Handler(regs*)+0xa3f>
c001dc6d:	55                   	push   ebp
c001dc6e:	55                   	push   ebp
c001dc6f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001dc72:	ff 36                	push   DWORD PTR [esi]
c001dc74:	e8 81 f2 ff ff       	call   c001cefa <Vm::fpuULongToFloat(unsigned long long)>
c001dc79:	e9 cf f7 ff ff       	jmp    c001d44d <Vm::x87Handler(regs*)+0x20e>
c001dc7e:	31 c0                	xor    eax,eax
c001dc80:	80 fa 07             	cmp    dl,0x7
c001dc83:	75 1b                	jne    c001dca0 <Vm::x87Handler(regs*)+0xa61>
c001dc85:	e8 63 f5 ff ff       	call   c001d1ed <Vm::fpuPop()>
c001dc8a:	51                   	push   ecx
c001dc8b:	51                   	push   ecx
c001dc8c:	52                   	push   edx
c001dc8d:	50                   	push   eax
c001dc8e:	e8 0c f2 ff ff       	call   c001ce9f <Vm::fpuFloatToLong(unsigned long long)>
c001dc93:	83 c4 10             	add    esp,0x10
c001dc96:	89 06                	mov    DWORD PTR [esi],eax
c001dc98:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001dc9b:	e9 f8 f7 ff ff       	jmp    c001d498 <Vm::x87Handler(regs*)+0x259>
c001dca0:	83 c4 1c             	add    esp,0x1c
c001dca3:	5b                   	pop    ebx
c001dca4:	5e                   	pop    esi
c001dca5:	5f                   	pop    edi
c001dca6:	5d                   	pop    ebp
c001dca7:	c3                   	ret    

c001dca8 <__static_initialization_and_destruction_0(int, int)>:
c001dca8:	83 ec 0c             	sub    esp,0xc
c001dcab:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001dcb0:	75 1a                	jne    c001dccc <__static_initialization_and_destruction_0(int, int)+0x24>
c001dcb2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001dcba:	75 10                	jne    c001dccc <__static_initialization_and_destruction_0(int, int)+0x24>
c001dcbc:	83 ec 0c             	sub    esp,0xc
c001dcbf:	68 80 b8 02 c0       	push   0xc002b880
c001dcc4:	e8 bf 7a 00 00       	call   c0025788 <Vm::_FPUState::_FPUState()>
c001dcc9:	83 c4 10             	add    esp,0x10
c001dccc:	90                   	nop
c001dccd:	83 c4 0c             	add    esp,0xc
c001dcd0:	c3                   	ret    

c001dcd1 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001dcd1:	83 ec 0c             	sub    esp,0xc
c001dcd4:	83 ec 08             	sub    esp,0x8
c001dcd7:	68 ff ff 00 00       	push   0xffff
c001dcdc:	6a 01                	push   0x1
c001dcde:	e8 c5 ff ff ff       	call   c001dca8 <__static_initialization_and_destruction_0(int, int)>
c001dce3:	83 c4 10             	add    esp,0x10
c001dce6:	83 c4 0c             	add    esp,0xc
c001dce9:	c3                   	ret    

c001dcea <FAT::getName()>:
c001dcea:	b8 94 8a 02 c0       	mov    eax,0xc0028a94
c001dcef:	c3                   	ret    

c001dcf0 <FAT::tell(void*, unsigned long long*)>:
c001dcf0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001dcf5:	75 06                	jne    c001dcfd <FAT::tell(void*, unsigned long long*)+0xd>
c001dcf7:	b8 04 00 00 00       	mov    eax,0x4
c001dcfc:	c3                   	ret    
c001dcfd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dd02:	75 06                	jne    c001dd0a <FAT::tell(void*, unsigned long long*)+0x1a>
c001dd04:	b8 04 00 00 00       	mov    eax,0x4
c001dd09:	c3                   	ret    
c001dd0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dd0e:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001dd11:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001dd14:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd18:	89 01                	mov    DWORD PTR [ecx],eax
c001dd1a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001dd1d:	b8 00 00 00 00       	mov    eax,0x0
c001dd22:	c3                   	ret    
c001dd23:	90                   	nop

c001dd24 <FAT::stat(void*, unsigned long long*)>:
c001dd24:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001dd29:	75 06                	jne    c001dd31 <FAT::stat(void*, unsigned long long*)+0xd>
c001dd2b:	b8 04 00 00 00       	mov    eax,0x4
c001dd30:	c3                   	ret    
c001dd31:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dd36:	75 06                	jne    c001dd3e <FAT::stat(void*, unsigned long long*)+0x1a>
c001dd38:	b8 04 00 00 00       	mov    eax,0x4
c001dd3d:	c3                   	ret    
c001dd3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001dd42:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001dd45:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001dd48:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd4c:	89 01                	mov    DWORD PTR [ecx],eax
c001dd4e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001dd51:	b8 00 00 00 00       	mov    eax,0x0
c001dd56:	c3                   	ret    
c001dd57:	90                   	nop

c001dd58 <FAT::~FAT()>:
c001dd58:	83 ec 0c             	sub    esp,0xc
c001dd5b:	ba 18 8b 02 c0       	mov    edx,0xc0028b18
c001dd60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd64:	89 10                	mov    DWORD PTR [eax],edx
c001dd66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd6a:	83 ec 0c             	sub    esp,0xc
c001dd6d:	50                   	push   eax
c001dd6e:	e8 05 48 ff ff       	call   c0012578 <Filesystem::~Filesystem()>
c001dd73:	83 c4 10             	add    esp,0x10
c001dd76:	90                   	nop
c001dd77:	83 c4 0c             	add    esp,0xc
c001dd7a:	c3                   	ret    
c001dd7b:	90                   	nop

c001dd7c <FAT::~FAT()>:
c001dd7c:	83 ec 0c             	sub    esp,0xc
c001dd7f:	83 ec 0c             	sub    esp,0xc
c001dd82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd86:	e8 cd ff ff ff       	call   c001dd58 <FAT::~FAT()>
c001dd8b:	83 c4 10             	add    esp,0x10
c001dd8e:	83 ec 08             	sub    esp,0x8
c001dd91:	6a 08                	push   0x8
c001dd93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd97:	e8 d3 43 ff ff       	call   c001216f <operator delete(void*, unsigned long)>
c001dd9c:	83 c4 10             	add    esp,0x10
c001dd9f:	83 c4 0c             	add    esp,0xc
c001dda2:	c3                   	ret    
c001dda3:	90                   	nop

c001dda4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001dda4:	83 ec 1c             	sub    esp,0x1c
c001dda7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001ddae:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001ddb3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ddb7:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001ddbe:	83 f8 ff             	cmp    eax,0xffffffff
c001ddc1:	75 34                	jne    c001ddf7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001ddc3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ddc7:	88 c2                	mov    dl,al
c001ddc9:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001ddce:	01 d0                	add    eax,edx
c001ddd0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ddd4:	8b 15 e0 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b8e0
c001ddda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ddde:	89 14 85 00 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4700],edx
c001dde5:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001ddea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ddee:	89 14 85 80 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4680],edx
c001ddf5:	eb 17                	jmp    c001de0e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001ddf7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ddfb:	88 c2                	mov    dl,al
c001ddfd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001de01:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001de08:	01 d0                	add    eax,edx
c001de0a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001de0e:	83 ec 04             	sub    esp,0x4
c001de11:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001de15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001de19:	8d 44 24 15          	lea    eax,[esp+0x15]
c001de1d:	50                   	push   eax
c001de1e:	e8 06 8d fe ff       	call   c0006b29 <f_getlabel>
c001de23:	83 c4 10             	add    esp,0x10
c001de26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de2a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001de2f:	75 07                	jne    c001de38 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001de31:	b8 00 00 00 00       	mov    eax,0x0
c001de36:	eb 05                	jmp    c001de3d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001de38:	b8 01 00 00 00       	mov    eax,0x1
c001de3d:	83 c4 1c             	add    esp,0x1c
c001de40:	c3                   	ret    
c001de41:	90                   	nop

c001de42 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001de42:	57                   	push   edi
c001de43:	83 ec 58             	sub    esp,0x58
c001de46:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001de4e:	8d 54 24 10          	lea    edx,[esp+0x10]
c001de52:	b9 0f 00 00 00       	mov    ecx,0xf
c001de57:	b8 00 00 00 00       	mov    eax,0x0
c001de5c:	fc                   	cld    
c001de5d:	89 d7                	mov    edi,edx
c001de5f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001de61:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001de65:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001de6c:	83 f8 ff             	cmp    eax,0xffffffff
c001de6f:	75 34                	jne    c001dea5 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001de71:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001de75:	88 c2                	mov    dl,al
c001de77:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001de7c:	01 d0                	add    eax,edx
c001de7e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001de82:	8b 15 e0 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b8e0
c001de88:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001de8c:	89 14 85 00 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4700],edx
c001de93:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001de98:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001de9c:	89 14 85 80 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4680],edx
c001dea3:	eb 17                	jmp    c001debc <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001dea5:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001dea9:	88 c2                	mov    dl,al
c001deab:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001deaf:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001deb6:	01 d0                	add    eax,edx
c001deb8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001debc:	83 ec 08             	sub    esp,0x8
c001debf:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001dec3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001dec7:	50                   	push   eax
c001dec8:	e8 55 29 fe ff       	call   c0000822 <strcat>
c001decd:	83 c4 10             	add    esp,0x10
c001ded0:	83 ec 0c             	sub    esp,0xc
c001ded3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ded7:	50                   	push   eax
c001ded8:	e8 3a 8e fe ff       	call   c0006d17 <f_setlabel>
c001dedd:	83 c4 10             	add    esp,0x10
c001dee0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dee4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001dee9:	75 07                	jne    c001def2 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001deeb:	b8 00 00 00 00       	mov    eax,0x0
c001def0:	eb 05                	jmp    c001def7 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001def2:	b8 01 00 00 00       	mov    eax,0x1
c001def7:	83 c4 58             	add    esp,0x58
c001defa:	5f                   	pop    edi
c001defb:	c3                   	ret    

c001defc <FAT::format(LogicalDisk*, int, char const*, int)>:
c001defc:	83 ec 2c             	sub    esp,0x2c
c001deff:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001df07:	83 ec 08             	sub    esp,0x8
c001df0a:	68 b8 8a 02 c0       	push   0xc0028ab8
c001df0f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df13:	e8 a4 28 fe ff       	call   c00007bc <strcmp>
c001df18:	83 c4 10             	add    esp,0x10
c001df1b:	85 c0                	test   eax,eax
c001df1d:	0f 94 c0             	sete   al
c001df20:	84 c0                	test   al,al
c001df22:	74 0d                	je     c001df31 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001df24:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001df2c:	e9 a6 00 00 00       	jmp    c001dfd7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001df31:	83 ec 08             	sub    esp,0x8
c001df34:	68 aa 8a 02 c0       	push   0xc0028aaa
c001df39:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df3d:	e8 7a 28 fe ff       	call   c00007bc <strcmp>
c001df42:	83 c4 10             	add    esp,0x10
c001df45:	85 c0                	test   eax,eax
c001df47:	0f 94 c0             	sete   al
c001df4a:	84 c0                	test   al,al
c001df4c:	74 0a                	je     c001df58 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001df4e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001df56:	eb 7f                	jmp    c001dfd7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001df58:	83 ec 08             	sub    esp,0x8
c001df5b:	68 b0 8a 02 c0       	push   0xc0028ab0
c001df60:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df64:	e8 53 28 fe ff       	call   c00007bc <strcmp>
c001df69:	83 c4 10             	add    esp,0x10
c001df6c:	85 c0                	test   eax,eax
c001df6e:	0f 94 c0             	sete   al
c001df71:	84 c0                	test   al,al
c001df73:	74 0a                	je     c001df7f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001df75:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001df7d:	eb 58                	jmp    c001dfd7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001df7f:	83 ec 08             	sub    esp,0x8
c001df82:	68 0c 5e 02 c0       	push   0xc0025e0c
c001df87:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001df8b:	e8 2c 28 fe ff       	call   c00007bc <strcmp>
c001df90:	83 c4 10             	add    esp,0x10
c001df93:	85 c0                	test   eax,eax
c001df95:	0f 94 c0             	sete   al
c001df98:	84 c0                	test   al,al
c001df9a:	74 0a                	je     c001dfa6 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001df9c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001dfa4:	eb 31                	jmp    c001dfd7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001dfa6:	83 ec 08             	sub    esp,0x8
c001dfa9:	68 b6 8a 02 c0       	push   0xc0028ab6
c001dfae:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dfb2:	e8 05 28 fe ff       	call   c00007bc <strcmp>
c001dfb7:	83 c4 10             	add    esp,0x10
c001dfba:	85 c0                	test   eax,eax
c001dfbc:	0f 94 c0             	sete   al
c001dfbf:	84 c0                	test   al,al
c001dfc1:	74 0a                	je     c001dfcd <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001dfc3:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001dfcb:	eb 0a                	jmp    c001dfd7 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001dfcd:	b8 08 00 00 00       	mov    eax,0x8
c001dfd2:	e9 04 01 00 00       	jmp    c001e0db <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001dfd7:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001dfde:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001dfe3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dfe7:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001dfee:	83 f8 ff             	cmp    eax,0xffffffff
c001dff1:	75 34                	jne    c001e027 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001dff3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001dff7:	88 c2                	mov    dl,al
c001dff9:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001dffe:	01 d0                	add    eax,edx
c001e000:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e004:	8b 15 e0 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b8e0
c001e00a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e00e:	89 14 85 00 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4700],edx
c001e015:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e01a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e01e:	89 14 85 80 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4680],edx
c001e025:	eb 17                	jmp    c001e03e <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001e027:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001e02b:	88 c2                	mov    dl,al
c001e02d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e031:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001e038:	01 d0                	add    eax,edx
c001e03a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001e03e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e042:	88 04 24             	mov    BYTE PTR [esp],al
c001e045:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001e049:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e04d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001e055:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001e05a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e062:	83 ec 0c             	sub    esp,0xc
c001e065:	68 00 20 00 00       	push   0x2000
c001e06a:	e8 d7 10 ff ff       	call   c000f146 <malloc>
c001e06f:	83 c4 10             	add    esp,0x10
c001e072:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e076:	68 00 20 00 00       	push   0x2000
c001e07b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e07f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e083:	50                   	push   eax
c001e084:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001e088:	50                   	push   eax
c001e089:	e8 d4 90 fe ff       	call   c0007162 <f_mkfs>
c001e08e:	83 c4 10             	add    esp,0x10
c001e091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e095:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e09a:	75 07                	jne    c001e0a3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001e09c:	b8 00 00 00 00       	mov    eax,0x0
c001e0a1:	eb 38                	jmp    c001e0db <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e0a3:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001e0a8:	75 17                	jne    c001e0c1 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001e0aa:	83 ec 0c             	sub    esp,0xc
c001e0ad:	68 e8 8a 02 c0       	push   0xc0028ae8
c001e0b2:	e8 98 41 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001e0b7:	83 c4 10             	add    esp,0x10
c001e0ba:	b8 09 00 00 00       	mov    eax,0x9
c001e0bf:	eb 1a                	jmp    c001e0db <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001e0c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e0c5:	83 ec 08             	sub    esp,0x8
c001e0c8:	50                   	push   eax
c001e0c9:	68 bc 8a 02 c0       	push   0xc0028abc
c001e0ce:	e8 7c 41 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001e0d3:	83 c4 10             	add    esp,0x10
c001e0d6:	b8 01 00 00 00       	mov    eax,0x1
c001e0db:	83 c4 2c             	add    esp,0x2c
c001e0de:	c3                   	ret    
c001e0df:	90                   	nop

c001e0e0 <FAT::tryMount(LogicalDisk*, int)>:
c001e0e0:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001e0e6:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e0eb:	83 f8 14             	cmp    eax,0x14
c001e0ee:	75 17                	jne    c001e107 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001e0f0:	83 ec 0c             	sub    esp,0xc
c001e0f3:	68 ce 8a 02 c0       	push   0xc0028ace
c001e0f8:	e8 f0 a8 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c001e0fd:	83 c4 10             	add    esp,0x10
c001e100:	b0 00                	mov    al,0x0
c001e102:	e9 d7 01 00 00       	jmp    c001e2de <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e107:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001e10e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e114:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e11a:	3d 00 02 00 00       	cmp    eax,0x200
c001e11f:	74 07                	je     c001e128 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001e121:	b0 00                	mov    al,0x0
c001e123:	e9 b6 01 00 00       	jmp    c001e2de <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e128:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001e130:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e137:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001e13e:	83 f8 ff             	cmp    eax,0xffffffff
c001e141:	74 07                	je     c001e14a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001e143:	b0 01                	mov    al,0x1
c001e145:	e9 94 01 00 00       	jmp    c001e2de <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e14a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001e154:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001e15c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001e163:	88 c2                	mov    dl,al
c001e165:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e16a:	01 d0                	add    eax,edx
c001e16c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001e173:	8b 15 e0 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b8e0
c001e179:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001e180:	89 14 85 00 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4700],edx
c001e187:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e18c:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001e193:	89 14 85 80 b9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4680],edx
c001e19a:	83 ec 0c             	sub    esp,0xc
c001e19d:	68 54 02 00 00       	push   0x254
c001e1a2:	e8 9f 0f ff ff       	call   c000f146 <malloc>
c001e1a7:	83 c4 10             	add    esp,0x10
c001e1aa:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001e1b1:	83 ec 04             	sub    esp,0x4
c001e1b4:	6a 00                	push   0x0
c001e1b6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e1bd:	50                   	push   eax
c001e1be:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e1c5:	e8 56 6b fe ff       	call   c0004d20 <f_mount>
c001e1ca:	83 c4 10             	add    esp,0x10
c001e1cd:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e1d4:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001e1dc:	74 19                	je     c001e1f7 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001e1de:	83 ec 0c             	sub    esp,0xc
c001e1e1:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e1e8:	e8 79 0f ff ff       	call   c000f166 <rfree>
c001e1ed:	83 c4 10             	add    esp,0x10
c001e1f0:	b0 00                	mov    al,0x0
c001e1f2:	e9 e7 00 00 00       	jmp    c001e2de <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e1f7:	83 ec 04             	sub    esp,0x4
c001e1fa:	68 00 01 00 00       	push   0x100
c001e1ff:	6a 00                	push   0x0
c001e201:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e208:	50                   	push   eax
c001e209:	e8 be 24 fe ff       	call   c00006cc <memset>
c001e20e:	83 c4 10             	add    esp,0x10
c001e211:	83 ec 08             	sub    esp,0x8
c001e214:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e21b:	50                   	push   eax
c001e21c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e223:	50                   	push   eax
c001e224:	e8 f9 25 fe ff       	call   c0000822 <strcat>
c001e229:	83 c4 10             	add    esp,0x10
c001e22c:	83 ec 08             	sub    esp,0x8
c001e22f:	68 dc 8a 02 c0       	push   0xc0028adc
c001e234:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001e23b:	50                   	push   eax
c001e23c:	e8 e1 25 fe ff       	call   c0000822 <strcat>
c001e241:	83 c4 10             	add    esp,0x10
c001e244:	83 ec 04             	sub    esp,0x4
c001e247:	6a 01                	push   0x1
c001e249:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001e250:	50                   	push   eax
c001e251:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e255:	50                   	push   eax
c001e256:	e8 27 6b fe ff       	call   c0004d82 <f_open>
c001e25b:	83 c4 10             	add    esp,0x10
c001e25e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001e265:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001e26c:	85 c0                	test   eax,eax
c001e26e:	74 0a                	je     c001e27a <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001e270:	78 2d                	js     c001e29f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e272:	83 e8 04             	sub    eax,0x4
c001e275:	83 f8 01             	cmp    eax,0x1
c001e278:	77 25                	ja     c001e29f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001e27a:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001e282:	83 ec 0c             	sub    esp,0xc
c001e285:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e289:	50                   	push   eax
c001e28a:	e8 45 76 fe ff       	call   c00058d4 <f_close>
c001e28f:	83 c4 10             	add    esp,0x10
c001e292:	90                   	nop
c001e293:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001e29b:	74 3a                	je     c001e2d7 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001e29d:	eb 2d                	jmp    c001e2cc <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001e29f:	83 ec 0c             	sub    esp,0xc
c001e2a2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001e2a9:	e8 b8 0e ff ff       	call   c000f166 <rfree>
c001e2ae:	83 c4 10             	add    esp,0x10
c001e2b1:	83 ec 04             	sub    esp,0x4
c001e2b4:	6a 00                	push   0x0
c001e2b6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001e2bd:	50                   	push   eax
c001e2be:	6a 00                	push   0x0
c001e2c0:	e8 5b 6a fe ff       	call   c0004d20 <f_mount>
c001e2c5:	83 c4 10             	add    esp,0x10
c001e2c8:	b0 00                	mov    al,0x0
c001e2ca:	eb 12                	jmp    c001e2de <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001e2cc:	a1 e0 b8 02 c0       	mov    eax,ds:0xc002b8e0
c001e2d1:	40                   	inc    eax
c001e2d2:	a3 e0 b8 02 c0       	mov    ds:0xc002b8e0,eax
c001e2d7:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001e2de:	81 c4 6c 03 00 00    	add    esp,0x36c
c001e2e4:	c3                   	ret    
c001e2e5:	90                   	nop

c001e2e6 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001e2e6:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001e2ec:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001e2f4:	74 0a                	je     c001e300 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001e2f6:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001e2fe:	75 0a                	jne    c001e30a <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001e300:	b8 04 00 00 00       	mov    eax,0x4
c001e305:	e9 db 00 00 00       	jmp    c001e3e5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e30a:	83 ec 08             	sub    esp,0x8
c001e30d:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e314:	50                   	push   eax
c001e315:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001e31c:	e8 bd 7b fe ff       	call   c0005ede <f_readdir>
c001e321:	83 c4 10             	add    esp,0x10
c001e324:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001e32b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001e331:	83 ec 0c             	sub    esp,0xc
c001e334:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001e33b:	83 c0 1a             	add    eax,0x1a
c001e33e:	50                   	push   eax
c001e33f:	e8 a5 23 fe ff       	call   c00006e9 <strlen>
c001e344:	83 c4 10             	add    esp,0x10
c001e347:	ba 00 00 00 00       	mov    edx,0x0
c001e34c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e350:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e354:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001e35b:	0f b6 c0             	movzx  eax,al
c001e35e:	83 e0 10             	and    eax,0x10
c001e361:	74 07                	je     c001e36a <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001e363:	b8 02 00 00 00       	mov    eax,0x2
c001e368:	eb 05                	jmp    c001e36f <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001e36a:	b8 01 00 00 00       	mov    eax,0x1
c001e36f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e373:	83 ec 08             	sub    esp,0x8
c001e376:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001e37d:	83 c0 1a             	add    eax,0x1a
c001e380:	50                   	push   eax
c001e381:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001e385:	83 c0 10             	add    eax,0x10
c001e388:	50                   	push   eax
c001e389:	e8 dd 23 fe ff       	call   c000076b <strcpy>
c001e38e:	83 c4 10             	add    esp,0x10
c001e391:	83 ec 04             	sub    esp,0x4
c001e394:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001e39b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e39f:	50                   	push   eax
c001e3a0:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001e3a7:	e8 ea 22 fe ff       	call   c0000696 <memcpy>
c001e3ac:	83 c4 10             	add    esp,0x10
c001e3af:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001e3b6:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001e3bc:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001e3c3:	84 c0                	test   al,al
c001e3c5:	75 07                	jne    c001e3ce <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001e3c7:	b8 07 00 00 00       	mov    eax,0x7
c001e3cc:	eb 17                	jmp    c001e3e5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e3ce:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001e3d5:	85 c0                	test   eax,eax
c001e3d7:	75 07                	jne    c001e3e0 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001e3d9:	b8 00 00 00 00       	mov    eax,0x0
c001e3de:	eb 05                	jmp    c001e3e5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001e3e0:	b8 01 00 00 00       	mov    eax,0x1
c001e3e5:	81 c4 3c 02 00 00    	add    esp,0x23c
c001e3eb:	c3                   	ret    

c001e3ec <FAT::read(void*, unsigned long, void*, int*)>:
c001e3ec:	83 ec 1c             	sub    esp,0x1c
c001e3ef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e3f4:	74 07                	je     c001e3fd <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001e3f6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e3fb:	75 07                	jne    c001e404 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001e3fd:	b8 04 00 00 00       	mov    eax,0x4
c001e402:	eb 3d                	jmp    c001e441 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e404:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e408:	50                   	push   eax
c001e409:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e40d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e411:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e415:	e8 a4 6d fe ff       	call   c00051be <f_read>
c001e41a:	83 c4 10             	add    esp,0x10
c001e41d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e421:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e425:	89 c2                	mov    edx,eax
c001e427:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e42b:	89 10                	mov    DWORD PTR [eax],edx
c001e42d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e431:	85 c0                	test   eax,eax
c001e433:	75 07                	jne    c001e43c <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001e435:	b8 00 00 00 00       	mov    eax,0x0
c001e43a:	eb 05                	jmp    c001e441 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001e43c:	b8 01 00 00 00       	mov    eax,0x1
c001e441:	83 c4 1c             	add    esp,0x1c
c001e444:	c3                   	ret    
c001e445:	90                   	nop

c001e446 <FAT::write(void*, unsigned long, void*, int*)>:
c001e446:	83 ec 1c             	sub    esp,0x1c
c001e449:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e44e:	74 07                	je     c001e457 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001e450:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001e455:	75 07                	jne    c001e45e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001e457:	b8 04 00 00 00       	mov    eax,0x4
c001e45c:	eb 3d                	jmp    c001e49b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001e45e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e462:	50                   	push   eax
c001e463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e467:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e46b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e46f:	e8 ca 6f fe ff       	call   c000543e <f_write>
c001e474:	83 c4 10             	add    esp,0x10
c001e477:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e47b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e47f:	89 c2                	mov    edx,eax
c001e481:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e485:	89 10                	mov    DWORD PTR [eax],edx
c001e487:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e48b:	85 c0                	test   eax,eax
c001e48d:	75 07                	jne    c001e496 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001e48f:	b8 00 00 00 00       	mov    eax,0x0
c001e494:	eb 05                	jmp    c001e49b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001e496:	b8 01 00 00 00       	mov    eax,0x1
c001e49b:	83 c4 1c             	add    esp,0x1c
c001e49e:	c3                   	ret    
c001e49f:	90                   	nop

c001e4a0 <FAT::close(void*)>:
c001e4a0:	83 ec 1c             	sub    esp,0x1c
c001e4a3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e4a8:	75 07                	jne    c001e4b1 <FAT::close(void*)+0x11>
c001e4aa:	b8 04 00 00 00       	mov    eax,0x4
c001e4af:	eb 36                	jmp    c001e4e7 <FAT::close(void*)+0x47>
c001e4b1:	83 ec 0c             	sub    esp,0xc
c001e4b4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e4b8:	e8 17 74 fe ff       	call   c00058d4 <f_close>
c001e4bd:	83 c4 10             	add    esp,0x10
c001e4c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e4c4:	83 ec 0c             	sub    esp,0xc
c001e4c7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e4cb:	e8 86 0c ff ff       	call   c000f156 <free>
c001e4d0:	83 c4 10             	add    esp,0x10
c001e4d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e4d7:	85 c0                	test   eax,eax
c001e4d9:	75 07                	jne    c001e4e2 <FAT::close(void*)+0x42>
c001e4db:	b8 00 00 00 00       	mov    eax,0x0
c001e4e0:	eb 05                	jmp    c001e4e7 <FAT::close(void*)+0x47>
c001e4e2:	b8 01 00 00 00       	mov    eax,0x1
c001e4e7:	83 c4 1c             	add    esp,0x1c
c001e4ea:	c3                   	ret    
c001e4eb:	90                   	nop

c001e4ec <FAT::closeDir(void*)>:
c001e4ec:	83 ec 1c             	sub    esp,0x1c
c001e4ef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e4f4:	75 07                	jne    c001e4fd <FAT::closeDir(void*)+0x11>
c001e4f6:	b8 04 00 00 00       	mov    eax,0x4
c001e4fb:	eb 36                	jmp    c001e533 <FAT::closeDir(void*)+0x47>
c001e4fd:	83 ec 0c             	sub    esp,0xc
c001e500:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e504:	e8 b3 79 fe ff       	call   c0005ebc <f_closedir>
c001e509:	83 c4 10             	add    esp,0x10
c001e50c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e510:	83 ec 0c             	sub    esp,0xc
c001e513:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e517:	e8 3a 0c ff ff       	call   c000f156 <free>
c001e51c:	83 c4 10             	add    esp,0x10
c001e51f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e523:	85 c0                	test   eax,eax
c001e525:	75 07                	jne    c001e52e <FAT::closeDir(void*)+0x42>
c001e527:	b8 00 00 00 00       	mov    eax,0x0
c001e52c:	eb 05                	jmp    c001e533 <FAT::closeDir(void*)+0x47>
c001e52e:	b8 01 00 00 00       	mov    eax,0x1
c001e533:	83 c4 1c             	add    esp,0x1c
c001e536:	c3                   	ret    
c001e537:	90                   	nop

c001e538 <FAT::seek(void*, unsigned long long)>:
c001e538:	83 ec 2c             	sub    esp,0x2c
c001e53b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e53f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e543:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e547:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e54b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001e550:	75 07                	jne    c001e559 <FAT::seek(void*, unsigned long long)+0x21>
c001e552:	b8 04 00 00 00       	mov    eax,0x4
c001e557:	eb 2f                	jmp    c001e588 <FAT::seek(void*, unsigned long long)+0x50>
c001e559:	83 ec 04             	sub    esp,0x4
c001e55c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e560:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e564:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e568:	e8 96 73 fe ff       	call   c0005903 <f_lseek>
c001e56d:	83 c4 10             	add    esp,0x10
c001e570:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e574:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e578:	85 c0                	test   eax,eax
c001e57a:	75 07                	jne    c001e583 <FAT::seek(void*, unsigned long long)+0x4b>
c001e57c:	b8 00 00 00 00       	mov    eax,0x0
c001e581:	eb 05                	jmp    c001e588 <FAT::seek(void*, unsigned long long)+0x50>
c001e583:	b8 01 00 00 00       	mov    eax,0x1
c001e588:	83 c4 2c             	add    esp,0x2c
c001e58b:	c3                   	ret    

c001e58c <fatWrapperReadDisk>:
c001e58c:	83 ec 1c             	sub    esp,0x1c
c001e58f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e593:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e597:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e59b:	89 04 24             	mov    DWORD PTR [esp],eax
c001e59e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e5a6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e5ab:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c001e5b2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e5b6:	83 ec 0c             	sub    esp,0xc
c001e5b9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e5bd:	52                   	push   edx
c001e5be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e5c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e5c6:	50                   	push   eax
c001e5c7:	e8 ae 72 ff ff       	call   c001587a <LogicalDisk::read(unsigned long long, int, void*)>
c001e5cc:	83 c4 20             	add    esp,0x20
c001e5cf:	83 c4 1c             	add    esp,0x1c
c001e5d2:	c3                   	ret    

c001e5d3 <fatWrapperWriteDisk>:
c001e5d3:	83 ec 1c             	sub    esp,0x1c
c001e5d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5da:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e5de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e5e2:	89 04 24             	mov    DWORD PTR [esp],eax
c001e5e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e5e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e5ed:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e5f2:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c001e5f9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e5fd:	83 ec 0c             	sub    esp,0xc
c001e600:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e604:	52                   	push   edx
c001e605:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e609:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e60d:	50                   	push   eax
c001e60e:	e8 d3 72 ff ff       	call   c00158e6 <LogicalDisk::write(unsigned long long, int, void*)>
c001e613:	83 c4 20             	add    esp,0x20
c001e616:	83 c4 1c             	add    esp,0x1c
c001e619:	c3                   	ret    

c001e61a <fatWrapperIoctl>:
c001e61a:	53                   	push   ebx
c001e61b:	83 ec 28             	sub    esp,0x28
c001e61e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e622:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e626:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001e62a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e62e:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001e633:	75 31                	jne    c001e666 <fatWrapperIoctl+0x4c>
c001e635:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e639:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e63d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e642:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c001e649:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e64f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e655:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e659:	66 89 02             	mov    WORD PTR [edx],ax
c001e65c:	b8 00 00 00 00       	mov    eax,0x0
c001e661:	e9 b2 00 00 00       	jmp    c001e718 <fatWrapperIoctl+0xfe>
c001e666:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001e66b:	75 6a                	jne    c001e6d7 <fatWrapperIoctl+0xbd>
c001e66d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e671:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e675:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e67a:	8b 04 85 00 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5600]
c001e681:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001e687:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001e68d:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001e693:	89 c8                	mov    eax,ecx
c001e695:	89 da                	mov    edx,ebx
c001e697:	0f a4 c2 0a          	shld   edx,eax,0xa
c001e69b:	c1 e0 0a             	shl    eax,0xa
c001e69e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001e6a3:	8b 0c 8d 00 aa 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5600]
c001e6aa:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001e6b0:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001e6b6:	89 cb                	mov    ebx,ecx
c001e6b8:	c1 fb 1f             	sar    ebx,0x1f
c001e6bb:	53                   	push   ebx
c001e6bc:	51                   	push   ecx
c001e6bd:	52                   	push   edx
c001e6be:	50                   	push   eax
c001e6bf:	e8 98 4c 00 00       	call   c002335c <__udivdi3>
c001e6c4:	83 c4 10             	add    esp,0x10
c001e6c7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001e6cb:	89 01                	mov    DWORD PTR [ecx],eax
c001e6cd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e6d0:	b8 00 00 00 00       	mov    eax,0x0
c001e6d5:	eb 41                	jmp    c001e718 <fatWrapperIoctl+0xfe>
c001e6d7:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001e6dc:	75 07                	jne    c001e6e5 <fatWrapperIoctl+0xcb>
c001e6de:	b8 00 00 00 00       	mov    eax,0x0
c001e6e3:	eb 33                	jmp    c001e718 <fatWrapperIoctl+0xfe>
c001e6e5:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001e6ea:	75 19                	jne    c001e705 <fatWrapperIoctl+0xeb>
c001e6ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e6f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e6f4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e6f8:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e6fe:	b8 00 00 00 00       	mov    eax,0x0
c001e703:	eb 13                	jmp    c001e718 <fatWrapperIoctl+0xfe>
c001e705:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001e70a:	75 07                	jne    c001e713 <fatWrapperIoctl+0xf9>
c001e70c:	b8 00 00 00 00       	mov    eax,0x0
c001e711:	eb 05                	jmp    c001e718 <fatWrapperIoctl+0xfe>
c001e713:	b8 04 00 00 00       	mov    eax,0x4
c001e718:	83 c4 28             	add    esp,0x28
c001e71b:	5b                   	pop    ebx
c001e71c:	c3                   	ret    
c001e71d:	90                   	nop

c001e71e <FAT::FAT()>:
c001e71e:	83 ec 1c             	sub    esp,0x1c
c001e721:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e725:	83 ec 0c             	sub    esp,0xc
c001e728:	50                   	push   eax
c001e729:	e8 26 3e ff ff       	call   c0012554 <Filesystem::Filesystem()>
c001e72e:	83 c4 10             	add    esp,0x10
c001e731:	ba 18 8b 02 c0       	mov    edx,0xc0028b18
c001e736:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e73a:	89 10                	mov    DWORD PTR [eax],edx
c001e73c:	c7 05 e0 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b8e0,0x0
c001e746:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e74e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001e753:	7f 15                	jg     c001e76a <FAT::FAT()+0x4c>
c001e755:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e759:	c7 04 85 00 b9 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd4700],0xffffffff
c001e764:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e768:	eb e4                	jmp    c001e74e <FAT::FAT()+0x30>
c001e76a:	90                   	nop
c001e76b:	83 c4 1c             	add    esp,0x1c
c001e76e:	c3                   	ret    
c001e76f:	90                   	nop

c001e770 <FAT::fixFilepath(char*)>:
c001e770:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e774:	8a 00                	mov    al,BYTE PTR [eax]
c001e776:	3c 40                	cmp    al,0x40
c001e778:	7e 2c                	jle    c001e7a6 <FAT::fixFilepath(char*)+0x36>
c001e77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e77e:	8a 00                	mov    al,BYTE PTR [eax]
c001e780:	83 e8 41             	sub    eax,0x41
c001e783:	88 c2                	mov    dl,al
c001e785:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e789:	88 10                	mov    BYTE PTR [eax],dl
c001e78b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e78f:	8a 00                	mov    al,BYTE PTR [eax]
c001e791:	0f be c0             	movsx  eax,al
c001e794:	8b 04 85 00 b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4700]
c001e79b:	83 c0 30             	add    eax,0x30
c001e79e:	88 c2                	mov    dl,al
c001e7a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e7a4:	88 10                	mov    BYTE PTR [eax],dl
c001e7a6:	90                   	nop
c001e7a7:	c3                   	ret    

c001e7a8 <FAT::open(char const*, void**, FileOpenMode)>:
c001e7a8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e7ae:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001e7b6:	74 0a                	je     c001e7c2 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001e7b8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001e7c0:	75 0a                	jne    c001e7cc <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001e7c2:	b8 04 00 00 00       	mov    eax,0x4
c001e7c7:	e9 fd 00 00 00       	jmp    c001e8c9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001e7cc:	83 ec 08             	sub    esp,0x8
c001e7cf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e7d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e7da:	50                   	push   eax
c001e7db:	e8 8b 1f fe ff       	call   c000076b <strcpy>
c001e7e0:	83 c4 10             	add    esp,0x10
c001e7e3:	83 ec 08             	sub    esp,0x8
c001e7e6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001e7ea:	50                   	push   eax
c001e7eb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e7f2:	e8 79 ff ff ff       	call   c001e770 <FAT::fixFilepath(char*)>
c001e7f7:	83 c4 10             	add    esp,0x10
c001e7fa:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001e802:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e809:	83 e0 01             	and    eax,0x1
c001e80c:	74 08                	je     c001e816 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001e80e:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001e816:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e81d:	83 e0 04             	and    eax,0x4
c001e820:	74 10                	je     c001e832 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001e822:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001e82a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001e832:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e839:	83 e0 02             	and    eax,0x2
c001e83c:	74 08                	je     c001e846 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001e83e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001e846:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e84d:	83 e0 08             	and    eax,0x8
c001e850:	74 08                	je     c001e85a <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001e852:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001e85a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001e861:	83 e0 10             	and    eax,0x10
c001e864:	74 08                	je     c001e86e <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001e866:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001e86e:	83 ec 0c             	sub    esp,0xc
c001e871:	68 50 02 00 00       	push   0x250
c001e876:	e8 cb 08 ff ff       	call   c000f146 <malloc>
c001e87b:	83 c4 10             	add    esp,0x10
c001e87e:	89 c2                	mov    edx,eax
c001e880:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e887:	89 10                	mov    DWORD PTR [eax],edx
c001e889:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001e891:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e898:	8b 00                	mov    eax,DWORD PTR [eax]
c001e89a:	83 ec 04             	sub    esp,0x4
c001e89d:	52                   	push   edx
c001e89e:	8d 54 24 10          	lea    edx,[esp+0x10]
c001e8a2:	52                   	push   edx
c001e8a3:	50                   	push   eax
c001e8a4:	e8 d9 64 fe ff       	call   c0004d82 <f_open>
c001e8a9:	83 c4 10             	add    esp,0x10
c001e8ac:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001e8b3:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001e8bb:	74 07                	je     c001e8c4 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c001e8bd:	b8 01 00 00 00       	mov    eax,0x1
c001e8c2:	eb 05                	jmp    c001e8c9 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001e8c4:	b8 00 00 00 00       	mov    eax,0x0
c001e8c9:	81 c4 1c 01 00 00    	add    esp,0x11c
c001e8cf:	c3                   	ret    

c001e8d0 <FAT::openDir(char const*, void**)>:
c001e8d0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001e8d6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001e8de:	74 0a                	je     c001e8ea <FAT::openDir(char const*, void**)+0x1a>
c001e8e0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001e8e8:	75 07                	jne    c001e8f1 <FAT::openDir(char const*, void**)+0x21>
c001e8ea:	b8 04 00 00 00       	mov    eax,0x4
c001e8ef:	eb 7d                	jmp    c001e96e <FAT::openDir(char const*, void**)+0x9e>
c001e8f1:	83 ec 08             	sub    esp,0x8
c001e8f4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e8fb:	8d 44 24 18          	lea    eax,[esp+0x18]
c001e8ff:	50                   	push   eax
c001e900:	e8 66 1e fe ff       	call   c000076b <strcpy>
c001e905:	83 c4 10             	add    esp,0x10
c001e908:	83 ec 08             	sub    esp,0x8
c001e90b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001e90f:	50                   	push   eax
c001e910:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001e917:	e8 54 fe ff ff       	call   c001e770 <FAT::fixFilepath(char*)>
c001e91c:	83 c4 10             	add    esp,0x10
c001e91f:	83 ec 0c             	sub    esp,0xc
c001e922:	6a 4c                	push   0x4c
c001e924:	e8 1d 08 ff ff       	call   c000f146 <malloc>
c001e929:	83 c4 10             	add    esp,0x10
c001e92c:	89 c2                	mov    edx,eax
c001e92e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e935:	89 10                	mov    DWORD PTR [eax],edx
c001e937:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001e93e:	8b 00                	mov    eax,DWORD PTR [eax]
c001e940:	83 ec 08             	sub    esp,0x8
c001e943:	8d 54 24 14          	lea    edx,[esp+0x14]
c001e947:	52                   	push   edx
c001e948:	50                   	push   eax
c001e949:	e8 6c 74 fe ff       	call   c0005dba <f_opendir>
c001e94e:	83 c4 10             	add    esp,0x10
c001e951:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001e958:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001e960:	74 07                	je     c001e969 <FAT::openDir(char const*, void**)+0x99>
c001e962:	b8 01 00 00 00       	mov    eax,0x1
c001e967:	eb 05                	jmp    c001e96e <FAT::openDir(char const*, void**)+0x9e>
c001e969:	b8 00 00 00 00       	mov    eax,0x0
c001e96e:	81 c4 1c 01 00 00    	add    esp,0x11c
c001e974:	c3                   	ret    
c001e975:	90                   	nop

c001e976 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001e976:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001e97c:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001e984:	75 0a                	jne    c001e990 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001e986:	b8 04 00 00 00       	mov    eax,0x4
c001e98b:	e9 c9 00 00 00       	jmp    c001ea59 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e990:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001e998:	75 0a                	jne    c001e9a4 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001e99a:	b8 04 00 00 00       	mov    eax,0x4
c001e99f:	e9 b5 00 00 00       	jmp    c001ea59 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e9a4:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001e9ac:	75 0a                	jne    c001e9b8 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001e9ae:	b8 04 00 00 00       	mov    eax,0x4
c001e9b3:	e9 a1 00 00 00       	jmp    c001ea59 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001e9b8:	83 ec 08             	sub    esp,0x8
c001e9bb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001e9c2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001e9c9:	50                   	push   eax
c001e9ca:	e8 9c 1d fe ff       	call   c000076b <strcpy>
c001e9cf:	83 c4 10             	add    esp,0x10
c001e9d2:	83 ec 08             	sub    esp,0x8
c001e9d5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001e9dc:	50                   	push   eax
c001e9dd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001e9e4:	e8 87 fd ff ff       	call   c001e770 <FAT::fixFilepath(char*)>
c001e9e9:	83 c4 10             	add    esp,0x10
c001e9ec:	83 ec 08             	sub    esp,0x8
c001e9ef:	8d 44 24 08          	lea    eax,[esp+0x8]
c001e9f3:	50                   	push   eax
c001e9f4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001e9fb:	50                   	push   eax
c001e9fc:	e8 78 75 fe ff       	call   c0005f79 <f_stat>
c001ea01:	83 c4 10             	add    esp,0x10
c001ea04:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ea0b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ea12:	85 c0                	test   eax,eax
c001ea14:	74 07                	je     c001ea1d <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001ea16:	83 f8 04             	cmp    eax,0x4
c001ea19:	74 32                	je     c001ea4d <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c001ea1b:	eb 37                	jmp    c001ea54 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c001ea1d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ea21:	0f b6 c0             	movzx  eax,al
c001ea24:	83 e0 10             	and    eax,0x10
c001ea27:	0f 95 c2             	setne  dl
c001ea2a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ea31:	88 10                	mov    BYTE PTR [eax],dl
c001ea33:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ea36:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ea3a:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ea41:	89 01                	mov    DWORD PTR [ecx],eax
c001ea43:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ea46:	b8 00 00 00 00       	mov    eax,0x0
c001ea4b:	eb 0c                	jmp    c001ea59 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ea4d:	b8 02 00 00 00       	mov    eax,0x2
c001ea52:	eb 05                	jmp    c001ea59 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c001ea54:	b8 01 00 00 00       	mov    eax,0x1
c001ea59:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ea5f:	c3                   	ret    

c001ea60 <FAT::unlink(char const*)>:
c001ea60:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ea66:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ea6e:	75 07                	jne    c001ea77 <FAT::unlink(char const*)+0x17>
c001ea70:	b8 04 00 00 00       	mov    eax,0x4
c001ea75:	eb 5c                	jmp    c001ead3 <FAT::unlink(char const*)+0x73>
c001ea77:	83 ec 08             	sub    esp,0x8
c001ea7a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ea81:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ea85:	50                   	push   eax
c001ea86:	e8 e0 1c fe ff       	call   c000076b <strcpy>
c001ea8b:	83 c4 10             	add    esp,0x10
c001ea8e:	83 ec 08             	sub    esp,0x8
c001ea91:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ea95:	50                   	push   eax
c001ea96:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ea9d:	e8 ce fc ff ff       	call   c001e770 <FAT::fixFilepath(char*)>
c001eaa2:	83 c4 10             	add    esp,0x10
c001eaa5:	83 ec 0c             	sub    esp,0xc
c001eaa8:	8d 44 24 18          	lea    eax,[esp+0x18]
c001eaac:	50                   	push   eax
c001eaad:	e8 19 78 fe ff       	call   c00062cb <f_unlink>
c001eab2:	83 c4 10             	add    esp,0x10
c001eab5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001eabc:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001eac3:	85 c0                	test   eax,eax
c001eac5:	75 07                	jne    c001eace <FAT::unlink(char const*)+0x6e>
c001eac7:	b8 00 00 00 00       	mov    eax,0x0
c001eacc:	eb 05                	jmp    c001ead3 <FAT::unlink(char const*)+0x73>
c001eace:	b8 01 00 00 00       	mov    eax,0x1
c001ead3:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ead9:	c3                   	ret    

c001eada <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001eada:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001eae0:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001eae7:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001eaee:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001eaf2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001eaf6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001eafe:	75 0a                	jne    c001eb0a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001eb00:	b8 04 00 00 00       	mov    eax,0x4
c001eb05:	e9 1c 01 00 00       	jmp    c001ec26 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001eb0a:	83 ec 08             	sub    esp,0x8
c001eb0d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001eb14:	8d 44 24 24          	lea    eax,[esp+0x24]
c001eb18:	50                   	push   eax
c001eb19:	e8 4d 1c fe ff       	call   c000076b <strcpy>
c001eb1e:	83 c4 10             	add    esp,0x10
c001eb21:	83 ec 08             	sub    esp,0x8
c001eb24:	8d 44 24 20          	lea    eax,[esp+0x20]
c001eb28:	50                   	push   eax
c001eb29:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001eb30:	e8 3b fc ff ff       	call   c001e770 <FAT::fixFilepath(char*)>
c001eb35:	83 c4 10             	add    esp,0x10
c001eb38:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001eb40:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001eb48:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb4d:	83 e0 01             	and    eax,0x1
c001eb50:	74 08                	je     c001eb5a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001eb52:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001eb5a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb5f:	83 e0 02             	and    eax,0x2
c001eb62:	74 08                	je     c001eb6c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c001eb64:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001eb6c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb71:	83 e0 04             	and    eax,0x4
c001eb74:	74 08                	je     c001eb7e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c001eb76:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001eb7e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001eb83:	83 e0 08             	and    eax,0x8
c001eb86:	74 08                	je     c001eb90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c001eb88:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001eb90:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001eb95:	83 e0 01             	and    eax,0x1
c001eb98:	74 08                	je     c001eba2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c001eb9a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001eba2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001eba7:	83 e0 02             	and    eax,0x2
c001ebaa:	74 08                	je     c001ebb4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c001ebac:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001ebb4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ebb9:	83 e0 04             	and    eax,0x4
c001ebbc:	74 08                	je     c001ebc6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c001ebbe:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001ebc6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ebcb:	83 e0 08             	and    eax,0x8
c001ebce:	74 08                	je     c001ebd8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c001ebd0:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ebd8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ebdf:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001ebe6:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001ebee:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001ebf6:	83 ec 04             	sub    esp,0x4
c001ebf9:	52                   	push   edx
c001ebfa:	50                   	push   eax
c001ebfb:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ebff:	50                   	push   eax
c001ec00:	e8 68 7d fe ff       	call   c000696d <f_chmod>
c001ec05:	83 c4 10             	add    esp,0x10
c001ec08:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ec0f:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ec16:	85 c0                	test   eax,eax
c001ec18:	75 07                	jne    c001ec21 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c001ec1a:	b8 00 00 00 00       	mov    eax,0x0
c001ec1f:	eb 05                	jmp    c001ec26 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c001ec21:	b8 01 00 00 00       	mov    eax,0x1
c001ec26:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ec2c:	c3                   	ret    
c001ec2d:	90                   	nop

c001ec2e <FAT::rename(char const*, char const*)>:
c001ec2e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ec34:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001ec3c:	74 0a                	je     c001ec48 <FAT::rename(char const*, char const*)+0x1a>
c001ec3e:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001ec46:	75 0a                	jne    c001ec52 <FAT::rename(char const*, char const*)+0x24>
c001ec48:	b8 04 00 00 00       	mov    eax,0x4
c001ec4d:	e9 98 00 00 00       	jmp    c001ecea <FAT::rename(char const*, char const*)+0xbc>
c001ec52:	83 ec 08             	sub    esp,0x8
c001ec55:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ec5c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ec63:	50                   	push   eax
c001ec64:	e8 02 1b fe ff       	call   c000076b <strcpy>
c001ec69:	83 c4 10             	add    esp,0x10
c001ec6c:	83 ec 08             	sub    esp,0x8
c001ec6f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001ec76:	50                   	push   eax
c001ec77:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ec7e:	e8 ed fa ff ff       	call   c001e770 <FAT::fixFilepath(char*)>
c001ec83:	83 c4 10             	add    esp,0x10
c001ec86:	83 ec 08             	sub    esp,0x8
c001ec89:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001ec90:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ec94:	50                   	push   eax
c001ec95:	e8 d1 1a fe ff       	call   c000076b <strcpy>
c001ec9a:	83 c4 10             	add    esp,0x10
c001ec9d:	83 ec 08             	sub    esp,0x8
c001eca0:	8d 44 24 14          	lea    eax,[esp+0x14]
c001eca4:	50                   	push   eax
c001eca5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001ecac:	e8 bf fa ff ff       	call   c001e770 <FAT::fixFilepath(char*)>
c001ecb1:	83 c4 10             	add    esp,0x10
c001ecb4:	83 ec 08             	sub    esp,0x8
c001ecb7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ecbb:	50                   	push   eax
c001ecbc:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001ecc3:	50                   	push   eax
c001ecc4:	e8 b1 79 fe ff       	call   c000667a <f_rename>
c001ecc9:	83 c4 10             	add    esp,0x10
c001eccc:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001ecd3:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001ecda:	85 c0                	test   eax,eax
c001ecdc:	75 07                	jne    c001ece5 <FAT::rename(char const*, char const*)+0xb7>
c001ecde:	b8 00 00 00 00       	mov    eax,0x0
c001ece3:	eb 05                	jmp    c001ecea <FAT::rename(char const*, char const*)+0xbc>
c001ece5:	b8 01 00 00 00       	mov    eax,0x1
c001ecea:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ecf0:	c3                   	ret    
c001ecf1:	90                   	nop

c001ecf2 <FAT::mkdir(char const*)>:
c001ecf2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ecf8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ed00:	75 07                	jne    c001ed09 <FAT::mkdir(char const*)+0x17>
c001ed02:	b8 04 00 00 00       	mov    eax,0x4
c001ed07:	eb 5c                	jmp    c001ed65 <FAT::mkdir(char const*)+0x73>
c001ed09:	83 ec 08             	sub    esp,0x8
c001ed0c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ed13:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ed17:	50                   	push   eax
c001ed18:	e8 4e 1a fe ff       	call   c000076b <strcpy>
c001ed1d:	83 c4 10             	add    esp,0x10
c001ed20:	83 ec 08             	sub    esp,0x8
c001ed23:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ed27:	50                   	push   eax
c001ed28:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ed2f:	e8 3c fa ff ff       	call   c001e770 <FAT::fixFilepath(char*)>
c001ed34:	83 c4 10             	add    esp,0x10
c001ed37:	83 ec 0c             	sub    esp,0xc
c001ed3a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ed3e:	50                   	push   eax
c001ed3f:	e8 0a 77 fe ff       	call   c000644e <f_mkdir>
c001ed44:	83 c4 10             	add    esp,0x10
c001ed47:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ed4e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ed55:	85 c0                	test   eax,eax
c001ed57:	75 07                	jne    c001ed60 <FAT::mkdir(char const*)+0x6e>
c001ed59:	b8 00 00 00 00       	mov    eax,0x0
c001ed5e:	eb 05                	jmp    c001ed65 <FAT::mkdir(char const*)+0x73>
c001ed60:	b8 01 00 00 00       	mov    eax,0x1
c001ed65:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ed6b:	c3                   	ret    

c001ed6c <FAT::exists(char const*)>:
c001ed6c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001ed72:	83 ec 08             	sub    esp,0x8
c001ed75:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ed7c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ed80:	50                   	push   eax
c001ed81:	e8 e5 19 fe ff       	call   c000076b <strcpy>
c001ed86:	83 c4 10             	add    esp,0x10
c001ed89:	83 ec 08             	sub    esp,0x8
c001ed8c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ed90:	50                   	push   eax
c001ed91:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ed98:	e8 d3 f9 ff ff       	call   c001e770 <FAT::fixFilepath(char*)>
c001ed9d:	83 c4 10             	add    esp,0x10
c001eda0:	83 ec 08             	sub    esp,0x8
c001eda3:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001edaa:	50                   	push   eax
c001edab:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001edaf:	50                   	push   eax
c001edb0:	e8 c4 71 fe ff       	call   c0005f79 <f_stat>
c001edb5:	83 c4 10             	add    esp,0x10
c001edb8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001edbf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001edc6:	85 c0                	test   eax,eax
c001edc8:	75 04                	jne    c001edce <FAT::exists(char const*)+0x62>
c001edca:	b0 01                	mov    al,0x1
c001edcc:	eb 02                	jmp    c001edd0 <FAT::exists(char const*)+0x64>
c001edce:	b0 00                	mov    al,0x0
c001edd0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001edd6:	c3                   	ret    
c001edd7:	90                   	nop

c001edd8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001edd8:	b8 08 00 00 00       	mov    eax,0x8
c001eddd:	c3                   	ret    

c001edde <ISO9660::seek(void*, unsigned long long)>:
c001edde:	53                   	push   ebx
c001eddf:	b8 04 00 00 00       	mov    eax,0x4
c001ede4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ede8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001edec:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001edf0:	85 d2                	test   edx,edx
c001edf2:	74 17                	je     c001ee0b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001edf4:	89 c8                	mov    eax,ecx
c001edf6:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001edf9:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001edfc:	b8 01 00 00 00       	mov    eax,0x1
c001ee01:	73 08                	jae    c001ee0b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001ee03:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001ee06:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001ee09:	31 c0                	xor    eax,eax
c001ee0b:	5b                   	pop    ebx
c001ee0c:	c3                   	ret    
c001ee0d:	90                   	nop

c001ee0e <ISO9660::tell(void*, unsigned long long*)>:
c001ee0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee16:	85 d2                	test   edx,edx
c001ee18:	74 12                	je     c001ee2c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ee1a:	85 c0                	test   eax,eax
c001ee1c:	74 0e                	je     c001ee2c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ee1e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ee21:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001ee24:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ee27:	89 10                	mov    DWORD PTR [eax],edx
c001ee29:	31 c0                	xor    eax,eax
c001ee2b:	c3                   	ret    
c001ee2c:	b8 04 00 00 00       	mov    eax,0x4
c001ee31:	c3                   	ret    

c001ee32 <ISO9660::getName()>:
c001ee32:	b8 74 8b 02 c0       	mov    eax,0xc0028b74
c001ee37:	c3                   	ret    

c001ee38 <ISO9660::stat(void*, unsigned long long*)>:
c001ee38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ee3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee40:	85 d2                	test   edx,edx
c001ee42:	74 12                	je     c001ee56 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ee44:	85 c0                	test   eax,eax
c001ee46:	74 0e                	je     c001ee56 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ee48:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001ee4b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001ee4e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ee51:	89 10                	mov    DWORD PTR [eax],edx
c001ee53:	31 c0                	xor    eax,eax
c001ee55:	c3                   	ret    
c001ee56:	b8 04 00 00 00       	mov    eax,0x4
c001ee5b:	c3                   	ret    

c001ee5c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ee5c:	b8 01 00 00 00       	mov    eax,0x1
c001ee61:	c3                   	ret    

c001ee62 <ISO9660::unlink(char const*)>:
c001ee62:	b8 01 00 00 00       	mov    eax,0x1
c001ee67:	c3                   	ret    

c001ee68 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ee68:	b8 01 00 00 00       	mov    eax,0x1
c001ee6d:	c3                   	ret    

c001ee6e <ISO9660::rename(char const*, char const*)>:
c001ee6e:	b8 01 00 00 00       	mov    eax,0x1
c001ee73:	c3                   	ret    

c001ee74 <ISO9660::mkdir(char const*)>:
c001ee74:	b8 01 00 00 00       	mov    eax,0x1
c001ee79:	c3                   	ret    

c001ee7a <ISO9660::close(void*)>:
c001ee7a:	83 ec 0c             	sub    esp,0xc
c001ee7d:	b8 04 00 00 00       	mov    eax,0x4
c001ee82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee86:	85 d2                	test   edx,edx
c001ee88:	74 0e                	je     c001ee98 <ISO9660::close(void*)+0x1e>
c001ee8a:	83 ec 0c             	sub    esp,0xc
c001ee8d:	52                   	push   edx
c001ee8e:	e8 c3 02 ff ff       	call   c000f156 <free>
c001ee93:	83 c4 10             	add    esp,0x10
c001ee96:	31 c0                	xor    eax,eax
c001ee98:	83 c4 0c             	add    esp,0xc
c001ee9b:	c3                   	ret    

c001ee9c <ISO9660::closeDir(void*)>:
c001ee9c:	83 ec 0c             	sub    esp,0xc
c001ee9f:	b8 04 00 00 00       	mov    eax,0x4
c001eea4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eea8:	85 d2                	test   edx,edx
c001eeaa:	74 0e                	je     c001eeba <ISO9660::closeDir(void*)+0x1e>
c001eeac:	83 ec 0c             	sub    esp,0xc
c001eeaf:	52                   	push   edx
c001eeb0:	e8 a1 02 ff ff       	call   c000f156 <free>
c001eeb5:	83 c4 10             	add    esp,0x10
c001eeb8:	31 c0                	xor    eax,eax
c001eeba:	83 c4 0c             	add    esp,0xc
c001eebd:	c3                   	ret    

c001eebe <ISO9660::~ISO9660()>:
c001eebe:	83 ec 0c             	sub    esp,0xc
c001eec1:	ba c8 8b 02 c0       	mov    edx,0xc0028bc8
c001eec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eeca:	89 10                	mov    DWORD PTR [eax],edx
c001eecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed0:	83 ec 0c             	sub    esp,0xc
c001eed3:	50                   	push   eax
c001eed4:	e8 9f 36 ff ff       	call   c0012578 <Filesystem::~Filesystem()>
c001eed9:	83 c4 10             	add    esp,0x10
c001eedc:	90                   	nop
c001eedd:	83 c4 0c             	add    esp,0xc
c001eee0:	c3                   	ret    
c001eee1:	90                   	nop

c001eee2 <ISO9660::~ISO9660()>:
c001eee2:	83 ec 0c             	sub    esp,0xc
c001eee5:	83 ec 0c             	sub    esp,0xc
c001eee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeec:	e8 cd ff ff ff       	call   c001eebe <ISO9660::~ISO9660()>
c001eef1:	83 c4 10             	add    esp,0x10
c001eef4:	83 ec 08             	sub    esp,0x8
c001eef7:	6a 08                	push   0x8
c001eef9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eefd:	e8 6d 32 ff ff       	call   c001216f <operator delete(void*, unsigned long)>
c001ef02:	83 c4 10             	add    esp,0x10
c001ef05:	83 c4 0c             	add    esp,0xc
c001ef08:	c3                   	ret    

c001ef09 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001ef09:	55                   	push   ebp
c001ef0a:	31 c9                	xor    ecx,ecx
c001ef0c:	57                   	push   edi
c001ef0d:	56                   	push   esi
c001ef0e:	53                   	push   ebx
c001ef0f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001ef13:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ef17:	89 eb                	mov    ebx,ebp
c001ef19:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001ef1d:	39 ce                	cmp    esi,ecx
c001ef1f:	7e 17                	jle    c001ef38 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001ef21:	31 d2                	xor    edx,edx
c001ef23:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001ef27:	7d 13                	jge    c001ef3c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001ef29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ef2d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001ef30:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001ef33:	75 0d                	jne    c001ef42 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001ef35:	42                   	inc    edx
c001ef36:	eb eb                	jmp    c001ef23 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001ef38:	31 c0                	xor    eax,eax
c001ef3a:	eb 0a                	jmp    c001ef46 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ef3c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001ef40:	eb 04                	jmp    c001ef46 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ef42:	41                   	inc    ecx
c001ef43:	43                   	inc    ebx
c001ef44:	eb d7                	jmp    c001ef1d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001ef46:	5b                   	pop    ebx
c001ef47:	5e                   	pop    esi
c001ef48:	5f                   	pop    edi
c001ef49:	5d                   	pop    ebp
c001ef4a:	c3                   	ret    

c001ef4b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ef4b:	56                   	push   esi
c001ef4c:	53                   	push   ebx
c001ef4d:	52                   	push   edx
c001ef4e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef52:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ef56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ef5a:	39 0d e0 b9 02 c0    	cmp    DWORD PTR ds:0xc002b9e0,ecx
c001ef60:	75 08                	jne    c001ef6a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001ef62:	38 05 a8 99 02 c0    	cmp    BYTE PTR ds:0xc00299a8,al
c001ef68:	74 2b                	je     c001ef95 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001ef6a:	83 ec 0c             	sub    esp,0xc
c001ef6d:	a2 a8 99 02 c0       	mov    ds:0xc00299a8,al
c001ef72:	68 00 ba 02 c0       	push   0xc002ba00
c001ef77:	0f be c0             	movsx  eax,al
c001ef7a:	6a 01                	push   0x1
c001ef7c:	89 0d e0 b9 02 c0    	mov    DWORD PTR ds:0xc002b9e0,ecx
c001ef82:	31 db                	xor    ebx,ebx
c001ef84:	53                   	push   ebx
c001ef85:	51                   	push   ecx
c001ef86:	ff 34 85 fc a8 02 c0 	push   DWORD PTR [eax*4-0x3ffd5704]
c001ef8d:	e8 e8 68 ff ff       	call   c001587a <LogicalDisk::read(unsigned long long, int, void*)>
c001ef92:	83 c4 20             	add    esp,0x20
c001ef95:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001ef9d:	c7 44 24 14 00 ba 02 c0 	mov    DWORD PTR [esp+0x14],0xc002ba00
c001efa5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001efa9:	58                   	pop    eax
c001efaa:	5b                   	pop    ebx
c001efab:	5e                   	pop    esi
c001efac:	e9 e5 16 fe ff       	jmp    c0000696 <memcpy>
c001efb1:	90                   	nop

c001efb2 <ISO9660::tryMount(LogicalDisk*, int)>:
c001efb2:	81 ec 10 08 00 00    	sub    esp,0x810
c001efb8:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001efbf:	83 c0 41             	add    eax,0x41
c001efc2:	0f be c0             	movsx  eax,al
c001efc5:	50                   	push   eax
c001efc6:	8d 44 24 08          	lea    eax,[esp+0x8]
c001efca:	50                   	push   eax
c001efcb:	6a 10                	push   0x10
c001efcd:	e8 79 ff ff ff       	call   c001ef4b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001efd2:	83 c4 10             	add    esp,0x10
c001efd5:	31 c0                	xor    eax,eax
c001efd7:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001efdc:	75 1d                	jne    c001effb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001efde:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001efe3:	75 16                	jne    c001effb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001efe5:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001efea:	75 0f                	jne    c001effb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001efec:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001eff1:	75 08                	jne    c001effb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001eff3:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001eff8:	0f 94 c0             	sete   al
c001effb:	81 c4 0c 08 00 00    	add    esp,0x80c
c001f001:	c3                   	ret    

c001f002 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001f002:	55                   	push   ebp
c001f003:	57                   	push   edi
c001f004:	56                   	push   esi
c001f005:	53                   	push   ebx
c001f006:	81 ec 34 08 00 00    	sub    esp,0x834
c001f00c:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001f013:	55                   	push   ebp
c001f014:	68 8f 8b 02 c0       	push   0xc0028b8f
c001f019:	e8 31 32 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001f01e:	83 c4 10             	add    esp,0x10
c001f021:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001f029:	0f 84 06 02 00 00    	je     c001f235 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f02f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001f037:	0f 84 f8 01 00 00    	je     c001f235 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001f03d:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f044:	b8 01 00 00 00       	mov    eax,0x1
c001f049:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001f04d:	0f 85 e7 01 00 00    	jne    c001f23a <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f053:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001f056:	31 d2                	xor    edx,edx
c001f058:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001f05b:	89 e9                	mov    ecx,ebp
c001f05d:	89 d3                	mov    ebx,edx
c001f05f:	01 f1                	add    ecx,esi
c001f061:	11 fb                	adc    ebx,edi
c001f063:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f067:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f06b:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001f072:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001f075:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001f078:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f07c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001f080:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f084:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f088:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001f08c:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001f090:	72 19                	jb     c001f0ab <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001f092:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f09a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f09e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f0a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f0a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f0a9:	eb 13                	jmp    c001f0be <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001f0ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f0af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f0b3:	29 f0                	sub    eax,esi
c001f0b5:	19 fa                	sbb    edx,edi
c001f0b7:	89 04 24             	mov    DWORD PTR [esp],eax
c001f0ba:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f0be:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001f0c5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001f0c8:	8b 00                	mov    eax,DWORD PTR [eax]
c001f0ca:	53                   	push   ebx
c001f0cb:	0f a4 c2 0b          	shld   edx,eax,0xb
c001f0cf:	c1 e0 0b             	shl    eax,0xb
c001f0d2:	01 c6                	add    esi,eax
c001f0d4:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f0db:	11 d7                	adc    edi,edx
c001f0dd:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f0e1:	89 fa                	mov    edx,edi
c001f0e3:	50                   	push   eax
c001f0e4:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f0e8:	50                   	push   eax
c001f0e9:	89 f0                	mov    eax,esi
c001f0eb:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f0ef:	50                   	push   eax
c001f0f0:	e8 56 fe ff ff       	call   c001ef4b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f0f5:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f0fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f100:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f103:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001f107:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001f10d:	83 c4 10             	add    esp,0x10
c001f110:	b8 00 08 00 00       	mov    eax,0x800
c001f115:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001f119:	29 d0                	sub    eax,edx
c001f11b:	39 c1                	cmp    ecx,eax
c001f11d:	83 db 00             	sbb    ebx,0x0
c001f120:	7d 19                	jge    c001f13b <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001f122:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001f127:	75 16                	jne    c001f13f <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001f129:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f130:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f136:	e9 f6 00 00 00       	jmp    c001f231 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001f13b:	89 c5                	mov    ebp,eax
c001f13d:	eb 03                	jmp    c001f142 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001f13f:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001f142:	51                   	push   ecx
c001f143:	55                   	push   ebp
c001f144:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001f148:	50                   	push   eax
c001f149:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001f150:	e8 41 15 fe ff       	call   c0000696 <memcpy>
c001f155:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f159:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f15d:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001f164:	01 e8                	add    eax,ebp
c001f166:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f16a:	89 e8                	mov    eax,ebp
c001f16c:	99                   	cdq    
c001f16d:	01 ee                	add    esi,ebp
c001f16f:	11 d7                	adc    edi,edx
c001f171:	29 e9                	sub    ecx,ebp
c001f173:	19 d3                	sbb    ebx,edx
c001f175:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001f179:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001f17d:	83 c4 10             	add    esp,0x10
c001f180:	b8 ff 07 00 00       	mov    eax,0x7ff
c001f185:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001f188:	b8 00 00 00 00       	mov    eax,0x0
c001f18d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f191:	7d 3f                	jge    c001f1d2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001f193:	52                   	push   edx
c001f194:	89 fa                	mov    edx,edi
c001f196:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f19d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f1a1:	50                   	push   eax
c001f1a2:	89 f0                	mov    eax,esi
c001f1a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f1a8:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f1ac:	50                   	push   eax
c001f1ad:	e8 99 fd ff ff       	call   c001ef4b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f1b2:	81 c6 00 08 00 00    	add    esi,0x800
c001f1b8:	83 d7 00             	adc    edi,0x0
c001f1bb:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001f1c3:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001f1cb:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001f1d0:	eb ab                	jmp    c001f17d <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001f1d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1d6:	0b 04 24             	or     eax,DWORD PTR [esp]
c001f1d9:	74 34                	je     c001f20f <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001f1db:	89 fa                	mov    edx,edi
c001f1dd:	50                   	push   eax
c001f1de:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001f1e5:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001f1e9:	50                   	push   eax
c001f1ea:	89 f0                	mov    eax,esi
c001f1ec:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f1f0:	0f ac d0 0b          	shrd   eax,edx,0xb
c001f1f4:	55                   	push   ebp
c001f1f5:	50                   	push   eax
c001f1f6:	e8 50 fd ff ff       	call   c001ef4b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f1fb:	83 c4 0c             	add    esp,0xc
c001f1fe:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001f202:	55                   	push   ebp
c001f203:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f207:	e8 8a 14 fe ff       	call   c0000696 <memcpy>
c001f20c:	83 c4 10             	add    esp,0x10
c001f20f:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f216:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f21a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f21e:	89 38                	mov    DWORD PTR [eax],edi
c001f220:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001f227:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f22b:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001f22e:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f231:	31 c0                	xor    eax,eax
c001f233:	eb 05                	jmp    c001f23a <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001f235:	b8 04 00 00 00       	mov    eax,0x4
c001f23a:	81 c4 2c 08 00 00    	add    esp,0x82c
c001f240:	5b                   	pop    ebx
c001f241:	5e                   	pop    esi
c001f242:	5f                   	pop    edi
c001f243:	5d                   	pop    ebp
c001f244:	c3                   	ret    
c001f245:	90                   	nop

c001f246 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001f246:	55                   	push   ebp
c001f247:	57                   	push   edi
c001f248:	56                   	push   esi
c001f249:	53                   	push   ebx
c001f24a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001f250:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001f257:	85 f6                	test   esi,esi
c001f259:	0f 84 64 02 00 00    	je     c001f4c3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f25f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001f267:	0f 84 56 02 00 00    	je     c001f4c3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c001f26d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001f270:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001f273:	75 0a                	jne    c001f27f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001f275:	b8 07 00 00 00       	mov    eax,0x7
c001f27a:	e9 49 02 00 00       	jmp    c001f4c8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f27f:	50                   	push   eax
c001f280:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f284:	50                   	push   eax
c001f285:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f28c:	53                   	push   ebx
c001f28d:	8b 06                	mov    eax,DWORD PTR [esi]
c001f28f:	c1 e0 0b             	shl    eax,0xb
c001f292:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001f295:	c1 e8 0b             	shr    eax,0xb
c001f298:	50                   	push   eax
c001f299:	e8 ad fc ff ff       	call   c001ef4b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f29e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f2a1:	83 c4 10             	add    esp,0x10
c001f2a4:	89 c1                	mov    ecx,eax
c001f2a6:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001f2a9:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f2af:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001f2b2:	84 db                	test   bl,bl
c001f2b4:	0f 85 90 00 00 00    	jne    c001f34a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001f2ba:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001f2c0:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f2c6:	29 c7                	sub    edi,eax
c001f2c8:	89 fb                	mov    ebx,edi
c001f2ca:	c1 fb 1f             	sar    ebx,0x1f
c001f2cd:	01 f8                	add    eax,edi
c001f2cf:	11 da                	adc    edx,ebx
c001f2d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f2d5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f2d9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001f2dc:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001f2df:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f2e2:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f2e5:	89 04 24             	mov    DWORD PTR [esp],eax
c001f2e8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f2ec:	89 d8                	mov    eax,ebx
c001f2ee:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f2f1:	ba 00 00 00 00       	mov    edx,0x0
c001f2f6:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001f2fa:	b8 00 00 00 00       	mov    eax,0x0
c001f2ff:	73 0b                	jae    c001f30c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001f301:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f304:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f308:	29 f8                	sub    eax,edi
c001f30a:	19 da                	sbb    edx,ebx
c001f30c:	89 d3                	mov    ebx,edx
c001f30e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f311:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f314:	09 c3                	or     ebx,eax
c001f316:	0f 84 59 ff ff ff    	je     c001f275 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001f31c:	55                   	push   ebp
c001f31d:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001f321:	50                   	push   eax
c001f322:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001f329:	53                   	push   ebx
c001f32a:	8b 06                	mov    eax,DWORD PTR [esi]
c001f32c:	c1 e0 0b             	shl    eax,0xb
c001f32f:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001f333:	c1 e8 0b             	shr    eax,0xb
c001f336:	50                   	push   eax
c001f337:	e8 0f fc ff ff       	call   c001ef4b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f33c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f33f:	83 c4 10             	add    esp,0x10
c001f342:	25 ff 07 00 00       	and    eax,0x7ff
c001f347:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001f34a:	57                   	push   edi
c001f34b:	6a 28                	push   0x28
c001f34d:	6a 00                	push   0x0
c001f34f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001f353:	50                   	push   eax
c001f354:	e8 73 13 fe ff       	call   c00006cc <memset>
c001f359:	31 d2                	xor    edx,edx
c001f35b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001f35e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f364:	89 f8                	mov    eax,edi
c001f366:	83 c0 21             	add    eax,0x21
c001f369:	83 d2 00             	adc    edx,0x0
c001f36c:	89 c7                	mov    edi,eax
c001f36e:	89 d5                	mov    ebp,edx
c001f370:	83 c4 10             	add    esp,0x10
c001f373:	31 c9                	xor    ecx,ecx
c001f375:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001f37c:	83 f9 28             	cmp    ecx,0x28
c001f37f:	88 04 24             	mov    BYTE PTR [esp],al
c001f382:	0f 94 c2             	sete   dl
c001f385:	88 d0                	mov    al,dl
c001f387:	ba ff 07 00 00       	mov    edx,0x7ff
c001f38c:	39 fa                	cmp    edx,edi
c001f38e:	ba 00 00 00 00       	mov    edx,0x0
c001f393:	19 ea                	sbb    edx,ebp
c001f395:	0f 92 c2             	setb   dl
c001f398:	09 c2                	or     edx,eax
c001f39a:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001f39e:	0f 94 c0             	sete   al
c001f3a1:	08 d0                	or     al,dl
c001f3a3:	75 16                	jne    c001f3bb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f3a5:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001f3a9:	74 10                	je     c001f3bb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001f3ab:	8a 04 24             	mov    al,BYTE PTR [esp]
c001f3ae:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001f3b2:	41                   	inc    ecx
c001f3b3:	83 c7 01             	add    edi,0x1
c001f3b6:	83 d5 00             	adc    ebp,0x0
c001f3b9:	eb ba                	jmp    c001f375 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001f3bb:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001f3c2:	83 ec 0c             	sub    esp,0xc
c001f3c5:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001f3c9:	57                   	push   edi
c001f3ca:	e8 1a 13 fe ff       	call   c00006e9 <strlen>
c001f3cf:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001f3d7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f3db:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001f3e2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001f3e5:	5a                   	pop    edx
c001f3e6:	25 ff 07 00 00       	and    eax,0x7ff
c001f3eb:	01 c8                	add    eax,ecx
c001f3ed:	59                   	pop    ecx
c001f3ee:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001f3f4:	83 e0 02             	and    eax,0x2
c001f3f7:	3c 01                	cmp    al,0x1
c001f3f9:	19 c0                	sbb    eax,eax
c001f3fb:	83 c0 02             	add    eax,0x2
c001f3fe:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001f402:	57                   	push   edi
c001f403:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001f407:	50                   	push   eax
c001f408:	e8 5e 13 fe ff       	call   c000076b <strcpy>
c001f40d:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001f411:	83 c4 10             	add    esp,0x10
c001f414:	84 c0                	test   al,al
c001f416:	75 21                	jne    c001f439 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c001f418:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001f420:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f428:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001f430:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001f437:	eb 28                	jmp    c001f461 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001f439:	fe c8                	dec    al
c001f43b:	75 24                	jne    c001f461 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c001f43d:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001f445:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001f44d:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001f455:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001f45c:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001f461:	0f b6 fb             	movzx  edi,bl
c001f464:	31 db                	xor    ebx,ebx
c001f466:	50                   	push   eax
c001f467:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001f46e:	8d 44 24 48          	lea    eax,[esp+0x48]
c001f472:	50                   	push   eax
c001f473:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001f47a:	e8 17 12 fe ff       	call   c0000696 <memcpy>
c001f47f:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001f486:	89 f9                	mov    ecx,edi
c001f488:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001f48e:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001f491:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001f494:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001f497:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001f49a:	83 c4 10             	add    esp,0x10
c001f49d:	39 c7                	cmp    edi,eax
c001f49f:	89 df                	mov    edi,ebx
c001f4a1:	19 d7                	sbb    edi,edx
c001f4a3:	72 10                	jb     c001f4b5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001f4a5:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001f4ac:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001f4b3:	eb 0a                	jmp    c001f4bf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c001f4b5:	29 c8                	sub    eax,ecx
c001f4b7:	19 da                	sbb    edx,ebx
c001f4b9:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001f4bc:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001f4bf:	31 c0                	xor    eax,eax
c001f4c1:	eb 05                	jmp    c001f4c8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c001f4c3:	b8 04 00 00 00       	mov    eax,0x4
c001f4c8:	81 c4 5c 09 00 00    	add    esp,0x95c
c001f4ce:	5b                   	pop    ebx
c001f4cf:	5e                   	pop    esi
c001f4d0:	5f                   	pop    edi
c001f4d1:	5d                   	pop    ebp
c001f4d2:	c3                   	ret    

c001f4d3 <readRoot(unsigned int*, unsigned int*, char)>:
c001f4d3:	81 ec 40 08 00 00    	sub    esp,0x840
c001f4d9:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001f4e1:	50                   	push   eax
c001f4e2:	8d 44 24 38          	lea    eax,[esp+0x38]
c001f4e6:	50                   	push   eax
c001f4e7:	6a 10                	push   0x10
c001f4e9:	e8 5d fa ff ff       	call   c001ef4b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f4ee:	83 c4 0c             	add    esp,0xc
c001f4f1:	6a 22                	push   0x22
c001f4f3:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001f4fa:	50                   	push   eax
c001f4fb:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f4ff:	50                   	push   eax
c001f500:	e8 91 11 fe ff       	call   c0000696 <memcpy>
c001f505:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001f50c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001f510:	89 10                	mov    DWORD PTR [eax],edx
c001f512:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001f519:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f51d:	89 10                	mov    DWORD PTR [eax],edx
c001f51f:	b0 01                	mov    al,0x1
c001f521:	81 c4 4c 08 00 00    	add    esp,0x84c
c001f527:	c3                   	ret    

c001f528 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001f528:	55                   	push   ebp
c001f529:	57                   	push   edi
c001f52a:	56                   	push   esi
c001f52b:	53                   	push   ebx
c001f52c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001f532:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001f539:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001f540:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f544:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001f548:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f54c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f550:	75 03                	jne    c001f555 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001f552:	83 c3 02             	add    ebx,0x2
c001f555:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001f558:	75 03                	jne    c001f55d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001f55a:	43                   	inc    ebx
c001f55b:	eb f8                	jmp    c001f555 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001f55d:	51                   	push   ecx
c001f55e:	68 00 01 00 00       	push   0x100
c001f563:	6a 00                	push   0x0
c001f565:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f569:	50                   	push   eax
c001f56a:	e8 5d 11 fe ff       	call   c00006cc <memset>
c001f56f:	83 c4 10             	add    esp,0x10
c001f572:	31 d2                	xor    edx,edx
c001f574:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001f577:	84 c0                	test   al,al
c001f579:	74 21                	je     c001f59c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001f57b:	3c 2f                	cmp    al,0x2f
c001f57d:	75 0b                	jne    c001f58a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001f57f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001f583:	bd 01 00 00 00       	mov    ebp,0x1
c001f588:	eb 14                	jmp    c001f59e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001f58a:	8d 48 9f             	lea    ecx,[eax-0x61]
c001f58d:	80 f9 19             	cmp    cl,0x19
c001f590:	77 03                	ja     c001f595 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001f592:	83 e8 20             	sub    eax,0x20
c001f595:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001f599:	42                   	inc    edx
c001f59a:	eb d8                	jmp    c001f574 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001f59c:	31 ed                	xor    ebp,ebp
c001f59e:	83 ec 0c             	sub    esp,0xc
c001f5a1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001f5a8:	e8 99 fb fe ff       	call   c000f146 <malloc>
c001f5ad:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001f5b4:	89 c6                	mov    esi,eax
c001f5b6:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001f5bc:	c1 ef 0b             	shr    edi,0xb
c001f5bf:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001f5c6:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001f5ca:	83 c4 10             	add    esp,0x10
c001f5cd:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001f5d2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5d6:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001f5dd:	74 28                	je     c001f607 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001f5df:	52                   	push   edx
c001f5e0:	57                   	push   edi
c001f5e1:	50                   	push   eax
c001f5e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f5e6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001f5ed:	e8 59 f9 ff ff       	call   c001ef4b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001f5f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f5f6:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001f5fd:	05 00 08 00 00       	add    eax,0x800
c001f602:	83 c4 10             	add    esp,0x10
c001f605:	eb cb                	jmp    c001f5d2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001f607:	83 ec 0c             	sub    esp,0xc
c001f60a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001f60e:	57                   	push   edi
c001f60f:	e8 d5 10 fe ff       	call   c00006e9 <strlen>
c001f614:	50                   	push   eax
c001f615:	57                   	push   edi
c001f616:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001f61d:	56                   	push   esi
c001f61e:	e8 e6 f8 ff ff       	call   c001ef09 <__memmem(unsigned char*, int, unsigned char*, int)>
c001f623:	83 c4 20             	add    esp,0x20
c001f626:	85 c0                	test   eax,eax
c001f628:	75 13                	jne    c001f63d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001f62a:	83 ec 0c             	sub    esp,0xc
c001f62d:	56                   	push   esi
c001f62e:	e8 23 fb fe ff       	call   c000f156 <free>
c001f633:	83 c4 10             	add    esp,0x10
c001f636:	31 c0                	xor    eax,eax
c001f638:	e9 b3 00 00 00       	jmp    c001f6f0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001f63d:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001f641:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001f645:	c1 e7 08             	shl    edi,0x8
c001f648:	c1 e2 10             	shl    edx,0x10
c001f64b:	09 d7                	or     edi,edx
c001f64d:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001f651:	09 d7                	or     edi,edx
c001f653:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001f657:	c1 e2 18             	shl    edx,0x18
c001f65a:	09 d7                	or     edi,edx
c001f65c:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001f660:	89 d1                	mov    ecx,edx
c001f662:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001f666:	c1 e1 08             	shl    ecx,0x8
c001f669:	c1 e2 10             	shl    edx,0x10
c001f66c:	09 ca                	or     edx,ecx
c001f66e:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001f672:	09 ca                	or     edx,ecx
c001f674:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001f678:	c1 e1 18             	shl    ecx,0x18
c001f67b:	09 ca                	or     edx,ecx
c001f67d:	89 e9                	mov    ecx,ebp
c001f67f:	84 c9                	test   cl,cl
c001f681:	74 3c                	je     c001f6bf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001f683:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f687:	83 ec 0c             	sub    esp,0xc
c001f68a:	56                   	push   esi
c001f68b:	e8 c6 fa fe ff       	call   c000f156 <free>
c001f690:	83 c4 0c             	add    esp,0xc
c001f693:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f69a:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001f69f:	50                   	push   eax
c001f6a0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f6a7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001f6ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f6b2:	52                   	push   edx
c001f6b3:	57                   	push   edi
c001f6b4:	53                   	push   ebx
c001f6b5:	e8 6e fe ff ff       	call   c001f528 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001f6ba:	83 c4 20             	add    esp,0x20
c001f6bd:	eb 31                	jmp    c001f6f0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001f6bf:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001f6c2:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001f6c9:	d0 e8                	shr    al,1
c001f6cb:	89 3b                	mov    DWORD PTR [ebx],edi
c001f6cd:	83 e0 01             	and    eax,0x1
c001f6d0:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001f6d7:	83 ec 0c             	sub    esp,0xc
c001f6da:	89 13                	mov    DWORD PTR [ebx],edx
c001f6dc:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001f6e3:	89 03                	mov    DWORD PTR [ebx],eax
c001f6e5:	56                   	push   esi
c001f6e6:	e8 6b fa fe ff       	call   c000f156 <free>
c001f6eb:	83 c4 10             	add    esp,0x10
c001f6ee:	b0 01                	mov    al,0x1
c001f6f0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001f6f6:	5b                   	pop    ebx
c001f6f7:	5e                   	pop    esi
c001f6f8:	5f                   	pop    edi
c001f6f9:	5d                   	pop    ebp
c001f6fa:	c3                   	ret    

c001f6fb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001f6fb:	55                   	push   ebp
c001f6fc:	57                   	push   edi
c001f6fd:	56                   	push   esi
c001f6fe:	53                   	push   ebx
c001f6ff:	83 ec 20             	sub    esp,0x20
c001f702:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f706:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001f70a:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f70e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001f716:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f71e:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001f723:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001f729:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001f72f:	57                   	push   edi
c001f730:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f734:	50                   	push   eax
c001f735:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f739:	50                   	push   eax
c001f73a:	e8 94 fd ff ff       	call   c001f4d3 <readRoot(unsigned int*, unsigned int*, char)>
c001f73f:	5a                   	pop    edx
c001f740:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f744:	e8 a0 0f fe ff       	call   c00006e9 <strlen>
c001f749:	83 c4 10             	add    esp,0x10
c001f74c:	83 f8 03             	cmp    eax,0x3
c001f74f:	77 17                	ja     c001f768 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001f751:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f755:	89 03                	mov    DWORD PTR [ebx],eax
c001f757:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f75b:	89 06                	mov    DWORD PTR [esi],eax
c001f75d:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001f764:	b0 01                	mov    al,0x1
c001f766:	eb 19                	jmp    c001f781 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001f768:	50                   	push   eax
c001f769:	55                   	push   ebp
c001f76a:	57                   	push   edi
c001f76b:	56                   	push   esi
c001f76c:	53                   	push   ebx
c001f76d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f771:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001f775:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f779:	e8 aa fd ff ff       	call   c001f528 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001f77e:	83 c4 20             	add    esp,0x20
c001f781:	83 c4 1c             	add    esp,0x1c
c001f784:	5b                   	pop    ebx
c001f785:	5e                   	pop    esi
c001f786:	5f                   	pop    edi
c001f787:	5d                   	pop    ebp
c001f788:	c3                   	ret    
c001f789:	90                   	nop

c001f78a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001f78a:	57                   	push   edi
c001f78b:	56                   	push   esi
c001f78c:	53                   	push   ebx
c001f78d:	83 ec 10             	sub    esp,0x10
c001f790:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001f794:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001f798:	85 ff                	test   edi,edi
c001f79a:	74 7b                	je     c001f817 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001f79c:	85 f6                	test   esi,esi
c001f79e:	74 77                	je     c001f817 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001f7a0:	83 ec 0c             	sub    esp,0xc
c001f7a3:	6a 1c                	push   0x1c
c001f7a5:	e8 9c f9 fe ff       	call   c000f146 <malloc>
c001f7aa:	89 07                	mov    DWORD PTR [edi],eax
c001f7ac:	89 c3                	mov    ebx,eax
c001f7ae:	58                   	pop    eax
c001f7af:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f7b3:	50                   	push   eax
c001f7b4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001f7b7:	50                   	push   eax
c001f7b8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f7bc:	50                   	push   eax
c001f7bd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f7c1:	50                   	push   eax
c001f7c2:	56                   	push   esi
c001f7c3:	e8 33 ff ff ff       	call   c001f6fb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f7c8:	83 c4 20             	add    esp,0x20
c001f7cb:	84 c0                	test   al,al
c001f7cd:	74 07                	je     c001f7d6 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001f7cf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f7d4:	74 0b                	je     c001f7e1 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001f7d6:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001f7da:	b8 01 00 00 00       	mov    eax,0x1
c001f7df:	eb 3b                	jmp    c001f81c <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001f7e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7e5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001f7e9:	89 03                	mov    DWORD PTR [ebx],eax
c001f7eb:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001f7f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f7f6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001f7fd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f804:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f807:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f80e:	8a 06                	mov    al,BYTE PTR [esi]
c001f810:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001f813:	31 c0                	xor    eax,eax
c001f815:	eb 05                	jmp    c001f81c <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001f817:	b8 04 00 00 00       	mov    eax,0x4
c001f81c:	83 c4 10             	add    esp,0x10
c001f81f:	5b                   	pop    ebx
c001f820:	5e                   	pop    esi
c001f821:	5f                   	pop    edi
c001f822:	c3                   	ret    
c001f823:	90                   	nop

c001f824 <ISO9660::exists(char const*)>:
c001f824:	83 ec 28             	sub    esp,0x28
c001f827:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f82b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001f82f:	52                   	push   edx
c001f830:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001f833:	52                   	push   edx
c001f834:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001f838:	52                   	push   edx
c001f839:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001f83d:	52                   	push   edx
c001f83e:	50                   	push   eax
c001f83f:	e8 b7 fe ff ff       	call   c001f6fb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f844:	83 c4 3c             	add    esp,0x3c
c001f847:	c3                   	ret    

c001f848 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001f848:	56                   	push   esi
c001f849:	53                   	push   ebx
c001f84a:	83 ec 14             	sub    esp,0x14
c001f84d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001f851:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001f855:	85 db                	test   ebx,ebx
c001f857:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001f85b:	0f 94 c2             	sete   dl
c001f85e:	85 f6                	test   esi,esi
c001f860:	0f 94 c0             	sete   al
c001f863:	08 c2                	or     dl,al
c001f865:	75 68                	jne    c001f8cf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001f867:	85 c9                	test   ecx,ecx
c001f869:	74 64                	je     c001f8cf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001f86b:	83 ec 0c             	sub    esp,0xc
c001f86e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001f871:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f875:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001f87b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f882:	50                   	push   eax
c001f883:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001f886:	50                   	push   eax
c001f887:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f88b:	50                   	push   eax
c001f88c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f890:	50                   	push   eax
c001f891:	51                   	push   ecx
c001f892:	e8 64 fe ff ff       	call   c001f6fb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f897:	83 c4 20             	add    esp,0x20
c001f89a:	ba 01 00 00 00       	mov    edx,0x1
c001f89f:	84 c0                	test   al,al
c001f8a1:	74 31                	je     c001f8d4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f8a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8a7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f8ae:	89 03                	mov    DWORD PTR [ebx],eax
c001f8b0:	ba 00 00 00 00       	mov    edx,0x0
c001f8b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8b9:	85 c0                	test   eax,eax
c001f8bb:	0f 95 06             	setne  BYTE PTR [esi]
c001f8be:	74 14                	je     c001f8d4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f8c0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001f8c6:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f8cd:	eb 05                	jmp    c001f8d4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001f8cf:	ba 04 00 00 00       	mov    edx,0x4
c001f8d4:	83 c4 14             	add    esp,0x14
c001f8d7:	89 d0                	mov    eax,edx
c001f8d9:	5b                   	pop    ebx
c001f8da:	5e                   	pop    esi
c001f8db:	c3                   	ret    

c001f8dc <ISO9660::openDir(char const*, void**)>:
c001f8dc:	57                   	push   edi
c001f8dd:	56                   	push   esi
c001f8de:	53                   	push   ebx
c001f8df:	83 ec 10             	sub    esp,0x10
c001f8e2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001f8e6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001f8ea:	85 ff                	test   edi,edi
c001f8ec:	0f 84 95 00 00 00    	je     c001f987 <ISO9660::openDir(char const*, void**)+0xab>
c001f8f2:	85 f6                	test   esi,esi
c001f8f4:	0f 84 8d 00 00 00    	je     c001f987 <ISO9660::openDir(char const*, void**)+0xab>
c001f8fa:	83 ec 0c             	sub    esp,0xc
c001f8fd:	6a 1c                	push   0x1c
c001f8ff:	e8 42 f8 fe ff       	call   c000f146 <malloc>
c001f904:	89 07                	mov    DWORD PTR [edi],eax
c001f906:	89 c3                	mov    ebx,eax
c001f908:	59                   	pop    ecx
c001f909:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f90d:	50                   	push   eax
c001f90e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001f911:	50                   	push   eax
c001f912:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f916:	50                   	push   eax
c001f917:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f91b:	50                   	push   eax
c001f91c:	56                   	push   esi
c001f91d:	e8 d9 fd ff ff       	call   c001f6fb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001f922:	83 c4 20             	add    esp,0x20
c001f925:	84 c0                	test   al,al
c001f927:	74 07                	je     c001f930 <ISO9660::openDir(char const*, void**)+0x54>
c001f929:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f92e:	75 21                	jne    c001f951 <ISO9660::openDir(char const*, void**)+0x75>
c001f930:	0f b6 c0             	movzx  eax,al
c001f933:	52                   	push   edx
c001f934:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f938:	50                   	push   eax
c001f939:	68 a2 8b 02 c0       	push   0xc0028ba2
c001f93e:	e8 0c 29 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c001f943:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001f947:	83 c4 10             	add    esp,0x10
c001f94a:	b8 01 00 00 00       	mov    eax,0x1
c001f94f:	eb 3b                	jmp    c001f98c <ISO9660::openDir(char const*, void**)+0xb0>
c001f951:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f955:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001f959:	89 03                	mov    DWORD PTR [ebx],eax
c001f95b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001f962:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f966:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001f96d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f974:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f977:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f97e:	8a 06                	mov    al,BYTE PTR [esi]
c001f980:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001f983:	31 c0                	xor    eax,eax
c001f985:	eb 05                	jmp    c001f98c <ISO9660::openDir(char const*, void**)+0xb0>
c001f987:	b8 04 00 00 00       	mov    eax,0x4
c001f98c:	83 c4 10             	add    esp,0x10
c001f98f:	5b                   	pop    ebx
c001f990:	5e                   	pop    esi
c001f991:	5f                   	pop    edi
c001f992:	c3                   	ret    
c001f993:	90                   	nop

c001f994 <ISO9660::ISO9660()>:
c001f994:	83 ec 0c             	sub    esp,0xc
c001f997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f99b:	83 ec 0c             	sub    esp,0xc
c001f99e:	50                   	push   eax
c001f99f:	e8 b0 2b ff ff       	call   c0012554 <Filesystem::Filesystem()>
c001f9a4:	83 c4 10             	add    esp,0x10
c001f9a7:	ba c8 8b 02 c0       	mov    edx,0xc0028bc8
c001f9ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b0:	89 10                	mov    DWORD PTR [eax],edx
c001f9b2:	90                   	nop
c001f9b3:	83 c4 0c             	add    esp,0xc
c001f9b6:	c3                   	ret    
c001f9b7:	90                   	nop

c001f9b8 <SoundChannel::~SoundChannel()>:
c001f9b8:	83 ec 0c             	sub    esp,0xc
c001f9bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9bf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001f9c2:	83 ec 0c             	sub    esp,0xc
c001f9c5:	50                   	push   eax
c001f9c6:	e8 8b f7 fe ff       	call   c000f156 <free>
c001f9cb:	83 c4 10             	add    esp,0x10
c001f9ce:	90                   	nop
c001f9cf:	83 c4 0c             	add    esp,0xc
c001f9d2:	c3                   	ret    
c001f9d3:	90                   	nop

c001f9d4 <SoundChannel::setSpeed(float)>:
c001f9d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f9dc:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f9df:	c3                   	ret    

c001f9e0 <SoundChannel::getSpeed()>:
c001f9e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9e4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001f9e7:	c3                   	ret    

c001f9e8 <SoundChannel::setVolume(int)>:
c001f9e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9ec:	83 f8 64             	cmp    eax,0x64
c001f9ef:	7e 05                	jle    c001f9f6 <SoundChannel::setVolume(int)+0xe>
c001f9f1:	b8 64 00 00 00       	mov    eax,0x64
c001f9f6:	85 c0                	test   eax,eax
c001f9f8:	79 02                	jns    c001f9fc <SoundChannel::setVolume(int)+0x14>
c001f9fa:	31 c0                	xor    eax,eax
c001f9fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fa00:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001fa03:	c3                   	ret    

c001fa04 <SoundChannel::getVolume()>:
c001fa04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa08:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001fa0b:	c3                   	ret    

c001fa0c <SoundChannel::pause()>:
c001fa0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa10:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001fa14:	c3                   	ret    
c001fa15:	90                   	nop

c001fa16 <SoundChannel::SoundChannel(int, int, int, int)>:
c001fa16:	83 ec 1c             	sub    esp,0x1c
c001fa19:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fa1d:	e8 ea ff ff ff       	call   c001fa0c <SoundChannel::pause()>
c001fa22:	83 c4 04             	add    esp,0x4
c001fa25:	6a 50                	push   0x50
c001fa27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fa2b:	e8 b8 ff ff ff       	call   c001f9e8 <SoundChannel::setVolume(int)>
c001fa30:	83 c4 08             	add    esp,0x8
c001fa33:	a1 40 8c 02 c0       	mov    eax,ds:0xc0028c40
c001fa38:	50                   	push   eax
c001fa39:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fa3d:	e8 92 ff ff ff       	call   c001f9d4 <SoundChannel::setSpeed(float)>
c001fa42:	83 c4 08             	add    esp,0x8
c001fa45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa49:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001fa4d:	89 10                	mov    DWORD PTR [eax],edx
c001fa4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa53:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001fa57:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa5e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001fa62:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa65:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001fa6a:	75 23                	jne    c001fa8f <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c001fa6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa70:	8b 10                	mov    edx,DWORD PTR [eax]
c001fa72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa79:	0f af c2             	imul   eax,edx
c001fa7c:	85 c0                	test   eax,eax
c001fa7e:	79 03                	jns    c001fa83 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c001fa80:	83 c0 03             	add    eax,0x3
c001fa83:	c1 f8 02             	sar    eax,0x2
c001fa86:	05 a0 0f 00 00       	add    eax,0xfa0
c001fa8b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001fa8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa93:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fa97:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001fa9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fa9e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001faa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001faa9:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001fab0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fab4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001fab7:	c1 e0 02             	shl    eax,0x2
c001faba:	83 ec 0c             	sub    esp,0xc
c001fabd:	50                   	push   eax
c001fabe:	e8 83 f6 fe ff       	call   c000f146 <malloc>
c001fac3:	83 c4 10             	add    esp,0x10
c001fac6:	89 c2                	mov    edx,eax
c001fac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001facc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001facf:	83 ec 04             	sub    esp,0x4
c001fad2:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fad6:	50                   	push   eax
c001fad7:	6a 01                	push   0x1
c001fad9:	6a 04                	push   0x4
c001fadb:	e8 8e 8e fe ff       	call   c000896e <src_new>
c001fae0:	83 c4 10             	add    esp,0x10
c001fae3:	89 c2                	mov    edx,eax
c001fae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fae9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001faec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faf0:	85 c0                	test   eax,eax
c001faf2:	74 10                	je     c001fb04 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c001faf4:	83 ec 0c             	sub    esp,0xc
c001faf7:	68 24 8c 02 c0       	push   0xc0028c24
c001fafc:	e8 ec 8e ff ff       	call   c00189ed <Krnl::panic(char const*)>
c001fb01:	83 c4 10             	add    esp,0x10
c001fb04:	a0 00 c6 02 c0       	mov    al,ds:0xc002c600
c001fb09:	83 f0 01             	xor    eax,0x1
c001fb0c:	84 c0                	test   al,al
c001fb0e:	74 57                	je     c001fb67 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c001fb10:	a1 44 8c 02 c0       	mov    eax,ds:0xc0028c44
c001fb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fb19:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fb21:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001fb29:	7f 35                	jg     c001fb60 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c001fb2b:	83 ec 0c             	sub    esp,0xc
c001fb2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fb32:	e8 50 41 00 00       	call   c0023c87 <__floatsisf>
c001fb37:	83 c4 10             	add    esp,0x10
c001fb3a:	8b 15 44 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c44
c001fb40:	83 ec 08             	sub    esp,0x8
c001fb43:	52                   	push   edx
c001fb44:	50                   	push   eax
c001fb45:	e8 4f 3d 00 00       	call   c0023899 <__mulsf3>
c001fb4a:	83 c4 10             	add    esp,0x10
c001fb4d:	89 c2                	mov    edx,eax
c001fb4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb53:	89 14 85 00 c2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3e00],edx
c001fb5a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fb5e:	eb c1                	jmp    c001fb21 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c001fb60:	c6 05 00 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c600,0x1
c001fb67:	90                   	nop
c001fb68:	83 c4 1c             	add    esp,0x1c
c001fb6b:	c3                   	ret    

c001fb6c <SoundChannel::play()>:
c001fb6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb70:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001fb74:	c3                   	ret    
c001fb75:	90                   	nop

c001fb76 <SoundChannel::paused()>:
c001fb76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb7a:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001fb7d:	c3                   	ret    

c001fb7e <SoundChannel::getSampleRate()>:
c001fb7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb82:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb84:	c3                   	ret    
c001fb85:	90                   	nop

c001fb86 <SoundChannel::getBits()>:
c001fb86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fb8d:	c3                   	ret    

c001fb8e <SoundChannel::getBufferUsed()>:
c001fb8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb92:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001fb95:	c3                   	ret    

c001fb96 <SoundChannel::getBufferSize()>:
c001fb96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb9a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001fb9d:	c3                   	ret    

c001fb9e <SoundChannel::unbuffer(float*, int, int)>:
c001fb9e:	56                   	push   esi
c001fb9f:	53                   	push   ebx
c001fba0:	83 ec 40             	sub    esp,0x40
c001fba3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001fba7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001fbaa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fbae:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001fbb1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fbb5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001fbb9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001fbbd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fbc1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fbc5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001fbc9:	e8 b9 40 00 00       	call   c0023c87 <__floatsisf>
c001fbce:	5a                   	pop    edx
c001fbcf:	89 c6                	mov    esi,eax
c001fbd1:	ff 33                	push   DWORD PTR [ebx]
c001fbd3:	e8 af 40 00 00       	call   c0023c87 <__floatsisf>
c001fbd8:	59                   	pop    ecx
c001fbd9:	5a                   	pop    edx
c001fbda:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001fbdd:	50                   	push   eax
c001fbde:	e8 b6 3c 00 00       	call   c0023899 <__mulsf3>
c001fbe3:	59                   	pop    ecx
c001fbe4:	5a                   	pop    edx
c001fbe5:	50                   	push   eax
c001fbe6:	56                   	push   esi
c001fbe7:	e8 70 3e 00 00       	call   c0023a5c <__divsf3>
c001fbec:	89 04 24             	mov    DWORD PTR [esp],eax
c001fbef:	e8 63 53 00 00       	call   c0024f57 <__extendsfdf2>
c001fbf4:	59                   	pop    ecx
c001fbf5:	5e                   	pop    esi
c001fbf6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001fbfa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001fbfe:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001fc06:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fc0a:	50                   	push   eax
c001fc0b:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001fc0e:	e8 d5 89 fe ff       	call   c00085e8 <src_process>
c001fc13:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001fc17:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001fc1a:	83 c4 0c             	add    esp,0xc
c001fc1d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001fc20:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001fc23:	29 d0                	sub    eax,edx
c001fc25:	c1 e0 02             	shl    eax,0x2
c001fc28:	50                   	push   eax
c001fc29:	8d 04 91             	lea    eax,[ecx+edx*4]
c001fc2c:	50                   	push   eax
c001fc2d:	51                   	push   ecx
c001fc2e:	e8 2b 0a fe ff       	call   c000065e <memmove>
c001fc33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fc37:	83 c4 44             	add    esp,0x44
c001fc3a:	5b                   	pop    ebx
c001fc3b:	5e                   	pop    esi
c001fc3c:	c3                   	ret    
c001fc3d:	90                   	nop

c001fc3e <SoundChannel::buffer8(unsigned char*, int)>:
c001fc3e:	55                   	push   ebp
c001fc3f:	57                   	push   edi
c001fc40:	56                   	push   esi
c001fc41:	53                   	push   ebx
c001fc42:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc46:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001fc4a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c001fc4d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fc51:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c001fc54:	74 7a                	je     c001fcd0 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c001fc56:	85 ff                	test   edi,edi
c001fc58:	7e 76                	jle    c001fcd0 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c001fc5a:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c001fc5e:	8d 70 01             	lea    esi,[eax+0x1]
c001fc61:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c001fc64:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fc67:	8b 1c 9d 00 c2 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3e00]
c001fc6e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c001fc71:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c001fc74:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c001fc77:	74 5e                	je     c001fcd7 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c001fc79:	83 ff 01             	cmp    edi,0x1
c001fc7c:	74 4b                	je     c001fcc9 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c001fc7e:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001fc82:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c001fc85:	8d 70 01             	lea    esi,[eax+0x1]
c001fc88:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fc8b:	8b 1c 9d 00 c2 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3e00]
c001fc92:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c001fc95:	b8 02 00 00 00       	mov    eax,0x2
c001fc9a:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001fc9d:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c001fca0:	75 23                	jne    c001fcc5 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c001fca2:	eb 27                	jmp    c001fccb <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c001fca4:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c001fca9:	8d 71 01             	lea    esi,[ecx+0x1]
c001fcac:	40                   	inc    eax
c001fcad:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c001fcb0:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c001fcb3:	8b 1c 9d 00 c2 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd3e00]
c001fcba:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001fcbd:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001fcc0:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c001fcc3:	74 06                	je     c001fccb <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c001fcc5:	39 c7                	cmp    edi,eax
c001fcc7:	75 db                	jne    c001fca4 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c001fcc9:	89 f8                	mov    eax,edi
c001fccb:	5b                   	pop    ebx
c001fccc:	5e                   	pop    esi
c001fccd:	5f                   	pop    edi
c001fcce:	5d                   	pop    ebp
c001fccf:	c3                   	ret    
c001fcd0:	5b                   	pop    ebx
c001fcd1:	31 c0                	xor    eax,eax
c001fcd3:	5e                   	pop    esi
c001fcd4:	5f                   	pop    edi
c001fcd5:	5d                   	pop    ebp
c001fcd6:	c3                   	ret    
c001fcd7:	b8 01 00 00 00       	mov    eax,0x1
c001fcdc:	eb ed                	jmp    c001fccb <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c001fcde <SoundDevice::SoundDevice(char const*)>:
c001fcde:	83 ec 1c             	sub    esp,0x1c
c001fce1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fce5:	83 ec 08             	sub    esp,0x8
c001fce8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fcec:	50                   	push   eax
c001fced:	e8 58 3b ff ff       	call   c001384a <Device::Device(char const*)>
c001fcf2:	83 c4 10             	add    esp,0x10
c001fcf5:	ba 50 8c 02 c0       	mov    edx,0xc0028c50
c001fcfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fcfe:	89 10                	mov    DWORD PTR [eax],edx
c001fd00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd04:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001fd0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd12:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001fd1c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fd24:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001fd29:	7f 19                	jg     c001fd44 <SoundDevice::SoundDevice(char const*)+0x66>
c001fd2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fd33:	83 c2 54             	add    edx,0x54
c001fd36:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001fd3e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fd42:	eb e0                	jmp    c001fd24 <SoundDevice::SoundDevice(char const*)+0x46>
c001fd44:	90                   	nop
c001fd45:	83 c4 1c             	add    esp,0x1c
c001fd48:	c3                   	ret    
c001fd49:	90                   	nop

c001fd4a <SoundDevice::~SoundDevice()>:
c001fd4a:	53                   	push   ebx
c001fd4b:	83 ec 18             	sub    esp,0x18
c001fd4e:	ba 50 8c 02 c0       	mov    edx,0xc0028c50
c001fd53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd57:	89 10                	mov    DWORD PTR [eax],edx
c001fd59:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001fd61:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001fd66:	7f 46                	jg     c001fdae <SoundDevice::~SoundDevice()+0x64>
c001fd68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fd70:	83 c2 54             	add    edx,0x54
c001fd73:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001fd77:	85 c0                	test   eax,eax
c001fd79:	74 2d                	je     c001fda8 <SoundDevice::~SoundDevice()+0x5e>
c001fd7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fd83:	83 c2 54             	add    edx,0x54
c001fd86:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001fd8a:	85 db                	test   ebx,ebx
c001fd8c:	74 1a                	je     c001fda8 <SoundDevice::~SoundDevice()+0x5e>
c001fd8e:	83 ec 0c             	sub    esp,0xc
c001fd91:	53                   	push   ebx
c001fd92:	e8 21 fc ff ff       	call   c001f9b8 <SoundChannel::~SoundChannel()>
c001fd97:	83 c4 10             	add    esp,0x10
c001fd9a:	83 ec 08             	sub    esp,0x8
c001fd9d:	6a 2c                	push   0x2c
c001fd9f:	53                   	push   ebx
c001fda0:	e8 ca 23 ff ff       	call   c001216f <operator delete(void*, unsigned long)>
c001fda5:	83 c4 10             	add    esp,0x10
c001fda8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001fdac:	eb b3                	jmp    c001fd61 <SoundDevice::~SoundDevice()+0x17>
c001fdae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fdb2:	83 ec 0c             	sub    esp,0xc
c001fdb5:	50                   	push   eax
c001fdb6:	e8 41 37 ff ff       	call   c00134fc <Device::~Device()>
c001fdbb:	83 c4 10             	add    esp,0x10
c001fdbe:	90                   	nop
c001fdbf:	83 c4 18             	add    esp,0x18
c001fdc2:	5b                   	pop    ebx
c001fdc3:	c3                   	ret    

c001fdc4 <SoundDevice::~SoundDevice()>:
c001fdc4:	83 ec 0c             	sub    esp,0xc
c001fdc7:	83 ec 0c             	sub    esp,0xc
c001fdca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdce:	e8 77 ff ff ff       	call   c001fd4a <SoundDevice::~SoundDevice()>
c001fdd3:	83 c4 10             	add    esp,0x10
c001fdd6:	83 ec 08             	sub    esp,0x8
c001fdd9:	68 e4 01 00 00       	push   0x1e4
c001fdde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fde2:	e8 88 23 ff ff       	call   c001216f <operator delete(void*, unsigned long)>
c001fde7:	83 c4 10             	add    esp,0x10
c001fdea:	83 c4 0c             	add    esp,0xc
c001fded:	c3                   	ret    

c001fdee <SoundDevice::getFreeChannelNum()>:
c001fdee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fdf2:	31 c0                	xor    eax,eax
c001fdf4:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001fdfc:	74 09                	je     c001fe07 <SoundDevice::getFreeChannelNum()+0x19>
c001fdfe:	40                   	inc    eax
c001fdff:	83 f8 20             	cmp    eax,0x20
c001fe02:	75 f0                	jne    c001fdf4 <SoundDevice::getFreeChannelNum()+0x6>
c001fe04:	83 c8 ff             	or     eax,0xffffffff
c001fe07:	c3                   	ret    

c001fe08 <SoundDevice::addChannel(SoundChannel*)>:
c001fe08:	56                   	push   esi
c001fe09:	53                   	push   ebx
c001fe0a:	51                   	push   ecx
c001fe0b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fe0f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fe13:	53                   	push   ebx
c001fe14:	e8 d5 ff ff ff       	call   c001fdee <SoundDevice::getFreeChannelNum()>
c001fe19:	5a                   	pop    edx
c001fe1a:	83 f8 ff             	cmp    eax,0xffffffff
c001fe1d:	74 51                	je     c001fe70 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001fe1f:	85 f6                	test   esi,esi
c001fe21:	74 4d                	je     c001fe70 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001fe23:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001fe2a:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001fe31:	75 30                	jne    c001fe63 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001fe33:	83 ec 0c             	sub    esp,0xc
c001fe36:	56                   	push   esi
c001fe37:	e8 42 fd ff ff       	call   c001fb7e <SoundChannel::getSampleRate()>
c001fe3c:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001fe42:	89 34 24             	mov    DWORD PTR [esp],esi
c001fe45:	e8 3c fd ff ff       	call   c001fb86 <SoundChannel::getBits()>
c001fe4a:	83 c4 0c             	add    esp,0xc
c001fe4d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001fe53:	8b 13                	mov    edx,DWORD PTR [ebx]
c001fe55:	50                   	push   eax
c001fe56:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001fe5c:	53                   	push   ebx
c001fe5d:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001fe60:	83 c4 10             	add    esp,0x10
c001fe63:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001fe69:	b8 01 00 00 00       	mov    eax,0x1
c001fe6e:	eb 03                	jmp    c001fe73 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001fe70:	83 c8 ff             	or     eax,0xffffffff
c001fe73:	5a                   	pop    edx
c001fe74:	5b                   	pop    ebx
c001fe75:	5e                   	pop    esi
c001fe76:	c3                   	ret    
c001fe77:	90                   	nop

c001fe78 <SoundDevice::removeChannel(int)>:
c001fe78:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fe7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe80:	83 fa 1f             	cmp    edx,0x1f
c001fe83:	77 23                	ja     c001fea8 <SoundDevice::removeChannel(int)+0x30>
c001fe85:	8d 14 90             	lea    edx,[eax+edx*4]
c001fe88:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001fe8f:	74 17                	je     c001fea8 <SoundDevice::removeChannel(int)+0x30>
c001fe91:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001fe9b:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001fea1:	75 05                	jne    c001fea8 <SoundDevice::removeChannel(int)+0x30>
c001fea3:	8b 00                	mov    eax,DWORD PTR [eax]
c001fea5:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001fea8:	c3                   	ret    
c001fea9:	90                   	nop

c001feaa <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001feaa:	57                   	push   edi
c001feab:	56                   	push   esi
c001feac:	53                   	push   ebx
c001fead:	31 db                	xor    ebx,ebx
c001feaf:	83 ec 10             	sub    esp,0x10
c001feb2:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001feb6:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001feba:	0f 8d cb 00 00 00    	jge    c001ff8b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c001fec0:	83 ec 0c             	sub    esp,0xc
c001fec3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fec7:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c001feca:	e8 88 50 00 00       	call   c0024f57 <__extendsfdf2>
c001fecf:	83 c4 10             	add    esp,0x10
c001fed2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fed6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001feda:	68 00 00 f0 3f       	push   0x3ff00000
c001fedf:	6a 00                	push   0x0
c001fee1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fee5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fee9:	e8 f5 3f 00 00       	call   c0023ee3 <__adddf3>
c001feee:	83 c4 10             	add    esp,0x10
c001fef1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fef5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fef9:	68 00 00 e0 3f       	push   0x3fe00000
c001fefe:	6a 00                	push   0x0
c001ff00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff08:	e8 53 46 00 00       	call   c0024560 <__muldf3>
c001ff0d:	83 c4 10             	add    esp,0x10
c001ff10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ff14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ff18:	68 00 00 60 40       	push   0x40600000
c001ff1d:	6a 00                	push   0x0
c001ff1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff27:	e8 34 46 00 00       	call   c0024560 <__muldf3>
c001ff2c:	59                   	pop    ecx
c001ff2d:	5f                   	pop    edi
c001ff2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ff32:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001ff36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff3e:	e8 f0 4e 00 00       	call   c0024e33 <__truncdfsf2>
c001ff43:	5a                   	pop    edx
c001ff44:	89 c7                	mov    edi,eax
c001ff46:	59                   	pop    ecx
c001ff47:	68 00 00 fe 42       	push   0x42fe0000
c001ff4c:	50                   	push   eax
c001ff4d:	e8 8b 3f 00 00       	call   c0023edd <__gesf2>
c001ff52:	83 c4 10             	add    esp,0x10
c001ff55:	85 c0                	test   eax,eax
c001ff57:	78 06                	js     c001ff5f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c001ff59:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001ff5d:	eb 26                	jmp    c001ff85 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c001ff5f:	50                   	push   eax
c001ff60:	50                   	push   eax
c001ff61:	6a 00                	push   0x0
c001ff63:	57                   	push   edi
c001ff64:	e8 78 3f 00 00       	call   c0023ee1 <__lesf2>
c001ff69:	83 c4 10             	add    esp,0x10
c001ff6c:	85 c0                	test   eax,eax
c001ff6e:	7f 06                	jg     c001ff76 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c001ff70:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001ff74:	eb 0f                	jmp    c001ff85 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c001ff76:	83 ec 0c             	sub    esp,0xc
c001ff79:	57                   	push   edi
c001ff7a:	e8 6d 50 00 00       	call   c0024fec <lrintf>
c001ff7f:	83 c4 10             	add    esp,0x10
c001ff82:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001ff85:	43                   	inc    ebx
c001ff86:	e9 2b ff ff ff       	jmp    c001feb6 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c001ff8b:	83 c4 10             	add    esp,0x10
c001ff8e:	5b                   	pop    ebx
c001ff8f:	5e                   	pop    esi
c001ff90:	5f                   	pop    edi
c001ff91:	c3                   	ret    

c001ff92 <SoundDevice::getAudio(int, float*, float*)>:
c001ff92:	55                   	push   ebp
c001ff93:	57                   	push   edi
c001ff94:	56                   	push   esi
c001ff95:	53                   	push   ebx
c001ff96:	31 db                	xor    ebx,ebx
c001ff98:	83 ec 20             	sub    esp,0x20
c001ff9b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ff9f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ffa3:	c1 e0 02             	shl    eax,0x2
c001ffa6:	50                   	push   eax
c001ffa7:	6a 00                	push   0x0
c001ffa9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ffad:	e8 1a 07 fe ff       	call   c00006cc <memset>
c001ffb2:	83 c4 10             	add    esp,0x10
c001ffb5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ffb9:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001ffc0:	85 c0                	test   eax,eax
c001ffc2:	0f 84 d7 00 00 00    	je     c002009f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001ffc8:	83 ec 0c             	sub    esp,0xc
c001ffcb:	50                   	push   eax
c001ffcc:	e8 a5 fb ff ff       	call   c001fb76 <SoundChannel::paused()>
c001ffd1:	83 c4 10             	add    esp,0x10
c001ffd4:	84 c0                	test   al,al
c001ffd6:	0f 85 c3 00 00 00    	jne    c002009f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001ffdc:	83 ec 0c             	sub    esp,0xc
c001ffdf:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ffe6:	e8 19 fa ff ff       	call   c001fa04 <SoundChannel::getVolume()>
c001ffeb:	83 c4 10             	add    esp,0x10
c001ffee:	85 c0                	test   eax,eax
c001fff0:	0f 84 a9 00 00 00    	je     c002009f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c001fff6:	83 ec 0c             	sub    esp,0xc
c001fff9:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0020000:	e8 ff f9 ff ff       	call   c001fa04 <SoundChannel::getVolume()>
c0020005:	83 ec 0c             	sub    esp,0xc
c0020008:	50                   	push   eax
c0020009:	e8 79 3c 00 00       	call   c0023c87 <__floatsisf>
c002000e:	59                   	pop    ecx
c002000f:	5d                   	pop    ebp
c0020010:	31 ed                	xor    ebp,ebp
c0020012:	68 00 00 c8 42       	push   0x42c80000
c0020017:	50                   	push   eax
c0020018:	e8 3f 3a 00 00       	call   c0023a5c <__divsf3>
c002001d:	83 c4 10             	add    esp,0x10
c0020020:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020024:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0020028:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c002002e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0020032:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0020039:	e8 60 fb ff ff       	call   c001fb9e <SoundChannel::unbuffer(float*, int, int)>
c002003e:	83 c4 20             	add    esp,0x20
c0020041:	89 c1                	mov    ecx,eax
c0020043:	39 cd                	cmp    ebp,ecx
c0020045:	7d 52                	jge    c0020099 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0020047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002004b:	50                   	push   eax
c002004c:	50                   	push   eax
c002004d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020051:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0020054:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020058:	e8 3c 38 00 00       	call   c0023899 <__mulsf3>
c002005d:	5a                   	pop    edx
c002005e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020062:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0020068:	e8 1a 3c 00 00       	call   c0023c87 <__floatsisf>
c002006d:	59                   	pop    ecx
c002006e:	5a                   	pop    edx
c002006f:	50                   	push   eax
c0020070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020074:	e8 e3 39 00 00       	call   c0023a5c <__divsf3>
c0020079:	59                   	pop    ecx
c002007a:	5a                   	pop    edx
c002007b:	50                   	push   eax
c002007c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020080:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0020083:	e8 ee 34 00 00       	call   c0023576 <__addsf3>
c0020088:	83 c4 10             	add    esp,0x10
c002008b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002008f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020093:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0020096:	45                   	inc    ebp
c0020097:	eb aa                	jmp    c0020043 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0020099:	39 cf                	cmp    edi,ecx
c002009b:	7e 02                	jle    c002009f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002009d:	89 cf                	mov    edi,ecx
c002009f:	43                   	inc    ebx
c00200a0:	83 fb 20             	cmp    ebx,0x20
c00200a3:	0f 85 10 ff ff ff    	jne    c001ffb9 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00200a9:	83 c4 1c             	add    esp,0x1c
c00200ac:	89 f8                	mov    eax,edi
c00200ae:	5b                   	pop    ebx
c00200af:	5e                   	pop    esi
c00200b0:	5f                   	pop    edi
c00200b1:	5d                   	pop    ebp
c00200b2:	c3                   	ret    
c00200b3:	90                   	nop

c00200b4 <PCI::open(int, int, void*)>:
c00200b4:	83 ec 18             	sub    esp,0x18
c00200b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00200bb:	8b 10                	mov    edx,DWORD PTR [eax]
c00200bd:	50                   	push   eax
c00200be:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00200c1:	31 c0                	xor    eax,eax
c00200c3:	83 c4 1c             	add    esp,0x1c
c00200c6:	c3                   	ret    
c00200c7:	90                   	nop

c00200c8 <PCI::close(int, int, void*)>:
c00200c8:	31 c0                	xor    eax,eax
c00200ca:	c3                   	ret    
c00200cb:	90                   	nop

c00200cc <PCI::PCI()>:
c00200cc:	83 ec 0c             	sub    esp,0xc
c00200cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d3:	83 ec 08             	sub    esp,0x8
c00200d6:	68 80 8c 02 c0       	push   0xc0028c80
c00200db:	50                   	push   eax
c00200dc:	e8 f5 2d ff ff       	call   c0012ed6 <Bus::Bus(char const*)>
c00200e1:	83 c4 10             	add    esp,0x10
c00200e4:	ba 0c 8d 02 c0       	mov    edx,0xc0028d0c
c00200e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200ed:	89 10                	mov    DWORD PTR [eax],edx
c00200ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200f3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00200f9:	0f b6 d0             	movzx  edx,al
c00200fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020100:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0020107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002010b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020111:	0f b6 d0             	movzx  edx,al
c0020114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020118:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002011d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020121:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020127:	8d 50 01             	lea    edx,[eax+0x1]
c002012a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002012e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020134:	0f b6 d0             	movzx  edx,al
c0020137:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002013b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002013f:	83 c9 c0             	or     ecx,0xffffffc0
c0020142:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020146:	90                   	nop
c0020147:	83 c4 0c             	add    esp,0xc
c002014a:	c3                   	ret    
c002014b:	90                   	nop

c002014c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002014c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020150:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020155:	89 ca                	mov    edx,ecx
c0020157:	c1 e0 10             	shl    eax,0x10
c002015a:	81 e2 fc 00 00 00    	and    edx,0xfc
c0020160:	09 d0                	or     eax,edx
c0020162:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0020167:	c1 e2 08             	shl    edx,0x8
c002016a:	09 d0                	or     eax,edx
c002016c:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0020171:	c1 e2 0b             	shl    edx,0xb
c0020174:	09 d0                	or     eax,edx
c0020176:	ba f8 0c 00 00       	mov    edx,0xcf8
c002017b:	0d 00 00 00 80       	or     eax,0x80000000
c0020180:	ef                   	out    dx,eax
c0020181:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020186:	ed                   	in     eax,dx
c0020187:	83 e1 02             	and    ecx,0x2
c002018a:	0f b6 c9             	movzx  ecx,cl
c002018d:	c1 e1 03             	shl    ecx,0x3
c0020190:	d3 e8                	shr    eax,cl
c0020192:	c3                   	ret    
c0020193:	90                   	nop

c0020194 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0020194:	6a 00                	push   0x0
c0020196:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002019b:	50                   	push   eax
c002019c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201a1:	50                   	push   eax
c00201a2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201a7:	50                   	push   eax
c00201a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00201ac:	e8 9b ff ff ff       	call   c002014c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00201b1:	83 c4 14             	add    esp,0x14
c00201b4:	c3                   	ret    
c00201b5:	90                   	nop

c00201b6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00201b6:	6a 0e                	push   0xe
c00201b8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201bd:	50                   	push   eax
c00201be:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201c3:	50                   	push   eax
c00201c4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00201c9:	50                   	push   eax
c00201ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00201ce:	e8 79 ff ff ff       	call   c002014c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00201d3:	83 c4 14             	add    esp,0x14
c00201d6:	0f b6 c0             	movzx  eax,al
c00201d9:	c3                   	ret    

c00201da <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00201da:	55                   	push   ebp
c00201db:	57                   	push   edi
c00201dc:	56                   	push   esi
c00201dd:	53                   	push   ebx
c00201de:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00201e3:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00201e8:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00201ed:	6a 0a                	push   0xa
c00201ef:	56                   	push   esi
c00201f0:	55                   	push   ebp
c00201f1:	57                   	push   edi
c00201f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00201f6:	e8 51 ff ff ff       	call   c002014c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00201fb:	6a 0a                	push   0xa
c00201fd:	89 c3                	mov    ebx,eax
c00201ff:	56                   	push   esi
c0020200:	0f b6 db             	movzx  ebx,bl
c0020203:	55                   	push   ebp
c0020204:	57                   	push   edi
c0020205:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020209:	e8 3e ff ff ff       	call   c002014c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002020e:	83 c4 28             	add    esp,0x28
c0020211:	25 00 ff 00 00       	and    eax,0xff00
c0020216:	09 d8                	or     eax,ebx
c0020218:	5b                   	pop    ebx
c0020219:	5e                   	pop    esi
c002021a:	5f                   	pop    edi
c002021b:	5d                   	pop    ebp
c002021c:	c3                   	ret    
c002021d:	90                   	nop

c002021e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002021e:	6a 08                	push   0x8
c0020220:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020225:	50                   	push   eax
c0020226:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002022b:	50                   	push   eax
c002022c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020231:	50                   	push   eax
c0020232:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0020236:	e8 11 ff ff ff       	call   c002014c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002023b:	83 c4 14             	add    esp,0x14
c002023e:	0f b6 c4             	movzx  eax,ah
c0020241:	c3                   	ret    

c0020242 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0020242:	6a 08                	push   0x8
c0020244:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020249:	50                   	push   eax
c002024a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002024f:	50                   	push   eax
c0020250:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020255:	50                   	push   eax
c0020256:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002025a:	e8 ed fe ff ff       	call   c002014c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002025f:	83 c4 14             	add    esp,0x14
c0020262:	c3                   	ret    
c0020263:	90                   	nop

c0020264 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0020264:	6a 3c                	push   0x3c
c0020266:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002026b:	50                   	push   eax
c002026c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020271:	50                   	push   eax
c0020272:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020277:	50                   	push   eax
c0020278:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002027c:	e8 cb fe ff ff       	call   c002014c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020281:	83 c4 14             	add    esp,0x14
c0020284:	c3                   	ret    
c0020285:	90                   	nop

c0020286 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0020286:	6a 18                	push   0x18
c0020288:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002028d:	50                   	push   eax
c002028e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020293:	50                   	push   eax
c0020294:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020299:	50                   	push   eax
c002029a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002029e:	e8 a9 fe ff ff       	call   c002014c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00202a3:	83 c4 14             	add    esp,0x14
c00202a6:	0f b6 c4             	movzx  eax,ah
c00202a9:	c3                   	ret    

c00202aa <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00202aa:	55                   	push   ebp
c00202ab:	57                   	push   edi
c00202ac:	56                   	push   esi
c00202ad:	53                   	push   ebx
c00202ae:	50                   	push   eax
c00202af:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00202b3:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00202b8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00202bd:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00202c2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00202c9:	8d 43 12             	lea    eax,[ebx+0x12]
c00202cc:	83 c3 10             	add    ebx,0x10
c00202cf:	0f b6 c0             	movzx  eax,al
c00202d2:	0f b6 db             	movzx  ebx,bl
c00202d5:	50                   	push   eax
c00202d6:	51                   	push   ecx
c00202d7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00202db:	57                   	push   edi
c00202dc:	55                   	push   ebp
c00202dd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00202e1:	e8 66 fe ff ff       	call   c002014c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00202e6:	53                   	push   ebx
c00202e7:	89 c6                	mov    esi,eax
c00202e9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00202ed:	c1 e6 10             	shl    esi,0x10
c00202f0:	51                   	push   ecx
c00202f1:	57                   	push   edi
c00202f2:	55                   	push   ebp
c00202f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00202f7:	e8 50 fe ff ff       	call   c002014c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00202fc:	83 c4 2c             	add    esp,0x2c
c00202ff:	0f b7 c0             	movzx  eax,ax
c0020302:	5b                   	pop    ebx
c0020303:	09 f0                	or     eax,esi
c0020305:	5e                   	pop    esi
c0020306:	5f                   	pop    edi
c0020307:	5d                   	pop    ebp
c0020308:	c3                   	ret    
c0020309:	90                   	nop

c002030a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002030a:	53                   	push   ebx
c002030b:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020310:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020315:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020319:	c1 e1 10             	shl    ecx,0x10
c002031c:	25 fc 00 00 00       	and    eax,0xfc
c0020321:	09 c1                	or     ecx,eax
c0020323:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0020328:	c1 e0 08             	shl    eax,0x8
c002032b:	09 c1                	or     ecx,eax
c002032d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0020332:	c1 e0 0b             	shl    eax,0xb
c0020335:	09 c1                	or     ecx,eax
c0020337:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002033d:	89 c8                	mov    eax,ecx
c002033f:	ef                   	out    dx,eax
c0020340:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020345:	ed                   	in     eax,dx
c0020346:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c002034b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0020350:	74 0a                	je     c002035c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0020352:	0f b7 d8             	movzx  ebx,ax
c0020355:	89 d0                	mov    eax,edx
c0020357:	c1 e0 10             	shl    eax,0x10
c002035a:	eb 05                	jmp    c0020361 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c002035c:	66 31 c0             	xor    ax,ax
c002035f:	89 d3                	mov    ebx,edx
c0020361:	09 c3                	or     ebx,eax
c0020363:	ba f8 0c 00 00       	mov    edx,0xcf8
c0020368:	89 c8                	mov    eax,ecx
c002036a:	ef                   	out    dx,eax
c002036b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0020370:	89 d8                	mov    eax,ebx
c0020372:	ef                   	out    dx,eax
c0020373:	5b                   	pop    ebx
c0020374:	c3                   	ret    
c0020375:	90                   	nop

c0020376 <PCI::checkBus(unsigned char)>:
c0020376:	56                   	push   esi
c0020377:	53                   	push   ebx
c0020378:	31 db                	xor    ebx,ebx
c002037a:	51                   	push   ecx
c002037b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0020380:	52                   	push   edx
c0020381:	53                   	push   ebx
c0020382:	43                   	inc    ebx
c0020383:	56                   	push   esi
c0020384:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020388:	e8 29 03 00 00       	call   c00206b6 <PCI::checkDevice(unsigned char, unsigned char)>
c002038d:	83 c4 10             	add    esp,0x10
c0020390:	83 fb 20             	cmp    ebx,0x20
c0020393:	75 eb                	jne    c0020380 <PCI::checkBus(unsigned char)+0xa>
c0020395:	58                   	pop    eax
c0020396:	5b                   	pop    ebx
c0020397:	5e                   	pop    esi
c0020398:	c3                   	ret    
c0020399:	90                   	nop

c002039a <PCI::foundDevice(PCIDeviceInfo)>:
c002039a:	55                   	push   ebp
c002039b:	57                   	push   edi
c002039c:	56                   	push   esi
c002039d:	53                   	push   ebx
c002039e:	83 ec 1c             	sub    esp,0x1c
c00203a1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00203a5:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00203ab:	0f 84 51 01 00 00    	je     c0020502 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c00203b1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00203b5:	66 81 f9 06 04       	cmp    cx,0x406
c00203ba:	75 2c                	jne    c00203e8 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00203bc:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00203c1:	50                   	push   eax
c00203c2:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00203c7:	50                   	push   eax
c00203c8:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00203cd:	50                   	push   eax
c00203ce:	56                   	push   esi
c00203cf:	e8 b2 fe ff ff       	call   c0020286 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00203d4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00203d8:	0f b6 c0             	movzx  eax,al
c00203db:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00203df:	83 c4 2c             	add    esp,0x2c
c00203e2:	5b                   	pop    ebx
c00203e3:	5e                   	pop    esi
c00203e4:	5f                   	pop    edi
c00203e5:	5d                   	pop    ebp
c00203e6:	eb 8e                	jmp    c0020376 <PCI::checkBus(unsigned char)>
c00203e8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00203ec:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00203f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00203f6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00203fa:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00203fe:	88 d3                	mov    bl,dl
c0020400:	85 c0                	test   eax,eax
c0020402:	74 33                	je     c0020437 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0020404:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0020407:	85 d2                	test   edx,edx
c0020409:	74 28                	je     c0020433 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002040b:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0020411:	31 ef                	xor    edi,ebp
c0020413:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0020419:	75 18                	jne    c0020433 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002041b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002041f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0020425:	75 0c                	jne    c0020433 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0020427:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c002042d:	0f 84 cf 00 00 00    	je     c0020502 <PCI::foundDevice(PCIDeviceInfo)+0x168>
c0020433:	8b 00                	mov    eax,DWORD PTR [eax]
c0020435:	eb c9                	jmp    c0020400 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0020437:	66 81 f9 01 06       	cmp    cx,0x601
c002043c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0020440:	75 18                	jne    c002045a <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c0020442:	83 ec 0c             	sub    esp,0xc
c0020445:	68 58 01 00 00       	push   0x158
c002044a:	e8 11 1d ff ff       	call   c0012160 <operator new(unsigned long)>
c002044f:	59                   	pop    ecx
c0020450:	89 c5                	mov    ebp,eax
c0020452:	5f                   	pop    edi
c0020453:	68 88 8c 02 c0       	push   0xc0028c88
c0020458:	eb 7d                	jmp    c00204d7 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c002045a:	66 81 f9 01 01       	cmp    cx,0x101
c002045f:	75 60                	jne    c00204c1 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c0020461:	83 ec 0c             	sub    esp,0xc
c0020464:	68 70 02 00 00       	push   0x270
c0020469:	e8 f2 1c ff ff       	call   c0012160 <operator new(unsigned long)>
c002046e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020471:	89 c5                	mov    ebp,eax
c0020473:	e8 02 03 00 00       	call   c002077a <IDE::IDE()>
c0020478:	58                   	pop    eax
c0020479:	5a                   	pop    edx
c002047a:	55                   	push   ebp
c002047b:	56                   	push   esi
c002047c:	e8 d9 31 ff ff       	call   c001365a <Device::addChild(Device*)>
c0020481:	83 ec 1c             	sub    esp,0x1c
c0020484:	b9 09 00 00 00       	mov    ecx,0x9
c0020489:	fc                   	cld    
c002048a:	89 e7                	mov    edi,esp
c002048c:	89 de                	mov    esi,ebx
c002048e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020490:	55                   	push   ebp
c0020491:	e8 9e 30 ff ff       	call   c0013534 <Device::preOpenPCI(PCIDeviceInfo)>
c0020496:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0020499:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002049d:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00204a5:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00204ad:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00204b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00204b8:	83 c4 4c             	add    esp,0x4c
c00204bb:	5b                   	pop    ebx
c00204bc:	5e                   	pop    esi
c00204bd:	5f                   	pop    edi
c00204be:	5d                   	pop    ebp
c00204bf:	ff e0                	jmp    eax
c00204c1:	83 ec 0c             	sub    esp,0xc
c00204c4:	68 58 01 00 00       	push   0x158
c00204c9:	e8 92 1c ff ff       	call   c0012160 <operator new(unsigned long)>
c00204ce:	59                   	pop    ecx
c00204cf:	89 c5                	mov    ebp,eax
c00204d1:	5f                   	pop    edi
c00204d2:	68 a7 8c 02 c0       	push   0xc0028ca7
c00204d7:	55                   	push   ebp
c00204d8:	e8 69 34 ff ff       	call   c0013946 <DriverlessDevice::DriverlessDevice(char const*)>
c00204dd:	58                   	pop    eax
c00204de:	5a                   	pop    edx
c00204df:	55                   	push   ebp
c00204e0:	56                   	push   esi
c00204e1:	e8 74 31 ff ff       	call   c001365a <Device::addChild(Device*)>
c00204e6:	b9 09 00 00 00       	mov    ecx,0x9
c00204eb:	fc                   	cld    
c00204ec:	89 df                	mov    edi,ebx
c00204ee:	89 de                	mov    esi,ebx
c00204f0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00204f2:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c00204f6:	83 c4 2c             	add    esp,0x2c
c00204f9:	5b                   	pop    ebx
c00204fa:	5e                   	pop    esi
c00204fb:	5f                   	pop    edi
c00204fc:	5d                   	pop    ebp
c00204fd:	e9 32 30 ff ff       	jmp    c0013534 <Device::preOpenPCI(PCIDeviceInfo)>
c0020502:	83 c4 1c             	add    esp,0x1c
c0020505:	5b                   	pop    ebx
c0020506:	5e                   	pop    esi
c0020507:	5f                   	pop    edi
c0020508:	5d                   	pop    ebp
c0020509:	c3                   	ret    

c002050a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002050a:	55                   	push   ebp
c002050b:	57                   	push   edi
c002050c:	56                   	push   esi
c002050d:	53                   	push   ebx
c002050e:	83 ec 5c             	sub    esp,0x5c
c0020511:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0020515:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020519:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c002051d:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0020522:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020526:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c002052a:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c002052f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020533:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0020538:	6a 0c                	push   0xc
c002053a:	55                   	push   ebp
c002053b:	53                   	push   ebx
c002053c:	57                   	push   edi
c002053d:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0020544:	e8 03 fc ff ff       	call   c002014c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020549:	55                   	push   ebp
c002054a:	53                   	push   ebx
c002054b:	57                   	push   edi
c002054c:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0020553:	e8 82 fc ff ff       	call   c00201da <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0020558:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c002055d:	83 c4 24             	add    esp,0x24
c0020560:	55                   	push   ebp
c0020561:	53                   	push   ebx
c0020562:	57                   	push   edi
c0020563:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0020567:	e8 f8 fc ff ff       	call   c0020264 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002056c:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0020570:	6a 3c                	push   0x3c
c0020572:	55                   	push   ebp
c0020573:	53                   	push   ebx
c0020574:	57                   	push   edi
c0020575:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002057c:	e8 cb fb ff ff       	call   c002014c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0020581:	0f b6 c4             	movzx  eax,ah
c0020584:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0020588:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002058c:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0020590:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0020595:	83 c4 24             	add    esp,0x24
c0020598:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c002059e:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c00205a5:	74 6c                	je     c0020613 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00205a7:	31 f6                	xor    esi,esi
c00205a9:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c00205af:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00205b5:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c00205bb:	7e 56                	jle    c0020613 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00205bd:	8d 14 f2             	lea    edx,[edx+esi*8]
c00205c0:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00205c7:	39 cb                	cmp    ebx,ecx
c00205c9:	75 45                	jne    c0020610 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00205cb:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00205d2:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00205d6:	75 38                	jne    c0020610 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00205d8:	83 ec 0c             	sub    esp,0xc
c00205db:	68 c1 8c 02 c0       	push   0xc0028cc1
c00205e0:	e8 6a 1c ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00205e5:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c00205eb:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00205f1:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c00205f9:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c00205fd:	52                   	push   edx
c00205fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020602:	53                   	push   ebx
c0020603:	68 e6 8c 02 c0       	push   0xc0028ce6
c0020608:	e8 42 1c ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c002060d:	83 c4 20             	add    esp,0x20
c0020610:	46                   	inc    esi
c0020611:	eb 96                	jmp    c00205a9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0020613:	31 d2                	xor    edx,edx
c0020615:	83 ec 0c             	sub    esp,0xc
c0020618:	55                   	push   ebp
c0020619:	53                   	push   ebx
c002061a:	57                   	push   edi
c002061b:	52                   	push   edx
c002061c:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0020620:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0020627:	e8 7e fc ff ff       	call   c00202aa <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002062c:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0020630:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020634:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0020638:	42                   	inc    edx
c0020639:	83 c4 20             	add    esp,0x20
c002063c:	83 fa 06             	cmp    edx,0x6
c002063f:	75 d4                	jne    c0020615 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0020641:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020645:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0020649:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c002064d:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0020651:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0020655:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0020659:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c002065e:	86 e0                	xchg   al,ah
c0020660:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0020665:	55                   	push   ebp
c0020666:	53                   	push   ebx
c0020667:	57                   	push   edi
c0020668:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c002066c:	e8 ad fb ff ff       	call   c002021e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0020671:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0020675:	55                   	push   ebp
c0020676:	53                   	push   ebx
c0020677:	57                   	push   edi
c0020678:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c002067f:	e8 10 fb ff ff       	call   c0020194 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020684:	83 ec 0c             	sub    esp,0xc
c0020687:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c002068c:	b9 09 00 00 00       	mov    ecx,0x9
c0020691:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0020695:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0020699:	fc                   	cld    
c002069a:	89 e7                	mov    edi,esp
c002069c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002069e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00206a5:	e8 f0 fc ff ff       	call   c002039a <PCI::foundDevice(PCIDeviceInfo)>
c00206aa:	81 c4 8c 00 00 00    	add    esp,0x8c
c00206b0:	5b                   	pop    ebx
c00206b1:	5e                   	pop    esi
c00206b2:	5f                   	pop    edi
c00206b3:	5d                   	pop    ebp
c00206b4:	c3                   	ret    
c00206b5:	90                   	nop

c00206b6 <PCI::checkDevice(unsigned char, unsigned char)>:
c00206b6:	55                   	push   ebp
c00206b7:	57                   	push   edi
c00206b8:	56                   	push   esi
c00206b9:	53                   	push   ebx
c00206ba:	83 ec 0c             	sub    esp,0xc
c00206bd:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00206c1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00206c6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00206cb:	6a 00                	push   0x0
c00206cd:	56                   	push   esi
c00206ce:	57                   	push   edi
c00206cf:	55                   	push   ebp
c00206d0:	e8 bf fa ff ff       	call   c0020194 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00206d5:	6a 00                	push   0x0
c00206d7:	56                   	push   esi
c00206d8:	57                   	push   edi
c00206d9:	55                   	push   ebp
c00206da:	e8 2b fe ff ff       	call   c002050a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00206df:	83 c4 20             	add    esp,0x20
c00206e2:	6a 00                	push   0x0
c00206e4:	56                   	push   esi
c00206e5:	57                   	push   edi
c00206e6:	55                   	push   ebp
c00206e7:	e8 ca fa ff ff       	call   c00201b6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00206ec:	83 c4 10             	add    esp,0x10
c00206ef:	84 c0                	test   al,al
c00206f1:	79 27                	jns    c002071a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00206f3:	bb 01 00 00 00       	mov    ebx,0x1
c00206f8:	53                   	push   ebx
c00206f9:	56                   	push   esi
c00206fa:	57                   	push   edi
c00206fb:	55                   	push   ebp
c00206fc:	e8 93 fa ff ff       	call   c0020194 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0020701:	83 c4 10             	add    esp,0x10
c0020704:	66 40                	inc    ax
c0020706:	74 0c                	je     c0020714 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0020708:	53                   	push   ebx
c0020709:	56                   	push   esi
c002070a:	57                   	push   edi
c002070b:	55                   	push   ebp
c002070c:	e8 f9 fd ff ff       	call   c002050a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0020711:	83 c4 10             	add    esp,0x10
c0020714:	43                   	inc    ebx
c0020715:	83 fb 08             	cmp    ebx,0x8
c0020718:	75 de                	jne    c00206f8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002071a:	83 c4 0c             	add    esp,0xc
c002071d:	5b                   	pop    ebx
c002071e:	5e                   	pop    esi
c002071f:	5f                   	pop    edi
c0020720:	5d                   	pop    ebp
c0020721:	c3                   	ret    

c0020722 <PCI::detect()>:
c0020722:	56                   	push   esi
c0020723:	53                   	push   ebx
c0020724:	53                   	push   ebx
c0020725:	31 db                	xor    ebx,ebx
c0020727:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002072b:	6a 00                	push   0x0
c002072d:	6a 00                	push   0x0
c002072f:	6a 00                	push   0x0
c0020731:	56                   	push   esi
c0020732:	e8 7f fa ff ff       	call   c00201b6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0020737:	83 c4 10             	add    esp,0x10
c002073a:	a8 80                	test   al,0x80
c002073c:	75 21                	jne    c002075f <PCI::detect()+0x3d>
c002073e:	51                   	push   ecx
c002073f:	51                   	push   ecx
c0020740:	6a 00                	push   0x0
c0020742:	56                   	push   esi
c0020743:	e8 2e fc ff ff       	call   c0020376 <PCI::checkBus(unsigned char)>
c0020748:	83 c4 10             	add    esp,0x10
c002074b:	eb 24                	jmp    c0020771 <PCI::detect()+0x4f>
c002074d:	52                   	push   edx
c002074e:	52                   	push   edx
c002074f:	53                   	push   ebx
c0020750:	43                   	inc    ebx
c0020751:	56                   	push   esi
c0020752:	e8 1f fc ff ff       	call   c0020376 <PCI::checkBus(unsigned char)>
c0020757:	83 c4 10             	add    esp,0x10
c002075a:	83 fb 08             	cmp    ebx,0x8
c002075d:	74 12                	je     c0020771 <PCI::detect()+0x4f>
c002075f:	53                   	push   ebx
c0020760:	6a 00                	push   0x0
c0020762:	6a 00                	push   0x0
c0020764:	56                   	push   esi
c0020765:	e8 2a fa ff ff       	call   c0020194 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002076a:	83 c4 10             	add    esp,0x10
c002076d:	66 40                	inc    ax
c002076f:	74 dc                	je     c002074d <PCI::detect()+0x2b>
c0020771:	58                   	pop    eax
c0020772:	5b                   	pop    ebx
c0020773:	5e                   	pop    esi
c0020774:	c3                   	ret    
c0020775:	90                   	nop

c0020776 <IDE::close(int, int, void*)>:
c0020776:	83 c8 ff             	or     eax,0xffffffff
c0020779:	c3                   	ret    

c002077a <IDE::IDE()>:
c002077a:	83 ec 0c             	sub    esp,0xc
c002077d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020781:	83 ec 08             	sub    esp,0x8
c0020784:	68 30 8d 02 c0       	push   0xc0028d30
c0020789:	50                   	push   eax
c002078a:	e8 4d 32 ff ff       	call   c00139dc <HardDiskController::HardDiskController(char const*)>
c002078f:	83 c4 10             	add    esp,0x10
c0020792:	ba 70 8f 02 c0       	mov    edx,0xc0028f70
c0020797:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002079b:	89 10                	mov    DWORD PTR [eax],edx
c002079d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00207a1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00207a8:	90                   	nop
c00207a9:	83 c4 0c             	add    esp,0xc
c00207ac:	c3                   	ret    
c00207ad:	90                   	nop

c00207ae <IDE::prepareInterrupt(unsigned char)>:
c00207ae:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00207b3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00207b7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00207bf:	c3                   	ret    

c00207c0 <selectDrive(unsigned char, unsigned char)>:
c00207c0:	c3                   	ret    
c00207c1:	90                   	nop

c00207c2 <IDE::getBase(unsigned char)>:
c00207c2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00207c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00207cb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00207d3:	c3                   	ret    

c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00207d4:	55                   	push   ebp
c00207d5:	57                   	push   edi
c00207d6:	56                   	push   esi
c00207d7:	53                   	push   ebx
c00207d8:	83 ec 1c             	sub    esp,0x1c
c00207db:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00207df:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00207e3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00207e6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00207ea:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00207ee:	80 f9 03             	cmp    cl,0x3
c00207f1:	77 51                	ja     c0020844 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00207f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207f7:	0f b6 f2             	movzx  esi,dl
c00207fa:	0f b6 db             	movzx  ebx,bl
c00207fd:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0020800:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0020804:	83 ca 80             	or     edx,0xffffff80
c0020807:	0f b6 d2             	movzx  edx,dl
c002080a:	52                   	push   edx
c002080b:	6a 0c                	push   0xc
c002080d:	56                   	push   esi
c002080e:	57                   	push   edi
c002080f:	e8 c0 ff ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020814:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0020819:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002081d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0020821:	ee                   	out    dx,al
c0020822:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0020827:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002082b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002082f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020833:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002083b:	83 c4 2c             	add    esp,0x2c
c002083e:	5b                   	pop    ebx
c002083f:	5e                   	pop    esi
c0020840:	5f                   	pop    edi
c0020841:	5d                   	pop    ebp
c0020842:	eb 90                	jmp    c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020844:	80 fb 07             	cmp    bl,0x7
c0020847:	77 12                	ja     c002085b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0020849:	0f b6 d2             	movzx  edx,dl
c002084c:	0f b6 db             	movzx  ebx,bl
c002084f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0020857:	89 da                	mov    edx,ebx
c0020859:	eb 2f                	jmp    c002088a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002085b:	80 fb 0d             	cmp    bl,0xd
c002085e:	77 13                	ja     c0020873 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0020860:	0f b6 d2             	movzx  edx,dl
c0020863:	0f b6 db             	movzx  ebx,bl
c0020866:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002086d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0020871:	eb 17                	jmp    c002088a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0020873:	80 fb 15             	cmp    bl,0x15
c0020876:	77 13                	ja     c002088b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0020878:	0f b6 d2             	movzx  edx,dl
c002087b:	0f b6 db             	movzx  ebx,bl
c002087e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0020886:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002088a:	ee                   	out    dx,al
c002088b:	83 c4 1c             	add    esp,0x1c
c002088e:	5b                   	pop    ebx
c002088f:	5e                   	pop    esi
c0020890:	5f                   	pop    edi
c0020891:	5d                   	pop    ebp
c0020892:	c3                   	ret    
c0020893:	90                   	nop

c0020894 <IDE::read(unsigned char, unsigned char)>:
c0020894:	55                   	push   ebp
c0020895:	57                   	push   edi
c0020896:	56                   	push   esi
c0020897:	53                   	push   ebx
c0020898:	83 ec 1c             	sub    esp,0x1c
c002089b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002089f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00208a3:	8d 43 f8             	lea    eax,[ebx-0x8]
c00208a6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00208aa:	3c 03                	cmp    al,0x3
c00208ac:	77 43                	ja     c00208f1 <IDE::read(unsigned char, unsigned char)+0x5d>
c00208ae:	0f b6 f2             	movzx  esi,dl
c00208b1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00208b4:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00208b8:	83 c8 80             	or     eax,0xffffff80
c00208bb:	0f b6 c0             	movzx  eax,al
c00208be:	50                   	push   eax
c00208bf:	6a 0c                	push   0xc
c00208c1:	56                   	push   esi
c00208c2:	57                   	push   edi
c00208c3:	e8 0c ff ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208c8:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00208cd:	0f b6 c3             	movzx  eax,bl
c00208d0:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00208d4:	ec                   	in     al,dx
c00208d5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00208d9:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00208de:	52                   	push   edx
c00208df:	6a 0c                	push   0xc
c00208e1:	56                   	push   esi
c00208e2:	57                   	push   edi
c00208e3:	e8 ec fe ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00208e8:	83 c4 20             	add    esp,0x20
c00208eb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00208ef:	eb 49                	jmp    c002093a <IDE::read(unsigned char, unsigned char)+0xa6>
c00208f1:	80 fb 07             	cmp    bl,0x7
c00208f4:	77 12                	ja     c0020908 <IDE::read(unsigned char, unsigned char)+0x74>
c00208f6:	0f b6 d2             	movzx  edx,dl
c00208f9:	0f b6 c3             	movzx  eax,bl
c00208fc:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0020904:	89 c2                	mov    edx,eax
c0020906:	eb 31                	jmp    c0020939 <IDE::read(unsigned char, unsigned char)+0xa5>
c0020908:	80 fb 0d             	cmp    bl,0xd
c002090b:	77 13                	ja     c0020920 <IDE::read(unsigned char, unsigned char)+0x8c>
c002090d:	0f b6 d2             	movzx  edx,dl
c0020910:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0020917:	0f b6 d3             	movzx  edx,bl
c002091a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002091e:	eb 19                	jmp    c0020939 <IDE::read(unsigned char, unsigned char)+0xa5>
c0020920:	31 c0                	xor    eax,eax
c0020922:	80 fb 15             	cmp    bl,0x15
c0020925:	77 13                	ja     c002093a <IDE::read(unsigned char, unsigned char)+0xa6>
c0020927:	0f b6 d2             	movzx  edx,dl
c002092a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0020932:	0f b6 d3             	movzx  edx,bl
c0020935:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0020939:	ec                   	in     al,dx
c002093a:	83 c4 1c             	add    esp,0x1c
c002093d:	5b                   	pop    ebx
c002093e:	5e                   	pop    esi
c002093f:	5f                   	pop    edi
c0020940:	5d                   	pop    ebp
c0020941:	c3                   	ret    

c0020942 <IDE::waitInterrupt(unsigned char)>:
c0020942:	55                   	push   ebp
c0020943:	57                   	push   edi
c0020944:	56                   	push   esi
c0020945:	53                   	push   ebx
c0020946:	31 db                	xor    ebx,ebx
c0020948:	83 ec 0c             	sub    esp,0xc
c002094b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002094f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0020954:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002095c:	89 e8                	mov    eax,ebp
c002095e:	84 c0                	test   al,al
c0020960:	75 34                	jne    c0020996 <IDE::waitInterrupt(unsigned char)+0x54>
c0020962:	52                   	push   edx
c0020963:	6a 0c                	push   0xc
c0020965:	56                   	push   esi
c0020966:	57                   	push   edi
c0020967:	e8 28 ff ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c002096c:	83 c4 10             	add    esp,0x10
c002096f:	a8 01                	test   al,0x1
c0020971:	75 2b                	jne    c002099e <IDE::waitInterrupt(unsigned char)+0x5c>
c0020973:	f6 c3 04             	test   bl,0x4
c0020976:	75 16                	jne    c002098e <IDE::waitInterrupt(unsigned char)+0x4c>
c0020978:	83 fb 32             	cmp    ebx,0x32
c002097b:	7e 11                	jle    c002098e <IDE::waitInterrupt(unsigned char)+0x4c>
c002097d:	50                   	push   eax
c002097e:	50                   	push   eax
c002097f:	6a 00                	push   0x0
c0020981:	68 80 96 98 00       	push   0x989680
c0020986:	e8 fd b4 ff ff       	call   c001be88 <nanoSleep(unsigned long long)>
c002098b:	83 c4 10             	add    esp,0x10
c002098e:	83 fb 3c             	cmp    ebx,0x3c
c0020991:	74 0b                	je     c002099e <IDE::waitInterrupt(unsigned char)+0x5c>
c0020993:	43                   	inc    ebx
c0020994:	eb be                	jmp    c0020954 <IDE::waitInterrupt(unsigned char)+0x12>
c0020996:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002099e:	83 c4 0c             	add    esp,0xc
c00209a1:	89 e8                	mov    eax,ebp
c00209a3:	5b                   	pop    ebx
c00209a4:	5e                   	pop    esi
c00209a5:	5f                   	pop    edi
c00209a6:	5d                   	pop    ebp
c00209a7:	c3                   	ret    

c00209a8 <ideChannel0IRQHandler(regs*, void*)>:
c00209a8:	83 ec 10             	sub    esp,0x10
c00209ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00209af:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00209b6:	6a 07                	push   0x7
c00209b8:	6a 00                	push   0x0
c00209ba:	50                   	push   eax
c00209bb:	e8 d4 fe ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c00209c0:	83 c4 1c             	add    esp,0x1c
c00209c3:	c3                   	ret    

c00209c4 <ideChannel1IRQHandler(regs*, void*)>:
c00209c4:	83 ec 10             	sub    esp,0x10
c00209c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00209cb:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00209d2:	6a 07                	push   0x7
c00209d4:	6a 01                	push   0x1
c00209d6:	50                   	push   eax
c00209d7:	e8 b8 fe ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c00209dc:	83 c4 1c             	add    esp,0x1c
c00209df:	c3                   	ret    

c00209e0 <IDE::enableIRQs(unsigned char, bool)>:
c00209e0:	57                   	push   edi
c00209e1:	56                   	push   esi
c00209e2:	be 04 00 00 00       	mov    esi,0x4
c00209e7:	53                   	push   ebx
c00209e8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00209ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00209f1:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00209f6:	0f 94 c0             	sete   al
c00209f9:	d1 e0                	shl    eax,1
c00209fb:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0020a02:	0f b6 c0             	movzx  eax,al
c0020a05:	50                   	push   eax
c0020a06:	6a 0c                	push   0xc
c0020a08:	57                   	push   edi
c0020a09:	53                   	push   ebx
c0020a0a:	e8 c5 fd ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020a0f:	83 c4 10             	add    esp,0x10
c0020a12:	50                   	push   eax
c0020a13:	6a 0c                	push   0xc
c0020a15:	57                   	push   edi
c0020a16:	53                   	push   ebx
c0020a17:	e8 78 fe ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c0020a1c:	83 c4 10             	add    esp,0x10
c0020a1f:	4e                   	dec    esi
c0020a20:	75 f0                	jne    c0020a12 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0020a22:	5b                   	pop    ebx
c0020a23:	5e                   	pop    esi
c0020a24:	5f                   	pop    edi
c0020a25:	c3                   	ret    

c0020a26 <IDE::open(int, int, void*)>:
c0020a26:	55                   	push   ebp
c0020a27:	57                   	push   edi
c0020a28:	56                   	push   esi
c0020a29:	53                   	push   ebx
c0020a2a:	83 ec 1c             	sub    esp,0x1c
c0020a2d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0020a31:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0020a3a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0020a43:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0020a4a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0020a51:	0f 85 b0 02 00 00    	jne    c0020d07 <IDE::open(int, int, void*)+0x2e1>
c0020a57:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0020a5d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0020a61:	83 e0 7f             	and    eax,0x7f
c0020a64:	3c 05                	cmp    al,0x5
c0020a66:	74 04                	je     c0020a6c <IDE::open(int, int, void*)+0x46>
c0020a68:	3c 0f                	cmp    al,0xf
c0020a6a:	75 32                	jne    c0020a9e <IDE::open(int, int, void*)+0x78>
c0020a6c:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0020a72:	83 e0 fc             	and    eax,0xfffffffc
c0020a75:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0020a7c:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0020a82:	83 e0 fc             	and    eax,0xfffffffc
c0020a85:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0020a8c:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0020a92:	83 e0 fc             	and    eax,0xfffffffc
c0020a95:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0020a9c:	eb 14                	jmp    c0020ab2 <IDE::open(int, int, void*)+0x8c>
c0020a9e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0020aa8:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0020ab2:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0020ab9:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0020ac0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020ac4:	89 c6                	mov    esi,eax
c0020ac6:	bf f8 0c 00 00       	mov    edi,0xcf8
c0020acb:	c1 e6 10             	shl    esi,0x10
c0020ace:	89 e8                	mov    eax,ebp
c0020ad0:	89 fa                	mov    edx,edi
c0020ad2:	c1 e0 0b             	shl    eax,0xb
c0020ad5:	09 f0                	or     eax,esi
c0020ad7:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0020ade:	c1 e6 08             	shl    esi,0x8
c0020ae1:	09 c6                	or     esi,eax
c0020ae3:	89 f0                	mov    eax,esi
c0020ae5:	0d 08 00 00 80       	or     eax,0x80000008
c0020aea:	ef                   	out    dx,eax
c0020aeb:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0020af0:	89 ca                	mov    edx,ecx
c0020af2:	ed                   	in     eax,dx
c0020af3:	c1 e8 10             	shr    eax,0x10
c0020af6:	3d ff ff 00 00       	cmp    eax,0xffff
c0020afb:	0f 84 f5 00 00 00    	je     c0020bf6 <IDE::open(int, int, void*)+0x1d0>
c0020b01:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0020b07:	89 fa                	mov    edx,edi
c0020b09:	89 f0                	mov    eax,esi
c0020b0b:	ef                   	out    dx,eax
c0020b0c:	b0 fe                	mov    al,0xfe
c0020b0e:	89 ca                	mov    edx,ecx
c0020b10:	ee                   	out    dx,al
c0020b11:	89 f0                	mov    eax,esi
c0020b13:	89 fa                	mov    edx,edi
c0020b15:	ef                   	out    dx,eax
c0020b16:	89 ca                	mov    edx,ecx
c0020b18:	ed                   	in     eax,dx
c0020b19:	3c fe                	cmp    al,0xfe
c0020b1b:	0f 85 a9 00 00 00    	jne    c0020bca <IDE::open(int, int, void*)+0x1a4>
c0020b21:	8b 15 08 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a408
c0020b27:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0020b2e:	74 33                	je     c0020b63 <IDE::open(int, int, void*)+0x13d>
c0020b30:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0020b36:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0020b3a:	40                   	inc    eax
c0020b3b:	83 ec 0c             	sub    esp,0xc
c0020b3e:	0f b6 c0             	movzx  eax,al
c0020b41:	50                   	push   eax
c0020b42:	55                   	push   ebp
c0020b43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020b47:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0020b4d:	51                   	push   ecx
c0020b4e:	e8 f9 62 ff ff       	call   c0016e4c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0020b53:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0020b58:	83 c4 1c             	add    esp,0x1c
c0020b5b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0020b61:	eb 0a                	jmp    c0020b6d <IDE::open(int, int, void*)+0x147>
c0020b63:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0020b6d:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0020b74:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0020b7b:	c1 e1 10             	shl    ecx,0x10
c0020b7e:	c1 e0 08             	shl    eax,0x8
c0020b81:	bf f8 0c 00 00       	mov    edi,0xcf8
c0020b86:	09 c1                	or     ecx,eax
c0020b88:	89 fa                	mov    edx,edi
c0020b8a:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0020b91:	c1 e0 0b             	shl    eax,0xb
c0020b94:	09 c1                	or     ecx,eax
c0020b96:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0020b9c:	89 c8                	mov    eax,ecx
c0020b9e:	ef                   	out    dx,eax
c0020b9f:	be fc 0c 00 00       	mov    esi,0xcfc
c0020ba4:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0020baa:	89 f2                	mov    edx,esi
c0020bac:	ee                   	out    dx,al
c0020bad:	89 c8                	mov    eax,ecx
c0020baf:	89 fa                	mov    edx,edi
c0020bb1:	ef                   	out    dx,eax
c0020bb2:	89 f2                	mov    edx,esi
c0020bb4:	ed                   	in     eax,dx
c0020bb5:	0f b6 c0             	movzx  eax,al
c0020bb8:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0020bbe:	74 46                	je     c0020c06 <IDE::open(int, int, void*)+0x1e0>
c0020bc0:	83 ec 0c             	sub    esp,0xc
c0020bc3:	68 48 8d 02 c0       	push   0xc0028d48
c0020bc8:	eb 34                	jmp    c0020bfe <IDE::open(int, int, void*)+0x1d8>
c0020bca:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0020bd3:	75 17                	jne    c0020bec <IDE::open(int, int, void*)+0x1c6>
c0020bd5:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0020bda:	74 07                	je     c0020be3 <IDE::open(int, int, void*)+0x1bd>
c0020bdc:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0020be1:	75 09                	jne    c0020bec <IDE::open(int, int, void*)+0x1c6>
c0020be3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0020bea:	eb 1a                	jmp    c0020c06 <IDE::open(int, int, void*)+0x1e0>
c0020bec:	83 ec 0c             	sub    esp,0xc
c0020bef:	68 50 8d 02 c0       	push   0xc0028d50
c0020bf4:	eb 08                	jmp    c0020bfe <IDE::open(int, int, void*)+0x1d8>
c0020bf6:	83 ec 0c             	sub    esp,0xc
c0020bf9:	68 81 8d 02 c0       	push   0xc0028d81
c0020bfe:	e8 ea 7d ff ff       	call   c00189ed <Krnl::panic(char const*)>
c0020c03:	83 c4 10             	add    esp,0x10
c0020c06:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0020c0d:	79 1a                	jns    c0020c29 <IDE::open(int, int, void*)+0x203>
c0020c0f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0020c15:	83 e0 fc             	and    eax,0xfffffffc
c0020c18:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0020c1f:	83 c0 08             	add    eax,0x8
c0020c22:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0020c29:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0020c2f:	89 c2                	mov    edx,eax
c0020c31:	83 e2 0f             	and    edx,0xf
c0020c34:	66 83 fa 08          	cmp    dx,0x8
c0020c38:	75 0a                	jne    c0020c44 <IDE::open(int, int, void*)+0x21e>
c0020c3a:	83 e8 02             	sub    eax,0x2
c0020c3d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0020c44:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0020c4a:	89 c2                	mov    edx,eax
c0020c4c:	83 e2 0f             	and    edx,0xf
c0020c4f:	66 83 fa 08          	cmp    dx,0x8
c0020c53:	75 0a                	jne    c0020c5f <IDE::open(int, int, void*)+0x239>
c0020c55:	83 e8 02             	sub    eax,0x2
c0020c58:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0020c5f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0020c66:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0020c6d:	89 d0                	mov    eax,edx
c0020c6f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020c72:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020c76:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0020c7a:	8d 4a 01             	lea    ecx,[edx+0x1]
c0020c7d:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020c82:	0f b6 c9             	movzx  ecx,cl
c0020c85:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0020c8c:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0020c8f:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0020c93:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0020c97:	8d 50 02             	lea    edx,[eax+0x2]
c0020c9a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0020c9f:	0f b6 d2             	movzx  edx,dl
c0020ca2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0020ca8:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020cab:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020caf:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0020cb3:	8d 48 03             	lea    ecx,[eax+0x3]
c0020cb6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020cbb:	0f b6 c9             	movzx  ecx,cl
c0020cbe:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0020cc4:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0020cc7:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0020ccb:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0020ccf:	8d 50 04             	lea    edx,[eax+0x4]
c0020cd2:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0020cd8:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0020cdd:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0020ce4:	66 85 f6             	test   si,si
c0020ce7:	74 3e                	je     c0020d27 <IDE::open(int, int, void*)+0x301>
c0020ce9:	0f b6 d2             	movzx  edx,dl
c0020cec:	83 c0 05             	add    eax,0x5
c0020cef:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0020cf2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0020cf6:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0020cfa:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0020d00:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0020d05:	eb 20                	jmp    c0020d27 <IDE::open(int, int, void*)+0x301>
c0020d07:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0020d11:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0020d1b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0020d22:	e9 02 ff ff ff       	jmp    c0020c29 <IDE::open(int, int, void*)+0x203>
c0020d27:	52                   	push   edx
c0020d28:	52                   	push   edx
c0020d29:	6a 00                	push   0x0
c0020d2b:	53                   	push   ebx
c0020d2c:	e8 7d fa ff ff       	call   c00207ae <IDE::prepareInterrupt(unsigned char)>
c0020d31:	59                   	pop    ecx
c0020d32:	5e                   	pop    esi
c0020d33:	6a 01                	push   0x1
c0020d35:	53                   	push   ebx
c0020d36:	e8 73 fa ff ff       	call   c00207ae <IDE::prepareInterrupt(unsigned char)>
c0020d3b:	83 c4 0c             	add    esp,0xc
c0020d3e:	6a 00                	push   0x0
c0020d40:	6a 00                	push   0x0
c0020d42:	53                   	push   ebx
c0020d43:	e8 98 fc ff ff       	call   c00209e0 <IDE::enableIRQs(unsigned char, bool)>
c0020d48:	83 c4 0c             	add    esp,0xc
c0020d4b:	6a 00                	push   0x0
c0020d4d:	6a 01                	push   0x1
c0020d4f:	53                   	push   ebx
c0020d50:	e8 8b fc ff ff       	call   c00209e0 <IDE::enableIRQs(unsigned char, bool)>
c0020d55:	83 c4 10             	add    esp,0x10
c0020d58:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0020d5f:	74 40                	je     c0020da1 <IDE::open(int, int, void*)+0x37b>
c0020d61:	83 ec 0c             	sub    esp,0xc
c0020d64:	68 ab 8d 02 c0       	push   0xc0028dab
c0020d69:	e8 e1 14 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0020d6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020d71:	6a 01                	push   0x1
c0020d73:	68 a8 09 02 c0       	push   0xc00209a8
c0020d78:	6a 0e                	push   0xe
c0020d7a:	53                   	push   ebx
c0020d7b:	e8 2e 28 ff ff       	call   c00135ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020d80:	83 c4 14             	add    esp,0x14
c0020d83:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0020d89:	53                   	push   ebx
c0020d8a:	6a 01                	push   0x1
c0020d8c:	68 c4 09 02 c0       	push   0xc00209c4
c0020d91:	6a 0f                	push   0xf
c0020d93:	53                   	push   ebx
c0020d94:	e8 15 28 ff ff       	call   c00135ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020d99:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0020d9f:	eb 4a                	jmp    c0020deb <IDE::open(int, int, void*)+0x3c5>
c0020da1:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0020dab:	50                   	push   eax
c0020dac:	6a 0f                	push   0xf
c0020dae:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0020db4:	68 c7 8d 02 c0       	push   0xc0028dc7
c0020db9:	e8 91 14 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0020dbe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020dc1:	6a 00                	push   0x0
c0020dc3:	68 a8 09 02 c0       	push   0xc00209a8
c0020dc8:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0020dce:	53                   	push   ebx
c0020dcf:	e8 da 27 ff ff       	call   c00135ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020dd4:	83 c4 14             	add    esp,0x14
c0020dd7:	53                   	push   ebx
c0020dd8:	6a 00                	push   0x0
c0020dda:	68 c4 09 02 c0       	push   0xc00209c4
c0020ddf:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0020de5:	53                   	push   ebx
c0020de6:	e8 c3 27 ff ff       	call   c00135ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020deb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020ded:	83 c4 20             	add    esp,0x20
c0020df0:	83 ec 0c             	sub    esp,0xc
c0020df3:	53                   	push   ebx
c0020df4:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0020df7:	83 c4 0c             	add    esp,0xc
c0020dfa:	6a 07                	push   0x7
c0020dfc:	6a 00                	push   0x0
c0020dfe:	53                   	push   ebx
c0020dff:	e8 90 fa ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c0020e04:	83 c4 0c             	add    esp,0xc
c0020e07:	6a 07                	push   0x7
c0020e09:	6a 01                	push   0x1
c0020e0b:	53                   	push   ebx
c0020e0c:	e8 83 fa ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c0020e11:	83 c4 0c             	add    esp,0xc
c0020e14:	6a 01                	push   0x1
c0020e16:	6a 00                	push   0x0
c0020e18:	53                   	push   ebx
c0020e19:	e8 c2 fb ff ff       	call   c00209e0 <IDE::enableIRQs(unsigned char, bool)>
c0020e1e:	83 c4 0c             	add    esp,0xc
c0020e21:	6a 01                	push   0x1
c0020e23:	6a 01                	push   0x1
c0020e25:	53                   	push   ebx
c0020e26:	e8 b5 fb ff ff       	call   c00209e0 <IDE::enableIRQs(unsigned char, bool)>
c0020e2b:	83 c4 2c             	add    esp,0x2c
c0020e2e:	31 c0                	xor    eax,eax
c0020e30:	5b                   	pop    ebx
c0020e31:	5e                   	pop    esi
c0020e32:	5f                   	pop    edi
c0020e33:	5d                   	pop    ebp
c0020e34:	c3                   	ret    
c0020e35:	90                   	nop

c0020e36 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0020e36:	55                   	push   ebp
c0020e37:	57                   	push   edi
c0020e38:	56                   	push   esi
c0020e39:	53                   	push   ebx
c0020e3a:	83 ec 1c             	sub    esp,0x1c
c0020e3d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e41:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020e45:	8d 50 f8             	lea    edx,[eax-0x8]
c0020e48:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020e4c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0020e50:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020e54:	80 fa 03             	cmp    dl,0x3
c0020e57:	77 5d                	ja     c0020eb6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0020e59:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020e5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e61:	0f b6 db             	movzx  ebx,bl
c0020e64:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0020e67:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0020e6b:	83 ca 80             	or     edx,0xffffff80
c0020e6e:	0f b6 d2             	movzx  edx,dl
c0020e71:	52                   	push   edx
c0020e72:	6a 0c                	push   0xc
c0020e74:	53                   	push   ebx
c0020e75:	56                   	push   esi
c0020e76:	e8 59 f9 ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020e7b:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0020e80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0020e88:	0f b6 c0             	movzx  eax,al
c0020e8b:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0020e8f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020e91:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0020e96:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0020e9a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0020e9e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020ea2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0020eaa:	83 c4 2c             	add    esp,0x2c
c0020ead:	5b                   	pop    ebx
c0020eae:	5e                   	pop    esi
c0020eaf:	5f                   	pop    edi
c0020eb0:	5d                   	pop    ebp
c0020eb1:	e9 1e f9 ff ff       	jmp    c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020eb6:	3c 07                	cmp    al,0x7
c0020eb8:	77 10                	ja     c0020eca <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0020eba:	0f b6 db             	movzx  ebx,bl
c0020ebd:	0f b6 d0             	movzx  edx,al
c0020ec0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0020ec8:	eb 2d                	jmp    c0020ef7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0020eca:	3c 0d                	cmp    al,0xd
c0020ecc:	77 13                	ja     c0020ee1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0020ece:	0f b6 db             	movzx  ebx,bl
c0020ed1:	0f b6 c0             	movzx  eax,al
c0020ed4:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0020edb:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0020edf:	eb 16                	jmp    c0020ef7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0020ee1:	3c 15                	cmp    al,0x15
c0020ee3:	77 14                	ja     c0020ef9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0020ee5:	0f b6 db             	movzx  ebx,bl
c0020ee8:	0f b6 c0             	movzx  eax,al
c0020eeb:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0020ef3:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0020ef7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0020ef9:	83 c4 1c             	add    esp,0x1c
c0020efc:	5b                   	pop    ebx
c0020efd:	5e                   	pop    esi
c0020efe:	5f                   	pop    edi
c0020eff:	5d                   	pop    ebp
c0020f00:	c3                   	ret    
c0020f01:	90                   	nop

c0020f02 <IDE::detect()>:
c0020f02:	55                   	push   ebp
c0020f03:	57                   	push   edi
c0020f04:	56                   	push   esi
c0020f05:	53                   	push   ebx
c0020f06:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020f0c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0020f13:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0020f1a:	0f 85 be 02 00 00    	jne    c00211de <IDE::detect()+0x2dc>
c0020f20:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0020f27:	31 f6                	xor    esi,esi
c0020f29:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020f31:	31 ed                	xor    ebp,ebp
c0020f33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020f37:	c1 e0 06             	shl    eax,0x6
c0020f3a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0020f42:	89 e8                	mov    eax,ebp
c0020f44:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020f48:	c1 e0 04             	shl    eax,0x4
c0020f4b:	83 c8 a0             	or     eax,0xffffffa0
c0020f4e:	0f b6 c0             	movzx  eax,al
c0020f51:	50                   	push   eax
c0020f52:	6a 06                	push   0x6
c0020f54:	56                   	push   esi
c0020f55:	53                   	push   ebx
c0020f56:	e8 79 f8 ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020f5b:	83 c4 0c             	add    esp,0xc
c0020f5e:	6a 0c                	push   0xc
c0020f60:	56                   	push   esi
c0020f61:	53                   	push   ebx
c0020f62:	e8 2d f9 ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c0020f67:	83 c4 0c             	add    esp,0xc
c0020f6a:	6a 0c                	push   0xc
c0020f6c:	56                   	push   esi
c0020f6d:	53                   	push   ebx
c0020f6e:	e8 21 f9 ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c0020f73:	83 c4 0c             	add    esp,0xc
c0020f76:	6a 0c                	push   0xc
c0020f78:	56                   	push   esi
c0020f79:	53                   	push   ebx
c0020f7a:	e8 15 f9 ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c0020f7f:	83 c4 0c             	add    esp,0xc
c0020f82:	6a 0c                	push   0xc
c0020f84:	56                   	push   esi
c0020f85:	53                   	push   ebx
c0020f86:	e8 09 f9 ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c0020f8b:	68 ec 00 00 00       	push   0xec
c0020f90:	6a 07                	push   0x7
c0020f92:	56                   	push   esi
c0020f93:	53                   	push   ebx
c0020f94:	e8 3b f8 ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020f99:	83 c4 1c             	add    esp,0x1c
c0020f9c:	6a 0c                	push   0xc
c0020f9e:	56                   	push   esi
c0020f9f:	53                   	push   ebx
c0020fa0:	e8 ef f8 ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c0020fa5:	83 c4 0c             	add    esp,0xc
c0020fa8:	6a 0c                	push   0xc
c0020faa:	56                   	push   esi
c0020fab:	53                   	push   ebx
c0020fac:	e8 e3 f8 ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c0020fb1:	83 c4 0c             	add    esp,0xc
c0020fb4:	6a 0c                	push   0xc
c0020fb6:	56                   	push   esi
c0020fb7:	53                   	push   ebx
c0020fb8:	e8 d7 f8 ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c0020fbd:	83 c4 0c             	add    esp,0xc
c0020fc0:	6a 0c                	push   0xc
c0020fc2:	56                   	push   esi
c0020fc3:	53                   	push   ebx
c0020fc4:	e8 cb f8 ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c0020fc9:	83 c4 0c             	add    esp,0xc
c0020fcc:	6a 0c                	push   0xc
c0020fce:	56                   	push   esi
c0020fcf:	53                   	push   ebx
c0020fd0:	e8 bf f8 ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c0020fd5:	83 c4 10             	add    esp,0x10
c0020fd8:	84 c0                	test   al,al
c0020fda:	0f 84 8b 01 00 00    	je     c002116b <IDE::detect()+0x269>
c0020fe0:	31 ff                	xor    edi,edi
c0020fe2:	50                   	push   eax
c0020fe3:	6a 0c                	push   0xc
c0020fe5:	56                   	push   esi
c0020fe6:	53                   	push   ebx
c0020fe7:	e8 a8 f8 ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c0020fec:	83 c4 10             	add    esp,0x10
c0020fef:	a8 01                	test   al,0x1
c0020ff1:	0f 85 8e 01 00 00    	jne    c0021185 <IDE::detect()+0x283>
c0020ff7:	84 c0                	test   al,al
c0020ff9:	78 04                	js     c0020fff <IDE::detect()+0xfd>
c0020ffb:	a8 08                	test   al,0x8
c0020ffd:	75 27                	jne    c0021026 <IDE::detect()+0x124>
c0020fff:	47                   	inc    edi
c0021000:	81 ff 17 01 00 00    	cmp    edi,0x117
c0021006:	7e da                	jle    c0020fe2 <IDE::detect()+0xe0>
c0021008:	50                   	push   eax
c0021009:	50                   	push   eax
c002100a:	6a 00                	push   0x0
c002100c:	68 40 4b 4c 00       	push   0x4c4b40
c0021011:	e8 72 ae ff ff       	call   c001be88 <nanoSleep(unsigned long long)>
c0021016:	83 c4 10             	add    esp,0x10
c0021019:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002101f:	75 c1                	jne    c0020fe2 <IDE::detect()+0xe0>
c0021021:	e9 5f 01 00 00       	jmp    c0021185 <IDE::detect()+0x283>
c0021026:	31 c9                	xor    ecx,ecx
c0021028:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002102c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0021030:	83 ec 0c             	sub    esp,0xc
c0021033:	68 80 00 00 00       	push   0x80
c0021038:	57                   	push   edi
c0021039:	6a 00                	push   0x0
c002103b:	56                   	push   esi
c002103c:	53                   	push   ebx
c002103d:	e8 f4 fd ff ff       	call   c0020e36 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0021042:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0021047:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002104b:	89 d1                	mov    ecx,edx
c002104d:	c1 e0 06             	shl    eax,0x6
c0021050:	01 d8                	add    eax,ebx
c0021052:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0021059:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0021060:	89 f2                	mov    edx,esi
c0021062:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0021068:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002106c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0021072:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021076:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002107d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0021085:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002108c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0021094:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002109a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00210a1:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00210a7:	8d 54 24 58          	lea    edx,[esp+0x58]
c00210ab:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00210af:	83 c4 20             	add    esp,0x20
c00210b2:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00210b5:	83 c0 02             	add    eax,0x2
c00210b8:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00210be:	83 c7 02             	add    edi,0x2
c00210c1:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00210c4:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00210ca:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00210ce:	75 e2                	jne    c00210b2 <IDE::detect()+0x1b0>
c00210d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00210d4:	c1 e0 06             	shl    eax,0x6
c00210d7:	01 d8                	add    eax,ebx
c00210d9:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00210df:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00210e6:	66 c1 ea 09          	shr    dx,0x9
c00210ea:	83 e2 01             	and    edx,0x1
c00210ed:	84 c9                	test   cl,cl
c00210ef:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00210f5:	75 2f                	jne    c0021126 <IDE::detect()+0x224>
c00210f7:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00210fd:	85 c0                	test   eax,eax
c00210ff:	74 66                	je     c0021167 <IDE::detect()+0x265>
c0021101:	50                   	push   eax
c0021102:	55                   	push   ebp
c0021103:	56                   	push   esi
c0021104:	68 e3 8d 02 c0       	push   0xc0028de3
c0021109:	e8 41 11 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c002110e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0021115:	e8 46 10 ff ff       	call   c0012160 <operator new(unsigned long)>
c002111a:	89 c7                	mov    edi,eax
c002111c:	89 04 24             	mov    DWORD PTR [esp],eax
c002111f:	e8 e8 02 00 00       	call   c002140c <ATA::ATA()>
c0021124:	eb 28                	jmp    c002114e <IDE::detect()+0x24c>
c0021126:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002112c:	55                   	push   ebp
c002112d:	56                   	push   esi
c002112e:	68 12 8e 02 c0       	push   0xc0028e12
c0021133:	e8 17 11 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0021138:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002113f:	e8 1c 10 ff ff       	call   c0012160 <operator new(unsigned long)>
c0021144:	89 c7                	mov    edi,eax
c0021146:	89 04 24             	mov    DWORD PTR [esp],eax
c0021149:	e8 ee 08 00 00       	call   c0021a3c <ATAPI::ATAPI()>
c002114e:	5a                   	pop    edx
c002114f:	59                   	pop    ecx
c0021150:	57                   	push   edi
c0021151:	53                   	push   ebx
c0021152:	e8 03 25 ff ff       	call   c001365a <Device::addChild(Device*)>
c0021157:	8b 07                	mov    eax,DWORD PTR [edi]
c0021159:	53                   	push   ebx
c002115a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002115e:	6a 00                	push   0x0
c0021160:	57                   	push   edi
c0021161:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021164:	83 c4 20             	add    esp,0x20
c0021167:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002116b:	4d                   	dec    ebp
c002116c:	74 0a                	je     c0021178 <IDE::detect()+0x276>
c002116e:	bd 01 00 00 00       	mov    ebp,0x1
c0021173:	e9 bb fd ff ff       	jmp    c0020f33 <IDE::detect()+0x31>
c0021178:	4e                   	dec    esi
c0021179:	74 63                	je     c00211de <IDE::detect()+0x2dc>
c002117b:	be 01 00 00 00       	mov    esi,0x1
c0021180:	e9 ac fd ff ff       	jmp    c0020f31 <IDE::detect()+0x2f>
c0021185:	50                   	push   eax
c0021186:	6a 04                	push   0x4
c0021188:	56                   	push   esi
c0021189:	53                   	push   ebx
c002118a:	e8 05 f7 ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c002118f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0021193:	83 c4 0c             	add    esp,0xc
c0021196:	6a 05                	push   0x5
c0021198:	56                   	push   esi
c0021199:	53                   	push   ebx
c002119a:	e8 f5 f6 ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c002119f:	83 c4 10             	add    esp,0x10
c00211a2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00211a6:	80 fa 14             	cmp    dl,0x14
c00211a9:	75 04                	jne    c00211af <IDE::detect()+0x2ad>
c00211ab:	3c eb                	cmp    al,0xeb
c00211ad:	eb 07                	jmp    c00211b6 <IDE::detect()+0x2b4>
c00211af:	3c 96                	cmp    al,0x96
c00211b1:	75 b8                	jne    c002116b <IDE::detect()+0x269>
c00211b3:	80 fa 69             	cmp    dl,0x69
c00211b6:	75 b3                	jne    c002116b <IDE::detect()+0x269>
c00211b8:	68 a1 00 00 00       	push   0xa1
c00211bd:	6a 07                	push   0x7
c00211bf:	56                   	push   esi
c00211c0:	53                   	push   ebx
c00211c1:	e8 0e f6 ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00211c6:	5f                   	pop    edi
c00211c7:	58                   	pop    eax
c00211c8:	6a 00                	push   0x0
c00211ca:	68 40 42 0f 00       	push   0xf4240
c00211cf:	e8 b4 ac ff ff       	call   c001be88 <nanoSleep(unsigned long long)>
c00211d4:	83 c4 10             	add    esp,0x10
c00211d7:	b1 01                	mov    cl,0x1
c00211d9:	e9 4a fe ff ff       	jmp    c0021028 <IDE::detect()+0x126>
c00211de:	81 c4 1c 02 00 00    	add    esp,0x21c
c00211e4:	5b                   	pop    ebx
c00211e5:	5e                   	pop    esi
c00211e6:	5f                   	pop    edi
c00211e7:	5d                   	pop    ebp
c00211e8:	c3                   	ret    
c00211e9:	90                   	nop

c00211ea <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00211ea:	55                   	push   ebp
c00211eb:	57                   	push   edi
c00211ec:	56                   	push   esi
c00211ed:	53                   	push   ebx
c00211ee:	83 ec 1c             	sub    esp,0x1c
c00211f1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00211f5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00211f9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00211fd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021201:	88 c3                	mov    bl,al
c0021203:	84 c0                	test   al,al
c0021205:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021209:	0f 84 67 01 00 00    	je     c0021376 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c002120f:	83 ec 0c             	sub    esp,0xc
c0021212:	68 43 8e 02 c0       	push   0xc0028e43
c0021217:	e8 33 10 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c002121c:	83 c4 10             	add    esp,0x10
c002121f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021223:	3c 01                	cmp    al,0x1
c0021225:	75 17                	jne    c002123e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0021227:	83 ec 0c             	sub    esp,0xc
c002122a:	b3 13                	mov    bl,0x13
c002122c:	68 4f 8e 02 c0       	push   0xc0028e4f
c0021231:	e8 19 10 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0021236:	83 c4 10             	add    esp,0x10
c0021239:	e9 25 01 00 00       	jmp    c0021363 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002123e:	3c 02                	cmp    al,0x2
c0021240:	0f 85 ef 00 00 00    	jne    c0021335 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0021246:	d1 e6                	shl    esi,1
c0021248:	09 ee                	or     esi,ebp
c002124a:	52                   	push   edx
c002124b:	89 f0                	mov    eax,esi
c002124d:	6a 01                	push   0x1
c002124f:	0f b6 f0             	movzx  esi,al
c0021252:	c1 e6 06             	shl    esi,0x6
c0021255:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c002125d:	50                   	push   eax
c002125e:	57                   	push   edi
c002125f:	e8 30 f6 ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c0021264:	83 c4 10             	add    esp,0x10
c0021267:	89 c6                	mov    esi,eax
c0021269:	a8 01                	test   al,0x1
c002126b:	74 12                	je     c002127f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c002126d:	83 ec 0c             	sub    esp,0xc
c0021270:	b3 07                	mov    bl,0x7
c0021272:	68 64 8e 02 c0       	push   0xc0028e64
c0021277:	e8 d3 0f ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c002127c:	83 c4 10             	add    esp,0x10
c002127f:	f7 c6 02 00 00 00    	test   esi,0x2
c0021285:	74 12                	je     c0021299 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0021287:	83 ec 0c             	sub    esp,0xc
c002128a:	b3 03                	mov    bl,0x3
c002128c:	68 82 8e 02 c0       	push   0xc0028e82
c0021291:	e8 b9 0f ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0021296:	83 c4 10             	add    esp,0x10
c0021299:	f7 c6 04 00 00 00    	test   esi,0x4
c002129f:	74 12                	je     c00212b3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c00212a1:	83 ec 0c             	sub    esp,0xc
c00212a4:	b3 14                	mov    bl,0x14
c00212a6:	68 a2 8e 02 c0       	push   0xc0028ea2
c00212ab:	e8 9f 0f ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00212b0:	83 c4 10             	add    esp,0x10
c00212b3:	f7 c6 08 00 00 00    	test   esi,0x8
c00212b9:	74 12                	je     c00212cd <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00212bb:	83 ec 0c             	sub    esp,0xc
c00212be:	b3 03                	mov    bl,0x3
c00212c0:	68 82 8e 02 c0       	push   0xc0028e82
c00212c5:	e8 85 0f ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00212ca:	83 c4 10             	add    esp,0x10
c00212cd:	f7 c6 10 00 00 00    	test   esi,0x10
c00212d3:	74 12                	je     c00212e7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00212d5:	83 ec 0c             	sub    esp,0xc
c00212d8:	b3 15                	mov    bl,0x15
c00212da:	68 ba 8e 02 c0       	push   0xc0028eba
c00212df:	e8 6b 0f ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00212e4:	83 c4 10             	add    esp,0x10
c00212e7:	f7 c6 20 00 00 00    	test   esi,0x20
c00212ed:	74 12                	je     c0021301 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c00212ef:	83 ec 0c             	sub    esp,0xc
c00212f2:	b3 03                	mov    bl,0x3
c00212f4:	68 82 8e 02 c0       	push   0xc0028e82
c00212f9:	e8 51 0f ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00212fe:	83 c4 10             	add    esp,0x10
c0021301:	f7 c6 40 00 00 00    	test   esi,0x40
c0021307:	74 12                	je     c002131b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0021309:	83 ec 0c             	sub    esp,0xc
c002130c:	b3 16                	mov    bl,0x16
c002130e:	68 d4 8e 02 c0       	push   0xc0028ed4
c0021313:	e8 37 0f ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0021318:	83 c4 10             	add    esp,0x10
c002131b:	89 f0                	mov    eax,esi
c002131d:	84 c0                	test   al,al
c002131f:	79 42                	jns    c0021363 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021321:	83 ec 0c             	sub    esp,0xc
c0021324:	b3 0d                	mov    bl,0xd
c0021326:	68 f5 8e 02 c0       	push   0xc0028ef5
c002132b:	e8 1f 0f ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0021330:	83 c4 10             	add    esp,0x10
c0021333:	eb 2e                	jmp    c0021363 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021335:	3c 03                	cmp    al,0x3
c0021337:	75 14                	jne    c002134d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0021339:	83 ec 0c             	sub    esp,0xc
c002133c:	b3 17                	mov    bl,0x17
c002133e:	68 09 8f 02 c0       	push   0xc0028f09
c0021343:	e8 07 0f ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0021348:	83 c4 10             	add    esp,0x10
c002134b:	eb 16                	jmp    c0021363 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002134d:	3c 04                	cmp    al,0x4
c002134f:	75 12                	jne    c0021363 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0021351:	83 ec 0c             	sub    esp,0xc
c0021354:	b3 08                	mov    bl,0x8
c0021356:	68 1f 8f 02 c0       	push   0xc0028f1f
c002135b:	e8 ef 0e ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0021360:	83 c4 10             	add    esp,0x10
c0021363:	50                   	push   eax
c0021364:	50                   	push   eax
c0021365:	0f b6 c3             	movzx  eax,bl
c0021368:	50                   	push   eax
c0021369:	68 37 8f 02 c0       	push   0xc0028f37
c002136e:	e8 dc 0e ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0021373:	83 c4 10             	add    esp,0x10
c0021376:	83 c4 1c             	add    esp,0x1c
c0021379:	88 d8                	mov    al,bl
c002137b:	5b                   	pop    ebx
c002137c:	5e                   	pop    esi
c002137d:	5f                   	pop    edi
c002137e:	5d                   	pop    ebp
c002137f:	c3                   	ret    

c0021380 <IDE::polling(unsigned char, unsigned int)>:
c0021380:	57                   	push   edi
c0021381:	56                   	push   esi
c0021382:	53                   	push   ebx
c0021383:	bb 04 00 00 00       	mov    ebx,0x4
c0021388:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002138c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021391:	52                   	push   edx
c0021392:	6a 0c                	push   0xc
c0021394:	56                   	push   esi
c0021395:	57                   	push   edi
c0021396:	e8 f9 f4 ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c002139b:	83 c4 10             	add    esp,0x10
c002139e:	4b                   	dec    ebx
c002139f:	75 f0                	jne    c0021391 <IDE::polling(unsigned char, unsigned int)+0x11>
c00213a1:	bb a0 86 01 00       	mov    ebx,0x186a0
c00213a6:	50                   	push   eax
c00213a7:	6a 0c                	push   0xc
c00213a9:	56                   	push   esi
c00213aa:	57                   	push   edi
c00213ab:	e8 e4 f4 ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c00213b0:	83 c4 10             	add    esp,0x10
c00213b3:	a8 01                	test   al,0x1
c00213b5:	74 12                	je     c00213c9 <IDE::polling(unsigned char, unsigned int)+0x49>
c00213b7:	83 ec 0c             	sub    esp,0xc
c00213ba:	68 51 8f 02 c0       	push   0xc0028f51
c00213bf:	e8 8b 0e ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00213c4:	83 c4 10             	add    esp,0x10
c00213c7:	eb 17                	jmp    c00213e0 <IDE::polling(unsigned char, unsigned int)+0x60>
c00213c9:	a8 20                	test   al,0x20
c00213cb:	75 0f                	jne    c00213dc <IDE::polling(unsigned char, unsigned int)+0x5c>
c00213cd:	4b                   	dec    ebx
c00213ce:	74 10                	je     c00213e0 <IDE::polling(unsigned char, unsigned int)+0x60>
c00213d0:	84 c0                	test   al,al
c00213d2:	78 d2                	js     c00213a6 <IDE::polling(unsigned char, unsigned int)+0x26>
c00213d4:	a8 08                	test   al,0x8
c00213d6:	74 ce                	je     c00213a6 <IDE::polling(unsigned char, unsigned int)+0x26>
c00213d8:	31 c0                	xor    eax,eax
c00213da:	eb 06                	jmp    c00213e2 <IDE::polling(unsigned char, unsigned int)+0x62>
c00213dc:	b0 01                	mov    al,0x1
c00213de:	eb 02                	jmp    c00213e2 <IDE::polling(unsigned char, unsigned int)+0x62>
c00213e0:	b0 02                	mov    al,0x2
c00213e2:	5b                   	pop    ebx
c00213e3:	5e                   	pop    esi
c00213e4:	5f                   	pop    edi
c00213e5:	c3                   	ret    

c00213e6 <ATA::close(int, int, void*)>:
c00213e6:	83 ec 0c             	sub    esp,0xc
c00213e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213ed:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00213f3:	85 c0                	test   eax,eax
c00213f5:	74 0c                	je     c0021403 <ATA::close(int, int, void*)+0x1d>
c00213f7:	83 ec 0c             	sub    esp,0xc
c00213fa:	8b 10                	mov    edx,DWORD PTR [eax]
c00213fc:	50                   	push   eax
c00213fd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021400:	83 c4 10             	add    esp,0x10
c0021403:	31 c0                	xor    eax,eax
c0021405:	83 c4 0c             	add    esp,0xc
c0021408:	c3                   	ret    
c0021409:	90                   	nop

c002140a <ATA::powerSaving(PowerSavingLevel)>:
c002140a:	c3                   	ret    
c002140b:	90                   	nop

c002140c <ATA::ATA()>:
c002140c:	83 ec 0c             	sub    esp,0xc
c002140f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021413:	83 ec 04             	sub    esp,0x4
c0021416:	68 00 02 00 00       	push   0x200
c002141b:	68 94 8f 02 c0       	push   0xc0028f94
c0021420:	50                   	push   eax
c0021421:	e8 3a 26 ff ff       	call   c0013a60 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021426:	83 c4 10             	add    esp,0x10
c0021429:	ba c0 8f 02 c0       	mov    edx,0xc0028fc0
c002142e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021432:	89 10                	mov    DWORD PTR [eax],edx
c0021434:	90                   	nop
c0021435:	83 c4 0c             	add    esp,0xc
c0021438:	c3                   	ret    
c0021439:	90                   	nop

c002143a <ATA::flush(bool)>:
c002143a:	53                   	push   ebx
c002143b:	83 ec 08             	sub    esp,0x8
c002143e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0021443:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021447:	19 c0                	sbb    eax,eax
c0021449:	83 e0 fd             	and    eax,0xfffffffd
c002144c:	05 ea 00 00 00       	add    eax,0xea
c0021451:	50                   	push   eax
c0021452:	6a 07                	push   0x7
c0021454:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002145b:	50                   	push   eax
c002145c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021462:	e8 6d f3 ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021467:	83 c4 0c             	add    esp,0xc
c002146a:	6a 00                	push   0x0
c002146c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021473:	50                   	push   eax
c0021474:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002147a:	e8 01 ff ff ff       	call   c0021380 <IDE::polling(unsigned char, unsigned int)>
c002147f:	83 c4 18             	add    esp,0x18
c0021482:	5b                   	pop    ebx
c0021483:	c3                   	ret    

c0021484 <ATA::readyForCommand()>:
c0021484:	56                   	push   esi
c0021485:	53                   	push   ebx
c0021486:	31 db                	xor    ebx,ebx
c0021488:	50                   	push   eax
c0021489:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002148d:	50                   	push   eax
c002148e:	6a 0c                	push   0xc
c0021490:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0021497:	50                   	push   eax
c0021498:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002149e:	e8 f1 f3 ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c00214a3:	83 c4 10             	add    esp,0x10
c00214a6:	a8 88                	test   al,0x88
c00214a8:	74 23                	je     c00214cd <ATA::readyForCommand()+0x49>
c00214aa:	43                   	inc    ebx
c00214ab:	83 fb 63             	cmp    ebx,0x63
c00214ae:	7e dd                	jle    c002148d <ATA::readyForCommand()+0x9>
c00214b0:	51                   	push   ecx
c00214b1:	51                   	push   ecx
c00214b2:	6a 00                	push   0x0
c00214b4:	68 40 42 0f 00       	push   0xf4240
c00214b9:	e8 ca a9 ff ff       	call   c001be88 <nanoSleep(unsigned long long)>
c00214be:	83 c4 10             	add    esp,0x10
c00214c1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00214c7:	75 c4                	jne    c002148d <ATA::readyForCommand()+0x9>
c00214c9:	31 c0                	xor    eax,eax
c00214cb:	eb 02                	jmp    c00214cf <ATA::readyForCommand()+0x4b>
c00214cd:	b0 01                	mov    al,0x1
c00214cf:	5a                   	pop    edx
c00214d0:	5b                   	pop    ebx
c00214d1:	5e                   	pop    esi
c00214d2:	c3                   	ret    
c00214d3:	90                   	nop

c00214d4 <ATA::access(unsigned long long, int, void*, bool)>:
c00214d4:	55                   	push   ebp
c00214d5:	57                   	push   edi
c00214d6:	56                   	push   esi
c00214d7:	53                   	push   ebx
c00214d8:	83 ec 2c             	sub    esp,0x2c
c00214db:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00214df:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00214e3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00214e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00214eb:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00214ef:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00214f3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00214f7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00214fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021501:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0021507:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002150b:	c1 e0 06             	shl    eax,0x6
c002150e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0021516:	74 5d                	je     c0021575 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0021518:	89 fa                	mov    edx,edi
c002151a:	89 f0                	mov    eax,esi
c002151c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0021520:	c1 ea 1c             	shr    edx,0x1c
c0021523:	89 d1                	mov    ecx,edx
c0021525:	09 c1                	or     ecx,eax
c0021527:	74 25                	je     c002154e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0021529:	31 ed                	xor    ebp,ebp
c002152b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0021532:	89 fa                	mov    edx,edi
c0021534:	89 f0                	mov    eax,esi
c0021536:	0f ad d0             	shrd   eax,edx,cl
c0021539:	d3 ea                	shr    edx,cl
c002153b:	f6 c1 20             	test   cl,0x20
c002153e:	74 02                	je     c0021542 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0021540:	89 d0                	mov    eax,edx
c0021542:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0021546:	45                   	inc    ebp
c0021547:	83 fd 06             	cmp    ebp,0x6
c002154a:	75 df                	jne    c002152b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002154c:	eb 76                	jmp    c00215c4 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002154e:	89 f0                	mov    eax,esi
c0021550:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0021555:	89 fa                	mov    edx,edi
c0021557:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002155e:	0f ac d0 10          	shrd   eax,edx,0x10
c0021562:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0021567:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002156b:	c1 ee 18             	shr    esi,0x18
c002156e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0021573:	eb 56                	jmp    c00215cb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0021575:	6a 00                	push   0x0
c0021577:	6a 3f                	push   0x3f
c0021579:	57                   	push   edi
c002157a:	56                   	push   esi
c002157b:	e8 dc 1e 00 00       	call   c002345c <__umoddi3>
c0021580:	83 c4 10             	add    esp,0x10
c0021583:	40                   	inc    eax
c0021584:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0021588:	6a 00                	push   0x0
c002158a:	68 f0 03 00 00       	push   0x3f0
c002158f:	57                   	push   edi
c0021590:	56                   	push   esi
c0021591:	e8 c6 1d 00 00       	call   c002335c <__udivdi3>
c0021596:	83 c4 10             	add    esp,0x10
c0021599:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002159e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00215a5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00215aa:	6a 00                	push   0x0
c00215ac:	6a 3f                	push   0x3f
c00215ae:	57                   	push   edi
c00215af:	56                   	push   esi
c00215b0:	e8 a7 1d 00 00       	call   c002335c <__udivdi3>
c00215b5:	83 c4 10             	add    esp,0x10
c00215b8:	89 c6                	mov    esi,eax
c00215ba:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00215bf:	83 e6 0f             	and    esi,0xf
c00215c2:	eb 07                	jmp    c00215cb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00215c4:	31 f6                	xor    esi,esi
c00215c6:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00215cb:	bf 01 00 00 00       	mov    edi,0x1
c00215d0:	50                   	push   eax
c00215d1:	6a 00                	push   0x0
c00215d3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00215da:	50                   	push   eax
c00215db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00215df:	e8 fc f3 ff ff       	call   c00209e0 <IDE::enableIRQs(unsigned char, bool)>
c00215e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00215e7:	e8 98 fe ff ff       	call   c0021484 <ATA::readyForCommand()>
c00215ec:	83 c4 10             	add    esp,0x10
c00215ef:	84 c0                	test   al,al
c00215f1:	0f 84 50 02 00 00    	je     c0021847 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c00215f7:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00215fd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0021603:	c1 e0 04             	shl    eax,0x4
c0021606:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002160d:	09 c6                	or     esi,eax
c002160f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0021614:	75 05                	jne    c002161b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0021616:	83 ce a0             	or     esi,0xffffffa0
c0021619:	eb 03                	jmp    c002161e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002161b:	83 ce e0             	or     esi,0xffffffe0
c002161e:	89 f0                	mov    eax,esi
c0021620:	0f b6 f0             	movzx  esi,al
c0021623:	56                   	push   esi
c0021624:	6a 06                	push   0x6
c0021626:	51                   	push   ecx
c0021627:	52                   	push   edx
c0021628:	e8 a7 f1 ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002162d:	83 c4 10             	add    esp,0x10
c0021630:	6a 00                	push   0x0
c0021632:	6a 01                	push   0x1
c0021634:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002163b:	50                   	push   eax
c002163c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021642:	e8 8d f1 ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021647:	83 c4 10             	add    esp,0x10
c002164a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002164f:	75 6e                	jne    c00216bf <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0021651:	6a 00                	push   0x0
c0021653:	6a 08                	push   0x8
c0021655:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002165c:	50                   	push   eax
c002165d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021663:	e8 6c f1 ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021668:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002166d:	50                   	push   eax
c002166e:	6a 09                	push   0x9
c0021670:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021677:	50                   	push   eax
c0021678:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002167e:	e8 51 f1 ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021683:	83 c4 20             	add    esp,0x20
c0021686:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002168b:	50                   	push   eax
c002168c:	6a 0a                	push   0xa
c002168e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021695:	50                   	push   eax
c0021696:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002169c:	e8 33 f1 ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216a1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00216a6:	50                   	push   eax
c00216a7:	6a 0b                	push   0xb
c00216a9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216b0:	50                   	push   eax
c00216b1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00216b7:	e8 18 f1 ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216bc:	83 c4 20             	add    esp,0x20
c00216bf:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c00216c4:	50                   	push   eax
c00216c5:	6a 02                	push   0x2
c00216c7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216ce:	50                   	push   eax
c00216cf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00216d5:	e8 fa f0 ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216da:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c00216df:	50                   	push   eax
c00216e0:	6a 03                	push   0x3
c00216e2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00216e9:	50                   	push   eax
c00216ea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00216f0:	e8 df f0 ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00216f5:	83 c4 20             	add    esp,0x20
c00216f8:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00216fd:	50                   	push   eax
c00216fe:	6a 04                	push   0x4
c0021700:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021707:	50                   	push   eax
c0021708:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002170e:	e8 c1 f0 ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021713:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0021718:	50                   	push   eax
c0021719:	6a 05                	push   0x5
c002171b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021722:	50                   	push   eax
c0021723:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021729:	e8 a6 f0 ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002172e:	83 c4 20             	add    esp,0x20
c0021731:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0021736:	0f 94 c0             	sete   al
c0021739:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002173e:	74 09                	je     c0021749 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0021740:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0021747:	eb 07                	jmp    c0021750 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0021749:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0021750:	0f b6 c0             	movzx  eax,al
c0021753:	50                   	push   eax
c0021754:	6a 07                	push   0x7
c0021756:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002175d:	50                   	push   eax
c002175e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021764:	e8 6b f0 ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021769:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002176d:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0021771:	83 c4 10             	add    esp,0x10
c0021774:	85 f6                	test   esi,esi
c0021776:	0f 84 ac 00 00 00    	je     c0021828 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c002177c:	50                   	push   eax
c002177d:	6a 01                	push   0x1
c002177f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021786:	50                   	push   eax
c0021787:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002178d:	e8 ee fb ff ff       	call   c0021380 <IDE::polling(unsigned char, unsigned int)>
c0021792:	83 c4 10             	add    esp,0x10
c0021795:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002179b:	84 c0                	test   al,al
c002179d:	74 20                	je     c00217bf <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c002179f:	0f b6 f8             	movzx  edi,al
c00217a2:	0f b6 d2             	movzx  edx,dl
c00217a5:	57                   	push   edi
c00217a6:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00217ad:	50                   	push   eax
c00217ae:	52                   	push   edx
c00217af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217b5:	e8 30 fa ff ff       	call   c00211ea <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00217ba:	e9 85 00 00 00       	jmp    c0021844 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c00217bf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00217c4:	74 41                	je     c0021807 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c00217c6:	31 c9                	xor    ecx,ecx
c00217c8:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c00217cc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00217d0:	50                   	push   eax
c00217d1:	50                   	push   eax
c00217d2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00217d9:	50                   	push   eax
c00217da:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00217e0:	e8 dd ef ff ff       	call   c00207c2 <IDE::getBase(unsigned char)>
c00217e5:	89 c2                	mov    edx,eax
c00217e7:	89 e8                	mov    eax,ebp
c00217e9:	66 ef                	out    dx,ax
c00217eb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00217ef:	83 c4 10             	add    esp,0x10
c00217f2:	41                   	inc    ecx
c00217f3:	81 f9 00 01 00 00    	cmp    ecx,0x100
c00217f9:	75 cd                	jne    c00217c8 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c00217fb:	4e                   	dec    esi
c00217fc:	81 c7 00 02 00 00    	add    edi,0x200
c0021802:	e9 6d ff ff ff       	jmp    c0021774 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c0021807:	0f b6 d2             	movzx  edx,dl
c002180a:	51                   	push   ecx
c002180b:	51                   	push   ecx
c002180c:	52                   	push   edx
c002180d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021813:	e8 aa ef ff ff       	call   c00207c2 <IDE::getBase(unsigned char)>
c0021818:	b9 00 01 00 00       	mov    ecx,0x100
c002181d:	89 c2                	mov    edx,eax
c002181f:	fc                   	cld    
c0021820:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0021823:	83 c4 10             	add    esp,0x10
c0021826:	eb d3                	jmp    c00217fb <ATA::access(unsigned long long, int, void*, bool)+0x327>
c0021828:	31 ff                	xor    edi,edi
c002182a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002182f:	74 16                	je     c0021847 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0021831:	50                   	push   eax
c0021832:	50                   	push   eax
c0021833:	31 c0                	xor    eax,eax
c0021835:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002183a:	0f 94 c0             	sete   al
c002183d:	50                   	push   eax
c002183e:	53                   	push   ebx
c002183f:	e8 f6 fb ff ff       	call   c002143a <ATA::flush(bool)>
c0021844:	83 c4 10             	add    esp,0x10
c0021847:	83 c4 2c             	add    esp,0x2c
c002184a:	89 f8                	mov    eax,edi
c002184c:	5b                   	pop    ebx
c002184d:	5e                   	pop    esi
c002184e:	5f                   	pop    edi
c002184f:	5d                   	pop    ebp
c0021850:	c3                   	ret    
c0021851:	90                   	nop

c0021852 <ATA::read(unsigned long long, int, void*)>:
c0021852:	57                   	push   edi
c0021853:	b8 04 00 00 00       	mov    eax,0x4
c0021858:	56                   	push   esi
c0021859:	53                   	push   ebx
c002185a:	83 ec 10             	sub    esp,0x10
c002185d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0021861:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021865:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0021868:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002186c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021870:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0021876:	77 3b                	ja     c00218b3 <ATA::read(unsigned long long, int, void*)+0x61>
c0021878:	b8 06 00 00 00       	mov    eax,0x6
c002187d:	85 d2                	test   edx,edx
c002187f:	74 32                	je     c00218b3 <ATA::read(unsigned long long, int, void*)+0x61>
c0021881:	50                   	push   eax
c0021882:	50                   	push   eax
c0021883:	6a 00                	push   0x0
c0021885:	52                   	push   edx
c0021886:	53                   	push   ebx
c0021887:	57                   	push   edi
c0021888:	56                   	push   esi
c0021889:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002188d:	e8 42 fc ff ff       	call   c00214d4 <ATA::access(unsigned long long, int, void*, bool)>
c0021892:	83 c4 20             	add    esp,0x20
c0021895:	85 c0                	test   eax,eax
c0021897:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002189b:	75 11                	jne    c00218ae <ATA::read(unsigned long long, int, void*)+0x5c>
c002189d:	01 1d 08 c6 02 c0    	add    DWORD PTR ds:0xc002c608,ebx
c00218a3:	e8 7a e8 fe ff       	call   c0010122 <VgaText::updateDiskUsage()>
c00218a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218ac:	eb 05                	jmp    c00218b3 <ATA::read(unsigned long long, int, void*)+0x61>
c00218ae:	b8 01 00 00 00       	mov    eax,0x1
c00218b3:	83 c4 10             	add    esp,0x10
c00218b6:	5b                   	pop    ebx
c00218b7:	5e                   	pop    esi
c00218b8:	5f                   	pop    edi
c00218b9:	c3                   	ret    

c00218ba <ATA::write(unsigned long long, int, void*)>:
c00218ba:	57                   	push   edi
c00218bb:	b8 04 00 00 00       	mov    eax,0x4
c00218c0:	56                   	push   esi
c00218c1:	53                   	push   ebx
c00218c2:	83 ec 10             	sub    esp,0x10
c00218c5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00218c9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00218cd:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00218d0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00218d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00218d8:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00218de:	77 3b                	ja     c002191b <ATA::write(unsigned long long, int, void*)+0x61>
c00218e0:	b8 06 00 00 00       	mov    eax,0x6
c00218e5:	85 d2                	test   edx,edx
c00218e7:	74 32                	je     c002191b <ATA::write(unsigned long long, int, void*)+0x61>
c00218e9:	50                   	push   eax
c00218ea:	50                   	push   eax
c00218eb:	6a 01                	push   0x1
c00218ed:	52                   	push   edx
c00218ee:	53                   	push   ebx
c00218ef:	57                   	push   edi
c00218f0:	56                   	push   esi
c00218f1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00218f5:	e8 da fb ff ff       	call   c00214d4 <ATA::access(unsigned long long, int, void*, bool)>
c00218fa:	83 c4 20             	add    esp,0x20
c00218fd:	85 c0                	test   eax,eax
c00218ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021903:	75 11                	jne    c0021916 <ATA::write(unsigned long long, int, void*)+0x5c>
c0021905:	01 1d 04 c6 02 c0    	add    DWORD PTR ds:0xc002c604,ebx
c002190b:	e8 12 e8 fe ff       	call   c0010122 <VgaText::updateDiskUsage()>
c0021910:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021914:	eb 05                	jmp    c002191b <ATA::write(unsigned long long, int, void*)+0x61>
c0021916:	b8 01 00 00 00       	mov    eax,0x1
c002191b:	83 c4 10             	add    esp,0x10
c002191e:	5b                   	pop    ebx
c002191f:	5e                   	pop    esi
c0021920:	5f                   	pop    edi
c0021921:	c3                   	ret    

c0021922 <ATA::detectCHS()>:
c0021922:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021926:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002192c:	c1 e0 06             	shl    eax,0x6
c002192f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0021935:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002193f:	c7 44 24 04 a3 8f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028fa3
c0021947:	e9 a1 70 ff ff       	jmp    c00189ed <Krnl::panic(char const*)>

c002194c <ATA::open(int, int, void*)>:
c002194c:	53                   	push   ebx
c002194d:	83 ec 08             	sub    esp,0x8
c0021950:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021954:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021958:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002195c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0021962:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0021968:	c1 e0 06             	shl    eax,0x6
c002196b:	01 d0                	add    eax,edx
c002196d:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0021974:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002197a:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0021981:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002198b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0021991:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0021998:	75 0c                	jne    c00219a6 <ATA::open(int, int, void*)+0x5a>
c002199a:	83 ec 0c             	sub    esp,0xc
c002199d:	53                   	push   ebx
c002199e:	e8 7f ff ff ff       	call   c0021922 <ATA::detectCHS()>
c00219a3:	83 c4 10             	add    esp,0x10
c00219a6:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00219ac:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00219b2:	c1 e0 06             	shl    eax,0x6
c00219b5:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00219bc:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00219c6:	d1 e8                	shr    eax,1
c00219c8:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00219ce:	6a 04                	push   0x4
c00219d0:	6a 0c                	push   0xc
c00219d2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00219d9:	50                   	push   eax
c00219da:	52                   	push   edx
c00219db:	e8 f4 ed ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00219e0:	90                   	nop
c00219e1:	90                   	nop
c00219e2:	6a 00                	push   0x0
c00219e4:	6a 0c                	push   0xc
c00219e6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00219ed:	50                   	push   eax
c00219ee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00219f4:	e8 db ed ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00219f9:	83 c4 14             	add    esp,0x14
c00219fc:	53                   	push   ebx
c00219fd:	e8 c6 20 ff ff       	call   c0013ac8 <PhysicalDisk::startCache()>
c0021a02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021a05:	e8 74 40 ff ff       	call   c0015a7e <createPartitionsForDisk(PhysicalDisk*)>
c0021a0a:	31 c0                	xor    eax,eax
c0021a0c:	83 c4 18             	add    esp,0x18
c0021a0f:	5b                   	pop    ebx
c0021a10:	c3                   	ret    
c0021a11:	90                   	nop

c0021a12 <ATAPI::write(unsigned long long, int, void*)>:
c0021a12:	b8 03 00 00 00       	mov    eax,0x3
c0021a17:	c3                   	ret    

c0021a18 <ATAPI::close(int, int, void*)>:
c0021a18:	83 ec 0c             	sub    esp,0xc
c0021a1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a1f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021a25:	85 c0                	test   eax,eax
c0021a27:	74 0c                	je     c0021a35 <ATAPI::close(int, int, void*)+0x1d>
c0021a29:	83 ec 0c             	sub    esp,0xc
c0021a2c:	8b 10                	mov    edx,DWORD PTR [eax]
c0021a2e:	50                   	push   eax
c0021a2f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0021a32:	83 c4 10             	add    esp,0x10
c0021a35:	31 c0                	xor    eax,eax
c0021a37:	83 c4 0c             	add    esp,0xc
c0021a3a:	c3                   	ret    
c0021a3b:	90                   	nop

c0021a3c <ATAPI::ATAPI()>:
c0021a3c:	83 ec 0c             	sub    esp,0xc
c0021a3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a43:	83 ec 04             	sub    esp,0x4
c0021a46:	68 00 08 00 00       	push   0x800
c0021a4b:	68 ec 8f 02 c0       	push   0xc0028fec
c0021a50:	50                   	push   eax
c0021a51:	e8 0a 20 ff ff       	call   c0013a60 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0021a56:	83 c4 10             	add    esp,0x10
c0021a59:	ba 2c 90 02 c0       	mov    edx,0xc002902c
c0021a5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a62:	89 10                	mov    DWORD PTR [eax],edx
c0021a64:	90                   	nop
c0021a65:	83 c4 0c             	add    esp,0xc
c0021a68:	c3                   	ret    
c0021a69:	90                   	nop

c0021a6a <ATAPI::readyForCommand()>:
c0021a6a:	56                   	push   esi
c0021a6b:	53                   	push   ebx
c0021a6c:	31 db                	xor    ebx,ebx
c0021a6e:	50                   	push   eax
c0021a6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021a73:	50                   	push   eax
c0021a74:	6a 0c                	push   0xc
c0021a76:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0021a7d:	50                   	push   eax
c0021a7e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0021a84:	e8 0b ee ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c0021a89:	83 c4 10             	add    esp,0x10
c0021a8c:	a8 88                	test   al,0x88
c0021a8e:	74 23                	je     c0021ab3 <ATAPI::readyForCommand()+0x49>
c0021a90:	43                   	inc    ebx
c0021a91:	83 fb 63             	cmp    ebx,0x63
c0021a94:	7e dd                	jle    c0021a73 <ATAPI::readyForCommand()+0x9>
c0021a96:	51                   	push   ecx
c0021a97:	51                   	push   ecx
c0021a98:	6a 00                	push   0x0
c0021a9a:	68 40 42 0f 00       	push   0xf4240
c0021a9f:	e8 e4 a3 ff ff       	call   c001be88 <nanoSleep(unsigned long long)>
c0021aa4:	83 c4 10             	add    esp,0x10
c0021aa7:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0021aad:	75 c4                	jne    c0021a73 <ATAPI::readyForCommand()+0x9>
c0021aaf:	31 c0                	xor    eax,eax
c0021ab1:	eb 02                	jmp    c0021ab5 <ATAPI::readyForCommand()+0x4b>
c0021ab3:	b0 01                	mov    al,0x1
c0021ab5:	5a                   	pop    edx
c0021ab6:	5b                   	pop    ebx
c0021ab7:	5e                   	pop    esi
c0021ab8:	c3                   	ret    
c0021ab9:	90                   	nop

c0021aba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0021aba:	55                   	push   ebp
c0021abb:	57                   	push   edi
c0021abc:	56                   	push   esi
c0021abd:	53                   	push   ebx
c0021abe:	83 ec 20             	sub    esp,0x20
c0021ac1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021ac5:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0021ac9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0021acd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021ad1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021ad5:	6a 01                	push   0x1
c0021ad7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021ade:	50                   	push   eax
c0021adf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021ae5:	e8 f6 ee ff ff       	call   c00209e0 <IDE::enableIRQs(unsigned char, bool)>
c0021aea:	5e                   	pop    esi
c0021aeb:	58                   	pop    eax
c0021aec:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021af3:	50                   	push   eax
c0021af4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021afa:	e8 af ec ff ff       	call   c00207ae <IDE::prepareInterrupt(unsigned char)>
c0021aff:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021b02:	e8 63 ff ff ff       	call   c0021a6a <ATAPI::readyForCommand()>
c0021b07:	83 c4 10             	add    esp,0x10
c0021b0a:	84 c0                	test   al,al
c0021b0c:	75 0a                	jne    c0021b18 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0021b0e:	bb 01 00 00 00       	mov    ebx,0x1
c0021b13:	e9 57 02 00 00       	jmp    c0021d6f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021b18:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0021b1e:	c1 e0 04             	shl    eax,0x4
c0021b21:	0f b6 c0             	movzx  eax,al
c0021b24:	50                   	push   eax
c0021b25:	6a 06                	push   0x6
c0021b27:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b2e:	50                   	push   eax
c0021b2f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b35:	e8 9a ec ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b3a:	6a 00                	push   0x0
c0021b3c:	6a 01                	push   0x1
c0021b3e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b45:	50                   	push   eax
c0021b46:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b4c:	e8 83 ec ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b51:	83 c4 20             	add    esp,0x20
c0021b54:	0f b6 c3             	movzx  eax,bl
c0021b57:	0f b6 df             	movzx  ebx,bh
c0021b5a:	50                   	push   eax
c0021b5b:	6a 04                	push   0x4
c0021b5d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b64:	50                   	push   eax
c0021b65:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b6b:	e8 64 ec ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b70:	53                   	push   ebx
c0021b71:	6a 05                	push   0x5
c0021b73:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b7a:	50                   	push   eax
c0021b7b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b81:	e8 4e ec ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021b86:	83 c4 20             	add    esp,0x20
c0021b89:	68 a0 00 00 00       	push   0xa0
c0021b8e:	6a 07                	push   0x7
c0021b90:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021b97:	50                   	push   eax
c0021b98:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021b9e:	e8 31 ec ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021ba3:	83 c4 0c             	add    esp,0xc
c0021ba6:	6a 01                	push   0x1
c0021ba8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021baf:	50                   	push   eax
c0021bb0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021bb6:	e8 c5 f7 ff ff       	call   c0021380 <IDE::polling(unsigned char, unsigned int)>
c0021bbb:	83 c4 10             	add    esp,0x10
c0021bbe:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0021bc4:	84 c0                	test   al,al
c0021bc6:	74 23                	je     c0021beb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0021bc8:	0f b6 d8             	movzx  ebx,al
c0021bcb:	0f b6 d2             	movzx  edx,dl
c0021bce:	53                   	push   ebx
c0021bcf:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0021bd6:	50                   	push   eax
c0021bd7:	52                   	push   edx
c0021bd8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021bde:	e8 07 f6 ff ff       	call   c00211ea <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0021be3:	83 c4 10             	add    esp,0x10
c0021be6:	e9 84 01 00 00       	jmp    c0021d6f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021beb:	0f b6 d2             	movzx  edx,dl
c0021bee:	53                   	push   ebx
c0021bef:	53                   	push   ebx
c0021bf0:	52                   	push   edx
c0021bf1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021bf7:	e8 c6 eb ff ff       	call   c00207c2 <IDE::getBase(unsigned char)>
c0021bfc:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0021c00:	b9 06 00 00 00       	mov    ecx,0x6
c0021c05:	89 c2                	mov    edx,eax
c0021c07:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0021c0a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0021c0e:	83 c4 10             	add    esp,0x10
c0021c11:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021c17:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021c1e:	85 db                	test   ebx,ebx
c0021c20:	0f 84 ec 00 00 00    	je     c0021d12 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0021c26:	51                   	push   ecx
c0021c27:	51                   	push   ecx
c0021c28:	52                   	push   edx
c0021c29:	50                   	push   eax
c0021c2a:	e8 13 ed ff ff       	call   c0020942 <IDE::waitInterrupt(unsigned char)>
c0021c2f:	83 c4 10             	add    esp,0x10
c0021c32:	84 c0                	test   al,al
c0021c34:	0f 84 d4 fe ff ff    	je     c0021b0e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0021c3a:	56                   	push   esi
c0021c3b:	56                   	push   esi
c0021c3c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c43:	50                   	push   eax
c0021c44:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c4a:	e8 5f eb ff ff       	call   c00207ae <IDE::prepareInterrupt(unsigned char)>
c0021c4f:	83 c4 0c             	add    esp,0xc
c0021c52:	6a 04                	push   0x4
c0021c54:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c5b:	50                   	push   eax
c0021c5c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c62:	e8 2d ec ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c0021c67:	83 c4 0c             	add    esp,0xc
c0021c6a:	89 c6                	mov    esi,eax
c0021c6c:	6a 05                	push   0x5
c0021c6e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021c75:	50                   	push   eax
c0021c76:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021c7c:	e8 13 ec ff ff       	call   c0020894 <IDE::read(unsigned char, unsigned char)>
c0021c81:	89 f1                	mov    ecx,esi
c0021c83:	0f b6 c0             	movzx  eax,al
c0021c86:	0f b6 f1             	movzx  esi,cl
c0021c89:	c1 e0 08             	shl    eax,0x8
c0021c8c:	09 c6                	or     esi,eax
c0021c8e:	d1 fe                	sar    esi,1
c0021c90:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0021c94:	83 c4 10             	add    esp,0x10
c0021c97:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0021c9c:	74 41                	je     c0021cdf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0021c9e:	31 c9                	xor    ecx,ecx
c0021ca0:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021ca6:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021cad:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0021cb1:	75 0a                	jne    c0021cbd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0021cb3:	01 c9                	add    ecx,ecx
c0021cb5:	01 cd                	add    ebp,ecx
c0021cb7:	4b                   	dec    ebx
c0021cb8:	e9 54 ff ff ff       	jmp    c0021c11 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0021cbd:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0021cc2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0021cc6:	51                   	push   ecx
c0021cc7:	51                   	push   ecx
c0021cc8:	52                   	push   edx
c0021cc9:	50                   	push   eax
c0021cca:	e8 f3 ea ff ff       	call   c00207c2 <IDE::getBase(unsigned char)>
c0021ccf:	89 c2                	mov    edx,eax
c0021cd1:	89 f0                	mov    eax,esi
c0021cd3:	66 ef                	out    dx,ax
c0021cd5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021cd9:	83 c4 10             	add    esp,0x10
c0021cdc:	41                   	inc    ecx
c0021cdd:	eb c1                	jmp    c0021ca0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0021cdf:	31 f6                	xor    esi,esi
c0021ce1:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0021ce7:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0021cee:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0021cf2:	75 06                	jne    c0021cfa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0021cf4:	01 f6                	add    esi,esi
c0021cf6:	01 f5                	add    ebp,esi
c0021cf8:	eb bd                	jmp    c0021cb7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0021cfa:	51                   	push   ecx
c0021cfb:	51                   	push   ecx
c0021cfc:	52                   	push   edx
c0021cfd:	50                   	push   eax
c0021cfe:	e8 bf ea ff ff       	call   c00207c2 <IDE::getBase(unsigned char)>
c0021d03:	89 c2                	mov    edx,eax
c0021d05:	66 ed                	in     ax,dx
c0021d07:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0021d0c:	83 c4 10             	add    esp,0x10
c0021d0f:	46                   	inc    esi
c0021d10:	eb cf                	jmp    c0021ce1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0021d12:	51                   	push   ecx
c0021d13:	51                   	push   ecx
c0021d14:	52                   	push   edx
c0021d15:	50                   	push   eax
c0021d16:	e8 27 ec ff ff       	call   c0020942 <IDE::waitInterrupt(unsigned char)>
c0021d1b:	83 c4 10             	add    esp,0x10
c0021d1e:	84 c0                	test   al,al
c0021d20:	0f 84 e8 fd ff ff    	je     c0021b0e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0021d26:	bb a0 86 01 00       	mov    ebx,0x186a0
c0021d2b:	52                   	push   edx
c0021d2c:	52                   	push   edx
c0021d2d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021d34:	50                   	push   eax
c0021d35:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021d3b:	e8 6e ea ff ff       	call   c00207ae <IDE::prepareInterrupt(unsigned char)>
c0021d40:	83 c4 10             	add    esp,0x10
c0021d43:	50                   	push   eax
c0021d44:	50                   	push   eax
c0021d45:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0021d4c:	50                   	push   eax
c0021d4d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0021d53:	e8 6a ea ff ff       	call   c00207c2 <IDE::getBase(unsigned char)>
c0021d58:	8d 50 07             	lea    edx,[eax+0x7]
c0021d5b:	ec                   	in     al,dx
c0021d5c:	83 c4 10             	add    esp,0x10
c0021d5f:	a8 88                	test   al,0x88
c0021d61:	74 0a                	je     c0021d6d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0021d63:	4b                   	dec    ebx
c0021d64:	75 dd                	jne    c0021d43 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0021d66:	bb 02 00 00 00       	mov    ebx,0x2
c0021d6b:	eb 02                	jmp    c0021d6f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0021d6d:	31 db                	xor    ebx,ebx
c0021d6f:	83 c4 1c             	add    esp,0x1c
c0021d72:	89 d8                	mov    eax,ebx
c0021d74:	5b                   	pop    ebx
c0021d75:	5e                   	pop    esi
c0021d76:	5f                   	pop    edi
c0021d77:	5d                   	pop    ebp
c0021d78:	c3                   	ret    
c0021d79:	90                   	nop

c0021d7a <ATAPI::diskRemoved()>:
c0021d7a:	83 ec 18             	sub    esp,0x18
c0021d7d:	68 f7 8f 02 c0       	push   0xc0028ff7
c0021d82:	e8 c8 04 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0021d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021d8b:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0021d92:	83 c4 1c             	add    esp,0x1c
c0021d95:	c3                   	ret    

c0021d96 <ATAPI::eject()>:
c0021d96:	57                   	push   edi
c0021d97:	b9 03 00 00 00       	mov    ecx,0x3
c0021d9c:	53                   	push   ebx
c0021d9d:	83 ec 14             	sub    esp,0x14
c0021da0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021da4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021da8:	fc                   	cld    
c0021da9:	31 c0                	xor    eax,eax
c0021dab:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021dad:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0021db2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0021db7:	50                   	push   eax
c0021db8:	50                   	push   eax
c0021db9:	6a 00                	push   0x0
c0021dbb:	6a 00                	push   0x0
c0021dbd:	6a 00                	push   0x0
c0021dbf:	6a 02                	push   0x2
c0021dc1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021dc5:	50                   	push   eax
c0021dc6:	53                   	push   ebx
c0021dc7:	e8 ee fc ff ff       	call   c0021aba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021dcc:	83 c4 14             	add    esp,0x14
c0021dcf:	53                   	push   ebx
c0021dd0:	e8 a5 ff ff ff       	call   c0021d7a <ATAPI::diskRemoved()>
c0021dd5:	83 c4 24             	add    esp,0x24
c0021dd8:	5b                   	pop    ebx
c0021dd9:	5f                   	pop    edi
c0021dda:	c3                   	ret    
c0021ddb:	90                   	nop

c0021ddc <ATAPI::diskInserted()>:
c0021ddc:	53                   	push   ebx
c0021ddd:	83 ec 14             	sub    esp,0x14
c0021de0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021de4:	68 0d 90 02 c0       	push   0xc002900d
c0021de9:	e8 61 04 ff ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0021dee:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0021df5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021df8:	e8 cb 1c ff ff       	call   c0013ac8 <PhysicalDisk::startCache()>
c0021dfd:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0021e01:	83 c4 18             	add    esp,0x18
c0021e04:	5b                   	pop    ebx
c0021e05:	e9 74 3c ff ff       	jmp    c0015a7e <createPartitionsForDisk(PhysicalDisk*)>

c0021e0a <ATAPI::detectMedia()>:
c0021e0a:	56                   	push   esi
c0021e0b:	53                   	push   ebx
c0021e0c:	83 ec 28             	sub    esp,0x28
c0021e0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021e13:	6a 0c                	push   0xc
c0021e15:	6a 00                	push   0x0
c0021e17:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0021e1b:	56                   	push   esi
c0021e1c:	e8 ab e8 fd ff       	call   c00006cc <memset>
c0021e21:	58                   	pop    eax
c0021e22:	5a                   	pop    edx
c0021e23:	6a 00                	push   0x0
c0021e25:	6a 00                	push   0x0
c0021e27:	6a 00                	push   0x0
c0021e29:	6a 00                	push   0x0
c0021e2b:	56                   	push   esi
c0021e2c:	53                   	push   ebx
c0021e2d:	e8 88 fc ff ff       	call   c0021aba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021e32:	83 c4 1c             	add    esp,0x1c
c0021e35:	6a 0c                	push   0xc
c0021e37:	6a 00                	push   0x0
c0021e39:	56                   	push   esi
c0021e3a:	e8 8d e8 fd ff       	call   c00006cc <memset>
c0021e3f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0021e44:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0021e49:	59                   	pop    ecx
c0021e4a:	58                   	pop    eax
c0021e4b:	6a 01                	push   0x1
c0021e4d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021e51:	50                   	push   eax
c0021e52:	6a 00                	push   0x0
c0021e54:	6a 12                	push   0x12
c0021e56:	56                   	push   esi
c0021e57:	53                   	push   ebx
c0021e58:	e8 5d fc ff ff       	call   c0021aba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021e5d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0021e61:	83 c4 20             	add    esp,0x20
c0021e64:	83 e0 7f             	and    eax,0x7f
c0021e67:	3c 70                	cmp    al,0x70
c0021e69:	74 15                	je     c0021e80 <ATAPI::detectMedia()+0x76>
c0021e6b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021e72:	75 0c                	jne    c0021e80 <ATAPI::detectMedia()+0x76>
c0021e74:	83 ec 0c             	sub    esp,0xc
c0021e77:	53                   	push   ebx
c0021e78:	e8 5f ff ff ff       	call   c0021ddc <ATAPI::diskInserted()>
c0021e7d:	83 c4 10             	add    esp,0x10
c0021e80:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021e84:	83 e0 0f             	and    eax,0xf
c0021e87:	3c 02                	cmp    al,0x2
c0021e89:	75 1b                	jne    c0021ea6 <ATAPI::detectMedia()+0x9c>
c0021e8b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0021e90:	75 2d                	jne    c0021ebf <ATAPI::detectMedia()+0xb5>
c0021e92:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021e99:	74 24                	je     c0021ebf <ATAPI::detectMedia()+0xb5>
c0021e9b:	83 ec 0c             	sub    esp,0xc
c0021e9e:	53                   	push   ebx
c0021e9f:	e8 d6 fe ff ff       	call   c0021d7a <ATAPI::diskRemoved()>
c0021ea4:	eb 16                	jmp    c0021ebc <ATAPI::detectMedia()+0xb2>
c0021ea6:	84 c0                	test   al,al
c0021ea8:	75 15                	jne    c0021ebf <ATAPI::detectMedia()+0xb5>
c0021eaa:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0021eb1:	75 0c                	jne    c0021ebf <ATAPI::detectMedia()+0xb5>
c0021eb3:	83 ec 0c             	sub    esp,0xc
c0021eb6:	53                   	push   ebx
c0021eb7:	e8 20 ff ff ff       	call   c0021ddc <ATAPI::diskInserted()>
c0021ebc:	83 c4 10             	add    esp,0x10
c0021ebf:	83 c4 24             	add    esp,0x24
c0021ec2:	5b                   	pop    ebx
c0021ec3:	5e                   	pop    esi
c0021ec4:	c3                   	ret    
c0021ec5:	90                   	nop

c0021ec6 <ATAPI::open(int, int, void*)>:
c0021ec6:	53                   	push   ebx
c0021ec7:	83 ec 08             	sub    esp,0x8
c0021eca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021ece:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021ed2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021ed6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0021edc:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0021ee2:	c1 e0 06             	shl    eax,0x6
c0021ee5:	01 d0                	add    eax,edx
c0021ee7:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0021eee:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0021ef4:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0021efb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021f05:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0021f0b:	6a 04                	push   0x4
c0021f0d:	6a 0c                	push   0xc
c0021f0f:	51                   	push   ecx
c0021f10:	52                   	push   edx
c0021f11:	e8 be e8 ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021f16:	90                   	nop
c0021f17:	90                   	nop
c0021f18:	6a 00                	push   0x0
c0021f1a:	6a 0c                	push   0xc
c0021f1c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0021f23:	50                   	push   eax
c0021f24:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0021f2a:	e8 a5 e8 ff ff       	call   c00207d4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021f2f:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0021f36:	83 c4 14             	add    esp,0x14
c0021f39:	53                   	push   ebx
c0021f3a:	e8 cb fe ff ff       	call   c0021e0a <ATAPI::detectMedia()>
c0021f3f:	31 c0                	xor    eax,eax
c0021f41:	83 c4 18             	add    esp,0x18
c0021f44:	5b                   	pop    ebx
c0021f45:	c3                   	ret    

c0021f46 <ATAPI::read(unsigned long long, int, void*)>:
c0021f46:	55                   	push   ebp
c0021f47:	57                   	push   edi
c0021f48:	56                   	push   esi
c0021f49:	53                   	push   ebx
c0021f4a:	83 ec 1c             	sub    esp,0x1c
c0021f4d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021f51:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021f55:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0021f59:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0021f60:	74 41                	je     c0021fa3 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0021f62:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0021f66:	b9 03 00 00 00       	mov    ecx,0x3
c0021f6b:	fc                   	cld    
c0021f6c:	31 c0                	xor    eax,eax
c0021f6e:	86 fb                	xchg   bl,bh
c0021f70:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021f72:	c1 c3 10             	rol    ebx,0x10
c0021f75:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0021f7a:	89 e8                	mov    eax,ebp
c0021f7c:	86 fb                	xchg   bl,bh
c0021f7e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0021f82:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0021f86:	50                   	push   eax
c0021f87:	50                   	push   eax
c0021f88:	55                   	push   ebp
c0021f89:	c1 e5 0b             	shl    ebp,0xb
c0021f8c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f90:	6a 00                	push   0x0
c0021f92:	55                   	push   ebp
c0021f93:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f97:	50                   	push   eax
c0021f98:	56                   	push   esi
c0021f99:	e8 1c fb ff ff       	call   c0021aba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0021f9e:	83 c4 20             	add    esp,0x20
c0021fa1:	eb 1a                	jmp    c0021fbd <ATAPI::read(unsigned long long, int, void*)+0x77>
c0021fa3:	83 ec 0c             	sub    esp,0xc
c0021fa6:	56                   	push   esi
c0021fa7:	e8 5e fe ff ff       	call   c0021e0a <ATAPI::detectMedia()>
c0021fac:	83 c4 10             	add    esp,0x10
c0021faf:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0021fb6:	75 aa                	jne    c0021f62 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0021fb8:	b8 02 00 00 00       	mov    eax,0x2
c0021fbd:	83 c4 1c             	add    esp,0x1c
c0021fc0:	5b                   	pop    ebx
c0021fc1:	5e                   	pop    esi
c0021fc2:	5f                   	pop    edi
c0021fc3:	5d                   	pop    ebp
c0021fc4:	c3                   	ret    
c0021fc5:	90                   	nop

c0021fc6 <AVX::open(int, int, void*)>:
c0021fc6:	83 ec 0c             	sub    esp,0xc
c0021fc9:	e8 0a 10 00 00       	call   c0022fd8 <avxInit>
c0021fce:	b8 00 00 00 00       	mov    eax,0x0
c0021fd3:	83 c4 0c             	add    esp,0xc
c0021fd6:	c3                   	ret    
c0021fd7:	90                   	nop

c0021fd8 <AVX::close(int, int, void*)>:
c0021fd8:	83 ec 0c             	sub    esp,0xc
c0021fdb:	e8 f9 0f 00 00       	call   c0022fd9 <avxClose>
c0021fe0:	b8 00 00 00 00       	mov    eax,0x0
c0021fe5:	83 c4 0c             	add    esp,0xc
c0021fe8:	c3                   	ret    
c0021fe9:	90                   	nop

c0021fea <AVX::available()>:
c0021fea:	83 ec 0c             	sub    esp,0xc
c0021fed:	e8 de 0f 00 00       	call   c0022fd0 <avxDetect>
c0021ff2:	85 c0                	test   eax,eax
c0021ff4:	0f 95 c0             	setne  al
c0021ff7:	83 c4 0c             	add    esp,0xc
c0021ffa:	c3                   	ret    
c0021ffb:	90                   	nop

c0021ffc <AVX::save(void*)>:
c0021ffc:	83 ec 0c             	sub    esp,0xc
c0021fff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022003:	83 ec 0c             	sub    esp,0xc
c0022006:	50                   	push   eax
c0022007:	e8 ca 0f 00 00       	call   c0022fd6 <avxSave>
c002200c:	83 c4 10             	add    esp,0x10
c002200f:	90                   	nop
c0022010:	83 c4 0c             	add    esp,0xc
c0022013:	c3                   	ret    

c0022014 <AVX::load(void*)>:
c0022014:	83 ec 0c             	sub    esp,0xc
c0022017:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002201b:	83 ec 0c             	sub    esp,0xc
c002201e:	50                   	push   eax
c002201f:	e8 b3 0f 00 00       	call   c0022fd7 <avxLoad>
c0022024:	83 c4 10             	add    esp,0x10
c0022027:	90                   	nop
c0022028:	83 c4 0c             	add    esp,0xc
c002202b:	c3                   	ret    

c002202c <AVX::AVX()>:
c002202c:	83 ec 0c             	sub    esp,0xc
c002202f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022033:	83 ec 08             	sub    esp,0x8
c0022036:	68 58 90 02 c0       	push   0xc0029058
c002203b:	50                   	push   eax
c002203c:	e8 fd 1a ff ff       	call   c0013b3e <FPU::FPU(char const*)>
c0022041:	83 c4 10             	add    esp,0x10
c0022044:	ba 68 90 02 c0       	mov    edx,0xc0029068
c0022049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002204d:	89 10                	mov    DWORD PTR [eax],edx
c002204f:	90                   	nop
c0022050:	83 c4 0c             	add    esp,0xc
c0022053:	c3                   	ret    

c0022054 <MMX::available()>:
c0022054:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0022059:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002205f:	83 e0 20             	and    eax,0x20
c0022062:	84 c0                	test   al,al
c0022064:	0f 95 c0             	setne  al
c0022067:	c3                   	ret    

c0022068 <MMX::open(int, int, void*)>:
c0022068:	83 ec 0c             	sub    esp,0xc
c002206b:	e8 dc 0f 00 00       	call   c002304c <x87Init>
c0022070:	b8 00 00 00 00       	mov    eax,0x0
c0022075:	83 c4 0c             	add    esp,0xc
c0022078:	c3                   	ret    
c0022079:	90                   	nop

c002207a <MMX::close(int, int, void*)>:
c002207a:	83 ec 0c             	sub    esp,0xc
c002207d:	e8 e4 0f 00 00       	call   c0023066 <x87Close>
c0022082:	b8 00 00 00 00       	mov    eax,0x0
c0022087:	83 c4 0c             	add    esp,0xc
c002208a:	c3                   	ret    
c002208b:	90                   	nop

c002208c <MMX::save(void*)>:
c002208c:	83 ec 0c             	sub    esp,0xc
c002208f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022093:	83 ec 0c             	sub    esp,0xc
c0022096:	50                   	push   eax
c0022097:	e8 a5 0f 00 00       	call   c0023041 <x87Save>
c002209c:	83 c4 10             	add    esp,0x10
c002209f:	90                   	nop
c00220a0:	83 c4 0c             	add    esp,0xc
c00220a3:	c3                   	ret    

c00220a4 <MMX::load(void*)>:
c00220a4:	83 ec 0c             	sub    esp,0xc
c00220a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00220ab:	83 ec 0c             	sub    esp,0xc
c00220ae:	50                   	push   eax
c00220af:	e8 93 0f 00 00       	call   c0023047 <x87Load>
c00220b4:	83 c4 10             	add    esp,0x10
c00220b7:	90                   	nop
c00220b8:	83 c4 0c             	add    esp,0xc
c00220bb:	c3                   	ret    

c00220bc <MMX::MMX()>:
c00220bc:	83 ec 0c             	sub    esp,0xc
c00220bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220c3:	83 ec 08             	sub    esp,0x8
c00220c6:	68 98 90 02 c0       	push   0xc0029098
c00220cb:	50                   	push   eax
c00220cc:	e8 6d 1a ff ff       	call   c0013b3e <FPU::FPU(char const*)>
c00220d1:	83 c4 10             	add    esp,0x10
c00220d4:	ba a8 90 02 c0       	mov    edx,0xc00290a8
c00220d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220dd:	89 10                	mov    DWORD PTR [eax],edx
c00220df:	90                   	nop
c00220e0:	83 c4 0c             	add    esp,0xc
c00220e3:	c3                   	ret    

c00220e4 <SSE::open(int, int, void*)>:
c00220e4:	83 ec 0c             	sub    esp,0xc
c00220e7:	e8 1b 0f 00 00       	call   c0023007 <sseInit>
c00220ec:	b8 00 00 00 00       	mov    eax,0x0
c00220f1:	83 c4 0c             	add    esp,0xc
c00220f4:	c3                   	ret    
c00220f5:	90                   	nop

c00220f6 <SSE::close(int, int, void*)>:
c00220f6:	83 ec 0c             	sub    esp,0xc
c00220f9:	e8 19 0f 00 00       	call   c0023017 <sseClose>
c00220fe:	b8 00 00 00 00       	mov    eax,0x0
c0022103:	83 c4 0c             	add    esp,0xc
c0022106:	c3                   	ret    
c0022107:	90                   	nop

c0022108 <SSE::available()>:
c0022108:	83 ec 1c             	sub    esp,0x1c
c002210b:	e8 d0 0e 00 00       	call   c0022fe0 <sseDetect>
c0022110:	85 c0                	test   eax,eax
c0022112:	0f 95 c0             	setne  al
c0022115:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022119:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002211d:	83 c4 1c             	add    esp,0x1c
c0022120:	c3                   	ret    
c0022121:	90                   	nop

c0022122 <SSE::save(void*)>:
c0022122:	83 ec 0c             	sub    esp,0xc
c0022125:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022129:	83 ec 0c             	sub    esp,0xc
c002212c:	50                   	push   eax
c002212d:	e8 c9 0e 00 00       	call   c0022ffb <sseSave>
c0022132:	83 c4 10             	add    esp,0x10
c0022135:	90                   	nop
c0022136:	83 c4 0c             	add    esp,0xc
c0022139:	c3                   	ret    

c002213a <SSE::load(void*)>:
c002213a:	83 ec 0c             	sub    esp,0xc
c002213d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022141:	83 ec 0c             	sub    esp,0xc
c0022144:	50                   	push   eax
c0022145:	e8 b7 0e 00 00       	call   c0023001 <sseLoad>
c002214a:	83 c4 10             	add    esp,0x10
c002214d:	90                   	nop
c002214e:	83 c4 0c             	add    esp,0xc
c0022151:	c3                   	ret    

c0022152 <SSE::SSE()>:
c0022152:	83 ec 0c             	sub    esp,0xc
c0022155:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022159:	83 ec 08             	sub    esp,0x8
c002215c:	68 d8 90 02 c0       	push   0xc00290d8
c0022161:	50                   	push   eax
c0022162:	e8 d7 19 ff ff       	call   c0013b3e <FPU::FPU(char const*)>
c0022167:	83 c4 10             	add    esp,0x10
c002216a:	ba e8 90 02 c0       	mov    edx,0xc00290e8
c002216f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022173:	89 10                	mov    DWORD PTR [eax],edx
c0022175:	90                   	nop
c0022176:	83 c4 0c             	add    esp,0xc
c0022179:	c3                   	ret    

c002217a <x87::open(int, int, void*)>:
c002217a:	83 ec 0c             	sub    esp,0xc
c002217d:	e8 ca 0e 00 00       	call   c002304c <x87Init>
c0022182:	b8 00 00 00 00       	mov    eax,0x0
c0022187:	83 c4 0c             	add    esp,0xc
c002218a:	c3                   	ret    
c002218b:	90                   	nop

c002218c <x87::close(int, int, void*)>:
c002218c:	83 ec 0c             	sub    esp,0xc
c002218f:	e8 d2 0e 00 00       	call   c0023066 <x87Close>
c0022194:	b8 00 00 00 00       	mov    eax,0x0
c0022199:	83 c4 0c             	add    esp,0xc
c002219c:	c3                   	ret    
c002219d:	90                   	nop

c002219e <x87::available()>:
c002219e:	83 ec 0c             	sub    esp,0xc
c00221a1:	e8 80 0e 00 00       	call   c0023026 <x87Detect>
c00221a6:	85 c0                	test   eax,eax
c00221a8:	0f 95 c0             	setne  al
c00221ab:	83 c4 0c             	add    esp,0xc
c00221ae:	c3                   	ret    
c00221af:	90                   	nop

c00221b0 <x87::save(void*)>:
c00221b0:	83 ec 0c             	sub    esp,0xc
c00221b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00221b7:	83 ec 0c             	sub    esp,0xc
c00221ba:	50                   	push   eax
c00221bb:	e8 81 0e 00 00       	call   c0023041 <x87Save>
c00221c0:	83 c4 10             	add    esp,0x10
c00221c3:	90                   	nop
c00221c4:	83 c4 0c             	add    esp,0xc
c00221c7:	c3                   	ret    

c00221c8 <x87::load(void*)>:
c00221c8:	83 ec 0c             	sub    esp,0xc
c00221cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00221cf:	83 ec 0c             	sub    esp,0xc
c00221d2:	50                   	push   eax
c00221d3:	e8 6f 0e 00 00       	call   c0023047 <x87Load>
c00221d8:	83 c4 10             	add    esp,0x10
c00221db:	90                   	nop
c00221dc:	83 c4 0c             	add    esp,0xc
c00221df:	c3                   	ret    

c00221e0 <x87::x87()>:
c00221e0:	83 ec 0c             	sub    esp,0xc
c00221e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221e7:	83 ec 08             	sub    esp,0x8
c00221ea:	68 18 91 02 c0       	push   0xc0029118
c00221ef:	50                   	push   eax
c00221f0:	e8 49 19 ff ff       	call   c0013b3e <FPU::FPU(char const*)>
c00221f5:	83 c4 10             	add    esp,0x10
c00221f8:	ba 28 91 02 c0       	mov    edx,0xc0029128
c00221fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022201:	89 10                	mov    DWORD PTR [eax],edx
c0022203:	90                   	nop
c0022204:	83 c4 0c             	add    esp,0xc
c0022207:	c3                   	ret    

c0022208 <APIC::disable()>:
c0022208:	90                   	nop
c0022209:	c3                   	ret    

c002220a <APIC::close(int, int, void*)>:
c002220a:	55                   	push   ebp
c002220b:	89 e5                	mov    ebp,esp
c002220d:	83 ec 08             	sub    esp,0x8
c0022210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022213:	8b 00                	mov    eax,DWORD PTR [eax]
c0022215:	83 c0 3c             	add    eax,0x3c
c0022218:	8b 00                	mov    eax,DWORD PTR [eax]
c002221a:	83 ec 0c             	sub    esp,0xc
c002221d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022220:	ff d0                	call   eax
c0022222:	83 c4 10             	add    esp,0x10
c0022225:	b8 00 00 00 00       	mov    eax,0x0
c002222a:	c9                   	leave  
c002222b:	c3                   	ret    

c002222c <IOAPIC::close(int, int, void*)>:
c002222c:	b8 00 00 00 00       	mov    eax,0x0
c0022231:	c3                   	ret    

c0022232 <APIC::io_wait()>:
c0022232:	eb 00                	jmp    c0022234 <APIC::io_wait()+0x2>
c0022234:	eb 00                	jmp    c0022236 <APIC::io_wait()+0x4>
c0022236:	90                   	nop
c0022237:	c3                   	ret    

c0022238 <APIC::getBase()>:
c0022238:	55                   	push   ebp
c0022239:	89 e5                	mov    ebp,esp
c002223b:	83 ec 18             	sub    esp,0x18
c002223e:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0022243:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0022249:	83 e0 08             	and    eax,0x8
c002224c:	84 c0                	test   al,al
c002224e:	75 07                	jne    c0022257 <APIC::getBase()+0x1f>
c0022250:	b8 00 00 00 00       	mov    eax,0x0
c0022255:	eb 21                	jmp    c0022278 <APIC::getBase()+0x40>
c0022257:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c002225c:	83 ec 08             	sub    esp,0x8
c002225f:	6a 1b                	push   0x1b
c0022261:	50                   	push   eax
c0022262:	e8 7f c4 fe ff       	call   c000e6e6 <Computer::rdmsr(unsigned int)>
c0022267:	83 c4 10             	add    esp,0x10
c002226a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002226d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0022270:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022273:	25 00 f0 ff ff       	and    eax,0xfffff000
c0022278:	c9                   	leave  
c0022279:	c3                   	ret    

c002227a <APIC::eoi(unsigned char)>:
c002227a:	55                   	push   ebp
c002227b:	89 e5                	mov    ebp,esp
c002227d:	83 ec 28             	sub    esp,0x28
c0022280:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022283:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0022286:	83 ec 0c             	sub    esp,0xc
c0022289:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002228c:	e8 a7 ff ff ff       	call   c0022238 <APIC::getBase()>
c0022291:	83 c4 10             	add    esp,0x10
c0022294:	05 b0 00 00 00       	add    eax,0xb0
c0022299:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002229c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002229f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00222a5:	90                   	nop
c00222a6:	c9                   	leave  
c00222a7:	c3                   	ret    

c00222a8 <APIC::open(int, int, void*)>:
c00222a8:	55                   	push   ebp
c00222a9:	89 e5                	mov    ebp,esp
c00222ab:	57                   	push   edi
c00222ac:	56                   	push   esi
c00222ad:	53                   	push   ebx
c00222ae:	83 ec 1c             	sub    esp,0x1c
c00222b1:	83 ec 0c             	sub    esp,0xc
c00222b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00222b7:	e8 7c ff ff ff       	call   c0022238 <APIC::getBase()>
c00222bc:	83 c4 10             	add    esp,0x10
c00222bf:	05 f0 00 00 00       	add    eax,0xf0
c00222c4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00222c7:	83 ec 0c             	sub    esp,0xc
c00222ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00222cd:	e8 66 ff ff ff       	call   c0022238 <APIC::getBase()>
c00222d2:	83 c4 10             	add    esp,0x10
c00222d5:	89 c2                	mov    edx,eax
c00222d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00222da:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00222e0:	0f b6 f8             	movzx  edi,al
c00222e3:	89 d0                	mov    eax,edx
c00222e5:	ba 00 00 00 00       	mov    edx,0x0
c00222ea:	89 c1                	mov    ecx,eax
c00222ec:	80 e5 ff             	and    ch,0xff
c00222ef:	89 cb                	mov    ebx,ecx
c00222f1:	0f b6 f2             	movzx  esi,dl
c00222f4:	89 d8                	mov    eax,ebx
c00222f6:	89 f2                	mov    edx,esi
c00222f8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00222fb:	8d 5f 08             	lea    ebx,[edi+0x8]
c00222fe:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022302:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022306:	83 e0 00             	and    eax,0x0
c0022309:	09 d0                	or     eax,edx
c002230b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002230f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022312:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022318:	8d 50 01             	lea    edx,[eax+0x1]
c002231b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002231e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022324:	0f b6 d0             	movzx  edx,al
c0022327:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002232a:	83 c2 08             	add    edx,0x8
c002232d:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022331:	0f b6 c9             	movzx  ecx,cl
c0022334:	81 c9 00 00 01 00    	or     ecx,0x10000
c002233a:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002233e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022341:	8b 00                	mov    eax,DWORD PTR [eax]
c0022343:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0022346:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c002234d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0022350:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0022353:	89 10                	mov    DWORD PTR [eax],edx
c0022355:	b8 00 00 00 00       	mov    eax,0x0
c002235a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002235d:	5b                   	pop    ebx
c002235e:	5e                   	pop    esi
c002235f:	5f                   	pop    edi
c0022360:	5d                   	pop    ebp
c0022361:	c3                   	ret    

c0022362 <IOAPIC::IOAPIC()>:
c0022362:	83 ec 0c             	sub    esp,0xc
c0022365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022369:	83 ec 08             	sub    esp,0x8
c002236c:	68 58 91 02 c0       	push   0xc0029158
c0022371:	50                   	push   eax
c0022372:	e8 d3 14 ff ff       	call   c001384a <Device::Device(char const*)>
c0022377:	83 c4 10             	add    esp,0x10
c002237a:	ba 80 92 02 c0       	mov    edx,0xc0029280
c002237f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022383:	89 10                	mov    DWORD PTR [eax],edx
c0022385:	90                   	nop
c0022386:	83 c4 0c             	add    esp,0xc
c0022389:	c3                   	ret    

c002238a <APIC::APIC()>:
c002238a:	53                   	push   ebx
c002238b:	83 ec 18             	sub    esp,0x18
c002238e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022392:	83 ec 08             	sub    esp,0x8
c0022395:	68 60 91 02 c0       	push   0xc0029160
c002239a:	50                   	push   eax
c002239b:	e8 02 1c ff ff       	call   c0013fa2 <InterruptController::InterruptController(char const*)>
c00223a0:	83 c4 10             	add    esp,0x10
c00223a3:	ba 38 92 02 c0       	mov    edx,0xc0029238
c00223a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223ac:	89 10                	mov    DWORD PTR [eax],edx
c00223ae:	a0 60 c6 02 c0       	mov    al,ds:0xc002c660
c00223b3:	83 f0 01             	xor    eax,0x1
c00223b6:	84 c0                	test   al,al
c00223b8:	0f 84 96 00 00 00    	je     c0022454 <APIC::APIC()+0xca>
c00223be:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00223c3:	a0 b0 ac 02 c0       	mov    al,ds:0xc002acb0
c00223c8:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00223cc:	73 7f                	jae    c002244d <APIC::APIC()+0xc3>
c00223ce:	83 ec 0c             	sub    esp,0xc
c00223d1:	68 68 01 00 00       	push   0x168
c00223d6:	e8 85 fd fe ff       	call   c0012160 <operator new(unsigned long)>
c00223db:	83 c4 10             	add    esp,0x10
c00223de:	89 c3                	mov    ebx,eax
c00223e0:	83 ec 0c             	sub    esp,0xc
c00223e3:	53                   	push   ebx
c00223e4:	e8 79 ff ff ff       	call   c0022362 <IOAPIC::IOAPIC()>
c00223e9:	83 c4 10             	add    esp,0x10
c00223ec:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00223f0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00223f5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00223f9:	89 14 85 40 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39c0],edx
c0022400:	a1 20 c6 02 c0       	mov    eax,ds:0xc002c620
c0022405:	40                   	inc    eax
c0022406:	a3 20 c6 02 c0       	mov    ds:0xc002c620,eax
c002240b:	a1 08 a4 02 c0       	mov    eax,ds:0xc002a408
c0022410:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022416:	83 ec 08             	sub    esp,0x8
c0022419:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002241d:	50                   	push   eax
c002241e:	e8 37 12 ff ff       	call   c001365a <Device::addChild(Device*)>
c0022423:	83 c4 10             	add    esp,0x10
c0022426:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002242a:	8b 00                	mov    eax,DWORD PTR [eax]
c002242c:	83 c0 08             	add    eax,0x8
c002242f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022431:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0022436:	6a 00                	push   0x0
c0022438:	6a 00                	push   0x0
c002243a:	52                   	push   edx
c002243b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002243f:	ff d0                	call   eax
c0022441:	83 c4 10             	add    esp,0x10
c0022444:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0022448:	e9 76 ff ff ff       	jmp    c00223c3 <APIC::APIC()+0x39>
c002244d:	c6 05 60 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c660,0x1
c0022454:	90                   	nop
c0022455:	83 c4 18             	add    esp,0x18
c0022458:	5b                   	pop    ebx
c0022459:	c3                   	ret    

c002245a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002245a:	55                   	push   ebp
c002245b:	89 e5                	mov    ebp,esp
c002245d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022460:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022466:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0022469:	72 1d                	jb     c0022488 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002246b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002246e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0022474:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022477:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002247d:	01 d0                	add    eax,edx
c002247f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0022482:	73 04                	jae    c0022488 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0022484:	b0 01                	mov    al,0x1
c0022486:	eb 02                	jmp    c002248a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0022488:	b0 00                	mov    al,0x0
c002248a:	5d                   	pop    ebp
c002248b:	c3                   	ret    

c002248c <IOAPIC::read(int)>:
c002248c:	55                   	push   ebp
c002248d:	89 e5                	mov    ebp,esp
c002248f:	83 ec 10             	sub    esp,0x10
c0022492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022495:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002249b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002249e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00224a1:	0f b6 d0             	movzx  edx,al
c00224a4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00224a7:	89 10                	mov    DWORD PTR [eax],edx
c00224a9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00224ac:	83 c0 10             	add    eax,0x10
c00224af:	8b 00                	mov    eax,DWORD PTR [eax]
c00224b1:	c9                   	leave  
c00224b2:	c3                   	ret    
c00224b3:	90                   	nop

c00224b4 <IOAPIC::open(int, int, void*)>:
c00224b4:	55                   	push   ebp
c00224b5:	89 e5                	mov    ebp,esp
c00224b7:	57                   	push   edi
c00224b8:	56                   	push   esi
c00224b9:	53                   	push   ebx
c00224ba:	83 ec 0c             	sub    esp,0xc
c00224bd:	83 ec 0c             	sub    esp,0xc
c00224c0:	68 8b 91 02 c0       	push   0xc002918b
c00224c5:	e8 85 fd fe ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00224ca:	83 c4 10             	add    esp,0x10
c00224cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224d0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00224d3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00224d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224dc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00224e2:	8b 14 85 e0 ac 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5320]
c00224e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224ec:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00224f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224f5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00224fb:	8b 14 85 60 ad 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd52a0]
c0022502:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022505:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002250b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002250e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0022514:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022517:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002251d:	0f b6 f8             	movzx  edi,al
c0022520:	89 d0                	mov    eax,edx
c0022522:	ba 00 00 00 00       	mov    edx,0x0
c0022527:	89 c1                	mov    ecx,eax
c0022529:	80 e5 ff             	and    ch,0xff
c002252c:	89 cb                	mov    ebx,ecx
c002252e:	0f b6 f2             	movzx  esi,dl
c0022531:	89 d8                	mov    eax,ebx
c0022533:	89 f2                	mov    edx,esi
c0022535:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022538:	8d 5f 08             	lea    ebx,[edi+0x8]
c002253b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002253f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022543:	83 e0 00             	and    eax,0x0
c0022546:	09 d0                	or     eax,edx
c0022548:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002254c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002254f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022555:	8d 50 01             	lea    edx,[eax+0x1]
c0022558:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002255b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022561:	0f b6 d0             	movzx  edx,al
c0022564:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022567:	83 c2 08             	add    edx,0x8
c002256a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002256e:	0f b6 c9             	movzx  ecx,cl
c0022571:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0022577:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002257b:	83 ec 08             	sub    esp,0x8
c002257e:	6a 01                	push   0x1
c0022580:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022583:	e8 04 ff ff ff       	call   c002248c <IOAPIC::read(int)>
c0022588:	83 c4 10             	add    esp,0x10
c002258b:	c1 f8 10             	sar    eax,0x10
c002258e:	0f b6 c0             	movzx  eax,al
c0022591:	8d 50 01             	lea    edx,[eax+0x1]
c0022594:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022597:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002259d:	b8 00 00 00 00       	mov    eax,0x0
c00225a2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00225a5:	5b                   	pop    ebx
c00225a6:	5e                   	pop    esi
c00225a7:	5f                   	pop    edi
c00225a8:	5d                   	pop    ebp
c00225a9:	c3                   	ret    

c00225aa <IOAPIC::write(int, int)>:
c00225aa:	55                   	push   ebp
c00225ab:	89 e5                	mov    ebp,esp
c00225ad:	83 ec 10             	sub    esp,0x10
c00225b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00225b3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00225b9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00225bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00225bf:	0f b6 d0             	movzx  edx,al
c00225c2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00225c5:	89 10                	mov    DWORD PTR [eax],edx
c00225c7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00225ca:	8d 50 10             	lea    edx,[eax+0x10]
c00225cd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00225d0:	89 02                	mov    DWORD PTR [edx],eax
c00225d2:	90                   	nop
c00225d3:	c9                   	leave  
c00225d4:	c3                   	ret    
c00225d5:	90                   	nop

c00225d6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c00225d6:	55                   	push   ebp
c00225d7:	89 e5                	mov    ebp,esp
c00225d9:	83 ec 20             	sub    esp,0x20
c00225dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00225df:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00225e2:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00225e5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00225e8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00225eb:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00225ee:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00225f1:	88 d0                	mov    al,dl
c00225f3:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c00225f6:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c00225fa:	83 c0 08             	add    eax,0x8
c00225fd:	01 c0                	add    eax,eax
c00225ff:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0022602:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c0022606:	83 c0 08             	add    eax,0x8
c0022609:	01 c0                	add    eax,eax
c002260b:	40                   	inc    eax
c002260c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c002260f:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0022612:	50                   	push   eax
c0022613:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022616:	e8 71 fe ff ff       	call   c002248c <IOAPIC::read(int)>
c002261b:	83 c4 08             	add    esp,0x8
c002261e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0022621:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c0022628:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002262b:	c1 e0 18             	shl    eax,0x18
c002262e:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0022631:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0022634:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0022637:	52                   	push   edx
c0022638:	50                   	push   eax
c0022639:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002263c:	e8 69 ff ff ff       	call   c00225aa <IOAPIC::write(int, int)>
c0022641:	83 c4 0c             	add    esp,0xc
c0022644:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022647:	50                   	push   eax
c0022648:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002264b:	e8 3c fe ff ff       	call   c002248c <IOAPIC::read(int)>
c0022650:	83 c4 08             	add    esp,0x8
c0022653:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022656:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c002265d:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c0022664:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c002266b:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c0022672:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c0022676:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c0022679:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c002267c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002267f:	52                   	push   edx
c0022680:	50                   	push   eax
c0022681:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022684:	e8 21 ff ff ff       	call   c00225aa <IOAPIC::write(int, int)>
c0022689:	83 c4 0c             	add    esp,0xc
c002268c:	90                   	nop
c002268d:	c9                   	leave  
c002268e:	c3                   	ret    
c002268f:	90                   	nop

c0022690 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0022690:	55                   	push   ebp
c0022691:	89 e5                	mov    ebp,esp
c0022693:	56                   	push   esi
c0022694:	53                   	push   ebx
c0022695:	83 ec 20             	sub    esp,0x20
c0022698:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002269b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002269e:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c00226a2:	74 28                	je     c00226cc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c00226a4:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00226a8:	7f 12                	jg     c00226bc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c00226aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00226ad:	05 e0 96 02 c0       	add    eax,0xc00296e0
c00226b2:	8a 00                	mov    al,BYTE PTR [eax]
c00226b4:	0f b6 c0             	movzx  eax,al
c00226b7:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00226ba:	eb 10                	jmp    c00226cc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c00226bc:	83 ec 0c             	sub    esp,0xc
c00226bf:	68 9c 91 02 c0       	push   0xc002919c
c00226c4:	e8 24 63 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c00226c9:	83 c4 10             	add    esp,0x10
c00226cc:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00226d0:	a1 20 c6 02 c0       	mov    eax,ds:0xc002c620
c00226d5:	83 ec 08             	sub    esp,0x8
c00226d8:	50                   	push   eax
c00226d9:	68 d4 91 02 c0       	push   0xc00291d4
c00226de:	e8 6c fb fe ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00226e3:	83 c4 10             	add    esp,0x10
c00226e6:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c00226ed:	a1 20 c6 02 c0       	mov    eax,ds:0xc002c620
c00226f2:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c00226f5:	7d 58                	jge    c002274f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c00226f7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00226fa:	8b 04 85 40 c6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd39c0]
c0022701:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022704:	83 ec 08             	sub    esp,0x8
c0022707:	52                   	push   edx
c0022708:	50                   	push   eax
c0022709:	e8 4c fd ff ff       	call   c002245a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c002270e:	83 c4 10             	add    esp,0x10
c0022711:	84 c0                	test   al,al
c0022713:	74 35                	je     c002274a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c0022715:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022718:	8b 1c 85 40 c6 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd39c0]
c002271f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022722:	83 c0 20             	add    eax,0x20
c0022725:	0f b6 f0             	movzx  esi,al
c0022728:	e8 39 51 ff ff       	call   c0017866 <CPU::getNumber()>
c002272d:	99                   	cdq    
c002272e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0022731:	0f b6 c9             	movzx  ecx,cl
c0022734:	83 ec 0c             	sub    esp,0xc
c0022737:	56                   	push   esi
c0022738:	52                   	push   edx
c0022739:	50                   	push   eax
c002273a:	51                   	push   ecx
c002273b:	53                   	push   ebx
c002273c:	e8 95 fe ff ff       	call   c00225d6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c0022741:	83 c4 20             	add    esp,0x20
c0022744:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0022748:	eb 05                	jmp    c002274f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c002274a:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c002274d:	eb 9e                	jmp    c00226ed <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c002274f:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c0022752:	83 f0 01             	xor    eax,0x1
c0022755:	84 c0                	test   al,al
c0022757:	74 10                	je     c0022769 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c0022759:	83 ec 0c             	sub    esp,0xc
c002275c:	68 eb 91 02 c0       	push   0xc00291eb
c0022761:	e8 87 62 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c0022766:	83 c4 10             	add    esp,0x10
c0022769:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002276d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0022774:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c0022778:	7f 65                	jg     c00227df <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c002277a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002277d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022780:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022787:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002278a:	01 ca                	add    edx,ecx
c002278c:	83 c2 54             	add    edx,0x54
c002278f:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0022793:	85 c0                	test   eax,eax
c0022795:	75 43                	jne    c00227da <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c0022797:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002279a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002279d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00227a4:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00227a7:	01 ca                	add    edx,ecx
c00227a9:	8d 4a 54             	lea    ecx,[edx+0x54]
c00227ac:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00227af:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00227b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00227b6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00227b9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00227c0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00227c3:	01 ca                	add    edx,ecx
c00227c5:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00227cb:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00227ce:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00227d2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00227d5:	83 e8 20             	sub    eax,0x20
c00227d8:	eb 1a                	jmp    c00227f4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c00227da:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c00227dd:	eb 95                	jmp    c0022774 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c00227df:	83 ec 0c             	sub    esp,0xc
c00227e2:	68 f8 91 02 c0       	push   0xc00291f8
c00227e7:	e8 01 62 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c00227ec:	83 c4 10             	add    esp,0x10
c00227ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00227f4:	8d 65 f8             	lea    esp,[ebp-0x8]
c00227f7:	5b                   	pop    ebx
c00227f8:	5e                   	pop    esi
c00227f9:	5d                   	pop    ebp
c00227fa:	c3                   	ret    
c00227fb:	90                   	nop

c00227fc <PIC::disable()>:
c00227fc:	55                   	push   ebp
c00227fd:	89 e5                	mov    ebp,esp
c00227ff:	83 ec 10             	sub    esp,0x10
c0022802:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0022808:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002280c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002280f:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0022813:	ee                   	out    dx,al
c0022814:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002281a:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c002281e:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022821:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0022825:	ee                   	out    dx,al
c0022826:	90                   	nop
c0022827:	c9                   	leave  
c0022828:	c3                   	ret    
c0022829:	90                   	nop

c002282a <PIC::close(int, int, void*)>:
c002282a:	55                   	push   ebp
c002282b:	89 e5                	mov    ebp,esp
c002282d:	83 ec 08             	sub    esp,0x8
c0022830:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022833:	8b 00                	mov    eax,DWORD PTR [eax]
c0022835:	83 c0 3c             	add    eax,0x3c
c0022838:	8b 00                	mov    eax,DWORD PTR [eax]
c002283a:	83 ec 0c             	sub    esp,0xc
c002283d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022840:	ff d0                	call   eax
c0022842:	83 c4 10             	add    esp,0x10
c0022845:	b8 00 00 00 00       	mov    eax,0x0
c002284a:	c9                   	leave  
c002284b:	c3                   	ret    

c002284c <PIC::PIC()>:
c002284c:	83 ec 0c             	sub    esp,0xc
c002284f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022853:	83 ec 08             	sub    esp,0x8
c0022856:	68 a4 92 02 c0       	push   0xc00292a4
c002285b:	50                   	push   eax
c002285c:	e8 41 17 ff ff       	call   c0013fa2 <InterruptController::InterruptController(char const*)>
c0022861:	83 c4 10             	add    esp,0x10
c0022864:	ba d0 92 02 c0       	mov    edx,0xc00292d0
c0022869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002286d:	89 10                	mov    DWORD PTR [eax],edx
c002286f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022873:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022879:	0f b6 d0             	movzx  edx,al
c002287c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022880:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0022887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002288b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022891:	0f b6 d0             	movzx  edx,al
c0022894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022898:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002289d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228a7:	8d 50 01             	lea    edx,[eax+0x1]
c00228aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00228ae:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00228b4:	0f b6 d0             	movzx  edx,al
c00228b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228bb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00228bf:	83 e1 3f             	and    ecx,0x3f
c00228c2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00228c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228ca:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228d0:	0f b6 d0             	movzx  edx,al
c00228d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228d7:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00228de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228e8:	0f b6 d0             	movzx  edx,al
c00228eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228ef:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00228f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228f8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00228fe:	8d 50 01             	lea    edx,[eax+0x1]
c0022901:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022905:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002290b:	0f b6 d0             	movzx  edx,al
c002290e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022912:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022916:	83 e1 3f             	and    ecx,0x3f
c0022919:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002291d:	90                   	nop
c002291e:	83 c4 0c             	add    esp,0xc
c0022921:	c3                   	ret    

c0022922 <PIC::ioWait()>:
c0022922:	eb 00                	jmp    c0022924 <PIC::ioWait()+0x2>
c0022924:	eb 00                	jmp    c0022926 <PIC::ioWait()+0x4>
c0022926:	90                   	nop
c0022927:	c3                   	ret    

c0022928 <PIC::getIRQReg(int)>:
c0022928:	55                   	push   ebp
c0022929:	89 e5                	mov    ebp,esp
c002292b:	83 ec 10             	sub    esp,0x10
c002292e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022931:	0f b6 c0             	movzx  eax,al
c0022934:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002293a:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002293d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022940:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022944:	ee                   	out    dx,al
c0022945:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022948:	0f b6 c0             	movzx  eax,al
c002294b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022951:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0022954:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022957:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002295b:	ee                   	out    dx,al
c002295c:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0022962:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0022966:	89 c2                	mov    edx,eax
c0022968:	ec                   	in     al,dx
c0022969:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c002296c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c002296f:	0f b6 c0             	movzx  eax,al
c0022972:	c1 e0 08             	shl    eax,0x8
c0022975:	89 c1                	mov    ecx,eax
c0022977:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c002297d:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0022981:	89 c2                	mov    edx,eax
c0022983:	ec                   	in     al,dx
c0022984:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0022987:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002298a:	0f b6 c0             	movzx  eax,al
c002298d:	09 c8                	or     eax,ecx
c002298f:	c9                   	leave  
c0022990:	c3                   	ret    
c0022991:	90                   	nop

c0022992 <PIC::eoi(unsigned char)>:
c0022992:	55                   	push   ebp
c0022993:	89 e5                	mov    ebp,esp
c0022995:	83 ec 14             	sub    esp,0x14
c0022998:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002299b:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c002299e:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00229a2:	75 1e                	jne    c00229c2 <PIC::eoi(unsigned char)+0x30>
c00229a4:	6a 0b                	push   0xb
c00229a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00229a9:	e8 7a ff ff ff       	call   c0022928 <PIC::getIRQReg(int)>
c00229ae:	83 c4 08             	add    esp,0x8
c00229b1:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00229b5:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00229b9:	25 80 00 00 00       	and    eax,0x80
c00229be:	85 c0                	test   eax,eax
c00229c0:	74 5f                	je     c0022a21 <PIC::eoi(unsigned char)+0x8f>
c00229c2:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00229c6:	75 2d                	jne    c00229f5 <PIC::eoi(unsigned char)+0x63>
c00229c8:	6a 0b                	push   0xb
c00229ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00229cd:	e8 56 ff ff ff       	call   c0022928 <PIC::getIRQReg(int)>
c00229d2:	83 c4 08             	add    esp,0x8
c00229d5:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00229d9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00229dc:	66 85 c0             	test   ax,ax
c00229df:	78 14                	js     c00229f5 <PIC::eoi(unsigned char)+0x63>
c00229e1:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00229e7:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00229eb:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00229ee:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00229f2:	ee                   	out    dx,al
c00229f3:	eb 2d                	jmp    c0022a22 <PIC::eoi(unsigned char)+0x90>
c00229f5:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00229f9:	76 12                	jbe    c0022a0d <PIC::eoi(unsigned char)+0x7b>
c00229fb:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022a01:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0022a05:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022a08:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022a0c:	ee                   	out    dx,al
c0022a0d:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022a13:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0022a17:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022a1a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022a1e:	ee                   	out    dx,al
c0022a1f:	eb 01                	jmp    c0022a22 <PIC::eoi(unsigned char)+0x90>
c0022a21:	90                   	nop
c0022a22:	c9                   	leave  
c0022a23:	c3                   	ret    

c0022a24 <PIC::remap()>:
c0022a24:	55                   	push   ebp
c0022a25:	89 e5                	mov    ebp,esp
c0022a27:	83 ec 48             	sub    esp,0x48
c0022a2a:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0022a31:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0022a38:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0022a3e:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0022a41:	89 c2                	mov    edx,eax
c0022a43:	ec                   	in     al,dx
c0022a44:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0022a47:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0022a4a:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0022a4d:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0022a53:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0022a56:	89 c2                	mov    edx,eax
c0022a58:	ec                   	in     al,dx
c0022a59:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0022a5c:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0022a5f:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0022a62:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0022a68:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0022a6c:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0022a6f:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0022a72:	ee                   	out    dx,al
c0022a73:	83 ec 0c             	sub    esp,0xc
c0022a76:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022a79:	e8 a4 fe ff ff       	call   c0022922 <PIC::ioWait()>
c0022a7e:	83 c4 10             	add    esp,0x10
c0022a81:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0022a87:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0022a8b:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0022a8e:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0022a91:	ee                   	out    dx,al
c0022a92:	83 ec 0c             	sub    esp,0xc
c0022a95:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022a98:	e8 85 fe ff ff       	call   c0022922 <PIC::ioWait()>
c0022a9d:	83 c4 10             	add    esp,0x10
c0022aa0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0022aa3:	0f b6 c0             	movzx  eax,al
c0022aa6:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0022aac:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0022aaf:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0022ab2:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0022ab5:	ee                   	out    dx,al
c0022ab6:	83 ec 0c             	sub    esp,0xc
c0022ab9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022abc:	e8 61 fe ff ff       	call   c0022922 <PIC::ioWait()>
c0022ac1:	83 c4 10             	add    esp,0x10
c0022ac4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022ac7:	0f b6 c0             	movzx  eax,al
c0022aca:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0022ad0:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0022ad3:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0022ad6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0022ad9:	ee                   	out    dx,al
c0022ada:	83 ec 0c             	sub    esp,0xc
c0022add:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022ae0:	e8 3d fe ff ff       	call   c0022922 <PIC::ioWait()>
c0022ae5:	83 c4 10             	add    esp,0x10
c0022ae8:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0022aee:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0022af2:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0022af5:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0022af8:	ee                   	out    dx,al
c0022af9:	83 ec 0c             	sub    esp,0xc
c0022afc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022aff:	e8 1e fe ff ff       	call   c0022922 <PIC::ioWait()>
c0022b04:	83 c4 10             	add    esp,0x10
c0022b07:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0022b0d:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0022b11:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0022b14:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022b17:	ee                   	out    dx,al
c0022b18:	83 ec 0c             	sub    esp,0xc
c0022b1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b1e:	e8 ff fd ff ff       	call   c0022922 <PIC::ioWait()>
c0022b23:	83 c4 10             	add    esp,0x10
c0022b26:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0022b2c:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0022b30:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0022b33:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0022b36:	ee                   	out    dx,al
c0022b37:	83 ec 0c             	sub    esp,0xc
c0022b3a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b3d:	e8 e0 fd ff ff       	call   c0022922 <PIC::ioWait()>
c0022b42:	83 c4 10             	add    esp,0x10
c0022b45:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0022b4b:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0022b4f:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0022b52:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0022b55:	ee                   	out    dx,al
c0022b56:	83 ec 0c             	sub    esp,0xc
c0022b59:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022b5c:	e8 c1 fd ff ff       	call   c0022922 <PIC::ioWait()>
c0022b61:	83 c4 10             	add    esp,0x10
c0022b64:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0022b68:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0022b6e:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0022b71:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0022b74:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022b77:	ee                   	out    dx,al
c0022b78:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0022b7c:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0022b82:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0022b85:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0022b88:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0022b8b:	ee                   	out    dx,al
c0022b8c:	90                   	nop
c0022b8d:	c9                   	leave  
c0022b8e:	c3                   	ret    
c0022b8f:	90                   	nop

c0022b90 <PIC::open(int, int, void*)>:
c0022b90:	55                   	push   ebp
c0022b91:	89 e5                	mov    ebp,esp
c0022b93:	83 ec 18             	sub    esp,0x18
c0022b96:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0022b9c:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0022ba0:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022ba3:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0022ba7:	ee                   	out    dx,al
c0022ba8:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0022bae:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0022bb2:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0022bb5:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022bb9:	ee                   	out    dx,al
c0022bba:	83 ec 0c             	sub    esp,0xc
c0022bbd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022bc0:	e8 5f fe ff ff       	call   c0022a24 <PIC::remap()>
c0022bc5:	83 c4 10             	add    esp,0x10
c0022bc8:	b8 00 00 00 00       	mov    eax,0x0
c0022bcd:	c9                   	leave  
c0022bce:	c3                   	ret    
c0022bcf:	90                   	nop

c0022bd0 <APICTimer::close(int, int, void*)>:
c0022bd0:	b8 00 00 00 00       	mov    eax,0x0
c0022bd5:	c3                   	ret    

c0022bd6 <apicTimerHandler(regs*, void*)>:
c0022bd6:	83 ec 0c             	sub    esp,0xc
c0022bd9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022bdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0022bdf:	99                   	cdq    
c0022be0:	52                   	push   edx
c0022be1:	50                   	push   eax
c0022be2:	6a 00                	push   0x0
c0022be4:	68 00 ca 9a 3b       	push   0x3b9aca00
c0022be9:	e8 6e 07 00 00       	call   c002335c <__udivdi3>
c0022bee:	83 c4 10             	add    esp,0x10
c0022bf1:	83 ec 08             	sub    esp,0x8
c0022bf4:	52                   	push   edx
c0022bf5:	50                   	push   eax
c0022bf6:	e8 a4 31 ff ff       	call   c0015d9f <timerHandler(unsigned long long)>
c0022bfb:	83 c4 10             	add    esp,0x10
c0022bfe:	90                   	nop
c0022bff:	83 c4 0c             	add    esp,0xc
c0022c02:	c3                   	ret    
c0022c03:	90                   	nop

c0022c04 <APICTimer::write(int)>:
c0022c04:	53                   	push   ebx
c0022c05:	83 ec 28             	sub    esp,0x28
c0022c08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022c0c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022c10:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022c16:	e8 4f 4c ff ff       	call   c001786a <CPU::current()>
c0022c1b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022c21:	83 ec 0c             	sub    esp,0xc
c0022c24:	50                   	push   eax
c0022c25:	e8 0e f6 ff ff       	call   c0022238 <APIC::getBase()>
c0022c2a:	83 c4 10             	add    esp,0x10
c0022c2d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022c31:	a1 70 aa 02 c0       	mov    eax,ds:0xc002aa70
c0022c36:	8b 15 74 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa74
c0022c3c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022c40:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022c44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c48:	05 e0 03 00 00       	add    eax,0x3e0
c0022c4d:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c57:	05 80 03 00 00       	add    eax,0x380
c0022c5c:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0022c62:	fb                   	sti    
c0022c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c67:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022c6b:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0022c70:	83 d2 00             	adc    edx,0x0
c0022c73:	89 c1                	mov    ecx,eax
c0022c75:	89 d3                	mov    ebx,edx
c0022c77:	a1 70 aa 02 c0       	mov    eax,ds:0xc002aa70
c0022c7c:	8b 15 74 aa 02 c0    	mov    edx,DWORD PTR ds:0xc002aa74
c0022c82:	39 c8                	cmp    eax,ecx
c0022c84:	89 d0                	mov    eax,edx
c0022c86:	19 d8                	sbb    eax,ebx
c0022c88:	73 02                	jae    c0022c8c <APICTimer::write(int)+0x88>
c0022c8a:	eb d7                	jmp    c0022c63 <APICTimer::write(int)+0x5f>
c0022c8c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c90:	05 20 03 00 00       	add    eax,0x320
c0022c95:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0022c9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c9f:	05 90 03 00 00       	add    eax,0x390
c0022ca4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ca6:	f7 d0                	not    eax
c0022ca8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022cac:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022cb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022cb4:	ba 00 00 00 00       	mov    edx,0x0
c0022cb9:	f7 f3                	div    ebx
c0022cbb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022cbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022cc3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022cc9:	0d 00 00 02 00       	or     eax,0x20000
c0022cce:	89 c2                	mov    edx,eax
c0022cd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022cd4:	05 20 03 00 00       	add    eax,0x320
c0022cd9:	89 10                	mov    DWORD PTR [eax],edx
c0022cdb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022cdf:	05 e0 03 00 00       	add    eax,0x3e0
c0022ce4:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022cea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022cee:	05 80 03 00 00       	add    eax,0x380
c0022cf3:	89 c2                	mov    edx,eax
c0022cf5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022cf9:	89 02                	mov    DWORD PTR [edx],eax
c0022cfb:	90                   	nop
c0022cfc:	83 c4 28             	add    esp,0x28
c0022cff:	5b                   	pop    ebx
c0022d00:	c3                   	ret    
c0022d01:	90                   	nop

c0022d02 <APICTimer::open(int, int, void*)>:
c0022d02:	57                   	push   edi
c0022d03:	56                   	push   esi
c0022d04:	53                   	push   ebx
c0022d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d09:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d0b:	83 c0 24             	add    eax,0x24
c0022d0e:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d10:	83 ec 08             	sub    esp,0x8
c0022d13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d1b:	ff d0                	call   eax
c0022d1d:	83 c4 10             	add    esp,0x10
c0022d20:	e8 45 4b ff ff       	call   c001786a <CPU::current()>
c0022d25:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022d2b:	83 ec 0c             	sub    esp,0xc
c0022d2e:	50                   	push   eax
c0022d2f:	e8 04 f5 ff ff       	call   c0022238 <APIC::getBase()>
c0022d34:	83 c4 10             	add    esp,0x10
c0022d37:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0022d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d41:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022d47:	0f b6 f8             	movzx  edi,al
c0022d4a:	89 d0                	mov    eax,edx
c0022d4c:	ba 00 00 00 00       	mov    edx,0x0
c0022d51:	89 c1                	mov    ecx,eax
c0022d53:	80 e5 ff             	and    ch,0xff
c0022d56:	89 cb                	mov    ebx,ecx
c0022d58:	0f b6 f2             	movzx  esi,dl
c0022d5b:	89 d8                	mov    eax,ebx
c0022d5d:	89 f2                	mov    edx,esi
c0022d5f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022d63:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022d66:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022d6a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022d6e:	83 e0 00             	and    eax,0x0
c0022d71:	09 d0                	or     eax,edx
c0022d73:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022d77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d7b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022d81:	8d 50 01             	lea    edx,[eax+0x1]
c0022d84:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022d88:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022d8e:	0f b6 d0             	movzx  edx,al
c0022d91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d95:	83 c2 08             	add    edx,0x8
c0022d98:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022d9c:	0f b6 c9             	movzx  ecx,cl
c0022d9f:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022da5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022da9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022db1:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022db7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dbb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022dbf:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0022dc5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022dc9:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022dcf:	83 ec 0c             	sub    esp,0xc
c0022dd2:	51                   	push   ecx
c0022dd3:	6a 01                	push   0x1
c0022dd5:	68 d6 2b 02 c0       	push   0xc0022bd6
c0022dda:	52                   	push   edx
c0022ddb:	50                   	push   eax
c0022ddc:	e8 cd 07 ff ff       	call   c00135ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022de1:	83 c4 20             	add    esp,0x20
c0022de4:	89 c2                	mov    edx,eax
c0022de6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dea:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022df0:	b8 00 00 00 00       	mov    eax,0x0
c0022df5:	5b                   	pop    ebx
c0022df6:	5e                   	pop    esi
c0022df7:	5f                   	pop    edi
c0022df8:	c3                   	ret    
c0022df9:	90                   	nop

c0022dfa <APICTimer::APICTimer()>:
c0022dfa:	83 ec 0c             	sub    esp,0xc
c0022dfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e01:	83 ec 08             	sub    esp,0x8
c0022e04:	68 10 93 02 c0       	push   0xc0029310
c0022e09:	50                   	push   eax
c0022e0a:	e8 01 2f ff ff       	call   c0015d10 <Timer::Timer(char const*)>
c0022e0f:	83 c4 10             	add    esp,0x10
c0022e12:	ba 24 93 02 c0       	mov    edx,0xc0029324
c0022e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e1b:	89 10                	mov    DWORD PTR [eax],edx
c0022e1d:	90                   	nop
c0022e1e:	83 c4 0c             	add    esp,0xc
c0022e21:	c3                   	ret    

c0022e22 <PIT::write(int)>:
c0022e22:	83 ec 10             	sub    esp,0x10
c0022e25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022e29:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022e2d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022e33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022e37:	a3 64 c6 02 c0       	mov    ds:0xc002c664,eax
c0022e3c:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0022e41:	99                   	cdq    
c0022e42:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0022e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022e4a:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0022e51:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0022e56:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0022e5a:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0022e5f:	ee                   	out    dx,al
c0022e60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e64:	0f b6 c0             	movzx  eax,al
c0022e67:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0022e6e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022e72:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0022e76:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0022e7b:	ee                   	out    dx,al
c0022e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022e80:	c1 f8 08             	sar    eax,0x8
c0022e83:	0f b6 c0             	movzx  eax,al
c0022e86:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0022e8d:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0022e91:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0022e95:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0022e9a:	ee                   	out    dx,al
c0022e9b:	90                   	nop
c0022e9c:	83 c4 10             	add    esp,0x10
c0022e9f:	c3                   	ret    

c0022ea0 <pitHandler(regs*, void*)>:
c0022ea0:	83 ec 0c             	sub    esp,0xc
c0022ea3:	a1 64 c6 02 c0       	mov    eax,ds:0xc002c664
c0022ea8:	99                   	cdq    
c0022ea9:	52                   	push   edx
c0022eaa:	50                   	push   eax
c0022eab:	6a 00                	push   0x0
c0022ead:	68 00 ca 9a 3b       	push   0x3b9aca00
c0022eb2:	e8 a5 04 00 00       	call   c002335c <__udivdi3>
c0022eb7:	83 c4 10             	add    esp,0x10
c0022eba:	83 ec 08             	sub    esp,0x8
c0022ebd:	52                   	push   edx
c0022ebe:	50                   	push   eax
c0022ebf:	e8 db 2e ff ff       	call   c0015d9f <timerHandler(unsigned long long)>
c0022ec4:	83 c4 10             	add    esp,0x10
c0022ec7:	90                   	nop
c0022ec8:	83 c4 0c             	add    esp,0xc
c0022ecb:	c3                   	ret    

c0022ecc <PIT::open(int, int, void*)>:
c0022ecc:	83 ec 0c             	sub    esp,0xc
c0022ecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ed3:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ed5:	83 c0 24             	add    eax,0x24
c0022ed8:	8b 00                	mov    eax,DWORD PTR [eax]
c0022eda:	83 ec 08             	sub    esp,0x8
c0022edd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ee1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022ee5:	ff d0                	call   eax
c0022ee7:	83 c4 10             	add    esp,0x10
c0022eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eee:	83 ec 0c             	sub    esp,0xc
c0022ef1:	6a 00                	push   0x0
c0022ef3:	6a 01                	push   0x1
c0022ef5:	68 a0 2e 02 c0       	push   0xc0022ea0
c0022efa:	6a 00                	push   0x0
c0022efc:	50                   	push   eax
c0022efd:	e8 ac 06 ff ff       	call   c00135ae <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022f02:	83 c4 20             	add    esp,0x20
c0022f05:	89 c2                	mov    edx,eax
c0022f07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f0b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022f11:	b8 00 00 00 00       	mov    eax,0x0
c0022f16:	83 c4 0c             	add    esp,0xc
c0022f19:	c3                   	ret    

c0022f1a <PIT::close(int, int, void*)>:
c0022f1a:	83 ec 0c             	sub    esp,0xc
c0022f1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f21:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0022f2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f2f:	6a 01                	push   0x1
c0022f31:	68 a0 2e 02 c0       	push   0xc0022ea0
c0022f36:	6a 00                	push   0x0
c0022f38:	50                   	push   eax
c0022f39:	e8 ce 06 ff ff       	call   c001360c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0022f3e:	83 c4 10             	add    esp,0x10
c0022f41:	b8 00 00 00 00       	mov    eax,0x0
c0022f46:	83 c4 0c             	add    esp,0xc
c0022f49:	c3                   	ret    

c0022f4a <PIT::PIT()>:
c0022f4a:	83 ec 0c             	sub    esp,0xc
c0022f4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f51:	83 ec 08             	sub    esp,0x8
c0022f54:	68 4c 93 02 c0       	push   0xc002934c
c0022f59:	50                   	push   eax
c0022f5a:	e8 b1 2d ff ff       	call   c0015d10 <Timer::Timer(char const*)>
c0022f5f:	83 c4 10             	add    esp,0x10
c0022f62:	ba 74 93 02 c0       	mov    edx,0xc0029374
c0022f67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f6b:	89 10                	mov    DWORD PTR [eax],edx
c0022f6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f71:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022f77:	0f b6 d0             	movzx  edx,al
c0022f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f7e:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0022f85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f89:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022f8f:	0f b6 d0             	movzx  edx,al
c0022f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f96:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0022f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f9f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022fa5:	8d 50 01             	lea    edx,[eax+0x1]
c0022fa8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022fac:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022fb2:	0f b6 d0             	movzx  edx,al
c0022fb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022fb9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022fbd:	83 e1 3f             	and    ecx,0x3f
c0022fc0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022fc4:	90                   	nop
c0022fc5:	83 c4 0c             	add    esp,0xc
c0022fc8:	c3                   	ret    
c0022fc9:	66 90                	xchg   ax,ax
c0022fcb:	66 90                	xchg   ax,ax
c0022fcd:	66 90                	xchg   ax,ax
c0022fcf:	90                   	nop

c0022fd0 <avxDetect>:
c0022fd0:	b8 00 00 00 00       	mov    eax,0x0
c0022fd5:	c3                   	ret    

c0022fd6 <avxSave>:
c0022fd6:	c3                   	ret    

c0022fd7 <avxLoad>:
c0022fd7:	c3                   	ret    

c0022fd8 <avxInit>:
c0022fd8:	c3                   	ret    

c0022fd9 <avxClose>:
c0022fd9:	c3                   	ret    
c0022fda:	66 90                	xchg   ax,ax
c0022fdc:	66 90                	xchg   ax,ax
c0022fde:	66 90                	xchg   ax,ax

c0022fe0 <sseDetect>:
c0022fe0:	b8 01 00 00 00       	mov    eax,0x1
c0022fe5:	0f a2                	cpuid  
c0022fe7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0022fed:	74 06                	je     c0022ff5 <sseDetect.noSSE>
c0022fef:	b8 01 00 00 00       	mov    eax,0x1
c0022ff4:	c3                   	ret    

c0022ff5 <sseDetect.noSSE>:
c0022ff5:	b8 00 00 00 00       	mov    eax,0x0
c0022ffa:	c3                   	ret    

c0022ffb <sseSave>:
c0022ffb:	0f ae 44 24 08       	fxsave [esp+0x8]
c0023000:	c3                   	ret    

c0023001 <sseLoad>:
c0023001:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0023006:	c3                   	ret    

c0023007 <sseInit>:
c0023007:	e8 40 00 00 00       	call   c002304c <x87Init>
c002300c:	0f 20 e0             	mov    eax,cr4
c002300f:	66 0d 00 06          	or     ax,0x600
c0023013:	0f 22 e0             	mov    cr4,eax
c0023016:	c3                   	ret    

c0023017 <sseClose>:
c0023017:	c3                   	ret    
c0023018:	66 90                	xchg   ax,ax
c002301a:	66 90                	xchg   ax,ax
c002301c:	66 90                	xchg   ax,ax
c002301e:	66 90                	xchg   ax,ax

c0023020 <value_37F>:
c0023020:	7f 03                	jg     c0023025 <value_37A+0x1>

c0023022 <value_37E>:
c0023022:	7e 03                	jle    c0023027 <x87Detect+0x1>

c0023024 <value_37A>:
c0023024:	7a 03                	jp     c0023029 <x87Detect+0x3>

c0023026 <x87Detect>:
c0023026:	b8 01 00 00 00       	mov    eax,0x1
c002302b:	0f a2                	cpuid  
c002302d:	f7 c2 01 00 00 00    	test   edx,0x1
c0023033:	74 06                	je     c002303b <x87Detect.nox87>
c0023035:	b8 01 00 00 00       	mov    eax,0x1
c002303a:	c3                   	ret    

c002303b <x87Detect.nox87>:
c002303b:	b8 00 00 00 00       	mov    eax,0x0
c0023040:	c3                   	ret    

c0023041 <x87Save>:
c0023041:	9b dd 74 24 08       	fsave  [esp+0x8]
c0023046:	c3                   	ret    

c0023047 <x87Load>:
c0023047:	dd 64 24 08          	frstor [esp+0x8]
c002304b:	c3                   	ret    

c002304c <x87Init>:
c002304c:	9b db e3             	finit  
c002304f:	0f 20 c0             	mov    eax,cr0
c0023052:	66 25 fb ff          	and    ax,0xfffb
c0023056:	66 0d 22 00          	or     ax,0x22
c002305a:	0f 22 c0             	mov    cr0,eax
c002305d:	0f 06                	clts   
c002305f:	d9 2d 24 30 02 c0    	fldcw  WORD PTR ds:0xc0023024
c0023065:	c3                   	ret    

c0023066 <x87Close>:
c0023066:	c3                   	ret    
c0023067:	90                   	nop

c0023068 <__do_global_ctors_aux>:
c0023068:	a1 98 5b 02 c0       	mov    eax,ds:0xc0025b98
c002306d:	83 f8 ff             	cmp    eax,0xffffffff
c0023070:	74 1a                	je     c002308c <__do_global_ctors_aux+0x24>
c0023072:	55                   	push   ebp
c0023073:	89 e5                	mov    ebp,esp
c0023075:	53                   	push   ebx
c0023076:	52                   	push   edx
c0023077:	bb 98 5b 02 c0       	mov    ebx,0xc0025b98
c002307c:	ff d0                	call   eax
c002307e:	83 eb 04             	sub    ebx,0x4
c0023081:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023083:	83 f8 ff             	cmp    eax,0xffffffff
c0023086:	75 f4                	jne    c002307c <__do_global_ctors_aux+0x14>
c0023088:	58                   	pop    eax
c0023089:	5b                   	pop    ebx
c002308a:	5d                   	pop    ebp
c002308b:	c3                   	ret    
c002308c:	c3                   	ret    
c002308d:	66 90                	xchg   ax,ax
c002308f:	90                   	nop

c0023090 <__divdi3>:
c0023090:	55                   	push   ebp
c0023091:	57                   	push   edi
c0023092:	56                   	push   esi
c0023093:	53                   	push   ebx
c0023094:	83 ec 1c             	sub    esp,0x1c
c0023097:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002309b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002309f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00230a2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00230a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00230aa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00230ae:	85 db                	test   ebx,ebx
c00230b0:	0f 88 8e 00 00 00    	js     c0023144 <__divdi3+0xb4>
c00230b6:	89 dd                	mov    ebp,ebx
c00230b8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00230c0:	89 d3                	mov    ebx,edx
c00230c2:	85 d2                	test   edx,edx
c00230c4:	79 0d                	jns    c00230d3 <__divdi3+0x43>
c00230c6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00230ca:	f7 d8                	neg    eax
c00230cc:	83 d2 00             	adc    edx,0x0
c00230cf:	f7 da                	neg    edx
c00230d1:	89 d3                	mov    ebx,edx
c00230d3:	89 c7                	mov    edi,eax
c00230d5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00230d8:	85 db                	test   ebx,ebx
c00230da:	75 48                	jne    c0023124 <__divdi3+0x94>
c00230dc:	39 ef                	cmp    edi,ebp
c00230de:	76 24                	jbe    c0023104 <__divdi3+0x74>
c00230e0:	89 ea                	mov    edx,ebp
c00230e2:	f7 f7                	div    edi
c00230e4:	89 c1                	mov    ecx,eax
c00230e6:	31 f6                	xor    esi,esi
c00230e8:	89 c8                	mov    eax,ecx
c00230ea:	89 f2                	mov    edx,esi
c00230ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00230f0:	85 c9                	test   ecx,ecx
c00230f2:	74 07                	je     c00230fb <__divdi3+0x6b>
c00230f4:	f7 d8                	neg    eax
c00230f6:	83 d2 00             	adc    edx,0x0
c00230f9:	f7 da                	neg    edx
c00230fb:	83 c4 1c             	add    esp,0x1c
c00230fe:	5b                   	pop    ebx
c00230ff:	5e                   	pop    esi
c0023100:	5f                   	pop    edi
c0023101:	5d                   	pop    ebp
c0023102:	c3                   	ret    
c0023103:	90                   	nop
c0023104:	85 ff                	test   edi,edi
c0023106:	75 0b                	jne    c0023113 <__divdi3+0x83>
c0023108:	b8 01 00 00 00       	mov    eax,0x1
c002310d:	31 d2                	xor    edx,edx
c002310f:	f7 f3                	div    ebx
c0023111:	89 c7                	mov    edi,eax
c0023113:	31 d2                	xor    edx,edx
c0023115:	89 e8                	mov    eax,ebp
c0023117:	f7 f7                	div    edi
c0023119:	89 c6                	mov    esi,eax
c002311b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002311e:	f7 f7                	div    edi
c0023120:	89 c1                	mov    ecx,eax
c0023122:	eb c4                	jmp    c00230e8 <__divdi3+0x58>
c0023124:	39 eb                	cmp    ebx,ebp
c0023126:	77 3c                	ja     c0023164 <__divdi3+0xd4>
c0023128:	0f bd f3             	bsr    esi,ebx
c002312b:	83 f6 1f             	xor    esi,0x1f
c002312e:	75 40                	jne    c0023170 <__divdi3+0xe0>
c0023130:	39 eb                	cmp    ebx,ebp
c0023132:	72 09                	jb     c002313d <__divdi3+0xad>
c0023134:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0023137:	0f 87 97 00 00 00    	ja     c00231d4 <__divdi3+0x144>
c002313d:	b9 01 00 00 00       	mov    ecx,0x1
c0023142:	eb a4                	jmp    c00230e8 <__divdi3+0x58>
c0023144:	f7 d9                	neg    ecx
c0023146:	83 d3 00             	adc    ebx,0x0
c0023149:	f7 db                	neg    ebx
c002314b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002314e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0023152:	89 dd                	mov    ebp,ebx
c0023154:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002315c:	e9 5f ff ff ff       	jmp    c00230c0 <__divdi3+0x30>
c0023161:	8d 76 00             	lea    esi,[esi+0x0]
c0023164:	31 f6                	xor    esi,esi
c0023166:	31 c9                	xor    ecx,ecx
c0023168:	e9 7b ff ff ff       	jmp    c00230e8 <__divdi3+0x58>
c002316d:	8d 76 00             	lea    esi,[esi+0x0]
c0023170:	b8 20 00 00 00       	mov    eax,0x20
c0023175:	29 f0                	sub    eax,esi
c0023177:	89 f1                	mov    ecx,esi
c0023179:	d3 e3                	shl    ebx,cl
c002317b:	89 fa                	mov    edx,edi
c002317d:	88 c1                	mov    cl,al
c002317f:	d3 ea                	shr    edx,cl
c0023181:	09 da                	or     edx,ebx
c0023183:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023187:	89 f1                	mov    ecx,esi
c0023189:	d3 e7                	shl    edi,cl
c002318b:	89 eb                	mov    ebx,ebp
c002318d:	88 c1                	mov    cl,al
c002318f:	d3 eb                	shr    ebx,cl
c0023191:	89 f1                	mov    ecx,esi
c0023193:	d3 e5                	shl    ebp,cl
c0023195:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0023198:	88 c1                	mov    cl,al
c002319a:	d3 ea                	shr    edx,cl
c002319c:	09 d5                	or     ebp,edx
c002319e:	89 e8                	mov    eax,ebp
c00231a0:	89 da                	mov    edx,ebx
c00231a2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00231a6:	89 d3                	mov    ebx,edx
c00231a8:	89 c5                	mov    ebp,eax
c00231aa:	f7 e7                	mul    edi
c00231ac:	39 d3                	cmp    ebx,edx
c00231ae:	72 18                	jb     c00231c8 <__divdi3+0x138>
c00231b0:	74 0a                	je     c00231bc <__divdi3+0x12c>
c00231b2:	89 e9                	mov    ecx,ebp
c00231b4:	31 f6                	xor    esi,esi
c00231b6:	e9 2d ff ff ff       	jmp    c00230e8 <__divdi3+0x58>
c00231bb:	90                   	nop
c00231bc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00231bf:	89 f1                	mov    ecx,esi
c00231c1:	d3 e7                	shl    edi,cl
c00231c3:	39 c7                	cmp    edi,eax
c00231c5:	73 eb                	jae    c00231b2 <__divdi3+0x122>
c00231c7:	90                   	nop
c00231c8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00231cb:	31 f6                	xor    esi,esi
c00231cd:	e9 16 ff ff ff       	jmp    c00230e8 <__divdi3+0x58>
c00231d2:	66 90                	xchg   ax,ax
c00231d4:	31 c9                	xor    ecx,ecx
c00231d6:	e9 0d ff ff ff       	jmp    c00230e8 <__divdi3+0x58>
c00231db:	90                   	nop

c00231dc <__moddi3>:
c00231dc:	55                   	push   ebp
c00231dd:	57                   	push   edi
c00231de:	56                   	push   esi
c00231df:	53                   	push   ebx
c00231e0:	83 ec 2c             	sub    esp,0x2c
c00231e3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00231e7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00231eb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00231ef:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00231f3:	85 db                	test   ebx,ebx
c00231f5:	0f 88 85 00 00 00    	js     c0023280 <__moddi3+0xa4>
c00231fb:	89 de                	mov    esi,ebx
c00231fd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023205:	89 d7                	mov    edi,edx
c0023207:	85 d2                	test   edx,edx
c0023209:	79 09                	jns    c0023214 <__moddi3+0x38>
c002320b:	f7 d8                	neg    eax
c002320d:	83 d2 00             	adc    edx,0x0
c0023210:	f7 da                	neg    edx
c0023212:	89 d7                	mov    edi,edx
c0023214:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023218:	89 cd                	mov    ebp,ecx
c002321a:	85 ff                	test   edi,edi
c002321c:	75 52                	jne    c0023270 <__moddi3+0x94>
c002321e:	89 c3                	mov    ebx,eax
c0023220:	39 f0                	cmp    eax,esi
c0023222:	76 24                	jbe    c0023248 <__moddi3+0x6c>
c0023224:	89 c8                	mov    eax,ecx
c0023226:	89 f2                	mov    edx,esi
c0023228:	f7 f3                	div    ebx
c002322a:	89 d6                	mov    esi,edx
c002322c:	89 f0                	mov    eax,esi
c002322e:	31 d2                	xor    edx,edx
c0023230:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023234:	85 c9                	test   ecx,ecx
c0023236:	74 07                	je     c002323f <__moddi3+0x63>
c0023238:	f7 d8                	neg    eax
c002323a:	83 d2 00             	adc    edx,0x0
c002323d:	f7 da                	neg    edx
c002323f:	83 c4 2c             	add    esp,0x2c
c0023242:	5b                   	pop    ebx
c0023243:	5e                   	pop    esi
c0023244:	5f                   	pop    edi
c0023245:	5d                   	pop    ebp
c0023246:	c3                   	ret    
c0023247:	90                   	nop
c0023248:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002324c:	85 db                	test   ebx,ebx
c002324e:	75 0d                	jne    c002325d <__moddi3+0x81>
c0023250:	b8 01 00 00 00       	mov    eax,0x1
c0023255:	31 d2                	xor    edx,edx
c0023257:	f7 f7                	div    edi
c0023259:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002325d:	89 f0                	mov    eax,esi
c002325f:	31 d2                	xor    edx,edx
c0023261:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023265:	f7 f7                	div    edi
c0023267:	89 e8                	mov    eax,ebp
c0023269:	f7 f7                	div    edi
c002326b:	89 d6                	mov    esi,edx
c002326d:	eb bd                	jmp    c002322c <__moddi3+0x50>
c002326f:	90                   	nop
c0023270:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0023274:	39 f7                	cmp    edi,esi
c0023276:	76 20                	jbe    c0023298 <__moddi3+0xbc>
c0023278:	89 c8                	mov    eax,ecx
c002327a:	89 f2                	mov    edx,esi
c002327c:	eb b2                	jmp    c0023230 <__moddi3+0x54>
c002327e:	66 90                	xchg   ax,ax
c0023280:	f7 d9                	neg    ecx
c0023282:	83 d3 00             	adc    ebx,0x0
c0023285:	f7 db                	neg    ebx
c0023287:	89 de                	mov    esi,ebx
c0023289:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0023291:	e9 6f ff ff ff       	jmp    c0023205 <__moddi3+0x29>
c0023296:	66 90                	xchg   ax,ax
c0023298:	0f bd c7             	bsr    eax,edi
c002329b:	83 f0 1f             	xor    eax,0x1f
c002329e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00232a2:	75 24                	jne    c00232c8 <__moddi3+0xec>
c00232a4:	39 f7                	cmp    edi,esi
c00232a6:	72 06                	jb     c00232ae <__moddi3+0xd2>
c00232a8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00232ac:	77 0c                	ja     c00232ba <__moddi3+0xde>
c00232ae:	89 e9                	mov    ecx,ebp
c00232b0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00232b4:	19 fe                	sbb    esi,edi
c00232b6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00232ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00232be:	89 f2                	mov    edx,esi
c00232c0:	e9 6b ff ff ff       	jmp    c0023230 <__moddi3+0x54>
c00232c5:	8d 76 00             	lea    esi,[esi+0x0]
c00232c8:	b8 20 00 00 00       	mov    eax,0x20
c00232cd:	89 c2                	mov    edx,eax
c00232cf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00232d3:	29 da                	sub    edx,ebx
c00232d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00232d9:	88 d9                	mov    cl,bl
c00232db:	d3 e7                	shl    edi,cl
c00232dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00232e1:	88 d1                	mov    cl,dl
c00232e3:	d3 e8                	shr    eax,cl
c00232e5:	09 c7                	or     edi,eax
c00232e7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00232eb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00232ef:	89 d8                	mov    eax,ebx
c00232f1:	88 d9                	mov    cl,bl
c00232f3:	d3 e7                	shl    edi,cl
c00232f5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00232f9:	89 f3                	mov    ebx,esi
c00232fb:	88 d1                	mov    cl,dl
c00232fd:	d3 eb                	shr    ebx,cl
c00232ff:	89 c7                	mov    edi,eax
c0023301:	88 c1                	mov    cl,al
c0023303:	d3 e6                	shl    esi,cl
c0023305:	89 e8                	mov    eax,ebp
c0023307:	88 d1                	mov    cl,dl
c0023309:	d3 e8                	shr    eax,cl
c002330b:	09 f0                	or     eax,esi
c002330d:	89 f9                	mov    ecx,edi
c002330f:	d3 e5                	shl    ebp,cl
c0023311:	89 da                	mov    edx,ebx
c0023313:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0023317:	89 d3                	mov    ebx,edx
c0023319:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002331d:	89 c6                	mov    esi,eax
c002331f:	89 d1                	mov    ecx,edx
c0023321:	39 d3                	cmp    ebx,edx
c0023323:	72 27                	jb     c002334c <__moddi3+0x170>
c0023325:	74 21                	je     c0023348 <__moddi3+0x16c>
c0023327:	29 f5                	sub    ebp,esi
c0023329:	19 cb                	sbb    ebx,ecx
c002332b:	89 de                	mov    esi,ebx
c002332d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0023331:	d3 e6                	shl    esi,cl
c0023333:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0023337:	89 f9                	mov    ecx,edi
c0023339:	d3 ed                	shr    ebp,cl
c002333b:	09 ee                	or     esi,ebp
c002333d:	89 f0                	mov    eax,esi
c002333f:	d3 eb                	shr    ebx,cl
c0023341:	89 da                	mov    edx,ebx
c0023343:	e9 e8 fe ff ff       	jmp    c0023230 <__moddi3+0x54>
c0023348:	39 c5                	cmp    ebp,eax
c002334a:	73 db                	jae    c0023327 <__moddi3+0x14b>
c002334c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0023350:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0023354:	89 d1                	mov    ecx,edx
c0023356:	89 c6                	mov    esi,eax
c0023358:	eb cd                	jmp    c0023327 <__moddi3+0x14b>
c002335a:	66 90                	xchg   ax,ax

c002335c <__udivdi3>:
c002335c:	55                   	push   ebp
c002335d:	57                   	push   edi
c002335e:	56                   	push   esi
c002335f:	53                   	push   ebx
c0023360:	83 ec 1c             	sub    esp,0x1c
c0023363:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0023367:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002336b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002336f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023373:	85 d2                	test   edx,edx
c0023375:	75 41                	jne    c00233b8 <__udivdi3+0x5c>
c0023377:	39 f7                	cmp    edi,esi
c0023379:	76 15                	jbe    c0023390 <__udivdi3+0x34>
c002337b:	89 e8                	mov    eax,ebp
c002337d:	89 f2                	mov    edx,esi
c002337f:	f7 f7                	div    edi
c0023381:	31 db                	xor    ebx,ebx
c0023383:	89 da                	mov    edx,ebx
c0023385:	83 c4 1c             	add    esp,0x1c
c0023388:	5b                   	pop    ebx
c0023389:	5e                   	pop    esi
c002338a:	5f                   	pop    edi
c002338b:	5d                   	pop    ebp
c002338c:	c3                   	ret    
c002338d:	8d 76 00             	lea    esi,[esi+0x0]
c0023390:	89 f9                	mov    ecx,edi
c0023392:	85 ff                	test   edi,edi
c0023394:	75 0b                	jne    c00233a1 <__udivdi3+0x45>
c0023396:	b8 01 00 00 00       	mov    eax,0x1
c002339b:	31 d2                	xor    edx,edx
c002339d:	f7 f7                	div    edi
c002339f:	89 c1                	mov    ecx,eax
c00233a1:	31 d2                	xor    edx,edx
c00233a3:	89 f0                	mov    eax,esi
c00233a5:	f7 f1                	div    ecx
c00233a7:	89 c3                	mov    ebx,eax
c00233a9:	89 e8                	mov    eax,ebp
c00233ab:	f7 f1                	div    ecx
c00233ad:	89 da                	mov    edx,ebx
c00233af:	83 c4 1c             	add    esp,0x1c
c00233b2:	5b                   	pop    ebx
c00233b3:	5e                   	pop    esi
c00233b4:	5f                   	pop    edi
c00233b5:	5d                   	pop    ebp
c00233b6:	c3                   	ret    
c00233b7:	90                   	nop
c00233b8:	39 f2                	cmp    edx,esi
c00233ba:	77 1c                	ja     c00233d8 <__udivdi3+0x7c>
c00233bc:	0f bd da             	bsr    ebx,edx
c00233bf:	83 f3 1f             	xor    ebx,0x1f
c00233c2:	75 24                	jne    c00233e8 <__udivdi3+0x8c>
c00233c4:	39 f2                	cmp    edx,esi
c00233c6:	72 08                	jb     c00233d0 <__udivdi3+0x74>
c00233c8:	39 ef                	cmp    edi,ebp
c00233ca:	0f 87 84 00 00 00    	ja     c0023454 <__udivdi3+0xf8>
c00233d0:	b8 01 00 00 00       	mov    eax,0x1
c00233d5:	eb ac                	jmp    c0023383 <__udivdi3+0x27>
c00233d7:	90                   	nop
c00233d8:	31 db                	xor    ebx,ebx
c00233da:	31 c0                	xor    eax,eax
c00233dc:	89 da                	mov    edx,ebx
c00233de:	83 c4 1c             	add    esp,0x1c
c00233e1:	5b                   	pop    ebx
c00233e2:	5e                   	pop    esi
c00233e3:	5f                   	pop    edi
c00233e4:	5d                   	pop    ebp
c00233e5:	c3                   	ret    
c00233e6:	66 90                	xchg   ax,ax
c00233e8:	b8 20 00 00 00       	mov    eax,0x20
c00233ed:	29 d8                	sub    eax,ebx
c00233ef:	88 d9                	mov    cl,bl
c00233f1:	d3 e2                	shl    edx,cl
c00233f3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00233f7:	89 fa                	mov    edx,edi
c00233f9:	88 c1                	mov    cl,al
c00233fb:	d3 ea                	shr    edx,cl
c00233fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023401:	09 d1                	or     ecx,edx
c0023403:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023407:	88 d9                	mov    cl,bl
c0023409:	d3 e7                	shl    edi,cl
c002340b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002340f:	89 f7                	mov    edi,esi
c0023411:	88 c1                	mov    cl,al
c0023413:	d3 ef                	shr    edi,cl
c0023415:	88 d9                	mov    cl,bl
c0023417:	d3 e6                	shl    esi,cl
c0023419:	89 ea                	mov    edx,ebp
c002341b:	88 c1                	mov    cl,al
c002341d:	d3 ea                	shr    edx,cl
c002341f:	09 d6                	or     esi,edx
c0023421:	89 f0                	mov    eax,esi
c0023423:	89 fa                	mov    edx,edi
c0023425:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023429:	89 d7                	mov    edi,edx
c002342b:	89 c6                	mov    esi,eax
c002342d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023431:	39 d7                	cmp    edi,edx
c0023433:	72 13                	jb     c0023448 <__udivdi3+0xec>
c0023435:	74 09                	je     c0023440 <__udivdi3+0xe4>
c0023437:	89 f0                	mov    eax,esi
c0023439:	31 db                	xor    ebx,ebx
c002343b:	e9 43 ff ff ff       	jmp    c0023383 <__udivdi3+0x27>
c0023440:	88 d9                	mov    cl,bl
c0023442:	d3 e5                	shl    ebp,cl
c0023444:	39 c5                	cmp    ebp,eax
c0023446:	73 ef                	jae    c0023437 <__udivdi3+0xdb>
c0023448:	8d 46 ff             	lea    eax,[esi-0x1]
c002344b:	31 db                	xor    ebx,ebx
c002344d:	e9 31 ff ff ff       	jmp    c0023383 <__udivdi3+0x27>
c0023452:	66 90                	xchg   ax,ax
c0023454:	31 c0                	xor    eax,eax
c0023456:	e9 28 ff ff ff       	jmp    c0023383 <__udivdi3+0x27>
c002345b:	90                   	nop

c002345c <__umoddi3>:
c002345c:	55                   	push   ebp
c002345d:	57                   	push   edi
c002345e:	56                   	push   esi
c002345f:	53                   	push   ebx
c0023460:	83 ec 1c             	sub    esp,0x1c
c0023463:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023467:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002346b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002346f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023473:	89 da                	mov    edx,ebx
c0023475:	85 c0                	test   eax,eax
c0023477:	75 37                	jne    c00234b0 <__umoddi3+0x54>
c0023479:	39 df                	cmp    edi,ebx
c002347b:	76 13                	jbe    c0023490 <__umoddi3+0x34>
c002347d:	89 f0                	mov    eax,esi
c002347f:	f7 f7                	div    edi
c0023481:	89 d0                	mov    eax,edx
c0023483:	31 d2                	xor    edx,edx
c0023485:	83 c4 1c             	add    esp,0x1c
c0023488:	5b                   	pop    ebx
c0023489:	5e                   	pop    esi
c002348a:	5f                   	pop    edi
c002348b:	5d                   	pop    ebp
c002348c:	c3                   	ret    
c002348d:	8d 76 00             	lea    esi,[esi+0x0]
c0023490:	89 fd                	mov    ebp,edi
c0023492:	85 ff                	test   edi,edi
c0023494:	75 0b                	jne    c00234a1 <__umoddi3+0x45>
c0023496:	b8 01 00 00 00       	mov    eax,0x1
c002349b:	31 d2                	xor    edx,edx
c002349d:	f7 f7                	div    edi
c002349f:	89 c5                	mov    ebp,eax
c00234a1:	89 d8                	mov    eax,ebx
c00234a3:	31 d2                	xor    edx,edx
c00234a5:	f7 f5                	div    ebp
c00234a7:	89 f0                	mov    eax,esi
c00234a9:	f7 f5                	div    ebp
c00234ab:	89 d0                	mov    eax,edx
c00234ad:	eb d4                	jmp    c0023483 <__umoddi3+0x27>
c00234af:	90                   	nop
c00234b0:	89 f1                	mov    ecx,esi
c00234b2:	39 d8                	cmp    eax,ebx
c00234b4:	76 0a                	jbe    c00234c0 <__umoddi3+0x64>
c00234b6:	89 f0                	mov    eax,esi
c00234b8:	83 c4 1c             	add    esp,0x1c
c00234bb:	5b                   	pop    ebx
c00234bc:	5e                   	pop    esi
c00234bd:	5f                   	pop    edi
c00234be:	5d                   	pop    ebp
c00234bf:	c3                   	ret    
c00234c0:	0f bd e8             	bsr    ebp,eax
c00234c3:	83 f5 1f             	xor    ebp,0x1f
c00234c6:	75 1c                	jne    c00234e4 <__umoddi3+0x88>
c00234c8:	39 d8                	cmp    eax,ebx
c00234ca:	72 04                	jb     c00234d0 <__umoddi3+0x74>
c00234cc:	39 f7                	cmp    edi,esi
c00234ce:	77 08                	ja     c00234d8 <__umoddi3+0x7c>
c00234d0:	89 da                	mov    edx,ebx
c00234d2:	29 fe                	sub    esi,edi
c00234d4:	19 c2                	sbb    edx,eax
c00234d6:	89 f1                	mov    ecx,esi
c00234d8:	89 c8                	mov    eax,ecx
c00234da:	83 c4 1c             	add    esp,0x1c
c00234dd:	5b                   	pop    ebx
c00234de:	5e                   	pop    esi
c00234df:	5f                   	pop    edi
c00234e0:	5d                   	pop    ebp
c00234e1:	c3                   	ret    
c00234e2:	66 90                	xchg   ax,ax
c00234e4:	ba 20 00 00 00       	mov    edx,0x20
c00234e9:	29 ea                	sub    edx,ebp
c00234eb:	89 e9                	mov    ecx,ebp
c00234ed:	d3 e0                	shl    eax,cl
c00234ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00234f3:	89 f8                	mov    eax,edi
c00234f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00234f9:	88 d1                	mov    cl,dl
c00234fb:	d3 e8                	shr    eax,cl
c00234fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023501:	09 c1                	or     ecx,eax
c0023503:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0023507:	89 e9                	mov    ecx,ebp
c0023509:	d3 e7                	shl    edi,cl
c002350b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002350f:	89 d8                	mov    eax,ebx
c0023511:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023515:	88 d1                	mov    cl,dl
c0023517:	d3 e8                	shr    eax,cl
c0023519:	89 c7                	mov    edi,eax
c002351b:	89 e9                	mov    ecx,ebp
c002351d:	d3 e3                	shl    ebx,cl
c002351f:	89 f0                	mov    eax,esi
c0023521:	88 d1                	mov    cl,dl
c0023523:	d3 e8                	shr    eax,cl
c0023525:	09 d8                	or     eax,ebx
c0023527:	89 e9                	mov    ecx,ebp
c0023529:	d3 e6                	shl    esi,cl
c002352b:	89 f3                	mov    ebx,esi
c002352d:	89 fa                	mov    edx,edi
c002352f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023533:	89 d1                	mov    ecx,edx
c0023535:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023539:	89 c6                	mov    esi,eax
c002353b:	89 d7                	mov    edi,edx
c002353d:	39 d1                	cmp    ecx,edx
c002353f:	72 27                	jb     c0023568 <__umoddi3+0x10c>
c0023541:	74 21                	je     c0023564 <__umoddi3+0x108>
c0023543:	89 ca                	mov    edx,ecx
c0023545:	29 f3                	sub    ebx,esi
c0023547:	19 fa                	sbb    edx,edi
c0023549:	89 d0                	mov    eax,edx
c002354b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002354f:	d3 e0                	shl    eax,cl
c0023551:	89 e9                	mov    ecx,ebp
c0023553:	d3 eb                	shr    ebx,cl
c0023555:	09 d8                	or     eax,ebx
c0023557:	d3 ea                	shr    edx,cl
c0023559:	83 c4 1c             	add    esp,0x1c
c002355c:	5b                   	pop    ebx
c002355d:	5e                   	pop    esi
c002355e:	5f                   	pop    edi
c002355f:	5d                   	pop    ebp
c0023560:	c3                   	ret    
c0023561:	8d 76 00             	lea    esi,[esi+0x0]
c0023564:	39 c3                	cmp    ebx,eax
c0023566:	73 db                	jae    c0023543 <__umoddi3+0xe7>
c0023568:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002356c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0023570:	89 d7                	mov    edi,edx
c0023572:	89 c6                	mov    esi,eax
c0023574:	eb cd                	jmp    c0023543 <__umoddi3+0xe7>

c0023576 <__addsf3>:
c0023576:	55                   	push   ebp
c0023577:	89 e5                	mov    ebp,esp
c0023579:	57                   	push   edi
c002357a:	56                   	push   esi
c002357b:	53                   	push   ebx
c002357c:	83 ec 08             	sub    esp,0x8
c002357f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0023582:	89 fa                	mov    edx,edi
c0023584:	89 f8                	mov    eax,edi
c0023586:	c1 f8 17             	sar    eax,0x17
c0023589:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002358c:	c1 e2 08             	shl    edx,0x8
c002358f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0023595:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023598:	89 de                	mov    esi,ebx
c002359a:	c1 fe 17             	sar    esi,0x17
c002359d:	c1 e3 08             	shl    ebx,0x8
c00235a0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00235a6:	31 f0                	xor    eax,esi
c00235a8:	0f 88 3b 01 00 00    	js     c00236e9 <__addsf3+0x173>
c00235ae:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00235b1:	29 f1                	sub    ecx,esi
c00235b3:	85 c9                	test   ecx,ecx
c00235b5:	7e 54                	jle    c002360b <__addsf3+0x95>
c00235b7:	89 f0                	mov    eax,esi
c00235b9:	84 c0                	test   al,al
c00235bb:	75 10                	jne    c00235cd <__addsf3+0x57>
c00235bd:	85 db                	test   ebx,ebx
c00235bf:	0f 84 aa 02 00 00    	je     c002386f <__addsf3+0x2f9>
c00235c5:	49                   	dec    ecx
c00235c6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00235c9:	74 38                	je     c0023603 <__addsf3+0x8d>
c00235cb:	eb 13                	jmp    c00235e0 <__addsf3+0x6a>
c00235cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00235d0:	f7 d0                	not    eax
c00235d2:	84 c0                	test   al,al
c00235d4:	0f 84 95 02 00 00    	je     c002386f <__addsf3+0x2f9>
c00235da:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00235e0:	83 f9 1f             	cmp    ecx,0x1f
c00235e3:	0f 8f 86 02 00 00    	jg     c002386f <__addsf3+0x2f9>
c00235e9:	89 de                	mov    esi,ebx
c00235eb:	d3 ee                	shr    esi,cl
c00235ed:	b8 20 00 00 00       	mov    eax,0x20
c00235f2:	29 c8                	sub    eax,ecx
c00235f4:	89 c1                	mov    ecx,eax
c00235f6:	d3 e3                	shl    ebx,cl
c00235f8:	31 c0                	xor    eax,eax
c00235fa:	85 db                	test   ebx,ebx
c00235fc:	0f 95 c0             	setne  al
c00235ff:	09 f0                	or     eax,esi
c0023601:	01 d0                	add    eax,edx
c0023603:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023606:	e9 b6 00 00 00       	jmp    c00236c1 <__addsf3+0x14b>
c002360b:	74 5c                	je     c0023669 <__addsf3+0xf3>
c002360d:	89 f1                	mov    ecx,esi
c002360f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0023612:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023615:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0023619:	75 14                	jne    c002362f <__addsf3+0xb9>
c002361b:	85 d2                	test   edx,edx
c002361d:	0f 84 4c 02 00 00    	je     c002386f <__addsf3+0x2f9>
c0023623:	49                   	dec    ecx
c0023624:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0023627:	0f 84 94 00 00 00    	je     c00236c1 <__addsf3+0x14b>
c002362d:	eb 12                	jmp    c0023641 <__addsf3+0xcb>
c002362f:	89 f0                	mov    eax,esi
c0023631:	f7 d0                	not    eax
c0023633:	84 c0                	test   al,al
c0023635:	0f 84 34 02 00 00    	je     c002386f <__addsf3+0x2f9>
c002363b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023641:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023644:	83 f9 1f             	cmp    ecx,0x1f
c0023647:	0f 8f 22 02 00 00    	jg     c002386f <__addsf3+0x2f9>
c002364d:	89 d7                	mov    edi,edx
c002364f:	d3 ef                	shr    edi,cl
c0023651:	b8 20 00 00 00       	mov    eax,0x20
c0023656:	29 c8                	sub    eax,ecx
c0023658:	89 c1                	mov    ecx,eax
c002365a:	d3 e2                	shl    edx,cl
c002365c:	31 c0                	xor    eax,eax
c002365e:	85 d2                	test   edx,edx
c0023660:	0f 95 c0             	setne  al
c0023663:	09 f8                	or     eax,edi
c0023665:	01 d8                	add    eax,ebx
c0023667:	eb 58                	jmp    c00236c1 <__addsf3+0x14b>
c0023669:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002366c:	8d 70 01             	lea    esi,[eax+0x1]
c002366f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0023675:	75 32                	jne    c00236a9 <__addsf3+0x133>
c0023677:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002367b:	75 1f                	jne    c002369c <__addsf3+0x126>
c002367d:	85 d2                	test   edx,edx
c002367f:	0f 84 e0 01 00 00    	je     c0023865 <__addsf3+0x2ef>
c0023685:	85 db                	test   ebx,ebx
c0023687:	0f 84 e2 01 00 00    	je     c002386f <__addsf3+0x2f9>
c002368d:	89 d0                	mov    eax,edx
c002368f:	01 d8                	add    eax,ebx
c0023691:	0f 89 a9 01 00 00    	jns    c0023840 <__addsf3+0x2ca>
c0023697:	e9 9d 01 00 00       	jmp    c0023839 <__addsf3+0x2c3>
c002369c:	85 d2                	test   edx,edx
c002369e:	0f 85 cb 01 00 00    	jne    c002386f <__addsf3+0x2f9>
c00236a4:	e9 bc 01 00 00       	jmp    c0023865 <__addsf3+0x2ef>
c00236a9:	31 c0                	xor    eax,eax
c00236ab:	89 f1                	mov    ecx,esi
c00236ad:	f7 d1                	not    ecx
c00236af:	84 c9                	test   cl,cl
c00236b1:	0f 84 90 01 00 00    	je     c0023847 <__addsf3+0x2d1>
c00236b7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00236ba:	d1 e8                	shr    eax,1
c00236bc:	e9 86 01 00 00       	jmp    c0023847 <__addsf3+0x2d1>
c00236c1:	85 c0                	test   eax,eax
c00236c3:	0f 89 7e 01 00 00    	jns    c0023847 <__addsf3+0x2d1>
c00236c9:	46                   	inc    esi
c00236ca:	89 f2                	mov    edx,esi
c00236cc:	f7 d2                	not    edx
c00236ce:	84 d2                	test   dl,dl
c00236d0:	0f 84 6f 01 00 00    	je     c0023845 <__addsf3+0x2cf>
c00236d6:	89 c2                	mov    edx,eax
c00236d8:	83 e2 01             	and    edx,0x1
c00236db:	d1 e8                	shr    eax,1
c00236dd:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00236e2:	09 d0                	or     eax,edx
c00236e4:	e9 5e 01 00 00       	jmp    c0023847 <__addsf3+0x2d1>
c00236e9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00236ed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00236f0:	89 f0                	mov    eax,esi
c00236f2:	0f b6 c0             	movzx  eax,al
c00236f5:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00236f8:	29 c1                	sub    ecx,eax
c00236fa:	85 c9                	test   ecx,ecx
c00236fc:	7e 55                	jle    c0023753 <__addsf3+0x1dd>
c00236fe:	85 c0                	test   eax,eax
c0023700:	75 11                	jne    c0023713 <__addsf3+0x19d>
c0023702:	85 db                	test   ebx,ebx
c0023704:	0f 84 65 01 00 00    	je     c002386f <__addsf3+0x2f9>
c002370a:	49                   	dec    ecx
c002370b:	75 19                	jne    c0023726 <__addsf3+0x1b0>
c002370d:	89 d0                	mov    eax,edx
c002370f:	29 d8                	sub    eax,ebx
c0023711:	eb 38                	jmp    c002374b <__addsf3+0x1d5>
c0023713:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0023716:	f7 d0                	not    eax
c0023718:	84 c0                	test   al,al
c002371a:	0f 84 4f 01 00 00    	je     c002386f <__addsf3+0x2f9>
c0023720:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023726:	83 f9 1f             	cmp    ecx,0x1f
c0023729:	0f 8f 40 01 00 00    	jg     c002386f <__addsf3+0x2f9>
c002372f:	89 de                	mov    esi,ebx
c0023731:	d3 ee                	shr    esi,cl
c0023733:	b8 20 00 00 00       	mov    eax,0x20
c0023738:	29 c8                	sub    eax,ecx
c002373a:	89 c1                	mov    ecx,eax
c002373c:	d3 e3                	shl    ebx,cl
c002373e:	31 c0                	xor    eax,eax
c0023740:	85 db                	test   ebx,ebx
c0023742:	0f 95 c0             	setne  al
c0023745:	09 f0                	or     eax,esi
c0023747:	29 c2                	sub    edx,eax
c0023749:	89 d0                	mov    eax,edx
c002374b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002374e:	e9 af 00 00 00       	jmp    c0023802 <__addsf3+0x28c>
c0023753:	74 5c                	je     c00237b1 <__addsf3+0x23b>
c0023755:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0023758:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002375b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002375f:	75 14                	jne    c0023775 <__addsf3+0x1ff>
c0023761:	85 d2                	test   edx,edx
c0023763:	0f 84 06 01 00 00    	je     c002386f <__addsf3+0x2f9>
c0023769:	48                   	dec    eax
c002376a:	75 1b                	jne    c0023787 <__addsf3+0x211>
c002376c:	89 d8                	mov    eax,ebx
c002376e:	29 d0                	sub    eax,edx
c0023770:	e9 8d 00 00 00       	jmp    c0023802 <__addsf3+0x28c>
c0023775:	89 f1                	mov    ecx,esi
c0023777:	f7 d1                	not    ecx
c0023779:	84 c9                	test   cl,cl
c002377b:	0f 84 ee 00 00 00    	je     c002386f <__addsf3+0x2f9>
c0023781:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023787:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002378a:	83 f8 1f             	cmp    eax,0x1f
c002378d:	0f 8f dc 00 00 00    	jg     c002386f <__addsf3+0x2f9>
c0023793:	89 d7                	mov    edi,edx
c0023795:	88 c1                	mov    cl,al
c0023797:	d3 ef                	shr    edi,cl
c0023799:	b9 20 00 00 00       	mov    ecx,0x20
c002379e:	29 c1                	sub    ecx,eax
c00237a0:	d3 e2                	shl    edx,cl
c00237a2:	31 c0                	xor    eax,eax
c00237a4:	85 d2                	test   edx,edx
c00237a6:	0f 95 c0             	setne  al
c00237a9:	09 f8                	or     eax,edi
c00237ab:	29 c3                	sub    ebx,eax
c00237ad:	89 d8                	mov    eax,ebx
c00237af:	eb 51                	jmp    c0023802 <__addsf3+0x28c>
c00237b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00237b4:	40                   	inc    eax
c00237b5:	a8 fe                	test   al,0xfe
c00237b7:	75 3d                	jne    c00237f6 <__addsf3+0x280>
c00237b9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00237bd:	0f 85 a7 00 00 00    	jne    c002386a <__addsf3+0x2f4>
c00237c3:	85 d2                	test   edx,edx
c00237c5:	75 12                	jne    c00237d9 <__addsf3+0x263>
c00237c7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00237ca:	85 db                	test   ebx,ebx
c00237cc:	0f 85 9d 00 00 00    	jne    c002386f <__addsf3+0x2f9>
c00237d2:	31 ff                	xor    edi,edi
c00237d4:	e9 96 00 00 00       	jmp    c002386f <__addsf3+0x2f9>
c00237d9:	85 db                	test   ebx,ebx
c00237db:	0f 84 8e 00 00 00    	je     c002386f <__addsf3+0x2f9>
c00237e1:	89 d0                	mov    eax,edx
c00237e3:	29 d8                	sub    eax,ebx
c00237e5:	79 06                	jns    c00237ed <__addsf3+0x277>
c00237e7:	89 d8                	mov    eax,ebx
c00237e9:	29 d0                	sub    eax,edx
c00237eb:	eb 5a                	jmp    c0023847 <__addsf3+0x2d1>
c00237ed:	bf 00 00 00 00       	mov    edi,0x0
c00237f2:	74 7b                	je     c002386f <__addsf3+0x2f9>
c00237f4:	eb 4a                	jmp    c0023840 <__addsf3+0x2ca>
c00237f6:	89 d0                	mov    eax,edx
c00237f8:	29 d8                	sub    eax,ebx
c00237fa:	79 12                	jns    c002380e <__addsf3+0x298>
c00237fc:	89 d8                	mov    eax,ebx
c00237fe:	29 d0                	sub    eax,edx
c0023800:	eb 09                	jmp    c002380b <__addsf3+0x295>
c0023802:	85 c0                	test   eax,eax
c0023804:	79 41                	jns    c0023847 <__addsf3+0x2d1>
c0023806:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002380b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c002380e:	31 f6                	xor    esi,esi
c0023810:	85 c0                	test   eax,eax
c0023812:	74 33                	je     c0023847 <__addsf3+0x2d1>
c0023814:	0f bd c8             	bsr    ecx,eax
c0023817:	83 f1 1f             	xor    ecx,0x1f
c002381a:	d3 e0                	shl    eax,cl
c002381c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0023820:	39 ca                	cmp    edx,ecx
c0023822:	7f 10                	jg     c0023834 <__addsf3+0x2be>
c0023824:	29 d1                	sub    ecx,edx
c0023826:	41                   	inc    ecx
c0023827:	d3 e8                	shr    eax,cl
c0023829:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002382c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0023832:	eb 13                	jmp    c0023847 <__addsf3+0x2d1>
c0023834:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023837:	29 ce                	sub    esi,ecx
c0023839:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002383e:	eb 07                	jmp    c0023847 <__addsf3+0x2d1>
c0023840:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0023843:	eb 02                	jmp    c0023847 <__addsf3+0x2d1>
c0023845:	31 c0                	xor    eax,eax
c0023847:	89 c2                	mov    edx,eax
c0023849:	c1 ea 08             	shr    edx,0x8
c002384c:	a8 7f                	test   al,0x7f
c002384e:	0f 95 c1             	setne  cl
c0023851:	09 d1                	or     ecx,edx
c0023853:	83 e1 01             	and    ecx,0x1
c0023856:	c1 e8 07             	shr    eax,0x7
c0023859:	21 c8                	and    eax,ecx
c002385b:	c1 e6 17             	shl    esi,0x17
c002385e:	09 d6                	or     esi,edx
c0023860:	8d 3c 30             	lea    edi,[eax+esi*1]
c0023863:	eb 0a                	jmp    c002386f <__addsf3+0x2f9>
c0023865:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0023868:	eb 05                	jmp    c002386f <__addsf3+0x2f9>
c002386a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c002386f:	89 f8                	mov    eax,edi
c0023871:	5a                   	pop    edx
c0023872:	59                   	pop    ecx
c0023873:	5b                   	pop    ebx
c0023874:	5e                   	pop    esi
c0023875:	5f                   	pop    edi
c0023876:	5d                   	pop    ebp
c0023877:	c3                   	ret    

c0023878 <__subsf3>:
c0023878:	55                   	push   ebp
c0023879:	89 e5                	mov    ebp,esp
c002387b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002387e:	05 00 00 00 80       	add    eax,0x80000000
c0023883:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0023886:	5d                   	pop    ebp
c0023887:	e9 ea fc ff ff       	jmp    c0023576 <__addsf3>

c002388c <__negsf2>:
c002388c:	55                   	push   ebp
c002388d:	89 e5                	mov    ebp,esp
c002388f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0023892:	05 00 00 00 80       	add    eax,0x80000000
c0023897:	5d                   	pop    ebp
c0023898:	c3                   	ret    

c0023899 <__mulsf3>:
c0023899:	55                   	push   ebp
c002389a:	89 e5                	mov    ebp,esp
c002389c:	57                   	push   edi
c002389d:	56                   	push   esi
c002389e:	53                   	push   ebx
c002389f:	83 ec 1c             	sub    esp,0x1c
c00238a2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00238a5:	89 f0                	mov    eax,esi
c00238a7:	89 f1                	mov    ecx,esi
c00238a9:	c1 f9 17             	sar    ecx,0x17
c00238ac:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00238af:	c1 e0 08             	shl    eax,0x8
c00238b2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00238b7:	89 c1                	mov    ecx,eax
c00238b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00238bc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00238bf:	89 c7                	mov    edi,eax
c00238c1:	c1 ff 17             	sar    edi,0x17
c00238c4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00238c8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00238cb:	89 f8                	mov    eax,edi
c00238cd:	0f b6 c0             	movzx  eax,al
c00238d0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00238d3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c00238d7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00238da:	42                   	inc    edx
c00238db:	80 e2 fe             	and    dl,0xfe
c00238de:	75 7b                	jne    c002395b <__mulsf3+0xc2>
c00238e0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00238e4:	74 54                	je     c002393a <__mulsf3+0xa1>
c00238e6:	85 c9                	test   ecx,ecx
c00238e8:	0f 85 64 01 00 00    	jne    c0023a52 <__mulsf3+0x1b9>
c00238ee:	8d 57 01             	lea    edx,[edi+0x1]
c00238f1:	80 e2 fe             	and    dl,0xfe
c00238f4:	75 1f                	jne    c0023915 <__mulsf3+0x7c>
c00238f6:	85 c0                	test   eax,eax
c00238f8:	b8 00 00 00 00       	mov    eax,0x0
c00238fd:	74 29                	je     c0023928 <__mulsf3+0x8f>
c00238ff:	53                   	push   ebx
c0023900:	53                   	push   ebx
c0023901:	50                   	push   eax
c0023902:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023905:	e8 96 05 00 00       	call   c0023ea0 <__nesf2>
c002390a:	83 c4 10             	add    esp,0x10
c002390d:	85 c0                	test   eax,eax
c002390f:	0f 85 3a 01 00 00    	jne    c0023a4f <__mulsf3+0x1b6>
c0023915:	85 ff                	test   edi,edi
c0023917:	0f 89 35 01 00 00    	jns    c0023a52 <__mulsf3+0x1b9>
c002391d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0023923:	e9 2a 01 00 00       	jmp    c0023a52 <__mulsf3+0x1b9>
c0023928:	51                   	push   ecx
c0023929:	51                   	push   ecx
c002392a:	50                   	push   eax
c002392b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002392e:	e8 6d 05 00 00       	call   c0023ea0 <__nesf2>
c0023933:	83 c4 10             	add    esp,0x10
c0023936:	85 c0                	test   eax,eax
c0023938:	eb 15                	jmp    c002394f <__mulsf3+0xb6>
c002393a:	85 c9                	test   ecx,ecx
c002393c:	74 0b                	je     c0023949 <__mulsf3+0xb0>
c002393e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0023941:	01 c9                	add    ecx,ecx
c0023943:	78 16                	js     c002395b <__mulsf3+0xc2>
c0023945:	89 d3                	mov    ebx,edx
c0023947:	eb f5                	jmp    c002393e <__mulsf3+0xa5>
c0023949:	89 f8                	mov    eax,edi
c002394b:	f7 d0                	not    eax
c002394d:	84 c0                	test   al,al
c002394f:	75 c4                	jne    c0023915 <__mulsf3+0x7c>
c0023951:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0023956:	e9 f7 00 00 00       	jmp    c0023a52 <__mulsf3+0x1b9>
c002395b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002395e:	c1 e6 08             	shl    esi,0x8
c0023961:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0023967:	8d 57 01             	lea    edx,[edi+0x1]
c002396a:	80 e2 fe             	and    dl,0xfe
c002396d:	75 63                	jne    c00239d2 <__mulsf3+0x139>
c002396f:	85 c0                	test   eax,eax
c0023971:	74 2f                	je     c00239a2 <__mulsf3+0x109>
c0023973:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0023977:	0f 89 d2 00 00 00    	jns    c0023a4f <__mulsf3+0x1b6>
c002397d:	52                   	push   edx
c002397e:	52                   	push   edx
c002397f:	6a 00                	push   0x0
c0023981:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023984:	e8 dc 04 00 00       	call   c0023e65 <__eqsf2>
c0023989:	83 c4 10             	add    esp,0x10
c002398c:	85 c0                	test   eax,eax
c002398e:	0f 85 bb 00 00 00    	jne    c0023a4f <__mulsf3+0x1b6>
c0023994:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023997:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c002399d:	e9 b0 00 00 00       	jmp    c0023a52 <__mulsf3+0x1b9>
c00239a2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00239a5:	50                   	push   eax
c00239a6:	50                   	push   eax
c00239a7:	6a 00                	push   0x0
c00239a9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00239ac:	e8 b4 04 00 00       	call   c0023e65 <__eqsf2>
c00239b1:	83 c4 10             	add    esp,0x10
c00239b4:	85 c0                	test   eax,eax
c00239b6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00239b9:	75 0c                	jne    c00239c7 <__mulsf3+0x12e>
c00239bb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00239bf:	0f 89 8a 00 00 00    	jns    c0023a4f <__mulsf3+0x1b6>
c00239c5:	eb cd                	jmp    c0023994 <__mulsf3+0xfb>
c00239c7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00239ca:	01 f6                	add    esi,esi
c00239cc:	78 04                	js     c00239d2 <__mulsf3+0x139>
c00239ce:	89 c3                	mov    ebx,eax
c00239d0:	eb f5                	jmp    c00239c7 <__mulsf3+0x12e>
c00239d2:	89 c8                	mov    eax,ecx
c00239d4:	0d 00 00 00 80       	or     eax,0x80000000
c00239d9:	81 ce 00 00 00 80    	or     esi,0x80000000
c00239df:	f7 e6                	mul    esi
c00239e1:	85 c0                	test   eax,eax
c00239e3:	0f 95 c0             	setne  al
c00239e6:	0f b6 c0             	movzx  eax,al
c00239e9:	09 c2                	or     edx,eax
c00239eb:	78 03                	js     c00239f0 <__mulsf3+0x157>
c00239ed:	01 d2                	add    edx,edx
c00239ef:	4b                   	dec    ebx
c00239f0:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c00239f6:	7f 22                	jg     c0023a1a <__mulsf3+0x181>
c00239f8:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00239fe:	85 db                	test   ebx,ebx
c0023a00:	7f 23                	jg     c0023a25 <__mulsf3+0x18c>
c0023a02:	83 fb e9             	cmp    ebx,0xffffffe9
c0023a05:	7c 1a                	jl     c0023a21 <__mulsf3+0x188>
c0023a07:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023a0d:	b9 01 00 00 00       	mov    ecx,0x1
c0023a12:	29 d9                	sub    ecx,ebx
c0023a14:	d3 ea                	shr    edx,cl
c0023a16:	31 db                	xor    ebx,ebx
c0023a18:	eb 0b                	jmp    c0023a25 <__mulsf3+0x18c>
c0023a1a:	bb ff 00 00 00       	mov    ebx,0xff
c0023a1f:	eb 02                	jmp    c0023a23 <__mulsf3+0x18a>
c0023a21:	31 db                	xor    ebx,ebx
c0023a23:	31 d2                	xor    edx,edx
c0023a25:	89 d0                	mov    eax,edx
c0023a27:	c1 e8 08             	shr    eax,0x8
c0023a2a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0023a2d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0023a33:	09 fb                	or     ebx,edi
c0023a35:	c1 e3 17             	shl    ebx,0x17
c0023a38:	09 c3                	or     ebx,eax
c0023a3a:	f6 c2 7f             	test   dl,0x7f
c0023a3d:	0f 95 c1             	setne  cl
c0023a40:	09 c8                	or     eax,ecx
c0023a42:	83 e0 01             	and    eax,0x1
c0023a45:	c1 ea 07             	shr    edx,0x7
c0023a48:	21 c2                	and    edx,eax
c0023a4a:	8d 34 13             	lea    esi,[ebx+edx*1]
c0023a4d:	eb 03                	jmp    c0023a52 <__mulsf3+0x1b9>
c0023a4f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0023a52:	89 f0                	mov    eax,esi
c0023a54:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023a57:	5b                   	pop    ebx
c0023a58:	5e                   	pop    esi
c0023a59:	5f                   	pop    edi
c0023a5a:	5d                   	pop    ebp
c0023a5b:	c3                   	ret    

c0023a5c <__divsf3>:
c0023a5c:	55                   	push   ebp
c0023a5d:	89 e5                	mov    ebp,esp
c0023a5f:	57                   	push   edi
c0023a60:	56                   	push   esi
c0023a61:	53                   	push   ebx
c0023a62:	83 ec 1c             	sub    esp,0x1c
c0023a65:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0023a68:	89 d8                	mov    eax,ebx
c0023a6a:	89 d9                	mov    ecx,ebx
c0023a6c:	c1 f9 17             	sar    ecx,0x17
c0023a6f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0023a72:	c1 e0 08             	shl    eax,0x8
c0023a75:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023a7a:	89 c1                	mov    ecx,eax
c0023a7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0023a7f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023a82:	89 c7                	mov    edi,eax
c0023a84:	c1 ff 17             	sar    edi,0x17
c0023a87:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0023a8b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0023a8e:	89 f8                	mov    eax,edi
c0023a90:	0f b6 c0             	movzx  eax,al
c0023a93:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0023a96:	29 c6                	sub    esi,eax
c0023a98:	83 c6 7f             	add    esi,0x7f
c0023a9b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0023a9e:	42                   	inc    edx
c0023a9f:	80 e2 fe             	and    dl,0xfe
c0023aa2:	0f 85 9c 00 00 00    	jne    c0023b44 <__divsf3+0xe8>
c0023aa8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0023aac:	74 33                	je     c0023ae1 <__divsf3+0x85>
c0023aae:	85 c9                	test   ecx,ecx
c0023ab0:	0f 85 c7 01 00 00    	jne    c0023c7d <__divsf3+0x221>
c0023ab6:	8d 57 01             	lea    edx,[edi+0x1]
c0023ab9:	80 e2 fe             	and    dl,0xfe
c0023abc:	75 2f                	jne    c0023aed <__divsf3+0x91>
c0023abe:	85 c0                	test   eax,eax
c0023ac0:	74 2b                	je     c0023aed <__divsf3+0x91>
c0023ac2:	51                   	push   ecx
c0023ac3:	51                   	push   ecx
c0023ac4:	6a 00                	push   0x0
c0023ac6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023ac9:	e8 d2 03 00 00       	call   c0023ea0 <__nesf2>
c0023ace:	83 c4 10             	add    esp,0x10
c0023ad1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023ad4:	85 c0                	test   eax,eax
c0023ad6:	0f 85 a1 01 00 00    	jne    c0023c7d <__divsf3+0x221>
c0023adc:	e9 92 01 00 00       	jmp    c0023c73 <__divsf3+0x217>
c0023ae1:	85 c9                	test   ecx,ecx
c0023ae3:	75 1b                	jne    c0023b00 <__divsf3+0xa4>
c0023ae5:	8d 57 01             	lea    edx,[edi+0x1]
c0023ae8:	80 e2 fe             	and    dl,0xfe
c0023aeb:	74 1e                	je     c0023b0b <__divsf3+0xaf>
c0023aed:	85 ff                	test   edi,edi
c0023aef:	0f 89 88 01 00 00    	jns    c0023c7d <__divsf3+0x221>
c0023af5:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0023afb:	e9 7d 01 00 00       	jmp    c0023c7d <__divsf3+0x221>
c0023b00:	8d 56 ff             	lea    edx,[esi-0x1]
c0023b03:	01 c9                	add    ecx,ecx
c0023b05:	78 3d                	js     c0023b44 <__divsf3+0xe8>
c0023b07:	89 d6                	mov    esi,edx
c0023b09:	eb f5                	jmp    c0023b00 <__divsf3+0xa4>
c0023b0b:	85 c0                	test   eax,eax
c0023b0d:	b8 00 00 00 00       	mov    eax,0x0
c0023b12:	74 18                	je     c0023b2c <__divsf3+0xd0>
c0023b14:	52                   	push   edx
c0023b15:	52                   	push   edx
c0023b16:	50                   	push   eax
c0023b17:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b1a:	e8 81 03 00 00       	call   c0023ea0 <__nesf2>
c0023b1f:	83 c4 10             	add    esp,0x10
c0023b22:	85 c0                	test   eax,eax
c0023b24:	0f 85 50 01 00 00    	jne    c0023c7a <__divsf3+0x21e>
c0023b2a:	eb c1                	jmp    c0023aed <__divsf3+0x91>
c0023b2c:	56                   	push   esi
c0023b2d:	56                   	push   esi
c0023b2e:	50                   	push   eax
c0023b2f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b32:	e8 69 03 00 00       	call   c0023ea0 <__nesf2>
c0023b37:	83 c4 10             	add    esp,0x10
c0023b3a:	85 c0                	test   eax,eax
c0023b3c:	0f 84 31 01 00 00    	je     c0023c73 <__divsf3+0x217>
c0023b42:	eb a9                	jmp    c0023aed <__divsf3+0x91>
c0023b44:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0023b47:	c1 e3 08             	shl    ebx,0x8
c0023b4a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023b50:	8d 57 01             	lea    edx,[edi+0x1]
c0023b53:	80 e2 fe             	and    dl,0xfe
c0023b56:	75 71                	jne    c0023bc9 <__divsf3+0x16d>
c0023b58:	85 c0                	test   eax,eax
c0023b5a:	ba 00 00 00 00       	mov    edx,0x0
c0023b5f:	74 2f                	je     c0023b90 <__divsf3+0x134>
c0023b61:	51                   	push   ecx
c0023b62:	51                   	push   ecx
c0023b63:	52                   	push   edx
c0023b64:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b67:	e8 f9 02 00 00       	call   c0023e65 <__eqsf2>
c0023b6c:	83 c4 10             	add    esp,0x10
c0023b6f:	85 c0                	test   eax,eax
c0023b71:	0f 85 03 01 00 00    	jne    c0023c7a <__divsf3+0x21e>
c0023b77:	31 d2                	xor    edx,edx
c0023b79:	89 d3                	mov    ebx,edx
c0023b7b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0023b7e:	31 f8                	xor    eax,edi
c0023b80:	0f 89 f7 00 00 00    	jns    c0023c7d <__divsf3+0x221>
c0023b86:	bb 00 00 00 80       	mov    ebx,0x80000000
c0023b8b:	e9 ed 00 00 00       	jmp    c0023c7d <__divsf3+0x221>
c0023b90:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0023b93:	50                   	push   eax
c0023b94:	50                   	push   eax
c0023b95:	52                   	push   edx
c0023b96:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023b99:	e8 c7 02 00 00       	call   c0023e65 <__eqsf2>
c0023b9e:	83 c4 10             	add    esp,0x10
c0023ba1:	85 c0                	test   eax,eax
c0023ba3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0023ba6:	75 16                	jne    c0023bbe <__divsf3+0x162>
c0023ba8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0023bab:	31 fb                	xor    ebx,edi
c0023bad:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0023bb3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0023bb9:	e9 bf 00 00 00       	jmp    c0023c7d <__divsf3+0x221>
c0023bbe:	8d 46 01             	lea    eax,[esi+0x1]
c0023bc1:	01 db                	add    ebx,ebx
c0023bc3:	78 04                	js     c0023bc9 <__divsf3+0x16d>
c0023bc5:	89 c6                	mov    esi,eax
c0023bc7:	eb f5                	jmp    c0023bbe <__divsf3+0x162>
c0023bc9:	89 c8                	mov    eax,ecx
c0023bcb:	0d 00 00 00 80       	or     eax,0x80000000
c0023bd0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0023bd6:	31 d2                	xor    edx,edx
c0023bd8:	39 d8                	cmp    eax,ebx
c0023bda:	72 07                	jb     c0023be3 <__divsf3+0x187>
c0023bdc:	29 d8                	sub    eax,ebx
c0023bde:	ba 01 00 00 00       	mov    edx,0x1
c0023be3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0023bea:	01 d2                	add    edx,edx
c0023bec:	89 c1                	mov    ecx,eax
c0023bee:	01 c0                	add    eax,eax
c0023bf0:	85 c9                	test   ecx,ecx
c0023bf2:	78 04                	js     c0023bf8 <__divsf3+0x19c>
c0023bf4:	39 c3                	cmp    ebx,eax
c0023bf6:	77 05                	ja     c0023bfd <__divsf3+0x1a1>
c0023bf8:	29 d8                	sub    eax,ebx
c0023bfa:	83 ca 01             	or     edx,0x1
c0023bfd:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0023c00:	75 e8                	jne    c0023bea <__divsf3+0x18e>
c0023c02:	85 c0                	test   eax,eax
c0023c04:	0f 95 c0             	setne  al
c0023c07:	0f b6 c0             	movzx  eax,al
c0023c0a:	c1 e2 06             	shl    edx,0x6
c0023c0d:	09 c2                	or     edx,eax
c0023c0f:	78 03                	js     c0023c14 <__divsf3+0x1b8>
c0023c11:	01 d2                	add    edx,edx
c0023c13:	4e                   	dec    esi
c0023c14:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0023c1a:	7f 22                	jg     c0023c3e <__divsf3+0x1e2>
c0023c1c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0023c22:	85 f6                	test   esi,esi
c0023c24:	7f 23                	jg     c0023c49 <__divsf3+0x1ed>
c0023c26:	83 fe e9             	cmp    esi,0xffffffe9
c0023c29:	7c 1a                	jl     c0023c45 <__divsf3+0x1e9>
c0023c2b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0023c31:	b9 01 00 00 00       	mov    ecx,0x1
c0023c36:	29 f1                	sub    ecx,esi
c0023c38:	d3 ea                	shr    edx,cl
c0023c3a:	31 f6                	xor    esi,esi
c0023c3c:	eb 0b                	jmp    c0023c49 <__divsf3+0x1ed>
c0023c3e:	be ff 00 00 00       	mov    esi,0xff
c0023c43:	eb 02                	jmp    c0023c47 <__divsf3+0x1eb>
c0023c45:	31 f6                	xor    esi,esi
c0023c47:	31 d2                	xor    edx,edx
c0023c49:	89 d0                	mov    eax,edx
c0023c4b:	c1 e8 08             	shr    eax,0x8
c0023c4e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0023c51:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0023c57:	09 fe                	or     esi,edi
c0023c59:	c1 e6 17             	shl    esi,0x17
c0023c5c:	09 c6                	or     esi,eax
c0023c5e:	f6 c2 7f             	test   dl,0x7f
c0023c61:	0f 95 c1             	setne  cl
c0023c64:	09 c8                	or     eax,ecx
c0023c66:	83 e0 01             	and    eax,0x1
c0023c69:	c1 ea 07             	shr    edx,0x7
c0023c6c:	21 c2                	and    edx,eax
c0023c6e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0023c71:	eb 0a                	jmp    c0023c7d <__divsf3+0x221>
c0023c73:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0023c78:	eb 03                	jmp    c0023c7d <__divsf3+0x221>
c0023c7a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0023c7d:	89 d8                	mov    eax,ebx
c0023c7f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023c82:	5b                   	pop    ebx
c0023c83:	5e                   	pop    esi
c0023c84:	5f                   	pop    edi
c0023c85:	5d                   	pop    ebp
c0023c86:	c3                   	ret    

c0023c87 <__floatsisf>:
c0023c87:	55                   	push   ebp
c0023c88:	89 e5                	mov    ebp,esp
c0023c8a:	53                   	push   ebx
c0023c8b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023c8e:	85 d2                	test   edx,edx
c0023c90:	7e 2b                	jle    c0023cbd <__floatsisf+0x36>
c0023c92:	0f bd ca             	bsr    ecx,edx
c0023c95:	83 f1 1f             	xor    ecx,0x1f
c0023c98:	d3 e2                	shl    edx,cl
c0023c9a:	89 d0                	mov    eax,edx
c0023c9c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023ca1:	89 c3                	mov    ebx,eax
c0023ca3:	c1 eb 08             	shr    ebx,0x8
c0023ca6:	80 e2 7f             	and    dl,0x7f
c0023ca9:	0f 95 c2             	setne  dl
c0023cac:	09 da                	or     edx,ebx
c0023cae:	83 e2 01             	and    edx,0x1
c0023cb1:	c1 e8 07             	shr    eax,0x7
c0023cb4:	21 c2                	and    edx,eax
c0023cb6:	b8 9e 00 00 00       	mov    eax,0x9e
c0023cbb:	eb 32                	jmp    c0023cef <__floatsisf+0x68>
c0023cbd:	b8 00 00 00 00       	mov    eax,0x0
c0023cc2:	74 34                	je     c0023cf8 <__floatsisf+0x71>
c0023cc4:	f7 da                	neg    edx
c0023cc6:	0f bd ca             	bsr    ecx,edx
c0023cc9:	83 f1 1f             	xor    ecx,0x1f
c0023ccc:	d3 e2                	shl    edx,cl
c0023cce:	89 d0                	mov    eax,edx
c0023cd0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023cd5:	89 c3                	mov    ebx,eax
c0023cd7:	c1 eb 08             	shr    ebx,0x8
c0023cda:	80 e2 7f             	and    dl,0x7f
c0023cdd:	0f 95 c2             	setne  dl
c0023ce0:	09 da                	or     edx,ebx
c0023ce2:	83 e2 01             	and    edx,0x1
c0023ce5:	c1 e8 07             	shr    eax,0x7
c0023ce8:	21 c2                	and    edx,eax
c0023cea:	b8 9e 01 00 00       	mov    eax,0x19e
c0023cef:	29 c8                	sub    eax,ecx
c0023cf1:	c1 e0 17             	shl    eax,0x17
c0023cf4:	09 d8                	or     eax,ebx
c0023cf6:	01 d0                	add    eax,edx
c0023cf8:	5b                   	pop    ebx
c0023cf9:	5d                   	pop    ebp
c0023cfa:	c3                   	ret    

c0023cfb <__floatunsisf>:
c0023cfb:	55                   	push   ebp
c0023cfc:	89 e5                	mov    ebp,esp
c0023cfe:	53                   	push   ebx
c0023cff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023d02:	31 c0                	xor    eax,eax
c0023d04:	85 d2                	test   edx,edx
c0023d06:	74 32                	je     c0023d3a <__floatunsisf+0x3f>
c0023d08:	0f bd ca             	bsr    ecx,edx
c0023d0b:	83 f1 1f             	xor    ecx,0x1f
c0023d0e:	d3 e2                	shl    edx,cl
c0023d10:	89 d0                	mov    eax,edx
c0023d12:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0023d17:	89 c3                	mov    ebx,eax
c0023d19:	c1 eb 08             	shr    ebx,0x8
c0023d1c:	80 e2 7f             	and    dl,0x7f
c0023d1f:	0f 95 c2             	setne  dl
c0023d22:	09 da                	or     edx,ebx
c0023d24:	83 e2 01             	and    edx,0x1
c0023d27:	c1 e8 07             	shr    eax,0x7
c0023d2a:	21 c2                	and    edx,eax
c0023d2c:	b8 9e 00 00 00       	mov    eax,0x9e
c0023d31:	29 c8                	sub    eax,ecx
c0023d33:	c1 e0 17             	shl    eax,0x17
c0023d36:	09 d8                	or     eax,ebx
c0023d38:	01 d0                	add    eax,edx
c0023d3a:	5b                   	pop    ebx
c0023d3b:	5d                   	pop    ebp
c0023d3c:	c3                   	ret    

c0023d3d <__fixsfsi>:
c0023d3d:	55                   	push   ebp
c0023d3e:	89 e5                	mov    ebp,esp
c0023d40:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023d43:	89 d1                	mov    ecx,edx
c0023d45:	c1 e1 08             	shl    ecx,0x8
c0023d48:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0023d4e:	c1 fa 17             	sar    edx,0x17
c0023d51:	78 1c                	js     c0023d6f <__fixsfsi+0x32>
c0023d53:	83 ea 7f             	sub    edx,0x7f
c0023d56:	31 c0                	xor    eax,eax
c0023d58:	83 fa 1e             	cmp    edx,0x1e
c0023d5b:	77 40                	ja     c0023d9d <__fixsfsi+0x60>
c0023d5d:	89 c8                	mov    eax,ecx
c0023d5f:	0d 00 00 00 80       	or     eax,0x80000000
c0023d64:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023d69:	29 d1                	sub    ecx,edx
c0023d6b:	d3 e8                	shr    eax,cl
c0023d6d:	eb 2e                	jmp    c0023d9d <__fixsfsi+0x60>
c0023d6f:	31 c0                	xor    eax,eax
c0023d71:	81 c2 81 00 00 00    	add    edx,0x81
c0023d77:	78 24                	js     c0023d9d <__fixsfsi+0x60>
c0023d79:	83 fa 1e             	cmp    edx,0x1e
c0023d7c:	7e 09                	jle    c0023d87 <__fixsfsi+0x4a>
c0023d7e:	83 fa 1f             	cmp    edx,0x1f
c0023d81:	75 18                	jne    c0023d9b <__fixsfsi+0x5e>
c0023d83:	85 c9                	test   ecx,ecx
c0023d85:	75 14                	jne    c0023d9b <__fixsfsi+0x5e>
c0023d87:	89 c8                	mov    eax,ecx
c0023d89:	0d 00 00 00 80       	or     eax,0x80000000
c0023d8e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023d93:	29 d1                	sub    ecx,edx
c0023d95:	d3 e8                	shr    eax,cl
c0023d97:	f7 d8                	neg    eax
c0023d99:	eb 02                	jmp    c0023d9d <__fixsfsi+0x60>
c0023d9b:	31 c0                	xor    eax,eax
c0023d9d:	5d                   	pop    ebp
c0023d9e:	c3                   	ret    

c0023d9f <__fixunssfsi>:
c0023d9f:	55                   	push   ebp
c0023da0:	89 e5                	mov    ebp,esp
c0023da2:	53                   	push   ebx
c0023da3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0023da6:	89 d3                	mov    ebx,edx
c0023da8:	c1 fb 17             	sar    ebx,0x17
c0023dab:	83 eb 7f             	sub    ebx,0x7f
c0023dae:	31 c0                	xor    eax,eax
c0023db0:	83 fb 1f             	cmp    ebx,0x1f
c0023db3:	77 18                	ja     c0023dcd <__fixunssfsi+0x2e>
c0023db5:	89 d0                	mov    eax,edx
c0023db7:	c1 e0 08             	shl    eax,0x8
c0023dba:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023dbf:	0d 00 00 00 80       	or     eax,0x80000000
c0023dc4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0023dc9:	29 d9                	sub    ecx,ebx
c0023dcb:	d3 e8                	shr    eax,cl
c0023dcd:	5b                   	pop    ebx
c0023dce:	5d                   	pop    ebp
c0023dcf:	c3                   	ret    

c0023dd0 <__cmpsf2>:
c0023dd0:	55                   	push   ebp
c0023dd1:	89 e5                	mov    ebp,esp
c0023dd3:	57                   	push   edi
c0023dd4:	56                   	push   esi
c0023dd5:	53                   	push   ebx
c0023dd6:	83 ec 24             	sub    esp,0x24
c0023dd9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023ddc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023ddf:	e8 4f 10 00 00       	call   c0024e33 <__truncdfsf2>
c0023de4:	5a                   	pop    edx
c0023de5:	59                   	pop    ecx
c0023de6:	89 c3                	mov    ebx,eax
c0023de8:	c1 e8 17             	shr    eax,0x17
c0023deb:	0f b6 f0             	movzx  esi,al
c0023dee:	89 d8                	mov    eax,ebx
c0023df0:	c1 e8 1f             	shr    eax,0x1f
c0023df3:	31 c6                	xor    esi,eax
c0023df5:	c1 e3 08             	shl    ebx,0x8
c0023df8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0023dfb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0023dfe:	e8 30 10 00 00       	call   c0024e33 <__truncdfsf2>
c0023e03:	83 c4 10             	add    esp,0x10
c0023e06:	89 c1                	mov    ecx,eax
c0023e08:	c1 e9 17             	shr    ecx,0x17
c0023e0b:	0f b6 c9             	movzx  ecx,cl
c0023e0e:	89 c7                	mov    edi,eax
c0023e10:	c1 ef 1f             	shr    edi,0x1f
c0023e13:	89 ca                	mov    edx,ecx
c0023e15:	31 fa                	xor    edx,edi
c0023e17:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0023e1a:	c1 e0 08             	shl    eax,0x8
c0023e1d:	89 c2                	mov    edx,eax
c0023e1f:	89 d8                	mov    eax,ebx
c0023e21:	09 d0                	or     eax,edx
c0023e23:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0023e28:	09 f0                	or     eax,esi
c0023e2a:	75 08                	jne    c0023e34 <__cmpsf2+0x64>
c0023e2c:	31 c0                	xor    eax,eax
c0023e2e:	39 f9                	cmp    ecx,edi
c0023e30:	75 0c                	jne    c0023e3e <__cmpsf2+0x6e>
c0023e32:	eb 29                	jmp    c0023e5d <__cmpsf2+0x8d>
c0023e34:	b8 01 00 00 00       	mov    eax,0x1
c0023e39:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0023e3c:	7f 1f                	jg     c0023e5d <__cmpsf2+0x8d>
c0023e3e:	83 c8 ff             	or     eax,0xffffffff
c0023e41:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0023e44:	7c 17                	jl     c0023e5d <__cmpsf2+0x8d>
c0023e46:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0023e4c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0023e52:	b8 01 00 00 00       	mov    eax,0x1
c0023e57:	39 d3                	cmp    ebx,edx
c0023e59:	77 02                	ja     c0023e5d <__cmpsf2+0x8d>
c0023e5b:	19 c0                	sbb    eax,eax
c0023e5d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0023e60:	5b                   	pop    ebx
c0023e61:	5e                   	pop    esi
c0023e62:	5f                   	pop    edi
c0023e63:	5d                   	pop    ebp
c0023e64:	c3                   	ret    

c0023e65 <__eqsf2>:
c0023e65:	55                   	push   ebp
c0023e66:	89 e5                	mov    ebp,esp
c0023e68:	83 ec 24             	sub    esp,0x24
c0023e6b:	6a 01                	push   0x1
c0023e6d:	83 ec 0c             	sub    esp,0xc
c0023e70:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023e73:	e8 df 10 00 00       	call   c0024f57 <__extendsfdf2>
c0023e78:	83 c4 10             	add    esp,0x10
c0023e7b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023e7e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023e81:	52                   	push   edx
c0023e82:	50                   	push   eax
c0023e83:	50                   	push   eax
c0023e84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023e87:	e8 cb 10 00 00       	call   c0024f57 <__extendsfdf2>
c0023e8c:	59                   	pop    ecx
c0023e8d:	59                   	pop    ecx
c0023e8e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023e91:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023e94:	52                   	push   edx
c0023e95:	50                   	push   eax
c0023e96:	e8 35 ff ff ff       	call   c0023dd0 <__cmpsf2>
c0023e9b:	83 c4 20             	add    esp,0x20
c0023e9e:	c9                   	leave  
c0023e9f:	c3                   	ret    

c0023ea0 <__nesf2>:
c0023ea0:	eb c3                	jmp    c0023e65 <__eqsf2>

c0023ea2 <__gtsf2>:
c0023ea2:	55                   	push   ebp
c0023ea3:	89 e5                	mov    ebp,esp
c0023ea5:	83 ec 24             	sub    esp,0x24
c0023ea8:	6a ff                	push   0xffffffff
c0023eaa:	83 ec 0c             	sub    esp,0xc
c0023ead:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0023eb0:	e8 a2 10 00 00       	call   c0024f57 <__extendsfdf2>
c0023eb5:	83 c4 10             	add    esp,0x10
c0023eb8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023ebb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023ebe:	52                   	push   edx
c0023ebf:	50                   	push   eax
c0023ec0:	50                   	push   eax
c0023ec1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0023ec4:	e8 8e 10 00 00       	call   c0024f57 <__extendsfdf2>
c0023ec9:	59                   	pop    ecx
c0023eca:	59                   	pop    ecx
c0023ecb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0023ece:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0023ed1:	52                   	push   edx
c0023ed2:	50                   	push   eax
c0023ed3:	e8 f8 fe ff ff       	call   c0023dd0 <__cmpsf2>
c0023ed8:	83 c4 20             	add    esp,0x20
c0023edb:	c9                   	leave  
c0023edc:	c3                   	ret    

c0023edd <__gesf2>:
c0023edd:	eb c3                	jmp    c0023ea2 <__gtsf2>

c0023edf <__ltsf2>:
c0023edf:	eb 84                	jmp    c0023e65 <__eqsf2>

c0023ee1 <__lesf2>:
c0023ee1:	eb 82                	jmp    c0023e65 <__eqsf2>

c0023ee3 <__adddf3>:
c0023ee3:	55                   	push   ebp
c0023ee4:	89 e5                	mov    ebp,esp
c0023ee6:	57                   	push   edi
c0023ee7:	56                   	push   esi
c0023ee8:	53                   	push   ebx
c0023ee9:	83 ec 24             	sub    esp,0x24
c0023eec:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0023eef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0023ef2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0023ef5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0023ef8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0023efb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0023efe:	89 c8                	mov    eax,ecx
c0023f00:	89 ce                	mov    esi,ecx
c0023f02:	c1 fe 14             	sar    esi,0x14
c0023f05:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0023f08:	89 fb                	mov    ebx,edi
c0023f0a:	89 fa                	mov    edx,edi
c0023f0c:	c1 e2 0b             	shl    edx,0xb
c0023f0f:	c1 e0 0b             	shl    eax,0xb
c0023f12:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0023f17:	c1 eb 15             	shr    ebx,0x15
c0023f1a:	09 d8                	or     eax,ebx
c0023f1c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0023f1f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0023f22:	c1 fe 14             	sar    esi,0x14
c0023f25:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0023f28:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0023f2b:	89 f3                	mov    ebx,esi
c0023f2d:	c1 e3 0b             	shl    ebx,0xb
c0023f30:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0023f33:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0023f36:	c1 e3 0b             	shl    ebx,0xb
c0023f39:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0023f3f:	c1 ee 15             	shr    esi,0x15
c0023f42:	09 f3                	or     ebx,esi
c0023f44:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0023f47:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0023f4a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0023f4d:	0f 88 5f 02 00 00    	js     c00241b2 <__adddf3+0x2cf>
c0023f53:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0023f56:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0023f59:	85 db                	test   ebx,ebx
c0023f5b:	0f 8e c7 00 00 00    	jle    c0024028 <__adddf3+0x145>
c0023f61:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0023f68:	75 1a                	jne    c0023f84 <__adddf3+0xa1>
c0023f6a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0023f6d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0023f70:	0f 84 b2 05 00 00    	je     c0024528 <__adddf3+0x645>
c0023f76:	4b                   	dec    ebx
c0023f77:	75 23                	jne    c0023f9c <__adddf3+0xb9>
c0023f79:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0023f7c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0023f7f:	e9 99 00 00 00       	jmp    c002401d <__adddf3+0x13a>
c0023f84:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0023f87:	f7 d6                	not    esi
c0023f89:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0023f8f:	0f 84 93 05 00 00    	je     c0024528 <__adddf3+0x645>
c0023f95:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0023f9c:	83 fb 1f             	cmp    ebx,0x1f
c0023f9f:	7e 42                	jle    c0023fe3 <__adddf3+0x100>
c0023fa1:	83 fb 3f             	cmp    ebx,0x3f
c0023fa4:	0f 8f 7e 05 00 00    	jg     c0024528 <__adddf3+0x645>
c0023faa:	83 e3 1f             	and    ebx,0x1f
c0023fad:	89 d9                	mov    ecx,ebx
c0023faf:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0023fb2:	d3 ef                	shr    edi,cl
c0023fb4:	31 db                	xor    ebx,ebx
c0023fb6:	85 c9                	test   ecx,ecx
c0023fb8:	74 15                	je     c0023fcf <__adddf3+0xec>
c0023fba:	be 20 00 00 00       	mov    esi,0x20
c0023fbf:	29 ce                	sub    esi,ecx
c0023fc1:	89 f1                	mov    ecx,esi
c0023fc3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0023fc6:	d3 e6                	shl    esi,cl
c0023fc8:	31 db                	xor    ebx,ebx
c0023fca:	85 f6                	test   esi,esi
c0023fcc:	0f 95 c3             	setne  bl
c0023fcf:	31 c9                	xor    ecx,ecx
c0023fd1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0023fd5:	0f 95 c1             	setne  cl
c0023fd8:	09 cf                	or     edi,ecx
c0023fda:	09 fb                	or     ebx,edi
c0023fdc:	01 da                	add    edx,ebx
c0023fde:	83 d0 00             	adc    eax,0x0
c0023fe1:	eb 3a                	jmp    c002401d <__adddf3+0x13a>
c0023fe3:	bf 20 00 00 00       	mov    edi,0x20
c0023fe8:	29 df                	sub    edi,ebx
c0023fea:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0023fed:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0023ff0:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0023ff3:	d3 e6                	shl    esi,cl
c0023ff5:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0023ff8:	88 d9                	mov    cl,bl
c0023ffa:	d3 ef                	shr    edi,cl
c0023ffc:	09 fe                	or     esi,edi
c0023ffe:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024001:	88 d9                	mov    cl,bl
c0024003:	d3 ef                	shr    edi,cl
c0024005:	89 fb                	mov    ebx,edi
c0024007:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002400a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002400d:	d3 e7                	shl    edi,cl
c002400f:	85 ff                	test   edi,edi
c0024011:	0f 95 c1             	setne  cl
c0024014:	0f b6 c9             	movzx  ecx,cl
c0024017:	09 ce                	or     esi,ecx
c0024019:	01 f2                	add    edx,esi
c002401b:	11 d8                	adc    eax,ebx
c002401d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024020:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024023:	e9 52 01 00 00       	jmp    c002417a <__adddf3+0x297>
c0024028:	0f 84 d5 00 00 00    	je     c0024103 <__adddf3+0x220>
c002402e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024031:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0024034:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024037:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002403a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0024041:	75 20                	jne    c0024063 <__adddf3+0x180>
c0024043:	89 d6                	mov    esi,edx
c0024045:	09 c6                	or     esi,eax
c0024047:	0f 84 db 04 00 00    	je     c0024528 <__adddf3+0x645>
c002404d:	4b                   	dec    ebx
c002404e:	75 29                	jne    c0024079 <__adddf3+0x196>
c0024050:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024053:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024056:	01 d1                	add    ecx,edx
c0024058:	11 c6                	adc    esi,eax
c002405a:	89 f0                	mov    eax,esi
c002405c:	89 ca                	mov    edx,ecx
c002405e:	e9 17 01 00 00       	jmp    c002417a <__adddf3+0x297>
c0024063:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0024066:	f7 d6                	not    esi
c0024068:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002406e:	0f 84 b4 04 00 00    	je     c0024528 <__adddf3+0x645>
c0024074:	0d 00 00 00 80       	or     eax,0x80000000
c0024079:	83 fb 1f             	cmp    ebx,0x1f
c002407c:	7e 48                	jle    c00240c6 <__adddf3+0x1e3>
c002407e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024081:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024084:	83 fb 3f             	cmp    ebx,0x3f
c0024087:	0f 8f 9b 04 00 00    	jg     c0024528 <__adddf3+0x645>
c002408d:	83 e3 1f             	and    ebx,0x1f
c0024090:	89 d9                	mov    ecx,ebx
c0024092:	89 c7                	mov    edi,eax
c0024094:	d3 ef                	shr    edi,cl
c0024096:	31 db                	xor    ebx,ebx
c0024098:	85 c9                	test   ecx,ecx
c002409a:	74 12                	je     c00240ae <__adddf3+0x1cb>
c002409c:	be 20 00 00 00       	mov    esi,0x20
c00240a1:	29 ce                	sub    esi,ecx
c00240a3:	89 f1                	mov    ecx,esi
c00240a5:	d3 e0                	shl    eax,cl
c00240a7:	31 db                	xor    ebx,ebx
c00240a9:	85 c0                	test   eax,eax
c00240ab:	0f 95 c3             	setne  bl
c00240ae:	31 c0                	xor    eax,eax
c00240b0:	85 d2                	test   edx,edx
c00240b2:	0f 95 c0             	setne  al
c00240b5:	09 c7                	or     edi,eax
c00240b7:	09 fb                	or     ebx,edi
c00240b9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00240bc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00240bf:	01 da                	add    edx,ebx
c00240c1:	83 d6 00             	adc    esi,0x0
c00240c4:	eb 39                	jmp    c00240ff <__adddf3+0x21c>
c00240c6:	be 20 00 00 00       	mov    esi,0x20
c00240cb:	29 de                	sub    esi,ebx
c00240cd:	89 c7                	mov    edi,eax
c00240cf:	89 f1                	mov    ecx,esi
c00240d1:	d3 e7                	shl    edi,cl
c00240d3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00240d6:	89 d7                	mov    edi,edx
c00240d8:	88 d9                	mov    cl,bl
c00240da:	d3 ef                	shr    edi,cl
c00240dc:	89 f9                	mov    ecx,edi
c00240de:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00240e1:	09 cf                	or     edi,ecx
c00240e3:	88 d9                	mov    cl,bl
c00240e5:	d3 e8                	shr    eax,cl
c00240e7:	89 f1                	mov    ecx,esi
c00240e9:	d3 e2                	shl    edx,cl
c00240eb:	85 d2                	test   edx,edx
c00240ed:	0f 95 c2             	setne  dl
c00240f0:	0f b6 d2             	movzx  edx,dl
c00240f3:	09 d7                	or     edi,edx
c00240f5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00240f8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00240fb:	01 fa                	add    edx,edi
c00240fd:	11 c6                	adc    esi,eax
c00240ff:	89 f0                	mov    eax,esi
c0024101:	eb 77                	jmp    c002417a <__adddf3+0x297>
c0024103:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024106:	46                   	inc    esi
c0024107:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002410a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0024110:	75 41                	jne    c0024153 <__adddf3+0x270>
c0024112:	89 d3                	mov    ebx,edx
c0024114:	09 c3                	or     ebx,eax
c0024116:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002411d:	75 27                	jne    c0024146 <__adddf3+0x263>
c002411f:	85 db                	test   ebx,ebx
c0024121:	0f 84 fb 03 00 00    	je     c0024522 <__adddf3+0x63f>
c0024127:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002412a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002412d:	0f 84 f5 03 00 00    	je     c0024528 <__adddf3+0x645>
c0024133:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024136:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024139:	85 c0                	test   eax,eax
c002413b:	0f 89 91 03 00 00    	jns    c00244d2 <__adddf3+0x5ef>
c0024141:	e9 85 03 00 00       	jmp    c00244cb <__adddf3+0x5e8>
c0024146:	85 db                	test   ebx,ebx
c0024148:	0f 85 da 03 00 00    	jne    c0024528 <__adddf3+0x645>
c002414e:	e9 cf 03 00 00       	jmp    c0024522 <__adddf3+0x63f>
c0024153:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0024156:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0024159:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002415c:	f7 d1                	not    ecx
c002415e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024164:	0f 84 70 03 00 00    	je     c00244da <__adddf3+0x5f7>
c002416a:	d1 ea                	shr    edx,1
c002416c:	89 c1                	mov    ecx,eax
c002416e:	c1 e1 1f             	shl    ecx,0x1f
c0024171:	09 ca                	or     edx,ecx
c0024173:	d1 e8                	shr    eax,1
c0024175:	e9 6f 03 00 00       	jmp    c00244e9 <__adddf3+0x606>
c002417a:	85 c0                	test   eax,eax
c002417c:	0f 89 67 03 00 00    	jns    c00244e9 <__adddf3+0x606>
c0024182:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0024185:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024188:	f7 d1                	not    ecx
c002418a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0024190:	0f 84 44 03 00 00    	je     c00244da <__adddf3+0x5f7>
c0024196:	89 d1                	mov    ecx,edx
c0024198:	d1 e9                	shr    ecx,1
c002419a:	83 e2 01             	and    edx,0x1
c002419d:	09 ca                	or     edx,ecx
c002419f:	89 c1                	mov    ecx,eax
c00241a1:	c1 e1 1f             	shl    ecx,0x1f
c00241a4:	09 ca                	or     edx,ecx
c00241a6:	d1 e8                	shr    eax,1
c00241a8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00241ad:	e9 37 03 00 00       	jmp    c00244e9 <__adddf3+0x606>
c00241b2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00241b5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00241bb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00241be:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00241c1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00241c7:	29 de                	sub    esi,ebx
c00241c9:	85 f6                	test   esi,esi
c00241cb:	0f 8e bd 00 00 00    	jle    c002428e <__adddf3+0x3ab>
c00241d1:	85 db                	test   ebx,ebx
c00241d3:	75 17                	jne    c00241ec <__adddf3+0x309>
c00241d5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00241d8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00241db:	0f 84 47 03 00 00    	je     c0024528 <__adddf3+0x645>
c00241e1:	4e                   	dec    esi
c00241e2:	75 20                	jne    c0024204 <__adddf3+0x321>
c00241e4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00241e7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00241ea:	eb 5b                	jmp    c0024247 <__adddf3+0x364>
c00241ec:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00241ef:	f7 d3                	not    ebx
c00241f1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00241f7:	0f 84 2b 03 00 00    	je     c0024528 <__adddf3+0x645>
c00241fd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0024204:	83 fe 1f             	cmp    esi,0x1f
c0024207:	7e 49                	jle    c0024252 <__adddf3+0x36f>
c0024209:	83 fe 3f             	cmp    esi,0x3f
c002420c:	0f 8f 16 03 00 00    	jg     c0024528 <__adddf3+0x645>
c0024212:	83 e6 1f             	and    esi,0x1f
c0024215:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024218:	89 f1                	mov    ecx,esi
c002421a:	d3 ef                	shr    edi,cl
c002421c:	31 db                	xor    ebx,ebx
c002421e:	85 f6                	test   esi,esi
c0024220:	74 13                	je     c0024235 <__adddf3+0x352>
c0024222:	b9 20 00 00 00       	mov    ecx,0x20
c0024227:	29 f1                	sub    ecx,esi
c0024229:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002422c:	d3 e6                	shl    esi,cl
c002422e:	31 db                	xor    ebx,ebx
c0024230:	85 f6                	test   esi,esi
c0024232:	0f 95 c3             	setne  bl
c0024235:	31 c9                	xor    ecx,ecx
c0024237:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002423b:	0f 95 c1             	setne  cl
c002423e:	09 cf                	or     edi,ecx
c0024240:	09 fb                	or     ebx,edi
c0024242:	29 da                	sub    edx,ebx
c0024244:	83 d8 00             	sbb    eax,0x0
c0024247:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002424a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002424d:	e9 aa 01 00 00       	jmp    c00243fc <__adddf3+0x519>
c0024252:	bf 20 00 00 00       	mov    edi,0x20
c0024257:	29 f7                	sub    edi,esi
c0024259:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002425c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002425f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0024262:	d3 e3                	shl    ebx,cl
c0024264:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024267:	89 f1                	mov    ecx,esi
c0024269:	d3 ef                	shr    edi,cl
c002426b:	09 fb                	or     ebx,edi
c002426d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0024270:	89 f1                	mov    ecx,esi
c0024272:	d3 ef                	shr    edi,cl
c0024274:	89 fe                	mov    esi,edi
c0024276:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0024279:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002427c:	d3 e7                	shl    edi,cl
c002427e:	85 ff                	test   edi,edi
c0024280:	0f 95 c1             	setne  cl
c0024283:	0f b6 c9             	movzx  ecx,cl
c0024286:	09 cb                	or     ebx,ecx
c0024288:	29 da                	sub    edx,ebx
c002428a:	19 f0                	sbb    eax,esi
c002428c:	eb b9                	jmp    c0024247 <__adddf3+0x364>
c002428e:	0f 84 cd 00 00 00    	je     c0024361 <__adddf3+0x47e>
c0024294:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0024297:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002429a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002429d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00242a1:	75 1b                	jne    c00242be <__adddf3+0x3db>
c00242a3:	89 d6                	mov    esi,edx
c00242a5:	09 c6                	or     esi,eax
c00242a7:	0f 84 7b 02 00 00    	je     c0024528 <__adddf3+0x645>
c00242ad:	4b                   	dec    ebx
c00242ae:	75 24                	jne    c00242d4 <__adddf3+0x3f1>
c00242b0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00242b3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00242b6:	29 d1                	sub    ecx,edx
c00242b8:	19 c6                	sbb    esi,eax
c00242ba:	89 ca                	mov    edx,ecx
c00242bc:	eb 61                	jmp    c002431f <__adddf3+0x43c>
c00242be:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00242c1:	f7 d6                	not    esi
c00242c3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00242c9:	0f 84 59 02 00 00    	je     c0024528 <__adddf3+0x645>
c00242cf:	0d 00 00 00 80       	or     eax,0x80000000
c00242d4:	83 fb 1f             	cmp    ebx,0x1f
c00242d7:	7e 4d                	jle    c0024326 <__adddf3+0x443>
c00242d9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00242dc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00242df:	83 fb 3f             	cmp    ebx,0x3f
c00242e2:	0f 8f 40 02 00 00    	jg     c0024528 <__adddf3+0x645>
c00242e8:	83 e3 1f             	and    ebx,0x1f
c00242eb:	89 d9                	mov    ecx,ebx
c00242ed:	89 c7                	mov    edi,eax
c00242ef:	d3 ef                	shr    edi,cl
c00242f1:	31 db                	xor    ebx,ebx
c00242f3:	85 c9                	test   ecx,ecx
c00242f5:	74 12                	je     c0024309 <__adddf3+0x426>
c00242f7:	be 20 00 00 00       	mov    esi,0x20
c00242fc:	29 ce                	sub    esi,ecx
c00242fe:	89 f1                	mov    ecx,esi
c0024300:	d3 e0                	shl    eax,cl
c0024302:	31 db                	xor    ebx,ebx
c0024304:	85 c0                	test   eax,eax
c0024306:	0f 95 c3             	setne  bl
c0024309:	31 c0                	xor    eax,eax
c002430b:	85 d2                	test   edx,edx
c002430d:	0f 95 c0             	setne  al
c0024310:	09 c7                	or     edi,eax
c0024312:	09 fb                	or     ebx,edi
c0024314:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024317:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002431a:	29 da                	sub    edx,ebx
c002431c:	83 de 00             	sbb    esi,0x0
c002431f:	89 f0                	mov    eax,esi
c0024321:	e9 d6 00 00 00       	jmp    c00243fc <__adddf3+0x519>
c0024326:	be 20 00 00 00       	mov    esi,0x20
c002432b:	29 de                	sub    esi,ebx
c002432d:	89 c7                	mov    edi,eax
c002432f:	89 f1                	mov    ecx,esi
c0024331:	d3 e7                	shl    edi,cl
c0024333:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0024336:	89 d7                	mov    edi,edx
c0024338:	88 d9                	mov    cl,bl
c002433a:	d3 ef                	shr    edi,cl
c002433c:	89 f9                	mov    ecx,edi
c002433e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0024341:	09 cf                	or     edi,ecx
c0024343:	88 d9                	mov    cl,bl
c0024345:	d3 e8                	shr    eax,cl
c0024347:	89 f1                	mov    ecx,esi
c0024349:	d3 e2                	shl    edx,cl
c002434b:	85 d2                	test   edx,edx
c002434d:	0f 95 c2             	setne  dl
c0024350:	0f b6 d2             	movzx  edx,dl
c0024353:	09 d7                	or     edi,edx
c0024355:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0024358:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002435b:	29 fa                	sub    edx,edi
c002435d:	19 c6                	sbb    esi,eax
c002435f:	eb be                	jmp    c002431f <__adddf3+0x43c>
c0024361:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0024364:	8d 5e 01             	lea    ebx,[esi+0x1]
c0024367:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c002436d:	75 6a                	jne    c00243d9 <__adddf3+0x4f6>
c002436f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024373:	75 58                	jne    c00243cd <__adddf3+0x4ea>
c0024375:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0024378:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002437b:	89 d6                	mov    esi,edx
c002437d:	09 c6                	or     esi,eax
c002437f:	75 17                	jne    c0024398 <__adddf3+0x4b5>
c0024381:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024384:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024387:	85 db                	test   ebx,ebx
c0024389:	0f 85 99 01 00 00    	jne    c0024528 <__adddf3+0x645>
c002438f:	31 ff                	xor    edi,edi
c0024391:	31 c9                	xor    ecx,ecx
c0024393:	e9 90 01 00 00       	jmp    c0024528 <__adddf3+0x645>
c0024398:	85 db                	test   ebx,ebx
c002439a:	0f 84 88 01 00 00    	je     c0024528 <__adddf3+0x645>
c00243a0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00243a3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00243a6:	85 c0                	test   eax,eax
c00243a8:	79 10                	jns    c00243ba <__adddf3+0x4d7>
c00243aa:	31 c9                	xor    ecx,ecx
c00243ac:	f7 da                	neg    edx
c00243ae:	0f 95 c1             	setne  cl
c00243b1:	01 c8                	add    eax,ecx
c00243b3:	f7 d8                	neg    eax
c00243b5:	e9 2f 01 00 00       	jmp    c00244e9 <__adddf3+0x606>
c00243ba:	31 ff                	xor    edi,edi
c00243bc:	31 c9                	xor    ecx,ecx
c00243be:	89 c3                	mov    ebx,eax
c00243c0:	09 d3                	or     ebx,edx
c00243c2:	0f 84 60 01 00 00    	je     c0024528 <__adddf3+0x645>
c00243c8:	e9 05 01 00 00       	jmp    c00244d2 <__adddf3+0x5ef>
c00243cd:	31 ff                	xor    edi,edi
c00243cf:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00243d4:	e9 4f 01 00 00       	jmp    c0024528 <__adddf3+0x645>
c00243d9:	89 c1                	mov    ecx,eax
c00243db:	89 d0                	mov    eax,edx
c00243dd:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c00243e0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c00243e3:	89 ca                	mov    edx,ecx
c00243e5:	85 c9                	test   ecx,ecx
c00243e7:	79 2c                	jns    c0024415 <__adddf3+0x532>
c00243e9:	31 c9                	xor    ecx,ecx
c00243eb:	f7 d8                	neg    eax
c00243ed:	0f 95 c1             	setne  cl
c00243f0:	01 ca                	add    edx,ecx
c00243f2:	f7 da                	neg    edx
c00243f4:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00243f7:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00243fa:	eb 19                	jmp    c0024415 <__adddf3+0x532>
c00243fc:	85 c0                	test   eax,eax
c00243fe:	0f 89 e5 00 00 00    	jns    c00244e9 <__adddf3+0x606>
c0024404:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024409:	89 c1                	mov    ecx,eax
c002440b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002440e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024411:	89 d0                	mov    eax,edx
c0024413:	89 ca                	mov    edx,ecx
c0024415:	85 d2                	test   edx,edx
c0024417:	74 59                	je     c0024472 <__adddf3+0x58f>
c0024419:	0f bd da             	bsr    ebx,edx
c002441c:	83 f3 1f             	xor    ebx,0x1f
c002441f:	88 d9                	mov    cl,bl
c0024421:	d3 e2                	shl    edx,cl
c0024423:	bf 20 00 00 00       	mov    edi,0x20
c0024428:	89 f9                	mov    ecx,edi
c002442a:	29 d9                	sub    ecx,ebx
c002442c:	89 c6                	mov    esi,eax
c002442e:	d3 ee                	shr    esi,cl
c0024430:	09 d6                	or     esi,edx
c0024432:	88 d9                	mov    cl,bl
c0024434:	d3 e0                	shl    eax,cl
c0024436:	89 c2                	mov    edx,eax
c0024438:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002443b:	25 ff 07 00 00       	and    eax,0x7ff
c0024440:	39 d8                	cmp    eax,ebx
c0024442:	7f 22                	jg     c0024466 <__adddf3+0x583>
c0024444:	29 c3                	sub    ebx,eax
c0024446:	43                   	inc    ebx
c0024447:	88 d9                	mov    cl,bl
c0024449:	d3 ea                	shr    edx,cl
c002444b:	29 df                	sub    edi,ebx
c002444d:	89 f9                	mov    ecx,edi
c002444f:	89 f0                	mov    eax,esi
c0024451:	d3 e0                	shl    eax,cl
c0024453:	09 c2                	or     edx,eax
c0024455:	89 f0                	mov    eax,esi
c0024457:	88 d9                	mov    cl,bl
c0024459:	d3 e8                	shr    eax,cl
c002445b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002445e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0024464:	eb 6f                	jmp    c00244d5 <__adddf3+0x5f2>
c0024466:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024469:	29 d8                	sub    eax,ebx
c002446b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002446e:	89 f0                	mov    eax,esi
c0024470:	eb 59                	jmp    c00244cb <__adddf3+0x5e8>
c0024472:	85 c0                	test   eax,eax
c0024474:	74 6a                	je     c00244e0 <__adddf3+0x5fd>
c0024476:	0f bd c8             	bsr    ecx,eax
c0024479:	83 f1 1f             	xor    ecx,0x1f
c002447c:	d3 e0                	shl    eax,cl
c002447e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0024481:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024487:	83 c1 20             	add    ecx,0x20
c002448a:	39 cb                	cmp    ebx,ecx
c002448c:	7f 35                	jg     c00244c3 <__adddf3+0x5e0>
c002448e:	29 d9                	sub    ecx,ebx
c0024490:	8d 71 01             	lea    esi,[ecx+0x1]
c0024493:	83 fe 1f             	cmp    esi,0x1f
c0024496:	7e 09                	jle    c00244a1 <__adddf3+0x5be>
c0024498:	83 e9 1f             	sub    ecx,0x1f
c002449b:	d3 e8                	shr    eax,cl
c002449d:	89 c3                	mov    ebx,eax
c002449f:	eb 11                	jmp    c00244b2 <__adddf3+0x5cf>
c00244a1:	b9 20 00 00 00       	mov    ecx,0x20
c00244a6:	29 f1                	sub    ecx,esi
c00244a8:	89 c3                	mov    ebx,eax
c00244aa:	d3 e3                	shl    ebx,cl
c00244ac:	89 f1                	mov    ecx,esi
c00244ae:	d3 e8                	shr    eax,cl
c00244b0:	89 c2                	mov    edx,eax
c00244b2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00244b5:	25 00 f8 ff ff       	and    eax,0xfffff800
c00244ba:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00244bd:	89 d0                	mov    eax,edx
c00244bf:	89 da                	mov    edx,ebx
c00244c1:	eb 26                	jmp    c00244e9 <__adddf3+0x606>
c00244c3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00244c6:	29 cf                	sub    edi,ecx
c00244c8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00244cb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00244d0:	eb 17                	jmp    c00244e9 <__adddf3+0x606>
c00244d2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00244d5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00244d8:	eb 0f                	jmp    c00244e9 <__adddf3+0x606>
c00244da:	31 d2                	xor    edx,edx
c00244dc:	31 c0                	xor    eax,eax
c00244de:	eb 09                	jmp    c00244e9 <__adddf3+0x606>
c00244e0:	89 c2                	mov    edx,eax
c00244e2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00244e9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00244ec:	c1 e1 14             	shl    ecx,0x14
c00244ef:	89 c3                	mov    ebx,eax
c00244f1:	c1 eb 0b             	shr    ebx,0xb
c00244f4:	09 d9                	or     ecx,ebx
c00244f6:	89 d3                	mov    ebx,edx
c00244f8:	c1 eb 0b             	shr    ebx,0xb
c00244fb:	c1 e0 15             	shl    eax,0x15
c00244fe:	09 d8                	or     eax,ebx
c0024500:	89 c7                	mov    edi,eax
c0024502:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0024508:	0f 95 c0             	setne  al
c002450b:	89 c6                	mov    esi,eax
c002450d:	09 f3                	or     ebx,esi
c002450f:	83 e3 01             	and    ebx,0x1
c0024512:	c1 ea 0a             	shr    edx,0xa
c0024515:	21 da                	and    edx,ebx
c0024517:	89 f8                	mov    eax,edi
c0024519:	01 d0                	add    eax,edx
c002451b:	83 d1 00             	adc    ecx,0x0
c002451e:	89 c7                	mov    edi,eax
c0024520:	eb 06                	jmp    c0024528 <__adddf3+0x645>
c0024522:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0024525:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0024528:	89 f8                	mov    eax,edi
c002452a:	89 ca                	mov    edx,ecx
c002452c:	83 c4 24             	add    esp,0x24
c002452f:	5b                   	pop    ebx
c0024530:	5e                   	pop    esi
c0024531:	5f                   	pop    edi
c0024532:	5d                   	pop    ebp
c0024533:	c3                   	ret    

c0024534 <__subdf3>:
c0024534:	55                   	push   ebp
c0024535:	89 e5                	mov    ebp,esp
c0024537:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002453a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002453d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0024543:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0024546:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0024549:	5d                   	pop    ebp
c002454a:	e9 94 f9 ff ff       	jmp    c0023ee3 <__adddf3>

c002454f <__negdf2>:
c002454f:	55                   	push   ebp
c0024550:	89 e5                	mov    ebp,esp
c0024552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024555:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024558:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002455e:	5d                   	pop    ebp
c002455f:	c3                   	ret    

c0024560 <__muldf3>:
c0024560:	55                   	push   ebp
c0024561:	89 e5                	mov    ebp,esp
c0024563:	57                   	push   edi
c0024564:	56                   	push   esi
c0024565:	53                   	push   ebx
c0024566:	83 ec 24             	sub    esp,0x24
c0024569:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002456c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002456f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024572:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024575:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0024578:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002457b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002457e:	89 c8                	mov    eax,ecx
c0024580:	c1 f8 14             	sar    eax,0x14
c0024583:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024586:	89 f8                	mov    eax,edi
c0024588:	89 fb                	mov    ebx,edi
c002458a:	c1 e3 0b             	shl    ebx,0xb
c002458d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0024590:	c1 e1 0b             	shl    ecx,0xb
c0024593:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024599:	c1 e8 15             	shr    eax,0x15
c002459c:	09 c1                	or     ecx,eax
c002459e:	89 d6                	mov    esi,edx
c00245a0:	89 d0                	mov    eax,edx
c00245a2:	c1 f8 14             	sar    eax,0x14
c00245a5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00245a8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00245ab:	89 c3                	mov    ebx,eax
c00245ad:	c1 e3 0b             	shl    ebx,0xb
c00245b0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00245b3:	c1 e6 0b             	shl    esi,0xb
c00245b6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00245bc:	c1 e8 15             	shr    eax,0x15
c00245bf:	09 c6                	or     esi,eax
c00245c1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00245c4:	25 ff 07 00 00       	and    eax,0x7ff
c00245c9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00245cc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00245cf:	25 ff 07 00 00       	and    eax,0x7ff
c00245d4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00245d7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00245da:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00245dd:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c00245e4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00245e7:	40                   	inc    eax
c00245e8:	a9 fe 07 00 00       	test   eax,0x7fe
c00245ed:	0f 85 8d 00 00 00    	jne    c0024680 <__muldf3+0x120>
c00245f3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00245f6:	09 c8                	or     eax,ecx
c00245f8:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00245fc:	74 44                	je     c0024642 <__muldf3+0xe2>
c00245fe:	85 c0                	test   eax,eax
c0024600:	0f 85 31 02 00 00    	jne    c0024837 <__muldf3+0x2d7>
c0024606:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024609:	40                   	inc    eax
c002460a:	a9 fe 07 00 00       	test   eax,0x7fe
c002460f:	75 13                	jne    c0024624 <__muldf3+0xc4>
c0024611:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0024614:	09 f1                	or     ecx,esi
c0024616:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002461a:	74 22                	je     c002463e <__muldf3+0xde>
c002461c:	85 c9                	test   ecx,ecx
c002461e:	0f 85 0d 02 00 00    	jne    c0024831 <__muldf3+0x2d1>
c0024624:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0024628:	0f 89 09 02 00 00    	jns    c0024837 <__muldf3+0x2d7>
c002462e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024631:	05 00 00 00 80       	add    eax,0x80000000
c0024636:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024639:	e9 f9 01 00 00       	jmp    c0024837 <__muldf3+0x2d7>
c002463e:	85 c9                	test   ecx,ecx
c0024640:	eb 2e                	jmp    c0024670 <__muldf3+0x110>
c0024642:	85 c0                	test   eax,eax
c0024644:	74 20                	je     c0024666 <__muldf3+0x106>
c0024646:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0024649:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002464c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002464f:	c1 ef 1f             	shr    edi,0x1f
c0024652:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0024655:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0024658:	8d 43 ff             	lea    eax,[ebx-0x1]
c002465b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002465e:	09 f9                	or     ecx,edi
c0024660:	78 1e                	js     c0024680 <__muldf3+0x120>
c0024662:	89 c3                	mov    ebx,eax
c0024664:	eb e0                	jmp    c0024646 <__muldf3+0xe6>
c0024666:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024669:	f7 d0                	not    eax
c002466b:	a9 ff 07 00 00       	test   eax,0x7ff
c0024670:	75 b2                	jne    c0024624 <__muldf3+0xc4>
c0024672:	31 ff                	xor    edi,edi
c0024674:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002467b:	e9 b7 01 00 00       	jmp    c0024837 <__muldf3+0x2d7>
c0024680:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024683:	40                   	inc    eax
c0024684:	a9 fe 07 00 00       	test   eax,0x7fe
c0024689:	75 57                	jne    c00246e2 <__muldf3+0x182>
c002468b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002468e:	09 f0                	or     eax,esi
c0024690:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0024694:	74 23                	je     c00246b9 <__muldf3+0x159>
c0024696:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002469a:	0f 89 91 01 00 00    	jns    c0024831 <__muldf3+0x2d1>
c00246a0:	85 c0                	test   eax,eax
c00246a2:	0f 85 89 01 00 00    	jne    c0024831 <__muldf3+0x2d1>
c00246a8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00246ab:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00246b1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00246b4:	e9 7e 01 00 00       	jmp    c0024837 <__muldf3+0x2d7>
c00246b9:	85 c0                	test   eax,eax
c00246bb:	75 0c                	jne    c00246c9 <__muldf3+0x169>
c00246bd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00246c1:	0f 89 6a 01 00 00    	jns    c0024831 <__muldf3+0x2d1>
c00246c7:	eb df                	jmp    c00246a8 <__muldf3+0x148>
c00246c9:	01 f6                	add    esi,esi
c00246cb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00246ce:	c1 ea 1f             	shr    edx,0x1f
c00246d1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00246d4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c00246d7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00246da:	09 d6                	or     esi,edx
c00246dc:	78 04                	js     c00246e2 <__muldf3+0x182>
c00246de:	89 c3                	mov    ebx,eax
c00246e0:	eb e7                	jmp    c00246c9 <__muldf3+0x169>
c00246e2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00246e8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00246ee:	89 c8                	mov    eax,ecx
c00246f0:	f7 e6                	mul    esi
c00246f2:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00246f5:	89 c7                	mov    edi,eax
c00246f7:	89 c8                	mov    eax,ecx
c00246f9:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00246fc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00246ff:	89 c1                	mov    ecx,eax
c0024701:	89 f0                	mov    eax,esi
c0024703:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0024706:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0024709:	89 c6                	mov    esi,eax
c002470b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002470e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0024711:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0024714:	31 c0                	xor    eax,eax
c0024716:	01 f1                	add    ecx,esi
c0024718:	0f 92 c0             	setb   al
c002471b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c002471e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0024721:	83 d6 00             	adc    esi,0x0
c0024724:	01 c7                	add    edi,eax
c0024726:	83 d6 00             	adc    esi,0x0
c0024729:	01 ca                	add    edx,ecx
c002472b:	0f 92 c1             	setb   cl
c002472e:	0f b6 c9             	movzx  ecx,cl
c0024731:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0024734:	83 d6 00             	adc    esi,0x0
c0024737:	01 cf                	add    edi,ecx
c0024739:	83 d6 00             	adc    esi,0x0
c002473c:	31 c9                	xor    ecx,ecx
c002473e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0024741:	0f 95 c1             	setne  cl
c0024744:	09 cf                	or     edi,ecx
c0024746:	85 f6                	test   esi,esi
c0024748:	78 0c                	js     c0024756 <__muldf3+0x1f6>
c002474a:	01 f6                	add    esi,esi
c002474c:	89 f8                	mov    eax,edi
c002474e:	c1 e8 1f             	shr    eax,0x1f
c0024751:	09 c6                	or     esi,eax
c0024753:	01 ff                	add    edi,edi
c0024755:	4b                   	dec    ebx
c0024756:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c002475c:	0f 8f 85 00 00 00    	jg     c00247e7 <__muldf3+0x287>
c0024762:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0024768:	85 db                	test   ebx,ebx
c002476a:	0f 8f 84 00 00 00    	jg     c00247f4 <__muldf3+0x294>
c0024770:	83 fb cc             	cmp    ebx,0xffffffcc
c0024773:	7c 79                	jl     c00247ee <__muldf3+0x28e>
c0024775:	ba 01 00 00 00       	mov    edx,0x1
c002477a:	29 da                	sub    edx,ebx
c002477c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0024782:	83 fa 1f             	cmp    edx,0x1f
c0024785:	7e 30                	jle    c00247b7 <__muldf3+0x257>
c0024787:	83 fa 20             	cmp    edx,0x20
c002478a:	75 0b                	jne    c0024797 <__muldf3+0x237>
c002478c:	31 c0                	xor    eax,eax
c002478e:	85 ff                	test   edi,edi
c0024790:	0f 95 c0             	setne  al
c0024793:	89 c7                	mov    edi,eax
c0024795:	eb 1a                	jmp    c00247b1 <__muldf3+0x251>
c0024797:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002479a:	89 f0                	mov    eax,esi
c002479c:	d3 e0                	shl    eax,cl
c002479e:	09 f8                	or     eax,edi
c00247a0:	0f 95 c0             	setne  al
c00247a3:	0f b6 c0             	movzx  eax,al
c00247a6:	89 c7                	mov    edi,eax
c00247a8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00247ad:	29 d9                	sub    ecx,ebx
c00247af:	d3 ee                	shr    esi,cl
c00247b1:	09 f7                	or     edi,esi
c00247b3:	31 db                	xor    ebx,ebx
c00247b5:	eb 3b                	jmp    c00247f2 <__muldf3+0x292>
c00247b7:	83 c3 1f             	add    ebx,0x1f
c00247ba:	89 f0                	mov    eax,esi
c00247bc:	88 d9                	mov    cl,bl
c00247be:	d3 e0                	shl    eax,cl
c00247c0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00247c3:	89 f8                	mov    eax,edi
c00247c5:	88 d1                	mov    cl,dl
c00247c7:	d3 e8                	shr    eax,cl
c00247c9:	89 c1                	mov    ecx,eax
c00247cb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00247ce:	09 c8                	or     eax,ecx
c00247d0:	88 d9                	mov    cl,bl
c00247d2:	d3 e7                	shl    edi,cl
c00247d4:	31 db                	xor    ebx,ebx
c00247d6:	85 ff                	test   edi,edi
c00247d8:	0f 95 c3             	setne  bl
c00247db:	89 df                	mov    edi,ebx
c00247dd:	09 c7                	or     edi,eax
c00247df:	88 d1                	mov    cl,dl
c00247e1:	d3 ee                	shr    esi,cl
c00247e3:	31 db                	xor    ebx,ebx
c00247e5:	eb 0d                	jmp    c00247f4 <__muldf3+0x294>
c00247e7:	bb ff 07 00 00       	mov    ebx,0x7ff
c00247ec:	eb 02                	jmp    c00247f0 <__muldf3+0x290>
c00247ee:	31 db                	xor    ebx,ebx
c00247f0:	31 ff                	xor    edi,edi
c00247f2:	31 f6                	xor    esi,esi
c00247f4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00247f7:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c00247fa:	25 00 f8 ff ff       	and    eax,0xfffff800
c00247ff:	09 c3                	or     ebx,eax
c0024801:	c1 e3 14             	shl    ebx,0x14
c0024804:	89 f0                	mov    eax,esi
c0024806:	c1 e8 0b             	shr    eax,0xb
c0024809:	09 c3                	or     ebx,eax
c002480b:	89 f8                	mov    eax,edi
c002480d:	c1 e8 0b             	shr    eax,0xb
c0024810:	c1 e6 15             	shl    esi,0x15
c0024813:	09 c6                	or     esi,eax
c0024815:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c002481b:	0f 95 c1             	setne  cl
c002481e:	09 c8                	or     eax,ecx
c0024820:	83 e0 01             	and    eax,0x1
c0024823:	c1 ef 0a             	shr    edi,0xa
c0024826:	21 c7                	and    edi,eax
c0024828:	01 f7                	add    edi,esi
c002482a:	83 d3 00             	adc    ebx,0x0
c002482d:	89 da                	mov    edx,ebx
c002482f:	eb 03                	jmp    c0024834 <__muldf3+0x2d4>
c0024831:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0024834:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0024837:	89 f8                	mov    eax,edi
c0024839:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002483c:	83 c4 24             	add    esp,0x24
c002483f:	5b                   	pop    ebx
c0024840:	5e                   	pop    esi
c0024841:	5f                   	pop    edi
c0024842:	5d                   	pop    ebp
c0024843:	c3                   	ret    

c0024844 <__divdf3>:
c0024844:	55                   	push   ebp
c0024845:	89 e5                	mov    ebp,esp
c0024847:	57                   	push   edi
c0024848:	56                   	push   esi
c0024849:	53                   	push   ebx
c002484a:	83 ec 2c             	sub    esp,0x2c
c002484d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0024850:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024853:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0024856:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0024859:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002485c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002485f:	89 ce                	mov    esi,ecx
c0024861:	89 c8                	mov    eax,ecx
c0024863:	c1 f8 14             	sar    eax,0x14
c0024866:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024869:	89 f8                	mov    eax,edi
c002486b:	89 fb                	mov    ebx,edi
c002486d:	c1 e3 0b             	shl    ebx,0xb
c0024870:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0024873:	c1 e6 0b             	shl    esi,0xb
c0024876:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002487c:	c1 e8 15             	shr    eax,0x15
c002487f:	09 c6                	or     esi,eax
c0024881:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0024884:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024887:	89 c2                	mov    edx,eax
c0024889:	c1 fa 14             	sar    edx,0x14
c002488c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002488f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0024892:	89 de                	mov    esi,ebx
c0024894:	c1 e6 0b             	shl    esi,0xb
c0024897:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002489a:	c1 e0 0b             	shl    eax,0xb
c002489d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00248a2:	c1 eb 15             	shr    ebx,0x15
c00248a5:	09 d8                	or     eax,ebx
c00248a7:	89 c2                	mov    edx,eax
c00248a9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00248ac:	25 ff 07 00 00       	and    eax,0x7ff
c00248b1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00248b4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00248b7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00248bd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c00248c0:	29 d8                	sub    eax,ebx
c00248c2:	05 ff 03 00 00       	add    eax,0x3ff
c00248c7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00248ca:	46                   	inc    esi
c00248cb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00248d1:	0f 85 a5 00 00 00    	jne    c002497c <__divdf3+0x138>
c00248d7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00248da:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c00248dd:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c00248e1:	74 2a                	je     c002490d <__divdf3+0xc9>
c00248e3:	85 f6                	test   esi,esi
c00248e5:	0f 85 cc 02 00 00    	jne    c0024bb7 <__divdf3+0x373>
c00248eb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00248ee:	40                   	inc    eax
c00248ef:	a9 fe 07 00 00       	test   eax,0x7fe
c00248f4:	75 26                	jne    c002491c <__divdf3+0xd8>
c00248f6:	85 db                	test   ebx,ebx
c00248f8:	74 22                	je     c002491c <__divdf3+0xd8>
c00248fa:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00248fd:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024900:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024903:	09 d0                	or     eax,edx
c0024905:	0f 85 ac 02 00 00    	jne    c0024bb7 <__divdf3+0x373>
c002490b:	eb 63                	jmp    c0024970 <__divdf3+0x12c>
c002490d:	85 f6                	test   esi,esi
c002490f:	75 22                	jne    c0024933 <__divdf3+0xef>
c0024911:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0024914:	40                   	inc    eax
c0024915:	a9 fe 07 00 00       	test   eax,0x7fe
c002491a:	74 36                	je     c0024952 <__divdf3+0x10e>
c002491c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0024920:	0f 89 91 02 00 00    	jns    c0024bb7 <__divdf3+0x373>
c0024926:	89 f8                	mov    eax,edi
c0024928:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002492e:	e9 80 02 00 00       	jmp    c0024bb3 <__divdf3+0x36f>
c0024933:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0024936:	01 f6                	add    esi,esi
c0024938:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002493b:	c1 ef 1f             	shr    edi,0x1f
c002493e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024941:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0024944:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024947:	09 f7                	or     edi,esi
c0024949:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002494c:	78 2e                	js     c002497c <__divdf3+0x138>
c002494e:	89 c8                	mov    eax,ecx
c0024950:	eb e1                	jmp    c0024933 <__divdf3+0xef>
c0024952:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0024955:	09 d0                	or     eax,edx
c0024957:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002495b:	74 0f                	je     c002496c <__divdf3+0x128>
c002495d:	85 c0                	test   eax,eax
c002495f:	74 bb                	je     c002491c <__divdf3+0xd8>
c0024961:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024964:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0024967:	e9 4b 02 00 00       	jmp    c0024bb7 <__divdf3+0x373>
c002496c:	85 c0                	test   eax,eax
c002496e:	75 ac                	jne    c002491c <__divdf3+0xd8>
c0024970:	31 ff                	xor    edi,edi
c0024972:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0024977:	e9 3b 02 00 00       	jmp    c0024bb7 <__divdf3+0x373>
c002497c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002497f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0024982:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0024988:	75 6b                	jne    c00249f5 <__divdf3+0x1b1>
c002498a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002498d:	09 d6                	or     esi,edx
c002498f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0024993:	74 28                	je     c00249bd <__divdf3+0x179>
c0024995:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0024998:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c002499b:	85 f6                	test   esi,esi
c002499d:	0f 85 14 02 00 00    	jne    c0024bb7 <__divdf3+0x373>
c00249a3:	31 ff                	xor    edi,edi
c00249a5:	31 c9                	xor    ecx,ecx
c00249a7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00249aa:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00249ad:	0f 89 04 02 00 00    	jns    c0024bb7 <__divdf3+0x373>
c00249b3:	b9 00 00 00 80       	mov    ecx,0x80000000
c00249b8:	e9 fa 01 00 00       	jmp    c0024bb7 <__divdf3+0x373>
c00249bd:	85 f6                	test   esi,esi
c00249bf:	75 1b                	jne    c00249dc <__divdf3+0x198>
c00249c1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00249c4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00249c7:	25 00 00 00 80       	and    eax,0x80000000
c00249cc:	31 c9                	xor    ecx,ecx
c00249ce:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00249d3:	89 cf                	mov    edi,ecx
c00249d5:	89 c1                	mov    ecx,eax
c00249d7:	e9 db 01 00 00       	jmp    c0024bb7 <__divdf3+0x373>
c00249dc:	01 d2                	add    edx,edx
c00249de:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00249e1:	c1 eb 1f             	shr    ebx,0x1f
c00249e4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00249e7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00249ea:	8d 48 01             	lea    ecx,[eax+0x1]
c00249ed:	09 da                	or     edx,ebx
c00249ef:	78 04                	js     c00249f5 <__divdf3+0x1b1>
c00249f1:	89 c8                	mov    eax,ecx
c00249f3:	eb e7                	jmp    c00249dc <__divdf3+0x198>
c00249f5:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00249f8:	81 ce 00 00 00 80    	or     esi,0x80000000
c00249fe:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024a04:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0024a07:	39 d6                	cmp    esi,edx
c0024a09:	77 0d                	ja     c0024a18 <__divdf3+0x1d4>
c0024a0b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024a0e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0024a11:	72 1b                	jb     c0024a2e <__divdf3+0x1ea>
c0024a13:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0024a16:	75 16                	jne    c0024a2e <__divdf3+0x1ea>
c0024a18:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024a1b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0024a1e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0024a21:	83 de 00             	sbb    esi,0x0
c0024a24:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0024a27:	ba 01 00 00 00       	mov    edx,0x1
c0024a2c:	eb 02                	jmp    c0024a30 <__divdf3+0x1ec>
c0024a2e:	31 d2                	xor    edx,edx
c0024a30:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0024a37:	31 ff                	xor    edi,edi
c0024a39:	01 ff                	add    edi,edi
c0024a3b:	89 d1                	mov    ecx,edx
c0024a3d:	c1 e9 1f             	shr    ecx,0x1f
c0024a40:	09 cf                	or     edi,ecx
c0024a42:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0024a45:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0024a48:	89 da                	mov    edx,ebx
c0024a4a:	89 f3                	mov    ebx,esi
c0024a4c:	8d 34 36             	lea    esi,[esi+esi*1]
c0024a4f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024a52:	c1 e9 1f             	shr    ecx,0x1f
c0024a55:	09 ce                	or     esi,ecx
c0024a57:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024a5a:	01 c9                	add    ecx,ecx
c0024a5c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0024a5f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0024a62:	85 db                	test   ebx,ebx
c0024a64:	78 29                	js     c0024a8f <__divdf3+0x24b>
c0024a66:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0024a69:	72 07                	jb     c0024a72 <__divdf3+0x22e>
c0024a6b:	75 3c                	jne    c0024aa9 <__divdf3+0x265>
c0024a6d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024a70:	77 37                	ja     c0024aa9 <__divdf3+0x265>
c0024a72:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024a75:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0024a78:	31 d2                	xor    edx,edx
c0024a7a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0024a7d:	0f 97 c2             	seta   dl
c0024a80:	29 d6                	sub    esi,edx
c0024a82:	89 d9                	mov    ecx,ebx
c0024a84:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0024a87:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0024a8a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024a8d:	eb 17                	jmp    c0024aa6 <__divdf3+0x262>
c0024a8f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0024a92:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0024a95:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024a98:	0f 97 c1             	seta   cl
c0024a9b:	0f b6 c9             	movzx  ecx,cl
c0024a9e:	29 ce                	sub    esi,ecx
c0024aa0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0024aa3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0024aa6:	83 ca 01             	or     edx,0x1
c0024aa9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0024aac:	75 8b                	jne    c0024a39 <__divdf3+0x1f5>
c0024aae:	c1 e7 09             	shl    edi,0x9
c0024ab1:	89 d1                	mov    ecx,edx
c0024ab3:	c1 e9 17             	shr    ecx,0x17
c0024ab6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024ab9:	09 f3                	or     ebx,esi
c0024abb:	0f 95 c3             	setne  bl
c0024abe:	0f b6 db             	movzx  ebx,bl
c0024ac1:	c1 e2 09             	shl    edx,0x9
c0024ac4:	09 d3                	or     ebx,edx
c0024ac6:	89 ca                	mov    edx,ecx
c0024ac8:	09 fa                	or     edx,edi
c0024aca:	78 0c                	js     c0024ad8 <__divdf3+0x294>
c0024acc:	01 d2                	add    edx,edx
c0024ace:	89 d9                	mov    ecx,ebx
c0024ad0:	c1 e9 1f             	shr    ecx,0x1f
c0024ad3:	09 ca                	or     edx,ecx
c0024ad5:	01 db                	add    ebx,ebx
c0024ad7:	48                   	dec    eax
c0024ad8:	3d fe 07 00 00       	cmp    eax,0x7fe
c0024add:	0f 8f 83 00 00 00    	jg     c0024b66 <__divdf3+0x322>
c0024ae3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024ae9:	85 c0                	test   eax,eax
c0024aeb:	0f 8f 82 00 00 00    	jg     c0024b73 <__divdf3+0x32f>
c0024af1:	83 f8 cc             	cmp    eax,0xffffffcc
c0024af4:	7c 77                	jl     c0024b6d <__divdf3+0x329>
c0024af6:	be 01 00 00 00       	mov    esi,0x1
c0024afb:	29 c6                	sub    esi,eax
c0024afd:	81 ca 00 00 00 80    	or     edx,0x80000000
c0024b03:	83 fe 1f             	cmp    esi,0x1f
c0024b06:	7e 2f                	jle    c0024b37 <__divdf3+0x2f3>
c0024b08:	83 fe 20             	cmp    esi,0x20
c0024b0b:	75 0a                	jne    c0024b17 <__divdf3+0x2d3>
c0024b0d:	85 db                	test   ebx,ebx
c0024b0f:	0f 95 c3             	setne  bl
c0024b12:	0f b6 db             	movzx  ebx,bl
c0024b15:	eb 1a                	jmp    c0024b31 <__divdf3+0x2ed>
c0024b17:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0024b1a:	89 d7                	mov    edi,edx
c0024b1c:	d3 e7                	shl    edi,cl
c0024b1e:	89 f9                	mov    ecx,edi
c0024b20:	09 d9                	or     ecx,ebx
c0024b22:	0f 95 c3             	setne  bl
c0024b25:	0f b6 db             	movzx  ebx,bl
c0024b28:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0024b2d:	29 c1                	sub    ecx,eax
c0024b2f:	d3 ea                	shr    edx,cl
c0024b31:	09 d3                	or     ebx,edx
c0024b33:	31 c0                	xor    eax,eax
c0024b35:	eb 3a                	jmp    c0024b71 <__divdf3+0x32d>
c0024b37:	83 c0 1f             	add    eax,0x1f
c0024b3a:	89 d7                	mov    edi,edx
c0024b3c:	88 c1                	mov    cl,al
c0024b3e:	d3 e7                	shl    edi,cl
c0024b40:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024b43:	89 df                	mov    edi,ebx
c0024b45:	89 f1                	mov    ecx,esi
c0024b47:	d3 ef                	shr    edi,cl
c0024b49:	89 f9                	mov    ecx,edi
c0024b4b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0024b4e:	09 cf                	or     edi,ecx
c0024b50:	88 c1                	mov    cl,al
c0024b52:	d3 e3                	shl    ebx,cl
c0024b54:	85 db                	test   ebx,ebx
c0024b56:	0f 95 c3             	setne  bl
c0024b59:	0f b6 db             	movzx  ebx,bl
c0024b5c:	09 fb                	or     ebx,edi
c0024b5e:	89 f1                	mov    ecx,esi
c0024b60:	d3 ea                	shr    edx,cl
c0024b62:	31 c0                	xor    eax,eax
c0024b64:	eb 0d                	jmp    c0024b73 <__divdf3+0x32f>
c0024b66:	b8 ff 07 00 00       	mov    eax,0x7ff
c0024b6b:	eb 02                	jmp    c0024b6f <__divdf3+0x32b>
c0024b6d:	31 c0                	xor    eax,eax
c0024b6f:	31 db                	xor    ebx,ebx
c0024b71:	31 d2                	xor    edx,edx
c0024b73:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0024b76:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0024b79:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0024b7f:	09 c8                	or     eax,ecx
c0024b81:	c1 e0 14             	shl    eax,0x14
c0024b84:	89 d1                	mov    ecx,edx
c0024b86:	c1 e9 0b             	shr    ecx,0xb
c0024b89:	09 c8                	or     eax,ecx
c0024b8b:	89 c6                	mov    esi,eax
c0024b8d:	89 d9                	mov    ecx,ebx
c0024b8f:	c1 e9 0b             	shr    ecx,0xb
c0024b92:	c1 e2 15             	shl    edx,0x15
c0024b95:	09 ca                	or     edx,ecx
c0024b97:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0024b9d:	0f 95 c0             	setne  al
c0024ba0:	09 c1                	or     ecx,eax
c0024ba2:	83 e1 01             	and    ecx,0x1
c0024ba5:	c1 eb 0a             	shr    ebx,0xa
c0024ba8:	21 cb                	and    ebx,ecx
c0024baa:	01 d3                	add    ebx,edx
c0024bac:	89 d8                	mov    eax,ebx
c0024bae:	83 d6 00             	adc    esi,0x0
c0024bb1:	89 f2                	mov    edx,esi
c0024bb3:	89 c7                	mov    edi,eax
c0024bb5:	89 d1                	mov    ecx,edx
c0024bb7:	89 f8                	mov    eax,edi
c0024bb9:	89 ca                	mov    edx,ecx
c0024bbb:	83 c4 2c             	add    esp,0x2c
c0024bbe:	5b                   	pop    ebx
c0024bbf:	5e                   	pop    esi
c0024bc0:	5f                   	pop    edi
c0024bc1:	5d                   	pop    ebp
c0024bc2:	c3                   	ret    

c0024bc3 <__floatsidf>:
c0024bc3:	55                   	push   ebp
c0024bc4:	89 e5                	mov    ebp,esp
c0024bc6:	56                   	push   esi
c0024bc7:	53                   	push   ebx
c0024bc8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024bcb:	85 db                	test   ebx,ebx
c0024bcd:	7e 15                	jle    c0024be4 <__floatsidf+0x21>
c0024bcf:	0f bd cb             	bsr    ecx,ebx
c0024bd2:	83 f1 1f             	xor    ecx,0x1f
c0024bd5:	d3 e3                	shl    ebx,cl
c0024bd7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024bdd:	b8 1e 04 00 00       	mov    eax,0x41e
c0024be2:	eb 21                	jmp    c0024c05 <__floatsidf+0x42>
c0024be4:	b8 00 00 00 00       	mov    eax,0x0
c0024be9:	ba 00 00 00 00       	mov    edx,0x0
c0024bee:	74 2a                	je     c0024c1a <__floatsidf+0x57>
c0024bf0:	f7 db                	neg    ebx
c0024bf2:	0f bd cb             	bsr    ecx,ebx
c0024bf5:	83 f1 1f             	xor    ecx,0x1f
c0024bf8:	d3 e3                	shl    ebx,cl
c0024bfa:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024c00:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0024c05:	29 c8                	sub    eax,ecx
c0024c07:	c1 e0 14             	shl    eax,0x14
c0024c0a:	89 c1                	mov    ecx,eax
c0024c0c:	89 de                	mov    esi,ebx
c0024c0e:	c1 ee 0b             	shr    esi,0xb
c0024c11:	09 f1                	or     ecx,esi
c0024c13:	89 ca                	mov    edx,ecx
c0024c15:	c1 e3 15             	shl    ebx,0x15
c0024c18:	89 d8                	mov    eax,ebx
c0024c1a:	5b                   	pop    ebx
c0024c1b:	5e                   	pop    esi
c0024c1c:	5d                   	pop    ebp
c0024c1d:	c3                   	ret    

c0024c1e <__floatunsidf>:
c0024c1e:	55                   	push   ebp
c0024c1f:	89 e5                	mov    ebp,esp
c0024c21:	56                   	push   esi
c0024c22:	53                   	push   ebx
c0024c23:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024c26:	85 db                	test   ebx,ebx
c0024c28:	74 2a                	je     c0024c54 <__floatunsidf+0x36>
c0024c2a:	0f bd cb             	bsr    ecx,ebx
c0024c2d:	83 f1 1f             	xor    ecx,0x1f
c0024c30:	d3 e3                	shl    ebx,cl
c0024c32:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0024c38:	b8 1e 04 00 00       	mov    eax,0x41e
c0024c3d:	29 c8                	sub    eax,ecx
c0024c3f:	c1 e0 14             	shl    eax,0x14
c0024c42:	89 c1                	mov    ecx,eax
c0024c44:	89 de                	mov    esi,ebx
c0024c46:	c1 ee 0b             	shr    esi,0xb
c0024c49:	09 f1                	or     ecx,esi
c0024c4b:	89 ca                	mov    edx,ecx
c0024c4d:	c1 e3 15             	shl    ebx,0x15
c0024c50:	89 d8                	mov    eax,ebx
c0024c52:	eb 04                	jmp    c0024c58 <__floatunsidf+0x3a>
c0024c54:	31 c0                	xor    eax,eax
c0024c56:	31 d2                	xor    edx,edx
c0024c58:	5b                   	pop    ebx
c0024c59:	5e                   	pop    esi
c0024c5a:	5d                   	pop    ebp
c0024c5b:	c3                   	ret    

c0024c5c <__fixdfsi>:
c0024c5c:	55                   	push   ebp
c0024c5d:	89 e5                	mov    ebp,esp
c0024c5f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024c62:	89 d1                	mov    ecx,edx
c0024c64:	c1 e1 0b             	shl    ecx,0xb
c0024c67:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024c70:	c1 e8 15             	shr    eax,0x15
c0024c73:	09 c1                	or     ecx,eax
c0024c75:	c1 fa 14             	sar    edx,0x14
c0024c78:	78 1f                	js     c0024c99 <__fixdfsi+0x3d>
c0024c7a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0024c80:	31 c0                	xor    eax,eax
c0024c82:	83 fa 1e             	cmp    edx,0x1e
c0024c85:	77 40                	ja     c0024cc7 <__fixdfsi+0x6b>
c0024c87:	89 c8                	mov    eax,ecx
c0024c89:	0d 00 00 00 80       	or     eax,0x80000000
c0024c8e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024c93:	29 d1                	sub    ecx,edx
c0024c95:	d3 e8                	shr    eax,cl
c0024c97:	eb 2e                	jmp    c0024cc7 <__fixdfsi+0x6b>
c0024c99:	31 c0                	xor    eax,eax
c0024c9b:	81 c2 01 04 00 00    	add    edx,0x401
c0024ca1:	78 24                	js     c0024cc7 <__fixdfsi+0x6b>
c0024ca3:	83 fa 1e             	cmp    edx,0x1e
c0024ca6:	7e 09                	jle    c0024cb1 <__fixdfsi+0x55>
c0024ca8:	83 fa 1f             	cmp    edx,0x1f
c0024cab:	75 18                	jne    c0024cc5 <__fixdfsi+0x69>
c0024cad:	85 c9                	test   ecx,ecx
c0024caf:	75 14                	jne    c0024cc5 <__fixdfsi+0x69>
c0024cb1:	89 c8                	mov    eax,ecx
c0024cb3:	0d 00 00 00 80       	or     eax,0x80000000
c0024cb8:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024cbd:	29 d1                	sub    ecx,edx
c0024cbf:	d3 e8                	shr    eax,cl
c0024cc1:	f7 d8                	neg    eax
c0024cc3:	eb 02                	jmp    c0024cc7 <__fixdfsi+0x6b>
c0024cc5:	31 c0                	xor    eax,eax
c0024cc7:	5d                   	pop    ebp
c0024cc8:	c3                   	ret    

c0024cc9 <__fixunsdfsi>:
c0024cc9:	55                   	push   ebp
c0024cca:	89 e5                	mov    ebp,esp
c0024ccc:	53                   	push   ebx
c0024ccd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024cd0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024cd3:	89 d3                	mov    ebx,edx
c0024cd5:	c1 fb 14             	sar    ebx,0x14
c0024cd8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0024cde:	31 c0                	xor    eax,eax
c0024ce0:	83 fb 1f             	cmp    ebx,0x1f
c0024ce3:	77 1d                	ja     c0024d02 <__fixunsdfsi+0x39>
c0024ce5:	89 d0                	mov    eax,edx
c0024ce7:	c1 e0 0b             	shl    eax,0xb
c0024cea:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024cef:	c1 e9 15             	shr    ecx,0x15
c0024cf2:	09 c8                	or     eax,ecx
c0024cf4:	0d 00 00 00 80       	or     eax,0x80000000
c0024cf9:	b9 1f 00 00 00       	mov    ecx,0x1f
c0024cfe:	29 d9                	sub    ecx,ebx
c0024d00:	d3 e8                	shr    eax,cl
c0024d02:	5b                   	pop    ebx
c0024d03:	5d                   	pop    ebp
c0024d04:	c3                   	ret    

c0024d05 <__cmpdf2>:
c0024d05:	55                   	push   ebp
c0024d06:	89 e5                	mov    ebp,esp
c0024d08:	57                   	push   edi
c0024d09:	56                   	push   esi
c0024d0a:	53                   	push   ebx
c0024d0b:	83 ec 0c             	sub    esp,0xc
c0024d0e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0024d11:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0024d14:	89 ca                	mov    edx,ecx
c0024d16:	c1 ea 14             	shr    edx,0x14
c0024d19:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0024d1f:	89 cb                	mov    ebx,ecx
c0024d21:	c1 fb 1f             	sar    ebx,0x1f
c0024d24:	31 da                	xor    edx,ebx
c0024d26:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024d29:	89 df                	mov    edi,ebx
c0024d2b:	c1 e7 0b             	shl    edi,0xb
c0024d2e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0024d31:	c1 e1 0b             	shl    ecx,0xb
c0024d34:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024d3a:	c1 eb 15             	shr    ebx,0x15
c0024d3d:	09 d9                	or     ecx,ebx
c0024d3f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0024d42:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0024d45:	89 ce                	mov    esi,ecx
c0024d47:	c1 ee 14             	shr    esi,0x14
c0024d4a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0024d50:	89 cb                	mov    ebx,ecx
c0024d52:	c1 fb 1f             	sar    ebx,0x1f
c0024d55:	31 de                	xor    esi,ebx
c0024d57:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0024d5a:	89 df                	mov    edi,ebx
c0024d5c:	c1 e7 0b             	shl    edi,0xb
c0024d5f:	c1 e1 0b             	shl    ecx,0xb
c0024d62:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0024d68:	c1 eb 15             	shr    ebx,0x15
c0024d6b:	09 d9                	or     ecx,ebx
c0024d6d:	89 d3                	mov    ebx,edx
c0024d6f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0024d75:	43                   	inc    ebx
c0024d76:	83 fb 01             	cmp    ebx,0x1
c0024d79:	77 08                	ja     c0024d83 <__cmpdf2+0x7e>
c0024d7b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0024d7e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0024d81:	75 68                	jne    c0024deb <__cmpdf2+0xe6>
c0024d83:	89 f3                	mov    ebx,esi
c0024d85:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0024d8b:	43                   	inc    ebx
c0024d8c:	83 fb 01             	cmp    ebx,0x1
c0024d8f:	77 06                	ja     c0024d97 <__cmpdf2+0x92>
c0024d91:	89 fb                	mov    ebx,edi
c0024d93:	09 cb                	or     ebx,ecx
c0024d95:	75 54                	jne    c0024deb <__cmpdf2+0xe6>
c0024d97:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024d9a:	09 f8                	or     eax,edi
c0024d9c:	09 c8                	or     eax,ecx
c0024d9e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0024da1:	75 12                	jne    c0024db5 <__cmpdf2+0xb0>
c0024da3:	8d 42 01             	lea    eax,[edx+0x1]
c0024da6:	83 f8 01             	cmp    eax,0x1
c0024da9:	77 0a                	ja     c0024db5 <__cmpdf2+0xb0>
c0024dab:	8d 5e 01             	lea    ebx,[esi+0x1]
c0024dae:	31 c0                	xor    eax,eax
c0024db0:	83 fb 01             	cmp    ebx,0x1
c0024db3:	76 36                	jbe    c0024deb <__cmpdf2+0xe6>
c0024db5:	b8 01 00 00 00       	mov    eax,0x1
c0024dba:	39 f2                	cmp    edx,esi
c0024dbc:	7f 2d                	jg     c0024deb <__cmpdf2+0xe6>
c0024dbe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0024dc3:	7c 26                	jl     c0024deb <__cmpdf2+0xe6>
c0024dc5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0024dc8:	77 07                	ja     c0024dd1 <__cmpdf2+0xcc>
c0024dca:	72 16                	jb     c0024de2 <__cmpdf2+0xdd>
c0024dcc:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0024dcf:	76 0a                	jbe    c0024ddb <__cmpdf2+0xd6>
c0024dd1:	89 d0                	mov    eax,edx
c0024dd3:	c1 f8 1f             	sar    eax,0x1f
c0024dd6:	83 c8 01             	or     eax,0x1
c0024dd9:	eb 10                	jmp    c0024deb <__cmpdf2+0xe6>
c0024ddb:	b8 00 00 00 00       	mov    eax,0x0
c0024de0:	73 09                	jae    c0024deb <__cmpdf2+0xe6>
c0024de2:	89 d0                	mov    eax,edx
c0024de4:	c1 f8 1f             	sar    eax,0x1f
c0024de7:	83 e0 02             	and    eax,0x2
c0024dea:	48                   	dec    eax
c0024deb:	83 c4 0c             	add    esp,0xc
c0024dee:	5b                   	pop    ebx
c0024def:	5e                   	pop    esi
c0024df0:	5f                   	pop    edi
c0024df1:	5d                   	pop    ebp
c0024df2:	c3                   	ret    

c0024df3 <__eqdf2>:
c0024df3:	55                   	push   ebp
c0024df4:	89 e5                	mov    ebp,esp
c0024df6:	50                   	push   eax
c0024df7:	6a 01                	push   0x1
c0024df9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0024dfc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0024dff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024e02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024e05:	e8 fb fe ff ff       	call   c0024d05 <__cmpdf2>
c0024e0a:	83 c4 18             	add    esp,0x18
c0024e0d:	c9                   	leave  
c0024e0e:	c3                   	ret    

c0024e0f <__nedf2>:
c0024e0f:	eb e2                	jmp    c0024df3 <__eqdf2>

c0024e11 <__gtdf2>:
c0024e11:	55                   	push   ebp
c0024e12:	89 e5                	mov    ebp,esp
c0024e14:	50                   	push   eax
c0024e15:	6a ff                	push   0xffffffff
c0024e17:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0024e1a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0024e1d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0024e20:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024e23:	e8 dd fe ff ff       	call   c0024d05 <__cmpdf2>
c0024e28:	83 c4 18             	add    esp,0x18
c0024e2b:	c9                   	leave  
c0024e2c:	c3                   	ret    

c0024e2d <__gedf2>:
c0024e2d:	eb e2                	jmp    c0024e11 <__gtdf2>

c0024e2f <__ltdf2>:
c0024e2f:	eb c2                	jmp    c0024df3 <__eqdf2>

c0024e31 <__ledf2>:
c0024e31:	eb c0                	jmp    c0024df3 <__eqdf2>

c0024e33 <__truncdfsf2>:
c0024e33:	55                   	push   ebp
c0024e34:	89 e5                	mov    ebp,esp
c0024e36:	57                   	push   edi
c0024e37:	56                   	push   esi
c0024e38:	53                   	push   ebx
c0024e39:	83 ec 0c             	sub    esp,0xc
c0024e3c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024e3f:	89 d1                	mov    ecx,edx
c0024e41:	c1 f9 14             	sar    ecx,0x14
c0024e44:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0024e47:	89 df                	mov    edi,ebx
c0024e49:	c1 e7 0b             	shl    edi,0xb
c0024e4c:	89 d0                	mov    eax,edx
c0024e4e:	c1 e0 0b             	shl    eax,0xb
c0024e51:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0024e56:	c1 eb 15             	shr    ebx,0x15
c0024e59:	09 d8                	or     eax,ebx
c0024e5b:	89 cb                	mov    ebx,ecx
c0024e5d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0024e63:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0024e69:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0024e6f:	0f 86 9e 00 00 00    	jbe    c0024f13 <__truncdfsf2+0xe0>
c0024e75:	85 db                	test   ebx,ebx
c0024e77:	75 0a                	jne    c0024e83 <__truncdfsf2+0x50>
c0024e79:	c1 fa 17             	sar    edx,0x17
c0024e7c:	30 d2                	xor    dl,dl
c0024e7e:	e9 84 00 00 00       	jmp    c0024f07 <__truncdfsf2+0xd4>
c0024e83:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0024e89:	83 fe 83             	cmp    esi,0xffffff83
c0024e8c:	7d 4b                	jge    c0024ed9 <__truncdfsf2+0xa6>
c0024e8e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0024e93:	29 f1                	sub    ecx,esi
c0024e95:	83 f9 1f             	cmp    ecx,0x1f
c0024e98:	7f 6b                	jg     c0024f05 <__truncdfsf2+0xd2>
c0024e9a:	0d 00 00 00 80       	or     eax,0x80000000
c0024e9f:	89 c3                	mov    ebx,eax
c0024ea1:	d3 eb                	shr    ebx,cl
c0024ea3:	be 01 00 00 00       	mov    esi,0x1
c0024ea8:	d3 e6                	shl    esi,cl
c0024eaa:	4e                   	dec    esi
c0024eab:	21 f0                	and    eax,esi
c0024ead:	09 f8                	or     eax,edi
c0024eaf:	0f 95 c0             	setne  al
c0024eb2:	0f b6 c0             	movzx  eax,al
c0024eb5:	09 c3                	or     ebx,eax
c0024eb7:	89 d9                	mov    ecx,ebx
c0024eb9:	c1 e9 08             	shr    ecx,0x8
c0024ebc:	f6 c3 7f             	test   bl,0x7f
c0024ebf:	0f 95 c0             	setne  al
c0024ec2:	09 c8                	or     eax,ecx
c0024ec4:	83 e0 01             	and    eax,0x1
c0024ec7:	c1 eb 07             	shr    ebx,0x7
c0024eca:	21 c3                	and    ebx,eax
c0024ecc:	81 e2 00 00 00 80    	and    edx,0x80000000
c0024ed2:	09 d1                	or     ecx,edx
c0024ed4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0024ed7:	eb 76                	jmp    c0024f4f <__truncdfsf2+0x11c>
c0024ed9:	83 c6 80             	add    esi,0xffffff80
c0024edc:	7e 1d                	jle    c0024efb <__truncdfsf2+0xc8>
c0024ede:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0024ee4:	75 0b                	jne    c0024ef1 <__truncdfsf2+0xbe>
c0024ee6:	09 f8                	or     eax,edi
c0024ee8:	74 09                	je     c0024ef3 <__truncdfsf2+0xc0>
c0024eea:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0024eef:	eb 02                	jmp    c0024ef3 <__truncdfsf2+0xc0>
c0024ef1:	31 c0                	xor    eax,eax
c0024ef3:	c1 fa 17             	sar    edx,0x17
c0024ef6:	80 ca ff             	or     dl,0xff
c0024ef9:	eb 0e                	jmp    c0024f09 <__truncdfsf2+0xd6>
c0024efb:	c1 fa 1f             	sar    edx,0x1f
c0024efe:	c1 e2 08             	shl    edx,0x8
c0024f01:	09 ca                	or     edx,ecx
c0024f03:	eb 04                	jmp    c0024f09 <__truncdfsf2+0xd6>
c0024f05:	31 d2                	xor    edx,edx
c0024f07:	31 c0                	xor    eax,eax
c0024f09:	c1 e2 17             	shl    edx,0x17
c0024f0c:	c1 e8 08             	shr    eax,0x8
c0024f0f:	09 d0                	or     eax,edx
c0024f11:	eb 3c                	jmp    c0024f4f <__truncdfsf2+0x11c>
c0024f13:	81 e9 80 03 00 00    	sub    ecx,0x380
c0024f19:	89 ca                	mov    edx,ecx
c0024f1b:	c1 fa 0b             	sar    edx,0xb
c0024f1e:	c1 e2 08             	shl    edx,0x8
c0024f21:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0024f24:	31 db                	xor    ebx,ebx
c0024f26:	85 ff                	test   edi,edi
c0024f28:	0f 95 c3             	setne  bl
c0024f2b:	09 d8                	or     eax,ebx
c0024f2d:	89 c3                	mov    ebx,eax
c0024f2f:	c1 eb 08             	shr    ebx,0x8
c0024f32:	a8 7f                	test   al,0x7f
c0024f34:	0f 95 c2             	setne  dl
c0024f37:	89 d6                	mov    esi,edx
c0024f39:	09 de                	or     esi,ebx
c0024f3b:	83 e6 01             	and    esi,0x1
c0024f3e:	c1 e8 07             	shr    eax,0x7
c0024f41:	21 f0                	and    eax,esi
c0024f43:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024f46:	09 ca                	or     edx,ecx
c0024f48:	c1 e2 17             	shl    edx,0x17
c0024f4b:	09 da                	or     edx,ebx
c0024f4d:	01 d0                	add    eax,edx
c0024f4f:	83 c4 0c             	add    esp,0xc
c0024f52:	5b                   	pop    ebx
c0024f53:	5e                   	pop    esi
c0024f54:	5f                   	pop    edi
c0024f55:	5d                   	pop    ebp
c0024f56:	c3                   	ret    

c0024f57 <__extendsfdf2>:
c0024f57:	55                   	push   ebp
c0024f58:	89 e5                	mov    ebp,esp
c0024f5a:	57                   	push   edi
c0024f5b:	56                   	push   esi
c0024f5c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0024f5f:	89 d1                	mov    ecx,edx
c0024f61:	c1 f9 17             	sar    ecx,0x17
c0024f64:	c1 e2 08             	shl    edx,0x8
c0024f67:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0024f6d:	89 c8                	mov    eax,ecx
c0024f6f:	80 e4 f8             	and    ah,0xf8
c0024f72:	8d 71 01             	lea    esi,[ecx+0x1]
c0024f75:	81 e6 fe 00 00 00    	and    esi,0xfe
c0024f7b:	75 27                	jne    c0024fa4 <__extendsfdf2+0x4d>
c0024f7d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0024f83:	75 18                	jne    c0024f9d <__extendsfdf2+0x46>
c0024f85:	85 d2                	test   edx,edx
c0024f87:	74 20                	je     c0024fa9 <__extendsfdf2+0x52>
c0024f89:	41                   	inc    ecx
c0024f8a:	01 d2                	add    edx,edx
c0024f8c:	79 fb                	jns    c0024f89 <__extendsfdf2+0x32>
c0024f8e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0024f94:	29 c8                	sub    eax,ecx
c0024f96:	05 81 03 00 00       	add    eax,0x381
c0024f9b:	eb 0c                	jmp    c0024fa9 <__extendsfdf2+0x52>
c0024f9d:	05 00 07 00 00       	add    eax,0x700
c0024fa2:	eb 05                	jmp    c0024fa9 <__extendsfdf2+0x52>
c0024fa4:	05 80 03 00 00       	add    eax,0x380
c0024fa9:	c1 e0 14             	shl    eax,0x14
c0024fac:	89 c1                	mov    ecx,eax
c0024fae:	89 d0                	mov    eax,edx
c0024fb0:	c1 e8 0b             	shr    eax,0xb
c0024fb3:	09 c1                	or     ecx,eax
c0024fb5:	c1 e2 15             	shl    edx,0x15
c0024fb8:	89 d0                	mov    eax,edx
c0024fba:	89 ca                	mov    edx,ecx
c0024fbc:	5e                   	pop    esi
c0024fbd:	5f                   	pop    edi
c0024fbe:	5d                   	pop    ebp
c0024fbf:	c3                   	ret    

c0024fc0 <fabs>:
c0024fc0:	83 ec 0c             	sub    esp,0xc
c0024fc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fc7:	89 04 24             	mov    DWORD PTR [esp],eax
c0024fca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024fce:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0024fd3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024fd7:	dd 04 24             	fld    QWORD PTR [esp]
c0024fda:	83 c4 0c             	add    esp,0xc
c0024fdd:	c3                   	ret    
c0024fde:	66 90                	xchg   ax,ax

c0024fe0 <lrint>:
c0024fe0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0024fe4:	83 ec 04             	sub    esp,0x4
c0024fe7:	db 1c 24             	fistp  DWORD PTR [esp]
c0024fea:	58                   	pop    eax
c0024feb:	c3                   	ret    

c0024fec <lrintf>:
c0024fec:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0024ff0:	83 ec 04             	sub    esp,0x4
c0024ff3:	db 1c 24             	fistp  DWORD PTR [esp]
c0024ff6:	58                   	pop    eax
c0024ff7:	c3                   	ret    

Disassembly of section .init:

c0024ff8 <_init>:
c0024ff8:	55                   	push   ebp
c0024ff9:	89 e5                	mov    ebp,esp
c0024ffb:	e8 18 b1 fd ff       	call   c0000118 <frame_dummy>
c0025000:	e8 63 e0 ff ff       	call   c0023068 <__do_global_ctors_aux>
c0025005:	5d                   	pop    ebp
c0025006:	c3                   	ret    

Disassembly of section .fini:

c0025007 <_fini>:
c0025007:	55                   	push   ebp
c0025008:	89 e5                	mov    ebp,esp
c002500a:	e8 99 b0 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002500f:	5d                   	pop    ebp
c0025010:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0025012 <Computer::~Computer()>:
c0025012:	83 ec 0c             	sub    esp,0xc
c0025015:	ba f0 6a 02 c0       	mov    edx,0xc0026af0
c002501a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002501e:	89 10                	mov    DWORD PTR [eax],edx
c0025020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025024:	83 ec 0c             	sub    esp,0xc
c0025027:	50                   	push   eax
c0025028:	e8 cf e4 fe ff       	call   c00134fc <Device::~Device()>
c002502d:	83 c4 10             	add    esp,0x10
c0025030:	90                   	nop
c0025031:	83 c4 0c             	add    esp,0xc
c0025034:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0025036 <Computer::~Computer()>:
c0025036:	83 ec 0c             	sub    esp,0xc
c0025039:	83 ec 0c             	sub    esp,0xc
c002503c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025040:	e8 cd ff ff ff       	call   c0025012 <Computer::~Computer()>
c0025045:	83 c4 10             	add    esp,0x10
c0025048:	83 ec 08             	sub    esp,0x8
c002504b:	68 ec 01 00 00       	push   0x1ec
c0025050:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025054:	e8 16 d1 fe ff       	call   c001216f <operator delete(void*, unsigned long)>
c0025059:	83 c4 10             	add    esp,0x10
c002505c:	83 c4 0c             	add    esp,0xc
c002505f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0025060 <idleCommon()>:
c0025060:	83 ec 0c             	sub    esp,0xc
c0025063:	e8 d8 68 ff ff       	call   c001b940 <lockScheduler()>
c0025068:	e8 07 6c ff ff       	call   c001bc74 <schedule()>
c002506d:	83 c4 0c             	add    esp,0xc
c0025070:	e9 cd 68 ff ff       	jmp    c001b942 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c0025075 <CPU::readCR3()>:
c0025075:	83 ec 10             	sub    esp,0x10
c0025078:	0f 20 d8             	mov    eax,cr3
c002507b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002507f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025083:	83 c4 10             	add    esp,0x10
c0025086:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c0025087 <CPU::writeCR3(unsigned long)>:
c0025087:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002508b:	0f 22 d8             	mov    cr3,eax
c002508e:	90                   	nop
c002508f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0025090 <LinkedList<UnixFile>::~LinkedList()>:
c0025090:	90                   	nop
c0025091:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0025092 <LinkedList<UnixFile>::LinkedList()>:
c0025092:	83 ec 0c             	sub    esp,0xc
c0025095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025099:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002509f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250a3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00250aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250ae:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00250b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00250bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250c3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00250ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250ce:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00250d5:	83 ec 0c             	sub    esp,0xc
c00250d8:	68 66 6d 02 c0       	push   0xc0026d66
c00250dd:	e8 6d d1 fe ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00250e2:	83 c4 10             	add    esp,0x10
c00250e5:	90                   	nop
c00250e6:	83 c4 0c             	add    esp,0xc
c00250e9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00250ea <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00250ea:	83 ec 0c             	sub    esp,0xc
c00250ed:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00250f2:	75 10                	jne    c0025104 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00250f4:	83 ec 0c             	sub    esp,0xc
c00250f7:	68 80 6d 02 c0       	push   0xc0026d80
c00250fc:	e8 ec 38 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c0025101:	83 c4 10             	add    esp,0x10
c0025104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025108:	8b 00                	mov    eax,DWORD PTR [eax]
c002510a:	85 c0                	test   eax,eax
c002510c:	74 34                	je     c0025142 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002510e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025112:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025115:	85 c0                	test   eax,eax
c0025117:	74 29                	je     c0025142 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0025119:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002511d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025120:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025124:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002512b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002512f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0025132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025136:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025139:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0025140:	eb 65                	jmp    c00251a7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025146:	8b 00                	mov    eax,DWORD PTR [eax]
c0025148:	85 c0                	test   eax,eax
c002514a:	75 4b                	jne    c0025197 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002514c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025150:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025153:	85 c0                	test   eax,eax
c0025155:	75 40                	jne    c0025197 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0025157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002515b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002515f:	89 10                	mov    DWORD PTR [eax],edx
c0025161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025165:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025169:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002516c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025170:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025173:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002517a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002517e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025181:	85 c0                	test   eax,eax
c0025183:	74 22                	je     c00251a7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025185:	83 ec 0c             	sub    esp,0xc
c0025188:	68 a2 6d 02 c0       	push   0xc0026da2
c002518d:	e8 5b 38 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c0025192:	83 c4 10             	add    esp,0x10
c0025195:	eb 10                	jmp    c00251a7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0025197:	83 ec 0c             	sub    esp,0xc
c002519a:	68 ac 6d 02 c0       	push   0xc0026dac
c002519f:	e8 49 38 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c00251a4:	83 c4 10             	add    esp,0x10
c00251a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00251ae:	8d 50 01             	lea    edx,[eax+0x1]
c00251b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251b5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00251b8:	90                   	nop
c00251b9:	83 c4 0c             	add    esp,0xc
c00251bc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00251be <LinkedList<UnixFile>::getFirstElement()>:
c00251be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00251c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00251c4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00251c6 <LinkedList<UnixFile>::removeFirst()>:
c00251c6:	83 ec 0c             	sub    esp,0xc
c00251c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00251cf:	85 c0                	test   eax,eax
c00251d1:	75 12                	jne    c00251e5 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00251d3:	83 ec 0c             	sub    esp,0xc
c00251d6:	68 b8 6d 02 c0       	push   0xc0026db8
c00251db:	e8 0d 38 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c00251e0:	83 c4 10             	add    esp,0x10
c00251e3:	eb 7e                	jmp    c0025263 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00251e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00251e9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00251ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00251ef:	85 c0                	test   eax,eax
c00251f1:	74 10                	je     c0025203 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00251f3:	83 ec 0c             	sub    esp,0xc
c00251f6:	68 03 6e 02 c0       	push   0xc0026e03
c00251fb:	e8 ed 37 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c0025200:	83 c4 10             	add    esp,0x10
c0025203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025207:	8b 00                	mov    eax,DWORD PTR [eax]
c0025209:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002520c:	85 c0                	test   eax,eax
c002520e:	75 33                	jne    c0025243 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0025210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025214:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002521a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002521e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025229:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002522c:	83 f8 01             	cmp    eax,0x1
c002522f:	74 21                	je     c0025252 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025231:	83 ec 0c             	sub    esp,0xc
c0025234:	68 dc 6d 02 c0       	push   0xc0026ddc
c0025239:	e8 af 37 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c002523e:	83 c4 10             	add    esp,0x10
c0025241:	eb 0f                	jmp    c0025252 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0025243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025247:	8b 00                	mov    eax,DWORD PTR [eax]
c0025249:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002524c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025250:	89 10                	mov    DWORD PTR [eax],edx
c0025252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025256:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025259:	8d 50 ff             	lea    edx,[eax-0x1]
c002525c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025260:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025263:	83 c4 0c             	add    esp,0xc
c0025266:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0025268 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0025268:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002526c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002526f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0025270 <DriverlessDevice::~DriverlessDevice()>:
c0025270:	ba 84 74 02 c0       	mov    edx,0xc0027484
c0025275:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025279:	89 10                	mov    DWORD PTR [eax],edx
c002527b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002527f:	50                   	push   eax
c0025280:	e8 77 e2 fe ff       	call   c00134fc <Device::~Device()>
c0025285:	83 c4 04             	add    esp,0x4
c0025288:	90                   	nop
c0025289:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002528a <DriverlessDevice::~DriverlessDevice()>:
c002528a:	83 ec 0c             	sub    esp,0xc
c002528d:	83 ec 0c             	sub    esp,0xc
c0025290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025294:	e8 d7 ff ff ff       	call   c0025270 <DriverlessDevice::~DriverlessDevice()>
c0025299:	83 c4 10             	add    esp,0x10
c002529c:	83 ec 08             	sub    esp,0x8
c002529f:	68 58 01 00 00       	push   0x158
c00252a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00252a8:	e8 c2 ce fe ff       	call   c001216f <operator delete(void*, unsigned long)>
c00252ad:	83 c4 10             	add    esp,0x10
c00252b0:	83 c4 0c             	add    esp,0xc
c00252b3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00252b4 <LinkedList<Device>::addElement(Device*)>:
c00252b4:	83 ec 0c             	sub    esp,0xc
c00252b7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00252bc:	75 10                	jne    c00252ce <LinkedList<Device>::addElement(Device*)+0x1a>
c00252be:	83 ec 0c             	sub    esp,0xc
c00252c1:	68 80 6d 02 c0       	push   0xc0026d80
c00252c6:	e8 22 37 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c00252cb:	83 c4 10             	add    esp,0x10
c00252ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00252d4:	85 c0                	test   eax,eax
c00252d6:	74 3a                	je     c0025312 <LinkedList<Device>::addElement(Device*)+0x5e>
c00252d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00252df:	85 c0                	test   eax,eax
c00252e1:	74 2f                	je     c0025312 <LinkedList<Device>::addElement(Device*)+0x5e>
c00252e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252e7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00252ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00252ee:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00252f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00252fc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00252ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025303:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025306:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0025310:	eb 68                	jmp    c002537a <LinkedList<Device>::addElement(Device*)+0xc6>
c0025312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025316:	8b 00                	mov    eax,DWORD PTR [eax]
c0025318:	85 c0                	test   eax,eax
c002531a:	75 4e                	jne    c002536a <LinkedList<Device>::addElement(Device*)+0xb6>
c002531c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025320:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025323:	85 c0                	test   eax,eax
c0025325:	75 43                	jne    c002536a <LinkedList<Device>::addElement(Device*)+0xb6>
c0025327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002532b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002532f:	89 10                	mov    DWORD PTR [eax],edx
c0025331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025335:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025339:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002533c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025340:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025343:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002534d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025351:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025354:	85 c0                	test   eax,eax
c0025356:	74 22                	je     c002537a <LinkedList<Device>::addElement(Device*)+0xc6>
c0025358:	83 ec 0c             	sub    esp,0xc
c002535b:	68 a2 6d 02 c0       	push   0xc0026da2
c0025360:	e8 88 36 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c0025365:	83 c4 10             	add    esp,0x10
c0025368:	eb 10                	jmp    c002537a <LinkedList<Device>::addElement(Device*)+0xc6>
c002536a:	83 ec 0c             	sub    esp,0xc
c002536d:	68 ac 6d 02 c0       	push   0xc0026dac
c0025372:	e8 76 36 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c0025377:	83 c4 10             	add    esp,0x10
c002537a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002537e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025381:	8d 50 01             	lea    edx,[eax+0x1]
c0025384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025388:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002538b:	90                   	nop
c002538c:	83 c4 0c             	add    esp,0xc
c002538f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0025390 <LinkedList<Device>::LinkedList()>:
c0025390:	83 ec 0c             	sub    esp,0xc
c0025393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025397:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002539d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00253a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253ac:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00253b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253b7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00253bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00253c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253cc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00253d3:	83 ec 0c             	sub    esp,0xc
c00253d6:	68 66 6d 02 c0       	push   0xc0026d66
c00253db:	e8 6f ce fe ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c00253e0:	83 c4 10             	add    esp,0x10
c00253e3:	90                   	nop
c00253e4:	83 c4 0c             	add    esp,0xc
c00253e7:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c00253e8 <CPU::readCR0()>:
c00253e8:	83 ec 10             	sub    esp,0x10
c00253eb:	0f 20 c0             	mov    eax,cr0
c00253ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00253f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00253f6:	83 c4 10             	add    esp,0x10
c00253f9:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c00253fa <CPU::writeCR0(unsigned long)>:
c00253fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00253fe:	0f 22 c0             	mov    cr0,eax
c0025401:	90                   	nop
c0025402:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c0025403 <CPU::readDR0()>:
c0025403:	83 ec 10             	sub    esp,0x10
c0025406:	0f 21 c0             	mov    eax,db0
c0025409:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002540d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025411:	83 c4 10             	add    esp,0x10
c0025414:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c0025415 <CPU::readDR1()>:
c0025415:	83 ec 10             	sub    esp,0x10
c0025418:	0f 21 c8             	mov    eax,db1
c002541b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002541f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025423:	83 c4 10             	add    esp,0x10
c0025426:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c0025427 <CPU::readDR2()>:
c0025427:	83 ec 10             	sub    esp,0x10
c002542a:	0f 21 d0             	mov    eax,db2
c002542d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025431:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025435:	83 c4 10             	add    esp,0x10
c0025438:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c0025439 <CPU::readDR3()>:
c0025439:	83 ec 10             	sub    esp,0x10
c002543c:	0f 21 d8             	mov    eax,db3
c002543f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025443:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025447:	83 c4 10             	add    esp,0x10
c002544a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c002544b <CPU::readDR6()>:
c002544b:	83 ec 10             	sub    esp,0x10
c002544e:	0f 21 f0             	mov    eax,db6
c0025451:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025455:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025459:	83 c4 10             	add    esp,0x10
c002545c:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c002545d <CPU::readDR7()>:
c002545d:	83 ec 10             	sub    esp,0x10
c0025460:	0f 21 f8             	mov    eax,db7
c0025463:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025467:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002546b:	83 c4 10             	add    esp,0x10
c002546e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0025470 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0025470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025474:	8b 00                	mov    eax,DWORD PTR [eax]
c0025476:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0025478 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0025478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002547c:	8b 00                	mov    eax,DWORD PTR [eax]
c002547e:	85 c0                	test   eax,eax
c0025480:	75 0e                	jne    c0025490 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0025482:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025486:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025489:	85 c0                	test   eax,eax
c002548b:	75 03                	jne    c0025490 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002548d:	b0 01                	mov    al,0x1
c002548f:	c3                   	ret    
c0025490:	b0 00                	mov    al,0x0
c0025492:	90                   	nop
c0025493:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0025494 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0025494:	83 ec 0c             	sub    esp,0xc
c0025497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002549b:	8b 00                	mov    eax,DWORD PTR [eax]
c002549d:	85 c0                	test   eax,eax
c002549f:	75 15                	jne    c00254b6 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00254a1:	83 ec 0c             	sub    esp,0xc
c00254a4:	68 b8 6d 02 c0       	push   0xc0026db8
c00254a9:	e8 3f 35 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c00254ae:	83 c4 10             	add    esp,0x10
c00254b1:	e9 88 00 00 00       	jmp    c002553e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00254b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00254bd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00254c0:	85 c0                	test   eax,eax
c00254c2:	0f 95 c0             	setne  al
c00254c5:	84 c0                	test   al,al
c00254c7:	74 10                	je     c00254d9 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00254c9:	83 ec 0c             	sub    esp,0xc
c00254cc:	68 03 6e 02 c0       	push   0xc0026e03
c00254d1:	e8 17 35 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c00254d6:	83 c4 10             	add    esp,0x10
c00254d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254dd:	8b 00                	mov    eax,DWORD PTR [eax]
c00254df:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00254e2:	85 c0                	test   eax,eax
c00254e4:	0f 94 c0             	sete   al
c00254e7:	84 c0                	test   al,al
c00254e9:	74 33                	je     c002551e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00254eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254ef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00254f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00254f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025504:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025507:	83 f8 01             	cmp    eax,0x1
c002550a:	74 21                	je     c002552d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002550c:	83 ec 0c             	sub    esp,0xc
c002550f:	68 dc 6d 02 c0       	push   0xc0026ddc
c0025514:	e8 d4 34 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c0025519:	83 c4 10             	add    esp,0x10
c002551c:	eb 0f                	jmp    c002552d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002551e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025522:	8b 00                	mov    eax,DWORD PTR [eax]
c0025524:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002552b:	89 10                	mov    DWORD PTR [eax],edx
c002552d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025531:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025534:	8d 50 ff             	lea    edx,[eax-0x1]
c0025537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002553b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002553e:	83 c4 0c             	add    esp,0xc
c0025541:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0025542 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0025542:	83 ec 0c             	sub    esp,0xc
c0025545:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002554a:	75 10                	jne    c002555c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002554c:	83 ec 0c             	sub    esp,0xc
c002554f:	68 80 6d 02 c0       	push   0xc0026d80
c0025554:	e8 94 34 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c0025559:	83 c4 10             	add    esp,0x10
c002555c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025560:	8b 00                	mov    eax,DWORD PTR [eax]
c0025562:	85 c0                	test   eax,eax
c0025564:	74 34                	je     c002559a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0025566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002556a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002556d:	85 c0                	test   eax,eax
c002556f:	74 29                	je     c002559a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0025571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025575:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025578:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002557c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002557f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025583:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025587:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002558a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002558e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0025591:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0025598:	eb 65                	jmp    c00255ff <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c002559a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002559e:	8b 00                	mov    eax,DWORD PTR [eax]
c00255a0:	85 c0                	test   eax,eax
c00255a2:	75 4b                	jne    c00255ef <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00255a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00255ab:	85 c0                	test   eax,eax
c00255ad:	75 40                	jne    c00255ef <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00255af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00255b7:	89 10                	mov    DWORD PTR [eax],edx
c00255b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00255c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00255c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00255cb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00255d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255d6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00255d9:	85 c0                	test   eax,eax
c00255db:	74 22                	je     c00255ff <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00255dd:	83 ec 0c             	sub    esp,0xc
c00255e0:	68 a2 6d 02 c0       	push   0xc0026da2
c00255e5:	e8 03 34 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c00255ea:	83 c4 10             	add    esp,0x10
c00255ed:	eb 10                	jmp    c00255ff <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00255ef:	83 ec 0c             	sub    esp,0xc
c00255f2:	68 ac 6d 02 c0       	push   0xc0026dac
c00255f7:	e8 f1 33 ff ff       	call   c00189ed <Krnl::panic(char const*)>
c00255fc:	83 c4 10             	add    esp,0x10
c00255ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025603:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0025606:	8d 50 01             	lea    edx,[eax+0x1]
c0025609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002560d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0025610:	90                   	nop
c0025611:	83 c4 0c             	add    esp,0xc
c0025614:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0025616 <ACPI::~ACPI()>:
c0025616:	83 ec 0c             	sub    esp,0xc
c0025619:	ba 14 7c 02 c0       	mov    edx,0xc0027c14
c002561e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025622:	89 10                	mov    DWORD PTR [eax],edx
c0025624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025628:	83 ec 0c             	sub    esp,0xc
c002562b:	50                   	push   eax
c002562c:	e8 cb de fe ff       	call   c00134fc <Device::~Device()>
c0025631:	83 c4 10             	add    esp,0x10
c0025634:	90                   	nop
c0025635:	83 c4 0c             	add    esp,0xc
c0025638:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002563a <ACPI::~ACPI()>:
c002563a:	83 ec 0c             	sub    esp,0xc
c002563d:	83 ec 0c             	sub    esp,0xc
c0025640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025644:	e8 cd ff ff ff       	call   c0025616 <ACPI::~ACPI()>
c0025649:	83 c4 10             	add    esp,0x10
c002564c:	83 ec 08             	sub    esp,0x8
c002564f:	68 68 22 00 00       	push   0x2268
c0025654:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025658:	e8 12 cb fe ff       	call   c001216f <operator delete(void*, unsigned long)>
c002565d:	83 c4 10             	add    esp,0x10
c0025660:	83 c4 0c             	add    esp,0xc
c0025663:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0025664 <CPU::~CPU()>:
c0025664:	83 ec 0c             	sub    esp,0xc
c0025667:	ba 04 80 02 c0       	mov    edx,0xc0028004
c002566c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025670:	89 10                	mov    DWORD PTR [eax],edx
c0025672:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025676:	83 ec 0c             	sub    esp,0xc
c0025679:	50                   	push   eax
c002567a:	e8 7d de fe ff       	call   c00134fc <Device::~Device()>
c002567f:	83 c4 10             	add    esp,0x10
c0025682:	90                   	nop
c0025683:	83 c4 0c             	add    esp,0xc
c0025686:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0025688 <CPU::~CPU()>:
c0025688:	83 ec 0c             	sub    esp,0xc
c002568b:	83 ec 0c             	sub    esp,0xc
c002568e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025692:	e8 cd ff ff ff       	call   c0025664 <CPU::~CPU()>
c0025697:	83 c4 10             	add    esp,0x10
c002569a:	83 ec 08             	sub    esp,0x8
c002569d:	68 98 11 00 00       	push   0x1198
c00256a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00256a6:	e8 c4 ca fe ff       	call   c001216f <operator delete(void*, unsigned long)>
c00256ab:	83 c4 10             	add    esp,0x10
c00256ae:	83 c4 0c             	add    esp,0xc
c00256b1:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c00256b2 <CPU::readCR4()>:
c00256b2:	83 ec 10             	sub    esp,0x10
c00256b5:	0f 20 e0             	mov    eax,cr4
c00256b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00256bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00256c0:	83 c4 10             	add    esp,0x10
c00256c3:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c00256c4 <CPU::writeDR7(unsigned long)>:
c00256c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256c8:	0f 23 f8             	mov    db7,eax
c00256cb:	90                   	nop
c00256cc:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c00256cd <CPU::writeCR4(unsigned long)>:
c00256cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256d1:	0f 22 e0             	mov    cr4,eax
c00256d4:	90                   	nop
c00256d5:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c00256d6 <CPU::readCR2()>:
c00256d6:	83 ec 10             	sub    esp,0x10
c00256d9:	0f 20 d0             	mov    eax,cr2
c00256dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00256e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00256e4:	83 c4 10             	add    esp,0x10
c00256e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00256e8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00256e8:	90                   	nop
c00256e9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00256ea <ThreadControlBlock::ThreadControlBlock()>:
c00256ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256ee:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00256f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00256f9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0025700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025704:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002570b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002570f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0025716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002571a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c002571e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025722:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0025726:	90                   	nop
c0025727:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0025728 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0025728:	83 ec 0c             	sub    esp,0xc
c002572b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002572f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025739:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025744:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002574b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002574f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0025755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025759:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0025760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025764:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002576b:	83 ec 0c             	sub    esp,0xc
c002576e:	68 66 6d 02 c0       	push   0xc0026d66
c0025773:	e8 d7 ca fe ff       	call   c001224f <Dbg::kprintf(char const*, ...)>
c0025778:	83 c4 10             	add    esp,0x10
c002577b:	90                   	nop
c002577c:	83 c4 0c             	add    esp,0xc
c002577f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0025780 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0025780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025784:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0025787:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0025788 <Vm::_FPUState::_FPUState()>:
c0025788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002578c:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0025793:	90                   	nop
c0025794:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0025796 <PCI::~PCI()>:
c0025796:	83 ec 0c             	sub    esp,0xc
c0025799:	ba 0c 8d 02 c0       	mov    edx,0xc0028d0c
c002579e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257a2:	89 10                	mov    DWORD PTR [eax],edx
c00257a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257a8:	83 ec 0c             	sub    esp,0xc
c00257ab:	50                   	push   eax
c00257ac:	e8 5b d7 fe ff       	call   c0012f0c <Bus::~Bus()>
c00257b1:	83 c4 10             	add    esp,0x10
c00257b4:	90                   	nop
c00257b5:	83 c4 0c             	add    esp,0xc
c00257b8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00257ba <PCI::~PCI()>:
c00257ba:	83 ec 0c             	sub    esp,0xc
c00257bd:	83 ec 0c             	sub    esp,0xc
c00257c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00257c4:	e8 cd ff ff ff       	call   c0025796 <PCI::~PCI()>
c00257c9:	83 c4 10             	add    esp,0x10
c00257cc:	83 ec 08             	sub    esp,0x8
c00257cf:	68 58 01 00 00       	push   0x158
c00257d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00257d8:	e8 92 c9 fe ff       	call   c001216f <operator delete(void*, unsigned long)>
c00257dd:	83 c4 10             	add    esp,0x10
c00257e0:	83 c4 0c             	add    esp,0xc
c00257e3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00257e4 <IDE::~IDE()>:
c00257e4:	83 ec 0c             	sub    esp,0xc
c00257e7:	ba 70 8f 02 c0       	mov    edx,0xc0028f70
c00257ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f0:	89 10                	mov    DWORD PTR [eax],edx
c00257f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f6:	83 ec 0c             	sub    esp,0xc
c00257f9:	50                   	push   eax
c00257fa:	e8 13 e2 fe ff       	call   c0013a12 <HardDiskController::~HardDiskController()>
c00257ff:	83 c4 10             	add    esp,0x10
c0025802:	90                   	nop
c0025803:	83 c4 0c             	add    esp,0xc
c0025806:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0025808 <IDE::~IDE()>:
c0025808:	83 ec 0c             	sub    esp,0xc
c002580b:	83 ec 0c             	sub    esp,0xc
c002580e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025812:	e8 cd ff ff ff       	call   c00257e4 <IDE::~IDE()>
c0025817:	83 c4 10             	add    esp,0x10
c002581a:	83 ec 08             	sub    esp,0x8
c002581d:	68 70 02 00 00       	push   0x270
c0025822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025826:	e8 44 c9 fe ff       	call   c001216f <operator delete(void*, unsigned long)>
c002582b:	83 c4 10             	add    esp,0x10
c002582e:	83 c4 0c             	add    esp,0xc
c0025831:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0025832 <ATA::~ATA()>:
c0025832:	83 ec 0c             	sub    esp,0xc
c0025835:	ba c0 8f 02 c0       	mov    edx,0xc0028fc0
c002583a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002583e:	89 10                	mov    DWORD PTR [eax],edx
c0025840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025844:	83 ec 0c             	sub    esp,0xc
c0025847:	50                   	push   eax
c0025848:	e8 a3 e2 fe ff       	call   c0013af0 <PhysicalDisk::~PhysicalDisk()>
c002584d:	83 c4 10             	add    esp,0x10
c0025850:	90                   	nop
c0025851:	83 c4 0c             	add    esp,0xc
c0025854:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0025856 <ATA::~ATA()>:
c0025856:	83 ec 0c             	sub    esp,0xc
c0025859:	83 ec 0c             	sub    esp,0xc
c002585c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025860:	e8 cd ff ff ff       	call   c0025832 <ATA::~ATA()>
c0025865:	83 c4 10             	add    esp,0x10
c0025868:	83 ec 08             	sub    esp,0x8
c002586b:	68 7c 01 00 00       	push   0x17c
c0025870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025874:	e8 f6 c8 fe ff       	call   c001216f <operator delete(void*, unsigned long)>
c0025879:	83 c4 10             	add    esp,0x10
c002587c:	83 c4 0c             	add    esp,0xc
c002587f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0025880 <ATAPI::~ATAPI()>:
c0025880:	83 ec 0c             	sub    esp,0xc
c0025883:	ba 2c 90 02 c0       	mov    edx,0xc002902c
c0025888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002588c:	89 10                	mov    DWORD PTR [eax],edx
c002588e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025892:	83 ec 0c             	sub    esp,0xc
c0025895:	50                   	push   eax
c0025896:	e8 55 e2 fe ff       	call   c0013af0 <PhysicalDisk::~PhysicalDisk()>
c002589b:	83 c4 10             	add    esp,0x10
c002589e:	90                   	nop
c002589f:	83 c4 0c             	add    esp,0xc
c00258a2:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00258a4 <ATAPI::~ATAPI()>:
c00258a4:	83 ec 0c             	sub    esp,0xc
c00258a7:	83 ec 0c             	sub    esp,0xc
c00258aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258ae:	e8 cd ff ff ff       	call   c0025880 <ATAPI::~ATAPI()>
c00258b3:	83 c4 10             	add    esp,0x10
c00258b6:	83 ec 08             	sub    esp,0x8
c00258b9:	68 80 01 00 00       	push   0x180
c00258be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258c2:	e8 a8 c8 fe ff       	call   c001216f <operator delete(void*, unsigned long)>
c00258c7:	83 c4 10             	add    esp,0x10
c00258ca:	83 c4 0c             	add    esp,0xc
c00258cd:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c00258ce <AVX::~AVX()>:
c00258ce:	83 ec 0c             	sub    esp,0xc
c00258d1:	ba 68 90 02 c0       	mov    edx,0xc0029068
c00258d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258da:	89 10                	mov    DWORD PTR [eax],edx
c00258dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258e0:	83 ec 0c             	sub    esp,0xc
c00258e3:	50                   	push   eax
c00258e4:	e8 8b e2 fe ff       	call   c0013b74 <FPU::~FPU()>
c00258e9:	83 c4 10             	add    esp,0x10
c00258ec:	90                   	nop
c00258ed:	83 c4 0c             	add    esp,0xc
c00258f0:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c00258f2 <AVX::~AVX()>:
c00258f2:	83 ec 0c             	sub    esp,0xc
c00258f5:	83 ec 0c             	sub    esp,0xc
c00258f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00258fc:	e8 cd ff ff ff       	call   c00258ce <AVX::~AVX()>
c0025901:	83 c4 10             	add    esp,0x10
c0025904:	83 ec 08             	sub    esp,0x8
c0025907:	68 58 01 00 00       	push   0x158
c002590c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025910:	e8 5a c8 fe ff       	call   c001216f <operator delete(void*, unsigned long)>
c0025915:	83 c4 10             	add    esp,0x10
c0025918:	83 c4 0c             	add    esp,0xc
c002591b:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002591c <MMX::~MMX()>:
c002591c:	83 ec 0c             	sub    esp,0xc
c002591f:	ba a8 90 02 c0       	mov    edx,0xc00290a8
c0025924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025928:	89 10                	mov    DWORD PTR [eax],edx
c002592a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002592e:	83 ec 0c             	sub    esp,0xc
c0025931:	50                   	push   eax
c0025932:	e8 3d e2 fe ff       	call   c0013b74 <FPU::~FPU()>
c0025937:	83 c4 10             	add    esp,0x10
c002593a:	90                   	nop
c002593b:	83 c4 0c             	add    esp,0xc
c002593e:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0025940 <MMX::~MMX()>:
c0025940:	83 ec 0c             	sub    esp,0xc
c0025943:	83 ec 0c             	sub    esp,0xc
c0025946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002594a:	e8 cd ff ff ff       	call   c002591c <MMX::~MMX()>
c002594f:	83 c4 10             	add    esp,0x10
c0025952:	83 ec 08             	sub    esp,0x8
c0025955:	68 58 01 00 00       	push   0x158
c002595a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002595e:	e8 0c c8 fe ff       	call   c001216f <operator delete(void*, unsigned long)>
c0025963:	83 c4 10             	add    esp,0x10
c0025966:	83 c4 0c             	add    esp,0xc
c0025969:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002596a <SSE::~SSE()>:
c002596a:	83 ec 0c             	sub    esp,0xc
c002596d:	ba e8 90 02 c0       	mov    edx,0xc00290e8
c0025972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025976:	89 10                	mov    DWORD PTR [eax],edx
c0025978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002597c:	83 ec 0c             	sub    esp,0xc
c002597f:	50                   	push   eax
c0025980:	e8 ef e1 fe ff       	call   c0013b74 <FPU::~FPU()>
c0025985:	83 c4 10             	add    esp,0x10
c0025988:	90                   	nop
c0025989:	83 c4 0c             	add    esp,0xc
c002598c:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002598e <SSE::~SSE()>:
c002598e:	83 ec 0c             	sub    esp,0xc
c0025991:	83 ec 0c             	sub    esp,0xc
c0025994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025998:	e8 cd ff ff ff       	call   c002596a <SSE::~SSE()>
c002599d:	83 c4 10             	add    esp,0x10
c00259a0:	83 ec 08             	sub    esp,0x8
c00259a3:	68 58 01 00 00       	push   0x158
c00259a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259ac:	e8 be c7 fe ff       	call   c001216f <operator delete(void*, unsigned long)>
c00259b1:	83 c4 10             	add    esp,0x10
c00259b4:	83 c4 0c             	add    esp,0xc
c00259b7:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00259b8 <x87::~x87()>:
c00259b8:	83 ec 0c             	sub    esp,0xc
c00259bb:	ba 28 91 02 c0       	mov    edx,0xc0029128
c00259c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259c4:	89 10                	mov    DWORD PTR [eax],edx
c00259c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259ca:	83 ec 0c             	sub    esp,0xc
c00259cd:	50                   	push   eax
c00259ce:	e8 a1 e1 fe ff       	call   c0013b74 <FPU::~FPU()>
c00259d3:	83 c4 10             	add    esp,0x10
c00259d6:	90                   	nop
c00259d7:	83 c4 0c             	add    esp,0xc
c00259da:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00259dc <x87::~x87()>:
c00259dc:	83 ec 0c             	sub    esp,0xc
c00259df:	83 ec 0c             	sub    esp,0xc
c00259e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259e6:	e8 cd ff ff ff       	call   c00259b8 <x87::~x87()>
c00259eb:	83 c4 10             	add    esp,0x10
c00259ee:	83 ec 08             	sub    esp,0x8
c00259f1:	68 58 01 00 00       	push   0x158
c00259f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00259fa:	e8 70 c7 fe ff       	call   c001216f <operator delete(void*, unsigned long)>
c00259ff:	83 c4 10             	add    esp,0x10
c0025a02:	83 c4 0c             	add    esp,0xc
c0025a05:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0025a06 <IOAPIC::~IOAPIC()>:
c0025a06:	83 ec 0c             	sub    esp,0xc
c0025a09:	ba 80 92 02 c0       	mov    edx,0xc0029280
c0025a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a12:	89 10                	mov    DWORD PTR [eax],edx
c0025a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a18:	83 ec 0c             	sub    esp,0xc
c0025a1b:	50                   	push   eax
c0025a1c:	e8 db da fe ff       	call   c00134fc <Device::~Device()>
c0025a21:	83 c4 10             	add    esp,0x10
c0025a24:	90                   	nop
c0025a25:	83 c4 0c             	add    esp,0xc
c0025a28:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0025a2a <IOAPIC::~IOAPIC()>:
c0025a2a:	83 ec 0c             	sub    esp,0xc
c0025a2d:	83 ec 0c             	sub    esp,0xc
c0025a30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a34:	e8 cd ff ff ff       	call   c0025a06 <IOAPIC::~IOAPIC()>
c0025a39:	83 c4 10             	add    esp,0x10
c0025a3c:	83 ec 08             	sub    esp,0x8
c0025a3f:	68 68 01 00 00       	push   0x168
c0025a44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a48:	e8 22 c7 fe ff       	call   c001216f <operator delete(void*, unsigned long)>
c0025a4d:	83 c4 10             	add    esp,0x10
c0025a50:	83 c4 0c             	add    esp,0xc
c0025a53:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0025a54 <APIC::~APIC()>:
c0025a54:	83 ec 0c             	sub    esp,0xc
c0025a57:	ba 38 92 02 c0       	mov    edx,0xc0029238
c0025a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a60:	89 10                	mov    DWORD PTR [eax],edx
c0025a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025a66:	83 ec 0c             	sub    esp,0xc
c0025a69:	50                   	push   eax
c0025a6a:	e8 d9 e5 fe ff       	call   c0014048 <InterruptController::~InterruptController()>
c0025a6f:	83 c4 10             	add    esp,0x10
c0025a72:	90                   	nop
c0025a73:	83 c4 0c             	add    esp,0xc
c0025a76:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0025a78 <APIC::~APIC()>:
c0025a78:	83 ec 0c             	sub    esp,0xc
c0025a7b:	83 ec 0c             	sub    esp,0xc
c0025a7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a82:	e8 cd ff ff ff       	call   c0025a54 <APIC::~APIC()>
c0025a87:	83 c4 10             	add    esp,0x10
c0025a8a:	83 ec 08             	sub    esp,0x8
c0025a8d:	68 58 21 00 00       	push   0x2158
c0025a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025a96:	e8 d4 c6 fe ff       	call   c001216f <operator delete(void*, unsigned long)>
c0025a9b:	83 c4 10             	add    esp,0x10
c0025a9e:	83 c4 0c             	add    esp,0xc
c0025aa1:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0025aa2 <PIC::~PIC()>:
c0025aa2:	83 ec 0c             	sub    esp,0xc
c0025aa5:	ba d0 92 02 c0       	mov    edx,0xc00292d0
c0025aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025aae:	89 10                	mov    DWORD PTR [eax],edx
c0025ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ab4:	83 ec 0c             	sub    esp,0xc
c0025ab7:	50                   	push   eax
c0025ab8:	e8 8b e5 fe ff       	call   c0014048 <InterruptController::~InterruptController()>
c0025abd:	83 c4 10             	add    esp,0x10
c0025ac0:	90                   	nop
c0025ac1:	83 c4 0c             	add    esp,0xc
c0025ac4:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0025ac6 <PIC::~PIC()>:
c0025ac6:	83 ec 0c             	sub    esp,0xc
c0025ac9:	83 ec 0c             	sub    esp,0xc
c0025acc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ad0:	e8 cd ff ff ff       	call   c0025aa2 <PIC::~PIC()>
c0025ad5:	83 c4 10             	add    esp,0x10
c0025ad8:	83 ec 08             	sub    esp,0x8
c0025adb:	68 58 21 00 00       	push   0x2158
c0025ae0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025ae4:	e8 86 c6 fe ff       	call   c001216f <operator delete(void*, unsigned long)>
c0025ae9:	83 c4 10             	add    esp,0x10
c0025aec:	83 c4 0c             	add    esp,0xc
c0025aef:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0025af0 <APICTimer::~APICTimer()>:
c0025af0:	83 ec 0c             	sub    esp,0xc
c0025af3:	ba 24 93 02 c0       	mov    edx,0xc0029324
c0025af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025afc:	89 10                	mov    DWORD PTR [eax],edx
c0025afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b02:	83 ec 0c             	sub    esp,0xc
c0025b05:	50                   	push   eax
c0025b06:	e8 3b 02 ff ff       	call   c0015d46 <Timer::~Timer()>
c0025b0b:	83 c4 10             	add    esp,0x10
c0025b0e:	90                   	nop
c0025b0f:	83 c4 0c             	add    esp,0xc
c0025b12:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0025b14 <APICTimer::~APICTimer()>:
c0025b14:	83 ec 0c             	sub    esp,0xc
c0025b17:	83 ec 0c             	sub    esp,0xc
c0025b1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b1e:	e8 cd ff ff ff       	call   c0025af0 <APICTimer::~APICTimer()>
c0025b23:	83 c4 10             	add    esp,0x10
c0025b26:	83 ec 08             	sub    esp,0x8
c0025b29:	68 60 01 00 00       	push   0x160
c0025b2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b32:	e8 38 c6 fe ff       	call   c001216f <operator delete(void*, unsigned long)>
c0025b37:	83 c4 10             	add    esp,0x10
c0025b3a:	83 c4 0c             	add    esp,0xc
c0025b3d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0025b3e <PIT::~PIT()>:
c0025b3e:	83 ec 0c             	sub    esp,0xc
c0025b41:	ba 74 93 02 c0       	mov    edx,0xc0029374
c0025b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b4a:	89 10                	mov    DWORD PTR [eax],edx
c0025b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b50:	83 ec 0c             	sub    esp,0xc
c0025b53:	50                   	push   eax
c0025b54:	e8 ed 01 ff ff       	call   c0015d46 <Timer::~Timer()>
c0025b59:	83 c4 10             	add    esp,0x10
c0025b5c:	90                   	nop
c0025b5d:	83 c4 0c             	add    esp,0xc
c0025b60:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0025b62 <PIT::~PIT()>:
c0025b62:	83 ec 0c             	sub    esp,0xc
c0025b65:	83 ec 0c             	sub    esp,0xc
c0025b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b6c:	e8 cd ff ff ff       	call   c0025b3e <PIT::~PIT()>
c0025b71:	83 c4 10             	add    esp,0x10
c0025b74:	83 ec 08             	sub    esp,0x8
c0025b77:	68 5c 01 00 00       	push   0x15c
c0025b7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025b80:	e8 ea c5 fe ff       	call   c001216f <operator delete(void*, unsigned long)>
c0025b85:	83 c4 10             	add    esp,0x10
c0025b88:	83 c4 0c             	add    esp,0xc
c0025b8b:	c3                   	ret    
